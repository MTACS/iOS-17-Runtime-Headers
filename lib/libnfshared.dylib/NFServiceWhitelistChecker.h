
@interface NFServiceWhitelistChecker : NSObject <NSCopying> {
    bool  _allowBackgroundedSession;
    NSString * _applicationIdentifier;
    bool  _bgTagReadingAssertion;
    bool  _cardModeAccess;
    bool  _chAssertion;
    NSString * _clientName;
    int  _clientProcessIdentifier;
    bool  _dontResetAssertion;
    bool  _eCommerceAccess;
    bool  _hceAccess;
    bool  _ignoreAppStateMonitor;
    bool  _internalAccess;
    bool  _iso15693ReaderAccess;
    NSMutableArray * _iso15693TagAccessFilters;
    bool  _lpemConfigSessionAccess;
    bool  _lpmFactoryTest;
    bool  _miniNVWriteAccess;
    bool  _ndefReaderAccess;
    bool  _nfcTagReaderPACEPollingAllow;
    bool  _pollingProfileUpdate;
    bool  _purpleTrustAccess;
    bool  _radioToggle;
    bool  _readerInternalAccess;
    NSString * _readerPurposeString;
    bool  _remoteAdminAccess;
    bool  _seLoggingSessionAccess;
    bool  _seSessionAccess;
    bool  _seshatAccess;
    bool  _singleUserAccess;
    bool  _surfSessionAccess;
    bool  _tagReaderAccess;
    NSMutableOrderedSet * _trustedISO7816AidList;
    bool  _useUnfilteredApplets;
    bool  _vasReaderAccess;
}

@property (nonatomic, readonly) bool allowBackgroundedSession;
@property (nonatomic, retain) NSString *applicationIdentifier;
@property (nonatomic, readonly) bool bgTagReadingAssertion;
@property (nonatomic, readonly) bool cardModeAccess;
@property (nonatomic, readonly) bool chAssertion;
@property (nonatomic, readonly, copy) NSString *clientName;
@property (nonatomic, readonly) bool dontResetAssertion;
@property (nonatomic, readonly) bool eCommerceAccess;
@property (nonatomic, readonly) bool externalReaderAccessAllow;
@property (nonatomic, readonly) bool hceAccess;
@property (nonatomic, readonly) bool ignoreAppStateMonitor;
@property (nonatomic, readonly) bool internalAccess;
@property (nonatomic, readonly) bool lpemConfigSessionAccess;
@property (nonatomic, readonly) bool lpmFactoryTest;
@property (nonatomic, readonly) bool miniNVWriteAccess;
@property (nonatomic, readonly) bool nfcISO15693ReaderAccess;
@property (nonatomic, readonly) bool nfcNDEFReaderAccess;
@property (nonatomic, readonly) bool nfcTagReaderAccess;
@property (nonatomic, readonly) bool nfcTagReaderPACEPollingAllow;
@property (nonatomic, readonly) bool nfcVASReaderAccess;
@property (nonatomic, readonly) bool pollingProfileUpdate;
@property (nonatomic, readonly) bool purpleTrustAccess;
@property (nonatomic, readonly) bool radioToggle;
@property (nonatomic, readonly) bool readerInternalAccess;
@property (nonatomic, readonly, retain) NSString *readerPurposeString;
@property (nonatomic, readonly) bool remoteAdminAccess;
@property (nonatomic, readonly) bool seLoggingSessionAccess;
@property (nonatomic, readonly) bool seSessionAccess;
@property (nonatomic, readonly) bool seshatAccess;
@property (nonatomic, readonly) double sessionTimeLimit;
@property (nonatomic, readonly) bool singleUserAccess;
@property (nonatomic, readonly) bool surfSessionAccess;
@property (nonatomic, readonly, retain) NSOrderedSet *trustedISO7816AidList;
@property (nonatomic, readonly) bool useUnfilteredApplets;

- (void).cxx_destruct;
- (id)_arrayValueOfEntitlement:(id)arg1 secTask:(struct __SecTask { }*)arg2;
- (bool)_boolValueOfEntitlement:(id)arg1 secTask:(struct __SecTask { }*)arg2;
- (void*)_copyValueOfEntitlement:(id)arg1 secTask:(struct __SecTask { }*)arg2;
- (id)_createAccessDictionaryFromICCode:(id)arg1 serialNumber:(id)arg2 maximumFilterStringLength:(unsigned long long)arg3;
- (void)_initCoreNFCEntitlements:(id)arg1 secTask:(struct __SecTask { }*)arg2;
- (void)_initISO15693TagSpecifier:(id)arg1;
- (void)_initISO7816PermissibleAIDListWithSecTask:(struct __SecTask { }*)arg1 infoPlist:(id)arg2;
- (void)_initTagSpecifier:(id)arg1 maximumFilterStringLength:(unsigned long long)arg2;
- (bool)_isAIDStringValid:(id)arg1;
- (id)_stringFromArray:(id)arg1;
- (id)_stringFromISO15693AccessFilterList;
- (id)_stringValueOfEntitlement:(id)arg1 secTask:(struct __SecTask { }*)arg2;
- (bool)allowBackgroundedSession;
- (id)applicationIdentifier;
- (bool)bgTagReadingAssertion;
- (bool)cardModeAccess;
- (bool)chAssertion;
- (id)clientName;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (bool)dontResetAssertion;
- (bool)eCommerceAccess;
- (bool)externalReaderAccessAllow;
- (id)getAppInfoDictionary;
- (bool)hceAccess;
- (bool)ignoreAppStateMonitor;
- (id)initWithConnection:(id)arg1;
- (id)initWithConnection:(id)arg1 coreNFCConnection:(bool)arg2;
- (bool)internalAccess;
- (bool)lpemConfigSessionAccess;
- (bool)lpmFactoryTest;
- (bool)miniNVWriteAccess;
- (bool)nfcISO15693ReaderAccess;
- (bool)nfcNDEFReaderAccess;
- (bool)nfcTagReaderAccess;
- (bool)nfcTagReaderPACEPollingAllow;
- (bool)nfcVASReaderAccess;
- (bool)pollingProfileUpdate;
- (bool)purpleTrustAccess;
- (bool)radioToggle;
- (bool)readerInternalAccess;
- (id)readerPurposeString;
- (bool)remoteAdminAccess;
- (bool)seLoggingSessionAccess;
- (bool)seSessionAccess;
- (bool)seshatAccess;
- (double)sessionTimeLimit;
- (void)setApplicationIdentifier:(id)arg1;
- (bool)singleUserAccess;
- (bool)surfSessionAccess;
- (id)trustedISO7816AidList;
- (bool)useUnfilteredApplets;
- (unsigned int)validateISO15693TagAccessWithManufacturerCode:(unsigned long long)arg1;
- (unsigned int)validateISO15693TagAccessWithManufacturerCode:(unsigned long long)arg1 serialNumber:(id)arg2;
- (unsigned int)validateISO15693TagAcesssWithUID:(id)arg1;

@end
