
@interface FPDDomain : NSObject <FPDDomainIndexerDelegate, FPDFileCoordinationProviderDelegate> {
    bool  _cantStartup;
    NSMutableDictionary * _coordinatorMetadataPerURL;
    <FPDDomainBackend> * _deactivatedBackend;
    <FPDDomainBackend> * _defaultBackend;
    NSDictionary * _domainUserInfo;
    bool  _ejectable;
    <FPDDomainBackend> * _extensionBackend;
    NSArray * _extensionStorageURLs;
    NSMutableDictionary * _filePresenters;
    Class  _fpfsClass;
    NSData * _fpfsRootBookmarkData;
    Class  _fpfsTestingBackendClass;
    NSString * _identifier;
    FPDDomainIndexer * _indexer;
    bool  _indexerStarted;
    bool  _indexerStopped;
    bool  _invalidated;
    bool  _isObservingRoot;
    bool  _isUsingFPFS;
    NSObject<OS_os_log> * _log;
    bool  _needsReimport;
    NSFileProviderDomain * _nsDomain;
    NSFileProviderDomain * _nsDomainOrNilForDefault;
    NSURL * _previouslyAccessedSecurityScopedURL;
    NSMutableDictionary * _providedItemRecursiveGenCountPerURL;
    NSOperationQueue * _providedItemsOperationQueue;
    FPDProvider * _provider;
    NSString * _providerDomainID;
    NSString * _purposeIdentifier;
    FPPacer * _rootCreationPacer;
    SAPathManager * _saPathManager;
    NSObject<OS_dispatch_queue> * _serialQueue;
    <FPDExtensionSessionProtocol> * _session;
    NSNumber * _shouldDisconnectDueToLowDiskSpace;
    bool  _shouldIndexWhenStart;
    bool  _started;
    NSError * _startupError;
    NSURL * _stateURL;
    bool  _unableToStartup;
    NSCache * _versionsCache;
    FPDVolumeManager * _volumeManager;
}

@property (nonatomic, readonly) bool backgroundActivityIsPaused;
@property (nonatomic, readonly) NSArray *checkableURLs;
@property (nonatomic, readonly) NSArray *coordinationRootURLs;
@property (nonatomic, readonly) <FPDDomainBackend> *deactivatedBackend;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) <FPDDomainBackend> *defaultBackend;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long disconnectionState;
@property (nonatomic, retain) NSDictionary *domainUserInfo;
@property (nonatomic) bool ejectable;
@property (nonatomic, readonly) long long errorGenerationCount;
@property (nonatomic, readonly) <FPDDomainBackend> *extensionBackend;
@property (nonatomic, readonly) NSArray *extensionStorageURLs;
@property (nonatomic, retain) NSMutableDictionary *filePresenters;
@property (nonatomic, readonly) NSString *fp_prettyDescription;
@property (nonatomic, copy) NSData *fpfsRootBookmarkData;
@property (nonatomic, retain) Class fpfsTestingBackendClass;
@property (readonly) unsigned long long hash;
@property (getter=isHidden, nonatomic, readonly) bool hidden;
@property (getter=isHiddenByUser, nonatomic) bool hiddenByUser;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic, retain) FPDDomainIndexer *indexer;
@property (nonatomic, readonly) bool invalidated;
@property (nonatomic, readonly) bool isConnectedToAppExtension;
@property (nonatomic, readonly) NSObject<OS_os_log> *log;
@property (nonatomic) bool needsReimport;
@property (nonatomic, readonly) NSFileProviderDomain *nsDomain;
@property (nonatomic, retain) NSFileProviderDomain *nsDomainOrNilForDefault;
@property (nonatomic, readonly) FPDProvider *provider;
@property (nonatomic, readonly) NSString *providerDomainID;
@property (nonatomic, readonly) NSString *purposeIdentifier;
@property (nonatomic, readonly) NSArray *rootURLs;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (nonatomic, readonly) <FPDExtensionSessionProtocol> *session;
@property (nonatomic) bool shouldIndexWhenStart;
@property (nonatomic) bool started;
@property (nonatomic, retain) NSError *startupError;
@property (nonatomic, readonly) NSURL *stateURL;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSURL *supportURL;
@property (nonatomic) bool supportsSearch;
@property (nonatomic) bool supportsSyncingTrash;
@property (nonatomic) bool unableToStartup;
@property (nonatomic) bool userEnabled;
@property (nonatomic, readonly) NSCache *versionsCache;
@property (nonatomic, readonly) FPDVolume *volume;

- (void).cxx_destruct;
- (void)_cancelProvidingItemAtURL:(id)arg1 toReaderWithID:(id)arg2;
- (id)_fileReactorID;
- (bool)_isProviderBlockingConsumer:(id)arg1;
- (void)_movingItemAtURL:(id)arg1 withInfo:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_physicalURLForURL:(id)arg1;
- (void)_prepareFileCoordinationProviders;
- (void)_provideItemAtURL:(id)arg1 toReaderWithID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_provideItemAtURL:(id)arg1 withInfo:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_provideItemAtURL:(id)arg1 withReaderID:(id)arg2 withProcessID:(int)arg3 withAuditToken:(struct { unsigned int x1[8]; })arg4 kernelInfo:(id)arg5 readingOptions:(unsigned long long)arg6 completionHandler:(id /* block */)arg7;
- (void)_providedItemAtURL:(id)arg1 didGainPresenterWithID:(id)arg2;
- (void)_providedItemAtURL:(id)arg1 didLosePresenterWithID:(id)arg2;
- (void)_providedItemAtURL:(id)arg1 withPresenterWithID:(id)arg2 didMoveToURL:(id)arg3;
- (id)_providedItemsOperationQueue;
- (void)_registerFileCoordinatorAndSpaceForceWithCompletion:(id /* block */)arg1;
- (void)_registerInSpaceForce:(id)arg1;
- (id)_removeProgressForProvidingItemAtURL:(id)arg1 toReaderWithID:(id)arg2;
- (bool)_shouldDisconnectDueToLowDiskSpace;
- (id)_siblingDelegateForURL:(id)arg1;
- (void)_startObservingRootAndResumeIndexerWithReason:(id)arg1 completion:(id /* block */)arg2;
- (void)_startWithReason:(id)arg1 completion:(id /* block */)arg2;
- (void)_unregisterFromFileCoordinatorAndSpaceForce;
- (void)_unregisterURLFromSpaceForce:(id)arg1;
- (bool)_wantsPresenterNotifications;
- (void)_writerWithID:(id)arg1 didFinishWritingForURL:(id)arg2;
- (bool)backgroundActivityIsPaused;
- (void)cancelPendingCoordinations;
- (id)checkableURLs;
- (id)cleanupDomainWithMode:(unsigned long long)arg1;
- (id)coordinationRootURLs;
- (void)createRootAndObserveIfNeededWithReason:(id)arg1 completion:(id /* block */)arg2;
- (bool)createRootByImportingDirectoryAtURL:(id)arg1 knownFolders:(id)arg2 error:(id*)arg3;
- (void)createRootURLWithCompletion:(id /* block */)arg1;
- (void)daemonSideItemChange:(id)arg1 changedFields:(unsigned long long)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)deactivatedBackend;
- (id)defaultBackend;
- (id)description;
- (void)didChangeItemID:(id)arg1 request:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)didRefreshRootURLsWithCompletionHandler:(id /* block */)arg1;
- (unsigned long long)disconnectionState;
- (void)diskImportFinished;
- (id)domainUserInfo;
- (void)downloadItemWithItemID:(id)arg1 request:(id)arg2 progress:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)downloadVersionThumbnail:(id)arg1 version:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)downloadVersionWithItemID:(id)arg1 etag:(id)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)downloadVersionWithItemID:(id)arg1 version:(id)arg2 originalURL:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)dumpInternalStateTo:(id)arg1 request:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)dumpStateTo:(id)arg1 limitNumberOfItems:(bool)arg2;
- (bool)ejectable;
- (long long)errorGenerationCount;
- (id)extensionBackend;
- (void)extensionIndexer:(id)arg1 didChangeNeedsAuthentification:(bool)arg2;
- (id)extensionStorageURLs;
- (void)fetchOperationServiceOrEndpointWithRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)filePresenters;
- (void)finishSetup;
- (void)forceFSIngestionForItemID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)forceIngestionAtURL:(id)arg1;
- (void)forceIngestionForItemID:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)fp_prettyDescription;
- (id)fpfsRootBookmarkData;
- (Class)fpfsTestingBackendClass;
- (id)getProvidedItemRecursiveGenerationCountForItemAtURL:(id)arg1;
- (id)identifier;
- (id)indexer;
- (id)initWithIdentifier:(id)arg1 nsDomain:(id)arg2 extensionStorageURLs:(id)arg3 purposeIdentifier:(id)arg4 fpfsClass:(Class)arg5 provider:(id)arg6 volumeManager:(id)arg7;
- (void)invalidateSession;
- (void)invalidateWithReason:(id)arg1;
- (bool)invalidated;
- (bool)isConnectedToAppExtension;
- (bool)isDefaultDomain;
- (bool)isHidden;
- (bool)isHiddenByUser;
- (bool)isHiddenDefaultDomain;
- (bool)isProviderForURL:(id)arg1;
- (bool)isUsingFPFS;
- (id)log;
- (id)materializedURLForItemID:(id)arg1;
- (bool)needsReimport;
- (long long)nonEvictableSpace;
- (id)nsDomain;
- (id)nsDomainOrNilForDefault;
- (id)provider;
- (id)providerDomainID;
- (id)providerSupportURL;
- (id)providerVersion;
- (id)purposeIdentifier;
- (void)refreshConnectionState;
- (id)rootURLs;
- (id)serialQueue;
- (id)session;
- (void)setDefaultBackend:(id)arg1;
- (void)setDomainUserInfo:(id)arg1;
- (void)setEjectable:(bool)arg1;
- (void)setExtensionBackend:(id)arg1;
- (void)setFilePresenters:(id)arg1;
- (void)setFpfsRootBookmarkData:(id)arg1;
- (void)setFpfsTestingBackendClass:(Class)arg1;
- (void)setHiddenByUser:(bool)arg1;
- (void)setIndexer:(id)arg1;
- (void)setNeedsReimport:(bool)arg1;
- (void)setNsDomainOrNilForDefault:(id)arg1;
- (void)setProvidedItemRecursiveGenerationCount:(id)arg1 forItemAtURL:(id)arg2;
- (void)setShouldIndexWhenStart:(bool)arg1;
- (void)setStarted:(bool)arg1;
- (void)setStartupError:(id)arg1;
- (void)setSupportsSearch:(bool)arg1;
- (void)setSupportsSyncingTrash:(bool)arg1;
- (void)setUnableToStartup:(bool)arg1;
- (void)setUserEnabled:(bool)arg1;
- (bool)shouldIndexWhenStart;
- (void)startWithReason:(id)arg1 completion:(id /* block */)arg2;
- (bool)started;
- (id)startupError;
- (id)stateURL;
- (void)stopIndexer;
- (id)supportURL;
- (bool)supportsPickingFolders;
- (bool)supportsSearch;
- (bool)supportsSyncingTrash;
- (void)telemetryReportWithCompletionHandler:(id /* block */)arg1;
- (bool)unableToStartup;
- (bool)userEnabled;
- (void)valuesForAttributes:(id)arg1 forURL:(id)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)versionsCache;
- (id)volume;

@end
