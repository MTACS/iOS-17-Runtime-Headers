
@interface ACHAchievementStore : NSObject <ACHAchievementStoring, ACHEarnedInstanceStoreObserving, ACHTemplateAssetRegistryDelegate, ACHTemplateStoreObserving> {
    NSMutableDictionary * _achievementsByPrerequisiteTemplateName;
    NSMutableDictionary * _achievementsByTemplateUniqueName;
    ACHAwardsClient * _client;
    ACHEarnedInstanceStore * _earnedInstanceStore;
    bool  _earnedInstancsStoreFinishedInitialFetch;
    NSMutableArray * _initialFetchObserversToCall;
    NSObject<OS_dispatch_queue> * _internalQueue;
    bool  _needsUpdateWhenProtectedDataAvailable;
    NSObject<OS_dispatch_queue> * _notificationQueue;
    NSHashTable * _observers;
    ACHAchievementProgressEngine * _progressEngine;
    int  _protectedDataToken;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _syncLock;
    ACHTemplateAssetRegistry * _templateAssetRegistry;
    ACHTemplateStore * _templateStore;
    bool  _templateStoreFinishedInitialFetch;
}

@property (nonatomic, retain) NSMutableDictionary *achievementsByPrerequisiteTemplateName;
@property (nonatomic, retain) NSMutableDictionary *achievementsByTemplateUniqueName;
@property (nonatomic, retain) ACHAwardsClient *client;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) ACHEarnedInstanceStore *earnedInstanceStore;
@property (nonatomic) bool earnedInstancsStoreFinishedInitialFetch;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *internalQueue;
@property (nonatomic) bool needsUpdateWhenProtectedDataAvailable;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *notificationQueue;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic, retain) ACHAchievementProgressEngine *progressEngine;
@property (nonatomic) int protectedDataToken;
@property (readonly) Class superclass;
@property (nonatomic, retain) ACHTemplateAssetRegistry *templateAssetRegistry;
@property (nonatomic, retain) ACHTemplateStore *templateStore;
@property (nonatomic) bool templateStoreFinishedInitialFetch;

- (void).cxx_destruct;
- (void)_handleProtectedDataAvailabilityChangeNotification;
- (bool)_initialFetchComplete;
- (void)_lock_addProgressAndGoalToAchievements:(id)arg1;
- (void)_lock_addTemplatesToLocalStore:(id)arg1;
- (id)_lock_ephemeralMonthlyChallengeAchievementForTemplateUniqueName:(id)arg1 earnedInstance:(id)arg2;
- (void)_lock_notifyObserversOfInitialFetchCompletion;
- (id)_lock_populateMostRecentEarnedInstanceAndCountForAllAchievements;
- (id)_lock_populateMostRecentEarnedInstancesAndCountsForAchievements:(id)arg1;
- (void)_lock_populatePrerequisiteMet:(id)arg1;
- (void)_lock_populatePrerequisiteMetForAchievements:(id)arg1;
- (void)_lock_populatePrerequisiteMetForAllAchievements;
- (void)_lock_populateResourcesForAchievementsWithTemplateSourceName:(id)arg1;
- (void)_lock_removeTemplatesFromLocalStore:(id)arg1;
- (void)_notifyObserversOfNewAchievements:(id)arg1;
- (void)_notifyObserversOfRemovedAchievements:(id)arg1;
- (void)_notifyObserversOfUpdatedAchievements:(id)arg1;
- (void)_performWithLock:(id /* block */)arg1;
- (void)_updateProgressAndGoalFor:(id)arg1 progressQuantity:(id)arg2 goalQuantity:(id)arg3;
- (id)achievementWithTemplateUniqueName:(id)arg1;
- (id)achievementsByPrerequisiteTemplateName;
- (id)achievementsByTemplateUniqueName;
- (id)achievementsForEarnedDateComponents:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)allAchievements;
- (id)client;
- (void)dealloc;
- (id)earnedInstanceStore;
- (void)earnedInstanceStore:(id)arg1 didAddNewEarnedInstances:(id)arg2;
- (void)earnedInstanceStore:(id)arg1 didRemoveEarnedInstances:(id)arg2;
- (void)earnedInstanceStoreDidFinishInitialFetch:(id)arg1;
- (void)earnedInstanceStoreDidReceiveSyncNotification:(id)arg1;
- (bool)earnedInstancsStoreFinishedInitialFetch;
- (id)ephemeralAchievementWithTemplateUniqueName:(id)arg1;
- (id)initWithClient:(id)arg1 templateStore:(id)arg2 earnedInstanceStore:(id)arg3 templateAssetRegistry:(id)arg4 progressEngine:(id)arg5;
- (id)internalQueue;
- (void)loadAllAchievementsFromDatabaseIfNecessaryWithCompletionHandler:(id /* block */)arg1;
- (bool)needsUpdateWhenProtectedDataAvailable;
- (id)notificationQueue;
- (id)observers;
- (void)processAchievementProgressUpdates:(id)arg1;
- (id)progressEngine;
- (int)protectedDataToken;
- (void)recalculateProgressForAllAchievements;
- (void)removeObserver:(id)arg1;
- (void)requestUpdateProgressValuesForProgressProvider:(id)arg1;
- (void)setAchievementsByPrerequisiteTemplateName:(id)arg1;
- (void)setAchievementsByTemplateUniqueName:(id)arg1;
- (void)setClient:(id)arg1;
- (void)setEarnedInstanceStore:(id)arg1;
- (void)setEarnedInstancsStoreFinishedInitialFetch:(bool)arg1;
- (void)setInternalQueue:(id)arg1;
- (void)setNeedsUpdateWhenProtectedDataAvailable:(bool)arg1;
- (void)setNotificationQueue:(id)arg1;
- (void)setObservers:(id)arg1;
- (void)setProgressEngine:(id)arg1;
- (void)setProtectedDataToken:(int)arg1;
- (void)setTemplateAssetRegistry:(id)arg1;
- (void)setTemplateStore:(id)arg1;
- (void)setTemplateStoreFinishedInitialFetch:(bool)arg1;
- (id)templateAssetRegistry;
- (void)templateAssetRegistry:(id)arg1 didUpdateResourcesForTemplatesWithSourceName:(id)arg2;
- (id)templateStore;
- (void)templateStore:(id)arg1 didAddNewTemplates:(id)arg2;
- (void)templateStore:(id)arg1 didRemoveTemplates:(id)arg2;
- (void)templateStoreDidFinishInitialFetch:(id)arg1;
- (bool)templateStoreFinishedInitialFetch;

@end
