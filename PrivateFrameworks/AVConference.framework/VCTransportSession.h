
@interface VCTransportSession : NSObject {
    unsigned int  _basebandNotificationRegistrationToken;
    VCConnectionManager * _connectionManager;
    NSObject * _connectionSetupPiggybackBlob;
    id /* block */  _eventHandler;
    void * _handlerContext;
    NSObject<OS_dispatch_queue> * _handlerQueue;
    bool  _isCallActive;
    NSString * _localFrameworkVersion;
    struct tagVCNWConnectionMonitor { } * _monitor;
    int (* _notificationHandler;
    NSObject<OS_dispatch_queue> * _notificationQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _nwMonitorLock;
    int (* _packetEventHandler;
    TimingCollection * _perfTimings;
    NSDictionary * _qrExperiments;
    <VCConnectionProtocol> * _registeredConnection;
    NSString * _remoteFrameworkVersion;
    struct opaqueRTCReporting { } * _reportingAgent;
    bool  _requiresWiFi;
    bool  _shouldIgnoreConnectionRefusedError;
    bool  _shouldSetupNWMonitor;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _stateLock;
    NSObject<OS_dispatch_queue> * _stateQueue;
    NSMutableArray * _streams;
    bool  _useCompressedConnectionData;
}

@property (nonatomic, readonly) unsigned int basebandNotificationRegistrationToken;
@property (nonatomic, readonly) VCConnectionManager *connectionManager;
@property (nonatomic, retain) NSObject *connectionSetupPiggybackBlob;
@property (nonatomic, readonly) unsigned int connectionSetupRTTEstimate;
@property (nonatomic, readonly) int detailedErrorCode;
@property (nonatomic, copy) id /* block */ eventHandler;
@property (setter=setCallActive:, nonatomic) bool isCallActive;
@property (nonatomic, readonly) bool isHandoverSupported;
@property (readonly) bool isIPv6;
@property (nonatomic, readonly) bool isRemoteOSPreLion;
@property (readonly) int networkInterfaceType;
@property (readonly) unsigned int networkMTU;
@property (nonatomic, readonly) struct tagVCNWConnectionMonitor { }*nwMonitor;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *nwMonitorEventHandlerQueue;
@property (nonatomic, retain) TimingCollection *perfTimings;
@property (nonatomic, retain) <VCConnectionProtocol> *registeredConnection;
@property (nonatomic) bool requiresWiFi;
@property (nonatomic) bool shouldIgnoreConnectionRefusedError;
@property (nonatomic) bool shouldSetupNWMonitor;
@property (nonatomic) bool useCompressedConnectionData;

+ (unsigned int)trafficClassForStreamType:(unsigned int)arg1;
+ (int)vtpPacketTypeForStreamType:(unsigned int)arg1;

- (unsigned int)basebandNotificationRegistrationToken;
- (void)callEventHandlerWithEvent:(unsigned int)arg1 info:(id)arg2;
- (void)cleanupBaseband;
- (id)connectionManager;
- (id)connectionSetupPiggybackBlob;
- (unsigned int)connectionSetupRTTEstimate;
- (struct tagVCNWConnectionMonitor { }*)createNWMonitor;
- (int)createTransportStream:(struct OpaqueVCTransportStream {}**)arg1 withType:(unsigned int)arg2 options:(id)arg3;
- (int)createVFD:(int*)arg1 forStreamType:(unsigned int)arg2;
- (void)dealloc;
- (void)deregisterBasebandNotifications;
- (int)deregisterNotificationForTransportStream:(struct OpaqueVCTransportStream { }*)arg1;
- (void)destroyNWMonitor;
- (int)detailedErrorCode;
- (id /* block */)eventHandler;
- (int)flushBasebandQueueForConnection:(id)arg1 payloadInfoList:(id)arg2;
- (int)flushBasebandQueueWithPayloads:(id)arg1 flushCount:(unsigned int*)arg2;
- (bool)getConnectionSetupData:(id*)arg1 withOptions:(id)arg2 error:(id*)arg3;
- (int)getSignalStrengthBars:(int*)arg1 displayBars:(int*)arg2 maxDisplayBars:(int*)arg3;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)arg1;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)arg1;
- (void)handleTransportStreamDeactivated:(struct OpaqueVCTransportStream { }*)arg1;
- (id)initWithNotificationQueue:(id)arg1 reportingAgent:(struct opaqueRTCReporting { }*)arg2;
- (id)initWithNotificationQueue:(id)arg1 reportingAgent:(struct opaqueRTCReporting { }*)arg2 notificationHandler:(int (*)arg3 eventHandler:(int (*)arg4 handlerQueue:(id)arg5 context:(void*)arg6;
- (bool)isCallActive;
- (bool)isHandoverSupported;
- (bool)isIPv6;
- (bool)isRemoteOSPreLion;
- (int)networkInterfaceType;
- (unsigned int)networkMTU;
- (struct tagVCNWConnectionMonitor { }*)nwMonitor;
- (id)nwMonitorEventHandlerQueue;
- (id)perfTimings;
- (int)registerBasebandNotificationsForConnection:(id)arg1;
- (id)registeredConnection;
- (void)reportNetworkConditionsDegraded;
- (bool)requiresWiFi;
- (void)resetActiveConnection;
- (void)setCallActive:(bool)arg1;
- (void)setConnectionSelectionVersionWithLocalFrameworkVersion:(id)arg1 remoteFrameworkVersion:(id)arg2;
- (void)setConnectionSetupPiggybackBlob:(id)arg1;
- (void)setEventHandler:(id /* block */)arg1;
- (void)setOneToOneModeEnabled:(bool)arg1 isInitiator:(bool)arg2;
- (void)setPerfTimings:(id)arg1;
- (void)setRegisteredConnection:(id)arg1;
- (void)setRequiresWiFi:(bool)arg1;
- (void)setShouldIgnoreConnectionRefusedError:(bool)arg1;
- (void)setShouldSetupNWMonitor:(bool)arg1;
- (void)setUseCompressedConnectionData:(bool)arg1;
- (void)setupNWMonitor;
- (void)setupNWMonitorNotificationHandler;
- (void)setupNWMonitorPacketEventHandler;
- (bool)shouldIgnoreConnectionRefusedError;
- (bool)shouldSetupNWMonitor;
- (void)start;
- (void)stop;
- (int)updateBasebandForConnection:(id)arg1;
- (int)updateQualityIndicator:(int)arg1 isIPv6:(bool)arg2;
- (bool)useCompressedConnectionData;

@end
