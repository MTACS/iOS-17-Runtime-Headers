
@interface VCSessionParticipant : VCObject <VCAudioIODelegate, VCAudioIOSink, VCAudioIOSource, VCAudioPowerSpectrumSourceDelegate, VCConnectionChangedHandler, VCMediaStreamDelegate, VCMediaStreamGroupDelegate, VCRedundancyControllerDelegate, VCSecurityEventHandler> {
    bool  _audioEnabled;
    VCAudioIO * _audioIO;
    bool  _audioPaused;
    bool  _audioPausedToStart;
    float  _audioPosition;
    AVCBasebandCongestionDetector * _basebandCongestionDetector;
    VCCallInfoBlob * _callInfoBlob;
    unsigned int  _cellularUniqueTag;
    union tagNTP { 
        unsigned long long wide; 
        struct { 
            unsigned int frac; 
            unsigned int sec; 
        } time; 
    }  _creationTime;
    int  _decryptionTimeOutInterval;
    id  _delegate;
    int  _deviceRole;
    long long  _direction;
    NSString * _idsDestination;
    unsigned long long  _idsParticipantID;
    bool  _isGKVoiceChat;
    bool  _isLowLatencyAudio;
    bool  _isMuted;
    double  _lastParticipantMKMRecoveryTime;
    bool  _localOnWiFi;
    NSData * _mediaBlobCompressed;
    VCSessionMediaNegotiator * _mediaNegotiator;
    struct tagVCMediaQueue { } * _mediaQueue;
    VCMediaRecorder * _mediaRecorder;
    NSMutableDictionary * _mediaTypeMixingList;
    NSMutableDictionary * _mediaTypeSettingsDict;
    NSMutableArray * _micStreamGroups;
    VCNetworkFeedbackController * _networkFeedbackController;
    VCSessionParticipantOneToOneConfig * _oneToOneConfig;
    bool  _oneToOneModeEnabled;
    NSData * _opaqueData;
    NSDictionary * _participantInfo;
    double  _participantMKMRecoveryTimeout;
    NSObject<OS_dispatch_queue> * _participantQueue;
    NSMutableDictionary * _participantStreamTokens;
    unsigned int  _preferredIOSampleRate;
    unsigned int  _preferredIOSamplesPerFrame;
    unsigned char  _presentationState;
    int  _processId;
    id  _reportingAgentWeak;
    bool  _screenEnabled;
    VCSecurityKeyManager * _securityKeyManager;
    NSString * _sessionUUID;
    bool  _sharingEnabled;
    unsigned int  _state;
    AVCStatisticsCollector * _statisticsCollector;
    id  _streamDelegate;
    NSMutableDictionary * _streamGroups;
    VCAudioRuleCollection * _supportedAudioRules;
    unsigned int  _transportSessionID;
    NSString * _uuid;
    bool  _videoEnabled;
    bool  _videoPaused;
    bool  _videoPausedToStart;
    VCRedundancyControllerVideo * _videoRedundancyController;
    NSMutableArray * _videoStreamGroups;
    float  _volume;
}

@property (nonatomic, readonly) NSArray *allParticipantStreamInfo;
@property (getter=isAudioEnabled, nonatomic) bool audioEnabled;
@property (getter=isAudioPaused, nonatomic) bool audioPaused;
@property (nonatomic, readonly) float audioPosition;
@property (nonatomic, retain) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (readonly) VCCallInfoBlob *callInfoBlob;
@property (nonatomic) unsigned int cellularUniqueTag;
@property (nonatomic, readonly) union tagNTP { unsigned long long x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } creationTime;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <VCSessionParticipantDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long idsParticipantID;
@property (getter=isLocalOnWiFi, nonatomic) bool localOnWiFi;
@property (nonatomic, readonly) VCSessionMediaNegotiator *mediaNegotiator;
@property (nonatomic) struct tagVCMediaQueue { }*mediaQueue;
@property (nonatomic, retain) VCMediaRecorder *mediaRecorder;
@property (nonatomic, readonly) NSDictionary *mediaTypeMixingList;
@property (getter=isMuted, nonatomic) bool muted;
@property (nonatomic, retain) VCSessionParticipantOneToOneConfig *oneToOneConfig;
@property (getter=isOneToOneModeEnabled, nonatomic) bool oneToOneModeEnabled;
@property (nonatomic, readonly) NSData *opaqueData;
@property (nonatomic, readonly) int operatingMode;
@property (nonatomic, readonly) NSDictionary *participantStreamTokens;
@property (nonatomic) unsigned char presentationState;
@property (nonatomic) struct opaqueRTCReporting { }*reportingAgent;
@property (getter=isScreenEnabled, nonatomic) bool screenEnabled;
@property (nonatomic) bool sharingEnabled;
@property (nonatomic, retain) AVCStatisticsCollector *statisticsCollector;
@property (nonatomic) <VCSessionParticipantStreamDelegate> *streamDelegate;
@property (readonly) Class superclass;
@property (nonatomic, readonly) VCAudioRuleCollection *supportedAudioRules;
@property (nonatomic, readonly) NSString *uuid;
@property (getter=isVideoEnabled, nonatomic) bool videoEnabled;
@property (getter=isVideoPaused, nonatomic) bool videoPaused;
@property (nonatomic, readonly) float volume;

+ (void)addCodecModesForPayload:(int)arg1 toCodecConfig:(id)arg2;
+ (void)applyVideoNegotiatedSettings:(id)arg1 toStreamConfiguration:(id)arg2 withFeatureStringDictionary:(id)arg3;
+ (unsigned int)mediaStreamGroupStateToVCStreamGroupState:(unsigned int)arg1;
+ (id)mediaTypesFromStreamGroupID:(unsigned int)arg1;
+ (id)participantDataWithMediaNegotiatorVersion:(int)arg1 participantData:(id)arg2;
+ (id)participantDataWithParticipantData:(id)arg1 isReinit:(bool)arg2;
+ (id)participantDataWithParticipantInfo:(id)arg1;
+ (id)participantInfoWithParticipantData:(id)arg1;
+ (id)streamGroupIDsFromParticipantData:(id)arg1;

- (id)allParticipantStreamInfo;
- (id)applyMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (void)applyScreenEnabledSetting:(bool)arg1;
- (id)applyVideoEnabledSetting:(bool)arg1;
- (float)audioPosition;
- (void)audioPowerSpectrumSinkDidRegister;
- (void)audioPowerSpectrumSinkDidUnregister;
- (id)basebandCongestionDetector;
- (void)callDelegateWithBlock:(id /* block */)arg1;
- (id)callInfoBlob;
- (void)callStreamDelegateWithBlock:(id /* block */)arg1;
- (id)cameraGroups;
- (id)cameraGroupsExt;
- (id)captionsGroup;
- (int)captureSourceIDFromStreamGroupID:(unsigned int)arg1;
- (unsigned int)cellularUniqueTag;
- (void)collectAudioChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)collectCaptionsChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)collectVideoChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (bool)completeStreamSetup:(id)arg1;
- (bool)configureAudioIOWithDeviceRole:(int)arg1 operatingMode:(int)arg2;
- (bool)configureMultiwayStreamGroups;
- (bool)configureOneToOneAudioStreamsWithDeviceRole:(int)arg1;
- (bool)configureOneToOneAudioStreamsWithDeviceRole:(int)arg1 streamInfoArray:(id)arg2;
- (bool)configureOneToOneVideoStreamsWithDeviceRole:(int)arg1;
- (bool)configureOneToOneVideoStreamsWithDeviceRole:(int)arg1 streamInfoArray:(id)arg2;
- (bool)configureOneToOneWithConfig:(id)arg1;
- (bool)configureStreamInfosForMultiway:(id)arg1 streamGroupID:(unsigned int)arg2;
- (bool)configureWithDeviceRole:(int)arg1 negotiatedVideoEnabled:(bool)arg2 negotiatedScreenEnabled:(bool)arg3 operatingMode:(int)arg4;
- (void)createRedundancyControllers;
- (union tagNTP { unsigned long long x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })creationTime;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)didChangeActualNetworkBitrateForStreamGroup:(id)arg1;
- (void)didChangeReceivingStreamsForStreamGroup:(id)arg1;
- (void)didChangeSendingStreamsForStreamGroup:(id)arg1;
- (void)didDecryptionTimeOutForMKMRecoveryForStreamGroup:(id)arg1;
- (void)didEncryptionKeyRollTimeout;
- (void)didMediaDecryptionTimeOutForStreamGroup:(id)arg1;
- (void)didResumeAudioIO:(id)arg1;
- (void)didSuspendAudioIO:(id)arg1;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)arg1;
- (void)dispatchSetMediaType:(unsigned int)arg1 mixingWithMediaType:(unsigned int)arg2;
- (bool)dispatchedConfigureWithDeviceRole:(int)arg1 negotiatedVideoEnabled:(bool)arg2 negotiatedScreenEnabled:(bool)arg3 operatingMode:(int)arg4;
- (void)dispatchedSetAudioEnabled:(bool)arg1;
- (void)dispatchedSetAudioPaused:(bool)arg1;
- (void)dispatchedSetMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (void)dispatchedSetScreenEnabled:(bool)arg1;
- (void)dispatchedSetVideoEnabled:(bool)arg1;
- (void)dispatchedSetVideoPaused:(bool)arg1;
- (void)dispatchedStart;
- (void)dispatchedStartOneToOneStreams;
- (void)dispatchedStop;
- (id)generateEncryptionKey;
- (id)getAudioDumpName;
- (void)handleActiveConnectionChange:(id)arg1;
- (bool)handleEncryptionInfoChange:(id)arg1;
- (void)handleRemoteOneToOneSwitchWithStreamGroup:(id)arg1 fromStreamID:(unsigned short)arg2 toStreamID:(unsigned short)arg3;
- (void)handleStreamGroupsActiveConnectionChange:(id)arg1;
- (void)handleSymptomReportForDecryptionError;
- (unsigned long long)idsParticipantID;
- (id)initWithConfig:(id)arg1 delegate:(id)arg2;
- (bool)isActiveMediaType:(unsigned int)arg1;
- (bool)isAudioEnabled;
- (bool)isAudioPaused;
- (bool)isAudioStream:(id)arg1;
- (bool)isLocalOnWiFi;
- (bool)isMuted;
- (bool)isOneToOneModeEnabled;
- (bool)isOneToOneTemporalSupportedForSettings:(id)arg1 streamDirection:(long long)arg2;
- (bool)isScreenEnabled;
- (bool)isStreamGroupActive:(id)arg1;
- (bool)isVideoEnabled;
- (bool)isVideoPaused;
- (bool)isVideoStream:(id)arg1;
- (void)logAllStreamTokens;
- (id)mediaNegotiator;
- (struct tagVCMediaQueue { }*)mediaQueue;
- (id)mediaRecorder;
- (id)mediaTypeMixingList;
- (id)microphoneGroup;
- (id)newAudioRateControlConfigWithMediaControlInfoVersion:(unsigned char)arg1 enableFeedbackController:(bool)arg2 isOneToOne:(bool)arg3;
- (id)newOneToOneAudioStreamConfigWithAudioSettings:(id)arg1 streamDirection:(long long)arg2 streamGroupId:(unsigned int)arg3 streamSsrc:(unsigned int)arg4;
- (id)newOneToOneVideoStreamConfigWithStreamDirection:(long long)arg1 streamGroupId:(unsigned int)arg2 streamSsrc:(unsigned int)arg3 encodingType:(unsigned char)arg4 videoSettings:(id)arg5;
- (id)newOneToOneVideoStreamMultiwayConfiguration:(unsigned char)arg1 streamGroupId:(unsigned int)arg2 videoSettings:(id)arg3 streamDirection:(long long)arg4;
- (id)newVideoRateControlConfigWithMediaControlInfoVersion:(unsigned char)arg1 enableMediaControlInfoGenerator:(bool)arg2 enableFeedbackController:(bool)arg3 isOneToOne:(bool)arg4;
- (void)onDidResumeAudio;
- (void)onPauseAudioStreams;
- (void)onStartAudioIO;
- (id)oneToOneConfig;
- (id)opaqueData;
- (int)operatingMode;
- (long long)participantMicrophoneToken;
- (long long)participantScreenToken;
- (char *)participantStateToString:(unsigned int)arg1;
- (id)participantStreamTokens;
- (long long)participantVideoToken;
- (id)pauseAudioStreams:(bool)arg1;
- (id)pauseVideo:(bool)arg1;
- (unsigned int)preferredIOSampleRateForGroupID:(unsigned int)arg1;
- (unsigned int)preferredIOSamplesPerFrameForGroupID:(unsigned int)arg1;
- (unsigned int)preferredRTPTimestampRateForGroupID:(unsigned int)arg1;
- (unsigned char)presentationState;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)redundancyController:(id)arg1 redundancyIntervalDidChange:(double)arg2;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;
- (void)reportCameraCompositionEnabled:(bool)arg1;
- (struct opaqueRTCReporting { }*)reportingAgent;
- (void)resetDecryptionTimeout;
- (bool)rtcpPSFBForFeedbackStoreBagConfig;
- (bool)rtcpPSFBForLTRAckStoreBagConfig;
- (id)screenGroup;
- (int)securityKeyHolderUsageForStreamConfigDirection:(long long)arg1;
- (void)sendAudioPowerSpectrumSourceRegistration:(bool)arg1;
- (void)serverDidDie;
- (void)setAudioEnabled:(bool)arg1;
- (void)setAudioPaused:(bool)arg1;
- (bool)setAudioPosition:(float)arg1;
- (id)setAudioStreamGroupsPaused:(bool)arg1;
- (void)setBasebandCongestionDetector:(id)arg1;
- (id)setCameraStreamGroupsPaused:(bool)arg1;
- (void)setCellularUniqueTag:(unsigned int)arg1;
- (void)setLocalOnWiFi:(bool)arg1;
- (void)setMediaQueue:(struct tagVCMediaQueue { }*)arg1;
- (void)setMediaRecorder:(id)arg1;
- (void)setMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (void)setMediaType:(unsigned int)arg1 mixingWithMediaType:(unsigned int)arg2;
- (void)setMuted:(bool)arg1;
- (void)setOneToOneConfig:(id)arg1;
- (void)setOneToOneModeEnabled:(bool)arg1;
- (id)setPaused:(bool)arg1 onStreamGroups:(id)arg2;
- (void)setPresentationState:(unsigned char)arg1;
- (void)setReportingAgent:(struct opaqueRTCReporting { }*)arg1;
- (void)setScreenEnabled:(bool)arg1;
- (void)setSharingEnabled:(bool)arg1;
- (bool)setState:(unsigned int)arg1;
- (void)setStatisticsCollector:(id)arg1;
- (void)setStreamDelegate:(id)arg1;
- (void)setStreamGroup:(unsigned int)arg1 syncSourceStreamGroupID:(unsigned int)arg2;
- (void)setVideoEnabled:(bool)arg1;
- (void)setVideoPaused:(bool)arg1;
- (bool)setVolume:(float)arg1;
- (bool)setupAudioStreamConfiguration:(id)arg1 audioRules:(id)arg2;
- (bool)setupMediaSyncForStreamGroup:(id)arg1;
- (void)setupMediaTypeSettingsWithConfig:(id)arg1;
- (void)setupNetworkAddressesForMediaConfig:(id)arg1;
- (void)setupPreferredIOSettings;
- (bool)setupSecurityKeyHolderForStreamConfig:(id)arg1;
- (bool)setupStreamGroupMediaSync;
- (bool)sharingEnabled;
- (bool)shouldSetPause:(bool)arg1 onStream:(id)arg2;
- (void)start;
- (void)startAudioDump;
- (id)startAudioIO;
- (id)startCameraStreamGroups;
- (id)startMediaStreams:(id)arg1;
- (id)startMicStreamGroups;
- (void)startMultiwayStreams;
- (void)startOneToOneStreams;
- (id)startScreenGroup;
- (id)startStreamGroups;
- (id)startStreamGroups:(id)arg1;
- (void)startSystemAudioCapture;
- (id)startVideo;
- (id)statisticsCollector;
- (void)stop;
- (void)stopAudioDump;
- (id)stopAudioIO;
- (void)stopAudioIOCompletion;
- (id)stopAudioStreams;
- (void)stopInternal;
- (id)stopMediaStreams:(id)arg1;
- (id)stopMicStreamGroups;
- (id)stopMultiwayStreams;
- (void)stopOneToOneStreams;
- (id)stopScreenGroup;
- (void)stopStreamGroups;
- (id)stopStreamGroups:(id)arg1;
- (void)stopSystemAudioCapture;
- (void)stopVideoCaptureClient;
- (id)streamDelegate;
- (void)streamGroup:(id)arg1 didChangeMediaPriority:(unsigned char)arg2;
- (void)streamGroup:(id)arg1 didChangePlayoutRTPTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)streamGroup:(id)arg1 didChangeState:(unsigned int)arg2;
- (void)streamGroup:(id)arg1 didRemoteEnableChange:(bool)arg2;
- (void)streamGroup:(id)arg1 didRemotePauseChange:(bool)arg2;
- (void)streamGroup:(id)arg1 didRequestRedundancy:(bool)arg2;
- (void)streamGroup:(id)arg1 didSuspendStreams:(bool)arg2;
- (void)streamGroup:(id)arg1 didSwitchFromStreamID:(unsigned short)arg2 toStreamID:(unsigned short)arg3;
- (void)streamGroup:(id)arg1 remoteMediaStalled:(bool)arg2 duration:(double)arg3;
- (void)streamGroup:(id)arg1 requestKeyFrameGenerationWithStreamID:(unsigned short)arg2 firType:(int)arg3;
- (unsigned int)streamGroupStateFromStreamGroupID:(unsigned int)arg1;
- (id)streamGroupWithID:(unsigned int)arg1;
- (id)streamGroupsForIDs:(id)arg1;
- (id)streamGroupsForMediaType:(unsigned int)arg1;
- (id)supportedAudioRules;
- (void)swapScreenStreamGroupSyncSourceWithState:(unsigned int)arg1;
- (id)systemAudioGroup;
- (id)updateActiveStateForStreamGroup:(id)arg1;
- (void)updateAudioSpectrumState;
- (bool)updateConfigurationWithDeviceRole:(int)arg1;
- (id)updateMediaState:(unsigned int)arg1 forStreamGroups:(id)arg2;
- (bool)updateMediaStatesWithConfig:(id)arg1;
- (void)updateOneToOneVideoStreamCustomResolution:(id)arg1 videoSettings:(id)arg2;
- (id)updateStreamGroups:(id)arg1;
- (void)updateVideoPaused:(bool)arg1;
- (id)uuid;
- (void)vcMediaStream:(id)arg1 requestKeyFrameGenerationWithStreamID:(unsigned short)arg2 firType:(int)arg3;
- (void)vcMediaStreamServerDidDie:(id)arg1;
- (float)volume;

@end
