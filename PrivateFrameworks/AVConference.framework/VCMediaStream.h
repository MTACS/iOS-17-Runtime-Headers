
@interface VCMediaStream : VCObject <RTCPReportProvider, VCConnectionChangedHandler, VCMediaStreamProtocol, VCSecurityEventHandler> {
    bool  _areStatisticsRegistered;
    AVCBasebandCongestionDetector * _basebandCongestionDetector;
    NSError * _cachedError;
    NSString * _callID;
    int  _channelSequenceCountWithInactiveSlots;
    NSString * _clientName;
    int  _clientPID;
    NSString * _clientSessionID;
    NSArray * _compoundStreamIDs;
    VCConnection * _connection;
    VCDatagramChannelIDS * _datagramChannel;
    double  _decryptionErrorStartTime;
    double  _decryptionTimeoutEnabledTime;
    <VCMediaStreamDelegate> * _delegate;
    struct tagVCMediaStreamDelegateRealtimeInstanceVTable { 
        int (*updateFrequencyLevel)(); 
    }  _delegateFunctions;
    NSObject<OS_dispatch_queue> * _delegateNotificationQueue;
    AVCRateControlFeedbackController * _feedbackController;
    NSString * _idsDestination;
    bool  _isNWMonitorSignalEnabled;
    bool  _isRTTBasedFIRThrottlingEnabled;
    bool  _isReportingAgentOwner;
    bool  _isSRTPInitialized;
    bool  _isServerPacketRetransmissionEnabled;
    bool  _isUplinkRetransmissionEnabled;
    bool  _isWRMinitialized;
    double  _lastDecryptionMKMRecoveryTime;
    double  _lastDecryptionTimeoutReportTime;
    double  _lastRTCPTimeoutReportTime;
    double  _lastRTPTimeoutReportTime;
    VCMediaKeyIndex * _lastReceivedMKI;
    unsigned int  _localSSRC;
    bool  _mediaControlInfoCallbacksRegistered;
    void * _mediaControlInfoGenerator;
    unsigned int  _mediaControlInfoGeneratorType;
    struct tagVCMediaQueue { } * _mediaQueue;
    <VCMomentsCollectorDelegate> * _momentsCollectorDelegate;
    VCNetworkFeedbackController * _networkFeedbackController;
    VCWeakObjectHolder * _notificationDelegate;
    int (* _notificationHandler;
    struct tagVCNWConnectionMonitor { } * _nwMonitor;
    int  _nwMonitorHandlerIndex;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _nwMonitorLock;
    void * _oneToOneControlInfoGenerator;
    AVCRateControlFeedbackController * _oneToOneFeedbackController;
    int  _operatingMode;
    int (* _packetEventHandler;
    VCMediaStreamRateAdaptation * _rateAdaptation;
    VCRateSharingGroup * _rateSharingGroup;
    VCCallInfoBlob * _remoteEndpointInfo;
    bool  _rtcpDidTimeout;
    bool  _rtcpHeartbeatCancelled;
    VCWeakObjectHolder * _rtcpReportProvider;
    NSObject<OS_dispatch_source> * _rtcpSendHeartbeat;
    double  _rtcpTimeoutEnabledTime;
    double  _rtpTimeoutEnabledTime;
    int  _rttMonitorHandlerIndex;
    int  _state;
    AVCStatisticsCollector * _statisticsCollector;
    int (* _statisticsHandler;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _streamLock;
    long long  _streamToken;
    NSObject<OS_dispatch_source> * _timeoutHeartbeat;
    NSMutableArray * _transportArray;
    VCTransportSession * _transportSession;
    unsigned int  _transportSessionID;
    struct _VCMediaStreamTransportSetupInfo { 
        unsigned char setupType; 
        union { 
            struct { 
                int rtpSocket; 
                int rtcpSocket; 
            } socketInfo; 
            struct { 
                struct tagIPPORT { 
                    int iFlags; 
                    BOOL szIfName[16]; 
                    union { 
                        unsigned int dwIPv4; 
                        unsigned char abIPv6[16]; 
                    } IP; 
                    unsigned short wPort; 
                } srcIPPORT; 
                struct tagIPPORT { 
                    int iFlags; 
                    BOOL szIfName[16]; 
                    union { 
                        unsigned int dwIPv4; 
                        unsigned char abIPv6[16]; 
                    } IP; 
                    unsigned short wPort; 
                } srcRTPIPPort; 
            } ipInfo; 
            struct { 
                void *context; 
                int (*creationCallback)(); 
                bool isReceiveExternallyScheduled; 
            } transportStreamInfo; 
            id nwConnection; 
            /* Warning: Unrecognized filer type: ')' using 'void*' */ void*NSObject<OS_nw_connection>; 
            unsigned int sourceRate; 
            unsigned int datagramChannelToken; 
            bool isSessionIDValid; 
        } ; 
    }  _transportSetupInfo;
    bool  _useRandomTS;
    int (* _vcMediaCallback;
}

@property (nonatomic, retain) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (copy) NSArray *compoundStreamIDs;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) VCMediaStreamConfig *defaultStreamConfig;
@property (nonatomic, readonly) VCMediaStreamTransport *defaultTransport;
@property (nonatomic) <VCMediaStreamDelegate> *delegate;
@property (nonatomic) struct tagVCMediaStreamDelegateRealtimeInstanceVTable { int (*x1)(); } delegateFunctions;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, retain) AVCRateControlFeedbackController *feedbackController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isSendingMedia;
@property (setter=setUplinkRetransmissionEnabled:, nonatomic) bool isUplinkRetransmissionEnabled;
@property (nonatomic, readonly) double lastReceivedRTCPPacketTime;
@property (nonatomic, readonly) double lastReceivedRTPPacketTime;
@property (nonatomic, readonly) unsigned int localSSRC;
@property (nonatomic, readonly) void*mediaControlInfoGenerator;
@property (nonatomic, readonly) unsigned int mediaControlInfoGeneratorType;
@property (nonatomic) struct tagVCMediaQueue { }*mediaQueue;
@property (nonatomic) <VCMomentsCollectorDelegate> *momentsCollectorDelegate;
@property (nonatomic, retain) VCNetworkFeedbackController *networkFeedbackController;
@property (nonatomic) <VCMediaStreamNotification> *notificationDelegate;
@property (nonatomic, readonly) VCMediaStreamConfig *oneToOneStreamConfig;
@property (nonatomic) int operatingMode;
@property (nonatomic, readonly) double rtcpHeartbeatLeeway;
@property (nonatomic) <RTCPReportProvider> *rtcpReportProvider;
@property (nonatomic, readonly) int state;
@property (nonatomic, readonly) long long streamToken;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *transportArray;

+ (bool)isSameSRTPKey:(id)arg1 newKey:(id)arg2;

- (id)basebandCongestionDetector;
- (void)checkRTCPPacketTimeoutAgainstTime:(double)arg1 lastReceivedPacketTime:(double)arg2;
- (void)checkRTPPacketTimeoutAgainstTime:(double)arg1 lastReceivedPacketTime:(double)arg2;
- (void)cleanupNWConnection:(id*)arg1;
- (void)collectChannelSequenceMetrics:(id)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1 interval:(float)arg2;
- (void)collectTxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (struct __CFDictionary { }*)composeClientUserInfo:(int)arg1;
- (id)compoundStreamIDs;
- (double)computeNextTimoutWithEnabledTime:(double)arg1 timeoutInterval:(double)arg2 lastReceivedPacketTime:(double)arg3 currentTime:(double)arg4 lastTimeoutReportTime:(double)arg5;
- (id)copyDelegate;
- (void)createLocalMediaControlInfoGeneratorWithType:(unsigned int)arg1 version:(unsigned char)arg2;
- (void)createNWMonitor;
- (struct tagHANDLE { int x1; }*)createRTPHandleWithStreamConfig:(id)arg1 payloadType:(int)arg2 localSSRC:(unsigned int)arg3;
- (id)createTransportWithStreamConfig:(id)arg1 ssrc:(unsigned int)arg2;
- (void)dealloc;
- (void)decryptionStatusChanged:(bool)arg1;
- (id)defaultStreamConfig;
- (id)defaultTransport;
- (id)delegate;
- (struct tagVCMediaStreamDelegateRealtimeInstanceVTable { int (*x1)(); })delegateFunctions;
- (void)destroyNWMonitor;
- (void)didEncryptionKeyRollTimeout;
- (void)didEnterState:(int)arg1 oldState:(int)arg2;
- (void)dupNWConnectionBackingSocket:(int*)arg1;
- (id)feedbackController;
- (bool)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned char x9; }*)arg1 reportCount:(char *)arg2;
- (unsigned int)getExtendedSequenceNumberForSequenceNumber:(unsigned short)arg1;
- (id)getInvalidParamErrorForSetPause:(bool)arg1 didSucceed:(bool)arg2;
- (id)getMediaStreamConfigForControlInfoGenerator:(id)arg1;
- (unsigned int)getRTCPReportNTPTimeMiddle32ForReportId:(unsigned char)arg1;
- (id)getSharingGroupWithPolicy:(unsigned int)arg1;
- (void)handleActiveConnectionChange:(id)arg1;
- (bool)handleEncryptionInfoChange:(id)arg1;
- (int)handleMediaCallbackNotification:(int)arg1 inData:(void*)arg2 outData:(void*)arg3;
- (void)handleStartDidSucceed:(bool)arg1 withError:(id)arg2;
- (void)handleTransportSessionEvent:(unsigned int)arg1 info:(id)arg2;
- (id)init;
- (id)initWithTransportSessionID:(unsigned int)arg1;
- (id)initWithTransportSessionID:(unsigned int)arg1 localSSRC:(unsigned int)arg2;
- (bool)initializeTransportSessionWithIDSDestination:(id)arg1 error:(id*)arg2;
- (bool)initializeTransportSessionWithRTPNWConnectionID:(id)arg1 rtcpNWConnectionID:(id)arg2 error:(id*)arg3;
- (bool)initializeTransportSessionWithSocketDictionary:(id)arg1 error:(id*)arg2;
- (bool)initializeTransportSetupInfoWithIDSDestination:(id)arg1 error:(id*)arg2;
- (void)initializeTransportSetupInfoWithRTPSocket:(int)arg1 RTCPSocket:(int)arg2;
- (void)initializeTransportSetupInfoWithSocketDictionary:(id)arg1;
- (bool)initializeTransportSetupInfoWithTransportSession:(id*)arg1;
- (void)initializeWRMUsingRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (bool)isDecryptionTimeoutEnabled;
- (bool)isRTCPSendEnabled;
- (bool)isRTCPTimeoutEnabled;
- (bool)isRTPTimeoutEnabled;
- (bool)isSendingMedia;
- (bool)isUplinkRetransmissionEnabled;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (unsigned int)localSSRC;
- (void)lock;
- (void*)mediaControlInfoGenerator;
- (unsigned int)mediaControlInfoGeneratorType;
- (struct tagVCMediaQueue { }*)mediaQueue;
- (id)momentsCollectorDelegate;
- (id)networkFeedbackController;
- (id)notificationDelegate;
- (void)notifyDelegateDidReceiveRTCPPackets:(struct _RTCPPacketList { union tagNTP { unsigned long long x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; unsigned char x2; struct tagRTCPPACKET {} *x3[10]; struct OpaqueCMBlockBuffer {} *x4; char *x5; unsigned long long x6; unsigned int x7; unsigned char x8[1472]; unsigned short x9[12]; unsigned char x10; bool x11; unsigned long long x12; struct { struct _RTCPPacketList {} *x_13_1_1; } x13; }*)arg1;
- (void)onCallIDChanged;
- (bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id*)arg2;
- (void)onPauseWithCompletionHandler:(id /* block */)arg1;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)arg1;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)arg1;
- (void)onStopWithCompletionHandler:(id /* block */)arg1;
- (id)oneToOneStreamConfig;
- (int)operatingMode;
- (void)processDecryptionTimeoutSettingChange;
- (void)processRTCPTimeoutSettingChange;
- (void)processRTPTimeoutSettingChange;
- (void)registerCallbacksForMediaControlInfoGenerator:(void*)arg1 forDirection:(long long)arg2 options:(unsigned int)arg3;
- (void)registerMediaControlInfoGeneratorWithConfigs:(id)arg1;
- (void)registerStatistics:(id)arg1;
- (int)registerStatisticsHandler:(id)arg1 statisticType:(int)arg2;
- (void)reportTransportInfo;
- (void)resetDecryptionTimeout;
- (void)resetRTCPSendHeartbeatTimer:(unsigned long long)arg1;
- (void)resetTimeoutHeartbeatTimer:(unsigned long long)arg1;
- (void)resetTimeoutHeartbeatWithRTPTimeout:(double)arg1 rtcpTimeout:(double)arg2 decryptionTimeout:(double)arg3 currentTime:(double)arg4;
- (double)rtcpHeartbeatLeeway;
- (id)rtcpReportProvider;
- (void)rtcpSendHeartbeat;
- (void)sendControlPacketWithParameters:(struct _RTCP_SEND_CONTROL_PARAMETERS { unsigned int x1; int x2; char *x3; unsigned long long x4; unsigned char x5; unsigned short *x6; int x7; unsigned short x8; unsigned short x9; unsigned int x10; struct _RTCP_RECEPTION_REPORT {} *x11; unsigned char x12; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO {} *x13; struct tagVCRTCPXRSummaryReport {} *x14; unsigned char x15; struct tagVCRTCPXRVoIPMetricsReport {} *x16; unsigned char x17; unsigned short x18[12]; unsigned char x19; bool x20; unsigned long long x21; bool x22; bool x23; struct tagRTCP_CUSTOM_PSFB_LOSS_FB_INFO {} *x24; unsigned int x25; }*)arg1;
- (void)setBasebandCongestionDetector:(id)arg1;
- (void)setCompoundStreamIDs:(id)arg1;
- (void)setDecryptionTimeOutEnabled:(bool)arg1;
- (void)setDecryptionTimeOutInterval:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateFunctions:(struct tagVCMediaStreamDelegateRealtimeInstanceVTable { int (*x1)(); })arg1;
- (id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id*)arg3;
- (void)setMediaQueue:(struct tagVCMediaQueue { }*)arg1;
- (void)setMediaQueueInRateControlConfig:(id)arg1;
- (void)setMediaQueueInStreamConfig:(id)arg1;
- (void)setMomentsCollectorDelegate:(id)arg1;
- (void)setNetworkFeedbackController:(id)arg1;
- (void)setNotificationDelegate:(id)arg1;
- (void)setOperatingMode:(int)arg1;
- (id)setPause:(bool)arg1;
- (void)setPause:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)setRtcpEnabled:(bool)arg1;
- (void)setRtcpReportProvider:(id)arg1;
- (void)setRtcpSendInterval:(double)arg1;
- (void)setRtcpTimeOutEnabled:(bool)arg1;
- (void)setRtcpTimeOutInterval:(double)arg1;
- (void)setRtpTimeOutEnabled:(bool)arg1;
- (void)setRtpTimeOutInterval:(double)arg1;
- (void)setState:(int)arg1;
- (bool)setStreamConfig:(id)arg1 withError:(id*)arg2;
- (void)setStreamDirection:(long long)arg1;
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;
- (void)setUplinkRetransmissionEnabled:(bool)arg1;
- (void)setupCallbacksWithNWConnectionMonitor:(struct tagVCNWConnectionMonitor { }*)arg1;
- (void)setupMediaStream;
- (bool)setupNWConnectionWithID:(id)arg1;
- (id)setupRTPForIDS;
- (id)setupRTPWithIDSDestination:(id)arg1 error:(id*)arg2;
- (id)setupRTPWithIPInfo:(id)arg1 error:(id*)arg2;
- (id)setupRTPWithLocalParticipantInfo:(id)arg1 error:(id*)arg2;
- (id)setupRTPWithNWConnection:(id)arg1 error:(id*)arg2;
- (id)setupRTPWithSocketDictionary:(id)arg1 error:(id*)arg2;
- (bool)shouldReportNetworkInterfaceType;
- (bool)shouldStopReportingTimer;
- (bool)shouldUseNWConnectionBackingSocket;
- (id)start;
- (bool)startMediaTransportsWithError:(id*)arg1;
- (void)startRTCPSendHeartbeat;
- (void)startTimeoutHeartbeat;
- (void)startWithCompletionHandler:(id /* block */)arg1;
- (int)state;
- (id)stop;
- (void)stopInternalWithHandler:(id /* block */)arg1;
- (void)stopMediaTransports;
- (void)stopRTCPSendHeartbeat;
- (void)stopTimeoutHeartbeat;
- (long long)streamDirection;
- (char *)streamStateToString:(int)arg1;
- (long long)streamToken;
- (id)supportedPayloads;
- (void)timeoutHeartbeat;
- (id)transportArray;
- (void)unlock;
- (void)unregisterMediaControlInfoGenerator;
- (void)unregisterStatistics;
- (void)unregisterWRMCallback;
- (int)updateConnectionWithConfig:(id)arg1;
- (bool)updateRemoteAddressWithConfig:(id)arg1 error:(id*)arg2;
- (void)updateTransportsWithConstantConnectionOverhead:(unsigned int)arg1;
- (void)willExitState:(int)arg1 newState:(int)arg2;

@end
