
@interface VCAudioSession : VCObject <VCServerDelegate> {
    VCAudioSessionClient * _activeClient;
    unsigned int  _audioSessionId;
    NSMutableArray * _clients;
    NSMutableDictionary * _currentAudioSessionProperties;
    int  _currentClientPid;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    double  _externalAudioLatency;
    double  _hardwareSampleRate;
    bool  _isInterrupted;
    bool  _isTetheredDisplayMode;
    NSDictionary * _micSourceBack;
    NSDictionary * _micSourceFront;
    int  _operatingMode;
    int  _playbackMode;
    NSMutableDictionary * _requestedAudioSessionProperties;
    unsigned int  _selectedMicrophone;
    int  _sessionPid;
    unsigned int  _vpOperatingMode;
}

@property (nonatomic, readonly) unsigned int audioSessionId;
@property (nonatomic, readonly) NSDictionary *audioSessionProperties;
@property (nonatomic) int clientPid;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double externalAudioLatency;
@property (nonatomic, readonly) bool hasStarted;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isInputSupported;
@property (readonly) Class superclass;

+ (bool)convertAudioSessionProperties:(id)arg1 operatingMode:(int*)arg2 deviceRole:(int*)arg3 enableAudioPreWarming:(bool*)arg4;
+ (id)sharedSystemAudioInputInstance;
+ (id)sharedSystemAudioOutputInstance;
+ (id)sharedVoiceChatInstance;
+ (bool)shouldUseHomeKitConfigurationForAudioMode:(id)arg1;
+ (id)stringFromFormat:(const struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; }*)arg1;
+ (void)terminateProcess:(id)arg1 terminateSource:(id)arg2 agent:(struct opaqueRTCReporting { }*)arg3;

- (void)addPropertyToBatchedDictionary:(id)arg1 property:(id)arg2 defaultValue:(id)arg3 propertyOrderArray:(id)arg4;
- (void)applyAudioModeWithDefaultValue:(void*)arg1 shouldApplyRequestedProperty:(bool)arg2;
- (bool)applyAudioSessionMediaProperties:(id)arg1;
- (void)applyAudioSessionPropertiesWithVPOperatingMode:(unsigned int)arg1;
- (void)applyDynamicSessionProperties;
- (bool)applyRequestedProperties:(id)arg1 propertyOrder:(id)arg2;
- (bool)applyRequestedProperty:(id)arg1 defaultValue:(void*)arg2;
- (unsigned int)audioSessionId;
- (id)audioSessionProperties;
- (void)cleanupMicSources;
- (int)clientPid;
- (void)dealloc;
- (void)didAvailableSampleRateChange;
- (void)didInterruptionEnded;
- (void)didPause;
- (bool)didRequestArrayPropertyChange:(id)arg1;
- (bool)didRequestBoolPropertyChange:(id)arg1;
- (bool)didRequestDataPropertyChange:(id)arg1;
- (bool)didRequestDictionaryPropertyChange:(id)arg1;
- (bool)didRequestStringPropertyChange:(id)arg1;
- (bool)didRequestedPropertyChange:(id)arg1 propertyClass:(Class)arg2 compareSelector:(SEL)arg3;
- (void)didResume;
- (void)didStop;
- (void)dispatchedRefreshAudioSessionProperties;
- (void)dispatchedSetAudioSessionProperties:(id)arg1;
- (double)externalAudioLatency;
- (bool)forceBufferFrames:(int*)arg1;
- (void)handleAudioSessionInterruption:(id)arg1;
- (bool)hasStarted;
- (id)initWithMode:(int)arg1;
- (bool)internalSelectMicrophoneWithType:(unsigned int)arg1;
- (void)invalidateCache;
- (bool)isAnswerOnHoldUpdateParameters:(id)arg1;
- (bool)isInputSupported;
- (void)refreshAudioSessionProperties;
- (bool)resetClient:(id)arg1 mediaSetting:(id)arg2 interruptSuccessful:(bool*)arg3;
- (void)resetOverrideRoute;
- (void)resumeActiveClient;
- (void)selectMicrophoneWithType:(unsigned int)arg1;
- (void)selectNewActiveClient;
- (void)serverDidDie;
- (void)setAudioSessionMode:(id)arg1;
- (void)setAudioSessionProperties:(id)arg1;
- (void)setBlockSize:(double)arg1 sampleRate:(double)arg2 force:(bool)arg3;
- (void)setBlockSizeOnSampleRateChange;
- (void)setClientPid:(int)arg1;
- (bool)setSampleRate:(double)arg1;
- (void)setSpeakerProperty:(id)arg1;
- (void)setUpVPBlockFormatWithProperties:(id)arg1;
- (void)setVPBlockConfigurationProperties:(id)arg1;
- (void)setupInputBeamforming;
- (bool)shouldResetAudioSession;
- (bool)shouldSetupSharePlayWithOperatingMode:(unsigned int)arg1 isSharePlayCapable:(bool*)arg2;
- (bool)startClient:(id)arg1 clientType:(unsigned char)arg2 mediaProperties:(id)arg3 sessionRef:(unsigned int*)arg4;
- (bool)startInternal;
- (bool)startSessionWithMediaProperties:(id)arg1 sessionRef:(unsigned int*)arg2;
- (bool)stopClient:(id)arg1;
- (bool)stopSession;
- (void)updateAudioSessionPropertiesWithProperties:(id)arg1;
- (void)upgradeAudioSessionProperties;
- (bool)validNewStartingClient:(id)arg1;

@end
