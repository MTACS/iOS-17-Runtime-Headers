
@interface VCAudioTransmitter : NSObject <VCAudioIOSink, VCConnectionChangedHandler> {
    int  _actualAudioSendingBitrate;
    struct tagHANDLE { int x1; } * _afrc;
    bool  _allowAudioSwitching;
    bool  _alwaysOnAudioRedundancyEnabled;
    struct tagVCMemoryPool { struct { void *x_1_1_1; long long x_1_1_2; } x1; unsigned long long x2; } * _audioBundlePool;
    VCPacketBundler * _audioBundler;
    bool  _audioDumpEnabled;
    unsigned int  _audioFrameCounter;
    int  _audioHeaderSize;
    double  _audioInterval;
    struct tagVCAudioIssueDetector { } * _audioIssueDetector;
    NSMutableArray * _audioPayloads;
    int  _audioTierChangeRequestCount;
    bool  _audioTierHysteresis;
    VCAudioTierPicker * _audioTierPicker;
    int  _audioTxBitrate;
    float  _blockSeconds;
    long long  _blockSize;
    bool  _canSendPacket;
    bool  _cellularAllowRedLowBitratesEnabled;
    unsigned int  _constantTransportOverhead;
    void * _controlInfoGenerator;
    unsigned int  _currentAudioCap;
    VCAudioPayload * _currentAudioPayload;
    VCAudioTier * _currentAudioTier;
    struct { 
        unsigned int averageNetworkBitrate; 
        unsigned int networkBitrate[5]; 
        unsigned int averageMediaBitrate; 
        double averageFramerate; 
        struct CGSize { 
            double width; 
            double height; 
        } frameResolution; 
        double lastAudioHostTime; 
        unsigned int lastAudioSampleTime; 
        double lastVideoHostTime; 
        unsigned int lastVideoSampleTime; 
        unsigned int noVoiceActivityPacketCount; 
    }  _currentChannelMetrics;
    bool  _currentDTXEnable;
    VCAudioPayload * _currentDTXPayload;
    unsigned int  _currentDuplication;
    int  _currentRedPayloadType;
    unsigned int  _currentTargetBitrate;
    id  _delegate;
    struct opaqueVCAudioBufferList { } * _encodeBuffer;
    unsigned int  _encodedBytes;
    struct tagVCAudioDump { } * _encoderInAudioDump;
    struct tagVCAudioDump { } * _encoderOutAudioDump;
    unsigned int  _estimateTxAudioBytes;
    struct tagVCIDSChannelDataFormat { 
        unsigned short streamIDs[12]; 
        unsigned char numOfStreamIDs; 
        bool probingGroupIDIsSet; 
        unsigned short probingGroupID; 
        unsigned char priority; 
        bool pktCountingFlag; 
        bool participantIDIsSet; 
        unsigned long long participantID; 
        bool participantGenerationCounterIsSet; 
        bool ignorePriority; 
        bool statsIDIsSet; 
        unsigned short statsID; 
        struct { 
            unsigned short serverTimestamp; 
            unsigned short serverPacketInterval; 
            unsigned short totalServerPacketReceived; 
            unsigned short totalServerPacketSent; 
            unsigned short uplinkBandwidthEstimate; 
        } statsPayload; 
        bool isTransitionPacket; 
        bool isHopByHopEncrypted; 
        bool encryptionSequenceNumberIDIsSet; 
        unsigned long long encryptionSequenceNumber; 
        bool baseLayerStreamIdIsSet; 
        unsigned short baseLayerStreamId; 
        bool isRetransmitted; 
        bool isHighlyBurstyTraffic; 
        bool requireOneToOneProbingSequence; 
        bool relayServerPassThroughPacket; 
    }  _idsChannelDataFormat;
    bool  _ignoreSilence;
    bool  _includeRedSequenceOffset;
    struct tagVCAudioFrameFormat { 
        struct AudioStreamBasicDescription { 
            double mSampleRate; 
            unsigned int mFormatID; 
            unsigned int mFormatFlags; 
            unsigned int mBytesPerPacket; 
            unsigned int mFramesPerPacket; 
            unsigned int mBytesPerFrame; 
            unsigned int mChannelsPerFrame; 
            unsigned int mBitsPerChannel; 
            unsigned int mReserved; 
        } format; 
        unsigned int samplesPerFrame; 
    }  _inputFormat;
    unsigned char  _inputMeter;
    bool  _isAudioStalled;
    bool  _isConnectedOnIPv6_LowestConnectionQuality;
    bool  _isLocalCellular_LowestConnectionQuality;
    bool  _isRedEnabled;
    bool  _isRemoteCellular_LowestConnectionQuality;
    bool  _isUseCaseWatchContinuity;
    bool  _lastAudioStalled;
    char * _lastInputSampleBuffer;
    unsigned int  _lastInputSampleBufferSize;
    bool  _lastIsTalking;
    struct ifnet_interface_advisory { 
        union { 
            struct { 
                unsigned char version; 
                unsigned char direction; 
                unsigned short _reserved; 
                int rate_trend_suggestion; 
                unsigned long long timestamp; 
                unsigned long long max_bandwidth; 
                unsigned long long total_byte_count; 
                unsigned long long average_throughput; 
                unsigned int flushable_queue_size; 
                unsigned int non_flushable_queue_size; 
                unsigned int average_delay; 
                unsigned char frequency_band; 
                unsigned char intermittent_state; 
                unsigned short estimated_intermittent_period; 
                unsigned short single_outage_period; 
                unsigned char bt_coex; 
                unsigned char quality_score_delay; 
                unsigned char quality_score_loss; 
                unsigned char quality_score_channel; 
            } ; 
            struct { 
                struct ifnet_interface_advisory_header { 
                    unsigned char version; 
                    unsigned char direction; 
                    unsigned char interface_type; 
                    unsigned char reserved; 
                } header; 
                struct ifnet_interface_advisory_capacity { 
                    int rate_trend_suggestion; 
                    unsigned long long timestamp; 
                    unsigned long long max_bandwidth; 
                    unsigned long long total_byte_count; 
                    unsigned long long average_throughput; 
                    unsigned int flushable_queue_size; 
                    unsigned int non_flushable_queue_size; 
                    unsigned int average_delay; 
                } capacity; 
                union { 
                    struct ifnet_interface_advisory_wifi_context { 
                        unsigned char frequency_band; 
                        unsigned char intermittent_state; 
                        unsigned short estimated_intermittent_period; 
                        unsigned short single_outage_period; 
                        unsigned char bt_coex; 
                        unsigned char quality_score_delay; 
                        unsigned char quality_score_loss; 
                        unsigned char quality_score_channel; 
                        unsigned char radio_coex; 
                        unsigned short wlan_duty_cycle; 
                        unsigned int wifi_observed_tx_bitrate[6]; 
                    } wifi_context; 
                    struct ifnet_interface_advisory_cell_context { 
                        unsigned char radio_access_technology; 
                        short reference_signal_level; 
                        short signal_level; 
                        BOOL signal_quality; 
                        unsigned char uplink_bler; 
                        unsigned char downlink_bler; 
                        unsigned char bandwidth_limitation_indication; 
                        unsigned char cdrx_state; 
                        unsigned short cdrx_cycle; 
                        unsigned short estimated_outage_period; 
                        unsigned char outage_state; 
                        unsigned char __pad; 
                    } cell_context; 
                } ; 
            } ; 
        } ; 
    }  _lastNWConnectionNotification;
    double  _lastReportingCallbackTime;
    double  _lastReportingCallbackTimeShort;
    unsigned int  _lastSentAudioSampleTime;
    double  _lastTierSwitch;
    double  _lastUpdateQualityIndicator;
    unsigned int  _maxAudioPacketSize;
    unsigned int  _maxIDSStreamIdCount;
    unsigned char  _mediaControlInfoVersion;
    struct tagHANDLE { int x1; } * _mediaQueue;
    bool  _needsPacketThread;
    int  _operatingMode;
    unsigned int  _packetExpirationTimeInMillisecond;
    void * _packetThread;
    struct tagVCAudioDumpPayloadInfo { 
        bool audioDumpEnabled; 
        int payloadType; 
        bool isOctetAligned; 
        bool isEVSHeaderFull; 
        struct AudioStreamBasicDescription {} *format; 
    }  _payloadInfo;
    int  _payloadUsed;
    bool  _periodicReportingEnabled;
    unsigned int  _qualityIndex;
    int  _qualityIndicator;
    bool  _ramStadSRCEnabled;
    int  _ratType;
    unsigned int  _rateChangeCounter;
    VCAudioRedBuilder * _redBuilder;
    unsigned int  _redMaxDelay20ms;
    unsigned int  _redNumPayloads;
    VCRedundancyControllerAudio * _redundancyController;
    unsigned int  _redundancyControllerMaxDelay20ms;
    unsigned int  _redundancyControllerNumPayloads;
    double  _redundancyInterval;
    unsigned int  _redundancyPercentage;
    unsigned long long  _remoteIDSParticipantID;
    struct opaqueRTCReporting { } * _reportingAgent;
    int  _reportingModuleID;
    VCAudioTier * _requestedAudioTier;
    struct tagHANDLE { int x1; } * _rtpHandle;
    unsigned int  _rtpTimestampBase;
    struct tagHANDLE { int x1; } * _rtpVideo;
    bool  _sendActiveVoiceOnly;
    unsigned int  _sentAudioBytes;
    unsigned int  _sentAudioBytesShort;
    int  _sentBytes;
    struct tagVCCryptor { } * _sframeCryptor;
    bool  _shouldApplyRedAsBoolean;
    unsigned int  _silenceFrameCounter;
    AVCStatisticsCollector * _statisticsCollector;
    NSArray * _supportedNumRedundantPayload;
    bool  _supportsAdaptation;
    bool  _supportsCodecBandwidthUpdate;
    unsigned int  _targetBitrate;
    bool  _targetBitrateIsAudioOnly;
    unsigned int  _tierNetworkBitrate;
    unsigned char  _tierPickerMode;
    unsigned int  _totalTxAudioBytes;
    bool  _transmitROC;
    VCTransportSession * _transportSession;
    bool  _useChannelDataFormat;
    bool  _useRateControl;
    bool  _useWiFiTiers;
    unsigned int  _vadSegmentCounter;
    bool  _wifiAllowRedLowBitratesEnabled;
}

@property (nonatomic, readonly) int actualAudioSendingBitrate;
@property (nonatomic, readonly) VCPacketBundler *audioBundler;
@property (nonatomic, retain) VCAudioTierPicker *audioTierPicker;
@property (nonatomic, readonly) int audioTxBitrate;
@property (nonatomic, readonly) VCAudioPayloadConfig *currentAudioPayloadConfig;
@property (nonatomic, readonly) VCAudioTier *currentAudioTier;
@property (nonatomic) struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; } currentChannelMetrics;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (readonly, copy) NSString *debugDescription;
@property <VCAudioTransmitterDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSDictionary *dtxMetrics;
@property (nonatomic, readonly) unsigned int encodedBytes;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool ignoreSilence;
@property unsigned char inputMeter;
@property (nonatomic) bool isAudioStalled;
@property (nonatomic, readonly) bool isRedEnabled;
@property (nonatomic, readonly) unsigned int lastSentAudioSampleTime;
@property (nonatomic) unsigned int maxIDSStreamIdCount;
@property (nonatomic) unsigned char mediaControlInfoVersion;
@property (nonatomic) int operatingMode;
@property bool periodicReportingEnabled;
@property (nonatomic) int qualityIndicator;
@property (nonatomic) unsigned int rateChangeCounter;
@property (nonatomic, readonly) unsigned int redMaxDelay20ms;
@property (nonatomic, readonly) unsigned int redNumPayloads;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (nonatomic, readonly) unsigned int sentAudioBytes;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSArray *supportedNumRedundantPayload;
@property (nonatomic) unsigned int targetBitrate;
@property (nonatomic) bool useWiFiTiers;

- (int)actualAudioSendingBitrate;
- (bool)allocateLastInputSampleBuffer:(unsigned int)arg1;
- (id)audioBundler;
- (void)audioIssueDetectorCreateAndConfigure;
- (void)audioIssueDetectorStopAndFinalize;
- (id)audioTierPicker;
- (int)audioTxBitrate;
- (bool)chooseAudioNetworkBitrate;
- (id)currentAudioPayloadConfig;
- (id)currentAudioTier;
- (struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; })currentChannelMetrics;
- (void)currentPayloadUsed:(int)arg1 payloadUsed:(id*)arg2;
- (void)dealloc;
- (id)delegate;
- (id)dtxMetrics;
- (unsigned int)encodedBytes;
- (void)gatherRealtimeStats:(struct __CFDictionary { }*)arg1;
- (void)handleActiveConnectionChange:(id)arg1;
- (void)handleActiveConnectionChangeDefault:(id)arg1;
- (void)handleActiveConnectionChangeMultiway:(id)arg1;
- (void)handleCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; struct EVSRFParams { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; })arg1 didUpdateBandwidth:(bool*)arg2 didUpdateBitrate:(bool*)arg3;
- (bool)ignoreSilence;
- (void)initAudioValues;
- (id)initWithConfig:(id)arg1;
- (unsigned char)inputMeter;
- (bool)isAudioStalled;
- (bool)isCodecModeChangeRequestValid:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; struct EVSRFParams { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; })arg1;
- (bool)isCurrentDTXEnabled;
- (bool)isRedEnabled;
- (unsigned int)lastSentAudioSampleTime;
- (void)logTierInfo:(int)arg1;
- (unsigned int)maxIDSStreamIdCount;
- (unsigned int)maximumSamplesPerFrame;
- (unsigned char)mediaControlInfoVersion;
- (float)nextAudioInterval:(int)arg1;
- (int)operatingMode;
- (id)packetsPerBundle;
- (bool)periodicReportingEnabled;
- (void)processNWConnectionNotification:(struct ifnet_interface_advisory { union { struct { unsigned char x_1_2_1; unsigned char x_1_2_2; unsigned short x_1_2_3; int x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned long long x_1_2_7; unsigned long long x_1_2_8; unsigned int x_1_2_9; unsigned int x_1_2_10; unsigned int x_1_2_11; unsigned char x_1_2_12; unsigned char x_1_2_13; unsigned short x_1_2_14; unsigned short x_1_2_15; unsigned char x_1_2_16; unsigned char x_1_2_17; unsigned char x_1_2_18; unsigned char x_1_2_19; } x_1_1_1; struct { struct ifnet_interface_advisory_header { unsigned char x_1_3_1; unsigned char x_1_3_2; unsigned char x_1_3_3; unsigned char x_1_3_4; } x_2_2_1; struct ifnet_interface_advisory_capacity { int x_2_3_1; unsigned long long x_2_3_2; unsigned long long x_2_3_3; unsigned long long x_2_3_4; unsigned long long x_2_3_5; unsigned int x_2_3_6; unsigned int x_2_3_7; unsigned int x_2_3_8; } x_2_2_2; union { struct ifnet_interface_advisory_wifi_context { unsigned char x_1_4_1; unsigned char x_1_4_2; unsigned short x_1_4_3; unsigned short x_1_4_4; unsigned char x_1_4_5; unsigned char x_1_4_6; unsigned char x_1_4_7; unsigned char x_1_4_8; unsigned char x_1_4_9; unsigned short x_1_4_10; unsigned int x_1_4_11[6]; } x_3_3_1; struct ifnet_interface_advisory_cell_context { unsigned char x_2_4_1; short x_2_4_2; short x_2_4_3; BOOL x_2_4_4; unsigned char x_2_4_5; unsigned char x_2_4_6; unsigned char x_2_4_7; unsigned char x_2_4_8; unsigned short x_2_4_9; unsigned short x_2_4_10; unsigned char x_2_4_11; unsigned char x_2_4_12; } x_3_3_2; } x_2_2_3; } x_1_1_2; } x1; }*)arg1;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (int)qualityIndicator;
- (unsigned int)rateChangeCounter;
- (unsigned int)redMaxDelay20ms;
- (unsigned int)redNumPayloads;
- (void)redundancyController:(id)arg1 redundancyIntervalDidChange:(double)arg2;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;
- (unsigned int)redundancyControllerModeForOperatingMode:(int)arg1 isRedEnabled:(bool)arg2;
- (void)registerReportingTask;
- (void)removeUnusedAudioPayloads;
- (void)reportRTCPPacket;
- (void)reportRedundancyConfigChange;
- (bool)sendActiveVoiceOnly;
- (bool)sendCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; struct EVSRFParams { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; })arg1;
- (unsigned int)sentAudioBytes;
- (unsigned int)sentAudioBytesShort;
- (void)setAudioTierPicker:(id)arg1;
- (void)setCellTech:(int)arg1 remoteCellular:(int)arg2 isIPV6:(int)arg3 audioCap:(unsigned int)arg4;
- (void)setCurrentChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; })arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInputMeter:(unsigned char)arg1;
- (void)setIsAudioStalled:(bool)arg1;
- (void)setMaxIDSStreamIdCount:(unsigned int)arg1;
- (void)setMediaControlInfoVersion:(unsigned char)arg1;
- (void)setOperatingMode:(int)arg1;
- (void)setPeriodicReportingEnabled:(bool)arg1;
- (void)setQualityIndicator:(int)arg1;
- (void)setRateChangeCounter:(unsigned int)arg1;
- (void)setRedNumPayloads:(int)arg1 withMaxDelay:(int)arg2 shouldResetHistory:(bool)arg3;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setStreamIDs:(id)arg1;
- (void)setSupportedNumRedundantPayload:(id)arg1;
- (void)setTargetBitrate:(unsigned int)arg1;
- (void)setUseWiFiTiers:(bool)arg1;
- (bool)setupAudio:(id*)arg1;
- (bool)setupAudioEncoders;
- (void)setupAudioHeaderSize;
- (bool)setupAudioTierPicker;
- (bool)setupEncoderBuffer;
- (bool)shouldUpdateCodecBandwidth:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; struct EVSRFParams { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; })arg1;
- (bool)shouldUpdateCodecBitrate:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; struct EVSRFParams { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; })arg1;
- (void)start;
- (void)stop;
- (id)supportedNumRedundantPayload;
- (unsigned int)targetBitrate;
- (void)updateAudioTxBitrate;
- (void)updateAudioTxRate;
- (void)useAudioPayload:(id)arg1 withBitrate:(unsigned int)arg2;
- (void)useAudioTier:(id)arg1;
- (bool)useWiFiTiers;

@end
