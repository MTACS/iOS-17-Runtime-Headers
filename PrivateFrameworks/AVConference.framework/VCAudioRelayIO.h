
@interface VCAudioRelayIO : VCObject <NSCopying, VCAudioIOSink, VCAudioIOSource, VCBasebandCodecNotifications> {
    struct tagVCAudioFrameFormat { 
        struct AudioStreamBasicDescription { 
            double mSampleRate; 
            unsigned int mFormatID; 
            unsigned int mFormatFlags; 
            unsigned int mBytesPerPacket; 
            unsigned int mFramesPerPacket; 
            unsigned int mBytesPerFrame; 
            unsigned int mChannelsPerFrame; 
            unsigned int mBitsPerChannel; 
            unsigned int mReserved; 
        } format; 
        unsigned int samplesPerFrame; 
    }  _clientFormat;
    bool  _isRunning;
    struct opaqueVCAudioBufferList { } * _micBuffer;
    struct tagVCAudioRelayIOContext { 
        struct tagVCAudioFrameFormat {} *clientFormat; 
        struct tagVCAudioFrameFormat {} *relayFormat; 
        int (*callback)(); 
        void *callbackContext; 
        struct opaqueVCAudioBufferList {} *sampleBuffer; 
        float powerRMS; 
        struct tagVCAudioClientControllerTimeInfo { 
            unsigned int clientSampleRate; 
            unsigned int controllerSampleRate; 
            bool didHostTimeReferenceChange; 
            bool isLastHostTimeValid; 
            double lastHostTime; 
            unsigned int lastClientTimestamp; 
            unsigned int timestampOffset; 
            unsigned long long controllerTimestamp; 
        } timeInfo; 
    }  _micContext;
    float  _micPowerRMS;
    unsigned int  _micTimestamp;
    struct PacketThread_s { } * _packetThread;
    id  _relay;
    struct tagVCAudioFrameFormat { 
        struct AudioStreamBasicDescription { 
            double mSampleRate; 
            unsigned int mFormatID; 
            unsigned int mFormatFlags; 
            unsigned int mBytesPerPacket; 
            unsigned int mFramesPerPacket; 
            unsigned int mBytesPerFrame; 
            unsigned int mChannelsPerFrame; 
            unsigned int mBitsPerChannel; 
            unsigned int mReserved; 
        } format; 
        unsigned int samplesPerFrame; 
    }  _relayFormat;
    struct _VCRemoteCodecInfo { 
        unsigned int codecType; 
        double sampleRate; 
    }  _remoteCodecInfo;
    struct opaqueVCAudioBufferList { } * _speakerBuffer;
    struct tagVCAudioRelayIOContext { 
        struct tagVCAudioFrameFormat {} *clientFormat; 
        struct tagVCAudioFrameFormat {} *relayFormat; 
        int (*callback)(); 
        void *callbackContext; 
        struct opaqueVCAudioBufferList {} *sampleBuffer; 
        float powerRMS; 
        struct tagVCAudioClientControllerTimeInfo { 
            unsigned int clientSampleRate; 
            unsigned int controllerSampleRate; 
            bool didHostTimeReferenceChange; 
            bool isLastHostTimeValid; 
            double lastHostTime; 
            unsigned int lastClientTimestamp; 
            unsigned int timestampOffset; 
            unsigned long long controllerTimestamp; 
        } timeInfo; 
    }  _speakerContext;
    float  _speakerPowerRMS;
    unsigned int  _speakerTimestamp;
    id /* block */  _startCompletionHandler;
    int (* _updateRemoteCodecInfoCallback;
    void * _updateRemoteCodecInfoContext;
    bool  _usePacketThread;
}

@property (nonatomic) const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; }*clientFormat;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isRunning;
@property (nonatomic, readonly) struct opaqueVCAudioBufferList { }*micBuffer;
@property int (*micCallback;
@property void*micCallbackContext;
@property (readonly) const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*micContext;
@property float micPowerRMS;
@property unsigned int micTimestamp;
@property (readonly) struct PacketThread_s { }*packetThread;
@property (readonly) double preferredIODuration;
@property <VCBasebandCodecNotifications> *relay;
@property (readonly) const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; }*relayFormat;
@property (nonatomic) const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*remoteCodecInfo;
@property (nonatomic, readonly) struct opaqueVCAudioBufferList { }*speakerBuffer;
@property int (*speakerCallback;
@property void*speakerCallbackContext;
@property (readonly) const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*speakerContext;
@property float speakerPowerRMS;
@property unsigned int speakerTimestamp;
@property (copy) id /* block */ startCompletionHandler;
@property (readonly) Class superclass;
@property int (*updateRemoteCodecInfoCallback;
@property void*updateRemoteCodecInfoContext;
@property bool usePacketThread;

- (const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; }*)clientFormat;
- (void)closeRecordings;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)createAudioBuffers;
- (void)createBuffersForIOContext:(struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*)arg1;
- (bool)createPacketThreadWithIOBufferDuration:(double)arg1 name:(id)arg2 error:(id*)arg3;
- (void)createRecordingsWithName:(id)arg1;
- (void)dealloc;
- (void)destroyPacketThread;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)arg1;
- (id)init;
- (id)initWithMicContext:(const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*)arg1 speakerContext:(const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*)arg2;
- (void)initializeFormatContextPointers;
- (void)internalPushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (bool)isEqualToRelayIO:(id)arg1;
- (bool)isInitialized;
- (bool)isRunning;
- (struct opaqueVCAudioBufferList { }*)micBuffer;
- (int (*)micCallback;
- (void*)micCallbackContext;
- (const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*)micContext;
- (float)micPowerRMS;
- (unsigned int)micTimestamp;
- (struct PacketThread_s { }*)packetThread;
- (double)preferredIODuration;
- (void)printStreamFormats;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (id)relay;
- (const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; }*)relayFormat;
- (const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)remoteCodecInfo;
- (void)setClientFormat:(const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; }*)arg1;
- (void)setMicCallback:(int (*)arg1;
- (void)setMicCallbackContext:(void*)arg1;
- (void)setMicPowerRMS:(float)arg1;
- (void)setMicTimestamp:(unsigned int)arg1;
- (void)setRelay:(id)arg1;
- (void)setRemoteCodecInfo:(const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)arg1;
- (void)setSpeakerCallback:(int (*)arg1;
- (void)setSpeakerCallbackContext:(void*)arg1;
- (void)setSpeakerPowerRMS:(float)arg1;
- (void)setSpeakerTimestamp:(unsigned int)arg1;
- (void)setStartCompletionHandler:(id /* block */)arg1;
- (void)setUpdateRemoteCodecInfoCallback:(int (*)arg1;
- (void)setUpdateRemoteCodecInfoContext:(void*)arg1;
- (void)setUsePacketThread:(bool)arg1;
- (struct opaqueVCAudioBufferList { }*)speakerBuffer;
- (int (*)speakerCallback;
- (void*)speakerCallbackContext;
- (const struct tagVCAudioRelayIOContext { struct tagVCAudioFrameFormat {} *x1; struct tagVCAudioFrameFormat {} *x2; int (*x3)(); void *x4; struct opaqueVCAudioBufferList {} *x5; float x6; struct tagVCAudioClientControllerTimeInfo { unsigned int x_7_1_1; unsigned int x_7_1_2; bool x_7_1_3; bool x_7_1_4; double x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; unsigned long long x_7_1_8; } x7; }*)speakerContext;
- (float)speakerPowerRMS;
- (unsigned int)speakerTimestamp;
- (id /* block */)startCompletionHandler;
- (int (*)updateRemoteCodecInfoCallback;
- (void*)updateRemoteCodecInfoContext;
- (bool)usePacketThread;

@end
