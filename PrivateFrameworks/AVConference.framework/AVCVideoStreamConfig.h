
@interface AVCVideoStreamConfig : NSObject {
    long long  _captureSource;
    long long  _captureSourceID;
    unsigned long long  _customHeight;
    unsigned long long  _customWidth;
    unsigned long long  _cvoExtensionID;
    bool  _enableCVO;
    bool  _fecEnabled;
    unsigned long long  _framerate;
    unsigned long long  _hdrMode;
    bool  _isVideoProtected;
    unsigned long long  _keyFrameInterval;
    bool  _latencySensitiveModeEnabled;
    bool  _ltrpEnabled;
    unsigned int  _pixelFormat;
    NSString * _profileLevel;
    NSString * _remoteDeviceName;
    int  _remoteVideoInitialOrientation;
    bool  _rtxEnabled;
    NSString * _rxCodecFeatureListString;
    long long  _rxCodecType;
    unsigned long long  _rxMaxBitrate;
    unsigned long long  _rxMinBitrate;
    unsigned long long  _screenDisplayID;
    long long  _synchronizationSourceStreamToken;
    unsigned long long  _tilesPerFrame;
    long long  _transportProtocolType;
    NSString * _txCodecFeatureListString;
    long long  _txCodecType;
    unsigned long long  _txMaxBitrate;
    unsigned long long  _txMinBitrate;
    long long  _videoResolution;
    long long  _videoStreamMode;
}

@property (nonatomic) long long captureSource;
@property (nonatomic) long long captureSourceID;
@property (nonatomic) unsigned long long customHeight;
@property (nonatomic) unsigned long long customWidth;
@property (nonatomic) unsigned long long cvoExtensionID;
@property (nonatomic) bool enableCVO;
@property (getter=isFECEnabled, nonatomic) bool fecEnabled;
@property (nonatomic) unsigned long long framerate;
@property (nonatomic) unsigned long long hdrMode;
@property (nonatomic) bool isVideoProtected;
@property (nonatomic) unsigned long long keyFrameInterval;
@property (getter=isLatencySensitiveModeEnabled, nonatomic) bool latencySensitiveModeEnabled;
@property (getter=isLTRPEnabled, nonatomic) bool ltrpEnabled;
@property (nonatomic) unsigned int pixelFormat;
@property (nonatomic, retain) NSString *profileLevel;
@property (nonatomic, retain) NSString *remoteDeviceName;
@property (nonatomic) int remoteVideoInitialOrientation;
@property (getter=isRTXEnabled, nonatomic) bool rtxEnabled;
@property (nonatomic, retain) NSString *rxCodecFeatureListString;
@property (nonatomic) long long rxCodecType;
@property (nonatomic) unsigned long long rxMaxBitrate;
@property (nonatomic) unsigned long long rxMinBitrate;
@property (nonatomic) unsigned long long screenDisplayID;
@property (nonatomic) long long synchronizationSourceStreamToken;
@property (nonatomic) unsigned long long tilesPerFrame;
@property (nonatomic) long long transportProtocolType;
@property (nonatomic, retain) NSString *txCodecFeatureListString;
@property (nonatomic) long long txCodecType;
@property (nonatomic) unsigned long long txMaxBitrate;
@property (nonatomic) unsigned long long txMinBitrate;
@property (nonatomic) long long videoResolution;
@property (nonatomic) long long videoStreamMode;

+ (long long)clientCodecTypeWithCodecType:(long long)arg1;
+ (long long)clientVideoCaptureSourceFromCaptureSource:(int)arg1;
+ (long long)clientVideoResolutionFromResolution:(long long)arg1;
+ (long long)clientVideoStreamModeFromVideoStreamType:(long long)arg1;
+ (long long)codecTypeWithClientCodecType:(long long)arg1;
+ (bool)isPixelFormatValid:(unsigned int)arg1 hdrMode:(unsigned long long)arg2;
+ (int)videoCaptureSourceFromClientCaptureSource:(long long)arg1;
+ (long long)videoResolutionFromClientResolution:(long long)arg1;
+ (long long)videoStreamTypeFromClientVideoStreamMode:(long long)arg1;

- (long long)captureSource;
- (long long)captureSourceID;
- (unsigned long long)customHeight;
- (unsigned long long)customWidth;
- (unsigned long long)cvoExtensionID;
- (void)dealloc;
- (id)dictionary;
- (bool)enableCVO;
- (unsigned long long)framerate;
- (unsigned long long)hdrMode;
- (id)init;
- (bool)isFECEnabled;
- (bool)isLTRPEnabled;
- (bool)isLatencySensitiveModeEnabled;
- (bool)isRTXEnabled;
- (bool)isValidForDirection:(long long)arg1;
- (bool)isVideoProtected;
- (unsigned long long)keyFrameInterval;
- (unsigned int)pixelFormat;
- (id)profileLevel;
- (id)remoteDeviceName;
- (int)remoteVideoInitialOrientation;
- (id)rxCodecFeatureListString;
- (long long)rxCodecType;
- (unsigned long long)rxMaxBitrate;
- (unsigned long long)rxMinBitrate;
- (unsigned long long)screenDisplayID;
- (void)setCaptureSource:(long long)arg1;
- (void)setCaptureSourceID:(long long)arg1;
- (void)setCustomHeight:(unsigned long long)arg1;
- (void)setCustomWidth:(unsigned long long)arg1;
- (void)setCvoExtensionID:(unsigned long long)arg1;
- (void)setEnableCVO:(bool)arg1;
- (void)setFecEnabled:(bool)arg1;
- (void)setFramerate:(unsigned long long)arg1;
- (void)setHdrMode:(unsigned long long)arg1;
- (void)setIsVideoProtected:(bool)arg1;
- (void)setKeyFrameInterval:(unsigned long long)arg1;
- (void)setLatencySensitiveModeEnabled:(bool)arg1;
- (void)setLtrpEnabled:(bool)arg1;
- (void)setPixelFormat:(unsigned int)arg1;
- (void)setProfileLevel:(id)arg1;
- (void)setRemoteDeviceName:(id)arg1;
- (void)setRemoteVideoInitialOrientation:(int)arg1;
- (void)setRtxEnabled:(bool)arg1;
- (void)setRxCodecFeatureListString:(id)arg1;
- (void)setRxCodecType:(long long)arg1;
- (void)setRxMaxBitrate:(unsigned long long)arg1;
- (void)setRxMinBitrate:(unsigned long long)arg1;
- (void)setScreenDisplayID:(unsigned long long)arg1;
- (void)setSynchronizationSourceStreamToken:(long long)arg1;
- (void)setTilesPerFrame:(unsigned long long)arg1;
- (void)setTransportProtocolType:(long long)arg1;
- (void)setTxCodecFeatureListString:(id)arg1;
- (void)setTxCodecType:(long long)arg1;
- (void)setTxMaxBitrate:(unsigned long long)arg1;
- (void)setTxMinBitrate:(unsigned long long)arg1;
- (void)setUpWithDictionary:(id)arg1;
- (void)setVideoResolution:(long long)arg1;
- (void)setVideoStreamMode:(long long)arg1;
- (long long)synchronizationSourceStreamToken;
- (unsigned long long)tilesPerFrame;
- (long long)transportProtocolType;
- (id)txCodecFeatureListString;
- (long long)txCodecType;
- (unsigned long long)txMaxBitrate;
- (unsigned long long)txMinBitrate;
- (long long)videoResolution;
- (long long)videoStreamMode;

@end
