
@interface VCAVFoundationCapture : VCVideoCapture <AVCaptureDataOutputSynchronizerDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureVideoDataOutputSampleBufferDelegate, VCEffectsManagerDelegate, VCVideoSource> {
    int  _activeFrameRate;
    int  _activeHeight;
    int  _activeWidth;
    bool  _avCaptureDeviceInputLocked;
    bool  _beginCommitConfigForFormatSwitch;
    NSMutableArray * _cachedDataArray;
    AVCaptureDevice * _captureDevice;
    bool  _captureFormatNonBinOnlyOverride;
    int  _captureSIFRPreferredOverride;
    AVCaptureSession * _captureSession;
    NSObject<OS_dispatch_queue> * _captureSessionQueue;
    struct CGSize { 
        double width; 
        double height; 
    }  _captureSize;
    bool  _cframingEnabled;
    AVCaptureDepthDataOutput * _depthDataOutput;
    float  _depthFrameRateMultplier;
    bool  _deviceSupportCinematicFraming;
    bool  _effectsApplied;
    bool  _enableBufferStatsDump;
    bool  _faceMeshTrackingEnabled;
    bool  _forceDynamicEffectsFramerate;
    bool  _forceMirrorCapture;
    bool  _forcePearlCamera;
    int  _frameCount;
    VCImageResizingConverter * _imageCopyingConverter;
    VCImageMirroringConverter * _imageMirroringConverter;
    VCImageResizingConverter * _imageResizingConverter;
    VCImageRotationConverter * _imageRotationConverter;
    bool  _isBackgroundBlurActive;
    bool  _isCaptureDeviceInternal;
    bool  _isCaptureSIFRPreferred;
    bool  _isCapturing;
    bool  _isPreviewing;
    bool  _isReactionActive;
    bool  _isServerProcess;
    int  _lastClientRequestedFrameRate;
    AVCaptureMetadataOutput * _metadataOutput;
    struct __CFAllocator { } * _numberPropertyAllocator;
    int  _orientation;
    AVCaptureDataOutputSynchronizer * _outputSynchronizer;
    NSMutableArray * _outputSynchronizerOutputs;
    float  _processTimeSum;
    int  _processedFrameCount;
    NSMutableArray * _renderFrameTimes;
    struct CGSize { 
        double width; 
        double height; 
    }  _requestSize;
    bool  _resize;
    bool  _shouldRemoveExtraRotation;
    struct tagVCVideoBufferStatistics { int x1; int x2; bool x3; double x4; double x5; double x6; double x7; double x8; } * _statsBuffer;
    bool  _supportPortraitResolution;
    bool  _useAVConferenced;
    AVCaptureVideoDataOutput * _videoCaptureOutput;
    AVCaptureDeviceInput * _videoDeviceInput;
    bool  _viewPointCorrectionEnabled;
    NSObject<OS_dispatch_queue> * _viewPointCorrectionQueue;
    VCViewpointCorrection * _viewpointCorrection;
    float  _viewpointProcessTime;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) AVCaptureDepthDataOutput *depthDataOutput;
@property (readonly, copy) NSString *description;
@property bool effectsApplied;
@property bool faceMeshTrackingEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateRegionOfInterest:(struct CGSize { double x1; double x2; })arg1 requestSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })frameDurationForFrameRateRangeWithMinFrameRate:(double)arg1 maxFrameRate:(double)arg2 minFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 maxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 desiredFrameRate:(int)arg5;
+ (bool)isServerProcess;
+ (id)newCaptureSession;
+ (id)newVideoCaptureOutput;
+ (id)newVideoDeviceInput:(id)arg1 error:(id*)arg2;

- (void)applyVideoRetainedBufferCountHint;
- (bool)cameraContainsCaptureFormatWithWidth:(int)arg1 height:(int)arg2;
- (id)cameraFormatForWidth:(int)arg1 height:(int)arg2;
- (id)cameraFormatForWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3;
- (id)cameraFormatForWidthWithList:(int)arg1 height:(int)arg2 frameRate:(int)arg3 formatList:(id)arg4;
- (bool)cameraSupportsFormatWidth:(int)arg1 height:(int)arg2;
- (bool)cameraSupportsNoQueueFormatWidth:(int)arg1 height:(int)arg2;
- (long long)captureDevicePosition;
- (void)captureOutput:(id)arg1 didOutputMetadataObjects:(id)arg2 fromConnection:(id)arg3;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)captureSessionNotification:(id)arg1;
- (long long)captureTierForEncodingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)configCaptureConnectionForDevice:(id)arg1;
- (void)configureCaptureDeviceDepthFormat;
- (int)configureCaptureWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x_1_2_1 : 24; unsigned int x_1_2_2 : 8; } x_1_1_1; unsigned int x_1_1_2; } x1; })arg1;
- (void)configureMetadataTypesForOutput:(id)arg1;
- (int)copyColorInfo:(const struct __CFDictionary {}**)arg1;
- (void)dataOutputSynchronizer:(id)arg1 didOutputSynchronizedDataCollection:(id)arg2;
- (void)dealloc;
- (id)depthDataOutput;
- (bool)effectsApplied;
- (void)encodeProcessedPixelBuffer:(struct __CVBuffer { }*)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 imageData:(id)arg3 processTime:(id)arg4;
- (bool)faceMeshTrackingEnabled;
- (int)frameBecameAvailableCount:(int*)arg1 figBufferQueueEmptyCount:(int*)arg2 figBufferQueueErrorCount:(int*)arg3;
- (int)frameCount:(bool)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })frameDurationForVideoDeviceFormat:(id)arg1 frameRate:(int)arg2;
- (id)getCaptureFormatList;
- (int)getFrameRate;
- (int)getMaxAllowedFrameRate:(int)arg1;
- (struct CGSize { double x1; double x2; })getOptimizedCameraCaptureWidth:(int)arg1 height:(int)arg2;
- (void)getReportingStats:(struct __CFDictionary { }*)arg1;
- (int)getSupportedMaxDeviceFrameRateWithFrameRateCap:(int)arg1;
- (bool)hasRequiredAttributes:(id)arg1;
- (id)initWithCaptureServer:(id)arg1 protocolFunctions:(const struct tagVCVideoCaptureServerProtocolRealtimeInstanceVTable { int (*x1)(); }*)arg2 width:(int)arg3 height:(int)arg4 frameRate:(int)arg5 videoSourceToken:(struct _VCVideoSourceToken { union { struct { unsigned int x_1_2_1 : 24; unsigned int x_1_2_2 : 8; } x_1_1_1; unsigned int x_1_1_2; } x1; })arg6 cinematicFramingEnabled:(bool)arg7 videoOrientation:(int)arg8;
- (void)initializeMetadataOutput;
- (void)initializeOutputs;
- (void)initializeSynchronizedOutputs;
- (void)initializeVideoCaptureOutput;
- (int)invalidate;
- (bool)isBackCamera;
- (bool)isCurrentCaptureDeviceAppleProduct;
- (bool)isFormatMaxFrameRateSupported:(id)arg1 frameRate:(int)arg2;
- (bool)isFrameRateActive:(int)arg1 captureFormat:(id)arg2;
- (bool)isFrontCamera;
- (bool)isPortraitResolutionCaptureActive;
- (bool)isPreviewRunning;
- (bool)isVideoDeviceInputSupportCFraming:(id)arg1;
- (void)lockAVCaptureDeviceInputForConfiguration;
- (id)newCaptureDevice:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)prepareSynchronizedOutputs:(id)arg1;
- (void)processMetadataObjects:(id)arg1;
- (void)processReactionStatus:(id)arg1 oldReactions:(id)arg2;
- (void)resetDepthDataOutput;
- (void)resetViewPointLogging;
- (void)setBufferStatsBuffer:(struct tagVCVideoBufferStatistics { int x1; int x2; bool x3; double x4; double x5; double x6; double x7; double x8; }*)arg1;
- (int)setCamera:(struct _VCVideoSourceToken { union { struct { unsigned int x_1_2_1 : 24; unsigned int x_1_2_2 : 8; } x_1_1_1; unsigned int x_1_1_2; } x1; })arg1 width:(int)arg2 height:(int)arg3 frameRate:(int)arg4;
- (void)setCameraZoomFactor:(double)arg1;
- (void)setCameraZoomFactor:(double)arg1 withRate:(double)arg2;
- (void)setCinematicFramingEnabled:(bool)arg1;
- (void)setEffectsApplied:(bool)arg1;
- (void)setFaceMeshTrackingEnabled:(bool)arg1;
- (int)setFrameRate:(int)arg1;
- (int)setFrameRateInternal:(int)arg1 forceSourceFrameRateDidChange:(bool)arg2;
- (void)setMetaDataObjectsDelegate;
- (void)setOrientation:(int)arg1;
- (void)setReactionActive:(bool)arg1;
- (void)setUpBackgroundBlurObserver:(bool)arg1;
- (void)setUpCaptureDevicePropertyObserver:(bool)arg1;
- (void)setUpReactionObserver:(bool)arg1;
- (void)setVideoCaptureOutputDelegate;
- (int)setVideoDeviceToSelectedDevice:(id)arg1;
- (int)setVideoDeviceToWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3;
- (void)setVideoStabilization:(bool)arg1;
- (void)setViewPointCorrectionEnabled:(bool)arg1;
- (int)setWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3;
- (bool)shouldAddDepthData;
- (bool)shouldAddTrackedFacesData;
- (bool)shouldAdjustCaptureWithOrientation:(int)arg1;
- (bool)shouldResizeWithCaptureSize:(struct CGSize { double x1; double x2; })arg1 requestSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)shouldUseCameraVideoStabilization;
- (int)startCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3;
- (int)startPreview;
- (int)stop:(bool)arg1;
- (bool)supportsPortraitResolution;
- (bool)supportsViewpointCorrection;
- (void)tearDownSynchronizer;
- (void)unlockAVCaptureDeviceInputForConfiguration;
- (void)updateCameraZoomCapability;
- (void)updateCaptureDeviceProperties;
- (void)updateCenterStageRegionOfInterestWithLock:(bool)arg1;
- (void)updateDepthFrameRate;
- (void)updateRenderProcessFrameRate:(id)arg1;
- (long long)videoOrientationForDevice:(id)arg1;

@end
