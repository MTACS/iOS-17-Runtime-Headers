
@interface AVCSessionParticipant : NSObject <AVCSessionParticipantControlProtocol> {
    bool  _audioMuted;
    bool  _configurationInProgress;
    VCXPCClientShared * _connection;
    id  _delegate;
    NSObject<OS_dispatch_queue> * _delegateNotificationQueue;
    NSData * _frequencyLevels;
    bool  _hasPendingChanges;
    unsigned long long  _idsParticipantID;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _mediaStateMutex;
    NSMutableDictionary * _mediaStates;
    NSDictionary * _mediaTypeToSpatialSourceIDMap;
    bool  _oneToOneEnabled;
    NSMutableDictionary * _participantConfig;
    NSData * _participantData;
    NSString * _participantID;
    unsigned int  _prominenceIndex;
    bool  _remoteScreenEnabled;
    bool  _screenControlEnabled;
    long long  _screenToken;
    NSObject<OS_dispatch_queue> * _stateQueue;
    NSDictionary * _streamGroupIDToStreamTokenMap;
    VCPositionalInfo * _videoPositionalInfo;
    unsigned char  _videoQuality;
    long long  _videoToken;
    unsigned int  _visibilityIndex;
    float  _volume;
}

@property (getter=isAudioEnabled, nonatomic) bool audioEnabled;
@property (getter=isAudioMuted, nonatomic) bool audioMuted;
@property (getter=isAudioPaused, nonatomic) bool audioPaused;
@property (nonatomic, readonly) NSDictionary *config;
@property (nonatomic) bool configurationInProgress;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVCSessionParticipantDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateNotificationQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSData *frequencyLevels;
@property (nonatomic) bool hasPendingChanges;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSData *negotiationData;
@property (getter=isOneToOneEnabled, nonatomic) bool oneToOneEnabled;
@property (nonatomic, readonly) unsigned long long participantID;
@property (nonatomic) unsigned int prominenceIndex;
@property (nonatomic) bool remoteScreenEnabled;
@property (getter=isScreenControlEnabled, nonatomic) bool screenControlEnabled;
@property (getter=isScreenEnabled, nonatomic) bool screenEnabled;
@property (nonatomic) long long screenToken;
@property (nonatomic, retain) VCXPCClientShared *sharedXPCConnection;
@property (nonatomic, readonly) unsigned long long spatialAudioSourceID;
@property (nonatomic) NSObject<OS_dispatch_queue> *stateQueue;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *uuid;
@property (getter=isVideoEnabled, nonatomic) bool videoEnabled;
@property (getter=isVideoPaused, nonatomic) bool videoPaused;
@property (nonatomic) struct tagAVCPositionalInfo { unsigned int x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; } videoPositionalInfo;
@property (nonatomic) unsigned char videoQuality;
@property (nonatomic) long long videoToken;
@property (nonatomic) unsigned int visibilityIndex;
@property (nonatomic) float volume;

+ (id)archiveMediaStates:(id)arg1;
+ (unsigned int)defaultStateForMediaType:(unsigned int)arg1 isLocal:(bool)arg2;
+ (bool)isMediaStateAPISupportedForMediaType:(unsigned int)arg1;
+ (id)loopbackNegotiationDataWithData:(id)arg1;
+ (id)unarchiveMediaStatesWithData:(id)arg1;

- (void)appendConfigurationToXPCConfiguration:(id)arg1;
- (void)completeAudioEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)completeAudioPaused:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)completeScreenEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)completeSetMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2 didSucceed:(bool)arg3 error:(id)arg4;
- (void)completeVideoEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)completeVideoPaused:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (id)config;
- (bool)configurationInProgress;
- (void)dealloc;
- (id)delegate;
- (id)delegateNotificationQueue;
- (void)deregisterFromNotifications;
- (id)description;
- (void)dispatchedCompleteAudioEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)dispatchedCompleteAudioPaused:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)dispatchedCompleteScreenEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)dispatchedCompleteVideoEnabled:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)dispatchedCompleteVideoPaused:(bool)arg1 didSucceed:(bool)arg2 error:(id)arg3;
- (void)dispatchedLegacySetMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (unsigned int)dispatchedMediaStateForMediaType:(unsigned int)arg1;
- (void)dispatchedSetMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (id)frequencyLevels;
- (bool)generateMediaStateEntryForMediaType:(unsigned int)arg1;
- (void)handleLegacyTransitionsForMediaType:(unsigned int)arg1 mediaState:(unsigned int)arg2 previousState:(unsigned int)arg3 didSucceed:(bool)arg4 error:(id)arg5;
- (bool)hasPendingChanges;
- (id)initWithParticipantID:(unsigned long long)arg1 data:(id)arg2 delegate:(id)arg3 queue:(id)arg4;
- (bool)isAudioEnabled;
- (bool)isAudioMuted;
- (bool)isAudioPaused;
- (bool)isConnectedToSession;
- (bool)isEnabledMediaType:(unsigned int)arg1;
- (bool)isOneToOneEnabled;
- (bool)isPausedMediaType:(unsigned int)arg1;
- (bool)isScreenControlEnabled;
- (bool)isScreenEnabled;
- (bool)isVideoEnabled;
- (bool)isVideoPaused;
- (unsigned int)mediaStateForMediaType:(unsigned int)arg1;
- (id)negotiationData;
- (id)newNSErrorWithErrorDictionary:(id)arg1;
- (unsigned long long)participantID;
- (void)printMediaStates;
- (unsigned int)prominenceIndex;
- (void)registerBlocksForNotifications;
- (bool)remoteScreenEnabled;
- (long long)screenToken;
- (void)setAudioEnabled:(bool)arg1;
- (void)setAudioMuted:(bool)arg1;
- (void)setAudioPaused:(bool)arg1;
- (void)setConfigurationInProgress:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHasPendingChanges:(bool)arg1;
- (void)setMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (void)setMediaType:(unsigned int)arg1 enabled:(bool)arg2 mediaString:(const char *)arg3 xpcMessageKey:(char *)arg4 xpcOperationKey:(id)arg5 completionBlock:(id /* block */)arg6;
- (void)setMediaType:(unsigned int)arg1 paused:(bool)arg2 mediaString:(const char *)arg3 xpcMessageKey:(char *)arg4 xpcOperationKey:(id)arg5 completionBlock:(id /* block */)arg6;
- (void)setMediaTypeToSpatialSourceIDMap:(id)arg1;
- (void)setOneToOneEnabled:(bool)arg1;
- (void)setProminenceIndex:(unsigned int)arg1;
- (void)setRemoteScreenEnabled:(bool)arg1;
- (void)setScreenControlEnabled:(bool)arg1;
- (void)setScreenEnabled:(bool)arg1;
- (void)setScreenToken:(long long)arg1;
- (void)setSharedXPCConnection:(id)arg1;
- (void)setStateQueue:(id)arg1;
- (void)setStreamTokens:(id)arg1;
- (void)setVideoEnabled:(bool)arg1;
- (void)setVideoPaused:(bool)arg1;
- (void)setVideoPositionalInfo:(struct tagAVCPositionalInfo { unsigned int x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; })arg1;
- (void)setVideoQuality:(unsigned char)arg1;
- (void)setVideoToken:(long long)arg1;
- (void)setVisibilityIndex:(unsigned int)arg1;
- (void)setVolume:(float)arg1;
- (void)setupConfig;
- (bool)setupMediaStates;
- (void)setupNotificationQueue:(id)arg1;
- (id)sharedXPCConnection;
- (unsigned long long)spatialAudioSourceID;
- (unsigned long long)spatialAudioSourceIDForMediaType:(unsigned int)arg1;
- (id)stateQueue;
- (void)stateTransitionForMediaType:(unsigned int)arg1 mediaState:(unsigned int)arg2 previousState:(unsigned int)arg3 didSucceed:(bool)arg4 error:(id)arg5;
- (void)storeMediaState:(unsigned int)arg1 forMediaType:(unsigned int)arg2;
- (long long)streamTokenForStreamGroupID:(unsigned int)arg1;
- (void)updateLegacyStates;
- (id)uuid;
- (struct tagAVCPositionalInfo { unsigned int x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; })videoPositionalInfo;
- (unsigned char)videoQuality;
- (long long)videoToken;
- (unsigned int)visibilityIndex;
- (float)volume;

@end
