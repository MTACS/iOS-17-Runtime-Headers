
@interface VCAudioTransmitterConfig : NSObject {
    struct tagHANDLE { int x1; } * _afrcHandle;
    bool  _allowAudioSwitching;
    bool  _alwaysOnAudioRedundancyEnabled;
    bool  _audioDumpEnabled;
    bool  _audioIssueDetectorEnabled;
    NSMutableArray * _audioPayloads;
    int  _bundlingScheme;
    bool  _cellularAllowRedLowBitratesEnabled;
    VCAudioPayload * _chosenAudioPayload;
    VCAudioPayload * _chosenDTXPayload;
    int  _chosenRedPayloadType;
    unsigned int  _constantTransportOverhead;
    void * _controlInfoGenerator;
    bool  _currentDTXEnable;
    bool  _ignoreSilence;
    bool  _includeRedSequenceOffset;
    struct tagVCAudioFrameFormat { 
        struct AudioStreamBasicDescription { 
            double mSampleRate; 
            unsigned int mFormatID; 
            unsigned int mFormatFlags; 
            unsigned int mBytesPerPacket; 
            unsigned int mFramesPerPacket; 
            unsigned int mBytesPerFrame; 
            unsigned int mChannelsPerFrame; 
            unsigned int mBitsPerChannel; 
            unsigned int mReserved; 
        } format; 
        unsigned int samplesPerFrame; 
    }  _inputFormat;
    bool  _isUseCaseWatchContinuity;
    unsigned int  _maxAudioPacketSize;
    unsigned int  _maxIDSStreamIdCount;
    unsigned char  _mediaControlInfoVersion;
    struct tagHANDLE { int x1; } * _mediaQueue;
    bool  _needsPacketThread;
    int  _operatingMode;
    unsigned int  _packetExpirationTime;
    unsigned char  _packetsPerBundle;
    unsigned int  _qualityIndex;
    bool  _ramStadSRCEnabled;
    int  _ratType;
    bool  _redEnabled;
    unsigned int  _redMaxDelay20ms;
    unsigned int  _redNumPayloads;
    unsigned long long  _remoteIDSParticipantID;
    struct opaqueRTCReporting { } * _reportingAgent;
    int  _reportingParentID;
    struct tagHANDLE { int x1; } * _rtpHandle;
    struct tagHANDLE { int x1; } * _rtpVideo;
    bool  _sendActiveVoiceOnly;
    struct tagVCCryptor { } * _sframeCryptor;
    bool  _shouldApplyRedAsBoolean;
    bool  _shouldCreateRedundancyController;
    bool  _shouldUseRedAsBoolean;
    AVCStatisticsCollector * _statisticsCollector;
    NSArray * _streamIDs;
    NSArray * _supportedNumRedundantPayload;
    bool  _supportsAdaptation;
    bool  _supportsCodecBandwidthUpdate;
    bool  _targetBitrateIsAudioOnly;
    unsigned int  _tierNetworkBitrate;
    unsigned char  _tierPickerMode;
    bool  _transmitROC;
    VCTransportSession * _transportSession;
    bool  _useChannelDataFormat;
    bool  _useRateControl;
    bool  _useWifiTiers;
    bool  _wifiAllowRedLowBitratesEnabled;
}

@property (nonatomic) struct tagHANDLE { int x1; }*afrcHandle;
@property (nonatomic) bool allowAudioSwitching;
@property (nonatomic) bool alwaysOnAudioRedundancyEnabled;
@property (nonatomic) bool audioDumpEnabled;
@property (nonatomic) bool audioIssueDetectorEnabled;
@property (nonatomic, retain) NSMutableArray *audioPayloads;
@property (nonatomic) int bundlingScheme;
@property (nonatomic) bool cellularAllowRedLowBitratesEnabled;
@property (nonatomic, retain) VCAudioPayload *chosenAudioPayload;
@property (nonatomic, retain) VCAudioPayload *chosenDTXPayload;
@property (nonatomic) int chosenRedPayloadType;
@property (nonatomic) unsigned int constantTransportOverhead;
@property (nonatomic) void*controlInfoGenerator;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (nonatomic) bool ignoreSilence;
@property (nonatomic) bool includeRedSequenceOffset;
@property (nonatomic) struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; } inputFormat;
@property (nonatomic) bool isUseCaseWatchContinuity;
@property (nonatomic) unsigned int maxAudioPacketSize;
@property (nonatomic) unsigned int maxIDSStreamIdCount;
@property (nonatomic) unsigned char mediaControlInfoVersion;
@property (nonatomic) struct tagHANDLE { int x1; }*mediaQueue;
@property (nonatomic) bool needsPacketThread;
@property (nonatomic) int operatingMode;
@property (nonatomic) unsigned int packetExpirationTime;
@property (nonatomic) unsigned char packetsPerBundle;
@property (nonatomic) unsigned int qualityIndex;
@property (nonatomic) bool ramStadSRCEnabled;
@property (nonatomic) int ratType;
@property (getter=isRedEnabled, nonatomic) bool redEnabled;
@property (nonatomic) unsigned int redMaxDelay20ms;
@property (nonatomic) unsigned int redNumPayloads;
@property (nonatomic) unsigned long long remoteIDSParticipantID;
@property (nonatomic) struct opaqueRTCReporting { }*reportingAgent;
@property (nonatomic) int reportingParentID;
@property (nonatomic) struct tagHANDLE { int x1; }*rtpHandle;
@property (nonatomic) struct tagHANDLE { int x1; }*rtpVideo;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (nonatomic) struct tagVCCryptor { }*sframeCryptor;
@property (nonatomic) bool shouldApplyRedAsBoolean;
@property (nonatomic) bool shouldCreateRedundancyController;
@property (nonatomic, retain) AVCStatisticsCollector *statisticsCollector;
@property (nonatomic, retain) NSArray *streamIDs;
@property (nonatomic, retain) NSArray *supportedNumRedundantPayload;
@property (nonatomic) bool supportsAdaptation;
@property (nonatomic) bool supportsCodecBandwidthUpdate;
@property (nonatomic) bool targetBitrateIsAudioOnly;
@property (nonatomic) unsigned int tierNetworkBitrate;
@property (nonatomic) unsigned char tierPickerMode;
@property (nonatomic) bool transmitROC;
@property (nonatomic, retain) VCTransportSession *transportSession;
@property (nonatomic) bool useChannelDataFormat;
@property (nonatomic) bool useRateControl;
@property (nonatomic) bool useWifiTiers;
@property (nonatomic) bool wifiAllowRedLowBitratesEnabled;

- (struct tagHANDLE { int x1; }*)afrcHandle;
- (bool)allowAudioSwitching;
- (bool)alwaysOnAudioRedundancyEnabled;
- (bool)audioDumpEnabled;
- (bool)audioIssueDetectorEnabled;
- (id)audioPayloads;
- (int)bundlingScheme;
- (bool)cellularAllowRedLowBitratesEnabled;
- (id)chosenAudioPayload;
- (id)chosenDTXPayload;
- (int)chosenRedPayloadType;
- (unsigned int)constantTransportOverhead;
- (void*)controlInfoGenerator;
- (void)dealloc;
- (id)description;
- (bool)ignoreSilence;
- (bool)includeRedSequenceOffset;
- (struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; })inputFormat;
- (bool)isCurrentDTXEnabled;
- (bool)isRedEnabled;
- (bool)isUseCaseWatchContinuity;
- (unsigned int)maxAudioPacketSize;
- (unsigned int)maxIDSStreamIdCount;
- (unsigned char)mediaControlInfoVersion;
- (struct tagHANDLE { int x1; }*)mediaQueue;
- (bool)needsPacketThread;
- (int)operatingMode;
- (unsigned int)packetExpirationTime;
- (unsigned char)packetsPerBundle;
- (unsigned int)qualityIndex;
- (bool)ramStadSRCEnabled;
- (int)ratType;
- (unsigned int)redMaxDelay20ms;
- (unsigned int)redNumPayloads;
- (unsigned long long)remoteIDSParticipantID;
- (struct opaqueRTCReporting { }*)reportingAgent;
- (int)reportingParentID;
- (struct tagHANDLE { int x1; }*)rtpHandle;
- (struct tagHANDLE { int x1; }*)rtpVideo;
- (bool)sendActiveVoiceOnly;
- (void)setAfrcHandle:(struct tagHANDLE { int x1; }*)arg1;
- (void)setAllowAudioSwitching:(bool)arg1;
- (void)setAlwaysOnAudioRedundancyEnabled:(bool)arg1;
- (void)setAudioDumpEnabled:(bool)arg1;
- (void)setAudioIssueDetectorEnabled:(bool)arg1;
- (void)setAudioPayloads:(id)arg1;
- (void)setBundlingScheme:(int)arg1;
- (void)setCellularAllowRedLowBitratesEnabled:(bool)arg1;
- (void)setChosenAudioPayload:(id)arg1;
- (void)setChosenDTXPayload:(id)arg1;
- (void)setChosenRedPayloadType:(int)arg1;
- (void)setConstantTransportOverhead:(unsigned int)arg1;
- (void)setControlInfoGenerator:(void*)arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setIgnoreSilence:(bool)arg1;
- (void)setIncludeRedSequenceOffset:(bool)arg1;
- (void)setInputFormat:(struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; unsigned int x2; })arg1;
- (void)setIsUseCaseWatchContinuity:(bool)arg1;
- (void)setMaxAudioPacketSize:(unsigned int)arg1;
- (void)setMaxIDSStreamIdCount:(unsigned int)arg1;
- (void)setMediaControlInfoVersion:(unsigned char)arg1;
- (void)setMediaQueue:(struct tagHANDLE { int x1; }*)arg1;
- (void)setNeedsPacketThread:(bool)arg1;
- (void)setOperatingMode:(int)arg1;
- (void)setPacketExpirationTime:(unsigned int)arg1;
- (void)setPacketsPerBundle:(unsigned char)arg1;
- (void)setQualityIndex:(unsigned int)arg1;
- (void)setRamStadSRCEnabled:(bool)arg1;
- (void)setRatType:(int)arg1;
- (void)setRedEnabled:(bool)arg1;
- (void)setRedMaxDelay20ms:(unsigned int)arg1;
- (void)setRedNumPayloads:(unsigned int)arg1;
- (void)setRemoteIDSParticipantID:(unsigned long long)arg1;
- (void)setReportingAgent:(struct opaqueRTCReporting { }*)arg1;
- (void)setReportingParentID:(int)arg1;
- (void)setRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (void)setRtpVideo:(struct tagHANDLE { int x1; }*)arg1;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setSframeCryptor:(struct tagVCCryptor { }*)arg1;
- (void)setShouldApplyRedAsBoolean:(bool)arg1;
- (void)setShouldCreateRedundancyController:(bool)arg1;
- (void)setStatisticsCollector:(id)arg1;
- (void)setStreamIDs:(id)arg1;
- (void)setSupportedNumRedundantPayload:(id)arg1;
- (void)setSupportsAdaptation:(bool)arg1;
- (void)setSupportsCodecBandwidthUpdate:(bool)arg1;
- (void)setTargetBitrateIsAudioOnly:(bool)arg1;
- (void)setTierNetworkBitrate:(unsigned int)arg1;
- (void)setTierPickerMode:(unsigned char)arg1;
- (void)setTransmitROC:(bool)arg1;
- (void)setTransportSession:(id)arg1;
- (void)setUseChannelDataFormat:(bool)arg1;
- (void)setUseRateControl:(bool)arg1;
- (void)setUseWifiTiers:(bool)arg1;
- (void)setWifiAllowRedLowBitratesEnabled:(bool)arg1;
- (struct tagVCCryptor { }*)sframeCryptor;
- (bool)shouldApplyRedAsBoolean;
- (bool)shouldCreateRedundancyController;
- (id)statisticsCollector;
- (id)streamIDs;
- (id)supportedNumRedundantPayload;
- (bool)supportsAdaptation;
- (bool)supportsCodecBandwidthUpdate;
- (bool)targetBitrateIsAudioOnly;
- (unsigned int)tierNetworkBitrate;
- (unsigned char)tierPickerMode;
- (bool)transmitROC;
- (id)transportSession;
- (bool)useChannelDataFormat;
- (bool)useRateControl;
- (bool)useWifiTiers;
- (bool)wifiAllowRedLowBitratesEnabled;

@end
