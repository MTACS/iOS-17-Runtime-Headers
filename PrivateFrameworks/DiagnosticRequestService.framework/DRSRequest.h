
@interface DRSRequest : NSObject <DRSDSRequestObject> {
    NSString * _build;
    NSString * _ckRecordID;
    NSDictionary * _contextDictionary;
    NSData * _contextDictionaryData;
    unsigned char  _decisionServerDecision;
    NSString * _errorDescription;
    bool  _hasBeenCountedByTelemetry;
    bool  _isExpedited;
    NSString * _issueCategory;
    NSString * _issueDescription;
    NSString * _logType;
    NSArray * _logs;
    NSDate * _requestDate;
    NSUUID * _requestID;
    unsigned long long  _requestMCT;
    unsigned long long  _requestState;
    NSArray * _submittedLogInfos;
    NSString * _teamID;
    unsigned short  _uploadAttemptCount;
    unsigned long long  _uploadID;
}

@property (nonatomic, readonly) NSString *build;
@property (nonatomic, readonly) NSString *ckRecordID;
@property (nonatomic, readonly) NSDictionary *contextDictionary;
@property (nonatomic, readonly) NSData *contextDictionaryData;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned char decisionServerDecision;
@property (nonatomic, readonly) NSString *decisionServerDecisionString;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSString *errorDescription;
@property (nonatomic, readonly) unsigned long long expectedType;
@property (nonatomic, readonly) NSString *functionName;
@property (nonatomic) bool hasBeenCountedByTelemetry;
@property (nonatomic, readonly) bool hasUploadableContent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isExpedited;
@property (nonatomic, readonly) bool isNonPurgeableInFlightUntilUploadAttempt;
@property (nonatomic, readonly) NSString *issueCategory;
@property (nonatomic, readonly) NSString *issueDescription;
@property (nonatomic, readonly) unsigned long long logSizeLimitBytes;
@property (nonatomic, retain) NSString *logType;
@property (nonatomic, retain) NSArray *logs;
@property (nonatomic, readonly) <DRSDecisionServerBatchRequest> *pbBatchInstance;
@property (nonatomic, readonly) Class pbBatchResponseClass;
@property (nonatomic, readonly) PBRequest *pbRequest;
@property (nonatomic, readonly) NSDate *requestDate;
@property (nonatomic, readonly) NSUUID *requestID;
@property (nonatomic, readonly) unsigned long long requestMCT;
@property (nonatomic, readonly) unsigned char requestOutcome;
@property (nonatomic, readonly) NSString *requestOutcomeString;
@property (nonatomic) unsigned long long requestState;
@property (nonatomic, readonly) NSString *requestStateString;
@property (nonatomic, readonly) NSString *requestType;
@property (nonatomic, readonly) NSArray *submittedLogInfos;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *teamID;
@property (nonatomic, readonly) unsigned long long totalLogSizeBytes;
@property (nonatomic, readonly) NSUUID *uniqueID;
@property (nonatomic) unsigned short uploadAttemptCount;
@property (nonatomic, readonly) unsigned long long uploadID;

+ (Class)_moClass;
+ (bool)_requestMOHasRequiredFields_ON_MOC_QUEUE:(id)arg1;
+ (id)_requestWithRequestMO_ON_MOC_QUEUE:(id)arg1;
+ (bool)cleanRequestRecordsFromPersistentContainer:(id)arg1 removeFiles:(bool)arg2 removeRecord:(bool)arg3 matchingPredicate:(id)arg4 errorOut:(id*)arg5;
+ (bool)cullOldRequestRecordsFromPersistentContainer:(id)arg1 currentDate:(id)arg2 errorOut:(id*)arg3;
+ (id)entityName;
+ (bool)isExpeditedTeamID:(id)arg1 issueCategory:(id)arg2;
+ (id)leastRecentDateFirstSortDescriptor;
+ (id)migrateRequestDataStoreAtPath:(id)arg1 errorOut:(id*)arg2;
+ (id)mostRecentDateFirstSortDescriptor;
+ (unsigned long long)requestCountForFilterPredicate:(id)arg1 context:(id)arg2 fetchLimit:(unsigned long long)arg3 errorOut:(id*)arg4;
+ (id)requestForMessage:(id)arg1;
+ (id)requestsForFilterPredicate:(id)arg1 context:(id)arg2 sortDescriptors:(id)arg3 fetchLimit:(unsigned long long)arg4 errorOut:(id*)arg5;
+ (id)requiredSystemResourceName;
+ (id)unreportedTerminalRequestsFromContext:(id)arg1 sortDescriptors:(id)arg2 fetchLimit:(unsigned long long)arg3 errorOut:(id*)arg4;
+ (id)uploadedBytesSinceDate:(id)arg1 context:(id)arg2 errorOut:(id*)arg3;

- (void).cxx_destruct;
- (void)_addLogMOs:(id)arg1;
- (void)_configureRequestMO:(id)arg1;
- (bool)_deleteLogs;
- (id)_initWithRequestMO_ON_MOC_QUEUE:(id)arg1;
- (id)_logsDescription;
- (bool)_markLogsAsPurgeableWithUrgencyWithDeleteFallback:(unsigned long long)arg1;
- (bool)_performPostClientLogWork:(id)arg1 dampeningOutcome:(unsigned long long)arg2 isLogUploadEnabled:(bool)arg3;
- (bool)_populateLogsArray_ON_MOC_QUEUE:(id)arg1;
- (id)_processSubmittedLogInfo:(id)arg1 workingDirectory:(id)arg2;
- (bool)_updateLogFileStateForTransitionFromPreviousState:(unsigned long long)arg1;
- (bool)_updateLogStateToExpectedState:(unsigned char)arg1;
- (id)build;
- (id)ckRecordID;
- (id)contextDictionary;
- (id)contextDictionaryData;
- (id)debugDescription;
- (unsigned char)decisionServerDecision;
- (id)decisionServerDecisionString;
- (id)errorDescription;
- (unsigned long long)expectedType;
- (id)fileAssets;
- (id)fileNames;
- (id)filePaths;
- (id)fileURLs;
- (id)functionName;
- (bool)hasBeenCountedByTelemetry;
- (bool)hasUploadableContent;
- (id)initWithXPCDict:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToRequest:(id)arg1;
- (bool)isExpedited;
- (bool)isNonPurgeableInFlightUntilUploadAttempt;
- (id)issueCategory;
- (id)issueDescription;
- (id)jsonCompatibleDictionaryRepresentationVerbose:(bool)arg1;
- (id)logPath;
- (unsigned long long)logSizeLimitBytes;
- (id)logType;
- (id)logs;
- (void)makeTerminalDueToMissingLog;
- (id)newRequestMOInContext_ON_MOC_QUEUE:(id)arg1;
- (id)pbBatchInstance;
- (Class)pbBatchResponseClass;
- (id)pbRequest;
- (bool)performOnReceiptWork:(id)arg1 dampeningOutcome:(unsigned long long)arg2;
- (id)protoFileDescriptions;
- (id)protoRequestDescription;
- (id)recordRepresentation;
- (id)replyForMessage:(id)arg1;
- (id)requestDate;
- (id)requestID;
- (unsigned long long)requestMCT;
- (unsigned char)requestOutcome;
- (id)requestOutcomeString;
- (unsigned long long)requestState;
- (id)requestStateString;
- (id)requestType;
- (void)setDecisionServerDecision:(unsigned char)arg1;
- (void)setHasBeenCountedByTelemetry:(bool)arg1;
- (void)setLogType:(id)arg1;
- (void)setLogs:(id)arg1;
- (void)setRequestState:(unsigned long long)arg1;
- (void)setUploadAttemptCount:(unsigned short)arg1;
- (id)submittedLogInfos;
- (id)targetContainerName;
- (id)teamID;
- (unsigned long long)totalLogSizeBytes;
- (id)uniqueID;
- (void)updateContextWithRequest_ON_MOC_QUEUE:(id)arg1;
- (bool)updateToState:(unsigned long long)arg1 errorDescription:(id)arg2 errorOut:(id*)arg3;
- (void)uploadAbortedDueToLogSize;
- (unsigned short)uploadAttemptCount;
- (void)uploadCompleteWithError:(id)arg1 ckRecordID:(id)arg2;
- (void)uploadDeniedByDecisionServerWithReason:(id)arg1;
- (void)uploadFailedDueToReason:(id)arg1;
- (unsigned long long)uploadID;
- (id)uploadRequest;
- (bool)uploadStarted;

@end
