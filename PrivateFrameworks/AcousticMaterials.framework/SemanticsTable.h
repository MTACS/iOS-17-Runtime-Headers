
@interface SemanticsTable : NSObject {
    struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { 
        struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _MeshClassificationMap;
    struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { 
        struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _MeshMaterialMap;
    struct unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>> { 
        struct __hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _SemanticsMap;
}

@property /* Warning: unhandled struct encoding: '{unordered_map<NSString *' */ struct  MeshClassificationMap; /* unknown property attribute:  std::hash<NSString *>>>=f}}} */
@property /* Warning: unhandled struct encoding: '{unordered_map<NSString *' */ struct  MeshMaterialMap; /* unknown property attribute:  std::hash<NSString *>>>=f}}} */
@property /* Warning: unhandled struct encoding: '{unordered_map<semantic_pair' */ struct  SemanticsMap; /* unknown property attribute:  std::hash<semantic_pair>>>=f}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })MeshClassificationMap;
- (struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })MeshMaterialMap;
- (struct unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>> { struct __hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })SemanticsMap;
- (bool)getARMeshClassificationID:(id)arg1 ARMeshClassificationID:(long long*)arg2;
- (bool)getARMeshMaterialID:(id)arg1 ARMeshMaterialID:(long long*)arg2;
- (struct materialsForPair { id x1; id x2; id x3; }*)getMaterialsForPair:(const struct semantic_pair { long long x1; long long x2; unsigned long long x3; }*)arg1;
- (id)labelsForSemanticType:(id)arg1 error:(out id*)arg2;
- (void)readTable:(out id*)arg1;
- (void)setMeshClassificationMap:(struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })arg1;
- (void)setMeshMaterialMap:(struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })arg1;
- (void)setSemanticsMap:(struct unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>> { struct __hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })arg1;

@end
