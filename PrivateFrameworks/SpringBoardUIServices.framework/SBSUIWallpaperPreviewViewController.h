
@interface SBSUIWallpaperPreviewViewController : UIViewController <PBUILegibilitySettingsProviderDelegate, SBFLegibilitySettingsProvider, SBSUIWallpaperPreviewViewDelegate> {
    bool  _allowScrolling;
    bool  _colorSamplingEnabled;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRect;
    NSTimer * _dateTimer;
    SBFLockScreenDateViewController * _dateViewController;
    <SBFLegibilitySettingsProviderDelegate> * _delegate;
    bool  _disableContents;
    bool  _disableParallax;
    bool  _enableButtons;
    _SBSUIOrientedImageView * _homeScreenPreviewView;
    SBSUIWallpaperProgressHUD * _hud;
    PBUIWallpaperConfiguration * _initialConfiguration;
    bool  _irisEnabled;
    bool  _motionEnabled;
    NSString * _name;
    PBUIWallpaperOptions * _options;
    NSDictionary * _optionsDict;
    double  _parallaxFactor;
    <SBSUIWallpaperPreviewViewControllerDelegate> * _previewDelegate;
    NSDictionary * _proceduralWallpaper;
    NSDictionary * _proceduralWallpaperOptions;
    double  _stillTimeInVideo;
    long long  _variant;
    AVURLAsset * _video;
    NSDictionary * _videoDict;
    PBUIWallpaperConfiguration * _wallpaperConfiguration;
    PBUIWallpaperConfigurationManager * _wallpaperConfigurationManager;
    SBFWallpaperCoreAnalyticsLogger * _wallpaperCoreAnalyticsLogger;
    UIImage * _wallpaperImage;
    NSDictionary * _wallpaperImageDict;
    double  _zoomScale;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBFLegibilitySettingsProviderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool irisEnabled;
@property (nonatomic, readonly) _UILegibilitySettings *legibilitySettings;
@property (nonatomic) bool motionEnabled;
@property (nonatomic) double parallaxFactor;
@property (nonatomic) <SBSUIWallpaperPreviewViewControllerDelegate> *previewDelegate;
@property (readonly) Class superclass;
@property (readonly) UIImage *wallpaperImage;
@property (nonatomic, readonly, copy) SBFWallpaperOptions *wallpaperOptions;
@property (nonatomic) double zoomScale;

- (void).cxx_destruct;
- (void)_applyHomeScreenPreview;
- (id)_colorWallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 configuration:(id)arg3;
- (id)_dateView;
- (void)_displaySettingWallpaperHUD;
- (void)_enableIrisOrParallaxIfEligible;
- (void)_logWallpaperChangeForLocations:(long long)arg1;
- (double)_parallaxFactor;
- (id)_previewView;
- (id)_previewViewIfLoaded;
- (id)_proceduralWallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 configuration:(id)arg3;
- (void)_setImageWallpaperForLocationsOnMainThread:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setProceduralWallpaperForLocationsOnMainThread:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setWallpaperForLocationsOnMainThread:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setWallpaperImagesOnMainThread:(id)arg1 options:(id)arg2 locations:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)_startDateTimer;
- (void)_stopDateTimer;
- (void)_updateDateView;
- (id)_wallpaperConfigurationManager;
- (long long)_wallpaperType;
- (id)_wallpaperTypeDescription;
- (id)_wallpaperView;
- (id)_wallpaperViewIfLoaded;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 image:(id)arg2 video:(id)arg3 videoURL:(id)arg4 stillTimeInVideo:(double)arg5 supportsCropping:(bool)arg6 variant:(long long)arg7 needsWallpaperDimming:(bool)arg8;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 options:(id)arg3;
- (bool)colorSamplingEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (void)dealloc;
- (id)delegate;
- (id)initWithImage:(id)arg1;
- (id)initWithImage:(id)arg1 name:(id)arg2;
- (id)initWithImage:(id)arg1 name:(id)arg2 video:(id)arg3 time:(double)arg4;
- (id)initWithImage:(id)arg1 video:(id)arg2 variant:(long long)arg3 options:(id)arg4 disableSegmentedControl:(bool)arg5 enableButtons:(bool)arg6 disableContents:(bool)arg7;
- (id)initWithImages:(id)arg1 videos:(id)arg2 variant:(long long)arg3 options:(id)arg4 disableSegmentedControl:(bool)arg5 enableButtons:(bool)arg6 disableContents:(bool)arg7;
- (id)initWithImages:(id)arg1 videos:(id)arg2 variant:(long long)arg3 options:(id)arg4 disableSegmentedControl:(bool)arg5 enableButtons:(bool)arg6 disableContents:(bool)arg7 disableParallax:(bool)arg8;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithProceduralWallpaper:(id)arg1 options:(id)arg2;
- (id)initWithProceduralWallpaper:(id)arg1 options:(id)arg2 variant:(long long)arg3 disableSegmentedControl:(bool)arg4 enableButtons:(bool)arg5 disableContents:(bool)arg6;
- (id)initWithScrollableImage:(id)arg1;
- (id)initWithScrollableImage:(id)arg1 video:(id)arg2 time:(double)arg3;
- (id)initWithWallpaperVariant:(long long)arg1;
- (bool)irisEnabled;
- (id)legibilitySettings;
- (void)loadView;
- (bool)motionEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (double)parallaxFactor;
- (bool)prefersStatusBarHidden;
- (id)previewDelegate;
- (void)providerLegibilitySettingsChanged:(id)arg1;
- (void)setColorSamplingEnabled:(bool)arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setImageWallpaperForLocations:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setIrisEnabled:(bool)arg1;
- (void)setMotionEnabled:(bool)arg1;
- (void)setMotionEnabled:(bool)arg1 updateParallaxOnWallpaperView:(bool)arg2;
- (void)setParallaxFactor:(double)arg1;
- (void)setPreviewDelegate:(id)arg1;
- (void)setWallpaperForLocations:(long long)arg1;
- (void)setWallpaperForLocations:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setWallpaperImages:(id)arg1 options:(id)arg2 locations:(long long)arg3;
- (void)setWallpaperImages:(id)arg1 options:(id)arg2 locations:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)setZoomScale:(double)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)userDidTapOnCancelButton:(id)arg1;
- (void)userDidTapOnIrisButton:(id)arg1;
- (void)userDidTapOnParallaxButton:(id)arg1;
- (void)userDidTapOnSetButton:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (id)wallpaperImage;
- (id)wallpaperOptions;
- (double)zoomScale;

@end
