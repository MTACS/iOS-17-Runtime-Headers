
@interface CHRecognizerConfiguration : NSObject {
    int  _autoCapitalizationMode;
    int  _autoCorrectionMode;
    int  _baseWritingDirection;
    int  _contentType;
    int  _contentTypeForNoSpaceRecognition;
    bool  _enableCachingIfAvailable;
    bool  _enableGen2CharacterLMIfAvailable;
    bool  _enableGen2ModelIfAvailable;
    unsigned long long  _language;
    NSLocale * _locale;
    int  _mode;
    unsigned long long  _script;
}

@property (nonatomic, readonly) int autoCapitalizationMode;
@property (nonatomic, readonly) int autoCorrectionMode;
@property (nonatomic, readonly) int baseWritingDirection;
@property (nonatomic, readonly) int contentType;
@property (nonatomic, readonly) int contentTypeForNoSpaceRecognition;
@property (nonatomic, readonly) bool enableCachingIfAvailable;
@property (nonatomic, readonly) bool enableGen2CharacterLMIfAvailable;
@property (nonatomic, readonly) bool enableGen2ModelIfAvailable;
@property (nonatomic, readonly, copy) NSLocale *locale;
@property (nonatomic, readonly) int mode;

+ (id)allNonLatinModelNames;
+ (id)defaultActiveCharacterSetForLocale:(id)arg1;
+ (id)defaultActiveCharacterSetForLocales:(id)arg1;
+ (id)defaultLocaleForRecognitionType:(int)arg1 withMode:(int)arg2;
+ (struct CGSize { double x1; double x2; })defaultMinimumDrawingSize;
+ (long long)drawingStrokeLimitForLocale:(id)arg1;
+ (id)effectiveRecognitionLocales:(id)arg1 recognitionMode:(int)arg2;
+ (id)forcedGen2ModelLocaleForLocale:(id)arg1;
+ (bool)isLocaleSupported:(id)arg1 withMode:(int)arg2;
+ (bool)isSupportedCyrillicScriptLocale:(id)arg1 withMode:(int)arg2;
+ (bool)isSupportedLatinScriptLocale:(id)arg1 withMode:(int)arg2;
+ (id)localeForScriptClass:(id)arg1;
+ (id)localesByLanguageGroup:(id)arg1;
+ (id)localesForScriptClassification:(id)arg1 selectedScriptCodepoints:(id)arg2;
+ (id)modelNameArabic;
+ (id)modelNameChinese;
+ (id)modelNameCyrillic;
+ (id)modelNameJapanese;
+ (id)modelNameKorean;
+ (id)modelNameLatin;
+ (id)modelNameThai;
+ (id)modelNameVietnamese;
+ (id)parametersOverride;
+ (id)recognitionEngineCachingKeyForRecognitionLocale:(id)arg1;
+ (void)setParametersOverride:(id)arg1;
+ (bool)shouldAddSpaceToNeutralQuotationMarks:(id)arg1;
+ (bool)shouldAdjustGroupingForLocale:(id)arg1;
+ (bool)shouldAdjustGroupingHeuristicsForVeryComplexCharacters:(id)arg1;
+ (bool)shouldAllowSpaceInsertionGestureForLocale:(id)arg1;
+ (bool)shouldApplyLatinSpacingForLocale:(id)arg1;
+ (bool)shouldApplyThaiSpacingForLocale:(id)arg1;
+ (bool)shouldForceNoAlternativeRecognitionCandidates:(id)arg1;
+ (bool)shouldInsertSpaceBetweenPreviousChar:(id)arg1 andNextChar:(id)arg2 inLocale:(id)arg3 inString:(id)arg4 atRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 withQuoteCount:(id)arg6;
+ (bool)shouldPerformStrictCandidateFiltering:(id)arg1;
+ (bool)shouldRefinePrefixQueryMatchesForLocale:(id)arg1;
+ (bool)shouldRemoveSpaceBetweenPreviousChar:(id)arg1 andNextChar:(id)arg2 inLocale:(id)arg3;
+ (bool)shouldSwapCyrillicTopResult:(id)arg1 topRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 englishResult:(id)arg3 englishRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 prevousGroupTopString:(id)arg5;
+ (bool)shouldUseFullWidthSpaceBasedOnContextForLocale:(id)arg1;
+ (bool)shouldUseStrokeReorderingForMode:(int)arg1;
+ (double)skipLatinActivationThreshold;
+ (id)spellCheckingLocaleForRecognitionLocale:(id)arg1 string:(id)arg2;
+ (id)stringForAutoCapitalizationMode:(int)arg1;
+ (id)stringForAutoCorrectionMode:(int)arg1;
+ (id)stringForBaseWritingDirection:(int)arg1;
+ (id)stringForRecognitionContentType:(int)arg1;
+ (id)stringForRecognitionMode:(int)arg1;
+ (id)swappableColumnIndexesFromResults:(id)arg1 locales:(id)arg2;
+ (id)swappableColumnIndexesFromResults:(id)arg1 locales:(id)arg2 topLocaleIndex:(long long)arg3;
+ (long long)writingOrientationForLocale:(id)arg1;

- (void).cxx_destruct;
- (int)autoCapitalizationMode;
- (int)autoCorrectionMode;
- (int)baseWritingDirection;
- (id)configurationKey;
- (int)contentType;
- (int)contentTypeForNoSpaceRecognition;
- (id /* block */)decodingCommitActionBlock;
- (id)description;
- (int)effectiveAutoCapitalizationMode;
- (bool)enableCachingIfAvailable;
- (bool)enableGen2CharacterLMIfAvailable;
- (bool)enableGen2ModelIfAvailable;
- (long long)engineCandidateCount;
- (id)forcedActiveCharacterSet;
- (bool)hasSamePostProcessingAsConfiguration:(id)arg1;
- (bool)hasSameResourcesAsConfiguration:(id)arg1;
- (id)initWithMode:(int)arg1 locale:(id)arg2 contentType:(int)arg3 autoCapitalizationMode:(int)arg4 autoCorrectionMode:(int)arg5 baseWritingDirection:(int)arg6 enableCachingIfAvailable:(bool)arg7 enableGen2ModelIfAvailable:(bool)arg8 enableGen2CharacterLMIfAvailable:(bool)arg9;
- (id)initWithMode:(int)arg1 locale:(id)arg2 contentType:(int)arg3 enableCachingIfAvailable:(bool)arg4 enableGen2ModelIfAvailable:(bool)arg5 enableGen2CharacterLMIfAvailable:(bool)arg6;
- (bool)isEqualToRecognizerConfiguration:(id)arg1;
- (id)languageResourceBundleWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 wordLanguageModel:(void*)arg3;
- (int (*)lexiconStringNormalizationFunction;
- (id)linguisticResourcesFallbackLocale;
- (id)locale;
- (long long)maxRecognitionResultDefaultCount;
- (int)mecabraInputMethodType;
- (unsigned long long)mixedScriptPenalty;
- (int)mode;
- (void*)newCJKStaticLexicon;
- (id)newCTCRecognitionModel;
- (id)newCTCTextDecoderWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 wordLanguageModel:(void*)arg3;
- (void*)newCharacterLanguageModelAndMap:(void*)arg1 force:(bool)arg2;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)newFreeFormEngine;
- (void*)newGrammarFST;
- (id)newMecabraWrapper;
- (id)newMergedResultPostProcessorWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 stringChecker:(id)arg3;
- (id)newOVSStringCheckerWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2;
- (id)newPatternFST;
- (struct _LXLexicon { }*)newPhraseLexicon:(id*)arg1;
- (id)newPostProcessorWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 phraseLexicon:(struct _LXLexicon { }*)arg3 customPhraseLexicon:(struct _LXLexicon { }*)arg4 textReplacements:(id)arg5 postProcessingFST:(id)arg6 wordLM:(void*)arg7 mecabraWrapper:(id)arg8 ovsStringChecker:(id)arg9 spellChecker:(id)arg10 lmVocabulary:(void*)arg11 maxResultCount:(long long)arg12;
- (void*)newRadicalClusterFST;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)newRecognitionEngine;
- (struct _LXLexicon { }*)newSecondaryStaticLexicon:(id*)arg1;
- (id)newSpellChecker;
- (struct _LXLexicon { }*)newStaticLexicon:(id*)arg1;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)newTransliterationVariantMap;
- (void*)newWordLanguageModel;
- (void*)newWordLanguageModelForRecognizer:(id)arg1 async:(bool)arg2 synchronizationQueue:(id)arg3;
- (id /* block */)pathScoringFunctionForLanguageResourceBundle:(id)arg1;
- (struct _LXLexicon { }*)postProcessorLexiconWithStaticLexicon:(struct _LXLexicon { }*)arg1 secondaryLexicon:(struct _LXLexicon { }*)arg2;
- (long long)precedingSpaceDefaultBehavior;
- (unsigned int)requiredInappropriateFilteringFlags;
- (id)sharedPostProcessingFST;
- (bool)shouldAddAlternativeWidthCandidates;
- (bool)shouldApplyCandidatesThresholding;
- (bool)shouldApplyChinesePostProcessing;
- (bool)shouldApplyDiacriticSensitivity;
- (bool)shouldApplyLMRescoring;
- (bool)shouldApplyLMSorting;
- (bool)shouldApplyLexicalPenalty;
- (bool)shouldApplyRomanPostProcessing;
- (bool)shouldApplySemanticTokenization;
- (bool)shouldAutoCapitalize;
- (bool)shouldAutoCorrect;
- (bool)shouldComposeLexiconWithNetwork;
- (bool)shouldComputeStrokePenalties;
- (bool)shouldConvertKanaInPostProcessing;
- (bool)shouldCreatePseudoTokens;
- (bool)shouldDetectChinesePunctuation;
- (bool)shouldDetectRomanPunctuation;
- (bool)shouldEnforceGrammarOnTransliterations;
- (bool)shouldExpandCodePoints;
- (bool)shouldExpandLexiconInNetwork;
- (bool)shouldFallbackOnSingleCharacterExpansion;
- (bool)shouldFilterLowProbabilityTranscriptionPaths;
- (bool)shouldForwardMecabraOTAAssetsUpdate;
- (bool)shouldGenerateDigitLetterAlternatives;
- (bool)shouldIdentifyChangeableColumns;
- (bool)shouldKeepDuplicateTokenIDs;
- (bool)shouldKeepOutOfPatternCandidates;
- (bool)shouldLoadCJKLexicons;
- (bool)shouldMarkMultiWordOVS;
- (bool)shouldMarkNoWhiteSpaceColumnsChangeable;
- (bool)shouldPenalizeLetterInsertion;
- (bool)shouldPenalizePrefixes;
- (bool)shouldPerformArabicPostProcessing;
- (bool)shouldPerformGlobalBestSearch;
- (bool)shouldPerformGlobalBestSearchWithSmallLattice;
- (bool)shouldPerformIntegratedLexiconExpansion;
- (bool)shouldPreserveLegacyTranscriptionPaths;
- (bool)shouldPromoteCJKCommonCharacters;
- (bool)shouldPromoteInLexiconCandidates;
- (bool)shouldRecoverCyrillicCandidates;
- (bool)shouldRefineCandidates;
- (bool)shouldRefineChineseCharacterCandidates;
- (bool)shouldRelaxFinalCandidatesThresholding;
- (bool)shouldRemoveInvalidArabicDiacritics;
- (bool)shouldRemoveSpacesFromHashtagsAndMentions;
- (bool)shouldReorderSCTCConfusion;
- (bool)shouldReplaceInvalidTokenIDs;
- (bool)shouldRunLexiconCorrectionPostProcessingStep;
- (bool)shouldRunNextGenRecognizer;
- (bool)shouldTransformCharacterProbabilitiesIntoLogScores;
- (bool)shouldTransliterateAndSynthetizeCandidates;
- (bool)shouldTransliterateHalfWidthPunctuations;
- (bool)shouldTransliterateSentencesSCTC;
- (bool)shouldTreatAllSmallStrokesAsPunctuation;
- (bool)shouldUpdateChangeableColumnCountWithPhraseLexicon;
- (bool)shouldUseCaching;
- (bool)shouldUseModernizedCTCDecoder;
- (bool)shouldUseTokenPrecedingSpaces;
- (unsigned long long)supportedSegmentationStrategy;
- (bool)unsafeForSpellCorrection;

@end
