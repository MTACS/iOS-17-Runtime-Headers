
@interface GKMatch : NSObject <GKTransportClientDelegate, GKTransportSupport, GameCenterFoundation.ExponentialBackoffTaskDelegate> {
    bool  _canPromptTapToRadar;
    id /* block */  _chooseHostCompletion;
    NSMutableSet * _connectedPlayerIDs;
    <GKMatchDelegate> * _delegate;
    unsigned long long  _expectedPlayerCount;
    bool  _fastStartStateActive;
    NSString * _groupIdentifier;
    bool  _hostScoreForQuery;
    NSMutableDictionary * _hostScores;
    bool  _initiallyStarted;
    <GKMatchDelegatePrivate> * _inviteDelegateWeak;
    GKMultiplayerActivityReporter * _multiplayerActivityReporter;
    bool  _needHostScore;
    NSDictionary * _networkStatistics;
    NSMutableArray * _opponentIDs;
    unsigned int  _packetSequenceNumber;
    _TtC20GameCenterFoundation22ExponentialBackoffTask * _pendingConnectionChecker;
    NSMutableDictionary * _playerEventQueues;
    NSMutableDictionary * _playerPushTokens;
    GKThreadsafeDictionary * _playersByIdentifier;
    GKThreadsafeDictionary * _playersByJoinType;
    GKThreadsafeDictionary * _propertiesByPlayerID;
    bool  _recentlyBecameActive;
    NSMutableArray * _reinvitedPlayers;
    long long  _rematchCount;
    NSString * _rematchID;
    NSObject<OS_dispatch_queue> * _stateChangeQueue;
    <GKTransportProtocol> * _transport;
    GKTransportContext * _transportContext;
    unsigned char  _version;
}

@property (nonatomic) bool canPromptTapToRadar;
@property (nonatomic, copy) id /* block */ chooseHostCompletion;
@property (nonatomic, retain) NSMutableSet *connectedPlayerIDs;
@property (nonatomic, readonly) unsigned long long currentPlayerCount;
@property (nonatomic, readonly) unsigned long long currentPlayerCountIncludingLocalPlayer;
@property (nonatomic) <GKMatchDelegate> *delegate;
@property (nonatomic, readonly) unsigned long long expectedPlayerCount;
@property (nonatomic) bool fastStartStateActive;
@property (nonatomic, retain) NSString *groupIdentifier;
@property (nonatomic, readonly) NSArray *guestPlayers;
@property (nonatomic) bool hostScoreForQuery;
@property (nonatomic, retain) NSMutableDictionary *hostScores;
@property (nonatomic) bool initiallyStarted;
@property (nonatomic) <GKMatchDelegatePrivate> *inviteDelegate;
@property (nonatomic, retain) GKMultiplayerActivityReporter *multiplayerActivityReporter;
@property (nonatomic) bool needHostScore;
@property (nonatomic, retain) NSDictionary *networkStatistics;
@property (nonatomic, retain) NSMutableArray *opponentIDs;
@property (nonatomic) unsigned int packetSequenceNumber;
@property (nonatomic, retain) _TtC20GameCenterFoundation22ExponentialBackoffTask *pendingConnectionChecker;
@property (nonatomic, retain) NSMutableDictionary *playerEventQueues;
@property (nonatomic, retain) NSMutableDictionary *playerPushTokens;
@property (nonatomic, readonly) NSArray *players;
@property (nonatomic, retain) GKThreadsafeDictionary *playersByIdentifier;
@property (nonatomic, retain) GKThreadsafeDictionary *playersByJoinType;
@property (nonatomic, readonly) NSDictionary *playersProperties;
@property (nonatomic, readonly) NSDictionary *properties;
@property (nonatomic, retain) GKThreadsafeDictionary *propertiesByPlayerID;
@property (nonatomic) bool recentlyBecameActive;
@property (nonatomic, retain) NSMutableArray *reinvitedPlayers;
@property (nonatomic) long long rematchCount;
@property (nonatomic, retain) NSString *rematchID;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *stateChangeQueue;
@property (nonatomic, retain) <GKTransportProtocol> *transport;
@property (nonatomic, retain) GKTransportContext *transportContext;
@property (nonatomic) unsigned char version;

- (void).cxx_destruct;
- (void)_delegate:(id)arg1 didReceiveData:(id)arg2 forRecipient:(id)arg3 fromPlayer:(id)arg4;
- (void)acceptRelayResponse:(id)arg1 player:(id)arg2;
- (void)addPlayerToGroup:(id)arg1;
- (void)addPlayers:(id)arg1;
- (id)allIDs;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationWillTerminateNotification:(id)arg1;
- (bool)canPromptTapToRadar;
- (void)cancelPendingConnectionCheckWithReason:(id)arg1;
- (void)chooseBestHostPlayerWithCompletionHandler:(id /* block */)arg1;
- (void)chooseBestHostingPlayerWithCompletionHandler:(id /* block */)arg1;
- (id /* block */)chooseHostCompletion;
- (void)cleanupForTerminationWithReason:(long long)arg1;
- (void)clearSessionWithReason:(long long)arg1;
- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;
- (void)conditionallyRelaunchPlayer:(id)arg1;
- (void)connectToGuestPlayer:(id)arg1 withHostPlayer:(id)arg2;
- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;
- (void)connectToPlayers:(id)arg1 version:(unsigned char)arg2 invitedByLocalPlayer:(bool)arg3;
- (id)connectedPlayerIDs;
- (id)connectedPlayers;
- (void)connectionDidChangeWithState:(int)arg1 playerID:(id)arg2;
- (void)connectionDidFailWithError:(id)arg1;
- (unsigned long long)currentPlayerCount;
- (unsigned long long)currentPlayerCountIncludingLocalPlayer;
- (id)dataFromBase64String:(id)arg1;
- (void)dealloc;
- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (id)delegate;
- (void)deliverData:(id)arg1 forRecipient:(id)arg2 fromPlayer:(id)arg3;
- (id)description;
- (void)disconnect;
- (unsigned long long)expectedPlayerCount;
- (bool)fastStartStateActive;
- (id)getConnectionContextForPlayerID:(id)arg1;
- (void)getLocalConnectionDataWithCompletionHandler:(id /* block */)arg1;
- (id)groupIdentifier;
- (id)guestPlayers;
- (void)handleRelayPushData:(id)arg1 onlyIfPreemptive:(bool)arg2;
- (bool)hostScoreForQuery;
- (id)hostScores;
- (id)init;
- (id)initWithTransport:(id)arg1 context:(id)arg2 reporter:(id)arg3;
- (bool)initiallyStarted;
- (id)inviteDelegate;
- (void)localPlayerDidChange:(id)arg1;
- (id)makeInviteMessageDoneData;
- (id)multiplayerActivityReporter;
- (id)nearbyConnectionData;
- (bool)needHostScore;
- (id)networkStatistics;
- (id)opponentIDs;
- (id)packet:(unsigned char)arg1 data:(id)arg2;
- (unsigned int)packetSequenceNumber;
- (id)pendingConnectionChecker;
- (id)pendingInviteesOfLocalPlayer;
- (id)playerEventQueues;
- (id)playerFromID:(id)arg1;
- (id)playerFromID:(id)arg1 includingLocal:(bool)arg2;
- (id)playerIDs;
- (id)playerPushTokens;
- (id)players;
- (id)playersByIdentifier;
- (id)playersByJoinType;
- (id)playersProperties;
- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;
- (void)preemptRelay:(id)arg1;
- (void)promptRadarAndRequestRemoteLogsWithDescriptionAddition:(id)arg1;
- (id)properties;
- (id)propertiesByPlayerID;
- (void)putMultiplayerGroup;
- (void)queueData:(id)arg1 withEventQueueForPlayer:(id)arg2 forRecipient:(id)arg3;
- (void)receivedPlayerSyncData:(id)arg1;
- (bool)recentlyBecameActive;
- (void)refreshPendingConnectionCheckIfNeeded;
- (id)reinvitedPlayers;
- (void)reinviteeAcceptedNotification:(id)arg1;
- (void)reinviteeDeclinedNotification:(id)arg1;
- (void)relayDidReceivePushData:(id)arg1 completionHandler:(id /* block */)arg2;
- (long long)rematchCount;
- (id)rematchID;
- (void)rematchWithCompletionHandler:(id /* block */)arg1;
- (void)retryLimitHit;
- (void)sendConnectingStateCallbackToDelegate:(id)arg1 forPlayers:(id)arg2;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 dataMode:(long long)arg3 error:(id*)arg4;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id*)arg4;
- (bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id*)arg3;
- (void)sendInviteData:(id)arg1;
- (void)sendInviteData:(id)arg1 withScope:(long long)arg2;
- (bool)sendPacketDataToAll:(id)arg1 packetType:(unsigned char)arg2 dataMode:(long long)arg3 error:(id*)arg4;
- (void)sendQueuedPacketsForPlayer:(id)arg1;
- (void)sendQueuedStatesAndPackets;
- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)sendStateCallbackToDelegate:(id)arg1 forPlayer:(id)arg2 state:(long long)arg3;
- (void)sendVersionData:(unsigned char)arg1;
- (void)sendVersionData:(unsigned char)arg1 toPlayer:(id)arg2;
- (void)setAutomatchPlayerCount:(long long)arg1;
- (void)setCanPromptTapToRadar:(bool)arg1;
- (void)setChooseHostCompletion:(id /* block */)arg1;
- (void)setConnectedPlayerIDs:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFastStartStateActive:(bool)arg1;
- (void)setGroupIdentifier:(id)arg1;
- (void)setHostScoreForQuery:(bool)arg1;
- (void)setHostScores:(id)arg1;
- (void)setInitiallyStarted:(bool)arg1;
- (void)setInviteDelegate:(id)arg1;
- (void)setMultiplayerActivityReporter:(id)arg1;
- (void)setNeedHostScore:(bool)arg1;
- (void)setNetworkStatistics:(id)arg1;
- (void)setOpponentIDs:(id)arg1;
- (void)setPacketSequenceNumber:(unsigned int)arg1;
- (void)setPendingConnectionChecker:(id)arg1;
- (void)setPlayerEventQueues:(id)arg1;
- (void)setPlayerPushTokens:(id)arg1;
- (void)setPlayersByIdentifier:(id)arg1;
- (void)setPlayersByJoinType:(id)arg1;
- (void)setPropertiesByPlayerID:(id)arg1;
- (void)setRecentlyBecameActive:(bool)arg1;
- (void)setReinvitedPlayers:(id)arg1;
- (void)setRematchCount:(long long)arg1;
- (void)setRematchID:(id)arg1;
- (void)setStateChangeQueue:(id)arg1;
- (void)setTransport:(id)arg1;
- (void)setTransportContext:(id)arg1;
- (void)setVersion:(unsigned char)arg1;
- (void)setupWithTransport:(id)arg1 context:(id)arg2 reporter:(id)arg3;
- (id)stateChangeQueue;
- (id)stringForGKPeerConnectionState:(int)arg1;
- (id)stringForGKPlayerConnectionState:(long long)arg1;
- (void)syncPlayers:(id)arg1 forJoinType:(int)arg2 toInvitees:(id)arg3;
- (id)transport;
- (id)transportContext;
- (void)transportDidFailWithError:(id)arg1;
- (void)transportDidReceivePacket:(id)arg1 fromPlayerID:(id)arg2 remoteRecipientID:(id)arg3;
- (void)transportDidUpdateWithInfo:(id)arg1;
- (id)updateConnectionInfo:(id)arg1 forPlayerID:(id)arg2;
- (void)updateEventQueueForInviter:(id)arg1;
- (void)updateJoinedPlayer:(id)arg1 joinType:(int)arg2;
- (void)updateProperties:(id)arg1 playerID:(id)arg2;
- (void)updateRematchID;
- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;
- (unsigned char)version;
- (id)voiceChatWithName:(id)arg1;
- (void)withEventQueueForPlayer:(id)arg1 create:(id /* block */)arg2 perform:(id /* block */)arg3;
- (void)withEventQueueForPlayer:(id)arg1 createIfNeeded:(bool)arg2 perform:(id /* block */)arg3;
- (void)withEventQueueForPlayer:(id)arg1 perform:(id /* block */)arg2;

@end
