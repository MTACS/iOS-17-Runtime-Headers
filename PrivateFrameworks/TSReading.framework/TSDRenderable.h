
@interface TSDRenderable : NSObject <TSDContentsScaleProviding> {
    CALayer * _layer;
}

@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } affineTransform;
@property (nonatomic) bool allowsGroupOpacity;
@property (nonatomic) struct CGPoint { double x1; double x2; } anchorPoint;
@property (nonatomic) struct CGColor { }*backgroundColor;
@property (nonatomic) struct CGColor { }*borderColor;
@property (nonatomic) double borderWidth;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, retain) id contents;
@property (nonatomic, copy) NSString *contentsGravity;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentsRect;
@property (nonatomic) double contentsScale;
@property (nonatomic) double cornerRadius;
@property (nonatomic) <CALayerDelegate> *delegate;
@property (nonatomic) unsigned int edgeAntialiasingMask;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (getter=isHidden, nonatomic) bool hidden;
@property (nonatomic, readonly) CALayer *layer;
@property (nonatomic, copy) NSString *magnificationFilter;
@property (nonatomic, retain) CALayer *mask;
@property (nonatomic) bool masksToBounds;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) float opacity;
@property (nonatomic) struct CGPoint { double x1; double x2; } position;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } preferredFrameSize;
@property (nonatomic, readonly) TSDRenderable *presentationRenderable;
@property (nonatomic) double rasterizationScale;
@property (nonatomic) struct CGColor { }*shadowColor;
@property (nonatomic) struct CGSize { double x1; double x2; } shadowOffset;
@property (nonatomic) float shadowOpacity;
@property (nonatomic) struct CGPath { }*shadowPath;
@property (nonatomic) double shadowRadius;
@property (nonatomic) bool shouldRasterize;
@property (nonatomic, copy) NSArray *sublayers;
@property (nonatomic, copy) NSArray *subrenderables;
@property (readonly) CALayer *superlayer;
@property (nonatomic, readonly) bool tsd_tilingSafeHasContents;
@property (nonatomic) double zPosition;

+ (id)renderable;
+ (id)renderableFromLayer:(id)arg1;
+ (id)renderablesFromLayers:(id)arg1;

- (void).cxx_destruct;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addSublayer:(id)arg1;
- (void)addSubrenderable:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })affineTransform;
- (bool)allowsGroupOpacity;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (id)animationForKey:(id)arg1;
- (struct CGColor { }*)backgroundColor;
- (struct CGColor { }*)borderColor;
- (double)borderWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)contents;
- (id)contentsGravity;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentsRect;
- (double)contentsScale;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (double)cornerRadius;
- (id)delegate;
- (id)description;
- (unsigned int)edgeAntialiasingMask;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (unsigned long long)hash;
- (id)initWithCALayer:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isHidden;
- (id)layer;
- (id)magnificationFilter;
- (id)mask;
- (bool)masksToBounds;
- (id)name;
- (float)opacity;
- (struct CGPoint { double x1; double x2; })position;
- (struct CGSize { double x1; double x2; })preferredFrameSize;
- (id)presentationRenderable;
- (double)rasterizationScale;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeFromSuperlayer;
- (void)setAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setAllowsGroupOpacity:(bool)arg1;
- (void)setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setBorderColor:(struct CGColor { }*)arg1;
- (void)setBorderWidth:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContents:(id)arg1;
- (void)setContentsGravity:(id)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentsScale:(double)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEdgeAntialiasingMask:(unsigned int)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHidden:(bool)arg1;
- (void)setIfDifferentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 orTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)setMagnificationFilter:(id)arg1;
- (void)setMask:(id)arg1;
- (void)setMaskRenderable:(id)arg1;
- (void)setMasksToBounds:(bool)arg1;
- (void)setName:(id)arg1;
- (void)setNeedsDisplay;
- (void)setOpacity:(float)arg1;
- (void)setPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRasterizationScale:(double)arg1;
- (void)setShadowColor:(struct CGColor { }*)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setShadowOpacity:(float)arg1;
- (void)setShadowPath:(struct CGPath { }*)arg1;
- (void)setShadowRadius:(double)arg1;
- (void)setShouldRasterize:(bool)arg1;
- (void)setSublayers:(id)arg1;
- (void)setSubrenderables:(id)arg1;
- (void)setZPosition:(double)arg1;
- (struct CGColor { }*)shadowColor;
- (struct CGSize { double x1; double x2; })shadowOffset;
- (float)shadowOpacity;
- (struct CGPath { }*)shadowPath;
- (double)shadowRadius;
- (bool)shouldRasterize;
- (id)sublayers;
- (id)subrenderables;
- (id)superlayer;
- (bool)tsd_tilingSafeHasContents;
- (double)zPosition;

@end
