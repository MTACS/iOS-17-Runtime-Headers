
@interface ICNAController : ICNAOptedInObject <AAEndpointType> {
    <ICNAControllerAppDelegate> * _appDelegate;
    AAAppSessionManager * _appSessionManager;
    AAClient * _client;
    long long  _deviceOrientationEnum;
    NSNumber * _endSessionBackgroundTaskIdentifier;
    AAFlushManager * _flushManager;
    NSObject<OS_dispatch_queue> * _instrumentationQueue;
    ICNAMultiSceneSessionTracker * _multiSceneSessionTracker;
    NSString * _privateSessionID;
    NSString * _referringApplication;
    NSURL * _referringInboundURL;
    ICNAServerEnvironment * _serverEnvironment;
    NSMutableDictionary * _sessionForWindowDict;
    AASessionManager * _sessionManager;
    NSDate * _sessionStartDate;
    long long  _sessionState;
    NSMutableDictionary * _sessionTrackerForWindowDict;
    NSString * _startingSessionType;
    AAUploadBatchEventConfig * _uploadBatchEventConfig;
}

@property (nonatomic) <ICNAControllerAppDelegate> *appDelegate;
@property (nonatomic, retain) AAAppSessionManager *appSessionManager;
@property (nonatomic, retain) AAClient *client;
@property long long deviceOrientationEnum;
@property (nonatomic, retain) NSNumber *endSessionBackgroundTaskIdentifier;
@property (nonatomic, retain) AAFlushManager *flushManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *instrumentationQueue;
@property (nonatomic, retain) ICNAMultiSceneSessionTracker *multiSceneSessionTracker;
@property (nonatomic, readonly, copy) NSString *name;
@property (retain) NSString *privateSessionID;
@property (retain) NSString *referringApplication;
@property (retain) NSURL *referringInboundURL;
@property (nonatomic, retain) ICNAServerEnvironment *serverEnvironment;
@property (nonatomic, retain) NSMutableDictionary *sessionForWindowDict;
@property (nonatomic, retain) AASessionManager *sessionManager;
@property (nonatomic, retain) NSDate *sessionStartDate;
@property long long sessionState;
@property (nonatomic, retain) NSMutableDictionary *sessionTrackerForWindowDict;
@property (nonatomic, readonly, copy) NSString *sharedContainerIdentifier;
@property (retain) NSString *startingSessionType;
@property (nonatomic, retain) AAUploadBatchEventConfig *uploadBatchEventConfig;
@property (nonatomic, readonly, copy) NSURL *url;

+ (long long)accountTypeEnumForHTMLAccount:(id)arg1;
+ (long long)accountTypeEnumForModernAccount:(id)arg1;
+ (bool)bioAuthEnabled;
+ (id)deviceID;
+ (id)deviceModel;
+ (id)devicePlatform;
+ (bool)localNotesEnabled;
+ (id)osBundleVersion;
+ (id)osVersion;
+ (id)privateUserID;
+ (id)saltVersion;
+ (id)sharedController;
+ (unsigned long long)startMonth;
+ (unsigned long long)startYear;
+ (id)storeFrontID;
+ (id)userID;

- (void).cxx_destruct;
- (void)_immediatelySubmitEventOfType:(Class)arg1 pushThenPopDataObjects:(id)arg2 subTracker:(id)arg3;
- (void)_immediatelySubmitEventOfType:(Class)arg1 subTracker:(id)arg2;
- (id)aaTrackerForWindowSceneIdentifier:(id)arg1;
- (id)accountTypeSummary;
- (void)addReferralDataWithReferringInboundURL:(id)arg1 referringApplication:(id)arg2;
- (void)addSnapshotReferralDataToSessionLevel;
- (id)appData;
- (id)appDelegate;
- (void)appSessionDidTerminate;
- (id)appSessionManager;
- (void)assertInstrumentationQueue;
- (id)cellularRadioAccessTechnology;
- (void)clearSessionForWindowSceneIdentifier:(id)arg1;
- (id)client;
- (id)createSessionManager;
- (void)dealloc;
- (id)debugData;
- (id)deviceData;
- (long long)deviceOrientationEnum;
- (id)endSessionBackgroundTaskIdentifier;
- (void)endSessionSynchronously:(bool)arg1 endReason:(long long)arg2;
- (void)endSessionSynchronously:(bool)arg1 forSessionType:(id)arg2 endReason:(long long)arg3;
- (void)endSessionSynchronously:(bool)arg1 forSessionType:(id)arg2 endReason:(long long)arg3 successHandler:(id /* block */)arg4;
- (void)endWindowSceneSessionSynchronously:(bool)arg1 forSessionType:(id)arg2 endReason:(long long)arg3 windowScene:(id)arg4;
- (void)endWindowSceneSessionSynchronously:(bool)arg1 forSessionType:(id)arg2 endReason:(long long)arg3 windowScene:(id)arg4 successHandler:(id /* block */)arg5;
- (id)flushManager;
- (void)flushWithCompletionHandler:(id /* block */)arg1;
- (void)generatePrivateSessionIDIfNecessary;
- (id)init;
- (id)instrumentationQueue;
- (bool)killEndSessionBackgroundTaskIfNecessary;
- (id)multiSceneSessionTracker;
- (id)name;
- (void)newAATrackerWithName:(id)arg1 completionBlock:(id /* block */)arg2;
- (void)newAATrackerWithName:(id)arg1 parentAATracker:(id)arg2 completionBlock:(id /* block */)arg3;
- (void)newAATrackerWithName:(id)arg1 parentTracker:(id)arg2 completionBlock:(id /* block */)arg3;
- (void)orientationDidChange:(id)arg1;
- (void)performOnInstrumentationQueueWaitUntilDone:(bool)arg1 block:(id /* block */)arg2;
- (void)popDataObjectWithType:(Class)arg1;
- (void)popDataObjectWithType:(Class)arg1 subTracker:(id)arg2;
- (void)popDataObjectsWithTypes:(id)arg1;
- (void)popDataObjectsWithTypes:(id)arg1 subTracker:(id)arg2;
- (id)privateSessionID;
- (void)pushDataObject:(id)arg1 unique:(bool)arg2 onlyOnce:(bool)arg3;
- (void)pushDataObject:(id)arg1 unique:(bool)arg2 onlyOnce:(bool)arg3 subTracker:(id)arg4;
- (void)pushDataObjects:(id)arg1 unique:(bool)arg2 onlyOnce:(bool)arg3;
- (void)pushDataObjects:(id)arg1 unique:(bool)arg2 onlyOnce:(bool)arg3 subTracker:(id)arg4;
- (void)pushLongLivedDataObjects:(id)arg1;
- (void)pushLongLivedDataObjects:(id)arg1 privateSessionIdentifier:(id)arg2;
- (void)pushLongLivedOrientationData:(id)arg1;
- (void)pushLongLivedPrivateDeviceData:(id)arg1;
- (void)pushLongLivedPrivateEventData:(id)arg1;
- (void)pushLongLivedPrivateEventData:(id)arg1 privateSessionIdentifier:(id)arg2;
- (void)pushLongLivedPrivateUserData:(id)arg1;
- (void)pushLongLivedSessionSummaryData:(id)arg1;
- (void)pushReferralDataToSessionManager:(id)arg1;
- (void)pushSessionLevelDataIntoSessionManager:(id)arg1 withSessionType:(id)arg2;
- (void)pushSessionLevelDataIntoSessionManager:(id)arg1 withSessionType:(id)arg2 isGlobalSession:(bool)arg3;
- (void)pushToSessionManager:(id)arg1 data:(id)arg2 forKey:(id)arg3 traits:(id)arg4;
- (void)pushToSessionManager:(id)arg1 endReason:(long long)arg2;
- (void)pushUniqueDataObject:(id)arg1 tracker:(id)arg2;
- (id)referralData;
- (id)referringApplication;
- (id)referringInboundURL;
- (void)removePreSydneyDAnalyticsData;
- (id)serverEnvironment;
- (id)sessionDataWithType:(id)arg1 isGlobalSession:(bool)arg2;
- (id)sessionForWindowDict;
- (id)sessionManager;
- (id)sessionManagerForWindowSceneIdentifier:(id)arg1;
- (id)sessionManagerForWindowSceneIdentifier:(id)arg1 shouldCreate:(bool)arg2;
- (id)sessionStartDate;
- (long long)sessionState;
- (id)sessionTrackerForWindowDict;
- (id)sessionTrackerForWindowSceneIdentifier:(id)arg1;
- (void)setAppDelegate:(id)arg1;
- (void)setAppSessionManager:(id)arg1;
- (void)setClient:(id)arg1;
- (void)setDeviceOrientationEnum:(long long)arg1;
- (void)setEndSessionBackgroundTaskIdentifier:(id)arg1;
- (void)setFlushManager:(id)arg1;
- (void)setInstrumentationQueue:(id)arg1;
- (void)setMultiSceneSessionTracker:(id)arg1;
- (void)setPrivateSessionID:(id)arg1;
- (void)setReferringApplication:(id)arg1;
- (void)setReferringInboundURL:(id)arg1;
- (void)setServerEnvironment:(id)arg1;
- (void)setSessionForWindowDict:(id)arg1;
- (void)setSessionManager:(id)arg1;
- (void)setSessionStartDate:(id)arg1;
- (void)setSessionState:(long long)arg1;
- (void)setSessionTrackerForWindowDict:(id)arg1;
- (void)setStartingSessionType:(id)arg1;
- (void)setUploadBatchEventConfig:(id)arg1;
- (id)sharedContainerIdentifier;
- (void)startAppSession;
- (void)startSessionWithReferralURL:(id)arg1 referralApplication:(id)arg2;
- (void)startSessionWithReferralURL:(id)arg1 referralApplication:(id)arg2 startingSessionType:(id)arg3;
- (void)startSessionWithType:(id)arg1;
- (void)startWindowSceneSessionWithType:(id)arg1 windowScene:(id)arg2;
- (id)startingSessionType;
- (void)submitEventOfType:(Class)arg1 pushThenPopDataObjects:(id)arg2;
- (void)submitEventOfType:(Class)arg1 pushThenPopDataObjects:(id)arg2 subTracker:(id)arg3;
- (void)submitEventOfType:(Class)arg1 subTracker:(id)arg2;
- (void)submitEventOfType:(Class)arg1 subTracker:(id)arg2 synchronousTaskBeforeSubmitting:(id /* block */)arg3;
- (void)trackTimedEventType:(Class)arg1;
- (void)trackTimedEventType:(Class)arg1 subTracker:(id)arg2;
- (void)trackTimedEventType:(Class)arg1 subTracker:(id)arg2 synchronousTaskBeforeStarting:(id /* block */)arg3;
- (id)uploadBatchEventConfig;
- (id)url;
- (id)userData;

@end
