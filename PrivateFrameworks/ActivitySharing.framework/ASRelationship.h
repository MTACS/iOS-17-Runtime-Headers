
@interface ASRelationship : NSObject <ASCloudKitCodable, NSCopying> {
    NSUUID * _UUID;
    NSSet * _addresses;
    NSString * _cloudKitAddress;
    NSDate * _dateActivityDataInitiallyBecameVisible;
    NSDate * _dateForLatestDataHidden;
    NSDate * _dateForLatestIgnoredCompetitionRequest;
    NSDate * _dateForLatestIncomingCompetitionRequest;
    NSDate * _dateForLatestIncomingInviteRequest;
    NSDate * _dateForLatestOutgoingCompetitionRequest;
    NSDate * _dateForLatestOutgoingInviteRequest;
    NSDate * _dateForLatestRelationshipStart;
    bool  _hasCompletedCompetition;
    bool  _hasIgnoredCompetitionRequest;
    bool  _hasIncomingCompetitionRequest;
    bool  _hasIncomingInviteRequest;
    bool  _hasOutgoingCompetitionRequest;
    bool  _hasOutgoingInviteRequest;
    NSString * _incomingHandshakeToken;
    bool  _isAwaitingCompetitionResponse;
    bool  _isAwaitingInviteResponse;
    bool  _isCompetitionActive;
    bool  _isFriendshipActive;
    bool  _isHidingActivityData;
    bool  _isMuteEnabled;
    NSString * _outgoingHandshakeToken;
    NSString * _preferredReachableAddress;
    NSString * _preferredReachableService;
    NSArray * _relationshipEvents;
    CKRecordID * _relationshipShareID;
    CKRecordID * _remoteActivityDataShareID;
    CKRecordID * _remoteRelationshipShareID;
    bool  _sentInviteResponse;
    unsigned int  _supportedPhoneFeatures;
    unsigned int  _supportedWatchFeatures;
    CKRecord * _systemFieldsOnlyRecord;
    long long  _version;
}

@property (nonatomic, copy) NSUUID *UUID;
@property (nonatomic, retain) NSSet *addresses;
@property (nonatomic, retain) NSString *cloudKitAddress;
@property (nonatomic, readonly) ASCodableCloudKitRelationship *codableRelationship;
@property (nonatomic, readonly) unsigned long long currentRelationshipEventAnchor;
@property (nonatomic, retain) NSDate *dateActivityDataInitiallyBecameVisible;
@property (nonatomic, retain) NSDate *dateForLatestDataHidden;
@property (nonatomic, retain) NSDate *dateForLatestIgnoredCompetitionRequest;
@property (nonatomic, retain) NSDate *dateForLatestIncomingCompetitionRequest;
@property (nonatomic, retain) NSDate *dateForLatestIncomingInviteRequest;
@property (nonatomic, retain) NSDate *dateForLatestOutgoingCompetitionRequest;
@property (nonatomic, retain) NSDate *dateForLatestOutgoingInviteRequest;
@property (nonatomic, retain) NSDate *dateForLatestRelationshipStart;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasCompletedCompetition;
@property (nonatomic) bool hasIgnoredCompetitionRequest;
@property (nonatomic) bool hasIncomingCompetitionRequest;
@property (nonatomic) bool hasIncomingInviteRequest;
@property (nonatomic) bool hasOutgoingCompetitionRequest;
@property (nonatomic) bool hasOutgoingInviteRequest;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *incomingHandshakeToken;
@property (nonatomic, readonly) bool isActivityDataVisible;
@property (nonatomic) bool isAwaitingCompetitionResponse;
@property (nonatomic) bool isAwaitingInviteResponse;
@property (nonatomic) bool isCompetitionActive;
@property (nonatomic) bool isFriendshipActive;
@property (nonatomic, readonly) bool isHidingActivityData;
@property (nonatomic) bool isMuteEnabled;
@property (nonatomic, retain) NSString *outgoingHandshakeToken;
@property (nonatomic, retain) NSString *preferredReachableAddress;
@property (nonatomic, retain) NSString *preferredReachableService;
@property (nonatomic, copy) NSArray *relationshipEvents;
@property (nonatomic, retain) CKRecordID *relationshipShareID;
@property (nonatomic, retain) CKRecordID *remoteActivityDataShareID;
@property (nonatomic, retain) CKRecordID *remoteRelationshipShareID;
@property (nonatomic) bool sentInviteResponse;
@property (readonly) Class superclass;
@property (nonatomic) unsigned int supportedPhoneFeatures;
@property (nonatomic) unsigned int supportedWatchFeatures;
@property (nonatomic, retain) CKRecord *systemFieldsOnlyRecord;
@property (nonatomic, readonly) NSDate *timestampForMostRecentRelationshipEvent;
@property (nonatomic) long long version;

+ (void)_relationshipWithRecord:(id)arg1 relationshipEventRecords:(id)arg2 completion:(id /* block */)arg3;
+ (id)relationshipWithCodableRelationship:(id)arg1 version:(long long)arg2;
+ (id)relationshipWithCodableRelationshipContainer:(id)arg1;
+ (id)relationshipsWithRelationshipAndEventRecords:(id)arg1;

- (void).cxx_destruct;
- (id)UUID;
- (void)_clearRelationshipState;
- (unsigned long long)_nextAnchor;
- (void)_setRelationshipEvents:(id)arg1;
- (void)_updateCurrentRelationshipState;
- (void)_updateDateActivityDataBecameVisibleWithDate:(id)arg1;
- (void)_updateDateFriendshipBeganWithDate:(id)arg1;
- (id)addresses;
- (id)cloudKitAddress;
- (id)codableRelationship;
- (id)codableRelationshipContainerIncludingCloudKitFields:(bool)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)currentRelationshipEventAnchor;
- (id)dateActivityDataInitiallyBecameVisible;
- (id)dateForLatestDataHidden;
- (id)dateForLatestIgnoredCompetitionRequest;
- (id)dateForLatestIncomingCompetitionRequest;
- (id)dateForLatestIncomingInviteRequest;
- (id)dateForLatestOutgoingCompetitionRequest;
- (id)dateForLatestOutgoingInviteRequest;
- (id)dateForLatestRelationshipStart;
- (id)description;
- (bool)hasCompletedCompetition;
- (bool)hasIgnoredCompetitionRequest;
- (bool)hasIncomingCompetitionRequest;
- (bool)hasIncomingInviteRequest;
- (bool)hasOutgoingCompetitionRequest;
- (bool)hasOutgoingInviteRequest;
- (id)incomingHandshakeToken;
- (id)init;
- (void)insertEventWithType:(unsigned short)arg1;
- (void)insertEventWithType:(unsigned short)arg1 timestamp:(id)arg2;
- (void)insertEvents:(id)arg1;
- (bool)isActivityDataVisible;
- (bool)isAwaitingCompetitionResponse;
- (bool)isAwaitingInviteResponse;
- (bool)isCompetitionActive;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToRelationship:(id)arg1;
- (bool)isFriendshipActive;
- (bool)isHidingActivityData;
- (bool)isMuteEnabled;
- (id)outgoingHandshakeToken;
- (id)populateRecord:(id)arg1;
- (id)preferredReachableAddress;
- (id)preferredReachableService;
- (id)recordWithRecordID:(id)arg1;
- (id)recordWithZoneID:(id)arg1;
- (id)relationshipEvents;
- (id)relationshipShareID;
- (id)relationshipSnapshotForDate:(id)arg1;
- (id)remoteActivityDataShareID;
- (id)remoteRelationshipShareID;
- (bool)sentInviteResponse;
- (void)setAddresses:(id)arg1;
- (void)setCloudKitAddress:(id)arg1;
- (void)setDateActivityDataInitiallyBecameVisible:(id)arg1;
- (void)setDateForLatestDataHidden:(id)arg1;
- (void)setDateForLatestIgnoredCompetitionRequest:(id)arg1;
- (void)setDateForLatestIncomingCompetitionRequest:(id)arg1;
- (void)setDateForLatestIncomingInviteRequest:(id)arg1;
- (void)setDateForLatestOutgoingCompetitionRequest:(id)arg1;
- (void)setDateForLatestOutgoingInviteRequest:(id)arg1;
- (void)setDateForLatestRelationshipStart:(id)arg1;
- (void)setHasCompletedCompetition:(bool)arg1;
- (void)setHasIgnoredCompetitionRequest:(bool)arg1;
- (void)setHasIncomingCompetitionRequest:(bool)arg1;
- (void)setHasIncomingInviteRequest:(bool)arg1;
- (void)setHasOutgoingCompetitionRequest:(bool)arg1;
- (void)setHasOutgoingInviteRequest:(bool)arg1;
- (void)setIncomingHandshakeToken:(id)arg1;
- (void)setIsAwaitingCompetitionResponse:(bool)arg1;
- (void)setIsAwaitingInviteResponse:(bool)arg1;
- (void)setIsCompetitionActive:(bool)arg1;
- (void)setIsFriendshipActive:(bool)arg1;
- (void)setIsMuteEnabled:(bool)arg1;
- (void)setOutgoingHandshakeToken:(id)arg1;
- (void)setPreferredReachableAddress:(id)arg1;
- (void)setPreferredReachableService:(id)arg1;
- (void)setRelationshipEvents:(id)arg1;
- (void)setRelationshipShareID:(id)arg1;
- (void)setRemoteActivityDataShareID:(id)arg1;
- (void)setRemoteRelationshipShareID:(id)arg1;
- (void)setSentInviteResponse:(bool)arg1;
- (void)setSupportedPhoneFeatures:(unsigned int)arg1;
- (void)setSupportedWatchFeatures:(unsigned int)arg1;
- (void)setSystemFieldsOnlyRecord:(id)arg1;
- (void)setUUID:(id)arg1;
- (void)setVersion:(long long)arg1;
- (unsigned int)supportedPhoneFeatures;
- (unsigned int)supportedWatchFeatures;
- (bool)supportsCompetitions;
- (id)systemFieldsOnlyRecord;
- (id)timestampForMostRecentRelationshipEvent;
- (void)traverseRelationshipHistoryStartingAtEventWithAnchor:(unsigned long long)arg1 block:(id /* block */)arg2;
- (long long)version;

@end
