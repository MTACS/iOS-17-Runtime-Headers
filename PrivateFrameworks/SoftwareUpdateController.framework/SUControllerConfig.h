
@interface SUControllerConfig : NSObject <NSSecureCoding> {
    bool  _allowSameVersionUpdates;
    NSString * _asReleaseType;
    bool  _autoAcceptTermsAndConditions;
    long long  _autoActivityCheckPeriod;
    long long  _autoInstallForceMaxWait;
    long long  _autoInstallWindowBeginHour;
    long long  _autoInstallWindowBeginMinute;
    long long  _autoInstallWindowEndHour;
    long long  _autoInstallWindowEndMinute;
    long long  _delayPeriod;
    bool  _downloadDocAsset;
    bool  _expiredSpecifiedAsExpired;
    bool  _hideIndicationMayReboot;
    bool  _ignoreRamping;
    NSString * _installPhaseOSBackgroundImagePath;
    bool  _installWindowAsDeltas;
    bool  _internalDefaultsAsExternal;
    bool  _performAutoDownloadAndPrepare;
    bool  _performAutoInstall;
    bool  _performAutoScan;
    NSString * _prerequisiteBuildVersion;
    NSString * _prerequisiteProductVersion;
    long long  _preservePreparedMaxAttempts;
    NSString * _requestedPMV;
    bool  _requirePrepareSize;
    bool  _restrictToFullReplacement;
    NSString * _simulatorCommandsFile;
    bool  _supervisedMDM;
    NSString * _updateMetricContext;
    bool  _useSUCore;
    bool  _useSpecifiedInstallWindow;
    bool  _vpnOnDemandAsInternal;
}

@property (nonatomic) bool allowSameVersionUpdates;
@property (nonatomic, retain) NSString *asReleaseType;
@property (nonatomic) bool autoAcceptTermsAndConditions;
@property (nonatomic) long long autoActivityCheckPeriod;
@property (nonatomic) long long autoInstallForceMaxWait;
@property (nonatomic) long long autoInstallWindowBeginHour;
@property (nonatomic) long long autoInstallWindowBeginMinute;
@property (nonatomic) long long autoInstallWindowEndHour;
@property (nonatomic) long long autoInstallWindowEndMinute;
@property (nonatomic) long long delayPeriod;
@property (nonatomic) bool downloadDocAsset;
@property (nonatomic) bool expiredSpecifiedAsExpired;
@property (nonatomic) bool hideIndicationMayReboot;
@property (nonatomic) bool ignoreRamping;
@property (nonatomic, retain) NSString *installPhaseOSBackgroundImagePath;
@property (nonatomic) bool installWindowAsDeltas;
@property (nonatomic) bool internalDefaultsAsExternal;
@property (nonatomic) bool performAutoDownloadAndPrepare;
@property (nonatomic) bool performAutoInstall;
@property (nonatomic) bool performAutoScan;
@property (nonatomic, retain) NSString *prerequisiteBuildVersion;
@property (nonatomic, retain) NSString *prerequisiteProductVersion;
@property (nonatomic) long long preservePreparedMaxAttempts;
@property (nonatomic, retain) NSString *requestedPMV;
@property (nonatomic) bool requirePrepareSize;
@property (nonatomic) bool restrictToFullReplacement;
@property (nonatomic, retain) NSString *simulatorCommandsFile;
@property (nonatomic) bool supervisedMDM;
@property (nonatomic, retain) NSString *updateMetricContext;
@property (nonatomic) bool useSUCore;
@property (nonatomic) bool useSpecifiedInstallWindow;
@property (nonatomic) bool vpnOnDemandAsInternal;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_copyStringFromDefaults:(id)arg1 usingDefault:(id)arg2;
- (long long)_decodeInteger:(id)arg1 forKey:(id)arg2 withLimit:(long long)arg3;
- (long long)_limitedInteger:(id)arg1 checkingValue:(long long)arg2 forKey:(id)arg3 withLimit:(long long)arg4;
- (long long)_loadBooleanFromDefaults:(id)arg1 releaseType:(long long)arg2 externalDefault:(bool)arg3 internalDefault:(bool)arg4 isStoredInverted:(bool)arg5;
- (bool)_loadBooleanFromDefaults:(id)arg1 usingDefault:(bool)arg2 isStoredInverted:(bool)arg3;
- (long long)_loadIntegerFromDefaults:(id)arg1 releaseType:(long long)arg2 externalDefault:(long long)arg3 internalDefault:(long long)arg4 withLimit:(long long)arg5;
- (long long)_loadIntegerFromDefaults:(id)arg1 usingDefault:(long long)arg2 withLimit:(long long)arg3;
- (bool)_runningOnAppleTV;
- (bool)_storeBooleanToDefaults:(id)arg1 toValue:(bool)arg2 isStoredInverted:(bool)arg3;
- (long long)_storeIntegerToDefaults:(id)arg1 toValue:(long long)arg2;
- (id)_storeStringToDefaults:(id)arg1 toValue:(id)arg2;
- (bool)allowSameVersionUpdates;
- (id)asReleaseType;
- (bool)autoAcceptTermsAndConditions;
- (long long)autoActivityCheckPeriod;
- (long long)autoInstallForceMaxWait;
- (long long)autoInstallWindowBeginHour;
- (long long)autoInstallWindowBeginMinute;
- (long long)autoInstallWindowEndHour;
- (long long)autoInstallWindowEndMinute;
- (id)changeSummary:(long long)arg1;
- (id)copy;
- (long long)delayPeriod;
- (id)description;
- (bool)downloadDocAsset;
- (void)encodeWithCoder:(id)arg1;
- (bool)expiredSpecifiedAsExpired;
- (bool)hideIndicationMayReboot;
- (bool)ignoreRamping;
- (id)init;
- (id)initFromDefaults:(long long)arg1;
- (id)initWithCoder:(id)arg1;
- (id)installPhaseOSBackgroundImagePath;
- (bool)installWindowAsDeltas;
- (bool)internalDefaultsAsExternal;
- (bool)isEqual:(id)arg1;
- (void)modify:(id)arg1 usingMask:(long long)arg2;
- (bool)performAutoDownloadAndPrepare;
- (bool)performAutoInstall;
- (bool)performAutoScan;
- (id)prerequisiteBuildVersion;
- (id)prerequisiteProductVersion;
- (long long)preservePreparedMaxAttempts;
- (id)requestedPMV;
- (bool)requirePrepareSize;
- (bool)restrictToFullReplacement;
- (void)setAllowSameVersionUpdates:(bool)arg1;
- (void)setAsReleaseType:(id)arg1;
- (void)setAutoAcceptTermsAndConditions:(bool)arg1;
- (void)setAutoActivityCheckPeriod:(long long)arg1;
- (void)setAutoInstallForceMaxWait:(long long)arg1;
- (void)setAutoInstallWindowBeginHour:(long long)arg1;
- (void)setAutoInstallWindowBeginMinute:(long long)arg1;
- (void)setAutoInstallWindowEndHour:(long long)arg1;
- (void)setAutoInstallWindowEndMinute:(long long)arg1;
- (void)setDelayPeriod:(long long)arg1;
- (void)setDownloadDocAsset:(bool)arg1;
- (void)setExpiredSpecifiedAsExpired:(bool)arg1;
- (void)setHideIndicationMayReboot:(bool)arg1;
- (void)setIgnoreRamping:(bool)arg1;
- (void)setInstallPhaseOSBackgroundImagePath:(id)arg1;
- (void)setInstallWindowAsDeltas:(bool)arg1;
- (void)setInternalDefaultsAsExternal:(bool)arg1;
- (void)setPerformAutoDownloadAndPrepare:(bool)arg1;
- (void)setPerformAutoInstall:(bool)arg1;
- (void)setPerformAutoScan:(bool)arg1;
- (void)setPrerequisiteBuildVersion:(id)arg1;
- (void)setPrerequisiteProductVersion:(id)arg1;
- (void)setPreservePreparedMaxAttempts:(long long)arg1;
- (void)setRequestedPMV:(id)arg1;
- (void)setRequirePrepareSize:(bool)arg1;
- (void)setRestrictToFullReplacement:(bool)arg1;
- (void)setSimulatorCommandsFile:(id)arg1;
- (void)setSupervisedMDM:(bool)arg1;
- (void)setUpdateMetricContext:(id)arg1;
- (void)setUseSUCore:(bool)arg1;
- (void)setUseSpecifiedInstallWindow:(bool)arg1;
- (void)setVpnOnDemandAsInternal:(bool)arg1;
- (id)simulatorCommandsFile;
- (id)summary;
- (bool)supervisedMDM;
- (id)updateMetricContext;
- (bool)useSUCore;
- (bool)useSpecifiedInstallWindow;
- (bool)vpnOnDemandAsInternal;

@end
