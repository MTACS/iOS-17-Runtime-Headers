
@interface ASVInlinePreview : NSObject {
    id /* block */  _animationObserverBlock;
    NSTimer * _animationUpdateTimer;
    void _cameraTransform;
    id /* block */  _cameraTransformReply;
    NSURL * _canonicalWebPageURL;
    double  _currentTime;
    double  _duration;
    bool  _enableShadows;
    CALayer * _errorLayer;
    <ARQLInlineService2> * _fullscreenService;
    bool  _hasAudio;
    bool  _isLooping;
    bool  _isMuted;
    bool  _isPlaying;
    CALayer * _layer;
    CALayerHost * _layerHost;
    bool  _resizeLayerImmediately;
    CAActivityIndicatorLayer * _spinnerLayer;
    NSString * _urlFragment;
    NSUUID * _uuid;
}

@property (nonatomic, copy) id /* block */ animationObserverBlock;
@property (nonatomic, readonly, retain) NSTimer *animationUpdateTimer;
@property (nonatomic, readonly) void cameraTransform;
@property (nonatomic, copy) id /* block */ cameraTransformReply;
@property (nonatomic, retain) NSURL *canonicalWebPageURL;
@property (nonatomic) double currentTime;
@property (nonatomic, readonly) double duration;
@property (nonatomic) bool enableShadows;
@property (nonatomic, readonly) CALayer *errorLayer;
@property (nonatomic, readonly) bool hasAudio;
@property (nonatomic) bool isLooping;
@property (nonatomic) bool isMuted;
@property (nonatomic, readonly) bool isPlaying;
@property (nonatomic, readonly) CALayer *layer;
@property (nonatomic, readonly) CAActivityIndicatorLayer *spinnerLayer;
@property (nonatomic, retain) NSString *urlFragment;
@property (nonatomic, readonly) NSUUID *uuid;

+ (void)_kill:(int)arg1;
+ (void)debugGetMemoryUsage:(id /* block */)arg1;
+ (id)getService;
+ (int)instanceCount;
+ (void)remoteInstanceCount:(id /* block */)arg1;

- (void).cxx_destruct;
- (id)_createErrorLayer;
- (void)_getCameraTransform:(id /* block */)arg1;
- (id /* block */)animationObserverBlock;
- (id)animationUpdateTimer;
- (void)cameraTransform;
- (id /* block */)cameraTransformReply;
- (id)canonicalWebPageURL;
- (void)centerLayerInParent:(id)arg1;
- (void)commonInitWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)createFullscreenInstanceWithInitialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 previewOptions:(id)arg2 completionHandler:(id /* block */)arg3;
- (double)currentTime;
- (void)dealloc;
- (double)duration;
- (bool)enableShadows;
- (id)errorLayer;
- (void)getCameraTransform:(id /* block */)arg1;
- (void)getSharedInlineServiceFailable:(id /* block */)arg1;
- (bool)hasAudio;
- (bool)hasError;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inlineTouchesFromUITouches:(id)arg1;
- (bool)isLooping;
- (bool)isMuted;
- (bool)isPlaying;
- (id)layer;
- (void)observeDismissFullscreenWithCompletionHandler:(id /* block */)arg1;
- (void)preparePreviewOfFileAtURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)sendTeardownEvent;
- (void)setAnimationObserverBlock:(id /* block */)arg1;
- (void)setAnimationObserverBlock:(id /* block */)arg1;
- (void)setCameraTransform;
- (void)setCameraTransformReply:(id /* block */)arg1;
- (void)setCanonicalWebPageURL:(id)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setEnableShadows:(bool)arg1;
- (void)setEnableShadows:(bool)arg1;
- (void)setFrameWithinFencedTransaction:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsLooping:(bool)arg1;
- (void)setIsLooping:(bool)arg1;
- (void)setIsMuted:(bool)arg1;
- (void)setIsMuted:(bool)arg1;
- (void)setIsPlaying:(bool)arg1 reply:(id /* block */)arg2;
- (void)setUrlFragment:(id)arg1;
- (void)setWantsDebugColors:(bool)arg1;
- (void)setupRemoteConnectionWithCompletionHandler:(id /* block */)arg1;
- (void)showErrorLayer;
- (id)spinnerLayer;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)updateFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)updateLayout;
- (void)updateRuntimeStateFrom:(id)arg1;
- (id)urlFragment;
- (id)uuid;

@end
