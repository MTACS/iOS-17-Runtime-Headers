
@interface HKSPSleepStore : NSObject <HKSPSleepFocusModeBridgeDelegate, HKSPXPCConnectionProviderDelegate> {
    HKSPAnalyticsManager * _analyticsManager;
    <NAScheduler> * _callbackScheduler;
    HKSPXPCClientIdentifier * _clientIdentifier;
    HKSPXPCConnectionProvider * _connectionProvider;
    id /* block */  _currentDateProvider;
    HKSPObserverSet * _observers;
    unsigned long long  _options;
    HKSPThrottler * _reconnectThrottler;
    <HKSPSleepFocusModeBridge> * _sleepFocusModeBridge;
    HKSleepHealthStore * _sleepHealthStore;
    HKSPSleepStoreCache * _sleepStoreCache;
    HKSPSleepStoreExportedObject * _sleepStoreExportedObject;
    HKSPSyncAnchorContainer * _syncAnchorContainer;
    HKSPSleepWidgetManager * _widgetManager;
}

@property (nonatomic, readonly) HKSPAnalyticsManager *analyticsManager;
@property (nonatomic, readonly) <NAScheduler> *callbackScheduler;
@property (nonatomic, readonly, copy) HKSPXPCClientIdentifier *clientIdentifier;
@property (nonatomic, readonly) HKSPXPCConnectionProvider *connectionProvider;
@property (nonatomic, readonly, copy) id /* block */ currentDateProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasSleepFocusMode;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HKHealthStore *healthStore;
@property (nonatomic, readonly) HKSPObserverSet *observers;
@property (nonatomic, readonly) unsigned long long options;
@property (nonatomic, readonly) HKSPThrottler *reconnectThrottler;
@property (nonatomic, readonly) HKSPSleepFocusConfiguration *sleepFocusConfiguration;
@property (nonatomic, readonly) <HKSPSleepFocusModeBridge> *sleepFocusModeBridge;
@property (nonatomic, readonly) HKSleepHealthStore *sleepHealthStore;
@property (nonatomic, readonly) HKSPSleepStoreCache *sleepStoreCache;
@property (nonatomic, readonly) HKSPSleepStoreExportedObject *sleepStoreExportedObject;
@property (readonly) Class superclass;
@property (nonatomic, retain) HKSPSyncAnchorContainer *syncAnchorContainer;
@property (nonatomic, readonly) HKSPSleepWidgetManager *widgetManager;

// Image: /System/Library/PrivateFrameworks/Sleep.framework/Sleep

+ (id)_sleepDisabledError;
+ (id)_updatedHistoricalSleepGoalForSleepSchedule:(id)arg1 options:(unsigned long long)arg2 date:(id)arg3;
+ (id)_updatedHistoricalSleepSchedulesFromSleepSchedule:(id)arg1 options:(unsigned long long)arg2 date:(id)arg3;

- (void).cxx_destruct;
- (bool)_cachingEnabled;
- (void)_checkInWithCurrentSyncAnchor;
- (id)_clearWidgetOverrideOnServer;
- (id)_confirmAwakeOnServer;
- (bool)_connectAutomatically;
- (id)_dismissGoodMorningOnServer;
- (id)_dismissSleepLockOnServer;
- (id)_getSleepEventRecordDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepEventRecordFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepModeDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepModeFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleStateFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleStateOnDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepSettingsDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepSettingsFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepWidgetStateDoSync:(bool)arg1;
- (id)_getSleepWidgetStateFromServerDoSync:(bool)arg1;
- (void)_notifyObserversForChangedSleepEventRecord:(id)arg1;
- (void)_notifyObserversForChangedSleepMode:(long long)arg1;
- (void)_notifyObserversForChangedSleepSchedule:(id)arg1;
- (void)_notifyObserversForChangedSleepScheduleState:(unsigned long long)arg1;
- (void)_notifyObserversForChangedSleepSettings:(id)arg1;
- (void)_notifyObserversForSleepEvent:(id)arg1;
- (bool)_observeSleepFocusMode;
- (id)_prepareObjectForSave:(id)arg1 options:(unsigned long long)arg2;
- (id)_publishNotificationOnServerWithIdentifier:(id)arg1 userInfo:(id)arg2;
- (id)_publishWakeUpResultsNotificationOnServer;
- (bool)_reloadsWidgets;
- (bool)_resultHasSchedule:(id)arg1;
- (bool)_resultScheduleIsValid:(id)arg1;
- (bool)_resultScheduleMeetsDefaultGoal:(id)arg1;
- (id)_saveCurrentSleepEventRecordOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_saveCurrentSleepScheduleOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_saveCurrentSleepSettingsOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_sendScheduleChangedAnalyticsWithContext:(id)arg1;
- (id)_setLockScreenOverrideStateOnServerWithState:(long long)arg1 userInfo:(id)arg2;
- (id)_setSleepModeOnServer:(long long)arg1 reason:(unsigned long long)arg2;
- (id)_setWidgetOverrideStateOnServerWithState:(long long)arg1;
- (id)_sleepAlarmWasDismissedOnDateOnServer:(id)arg1 source:(unsigned long long)arg2;
- (id)_sleepAlarmWasModifiedOnServer:(unsigned long long)arg1;
- (id)_sleepAlarmWasSnoozedUntilDateOnServer:(id)arg1 source:(unsigned long long)arg2;
- (id)_writeHistoricalSchedule:(id)arg1 options:(unsigned long long)arg2;
- (void)addObserver:(id)arg1;
- (id)analyticsManager;
- (id)callbackScheduler;
- (void)clearWidgetOverrideWithCompletion:(id /* block */)arg1;
- (id)clientIdentifier;
- (void)confirmAwakeWithCompletion:(id /* block */)arg1;
- (void)connect;
- (void)connectSynchronously:(bool)arg1;
- (id)connectionProvider;
- (void)createSleepFocusModeWithCompletion:(id /* block */)arg1;
- (id /* block */)currentDateProvider;
- (id)currentSleepEventRecordFuture;
- (void)currentSleepEventRecordWithCompletion:(id /* block */)arg1;
- (id)currentSleepEventRecordWithError:(id*)arg1;
- (id)currentSleepScheduleFuture;
- (id)currentSleepScheduleStateFuture;
- (void)currentSleepScheduleStateWithCompletion:(id /* block */)arg1;
- (unsigned long long)currentSleepScheduleStateWithError:(id*)arg1;
- (void)currentSleepScheduleWithCompletion:(id /* block */)arg1;
- (id)currentSleepScheduleWithError:(id*)arg1;
- (id)currentSleepSettingsFuture;
- (void)currentSleepSettingsWithCompletion:(id /* block */)arg1;
- (id)currentSleepSettingsWithError:(id*)arg1;
- (void)dealloc;
- (void)deleteSleepFocusModeWithCompletion:(id /* block */)arg1;
- (id)description;
- (void)dismissGoodMorningWithCompletion:(id /* block */)arg1;
- (void)dismissSleepLockWithCompletion:(id /* block */)arg1;
- (bool)hasSleepFocusMode;
- (id)healthStore;
- (id)init;
- (id)initWithConnectionProviderProvider:(id /* block */)arg1 identifier:(id)arg2 healthStore:(id)arg3 options:(unsigned long long)arg4;
- (id)initWithConnectionProviderProvider:(id /* block */)arg1 identifier:(id)arg2 healthStore:(id)arg3 options:(unsigned long long)arg4 analyticsManager:(id)arg5 throttlerProvider:(id /* block */)arg6 callbackScheduler:(id)arg7 sleepFocusModeBridgeProvider:(id /* block */)arg8 widgetTimelineControllersProvider:(id /* block */)arg9 currentDateProvider:(id /* block */)arg10;
- (id)initWithHealthStore:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 healthStore:(id)arg2;
- (id)initWithIdentifier:(id)arg1 healthStore:(id)arg2 options:(unsigned long long)arg3;
- (void)nextEventDueAfterDate:(id)arg1 completion:(id /* block */)arg2;
- (id)nextEventDueAfterDate:(id)arg1 error:(id*)arg2;
- (id)nextEventDueAfterDateFuture:(id)arg1;
- (void)nextEventWithIdentifier:(id)arg1 dueAfterDate:(id)arg2 completion:(id /* block */)arg3;
- (id)nextEventWithIdentifier:(id)arg1 dueAfterDate:(id)arg2 error:(id*)arg3;
- (id)nextEventWithIdentifierFuture:(id)arg1 dueAfterDate:(id)arg2;
- (id)observers;
- (unsigned long long)options;
- (void)publishNotificationWithIdentifier:(id)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)publishWakeUpResultsNotificationWithCompletion:(id /* block */)arg1;
- (void)reconnect;
- (id)reconnectThrottler;
- (void)removeAllObservers;
- (void)removeObserver:(id)arg1;
- (id)saveCurrentSleepEventRecord:(id)arg1;
- (void)saveCurrentSleepEventRecord:(id)arg1 completion:(id /* block */)arg2;
- (id)saveCurrentSleepEventRecord:(id)arg1 options:(unsigned long long)arg2;
- (void)saveCurrentSleepEventRecord:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)saveCurrentSleepSchedule:(id)arg1;
- (void)saveCurrentSleepSchedule:(id)arg1 completion:(id /* block */)arg2;
- (void)saveCurrentSleepSchedule:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)saveCurrentSleepSchedule:(id)arg1 options:(unsigned long long)arg2 context:(id)arg3;
- (void)saveCurrentSleepSchedule:(id)arg1 options:(unsigned long long)arg2 context:(id)arg3 completion:(id /* block */)arg4;
- (id)saveCurrentSleepSettings:(id)arg1;
- (void)saveCurrentSleepSettings:(id)arg1 completion:(id /* block */)arg2;
- (id)saveCurrentSleepSettings:(id)arg1 options:(unsigned long long)arg2;
- (void)saveCurrentSleepSettings:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)setLockScreenOverrideState:(long long)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)setSleepCoachingOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setSleepModeOn:(bool)arg1 completion:(id /* block */)arg2;
- (void)setSleepModeOn:(bool)arg1 reason:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)setSleepTrackingOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setSleepWindDownShortcutsOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setSyncAnchorContainer:(id)arg1;
- (void)setUpcomingWakeUpAlarmEnabled:(bool)arg1 date:(id)arg2 completion:(id /* block */)arg3;
- (void)setWakeUpAlarmEnabled:(bool)arg1 resolvedOccurrence:(id)arg2 date:(id)arg3 completion:(id /* block */)arg4;
- (void)setWidgetOverrideState:(long long)arg1 completion:(id /* block */)arg2;
- (void)skipUpcomingWakeUpAlarmForDate:(id)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasDismissedOnDate:(id)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasDismissedOnDate:(id)arg1 source:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)sleepAlarmWasModifiedFromSource:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasModifiedWithCompletion:(id /* block */)arg1;
- (void)sleepAlarmWasSnoozedUntilDate:(id)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasSnoozedUntilDate:(id)arg1 source:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)sleepFocusConfiguration;
- (id)sleepFocusModeBridge;
- (void)sleepFocusModeBridge:(id)arg1 didUpdateSleepFocusConfiguration:(id)arg2;
- (id)sleepHealthStore;
- (id)sleepModeFuture;
- (id)sleepModeOnFuture;
- (void)sleepModeOnWithCompletion:(id /* block */)arg1;
- (bool)sleepModeOnWithError:(id*)arg1;
- (void)sleepModeWithCompletion:(id /* block */)arg1;
- (long long)sleepModeWithError:(id*)arg1;
- (id)sleepScheduleModelFuture;
- (void)sleepScheduleModelWithCompletion:(id /* block */)arg1;
- (id)sleepScheduleModelWithError:(id*)arg1;
- (id)sleepStoreCache;
- (id)sleepStoreExportedObject;
- (id)sleepWidgetStateFuture;
- (void)sleepWidgetStateWithCompletion:(id /* block */)arg1;
- (long long)sleepWidgetStateWithError:(id*)arg1;
- (void)suggestedSleepScheduleWithProviders:(id)arg1 completion:(id /* block */)arg2;
- (id)syncAnchorContainer;
- (id)upcomingResolvedScheduleOccurrenceAfterDate:(id)arg1 alarmStatus:(long long*)arg2 error:(id*)arg3;
- (id)upcomingResolvedScheduleOccurrenceAfterDate:(id)arg1 error:(id*)arg2;
- (id)upcomingScheduleOccurrenceAfterDate:(id)arg1 alarmStatus:(long long*)arg2 error:(id*)arg3;
- (void)upcomingScheduleOccurrenceAfterDate:(id)arg1 completion:(id /* block */)arg2;
- (id)upcomingScheduleOccurrenceAfterDate:(id)arg1 error:(id*)arg2;
- (id)upcomingScheduleOccurrenceAfterDateFuture:(id)arg1;
- (id)widgetManager;

// Image: /System/Library/PrivateFrameworks/MobileTimerUI.framework/MobileTimerUI

+ (id)mt_getDetailedAlarmTitleForDate:(id)arg1 calendar:(id)arg2 onlyAppliesOnce:(bool)arg3;

- (id)mt_sleepMetaDataForUpcomingAlarmInCalendar:(id)arg1 error:(id*)arg2;

@end
