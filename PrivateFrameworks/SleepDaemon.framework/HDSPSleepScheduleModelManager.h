
@interface HDSPSleepScheduleModelManager : NSObject <HDSPApplicationWorkspaceObserver, HDSPDiagnosticsProvider, HDSPEnvironmentAware, HDSPSleepEventProvider, HDSPSleepStorageObserver, HDSPSource, HDSPTimeChangeObserver> {
    HDSPSleepScheduleModelChangeEvaluator * _changeEvaluator;
    HDSPEnvironment * _environment;
    <HKSPMutexProvider> * _mutexProvider;
    HKSPObserverSet * _observers;
    <HDSPSleepEventDelegate> * _sleepEventDelegate;
    HKSPSleepEventRecord * _sleepEventRecord;
    HKSPSleepSchedule * _sleepSchedule;
    HKSPSleepSettings * _sleepSettings;
}

@property (nonatomic, readonly) HDSPSleepScheduleModelChangeEvaluator *changeEvaluator;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool dontNotify;
@property (nonatomic, readonly) bool dontSync;
@property (nonatomic, readonly) HDSPEnvironment *environment;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <HKSPMutexProvider> *mutexProvider;
@property (nonatomic, readonly) NSSet *observedApplicationBundleIdentifiers;
@property (nonatomic, readonly) HKSPObserverSet *observers;
@property (nonatomic, readonly, copy) NSString *providerIdentifier;
@property (nonatomic) <HDSPSleepEventDelegate> *sleepEventDelegate;
@property (nonatomic, readonly) HKSPSleepEventRecord *sleepEventRecord;
@property (nonatomic, readonly) HKSPSleepSchedule *sleepSchedule;
@property (nonatomic, readonly) HKSPSleepScheduleModel *sleepScheduleModel;
@property (nonatomic, readonly) HKSPSleepSettings *sleepSettings;
@property (nonatomic, readonly) NSString *sourceIdentifier;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_earliestDateToScheduleEventsForDate:(id)arg1;
- (id)_loadSleepEventRecord:(id*)arg1;
- (id)_loadSleepSchedule:(id*)arg1;
- (id)_loadSleepScheduleModel:(id*)arg1;
- (id)_loadSleepSettings:(id*)arg1;
- (id)_locked_applyNecessaryChangesBeforeSaving:(id)arg1;
- (id)_locked_applyNecessaryChangesBeforeSavingSleepEventRecord:(id)arg1;
- (id)_locked_applyNecessaryChangesBeforeSavingSleepSchedule:(id)arg1 validationResult:(id)arg2;
- (void)_locked_applyNecessaryEventRecordChangesBeforeSavingSleepSchedule:(id)arg1 validationResult:(id)arg2;
- (void)_locked_applyNecessarySleepSettingsChangesBeforeSavingSleepEventRecord:(id)arg1;
- (bool)_locked_canApplyChangesFrom:(id)arg1 to:(id)arg2 error:(id*)arg3;
- (id)_locked_loadSleepEventRecord:(id*)arg1;
- (id)_locked_loadSleepSchedule:(id*)arg1;
- (id)_locked_loadSleepScheduleModel:(id*)arg1;
- (id)_locked_loadSleepSettings:(id*)arg1;
- (void)_locked_notifyObserversForSleepEventRecordChange:(id)arg1;
- (void)_locked_notifyObserversForSleepScheduleChange:(id)arg1;
- (void)_locked_notifyObserversForSleepScheduleModelChange:(id)arg1;
- (void)_locked_notifyObserversForSleepSettingsChange:(id)arg1;
- (id)_locked_removeSleepSchedule;
- (id)_locked_resetSleepEventRecord;
- (id)_locked_resetSleepSettings;
- (id)_locked_saveSleepEventRecord:(id)arg1;
- (bool)_locked_saveSleepEventRecord:(id)arg1 error:(id*)arg2;
- (bool)_locked_saveSleepEventRecord:(id)arg1 error:(id*)arg2 preNotifyBlock:(id /* block */)arg3;
- (id)_locked_saveSleepSchedule:(id)arg1;
- (bool)_locked_saveSleepSchedule:(id)arg1 error:(id*)arg2;
- (id)_locked_saveSleepSettings:(id)arg1;
- (bool)_locked_saveSleepSettings:(id)arg1 error:(id*)arg2;
- (id)_locked_setSleepEventRecord:(id)arg1;
- (id)_locked_setSleepSchedule:(id)arg1;
- (id)_locked_setSleepSettings:(id)arg1;
- (id)_locked_sleepScheduleModel;
- (bool)_locked_updateModelWithBlock:(id /* block */)arg1 persistBlock:(id /* block */)arg2 error:(id*)arg3;
- (id)_locked_updateSleepEventRecord:(id)arg1;
- (id)_locked_updateSleepSchedule:(id)arg1;
- (id)_locked_updateSleepSettings:(id)arg1;
- (id)_locked_validateSleepSchedule:(id)arg1 generateValidSchedule:(bool)arg2;
- (bool)_shouldTurnOffSleepSchedule;
- (bool)_shouldTurnOffWatchSleepFeatures;
- (void)_turnOffSleepSchedule;
- (void)_turnOffWatchSleepFeatures;
- (void)_withLock:(id /* block */)arg1;
- (void)addObserver:(id)arg1;
- (id)changeEvaluator;
- (id)diagnosticDescription;
- (id)diagnosticInfo;
- (id)environment;
- (void)environmentDidBecomeReady:(id)arg1;
- (void)environmentWillBecomeReady:(id)arg1;
- (id)initWithEnvironment:(id)arg1;
- (id)mutexProvider;
- (void)notifyObserversForSleepEventRecordChange:(id)arg1;
- (void)notifyObserversForSleepScheduleChange:(id)arg1;
- (void)notifyObserversForSleepSettingsChange:(id)arg1;
- (id)observedApplicationBundleIdentifiers;
- (void)observedApplicationDidInstall:(id)arg1;
- (void)observedApplicationDidUninstall:(id)arg1;
- (id)observers;
- (id)providerIdentifier;
- (void)removeObserver:(id)arg1;
- (bool)removeSleepScheduleModelWithError:(id*)arg1;
- (bool)saveSleepEventRecord:(id)arg1 error:(id*)arg2;
- (bool)saveSleepEventRecord:(id)arg1 error:(id*)arg2 preNotifyBlock:(id /* block */)arg3;
- (bool)saveSleepSchedule:(id)arg1 error:(id*)arg2;
- (bool)saveSleepScheduleModel:(id)arg1 error:(id*)arg2;
- (bool)saveSleepSettings:(id)arg1 error:(id*)arg2;
- (void)setSleepEventDelegate:(id)arg1;
- (void)significantTimeChangeDetected:(id)arg1;
- (id)sleepEventDelegate;
- (id)sleepEventRecord;
- (id)sleepSchedule;
- (id)sleepScheduleModel;
- (id)sleepSettings;
- (void)sleepStorageDidChangeExternally:(id)arg1;
- (id)sourceIdentifier;
- (id)upcomingEventsDueAfterDate:(id)arg1;

@end
