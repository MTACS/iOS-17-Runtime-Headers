
@interface SOKerberosContext : NSObject {
    bool  _attemptedToGetCredsFromKeychain;
    NSData * _auditToken;
    ASAuthorizationProviderExtensionAuthorizationRequest * _authorizationRequest;
    NSString * _cacheName;
    NSString * _callerBundleIdentifier;
    NSString * _callerLocalizedName;
    NSString * _certificateTokenID;
    NSString * _changedPassword;
    NSUUID * _credentialUUID;
    bool  _credsCameFromKeychain;
    SOKerberosRealmSettings * _currentSettings;
    NSObject<OS_dispatch_group> * _dispatchGroup;
    SOKerberosExtensionData * _extensionData;
    SOKerberosExtensionUserData * _extensionUserData;
    bool  _forceLoginViewController;
    NSString * _hostName;
    NSString * _impersonationBundleIdentifier;
    bool  _isManagedApp;
    LAContext * _keychainLAContext;
    int  _laContextFailureCount;
    NSDate * _loginTimeStamp;
    SONetworkIdentity * _networkIdentity;
    SOKerberosPacData * _pacData;
    NSString * _password;
    struct __SecIdentity { } * _pkinitIdentity;
    NSData * _pkinitPersistientRef;
    NSString * _realm;
    bool  _refreshCredential;
    bool  _requestCancelled;
    bool  _requestStarted;
    bool  _returnCredentialOnly;
    NSString * _serviceName;
    NSString * _servicePrincipalName;
    SOSiteCode * _siteCode;
    NSObject<OS_dispatch_group> * _siteCodeGroup;
    LAContext * _smartCardLAContext;
    bool  _smartCardNeedsInsert;
    bool  _useKerberosPasswordInsteadOfMDMIdentity;
    NSString * _userName;
    bool  _userNameIsReadOnly;
    NSString * _userPrincipalName;
}

@property (nonatomic) bool attemptedToGetCredsFromKeychain;
@property (nonatomic, retain) NSData *auditToken;
@property (nonatomic, retain) ASAuthorizationProviderExtensionAuthorizationRequest *authorizationRequest;
@property (nonatomic, retain) NSString *cacheName;
@property (nonatomic, retain) NSString *callerBundleIdentifier;
@property (nonatomic, retain) NSString *callerLocalizedName;
@property (nonatomic, retain) NSString *certificateTokenID;
@property (nonatomic, retain) NSString *changedPassword;
@property (nonatomic, retain) NSUUID *credentialUUID;
@property (nonatomic) bool credsCameFromKeychain;
@property (nonatomic, readonly) SOKerberosRealmSettings *currentSettings;
@property (retain) NSObject<OS_dispatch_group> *dispatchGroup;
@property (nonatomic, retain) SOKerberosExtensionData *extensionData;
@property (nonatomic, retain) SOKerberosExtensionUserData *extensionUserData;
@property (nonatomic) bool forceLoginViewController;
@property (nonatomic, retain) NSString *hostName;
@property (nonatomic, retain) NSString *impersonationBundleIdentifier;
@property (nonatomic) bool isManagedApp;
@property (retain) LAContext *keychainLAContext;
@property (nonatomic) int laContextFailureCount;
@property (nonatomic, retain) NSDate *loginTimeStamp;
@property (nonatomic, retain) SONetworkIdentity *networkIdentity;
@property (nonatomic, retain) SOKerberosPacData *pacData;
@property (nonatomic, retain) NSString *password;
@property struct __SecIdentity { }*pkinitIdentity;
@property (retain) NSData *pkinitPersistientRef;
@property (nonatomic, retain) NSString *realm;
@property (nonatomic) bool refreshCredential;
@property (nonatomic) bool requestCancelled;
@property (nonatomic) bool requestStarted;
@property (nonatomic) bool returnCredentialOnly;
@property (nonatomic, retain) NSString *serviceName;
@property (nonatomic, retain) NSString *servicePrincipalName;
@property (nonatomic, retain) SOSiteCode *siteCode;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *siteCodeGroup;
@property (retain) LAContext *smartCardLAContext;
@property (nonatomic) bool smartCardNeedsInsert;
@property (nonatomic) bool useKerberosPasswordInsteadOfMDMIdentity;
@property (nonatomic, retain) NSString *userName;
@property (nonatomic) bool userNameIsReadOnly;
@property (nonatomic, retain) NSString *userPrincipalName;

- (void).cxx_destruct;
- (bool)attemptedToGetCredsFromKeychain;
- (id)auditToken;
- (id)authorizationRequest;
- (id)cacheName;
- (id)callerBundleIdentifier;
- (id)callerLocalizedName;
- (void)cancelRequest;
- (void)cancelRequest:(bool)arg1;
- (id)certificateTokenID;
- (id)changedPassword;
- (void)completeRequest;
- (void)completeRequestWithDoNotHandle;
- (void)completeRequestWithError:(id)arg1;
- (void)completeRequestWithHTTPResponse:(id)arg1 httpBody:(id)arg2;
- (void)completeRequestWithHTTPResponseHeaders:(id)arg1;
- (void)completeRequestWithHeaders:(id)arg1;
- (id)credentialUUID;
- (bool)credsCameFromKeychain;
- (id)currentSettings;
- (id)dispatchGroup;
- (id)extensionData;
- (id)extensionUserData;
- (void)finishRequest;
- (bool)forceLoginViewController;
- (id)hostName;
- (id)impersonationBundleIdentifier;
- (id)initWithRequest:(id)arg1 extensionData:(id)arg2;
- (bool)isManagedApp;
- (id)keychainLAContext;
- (int)laContextFailureCount;
- (id)loginTimeStamp;
- (id)networkIdentity;
- (id)pacData;
- (id)password;
- (struct __SecIdentity { }*)pkinitIdentity;
- (id)pkinitPersistientRef;
- (void)presentAuthorizationViewControllerWithCompletion:(id /* block */)arg1;
- (id)realm;
- (bool)refreshCredential;
- (bool)requestCancelled;
- (bool)requestStarted;
- (bool)returnCredentialOnly;
- (id)serviceName;
- (id)servicePrincipalName;
- (void)setAttemptedToGetCredsFromKeychain:(bool)arg1;
- (void)setAuditToken:(id)arg1;
- (void)setAuthorizationRequest:(id)arg1;
- (void)setCacheName:(id)arg1;
- (void)setCallerBundleIdentifier:(id)arg1;
- (void)setCallerLocalizedName:(id)arg1;
- (void)setCertificateTokenID:(id)arg1;
- (void)setChangedPassword:(id)arg1;
- (void)setCredentialUUID:(id)arg1;
- (void)setCredsCameFromKeychain:(bool)arg1;
- (void)setDispatchGroup:(id)arg1;
- (void)setExtensionData:(id)arg1;
- (void)setExtensionUserData:(id)arg1;
- (void)setForceLoginViewController:(bool)arg1;
- (void)setHostName:(id)arg1;
- (void)setImpersonationBundleIdentifier:(id)arg1;
- (void)setIsManagedApp:(bool)arg1;
- (void)setKeychainLAContext:(id)arg1;
- (void)setLaContextFailureCount:(int)arg1;
- (void)setLoginTimeStamp:(id)arg1;
- (void)setNetworkIdentity:(id)arg1;
- (void)setPacData:(id)arg1;
- (void)setPassword:(id)arg1;
- (void)setPkinitIdentity:(struct __SecIdentity { }*)arg1;
- (void)setPkinitPersistientRef:(id)arg1;
- (void)setRealm:(id)arg1;
- (void)setRefreshCredential:(bool)arg1;
- (void)setRequestCancelled:(bool)arg1;
- (void)setRequestStarted:(bool)arg1;
- (void)setReturnCredentialOnly:(bool)arg1;
- (void)setServiceName:(id)arg1;
- (void)setServicePrincipalName:(id)arg1;
- (void)setSiteCode:(id)arg1;
- (void)setSiteCodeGroup:(id)arg1;
- (void)setSmartCardLAContext:(id)arg1;
- (void)setSmartCardNeedsInsert:(bool)arg1;
- (void)setUseKerberosPasswordInsteadOfMDMIdentity:(bool)arg1;
- (void)setUserName:(id)arg1;
- (void)setUserNameIsReadOnly:(bool)arg1;
- (void)setUserPrincipalName:(id)arg1;
- (void)setUserPrincipalNameAfterAuth:(id)arg1;
- (id)siteCode;
- (id)siteCodeGroup;
- (id)smartCardLAContext;
- (bool)smartCardNeedsInsert;
- (void)startRequest;
- (bool)useKerberosPasswordInsteadOfMDMIdentity;
- (id)userName;
- (bool)userNameIsReadOnly;
- (id)userPrincipalName;
- (void)waitForCompletion;

@end
