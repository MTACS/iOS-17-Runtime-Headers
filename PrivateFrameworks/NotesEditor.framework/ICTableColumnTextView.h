
@interface ICTableColumnTextView : ICBaseTextView <ICHashtagKeyboardDelegate, ICHashtagViewControllerDelegate, ICLinkEditorDelegate, ICMentionsKeyboardDelegate, UIIndirectScribbleInteractionDelegate, UIScribbleInteractionDelegate> {
    <ICTableColumnTextViewDelegate> * _cellDelegate;
    NSUUID * _columnID;
    ICNAEventReporter * _eventReporter;
    ICHashtagController * _hashtagController;
    bool  _isChangingFont;
    bool  _isProcessingDelete;
    bool  _isResigningFirstResponder;
    ICMentionsController * _mentionsController;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _previousSelectedRange;
    <ICTableSelectionDelegate> * _selectionDelegate;
}

@property (nonatomic) <ICTableColumnTextViewDelegate> *cellDelegate;
@property (nonatomic, retain) NSUUID *columnID;
@property (nonatomic, readonly) ICTableColumnTextStorage *columnTextStorage;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) ICNAEventReporter *eventReporter;
@property (readonly) unsigned long long hash;
@property (nonatomic) ICHashtagController *hashtagController;
@property (nonatomic) bool isChangingFont;
@property (nonatomic) bool isProcessingDelete;
@property (nonatomic) bool isResigningFirstResponder;
@property (nonatomic, readonly) bool languageHasSpaces;
@property (nonatomic) ICMentionsController *mentionsController;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } previousSelectedRange;
@property (nonatomic) <ICTableSelectionDelegate> *selectionDelegate;
@property (readonly) bool shouldShowFloatingSuggestions;
@property (readonly) Class superclass;
@property (nonatomic, readonly) long long writingDirection;

- (void).cxx_destruct;
- (id)_accessibilityAttributedValueForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityBoundsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_accessibilityCanDrag;
- (id)_accessibilityResponderElement;
- (bool)_accessibilityScrollToVisible;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_accessibilitySelectedTextRange;
- (void)_accessibilitySetSelectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_icaxAccessibilityAttributedStringFromOriginalString:(id)arg1;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toVisibleInContainingScrollView:(bool)arg2;
- (id)accessibilityAttributedValue;
- (id)accessibilityDragSourceDescriptors;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityLabel;
- (void)addColumnLeft:(id)arg1;
- (void)addColumnRight:(id)arg1;
- (void)addRowDown:(id)arg1;
- (void)addRowUp:(id)arg1;
- (void)altMoveDown:(id)arg1;
- (void)altMoveUp:(id)arg1;
- (bool)atCellBoundaryForDirection:(unsigned long long)arg1;
- (id)baseAttributedStringForAccessibility;
- (bool)becomeFirstResponder;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)cellDelegate;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)columnID;
- (id)columnTextStorage;
- (void)createLink:(id)arg1 title:(id)arg2 textSelection:(id)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 addApproach:(long long)arg5;
- (void)createNoteLinkAttachment:(id)arg1 textSelection:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 addApproach:(long long)arg4;
- (void)dealloc;
- (void)deleteBackward;
- (void)didPasteOrDropText:(id)arg1 toRange:(id)arg2;
- (id)eventReporter;
- (void)eventReporterLostSession:(id)arg1;
- (void)finishProcessingDelete;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)hashtagController;
- (void)hashtagViewController:(id)arg1 insertFutureHashtagWithText:(id)arg2;
- (void)hashtagViewController:(id)arg1 insertHashtagWithText:(id)arg2;
- (void)hashtagViewController:(id)arg1 insertUnknownInlineAttachmentWithText:(id)arg2;
- (void)indirectScribbleInteraction:(id)arg1 focusElementIfNeeded:(id)arg2 referencePoint:(struct CGPoint { double x1; double x2; })arg3 completion:(id /* block */)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })indirectScribbleInteraction:(id)arg1 frameForElement:(id)arg2;
- (bool)indirectScribbleInteraction:(id)arg1 isElementFocused:(id)arg2;
- (void)indirectScribbleInteraction:(id)arg1 requestElementsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completion:(id /* block */)arg3;
- (void)indirectScribbleInteraction:(id)arg1 willBeginWritingInElement:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)inputAssistantItem;
- (void)insertInlineAttachment:(id)arg1 saveAndResumeEditingForAttachment:(id)arg2 inNote:(id)arg3;
- (void)insertInlineAttachment:(id)arg1 saveAndResumeEditingForAttachment:(id)arg2 inNote:(id)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (bool)isAccessibilityTableTextView;
- (bool)isChangingFont;
- (bool)isProcessingDelete;
- (bool)isResigningFirstResponder;
- (id)keyCommands;
- (void)linkEditorWillDismiss;
- (id)mentionsController;
- (void)moveDown:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveLeftCellAfterDelete;
- (void)moveRight:(id)arg1;
- (void)moveToBeginningOfCell:(id)arg1;
- (void)moveToBeginningOfCellAndModifySelection:(id)arg1;
- (void)moveToEndOfCell:(id)arg1;
- (void)moveToEndOfCellAndModifySelection:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)openExperimentalHashtagUI:(id)arg1;
- (void)openLinkEditor:(id)arg1;
- (void)paste:(id)arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })previousSelectedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeInSelectedCellFromRangeInTextView:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeInTextViewFromRangeInSelectedCell:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)removeLinksFromCurrentSelection;
- (void)removeLinksFromTextSelection:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)resignFirstResponder;
- (long long)returnKeyType;
- (bool)scribbleInteraction:(id)arg1 shouldBeginAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (id)selectionDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (void)setCellDelegate:(id)arg1;
- (void)setColumnID:(id)arg1;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setEditorController:(id)arg1;
- (void)setEventReporter:(id)arg1;
- (void)setHashtagController:(id)arg1;
- (void)setIsChangingFont:(bool)arg1;
- (void)setIsProcessingDelete:(bool)arg1;
- (void)setIsResigningFirstResponder:(bool)arg1;
- (void)setMentionsController:(id)arg1;
- (void)setPreviousSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSelectionDelegate:(id)arg1;
- (void)setupMenuController;
- (void)shiftReturn:(id)arg1;
- (bool)shouldShowFloatingSuggestions;
- (void)startEditingForTapGesture:(id)arg1;
- (id)textDroppableView:(id)arg1 proposalForDrop:(id)arg2;
- (void)textViewDidBeginEditing:(id)arg1;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)undoManager;
- (long long)writingDirection;

@end
