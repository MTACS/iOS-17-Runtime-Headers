
@interface ICDrawingInlineView : UIView <ICImageAttachmentPresentationDelegate> {
    ICAttachment * _attachment;
    struct CGSize { 
        double width; 
        double height; 
    }  _attachmentContentSize;
    UIColor * _borderColor;
    bool  _editable;
    bool  _forManualRendering;
    bool  _fullscreen;
    bool  _hideLoadingProgress;
    CALayer * _imageLayer;
    id /* block */  _imageLoadingCancelBlock;
    bool  _isInAttachmentBrowser;
    ICLoadingPieLayer * _loadingProgressLayer;
    bool  _needsToUpdateImage;
    ICSelectorDelayer * _previewImageUpdateDelayer;
    bool  _showGotoNote;
    bool  _thumbnailDisplay;
}

@property (nonatomic, retain) ICAttachment *attachment;
@property (nonatomic) struct CGSize { double x1; double x2; } attachmentContentSize;
@property (nonatomic, retain) UIColor *borderColor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundsForDisplay;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIColor *drawingBackgroundColor;
@property (getter=isEditable, nonatomic) bool editable;
@property (nonatomic) bool forManualRendering;
@property (nonatomic) bool fullscreen;
@property (nonatomic, readonly) bool hasImage;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hideLoadingProgress;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } imageFrame;
@property (nonatomic, retain) CALayer *imageLayer;
@property (nonatomic, copy) id /* block */ imageLoadingCancelBlock;
@property (nonatomic) bool isInAttachmentBrowser;
@property (nonatomic) ICLoadingPieLayer *loadingProgressLayer;
@property (nonatomic) bool needsToUpdateImage;
@property (nonatomic, retain) ICSelectorDelayer *previewImageUpdateDelayer;
@property (nonatomic, readonly) bool shouldUseLightDrawingBackground;
@property (nonatomic) bool showGotoNote;
@property (readonly) Class superclass;
@property (nonatomic) bool thumbnailDisplay;

- (void).cxx_destruct;
- (void)animateImageArrivalWithAnimationDuration:(double)arg1;
- (id)attachment;
- (struct CGSize { double x1; double x2; })attachmentContentSize;
- (id)attachmentImage;
- (void)attachmentPreviewDidStart:(id)arg1;
- (void)attachmentPreviewImagesDidUpdate:(id)arg1;
- (id)borderColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDisplay;
- (bool)cancelDidScrollIntoVisibleRange;
- (void)commonInit;
- (void)dealloc;
- (void)delayedPreviewImageChanged;
- (void)didMoveToWindow;
- (void)didScrollIntoVisibleRange;
- (void)didScrollOutOfVisibleRange;
- (id)drawingBackgroundColor;
- (bool)forManualRendering;
- (bool)fullscreen;
- (bool)hasImage;
- (bool)hideLoadingProgress;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageFrame;
- (id)imageLayer;
- (id /* block */)imageLoadingCancelBlock;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forManualRendering:(bool)arg2;
- (bool)isAttachmentEditable;
- (bool)isEditable;
- (bool)isInAttachmentBrowser;
- (bool)isReadyToPresent;
- (bool)isVisibleWithinScrollView;
- (id)loadingProgressLayer;
- (id)lowestSuperScrollView;
- (bool)needsToUpdateImage;
- (void)observePreviewGenerationProgress:(id)arg1;
- (id)previewImage;
- (id)previewImageUpdateDelayer;
- (void)setAttachment:(id)arg1;
- (void)setAttachmentContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setBorderColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEditable:(bool)arg1;
- (void)setForManualRendering:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFullscreen:(bool)arg1;
- (void)setHideLoadingProgress:(bool)arg1;
- (void)setImageLayer:(id)arg1;
- (void)setImageLoadingCancelBlock:(id /* block */)arg1;
- (void)setIsInAttachmentBrowser:(bool)arg1;
- (void)setLoadingProgressLayer:(id)arg1;
- (void)setNeedsToUpdateImage:(bool)arg1;
- (void)setPreviewImageUpdateDelayer:(id)arg1;
- (void)setShowGotoNote:(bool)arg1;
- (void)setThumbnailDisplay:(bool)arg1;
- (bool)shouldUseLightDrawingBackground;
- (bool)showGotoNote;
- (bool)thumbnailDisplay;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateBorderWidth;
- (void)updateImageWithAnimation:(bool)arg1;
- (void)updateLayerImage:(id)arg1 animation:(bool)arg2;
- (id)viewToPresentAttachmentFrom;

@end
