
@interface RERelevanceEngine : NSObject <REActivityTrackerDelegate, RERelevanceEngineProperties> {
    REActivityTracker * _activityTracker;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _activityTrackerLock;
    NSMutableDictionary * _addedElementsByIdentifier;
    bool  _automaticallyResumeEngine;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    RERelevanceEngineConfiguration * _configuration;
    NSArray * _configurationSectionDescriptors;
    RELiveElementCoordinator * _coordinator;
    REDataSourceCatalog * _dataSourceCatalog;
    REDataSourceManager * _dataSourceManager;
    _REEngineDefaults * _defaults;
    REFeatureTransmuter * _featureTransmuter;
    NSArray * _historicSectionDescriptors;
    NSDictionary * _inflectionFeatureValues;
    REFeatureMapGenerator * _inputFeatureMapGenerator;
    bool  _loading;
    REUpNextScheduler * _loadingScheduler;
    REEngineLocationManager * _locationManager;
    RERelevanceEngineLogger * _logger;
    REFeatureSet * _mlFeatures;
    REMLModelManager * _modelManager;
    NSString * _name;
    REFeatureMapGenerator * _outputFeatureMapGenerator;
    RERelevanceEnginePreferencesController * _preferenceController;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _resumeCompletionBlock;
    REFeatureSet * _rootFeatures;
    bool  _running;
    NSArray * _sectionDescriptors;
    NSMutableArray * _subsystems;
    RETrainingManager * _trainingManager;
    bool  _updatedLoading;
}

@property (nonatomic) bool automaticallyResumeEngine;
@property (nonatomic, readonly) RERelevanceEngineConfiguration *configuration;
@property (nonatomic, readonly) RELiveElementCoordinator *coordinator;
@property (nonatomic, readonly) REDataSourceCatalog *dataSourceCatalog;
@property (nonatomic, readonly) REDataSourceManager *dataSourceManager;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) _REEngineDefaults *defaults;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) RERelevanceEnginePreferences *effectivePreferences;
@property (nonatomic, readonly) REFeatureTransmuter *featureTransmuter;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *historicSectionDescriptors;
@property (nonatomic, readonly) NSDictionary *inflectionFeatureValues;
@property (nonatomic, readonly) REEngineLocationManager *locationManager;
@property (nonatomic, readonly) RERelevanceEngineLogger *logger;
@property (nonatomic, readonly) REFeatureSet *mlFeatures;
@property (nonatomic, readonly) REMLModelManager *modelManager;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) REFeatureSet *rootFeatures;
@property (getter=isRunning, readonly) bool running;
@property (nonatomic, readonly) NSArray *sectionDescriptors;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *subsystemQueue;
@property (nonatomic, readonly) NSArray *subsystems;
@property (readonly) Class superclass;
@property (nonatomic, readonly) RETrainingManager *trainingManager;
@property (nonatomic, readonly) bool wantsImmutableContent;

+ (void)prewarmWithConfiguration:(id)arg1;

- (void).cxx_destruct;
- (void)_addSubsystem:(id)arg1;
- (void)_callbackQueue_notifyLoadingState;
- (void)_captureAndStoreDiagnosticLogs:(id /* block */)arg1;
- (void)_notifyResumeCompleted;
- (void)_queue_pauseSubsystem:(id)arg1;
- (void)_queue_resumeSubsystem:(id)arg1;
- (void)_queue_resumeWithTimeout:(double)arg1 completion:(id /* block */)arg2;
- (void)_removeSubsystem:(id)arg1;
- (void)activityTracker:(id)arg1 didBeginActivity:(id)arg2;
- (void)activityTracker:(id)arg1 didEndActivity:(id)arg2;
- (void)addElement:(id)arg1 section:(id)arg2;
- (void)addObserver:(id)arg1;
- (void)addTrainingContext:(id)arg1;
- (bool)automaticallyResumeEngine;
- (void)beginActivity:(id)arg1 forObject:(id)arg2;
- (id)configuration;
- (id)coordinator;
- (id)dataSourceCatalog;
- (id)dataSourceManager;
- (void)dealloc;
- (id)defaults;
- (id)description;
- (id)dictionaryFromElement:(id)arg1;
- (id)effectivePreferences;
- (id)elementAtPath:(id)arg1;
- (id)elementFromDictionary:(id)arg1;
- (id)elementRankerForSection:(id)arg1;
- (void)endActivity:(id)arg1 forObject:(id)arg2;
- (void)enumerateRankedContent:(id /* block */)arg1;
- (void)enumerateRankedContentInSection:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateSectionDescriptorsWithOptions:(unsigned long long)arg1 includeHistoric:(bool)arg2 usingBlock:(id /* block */)arg3;
- (id)featureProviderForElement:(id)arg1;
- (id)featureProviderForElementAtPath:(id)arg1;
- (id)featureTransmuter;
- (void)gatherMetrics;
- (id)historicSectionDescriptors;
- (id)historicSectionForSection:(id)arg1;
- (id)inflectionFeatureValues;
- (id)initWithConfiguration:(id)arg1;
- (id)initWithName:(id)arg1 configuration:(id)arg2;
- (bool)isRunning;
- (bool)isSectionWithNameHistoric:(id)arg1;
- (id)locationManager;
- (id)logger;
- (id)mlFeatures;
- (id)modelManager;
- (id)name;
- (id)newInputFeatureMap;
- (id)newOutputFeatureMap;
- (unsigned long long)numberOfElementsInSection:(id)arg1;
- (id)pathForElement:(id)arg1;
- (void)pause;
- (void)pauseForSimulation;
- (id)predictionForElement:(id)arg1;
- (id)predictionForElementAtPath:(id)arg1;
- (void)removeElement:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)removePreferencesForObject:(id)arg1;
- (void)removeTrainingContext:(id)arg1;
- (void)resetModelWithCompletion:(id /* block */)arg1;
- (void)resume;
- (void)resumeFromSimulation;
- (void)resumeWithTimeout:(double)arg1 completion:(id /* block */)arg2;
- (id)rootFeatures;
- (void)saveModelFile;
- (id)sectionDescriptors;
- (id)sectionForHistoricSection:(id)arg1;
- (void)setAutomaticallyResumeEngine:(bool)arg1;
- (void)setPreferences:(id)arg1 forObject:(id)arg2;
- (void)storeDiagnosticLogs:(id /* block */)arg1;
- (void)storeDiagnosticLogsToFile:(id /* block */)arg1;
- (id)subsystemQueue;
- (id)subsystems;
- (void)trainPendingEventsWithCompletion:(id /* block */)arg1;
- (void)trainWithPendingEvents;
- (id)trainingManager;
- (void)updateSectionsWithIdentifiers:(id)arg1 completion:(id /* block */)arg2;
- (bool)wantsImmutableContent;

@end
