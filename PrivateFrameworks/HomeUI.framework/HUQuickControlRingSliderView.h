
@interface HUQuickControlRingSliderView : UIView <HUQuickControlInteractiveView, HURingSliderStatusLabelUpdateDelegate, UIGestureRecognizerDelegate> {
    UIView * _backgroundRingView;
    NSMutableArray * _currentDirectionTapticValues;
    bool  _didMaskBackgroundImageView;
    UIView * _edgesAndColoredSupplementaryValueLineView;
    NSMutableArray * _gradationMarkingViews;
    UIImage * _gradientRingImage;
    UIImpactFeedbackGenerator * _impactFeedbackGenerator;
    <HUQuickControlViewInteractionDelegate> * _interactionDelegate;
    bool  _isDraggingPrimaryHandleView;
    bool  _isDraggingSecondaryHandleView;
    UIView * _labelsBackgroundView;
    UILongPressGestureRecognizer * _longPressPanGestureRecognizer;
    NSMutableDictionary * _markingValuesAndViewsDictionary;
    struct { 
        double minimum; 
        double maximum; 
    }  _modelRangeValue;
    double  _outerRadius;
    double  _prevSliderValue;
    unsigned long long  _prevSlidingDirection;
    unsigned long long  _prevTouchArea;
    HUQuickControlRingSliderHandleView * _primaryHandleView;
    UILabel * _primaryLabel;
    HUQuickControlRingSliderViewProfile * _profile;
    unsigned long long  _reachabilityState;
    HUQuickControlRingSliderHandleView * _secondaryHandleView;
    UIImageView * _selectedRangeImageView;
    UIImageView * _selectedRangeImageViewForEdges;
    UISelectionFeedbackGenerator * _selectionFeedbackGenerator;
    bool  _showOffState;
    UILabel * _supplementaryLabel;
    double  _supplementaryValue;
    UIView * _supplementaryValueMarkingView;
    bool  _userInteractionActive;
}

@property (nonatomic, retain) UIView *backgroundRingView;
@property (nonatomic, retain) NSMutableArray *currentDirectionTapticValues;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didMaskBackgroundImageView;
@property (nonatomic, retain) UIView *edgesAndColoredSupplementaryValueLineView;
@property (nonatomic, retain) NSMutableArray *gradationMarkingViews;
@property (nonatomic, retain) UIImage *gradientRingImage;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIImpactFeedbackGenerator *impactFeedbackGenerator;
@property (nonatomic) <HUQuickControlViewInteractionDelegate> *interactionDelegate;
@property (nonatomic) bool isDraggingPrimaryHandleView;
@property (nonatomic) bool isDraggingSecondaryHandleView;
@property (nonatomic, retain) UIView *labelsBackgroundView;
@property (nonatomic, retain) UILongPressGestureRecognizer *longPressPanGestureRecognizer;
@property (nonatomic, retain) NSMutableDictionary *markingValuesAndViewsDictionary;
@property (nonatomic) struct { double x1; double x2; } modelRangeValue;
@property (nonatomic) double outerRadius;
@property (nonatomic) double prevSliderValue;
@property (nonatomic) unsigned long long prevSlidingDirection;
@property (nonatomic) unsigned long long prevTouchArea;
@property (nonatomic, retain) HUQuickControlRingSliderHandleView *primaryHandleView;
@property (nonatomic, retain) UILabel *primaryLabel;
@property (nonatomic, copy) HUQuickControlRingSliderViewProfile *profile;
@property (nonatomic) unsigned long long reachabilityState;
@property (nonatomic, retain) HUQuickControlRingSliderHandleView *secondaryHandleView;
@property (nonatomic, retain) id secondaryValue;
@property (nonatomic, retain) UIImageView *selectedRangeImageView;
@property (nonatomic, retain) UIImageView *selectedRangeImageViewForEdges;
@property (nonatomic, retain) UISelectionFeedbackGenerator *selectionFeedbackGenerator;
@property (nonatomic) bool showOffState;
@property (readonly) Class superclass;
@property (nonatomic, retain) UILabel *supplementaryLabel;
@property (nonatomic) double supplementaryValue;
@property (nonatomic, retain) UIView *supplementaryValueMarkingView;
@property (getter=isUserInteractionActive, nonatomic) bool userInteractionActive;
@property (nonatomic, retain) id value;

+ (bool)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (void)_actuateImpactTapticFeedback;
- (void)_actuateSelectionTapticFeedback;
- (void)_animateToEnlargeHandleView:(id)arg1;
- (bool)_areHandleViewsAnimating;
- (double)_getAngleFrom12OClockForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_getAngleFrom12OClockForValue:(double)arg1;
- (struct CGPoint { double x1; double x2; })_getCircleCenterPoint;
- (double)_getClosestMarkingValueToValue:(double)arg1;
- (struct CGPoint { double x1; double x2; })_getClosestPointOnMiddleCircleOfRing:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_getEdgeRectSize;
- (struct CGPoint { double x1; double x2; })_getHandleCenterOnRingForValue:(double)arg1;
- (double)_getInnerCircleRadius;
- (double)_getMaxAngleFrom12OClock;
- (double)_getMaximumMarkingValue;
- (double)_getMiddleCircleRadius;
- (double)_getMinAngleFrom12OClock;
- (double)_getMinimumMarkingValue;
- (double)_getOneMarkerValueDifference;
- (struct CGPoint { double x1; double x2; })_getPointForAngleFrom12OClock:(double)arg1;
- (struct { double x1; double x2; })_getPossibleAngleRange12OClock;
- (double)_getPrimarySliderValue;
- (unsigned long long)_getRingSliderAreaForAngleFrom12Oclock:(double)arg1;
- (unsigned long long)_getRingSliderAreaForAngleFrom12Oclock:(double)arg1 minAngle:(double)arg2 maxAngle:(double)arg3;
- (unsigned long long)_getRingSliderAreaForHandleViewForAngleFrom12Oclock:(double)arg1;
- (unsigned long long)_getRingSliderAreaForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_getSecondarySliderValue;
- (double)_getSliderValueForAngleFrom12OClock:(double)arg1;
- (double)_getSliderValueForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_getStartAngleEdgeLocationShiftForBackgroundRing:(bool)arg1;
- (bool)_isIncreasingOrDecreasing:(unsigned long long)arg1;
- (bool)_isPoint:(struct CGPoint { double x1; double x2; })arg1 withInMarginOfRing:(double)arg2;
- (void)_maskBackgroundImageViewToRingShape;
- (void)_prepareForTapticFeedback;
- (bool)_primaryHandleViewContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_redrawGradationMarkingViews;
- (bool)_secondaryHandleViewContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_touchEnded;
- (void)_updateLabelsSize;
- (void)_updateModelValue:(struct { double x1; double x2; })arg1 roundValue:(bool)arg2 notifyInteractionDelegate:(bool)arg3;
- (void)_updateModelValueWithNewPrimarySliderValue:(double)arg1 roundValue:(bool)arg2 notifyInteractionDelegate:(bool)arg3;
- (void)_updateModelValueWithNewSecondarySliderValue:(double)arg1 roundValue:(bool)arg2 notifyInteractionDelegate:(bool)arg3;
- (void)_updateModelValueWithSlidersPositions;
- (void)_updatePrimaryHandleViewPositionToSliderValue;
- (void)_updateRingViewAndHandleViews;
- (void)_updateSecondaryHandleViewPositionToSliderValue;
- (void)_updateSelectedRangeImageView;
- (void)_updateSupplementaryValueMarkingView;
- (void)_updateSupplementaryValueMarkingViewColor;
- (void)_updateTransform;
- (void)_updateUIForReachabilityState:(unsigned long long)arg1;
- (void)_updateUIForThresholdModeForPrimaryHandleViewWithTouchPoint:(struct CGPoint { double x1; double x2; })arg1 didTouchBegin:(bool)arg2;
- (void)_updateUIForThresholdModeForSecondaryHandleViewWithTouchPoint:(struct CGPoint { double x1; double x2; })arg1 didTouchBegin:(bool)arg2;
- (void)_updateUIForTouchPoint:(struct CGPoint { double x1; double x2; })arg1 didTouchBegin:(bool)arg2 forHandleView:(id)arg3 minValue:(double)arg4 maxValue:(double)arg5;
- (void)_updateUIWithTouchAtPoint:(struct CGPoint { double x1; double x2; })arg1 didTouchBegin:(bool)arg2;
- (id)backgroundRingView;
- (void)beginUserInteractionWithFirstTouchGestureRecognizer:(id)arg1;
- (id)currentDirectionTapticValues;
- (bool)didMaskBackgroundImageView;
- (id)edgesAndColoredSupplementaryValueLineView;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)gradationMarkingViews;
- (id)gradientRingImage;
- (void)handlePanGestureRecognizer:(id)arg1;
- (id)impactFeedbackGenerator;
- (id)initWithProfile:(id)arg1;
- (id)interactionDelegate;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (id)intrinsicSizeDescriptorForControlSize:(unsigned long long)arg1;
- (bool)isDraggingPrimaryHandleView;
- (bool)isDraggingSecondaryHandleView;
- (bool)isUserInteractionActive;
- (id)labelsBackgroundView;
- (void)layoutSubviews;
- (id)longPressPanGestureRecognizer;
- (id)markingValuesAndViewsDictionary;
- (struct { double x1; double x2; })modelRangeValue;
- (double)outerRadius;
- (double)prevSliderValue;
- (unsigned long long)prevSlidingDirection;
- (unsigned long long)prevTouchArea;
- (id)primaryHandleView;
- (id)primaryLabel;
- (id)profile;
- (unsigned long long)reachabilityState;
- (id)secondaryHandleView;
- (id)secondaryValue;
- (id)selectedRangeImageView;
- (id)selectedRangeImageViewForEdges;
- (id)selectionFeedbackGenerator;
- (void)setBackgroundRingView:(id)arg1;
- (void)setCurrentDirectionTapticValues:(id)arg1;
- (void)setDidMaskBackgroundImageView:(bool)arg1;
- (void)setEdgesAndColoredSupplementaryValueLineView:(id)arg1;
- (void)setGradationMarkingViews:(id)arg1;
- (void)setGradientRingImage:(id)arg1;
- (void)setImpactFeedbackGenerator:(id)arg1;
- (void)setInteractionDelegate:(id)arg1;
- (void)setIsDraggingPrimaryHandleView:(bool)arg1;
- (void)setIsDraggingSecondaryHandleView:(bool)arg1;
- (void)setLabelsBackgroundView:(id)arg1;
- (void)setLongPressPanGestureRecognizer:(id)arg1;
- (void)setMarkingValuesAndViewsDictionary:(id)arg1;
- (void)setModelRangeValue:(struct { double x1; double x2; })arg1;
- (void)setOuterRadius:(double)arg1;
- (void)setPrevSliderValue:(double)arg1;
- (void)setPrevSlidingDirection:(unsigned long long)arg1;
- (void)setPrevTouchArea:(unsigned long long)arg1;
- (void)setPrimaryHandleView:(id)arg1;
- (void)setPrimaryLabel:(id)arg1;
- (void)setProfile:(id)arg1;
- (void)setReachabilityState:(unsigned long long)arg1;
- (void)setSecondaryHandleView:(id)arg1;
- (void)setSecondaryValue:(id)arg1;
- (void)setSelectedRangeImageView:(id)arg1;
- (void)setSelectedRangeImageViewForEdges:(id)arg1;
- (void)setSelectionFeedbackGenerator:(id)arg1;
- (void)setShowOffState:(bool)arg1;
- (void)setSupplementaryLabel:(id)arg1;
- (void)setSupplementaryValue:(double)arg1;
- (void)setSupplementaryValueMarkingView:(id)arg1;
- (void)setUserInteractionActive:(bool)arg1;
- (void)setValue:(id)arg1;
- (bool)showOffState;
- (id)supplementaryLabel;
- (double)supplementaryValue;
- (id)supplementaryValueMarkingView;
- (void)updatePrimaryLabelWithString:(id)arg1 fontSize:(double)arg2;
- (void)updateSupplementaryLabelWithString:(id)arg1;
- (id)value;

@end
