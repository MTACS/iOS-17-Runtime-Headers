
@interface HUCameraTimelapseController : NSObject <HFCameraVideoDownloaderDelegate, HMCameraClipManagerObserver, HUTimelapseClipDataSource> {
    NSCache * _cachedPlayerItems;
    NSMutableDictionary * _cachedVideos;
    HMCameraProfile * _cameraProfile;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _chaseTime;
    HMCameraClip * _currentClip;
    unsigned long long  _downloadState;
    HMCameraClip * _highQualityClip;
    CALayer * _imageLayer;
    AVPlayer * _player;
    long long  _playerItemStatus;
    AVPlayerLayer * _playerLayer;
    bool  _playingHLSPlayerItem;
    bool  _seekInProgress;
    bool  _seekingToTime;
    NSArray * _timelapseClips;
}

@property (nonatomic, retain) NSCache *cachedPlayerItems;
@property (nonatomic, retain) NSMutableDictionary *cachedVideos;
@property (nonatomic, retain) HMCameraProfile *cameraProfile;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } chaseTime;
@property (nonatomic, retain) HMCameraClip *currentClip;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long downloadState;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) HMCameraClip *highQualityClip;
@property (nonatomic, readonly) CALayer *imageLayer;
@property (nonatomic, readonly) AVPlayer *player;
@property (nonatomic) long long playerItemStatus;
@property (nonatomic, readonly) AVPlayerLayer *playerLayer;
@property (getter=isPlayingHLSPlayerItem, nonatomic) bool playingHLSPlayerItem;
@property (getter=isSeekInProgress, nonatomic) bool seekInProgress;
@property (getter=isSeekingToTime, nonatomic) bool seekingToTime;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *timelapseClips;

- (void).cxx_destruct;
- (void)_fallbackToHighQualityClip:(id)arg1;
- (void)_hideAllTimelapseLayers;
- (void)_loadPlayerForTimelapseClip:(id)arg1 atLocation:(id)arg2;
- (void)_loadPlayerFromLocation:(id)arg1;
- (void)_showOnlyImageLayer;
- (void)_showOnlyPlayerLayer;
- (void)_updateTimelapseClip:(id)arg1 withHighQualityClip:(id)arg2;
- (void)actuallySeekToTime;
- (id)cachedPlayerItems;
- (id)cachedVideos;
- (id)cameraProfile;
- (bool)canSeekWithClip:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })chaseTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })cmTimeFromDate:(id)arg1;
- (id)currentClip;
- (void)dealloc;
- (void)didDownloadVideoFileForClip:(id)arg1 toURL:(id)arg2;
- (unsigned long long)downloadState;
- (void)failedToDownloadVideoFileForClip:(id)arg1;
- (void)foundVideoFileForClip:(id)arg1 atURL:(id)arg2;
- (void)hideAllViews;
- (id)highQualityClip;
- (id)imageLayer;
- (id)initWithCameraProfile:(id)arg1;
- (bool)isPlayingHLSPlayerItem;
- (bool)isSeekInProgress;
- (bool)isSeekingToTime;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)pauseTimelapseScrubbing;
- (id)player;
- (id)playerItemForURL:(id)arg1;
- (long long)playerItemStatus;
- (id)playerLayer;
- (void)resetForNewCamera;
- (void)seekToDate:(id)arg1;
- (void)setCachedPlayerItems:(id)arg1;
- (void)setCachedVideos:(id)arg1;
- (void)setCameraProfile:(id)arg1;
- (void)setChaseTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setCurrentClip:(id)arg1;
- (void)setDownloadState:(unsigned long long)arg1;
- (void)setHighQualityClip:(id)arg1;
- (void)setPlayerItemStatus:(long long)arg1;
- (void)setPlayingHLSPlayerItem:(bool)arg1;
- (void)setSeekInProgress:(bool)arg1;
- (void)setSeekingToTime:(bool)arg1;
- (void)setTimelapseVisibility:(bool)arg1;
- (id)timelapseClips;
- (void)trySeekToChaseTime;
- (void)updatePlaceholderContent;
- (void)updateToPlaybackPosition:(id)arg1 forHighQualityClip:(id)arg2;
- (void)updateVideoBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
