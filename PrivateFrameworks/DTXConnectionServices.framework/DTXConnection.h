
@interface DTXConnection : NSObject <DTXConnectionRemoteReceiveQueueCalls, DTXMessenger> {
    NSMutableArray * _capabilityOverrideBlocks;
    id /* block */  _channelHandler;
    NSMutableDictionary * _channelsByCode;
    unsigned long long  _compressionMinSizeThreshold;
    int  _compressionTypeForUnspecified;
    <DTXBlockCompressor> * _compressor;
    int  _connectionIndex;
    DTXTransport * _controlTransport;
    DTXChannel * _defaultChannel;
    NSObject<OS_dispatch_semaphore> * _firstMessageSem;
    NSObject<OS_dispatch_queue> * _handler_queue;
    NSMutableDictionary * _handlersByIdentifier;
    DTXMessageParser * _incomingParser;
    DTXResourceTracker * _incomingResourceTracker;
    NSString * _label;
    NSMutableDictionary * _localCapabilityClasses;
    NSMutableDictionary * _localCapabilityVersions;
    unsigned long long  _logMessageCallstackSizeThreshold;
    int  _newChannelCompressionHint;
    unsigned int  _nextChannelCode;
    DTXMessageTransmitter * _outgoingTransmitter;
    NSObject<OS_dispatch_queue> * _outgoing_control_queue;
    NSObject<OS_dispatch_queue> * _outgoing_message_queue;
    NSSet * _permittedBlockCompressors;
    NSMutableArray * _protocolHandlers;
    NSObject<OS_dispatch_queue> * _receive_queue;
    NSDictionary * _remoteCapabilityVersions;
    int  _remoteCompressionCapabilityVersion;
    bool  _remoteTracer;
    DTXResourceTracker * _resourceTracker;
    bool  _tracer;
    NSMutableDictionary * _unconfiguredChannelsByCode;
}

@property (nonatomic, readonly) int atomicConnectionNumber;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly, retain) DTXChannel *defaultChannel;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSString *label;
@property (nonatomic) unsigned long long maximumEnqueueSize;
@property (nonatomic) bool remoteTracer;
@property (readonly) Class superclass;
@property (nonatomic) bool tracer;

+ (id)connectionToAddress:(id)arg1;
+ (void)initialize;
+ (void)observeDecompressionExceptionLogging:(id /* block */)arg1;
+ (void)registerTransport:(Class)arg1 forScheme:(id)arg2;

- (void).cxx_destruct;
- (bool)_addHandler:(id /* block */)arg1 forMessage:(unsigned int)arg2 channel:(id)arg3;
- (void)_cancelInternal:(id /* block */)arg1;
- (void)_channelCanceled:(unsigned int)arg1;
- (void)_handleMessageParseException:(id)arg1 forChannelCode:(unsigned int)arg2 messageID:(unsigned int)arg3 fragmentCount:(unsigned int)arg4 withPayloadBytes:(const void*)arg5 ofLength:(unsigned long long)arg6;
- (void)_handleMissingRemoteCapabilities;
- (void)_handleProxyRequestForInterface:(id)arg1 interfaceName:(id)arg2 peerInterface:(id)arg3 peerInterfaceName:(id)arg4 handler:(id /* block */)arg5;
- (id)_makeProxyChannelWithRemoteInterface:(id)arg1 remoteInterfaceName:(id)arg2 exportedInterface:(id)arg3 exportedInterfaceName:(id)arg4;
- (void)_notifyCompressionHint:(unsigned int)arg1 forChannelCode:(unsigned int)arg2;
- (void)_notifyOfPublishedCapabilities:(id)arg1;
- (void)_receiveQueueSetCompressionHint:(unsigned int)arg1 onChannel:(id)arg2;
- (void)_requestChannelWithCode:(unsigned int)arg1 identifier:(id)arg2;
- (void)_routeMessage:(id)arg1;
- (void)_scheduleMessage:(id)arg1 toChannel:(id)arg2;
- (id)_sendHeartbeatAsyncWithTimeout:(double)arg1;
- (void)_setTracerState:(unsigned int)arg1;
- (void)_setupWireProtocols;
- (id)_testing_remoteCapabilityVersions;
- (void)_unregisterChannel:(id)arg1;
- (int)atomicConnectionNumber;
- (void)cancel;
- (void)cancelWithSerializedTransport:(id /* block */)arg1;
- (void)dealloc;
- (id)defaultChannel;
- (id)description;
- (void)handleProxyRequestForInterface:(id)arg1 interfaceName:(id)arg2 peerInterface:(id)arg3 peerInterfaceName:(id)arg4 handler:(id /* block */)arg5;
- (void)handleProxyRequestForInterface:(id)arg1 peerInterface:(id)arg2 handler:(id /* block */)arg3;
- (id)initWithTransport:(id)arg1;
- (id)label;
- (id)localCapabilities;
- (id)makeChannelWithIdentifier:(id)arg1;
- (id)makeProxyChannelWithRemoteInterface:(id)arg1 exportedInterface:(id)arg2;
- (id)makeProxyChannelWithRemoteInterface:(id)arg1 remoteInterfaceName:(id)arg2 exportedInterface:(id)arg3 exportedInterfaceName:(id)arg4;
- (unsigned long long)maximumEnqueueSize;
- (void)overridePermittedBlockCompressors:(id)arg1;
- (double)preflightSynchronouslyWithTimeout:(double)arg1;
- (void)publishCapability:(id)arg1 withVersion:(int)arg2 forClass:(Class)arg3;
- (bool)publishCapability:(id)arg1 withVersion:(int)arg2 forClass:(Class)arg3 error:(id*)arg4;
- (void)publishServicesInImagePath:(id)arg1;
- (id)publishedAddresses;
- (void)registerCapabilityOverrideBlock:(id /* block */)arg1;
- (void)registerDisconnectHandler:(id /* block */)arg1;
- (int)remoteCapabilityVersion:(id)arg1;
- (id)remoteCapabilityVersions;
- (bool)remoteTracer;
- (void)replaceCompressorForCompression:(id)arg1;
- (void)replaceCompressorForDecompression:(id)arg1;
- (void)resume;
- (void)sendControlAsync:(id)arg1 replyHandler:(id /* block */)arg2;
- (void)sendControlSync:(id)arg1 replyHandler:(id /* block */)arg2;
- (bool)sendMessage:(id)arg1 fromChannel:(id)arg2 sendMode:(int)arg3 syncWithReply:(bool)arg4 replyHandler:(id /* block */)arg5;
- (void)sendMessage:(id)arg1 replyHandler:(id /* block */)arg2;
- (bool)sendMessageAsync:(id)arg1 replyHandler:(id /* block */)arg2;
- (void)sendMessageSync:(id)arg1 replyHandler:(id /* block */)arg2;
- (void)setChannelHandler:(id /* block */)arg1;
- (void)setCompressionHint:(int)arg1 forChannel:(id)arg2;
- (void)setDispatchTarget:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setMaximumEnqueueSize:(unsigned long long)arg1;
- (void)setMessageHandler:(id /* block */)arg1;
- (void)setRemoteTracer:(bool)arg1;
- (void)setTracer:(bool)arg1;
- (void)suspend;
- (bool)tracer;

@end
