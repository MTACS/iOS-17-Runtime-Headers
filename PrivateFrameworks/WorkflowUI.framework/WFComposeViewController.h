
@interface WFComposeViewController : UIViewController <UINavigationBarDelegate, UINavigationItemRenameDelegate, UIPopoverPresentationControllerDelegate, WFAddToHomeScreenActivityDelegate, WFComposeFlowControllerDelegate, WFDrawerControllerDelegate, WFEditorAuxiliaryViewPresenter, WFEditorViewControllerDelegate, WFInspectorPaneSegmentedControlDelegate, WFRunWorkflowToolbarDelegate, WFShortcutIconEditorViewControllerDelegate, WFSwiftUIActionDescriptionViewControllerDelegate, WFSwiftUIActionDrawerCoordinatorDelegate, WFWorkflowSettingsViewControllerDelegate> {
    WFAddToHomeScreenActivity * _addToHomeScreenActivity;
    UIAction * _backAction;
    bool  _backActionTapped;
    double  _bottomContentInset;
    WFDatabase * _database;
    <WFComposeViewControllerDelegate> * _delegate;
    WFSwiftUIActionDrawerCoordinator * _drawerCoordinator;
    NSMutableArray * _editingStates;
    <WFEditorDocumentMenuDelegate> * _editorDocumentMenuDelegate;
    WFEditorViewController * _editorViewController;
    WFComposeFlowController * _flowController;
    HMHome * _home;
    bool  _isEditingNewWorkflow;
    bool  _isRenameSessionActive;
    WFMoveToFolderCoordinator * _moveCoordinator;
    NSHashTable * _movedDragControllers;
    bool  _observingSharingEnabledUserDefault;
    <WFComposeViewControllerPresenter> * _presenter;
    UIView * _separatorView;
    UIButton * _settingsButton;
    WFWorkflowSettingsViewController * _settingsViewController;
    bool  _shouldShowShareButton;
    UIButton * _titleAccessorySettingsButton;
    UILabel * _titleViewLabel;
    UIButton * _titleViewSettingsButton;
    WFRunWorkflowToolbar * _toolbar;
    NSUndoManager * _undoManager;
    WFComposeUserActivityManager * _userActivityManager;
    WFWorkflow * _workflow;
}

@property (nonatomic, retain) WFAddToHomeScreenActivity *addToHomeScreenActivity;
@property (nonatomic, retain) UIAction *backAction;
@property (nonatomic) bool backActionTapped;
@property (nonatomic, readonly) double bottomContentInset;
@property (nonatomic, readonly) bool canExpandDrawerAsAuxiliaryViewPresenter;
@property (nonatomic, readonly) WFDatabase *database;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <WFComposeViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) WFSwiftUIActionDrawerCoordinator *drawerCoordinator;
@property (nonatomic, readonly) unsigned long long editingState;
@property (nonatomic, readonly) NSMutableArray *editingStates;
@property (nonatomic) <WFEditorDocumentMenuDelegate> *editorDocumentMenuDelegate;
@property (nonatomic, readonly) WFEditorViewController *editorViewController;
@property (nonatomic, retain) WFComposeFlowController *flowController;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) HMHome *home;
@property (nonatomic) bool isEditingNewWorkflow;
@property (nonatomic, readonly) bool isNewShortcutFlow;
@property (nonatomic) bool isRenameSessionActive;
@property (nonatomic, retain) WFMoveToFolderCoordinator *moveCoordinator;
@property (nonatomic, readonly) NSHashTable *movedDragControllers;
@property (nonatomic, readonly) unsigned long long navigationUpdateBehavior;
@property (nonatomic) bool observingSharingEnabledUserDefault;
@property (nonatomic) <WFComposeViewControllerPresenter> *presenter;
@property (nonatomic, readonly) UIView *separatorView;
@property (nonatomic, readonly) UIButton *settingsButton;
@property (nonatomic, readonly) WFWorkflowSettingsViewController *settingsViewController;
@property (nonatomic) bool shouldShowShareButton;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIButton *titleAccessorySettingsButton;
@property (nonatomic, retain) UILabel *titleViewLabel;
@property (nonatomic, retain) UIButton *titleViewSettingsButton;
@property (nonatomic, retain) WFRunWorkflowToolbar *toolbar;
@property (nonatomic, readonly) NSUndoManager *undoManager;
@property (nonatomic, retain) WFComposeUserActivityManager *userActivityManager;
@property (nonatomic, readonly) WFWorkflow *workflow;

+ (bool)canShowInputAction;

- (void).cxx_destruct;
- (bool)accessibilityPerformEscape;
- (bool)accessibilityPerformMagicTap;
- (double)actionCanvasWidthForSwiftUIActionDrawerCoordinator:(id)arg1;
- (void)actionsDidChangeInEditorViewController:(id)arg1;
- (id)activityControllerWithFileActivity:(id)arg1 sender:(id)arg2;
- (void)addAskForInputActionFromKeyPress;
- (void)addChooseFromMenuActionFromKeyPress;
- (void)addCommentActionFromKeyPress;
- (void)addConditionalActionFromKeyPress;
- (void)addRepeatCountActionFromKeyPress;
- (void)addRepeatEachActionFromKeyPress;
- (void)addSetVariableActionFromKeyPress;
- (void)addShowResultActionFromKeyPress;
- (id)addToHomeScreenActivity;
- (void)adjustLargeTitleSize;
- (void)appDidResume;
- (void)appendAction:(id)arg1;
- (void)appendActionWithIdentifier:(id)arg1;
- (id)backAction;
- (bool)backActionTapped;
- (void)beginEditing;
- (double)bottomContentInset;
- (bool)canBecomeFirstResponder;
- (bool)canExpandDrawerAsAuxiliaryViewPresenter;
- (id)cancelBarButtonItem;
- (void)collapseDrawerAsAuxiliaryViewPresenter;
- (void)composeFlowControllerDidFinishEditing:(id)arg1;
- (id)database;
- (void)dealloc;
- (id)delegate;
- (void)didTapCancel:(id)arg1;
- (void)didTapDone;
- (void)didTapDone:(id)arg1;
- (void)didTapNext;
- (void)dismissForTutorial:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)dismissingScrollViewForDrawerController:(id)arg1;
- (bool)displaysInlineRenameInHeader;
- (id)doneBarButtonItem;
- (id)drawerController;
- (void)drawerController:(id)arg1 didTransitionToVisibility:(unsigned long long)arg2;
- (void)drawerController:(id)arg1 willTransitionToVisibility:(unsigned long long)arg2;
- (id)drawerCoordinator;
- (id)drawerHostingViewController;
- (id)drawerViewController;
- (unsigned long long)editingState;
- (id)editingStates;
- (id)editorDocumentMenuDelegate;
- (id)editorViewController;
- (void)editorViewController:(id)arg1 didChangeRunningState:(bool)arg2 fractionCompleted:(double)arg3 isWaiting:(bool)arg4;
- (void)editorViewController:(id)arg1 didChangeVariablePickingState:(bool)arg2;
- (void)editorViewControllerDidFinishRunning:(id)arg1 cancelled:(bool)arg2;
- (id)emptyStateString;
- (void)expandDrawer;
- (void)expandDrawerAsAuxiliaryViewPresenter;
- (id)findViewInNavigationBarWithName:(id)arg1;
- (id)findViewInView:(id)arg1 withName:(id)arg2;
- (void)finishEditing;
- (void)finishEditingAndDismissForTutorial:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)flowController;
- (id)home;
- (void)homeScreenActivityDidFinish:(id)arg1 success:(bool)arg2;
- (void)iconEditorWillDisappear:(id)arg1;
- (id)initWithWorkflow:(id)arg1 database:(id)arg2;
- (id)initWithWorkflow:(id)arg1 database:(id)arg2 home:(id)arg3 shouldShowShareButton:(bool)arg4;
- (void)inspectorPaneSegmentedControl:(id)arg1 didSelectPane:(long long)arg2;
- (bool)isEditingNewWorkflow;
- (bool)isNewShortcutFlow;
- (bool)isRenameSessionActive;
- (id)keyCommands;
- (void)layoutDocumentMenuControl;
- (void)layoutTitleView;
- (void)loadView;
- (id)moveCoordinator;
- (id)movedDragControllers;
- (void)navigationItem:(id)arg1 didEndRenamingWithTitle:(id)arg2;
- (id)navigationItem:(id)arg1 willBeginRenamingWithSuggestedTitle:(id)arg2 selectedRange:(inout struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (unsigned long long)navigationUpdateBehavior;
- (bool)needsAdditionalSpaceInNavBar;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)observingSharingEnabledUserDefault;
- (id)placeholderName;
- (void)popEditingState:(unsigned long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (long long)positionForBar:(id)arg1;
- (void)presentAddToHomeScreenWithSource:(id)arg1;
- (void)presentDrawerViewControllerAsAuxiliaryViewPresenter:(id)arg1 inPopover:(bool)arg2 sourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)presentIconPickerWithSourceItem:(id)arg1;
- (void)presentSettingsViewController;
- (void)presentShortcutDetailsAsAuxiliaryViewPresenter;
- (void)presentationControllerDidDismiss:(id)arg1;
- (id)presenter;
- (void)pushEditingState:(unsigned long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)redoLastWorkflowEdit;
- (void)renameWorkflow;
- (void)resetToolbar;
- (void)runToolbarPlayTapped:(id)arg1;
- (void)runToolbarRedoTapped:(id)arg1;
- (void)runToolbarSettingsTapped:(id)arg1;
- (void)runToolbarShareTapped:(id)arg1 sender:(id)arg2;
- (void)runToolbarStopTapped:(id)arg1;
- (void)runToolbarUndoTapped:(id)arg1;
- (void)runWorkflowFromKeyPress;
- (void)searchActions;
- (id)separatorView;
- (void)setAddToHomeScreenActivity:(id)arg1;
- (void)setBackAction:(id)arg1;
- (void)setBackActionTapped:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDocumentMenuControlWithTitle:(id)arg1 navigationItem:(id)arg2;
- (void)setEditingState:(unsigned long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)setEditorDocumentMenuDelegate:(id)arg1;
- (void)setFlowController:(id)arg1;
- (void)setHome:(id)arg1;
- (void)setIsEditingNewWorkflow:(bool)arg1;
- (void)setIsRenameSessionActive:(bool)arg1;
- (void)setMoveCoordinator:(id)arg1;
- (void)setObservingSharingEnabledUserDefault:(bool)arg1;
- (void)setPresenter:(id)arg1;
- (void)setShouldShowShareButton:(bool)arg1;
- (void)setTitleAccessorySettingsButton:(id)arg1;
- (void)setTitleViewLabel:(id)arg1;
- (void)setTitleViewSettingsButton:(id)arg1;
- (void)setToolbar:(id)arg1;
- (void)setUpToolbar;
- (void)setUserActivityManager:(id)arg1;
- (id)settingsButton;
- (id)settingsButtonWithConfiguration:(id)arg1;
- (id)settingsViewController;
- (bool)settingsViewControllerWantsToKnowIfNewShortcutFlow:(id)arg1;
- (void)settingsViewControllerWantsWorkflowReload:(id)arg1;
- (void)setupDrawerIfNeeded;
- (void)shareWorkflowWithSender:(id)arg1;
- (bool)shouldShowShareButton;
- (bool)shouldUseOverlaidDrawer;
- (bool)showsDetailsButton;
- (struct CGSize { double x1; double x2; })sizeForChildContentContainer:(id)arg1 withParentContainerSize:(struct CGSize { double x1; double x2; })arg2;
- (void)stopWorkflow;
- (void)swiftUIActionDrawerCoordinator:(id)arg1 didAppendAction:(id)arg2;
- (id)titleAccessorySettingsButton;
- (id)titleViewLabel;
- (id)titleViewSettingsButton;
- (id)toolbar;
- (void)traitCollectionDidChange:(id)arg1;
- (Class)triggerInputType;
- (void)undoLastWorkflowEdit;
- (id)undoManager;
- (void)updateBackActionForDocumentMenu;
- (void)updateBottomContentInsetForVisibility:(unsigned long long)arg1;
- (void)updateDocumentMenuWithTitle:(id)arg1 navigationItem:(id)arg2;
- (void)updateDrawerVisibility;
- (void)updateEditingStateAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)updateNavigationBarStateAnimated:(bool)arg1;
- (void)updateShareButtonVisibility;
- (void)updateTitleItemIfNeeded;
- (void)updateTitleView:(id)arg1;
- (void)updateToolbarVisibility;
- (void)updateUserActivityState:(id)arg1;
- (id)userActivityManager;
- (bool)usesDocumentMenu;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewSafeAreaInsetsDidChange;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (unsigned long long)visibleToolbarPlacement;
- (id)workflow;
- (bool)workflowHasContent;
- (id)workflowView;

@end
