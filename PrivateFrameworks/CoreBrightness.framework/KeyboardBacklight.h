
@interface KeyboardBacklight : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol> {
    unsigned long long  _activityNotificationHandle;
    NSMutableArray * _alsServiceClients;
    float  _ambientHighThreshold;
    float  _ambientLowThreshold;
    float  _ambientOffset;
    float  _ambientSlope;
    bool  _autoAdjust;
    int  _backlightUpdateFrequency;
    bool  _backlightUpdateInProgress;
    NSLock * _backlightUpdateLock;
    NSObject<OS_dispatch_source> * _backlightUpdateTimer;
    unsigned long long  _backlightUpdateType;
    bool  _builtIn;
    struct mach_timebase_info { 
        unsigned int numer; 
        unsigned int denom; 
    }  _clockInfo;
    int  _color;
    float  _currentLux;
    HIDDevice * _device;
    unsigned int  _deviceManagementArrivalIterator;
    struct IONotificationPort { } * _deviceManagementArrivalNotificationPort;
    int  _dimTime;
    bool  _dimmed;
    bool  _displayOn;
    NSMutableArray * _elements;
    HIDElement * _enableAuthenticationElement;
    HIDElement * _enableElement;
    HIDElement * _enableFadeSpeedElement;
    bool  _forceDelayToTurnOnBacklight;
    NSObject<OS_dispatch_source> * _forceLuxUpdateTimer;
    bool  _keyboardAvailable;
    unsigned long long  _keyboardID;
    NSMutableDictionary * _keyboardSpecificPreferences;
    unsigned long long  _lastBacklightUpdate;
    HIDElement * _levelElement;
    HIDElement * _levelFadeSpeedElement;
    float  _levelMax;
    float  _levelMin;
    float  _levelOff;
    float  _levelPercentage;
    unsigned int  _levelUnit;
    bool  _manualAdjust;
    bool  _muted;
    int  _numOfBacklightUpdateRetries;
    float  _previousLevel;
    float  _previousLevelPercentage;
    NSMutableDictionary * _properties;
    struct Ramp { 
        float start; 
        float target; 
        float current; 
        double startTime; 
        double duration; 
    }  _ramp;
    NSObject<OS_dispatch_source> * _rampTimer;
    bool  _saturated;
    bool  _suspend;
    bool  _suspendDimming;
    int  _turnOnBacklightDelayMS;
    unsigned int  _unitExponent;
    bool  _userActive;
}

@property (readonly) float ambientHighThreshold;
@property (readonly) float ambientLowThreshold;
@property float ambientOffset;
@property (readonly) float ambientSlope;
@property bool autoAdjust;
@property float brightness;
@property bool builtIn;
@property int color;
@property float currentLux;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property HIDDevice *device;
@property int dimTime;
@property bool dimmed;
@property (readonly) unsigned long long hash;
@property bool keyboardAvailable;
@property unsigned long long keyboardID;
@property (retain) NSMutableDictionary *keyboardSpecificPreferences;
@property float levelMax;
@property float levelMin;
@property float levelOff;
@property float levelPercentage;
@property unsigned int levelUnit;
@property bool manualAdjust;
@property (readonly) float maxUserLevel;
@property bool muted;
@property float previousLevel;
@property bool saturated;
@property (readonly) Class superclass;
@property (readonly) bool supportsAuthentication;
@property (readonly) bool suppressed;
@property bool suspend;
@property unsigned int unitExponent;
@property bool userActive;

+ (unsigned long long)getHashIDForDevice:(id)arg1;

- (bool)KBAuthenticationHandler:(id)arg1;
- (bool)KBAutoBrightnessEnablePropertyHandler:(id)arg1;
- (bool)KBAutoBrightnessSuspendPropertyHandler:(id)arg1;
- (bool)KBAvailabilityUpdateHandler:(id)arg1;
- (bool)KBBacklightLevelPropertyHandler:(id)arg1;
- (bool)KBBrightnessPropertyHandler:(id)arg1;
- (bool)KBDisplayBrightnessFactorPropertyHandler:(id)arg1;
- (bool)KBIdleDimPropertyHandler:(id)arg1;
- (bool)KBIdleDimTimeHandler:(id)arg1;
- (bool)KBSuspendDimmingPropertyHandler:(id)arg1;
- (bool)KBUpdateFrequencyHandler:(id)arg1;
- (bool)KBUserActivityUpdateHandler:(id)arg1;
- (bool)KBUserOffsetPropertyHandler:(id)arg1;
- (bool)addHIDServiceClient:(struct __IOHIDServiceClient { }*)arg1;
- (float)ambientHighThreshold;
- (float)ambientLowThreshold;
- (float)ambientOffset;
- (float)ambientSlope;
- (bool)autoAdjust;
- (float)brightness;
- (id)brightnessUpdateReasonToString:(unsigned long long)arg1;
- (bool)builtIn;
- (void)calculateLevelPercentageAtAmbient:(float)arg1;
- (int)color;
- (id)copyPropertyForKey:(id)arg1;
- (id)copyPropertyForKey:(id)arg1 withParameter:(id)arg2;
- (float)currentLux;
- (float)currentLuxToAmbient;
- (void)dealloc;
- (id)description;
- (id)device;
- (void)didUpdateBacklightLevel:(float)arg1 brightness:(float)arg2 result:(bool)arg3 error:(id)arg4;
- (int)dimTime;
- (bool)dimmed;
- (void)endKeyDim;
- (void)forceBacklightUpdateRoutine;
- (void)forceLuxUpdate;
- (void)forceLuxUpdateRoutine;
- (void)getCurrentLux;
- (void)getKeyboardBacklightPreferences;
- (void)handleDeviceManagementArrival:(unsigned int)arg1;
- (bool)handleHIDEvent:(struct __IOHIDEvent { }*)arg1 from:(struct __IOHIDServiceClient { }*)arg2;
- (void)handleLuxUpdate:(float)arg1;
- (void)handleNotificationForKey:(id)arg1 withProperty:(id)arg2;
- (void)handlePMUserActivityStateChanged:(unsigned long long)arg1;
- (id)initWithQueue:(id)arg1;
- (id)initWithQueue:(id)arg1 device:(id)arg2;
- (id)initWithQueue:(id)arg1 device:(id)arg2 ambientOffset:(float)arg3;
- (bool)keyboardAvailable;
- (unsigned long long)keyboardID;
- (id)keyboardSpecificPreferences;
- (float)level;
- (float)levelMax;
- (float)levelMin;
- (float)levelOff;
- (float)levelPercentage;
- (unsigned int)levelUnit;
- (bool)manualAdjust;
- (float)maxUserLevel;
- (bool)muted;
- (float)previousLevel;
- (void)rampToBrightness:(float)arg1 withDuration:(unsigned int)arg2;
- (bool)removeHIDServiceClient:(struct __IOHIDServiceClient { }*)arg1;
- (void)resetKeyDimTimeout;
- (bool)retrieveKeyboardBacklightElements;
- (bool)saturated;
- (void)scheduleBacklightUpdate:(int)arg1;
- (void)sendNotificationForKey:(id)arg1 withValue:(id)arg2;
- (void)sendSuppressedNotification:(bool)arg1;
- (void)setAmbientOffset:(float)arg1;
- (void)setAutoAdjust:(bool)arg1;
- (void)setBacklightLevel:(float)arg1;
- (void)setBrightness:(float)arg1;
- (void)setBrightness:(float)arg1 withFadeSpeed:(int)arg2 commit:(bool)arg3;
- (void)setBuiltIn:(bool)arg1;
- (void)setColor:(int)arg1;
- (void)setCurrentLux:(float)arg1;
- (void)setDevice:(id)arg1;
- (void)setDimTime:(int)arg1;
- (void)setDimmed:(bool)arg1;
- (void)setKBPreferenceBacklightMaxUser;
- (void)setKeyboardAvailable:(bool)arg1;
- (void)setKeyboardID:(unsigned long long)arg1;
- (void)setKeyboardSpecificPreferences:(id)arg1;
- (void)setLevelMax:(float)arg1;
- (void)setLevelMin:(float)arg1;
- (void)setLevelOff:(float)arg1;
- (void)setLevelPercentage:(float)arg1;
- (void)setLevelUnit:(unsigned int)arg1;
- (void)setManualAdjust:(bool)arg1;
- (void)setMuted:(bool)arg1;
- (void)setPreviousLevel:(float)arg1;
- (bool)setProperty:(id)arg1 forKey:(id)arg2;
- (void)setSaturated:(bool)arg1;
- (void)setSuspend:(bool)arg1;
- (void)setUnitExponent:(unsigned int)arg1;
- (void)setUserActive:(bool)arg1;
- (void)start;
- (void)startKBDeviceManagementServiceLookup;
- (void)startRamp;
- (void)stop;
- (void)stopKBDeviceManagementServiceLookup;
- (void)stopRamp;
- (void)storeKeyboardBacklightPreferences;
- (bool)supportsAuthentication;
- (bool)suppressed;
- (bool)suspend;
- (double)timeToNextBacklightUpdate;
- (void)timerRoutine:(id)arg1;
- (void)toggleMute;
- (unsigned int)unitExponent;
- (void)updateAmbientOffset;
- (void)updateAuthentication:(bool)arg1;
- (void)updateBacklightDevice;
- (void)updateBacklightDeviceWithFadeSpeed:(int)arg1 commit:(bool)arg2 reason:(unsigned long long)arg3;
- (void)updateBacklightDeviceWithReason:(unsigned long long)arg1;
- (bool)userActive;

@end
