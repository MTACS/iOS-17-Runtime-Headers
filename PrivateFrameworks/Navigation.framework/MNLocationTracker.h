
@interface MNLocationTracker : NSObject <MNNavigationSessionObserver, MNNavigationSessionStateListener> {
    MNArrivalInfo * _arrivalInfo;
    GEOApplicationAuditToken * _auditToken;
    bool  _hasVisitedFirstStop;
    MNLocation * _lastMatchedLocation;
    bool  _localizeRoadNames;
    MNNavigationSession * _navigationSession;
    MNNavigationSessionState * _navigationSessionState;
    MNObserverHashTable * _safeDelegate;
    int  _state;
    unsigned long long  _targetLegIndex;
}

@property (nonatomic, readonly) MNArrivalInfo *arrivalInfo;
@property (getter=_auditToken, setter=_setAuditToken:, nonatomic, retain) GEOApplicationAuditToken *auditToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasArrived;
@property (nonatomic, readonly) bool hasArrivedAtFinalDestination;
@property (nonatomic, readonly) bool hasVisitedFirstStop;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isRerouting;
@property (nonatomic, readonly) MNLocation *lastMatchedLocation;
@property (nonatomic, readonly) MNNavigationSession *navigationSession;
@property (nonatomic, copy) MNNavigationSessionState *navigationSessionState;
@property (nonatomic, readonly) MNObserverHashTable *safeDelegate;
@property (nonatomic, readonly) bool shouldProjectAlongRoute;
@property (setter=_setState:, nonatomic) int state;
@property (readonly) Class superclass;
@property (setter=_setTargetLegIndex:, nonatomic) unsigned long long targetLegIndex;
@property (nonatomic, readonly) int transportType;

- (void).cxx_destruct;
- (id)_auditToken;
- (void)_defaultsDidChange;
- (id)_matchedLocationForLocation:(id)arg1;
- (void)_roadFeaturesForFeature:(id)arg1 outRoadName:(out id*)arg2 outShieldText:(out id*)arg3 outShieldType:(out long long*)arg4;
- (void)_setAuditToken:(id)arg1;
- (void)_setIsNavigatingInLowGuidance:(bool)arg1;
- (void)_setState:(int)arg1;
- (void)_setTargetLegIndex:(unsigned long long)arg1;
- (void)_updateArrivalInfo:(id)arg1;
- (void)_updateMatchedLocation:(id)arg1;
- (void)_updateShouldLocalizeRoadNames;
- (void)advanceToNextLeg;
- (id)arrivalInfo;
- (void)changeOfflineState:(unsigned long long)arg1;
- (void)changeOfflineState:(unsigned long long)arg1 waypoints:(id)arg2;
- (void)changeTransportType:(int)arg1 route:(id)arg2;
- (void)dealloc;
- (void)enterRegionWithId:(id)arg1;
- (void)exitRegionWithId:(id)arg1;
- (void)forceOnRoute:(id)arg1 atLocation:(id)arg2;
- (void)forceRerouteWithReason:(unsigned long long)arg1;
- (bool)hasArrived;
- (bool)hasArrivedAtFinalDestination;
- (bool)hasVisitedFirstStop;
- (id)init;
- (id)initWithNavigationSession:(id)arg1;
- (void)insertWaypoint:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)isRerouting;
- (id)lastMatchedLocation;
- (id)matchedLocationForLocation:(id)arg1;
- (void)monitoringDidFailForRegionWithId:(id)arg1 withError:(id)arg2;
- (id)navigationSession;
- (id)navigationSessionState;
- (void)pause;
- (bool)paused;
- (void)removeWaypointAtIndex:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)reroute:(id)arg1 reason:(unsigned long long)arg2;
- (void)rerouteWithWaypoints:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)resetForTracePlayerAtLocation:(id)arg1;
- (void)resume;
- (id)safeDelegate;
- (void)setDelegate:(id)arg1;
- (void)setNavigationSessionState:(id)arg1;
- (bool)shouldAllowPause;
- (bool)shouldProjectAlongRoute;
- (void)startTrackingWithInitialLocation:(id)arg1 targetLegIndex:(unsigned long long)arg2;
- (int)state;
- (void)stopTracking;
- (unsigned long long)targetLegIndex;
- (void)traceForcedActiveTransportTypeChange:(int)arg1;
- (void)traceForcedRerouteWithResponse:(id)arg1 request:(id)arg2;
- (void)traceJumpedInTime;
- (void)tracePaused;
- (int)transportType;
- (void)updateDestination:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)updateForETAUResponse:(id)arg1;
- (void)updateLocation:(id)arg1;
- (void)updateRequestForETAUpdate:(id)arg1;
- (void)updateVehicleHeading:(double)arg1 timestamp:(id)arg2;
- (void)updateVehicleSpeed:(double)arg1 timestamp:(id)arg2;

@end
