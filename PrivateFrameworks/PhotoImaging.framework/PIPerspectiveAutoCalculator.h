
@interface PIPerspectiveAutoCalculator : NUAutoCalculator <NUTimeBased, PIFaceObservingAutoCalculator> {
    double  _angleSeedDegreesCCW;
    NSMutableDictionary * _debugDiagnostics;
    bool  _debugFilesEnabled;
    NSString * _debugFilesPrefix;
    CIImage * _debugLineDetectionImage;
    bool  _disableOnFrontFacingCameraImages;
    bool  _disableOnPanos;
    PIFaceObservationCache * _faceObservationCache;
    NSNumber * _maxAutoAngle;
    NSNumber * _maxAutoPitch;
    NSNumber * _maxAutoYaw;
    double  _maxFaceSize;
    double  _minimumAngleCorrection;
    double  _minimumConfidence;
    double  _minimumPitchCorrection;
    double  _minimumPitchCorrectionArea;
    double  _minimumYawCorrection;
    double  _minimumYawCorrectionArea;
    bool  _shouldRunBuildingCheck;
}

@property double angleSeedDegreesCCW;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) NSMutableDictionary *debugDiagnostics;
@property bool debugFilesEnabled;
@property (copy) NSString *debugFilesPrefix;
@property (nonatomic, retain) CIImage *debugLineDetectionImage;
@property (readonly, copy) NSString *description;
@property bool disableOnFrontFacingCameraImages;
@property bool disableOnPanos;
@property (nonatomic, retain) PIFaceObservationCache *faceObservationCache;
@property (readonly) unsigned long long hash;
@property (copy) NSNumber *maxAutoAngle;
@property (copy) NSNumber *maxAutoPitch;
@property (copy) NSNumber *maxAutoYaw;
@property double maxFaceSize;
@property double minimumAngleCorrection;
@property double minimumConfidence;
@property double minimumPitchCorrection;
@property double minimumPitchCorrectionArea;
@property double minimumYawCorrection;
@property double minimumYawCorrectionArea;
@property bool shouldRunBuildingCheck;
@property (readonly) Class superclass;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } time;

+ (void)requestVisionCleanUp;
+ (void)undoOrientation:(long long)arg1 forPitch:(double*)arg2 yaw:(double*)arg3 angle:(double*)arg4;

- (void).cxx_destruct;
- (void)addMethodDiagnostics:(id)arg1 details:(id)arg2;
- (void)addMethodResultToDiagnostics:(id)arg1 error:(id)arg2 setYawPitchError:(bool)arg3;
- (double)angleSeedDegreesCCW;
- (bool)canGenerateNewCropRect:(out id*)arg1;
- (id)debugDiagnostics;
- (bool)debugFilesEnabled;
- (id)debugFilesPrefix;
- (id)debugLineDetectionImage;
- (bool)disableOnFrontFacingCameraImages;
- (bool)disableOnPanos;
- (id)faceObservationCache;
- (float)getSizeOfAllFaces:(id)arg1;
- (bool)hasFrontFacingCameraDimentions:(struct { long long x1; long long x2; })arg1;
- (id)initWithComposition:(id)arg1;
- (bool)isFrontFacingCameraImage:(id)arg1 pixelSize:(struct { long long x1; long long x2; })arg2;
- (id)maxAutoAngle;
- (id)maxAutoPitch;
- (id)maxAutoYaw;
- (double)maxFaceSize;
- (double)minimumAngleCorrection;
- (double)minimumConfidence;
- (double)minimumPitchCorrection;
- (double)minimumPitchCorrectionArea;
- (double)minimumYawCorrection;
- (double)minimumYawCorrectionArea;
- (bool)passesBuildingCheck:(out id*)arg1;
- (bool)passesConfidenceCheck:(id)arg1 error:(out id*)arg2;
- (bool)passesFaceCheck:(out id*)arg1;
- (bool)passesImagePropertiesCheck:(out id*)arg1;
- (bool)passesMinimumCorrectionCheck:(id)arg1 error:(out id*)arg2;
- (id)perspectiveErrorFromCoreImage:(id)arg1;
- (id)primaryImageProperties:(out id*)arg1;
- (void)setAngleSeedDegreesCCW:(double)arg1;
- (void)setDebugFilesEnabled:(bool)arg1;
- (void)setDebugFilesPrefix:(id)arg1;
- (void)setDebugLineDetectionImage:(id)arg1;
- (void)setDisableOnFrontFacingCameraImages:(bool)arg1;
- (void)setDisableOnPanos:(bool)arg1;
- (void)setFaceObservationCache:(id)arg1;
- (void)setMaxAutoAngle:(id)arg1;
- (void)setMaxAutoPitch:(id)arg1;
- (void)setMaxAutoYaw:(id)arg1;
- (void)setMaxFaceSize:(double)arg1;
- (void)setMinimumAngleCorrection:(double)arg1;
- (void)setMinimumConfidence:(double)arg1;
- (void)setMinimumPitchCorrection:(double)arg1;
- (void)setMinimumPitchCorrectionArea:(double)arg1;
- (void)setMinimumYawCorrection:(double)arg1;
- (void)setMinimumYawCorrectionArea:(double)arg1;
- (void)setShouldRunBuildingCheck:(bool)arg1;
- (bool)shouldRunBuildingCheck;
- (void)submit:(id /* block */)arg1;
- (void)submitVerified:(id /* block */)arg1;
- (id)wrapAsUnexpectedError:(id)arg1;
- (void)writeDebugDiagnosticsToDisk;

@end
