
@interface BrowserRootViewController : UIViewController <BannerControllerDelegate, CapsuleNavigationBarViewControllerDelegate, SFCapsuleCollectionViewGestureObserving, SFOrderedContainerViewDelegate, SFScreenTimeOverlayHostingViewController, SFTipsObserver, SidebarContentDimmingViewDelegate, SidebarUIProxy, TabBarDropExpansionViewDelegate, TabDocumentViewGeometryProviding, TabOverviewThemeProviding, UIGestureRecognizerDelegate, UISheetPresentationControllerDelegate, UIViewControllerStatusBarPartStyleProvider> {
    UIApplication * _app;
    SFBannerTheme * _bannerTheme;
    bool  _barStateAllowsHidingHomeIndicator;
    BookmarksBarView * _bookmarksBar;
    double  _bottomBarKeyboardOffset;
    BrowserToolbar * _bottomToolbar;
    BrowserController * _browserController;
    bool  _canBecomeFirstResponder;
    CapsuleNavigationBarViewController * _capsuleViewController;
    CatalogViewController * _catalogViewController;
    UIView * _clipperView;
    _SFBrowserConfiguration * _configuration;
    ViewWithCustomNextResponder * _contentContainerView;
    UIViewController * _contentContainerViewController;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsetForContentFrame;
    SFToastViewController * _currentlyPresentedToastViewController;
    <BrowserRootViewControllerDelegate> * _delegate;
    SFOrderedContainerView * _documentAndTopBarsContainerView;
    UIViewController * _documentAndTopBarsContainerViewController;
    bool  _documentSafeAreaInsetsFrozen;
    _SFDynamicBarAnimator * _dynamicBarAnimator;
    UIButton * _floatingSidebarButton;
    UIPanGestureRecognizer * _hideNavigationBarGestureRecognizer;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _horizontalScrollIndicatorBaseInsets;
    id /* block */  _intentInteractionCompletion;
    bool  _isPerformingSizeTransition;
    bool  _isTransitioningTabViews;
    bool  _keepBarsMinimized;
    SFLockedPrivateBrowsingView * _lockedPrivateBrowsingView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _maximumObscuredInsets;
    NavigationBar * _navigationBar;
    bool  _needsScrollToTopView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _obscuredInsets;
    UINavigationController * _privateBrowsingExplanationSheet;
    bool  _pullToRefreshIsEnabled;
    SFScreenTimeOverlayViewController * _screenTimeOverlayViewController;
    ScrollToTopView * _scrollToTopView;
    UIScrollView * _scrollView;
    UITapGestureRecognizer * _showBarsFromBottomBarRecognizer;
    bool  _showingSidebar;
    bool  _showingTabBar;
    UIButton * _sidebarButtonEmbeddedInSidebar;
    UIView * _sidebarButtonEmbeddedInUnifiedBar;
    UIBarButtonItem * _sidebarButtonItem;
    SidebarContentDimmingView * _sidebarContentDimmingView;
    unsigned long long  _sidebarControllerActiveAnimationCount;
    long long  _sidebarStyle;
    UIButton * _sidebarTrailingButton;
    UIBarButtonItem * _sidebarTrailingButtonItem;
    <SidebarUIProxyDelegate> * _sidebarUIProxyDelegate;
    SidebarViewController * _sidebarViewController;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeForToolbarPlacement;
    unsigned long long  _sizeTransitionCount;
    WBSDiagnosticStateCollector * _stateCollector;
    SFThemeColorEffectView * _statusBarBackdrop;
    UIHoverGestureRecognizer * _statusBarHoverGestureRecognizer;
    bool  _statusBarStyleUpdateQueued;
    SFWebpageStatusBarView * _statusBarView;
    TabBar * _tabBar;
    UIView * _tabBarClipperView;
    TabBarDropExpansionView * _tabBarDropExpansionView;
    TabBarManager * _tabBarManager;
    TabHoverPreview * _tabHoverPreview;
    <TabThumbnailCollectionView> * _tabThumbnailCollectionView;
    SFTipsCoordinator * _tipsCoordinator;
    bool  _togglingTabBar;
    long long  _toolbarPlacement;
    BarContainerView * _topAuxiliaryBarsContainerView;
    SFThemeColorEffectView * _topBackdrop;
    SFUnifiedBarTheme * _topBackdropTheme;
    bool  _topBackdropUsesPlainTheme;
    UIView * _topSeparator;
    SFTouchDownGestureRecognizer * _touchDownGestureRecognizer;
    UnifiedBar * _unifiedBar;
    bool  _updatingTopBarStyles;
    bool  _usesFaintTopSeparator;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _verticalScrollIndicatorBaseInsets;
    UIViewController * _webSearchTipViewController;
    _SFWebView * _webView;
    bool  _willDismissCatalogViewController;
}

@property (nonatomic, readonly) SFBannerTheme *bannerTheme;
@property (nonatomic) bool barStateAllowsHidingHomeIndicator;
@property (nonatomic, readonly) NSArray *bars;
@property (nonatomic, retain) BookmarksBarView *bookmarksBar;
@property (nonatomic, readonly) long long bookmarksPresentationStyle;
@property (nonatomic, readonly) BrowserToolbar *bottomToolbar;
@property (nonatomic, readonly) BrowserController *browserController;
@property (nonatomic, readonly) NSNumber *capsuleCollectionViewLayout;
@property (nonatomic, readonly) CapsuleNavigationBarViewController *capsuleViewController;
@property (nonatomic, retain) CatalogViewController *catalogViewController;
@property (nonatomic) UIView *clipperView;
@property (nonatomic, retain) _SFBrowserConfiguration *configuration;
@property (nonatomic, readonly) ViewWithCustomNextResponder *contentContainerView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrameInPageView;
@property (nonatomic, readonly) <SFBarAnimating> *currentBarAnimator;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <BrowserRootViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIView *documentAndTopBarsContainerView;
@property (nonatomic) bool documentSafeAreaInsetsFrozen;
@property (nonatomic, readonly) _SFDynamicBarAnimator *dynamicBarAnimator;
@property (nonatomic, readonly) UIButton *floatingSidebarButton;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double horizontalMarginForCatalogViewInPopover;
@property (nonatomic, readonly) UIViewController *hostViewControllerForOverlay;
@property (nonatomic, readonly) bool insetsContentContainerFromStatusBar;
@property (nonatomic, copy) id /* block */ intentInteractionCompletion;
@property (getter=isInteractivelyMinimizingBars, nonatomic, readonly) bool interactivelyMinimizingBars;
@property (nonatomic, readonly) bool isPerformingSizeTransition;
@property (nonatomic) bool keepBarsMinimized;
@property (nonatomic, readonly) UIBarButtonItem *leadingSidebarButtonItem;
@property (nonatomic, readonly) SFLockedPrivateBrowsingView *lockedPrivateBrowsingView;
@property (nonatomic, readonly) double maximumHeightObscuredByBottomToolbar;
@property (nonatomic, readonly) NavigationBar *navigationBar;
@property (nonatomic, readonly) double navigationBarDesiredHeight;
@property (nonatomic, readonly) double navigationBarSquishedHeight;
@property (nonatomic) bool needsScrollToTopView;
@property (nonatomic, readonly) double offsetForDynamicBarAnimator;
@property (nonatomic, readonly) long long preferredCenterStatusBarStyle;
@property (nonatomic, readonly) long long preferredLeadingStatusBarStyle;
@property (nonatomic, readonly) long long preferredTrailingStatusBarStyle;
@property (nonatomic, readonly) UIView<_SFBarCommon> *primaryBar;
@property (nonatomic, readonly) UIView<_SFNavigationBarCommon> *primaryNavigationBar;
@property (nonatomic) bool pullToRefreshIsEnabled;
@property (nonatomic, readonly) UIRefreshControl *refreshControl;
@property (nonatomic, retain) SFScreenTimeOverlayViewController *screenTimeOverlayViewController;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (getter=isShowingLockedPrivateBrowsingView, nonatomic, readonly) bool showingLockedPrivateBrowsingView;
@property (getter=isShowingPrivateBrowsingExplanationSheet, nonatomic, readonly) bool showingPrivateBrowsingExplanationSheet;
@property (getter=isShowingSidebar, nonatomic, readonly) bool showingSidebar;
@property (getter=isShowingTabBar, nonatomic) bool showingTabBar;
@property (nonatomic, readonly) UIButton *sidebarButtonEmbeddedInSidebar;
@property (nonatomic, readonly) UIBarButtonItem *sidebarButtonItem;
@property (nonatomic, readonly) SidebarContentDimmingView *sidebarContentDimmingView;
@property (nonatomic, readonly) long long sidebarStyle;
@property (nonatomic, readonly) UIBarButtonItem *sidebarTrailingButtonItem;
@property (nonatomic) <SidebarUIProxyDelegate> *sidebarUIProxyDelegate;
@property (nonatomic, readonly) SidebarViewController *sidebarViewController;
@property (nonatomic, readonly) SFWebpageStatusBarView *statusBarView;
@property (readonly) Class superclass;
@property (nonatomic, retain) TabBar *tabBar;
@property (nonatomic, readonly) UIView *tabBarClipperView;
@property (nonatomic, readonly) TabBarManager *tabBarManager;
@property (nonatomic, readonly) TabHoverPreview *tabHoverPreview;
@property (nonatomic) <TabThumbnailCollectionView> *tabThumbnailCollectionView;
@property (nonatomic, readonly) SFTipsCoordinator *tipsCoordinator;
@property (getter=isTogglingTabBar, nonatomic) bool togglingTabBar;
@property (nonatomic, readonly) long long toolbarPlacement;
@property (nonatomic, readonly) SFThemeColorEffectView *topBackdrop;
@property (nonatomic, readonly) UIView<_SFNavigationBarCommon> *topBar;
@property (nonatomic, readonly) UIBarButtonItem *trailingSidebarButtonItem;
@property (nonatomic, readonly) UnifiedBar *unifiedBar;
@property (nonatomic, readonly) UnifiedField *unifiedField;
@property (nonatomic) bool usesFaintTopSeparator;
@property (getter=isUsingBottomCapsule, nonatomic, readonly) bool usingBottomCapsule;
@property (nonatomic, readonly) bool usingLoweredBar;
@property (nonatomic, readonly) bool usingUnifiedBar;
@property (nonatomic, retain) _SFWebView *webView;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } webViewEffectiveSafeAreaInsets;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } webViewMaximumUnobscuredLayoutSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } webViewMinimumLayoutSize;

+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;

- (void).cxx_destruct;
- (id)_activeTabDocumentView;
- (void)_applyStatusBarBackdropTheme;
- (void)_applyTopBackdropTheme;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_avoidanceInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_baseInsetsForHorizontalScrollIndicator;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_baseInsetsForVerticalScrollIndicator;
- (double)_bottomBarOffset;
- (void)_boundingPathMayHaveChangedForView:(id)arg1 relativeToBoundsOriginOnly:(bool)arg2;
- (id)_continuousReadingViewController;
- (struct CGPoint { double x1; double x2; })_convertDocumentCoordinateSpacePoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertDocumentCoordinateSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromViewInDocumentContainer:(id)arg2 toCoordinateSpace:(id)arg3;
- (void)_createBottomToolbarIfNeeded;
- (void)_createSidebarContentDimmingViewIfNeeded;
- (void)_destroySidebarContentDimmingViewIfNeeded;
- (void)_dismissPrivateBrowsingExplanationSheet;
- (void)_dismissWebSearchTipPopoverIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForBottomToolbarForceHidden:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForCatalogView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForContentContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForNavigationBar;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForSidebarWhenShowing:(bool)arg1;
- (void)_hideNavigationBarGestureRecognized:(id)arg1;
- (bool)_interfaceFillsScreen;
- (bool)_isShowingEmbeddedSidebar;
- (bool)_isShowingFindOnPage;
- (bool)_isTrackingDropSession;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_layOutBottomToolbar;
- (void)_layOutFloatingSidebarButtonForSidebarShowing:(bool)arg1;
- (void)_layOutScrollToTopView;
- (void)_layOutSidebar;
- (void)_layOutSidebarContentDimmingView;
- (void)_layOutTabView;
- (void)_layOutTopBackdrop;
- (void)_layOutTopBanners;
- (void)_layOutWebpageStatusBarView;
- (void)_linkTabOverviewToCapsuleView;
- (void)_logCurrentLayoutState;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_loweredBarMaximumObscuredInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_loweredBarMinimumObscuredInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_loweredBarObscuredInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_loweredBarObscuredInsetsIgnoringKeyboard;
- (id)_makeTurnOnLockedPrivateBrowsingViewController;
- (id)_makeWhatsNewInPrivateBrowsingViewController;
- (id)_multitaskingDragExclusionRects;
- (bool)_navigationBarIsExpandedOnTop;
- (id)_plainTopBackdropGroupName;
- (void)_prepareBarsForTransitionFromPreviousToolbarPlacement:(long long)arg1;
- (void)_prepareToShowSidebarViewControllerIfNeeded;
- (void)_pushTurnOnLockedPrivateBrowsingPromptIfNeeded;
- (void)_receivedTouchDown:(id)arg1;
- (void)_refreshControlFired:(id)arg1;
- (void)_registerLayoutStateUpdateHandler;
- (void)_setShowingFloatingSidebarButton:(bool)arg1;
- (void)_setToolbarPlacement:(long long)arg1;
- (void)_setTopBackdropTheme:(id)arg1 animated:(bool)arg2;
- (void)_setTopBackdropUsesPlainTheme:(bool)arg1;
- (void)_setUpFloatingSidebarButton;
- (void)_setUpRefreshControlIfNeeded;
- (void)_setUpTabGroupButton;
- (void)_setUpWebpageStatusBarIfNeeded;
- (bool)_shouldHideUnifiedBar;
- (bool)_shouldPositionBottomToolbarAboveKeyboard;
- (bool)_shouldShowSidebarContentDimmingView;
- (bool)_shouldShowThemeColorInTopBar;
- (void)_showBarsFromBottomBarTap:(id)arg1;
- (void)_showPrivateBrowsingExplanationSheetWithViewController:(id)arg1;
- (bool)_showsTopBackdrop;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sidebarDimmedContentFrameIncludingSidebarOnlyIfEmbedded:(bool)arg1;
- (void)_sidebarTrailingButtonWasTapped;
- (void)_statusBarHover:(id)arg1;
- (double)_topAuxiliaryBarsHeight;
- (double)_totalAdditionalContentHeightForBanners;
- (void)_transitionFromBanner:(id)arg1 toBanner:(id)arg2 animated:(bool)arg3;
- (void)_turnOnLockedPrivateBrowsingFromSheet;
- (void)_updateAllowsHidingHomeIndicatorMinimized:(bool)arg1;
- (void)_updateBannerTheme;
- (void)_updateBottomBarHeightAboveKeyboard;
- (void)_updateCapsuleTopSeparatorColor;
- (void)_updateRefreshControl;
- (void)_updateRefreshControlStyle;
- (void)_updateSidebarStyle;
- (void)_updateThemeForBanner:(id)arg1 animated:(bool)arg2;
- (void)_updateToolbarForToolbarPlacementAllowingRemoval:(bool)arg1;
- (void)_updateToolbarPlacementIfNeeded;
- (void)_updateTopBarAllowingRemoval:(bool)arg1;
- (void)_updateTopBarStyles;
- (void)_updateTopBarStylesAnimated:(bool)arg1;
- (bool)_usesWebpageStatusBar;
- (id)_viewForConvertingToCoordinateSpace:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_webViewMinimumEffectiveSafeAreaInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_webViewSafeAreaInsets;
- (void)addChildViewController:(id)arg1;
- (void)addToastViewController:(id)arg1;
- (void)bannerController:(id)arg1 didSetAppBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetCrashBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetPrivateBrowsingPrivacyProtectionsBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetRemotelyEnabledExtensionBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetTabGroupBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetWebExtensionBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (void)bannerController:(id)arg1 didSetWebExtensionPermissionGrantedBanner:(id)arg2 previousBanner:(id)arg3 animated:(bool)arg4;
- (id)bannerTheme;
- (bool)barStateAllowsHidingHomeIndicator;
- (id)bars;
- (bool)becomeFirstResponder;
- (id)bookmarksBar;
- (long long)bookmarksPresentationStyle;
- (id)bottomToolbar;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bottomToolbarFrameInCoordinateSpace:(id)arg1 includeKeyboard:(bool)arg2;
- (id)browserController;
- (bool)canBecomeFirstResponder;
- (void)capsuleCollectionView:(id)arg1 selectionGestureDidChangeFromAxis:(unsigned long long)arg2;
- (void)capsuleCollectionViewDidUpdateMinimizationGesture:(id)arg1;
- (id)capsuleCollectionViewLayout;
- (void)capsuleNavigationBarViewController:(id)arg1 didCreateNavigationBar:(id)arg2;
- (void)capsuleNavigationBarViewController:(id)arg1 selectedItemWillChangeToState:(long long)arg2 options:(long long)arg3 coordinator:(id)arg4;
- (bool)capsuleNavigationBarViewController:(id)arg1 shouldUnminimizeOnScrollForScrollView:(id)arg2;
- (bool)capsuleNavigationBarViewControllerAllowsMinimizationGesture:(id)arg1;
- (void)capsuleNavigationBarViewControllerDidChangeCapsuleFocus:(id)arg1 options:(long long)arg2;
- (void)capsuleNavigationBarViewControllerDidTapVoiceSearch:(id)arg1;
- (bool)capsuleNavigationBarViewControllerIsShowingFindOnPage:(id)arg1;
- (bool)capsuleNavigationBarViewControllerIsTrackingDropSession:(id)arg1;
- (void)capsuleNavigationBarViewControllerWillHideKeyboard:(id)arg1;
- (void)capsuleNavigationController:(id)arg1 obscuredInsetsDidChangeWithCoordinator:(id)arg2;
- (id)capsuleViewController;
- (id)catalogViewController;
- (id)childViewControllerForStatusBarStyle;
- (id)clipperView;
- (id)configuration;
- (id)contentContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentContainerViewFrameForBrowserSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrameInPageView;
- (id)createToolbarForCapsuleNavigationBarViewController:(id)arg1;
- (id)currentBarAnimator;
- (void)dealloc;
- (id)delegate;
- (void)didReceiveMemoryWarning;
- (void)didToggleTabBar;
- (void)didTransitionTabView;
- (void)dismissViewControllerAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)displayHostedScreenTimeView;
- (id)documentAndTopBarsContainerView;
- (bool)documentSafeAreaInsetsFrozen;
- (id)dynamicBarAnimator;
- (void)dynamicBarAnimatorOutputsDidChange:(id)arg1;
- (id)floatingSidebarButton;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)hideLockedPrivateBrowsingView;
- (double)horizontalMarginForCatalogViewInPopover;
- (id)hostViewControllerForOverlay;
- (bool)inElementFullscreenForTabDocumentView:(id)arg1;
- (id)initWithBrowserController:(id)arg1;
- (bool)insetsContentContainerFromStatusBar;
- (id /* block */)intentInteractionCompletion;
- (bool)isInteractivelyMinimizingBars;
- (bool)isPerformingSizeTransition;
- (bool)isShowingLockedPrivateBrowsingView;
- (bool)isShowingPrivateBrowsingExplanationSheet;
- (bool)isShowingSidebar;
- (bool)isShowingTabBar;
- (bool)isTogglingTabBar;
- (bool)isUsingBottomCapsule;
- (bool)keepBarsMinimized;
- (double)keyboardInsetInCoordinateSpace:(id)arg1;
- (void)layOutCatalogView;
- (void)layOutTopBars;
- (id)leadingSidebarButtonItem;
- (void)loadView;
- (id)lockedPrivateBrowsingView;
- (id)managedTopBanners;
- (double)maximumHeightObscuredByBottomToolbar;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })maximumObscuredInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCoordinateSpace:(id)arg2;
- (struct CGSize { double x1; double x2; })maximumUnobscuredWebViewLayoutSizeForTabDocumentView:(id)arg1;
- (double)minimumEffectiveDeviceWidthForTabDocumentView:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })minimumObscuredInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCoordinateSpace:(id)arg2;
- (struct CGSize { double x1; double x2; })minimumWebViewLayoutSizeForTabDocumentView:(id)arg1;
- (id)navigationBar;
- (double)navigationBarDesiredHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })navigationBarFrameInCoordinateSpace:(id)arg1;
- (double)navigationBarSquishedHeight;
- (bool)needsScrollToTopView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })obscuredInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCoordinateSpace:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })obscuredInsetsWithComponents:(unsigned long long)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inCoordinateSpace:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })obscuredScrollViewInsetsConsideringTargetState:(bool)arg1 insetsDueToSafeArea:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })obscuredScrollViewInsetsForTabDocumentView:(id)arg1 unobscuredSafeAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg2;
- (double)offsetForDynamicBarAnimator;
- (long long)preferredCenterStatusBarStyle;
- (id)preferredFocusEnvironments;
- (long long)preferredLeadingStatusBarStyle;
- (unsigned long long)preferredScreenEdgesDeferringSystemGestures;
- (long long)preferredStatusBarStyle;
- (long long)preferredTrailingStatusBarStyle;
- (bool)prefersHomeIndicatorAutoHidden;
- (void)presentViewController:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)presentationControllerDidDismiss:(id)arg1;
- (id)primaryBar;
- (id)primaryNavigationBar;
- (bool)pullToRefreshIsEnabled;
- (id)refreshControl;
- (void)removeChildViewController:(id)arg1 notifyDidMove:(bool)arg2;
- (void)removeToastViewController:(id)arg1;
- (bool)safari_wantsTransparentApplicationBackground;
- (id)screenTimeOverlayViewController;
- (struct SFScrollIndicatorInsets { struct UIEdgeInsets { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; } x1; struct UIEdgeInsets { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; } x2; })scrollIndicatorInsetsForTabDocumentView:(id)arg1;
- (id)scrollView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })scrollViewContentInsetAdjustmentsForTabDocumentView:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setBarStateAllowsHidingHomeIndicator:(bool)arg1;
- (void)setBookmarksBar:(id)arg1;
- (void)setCatalogViewController:(id)arg1;
- (void)setClipperView:(id)arg1;
- (void)setConfiguration:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDocumentSafeAreaInsetsFrozen:(bool)arg1;
- (void)setIntentInteractionCompletion:(id /* block */)arg1;
- (void)setKeepBarsMinimized:(bool)arg1;
- (void)setNeedsPreferredStatusBarUpdateAfterCommitAnimated:(bool)arg1;
- (void)setNeedsScrollToTopView:(bool)arg1;
- (void)setPullToRefreshIsEnabled:(bool)arg1;
- (void)setScreenTimeOverlayViewController:(id)arg1;
- (void)setShowingSidebar:(bool)arg1 completion:(id /* block */)arg2;
- (void)setShowingTabBar:(bool)arg1;
- (void)setSidebarUIProxyDelegate:(id)arg1;
- (void)setTabBar:(id)arg1;
- (void)setTabThumbnailCollectionView:(id)arg1;
- (void)setTogglingTabBar:(bool)arg1;
- (void)setUsesFaintTopSeparator:(bool)arg1;
- (void)setWebView:(id)arg1;
- (bool)shouldFreezeWebViewUpdatesForTabDocumentView:(id)arg1;
- (void)showLockedPrivateBrowsingView;
- (void)showTurnOnLockedPrivateBrowsingSheet;
- (void)showWhatsNewInPrivateBrowsingSheet;
- (id)sidebarButtonEmbeddedInSidebar;
- (id)sidebarButtonItem;
- (id)sidebarContentDimmingView;
- (void)sidebarDimmingViewDismiss:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })sidebarObscuredInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCoordinateSpace:(id)arg2;
- (long long)sidebarStyle;
- (id)sidebarTrailingButtonItem;
- (id)sidebarUIProxyDelegate;
- (id)sidebarViewController;
- (id)snapshotContentProviderForTab:(id)arg1;
- (id)statusBarView;
- (void)stopRefreshing;
- (id)tabBar;
- (id)tabBarClipperView;
- (void)tabBarDropExpansionView:(id)arg1 didBeginTrackingDropSession:(id)arg2;
- (void)tabBarDropExpansionView:(id)arg1 didEndTrackingDropSession:(id)arg2;
- (id)tabBarManager;
- (void)tabCollectionViewDidCancelDismissal:(id)arg1;
- (void)tabCollectionViewDidDismiss:(id)arg1;
- (void)tabCollectionViewWillDismiss:(id)arg1;
- (void)tabCollectionViewWillPresent:(id)arg1;
- (unsigned long long)tabDocumentView:(id)arg1 contentOffsetAdjustmentEdgeWithPreviousContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)tabDocumentViewDidUpdateDistanceScrolled:(id)arg1;
- (id)tabHoverPreview;
- (id)tabOverview:(id)arg1 topBarThemeForItem:(id)arg2;
- (id)tabThumbnailCollectionView;
- (id)tipsCoordinator;
- (long long)toolbarPlacement;
- (id)topBackdrop;
- (id)topBar;
- (id)trailingSidebarButtonItem;
- (void)traitCollectionDidChange:(id)arg1;
- (id)unifiedBar;
- (id)unifiedField;
- (void)updateAccessibilityIdentifier;
- (void)updateCapsuleLayoutStyle;
- (void)updateOrderedSubviewsForOrderedContainerView:(id)arg1;
- (void)updateSuppressesStandaloneTabBar;
- (void)updateTabHoverPreview;
- (void)updateTabViewPinchRecognizer;
- (void)updateThemeColorIfNeededAnimated:(bool)arg1;
- (void)updateUnifiedBarChromelessScrollDistance;
- (void)updateUnifiedBarVisibility;
- (void)updateUsesLockdownStatusBar;
- (void)updateUsesWebpageStatusBar;
- (void)updateViewForTabDocument:(id)arg1;
- (void)updateViewsAfterContentContainerViewBoundsChange;
- (void)updateWebViewSizeAttributes;
- (bool)usesFaintTopSeparator;
- (bool)usingLoweredBar;
- (bool)usingUnifiedBar;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)webSearchTipDidBecomeUnavailable;
- (id)webView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })webViewEffectiveSafeAreaInsets;
- (struct CGSize { double x1; double x2; })webViewMaximumUnobscuredLayoutSize;
- (struct CGSize { double x1; double x2; })webViewMinimumLayoutSize;
- (void)willToggleTabBar;
- (void)willTransitionTabView;

@end
