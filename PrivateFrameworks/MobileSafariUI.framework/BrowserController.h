
@interface BrowserController : SFBrowserController <ActionPanelDelegate, AddBookmarkActivityDelegate, BookmarksBarViewDelegate, BookmarksNavigationControllerDelegate, BrowserRootViewControllerDelegate, CatalogViewControllerDelegate, CloudTabsViewControllerDelegate, CompletionDetailViewControllerDelegate, ContinuousReadingViewControllerDelegate, DownloadOpenHandler, LibraryItemOpenHandler, LinkPreviewProvider, QLPreviewControllerDelegate, SFBrowserControllerProxy, SFBrowserKeyCommandSafariMethods, SFMenuConfiguring, SFOverlayProviderDelegate, SFScreenTimeOverlayViewControllerDelegate, SFSiriLinkActionPerformer, SFSiriReaderPlaybackControllerDelegate, SFToastViewControllerDelegate, SKStoreProductViewControllerDelegate, SidebarUIProxyDelegate, StartPageDataSource, TabBarManagerObserving, TabControllerDocumentObserving, TabDocumentDelegate, TabOverviewPresentationObserving, TabSnapshotGeneratorDelegate, UIActivityItemsConfigurationProviding, UIAdaptivePresentationControllerDelegate, UICloudSharingControllerDelegate, UIGestureRecognizerDelegatePrivate, UIScreenshotServiceDelegate, UIScrollViewDelegate, UITextFieldDelegate, UIWindowSceneDelegate, WBProfileWindowDelegate, WBSAppReviewPromptPresenting, WBSDigitalHealthManagerDelegate, WBSUnifiedBarAnalyticsProviding, WBSWebExtensionCommandHandling, WBTabGroupManagerObserver, WBTabGroupManagerShareAcceptanceHandler, WBTabGroupSyncAgentSyncObserver, _SFBarManagerDelegate, _SFBrowserContentController, _SFDynamicBarAnimatorDelegate, _SFMailContentProviderDataSource, _SFNavigationBarDelegate, _SFNavigationIntentHandling, _SFSaveToFilesOperationDelegate, _SFSingleBookmarkNavigationControllerDelegate> {
    NSUUID * _UUID;
    NSLayoutConstraint * _activityNoticeTopConstraint;
    bool  _allowsAutoDismissSidebar;
    id /* block */  _animationPendingDynamicBarAnimatorSteadyState;
    bool  _antiPhishingServiceInitialized;
    WBSAppReviewPromptManager * _appReviewPromptManager;
    bool  _applicationIsOpaque;
    WKBackForwardListItem * _backForwardListItemNeedingSnapshot;
    bool  _backgrounded;
    BannerController * _bannerController;
    _SFBarManager * _barManager;
    id /* block */  _blockRequestingScreenshotPDFData;
    long long  _bookmarksPresentationStyleBeforeSizeTransition;
    BrowserWindowController * _browserWindowController;
    CatalogViewController * _cachedCatalogViewController;
    _SFBrowserConfiguration * _cachedConfiguration;
    TabDocument * _cachedDocumentOnContinuousTransition;
    _SFMailContentProvider * _cachedMailContentProvider;
    NSMapTable * _cachedParticipantLists;
    bool  _canFocusNavigationBarURL;
    bool  _canPerformPostLaunchActions;
    CatalogViewControllerState * _catalogViewControllerStateForSizeChange;
    bool  _contentBorrowedForTab;
    ContinuousReadingController * _continuousReadingController;
    ContinuousReadingViewController * _continuousReadingViewController;
    bool  _controlledByAutomation;
    SFToastViewController * _currentlyPresentedToastViewController;
    NSDate * _dateReaderOpened;
    WKWebpagePreferences * _defaultWebpagePreferences;
    bool  _didConnectToScene;
    bool  _didRestoreState;
    WBSDigitalHealthManager * _digitalHealthManager;
    bool  _disableBarHiding;
    DownloadsViewController * _downloadsViewController;
    NSMutableSet * _dropSessionsForTabBarVisibility;
    long long  _dynamicBarAnimatorStateBeforeNavigationGesture;
    ActionPanel * _extensionActionPanel;
    NSString * _extractedArticleText;
    long long  _favoritesState;
    bool  _firedExtensionOpenEventForPrivateWindow;
    bool  _freezeWebViewUpdatesForSizeTransition;
    bool  _fullScreenInPortrait;
    bool  _hasTappedShare;
    id /* block */  _intentSceneConfigurationCompletion;
    bool  _interactivelyChangingObscuredInsets;
    bool  _isActionPanelReady;
    bool  _isMakingFirstActiveTabDocumentActive;
    bool  _isMakingFocusedTabDocumentActive;
    bool  _isPerformingRootViewControllerSizeTransition;
    bool  _isRestoringInterfaceAfterElementFullscreen;
    bool  _isSpeculativeLoadingEnabled;
    bool  _isTrackingWebViewAnimatedResize;
    bool  _isUpdatingBarAnimatorDragOffset;
    double  _lastAdjustmentForKeyboard;
    double  _lastInteractionTime;
    double  _lastRefreshControlHeight;
    long long  _lastTabSwitchKeyboardModifierFlags;
    NSTimer * _lastTimerForDelayingSpeculativelyPreloadingTopHit;
    NSNumber * _layoutToRestoreAfterOpeningNewTabs;
    LibraryController * _libraryController;
    BookmarksNavigationController * _modalBookmarksController;
    bool  _needsImmediateLayoutForWebViewObscuredInsetsUpdate;
    bool  _needsSnapshotUpdateForActiveTab;
    bool  _needsSnapshotUpdateForBlankTabs;
    TabDocument * _nextContinuousItemDocument;
    WebExtensionWindow * _normalExtensionWindow;
    bool  _obscuredInsetsIncludeRefreshControlDuringBounce;
    bool  _overridesUndoManagerForClosedTabs;
    _SFPageFormatMenuController * _pageFormatMenuController;
    _SFActivityViewController * _presentedActivityViewController;
    SKStoreProductViewController * _presentedStoreProductViewController;
    TabDocument * _previewDocument;
    NSTimer * _previewDocumentCloseTimer;
    _SFDownload * _previewedDownload;
    TabDocument * _previousContinuousItemDocument;
    ActionPanel * _prewarmedActionPanel;
    bool  _privateBrowsingAvailable;
    bool  _privateBrowsingEnabled;
    WebExtensionWindow * _privateExtensionWindow;
    NSString * _profileTitleInScene;
    WBProfileWindow * _profileWindow;
    TabDocument * _progressSuppressingDocument;
    NSString * _queryStringWhilePerformingRootViewControllerSizeTransition;
    NSMutableArray * _queuedToastViewControllers;
    bool  _readerShouldBeShownIfPossible;
    bool  _readerViewStale;
    NSMutableSet * _reasonsForIgnoringUserInteraction;
    NSDate * _resignActiveDate;
    BrowserRootViewController * _rootViewController;
    long long  _rootViewControllerVerticalSizeClassBeforeSizeTransition;
    bool  _rootViewWillChangeDimensions;
    _SFSaveToFilesOperation * _saveToFilesOperation;
    _SFBrowserSavedState * _savedState;
    UIWindowScene * _scene;
    NSString * _sceneID;
    UIScrollView * _scrollView;
    bool  _scrollViewIsDragging;
    double  _scrollViewStartZoomScale;
    UIView * _scrollingStatusBar;
    SearchStateCache * _searchStateCache;
    ApplicationShortcutController * _shortcutController;
    bool  _shouldFillStringForFind;
    bool  _shouldKeepKeyboardFocused;
    bool  _shouldMakeFavoritesStickyWhenReinsertingBorrowedContent;
    bool  _shouldShowBarsAfterDraggingDownward;
    bool  _showingDemoModeAlert;
    <SidebarUIProxy> * _sidebarUIProxy;
    SFSiriLinkCoordinator * _siriLinkCoordinator;
    TabDocument * _speculativeLoadDocument;
    NSString * _speculativeLoadURL;
    StatusBarSpinnerController * _spinnerController;
    bool  _statusBarHeightChangedWhilePerformingRootViewControllerSizeTransition;
    bool  _suppressWebExtensionEvents;
    bool  _suspendedOrSuspending;
    TabController * _tabController;
    TabDocument * _tabDocumentPlayingPIPVideo;
    TabDragDropInteractionController * _tabDragDropController;
    WBTabGroupManager * _tabGroupManager;
    TabGroupPickerViewController * _tabGroupPickerViewController;
    NSString * _tabUUIDStringForSiriReadThisMenuInvocation;
    NSString * _tabUUIDStringForSiriReadThisVocalInvocation;
    bool  _tabViewPinchActive;
    UIPinchGestureRecognizer * _tabViewPinchRecognizer;
    bool  _telemetryHasPresentedBookmarks;
    UITextRange * _textRangeToRestoreAfterParsecCardDismissal;
    bool  _trackingWebViewBackForwardNavigationGesture;
    <BrowserControllerUIDelegate> * _uiDelegate;
    UIContextMenuInteraction * _unifiedTabBarContextMenuInteraction;
    UniversalSearchSession * _universalSearchSession;
    UserActivityController * _userActivityController;
    bool  _usesNarrowLayout;
    bool  _usesTabBar;
    UIViewController * _viewControllerToDismissWhileBeingPresented;
    NSMapTable * _viewControllersPendingPresentation;
    bool  _wantsUnifiedFieldFocused;
    _SFWebView * _webView;
    WBWindowState * _windowState;
    WKPreferences * _wkPreferences;
}

@property (nonatomic, readonly) NSUUID *UUID;
@property (nonatomic, readonly) <_SFBrowserDocument> *activeDocument;
@property (nonatomic, readonly) NSString *activeLibraryType;
@property (nonatomic, readonly) WBProfile *activeProfile;
@property (nonatomic, copy) NSString *activeProfileIdentifier;
@property (nonatomic, readonly) _SFSearchEngineInfo *activeSearchEngine;
@property (nonatomic, readonly) <WBSWebExtensionTab> *activeTabForExtensions;
@property (nonatomic, readonly) bool activeTabIsBlank;
@property (nonatomic, readonly) <WBSWebExtensionWindow> *activeWebExtensionWindow;
@property (nonatomic, readonly) bool activeWebExtensionWindowIsFocused;
@property (nonatomic, readonly) bool activeWindowIsForeground;
@property (nonatomic, readonly) <UIActivityItemsConfigurationReading> *activityItemsConfiguration;
@property (nonatomic, readonly) long long analyticsLayoutProvenance;
@property (nonatomic, copy) id /* block */ animationPendingDynamicBarAnimatorSteadyState;
@property (nonatomic, retain) WBSAppReviewPromptManager *appReviewPromptManager;
@property (nonatomic, readonly) bool avoidSnapshotOfActiveTabIfPossible;
@property (nonatomic, readonly) bool backgroundColorInTabBarEnabled;
@property (getter=isBackgrounded, nonatomic) bool backgrounded;
@property (nonatomic, readonly) BannerController *bannerController;
@property (nonatomic, readonly) _SFBarManager *barManager;
@property (nonatomic, readonly) BookmarksNavigationController *bookmarksNavigationController;
@property (nonatomic, readonly) BrowserWindowController *browserWindowController;
@property (nonatomic, retain) TabDocument *cachedDocumentOnContinuousTransition;
@property (nonatomic, readonly) bool canAutoFocusURLField;
@property (nonatomic, readonly) bool canCloseActiveTab;
@property (nonatomic, readonly) bool canCloseTab;
@property (nonatomic, readonly) bool canCreateNewBookmark;
@property (nonatomic, readonly) bool canCreateNewPrivateTab;
@property (nonatomic, readonly) bool canCreateNewTab;
@property (nonatomic, readonly) bool canCreateReadingListItem;
@property (nonatomic) bool canFocusNavigationBarURL;
@property (nonatomic, readonly) bool canPerformPostLaunchActions;
@property (nonatomic, readonly) bool canReadActiveLanguage;
@property (nonatomic, readonly) bool canShowProfileInNavigationBar;
@property (nonatomic, readonly) bool canShowProfileInTabOverviewToolbar;
@property (nonatomic, readonly) bool canShowSidebar;
@property (nonatomic, readonly) bool catalogPopoverIsShowing;
@property (nonatomic, readonly) <WBSCloudTabDeviceProvider> *cloudTabStore;
@property (nonatomic, readonly) _SFBrowserConfiguration *configuration;
@property (nonatomic, readonly) ContinuousReadingController *continuousReadingController;
@property (getter=isControlledByAutomation, nonatomic, readonly) bool controlledByAutomation;
@property (nonatomic, retain) NSString *currentBookmarksCollection;
@property (getter=areCustomTabGroupsEnabled, nonatomic, readonly) bool customTabGroupsEnabled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) WBSDigitalHealthManager *digitalHealthManager;
@property (nonatomic, readonly) unsigned long long downloadsCount;
@property (nonatomic, readonly) WBProfile *effectiveProfile;
@property (nonatomic, readonly, copy) NSString *effectiveProfileIdentifier;
@property (nonatomic, readonly, copy) NSString *extractedArticleText;
@property (nonatomic, readonly) bool favoritesAreEmbedded;
@property (nonatomic, readonly) bool favoritesAreShowingInPopover;
@property (getter=isFavoritesFieldFocused, nonatomic, readonly) bool favoritesFieldFocused;
@property (nonatomic, readonly) bool favoritesFieldShouldBeExpanded;
@property (nonatomic) long long favoritesState;
@property (nonatomic, readonly) bool fullScreenInPortrait;
@property (nonatomic, readonly) bool hasDedicatedDownloadsToolbarItem;
@property (nonatomic, readonly) bool hasDedicatedExtensionsButton;
@property (nonatomic, readonly) bool hasDedicatedMediaStateButton;
@property (nonatomic, readonly) bool hasMultipleProfiles;
@property (nonatomic, readonly) bool hasUnviewedDownloads;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long idOfParsecQueryOriginatingFromSearchSuggestion;
@property (nonatomic, copy) id /* block */ intentSceneConfigurationCompletion;
@property (nonatomic, readonly) bool interfaceFillsScreen;
@property (nonatomic, readonly) bool isInDefaultProfile;
@property (nonatomic, readonly) bool isShowingInOneThirdMode;
@property (nonatomic) bool keepBarsMinimized;
@property (nonatomic) double lastInteractionTime;
@property (nonatomic, readonly) LibraryController *libraryController;
@property (nonatomic, readonly) <LoadProgressObserver> *loadProgressObserver;
@property (nonatomic, retain) TabDocument *nextContinuousItemDocument;
@property (nonatomic, readonly) unsigned long long numberOfTabsInCurrentTabBar;
@property (nonatomic, readonly) long long overrideBarTintStyleForUnifiedBar;
@property (nonatomic) bool overridesUndoManagerForClosedTabs;
@property (nonatomic, readonly) _SFPageZoomPreferenceManager *pageZoomManager;
@property (nonatomic, readonly) _SFPerSitePreferencesVendor *perSitePreferencesVendor;
@property (nonatomic, readonly) _SFActivityViewController *presentedActivityViewController;
@property (nonatomic, retain) SKStoreProductViewController *presentedStoreProductViewController;
@property (getter=isPresentingModalBookmarksController, nonatomic, readonly) bool presentingModalBookmarksController;
@property (nonatomic, retain) TabDocument *previousContinuousItemDocument;
@property (getter=isPrivateBrowsingAvailable, nonatomic, readonly) bool privateBrowsingAvailable;
@property (getter=isPrivateBrowsingEnabled, nonatomic) bool privateBrowsingEnabled;
@property (nonatomic, readonly) WKProcessPool *processPool;
@property (getter=isReaderAvailable, nonatomic, readonly) bool readerAvailable;
@property (nonatomic) bool readerShouldBeShownIfPossible;
@property (getter=isReaderViewStale, nonatomic) bool readerViewStale;
@property (nonatomic, readonly) BrowserRootViewController *rootViewController;
@property (nonatomic, readonly) _SFBrowserSavedState *savedState;
@property (nonatomic, readonly) UIWindowScene *scene;
@property (nonatomic, readonly) ApplicationShortcutController *shortcutController;
@property (nonatomic) bool shouldKeepKeyboardFocused;
@property (nonatomic, readonly) bool shouldReportUnifiedTabBarAnalytics;
@property (nonatomic, readonly) bool shouldShowTurnOnLockedPrivateBrowsingSheet;
@property (nonatomic, readonly) bool shouldShowWhatsNewInPrivateBrowsingSheet;
@property (nonatomic, readonly) bool shouldSnapshotActiveTab;
@property (nonatomic, readonly) bool shouldStayInFocusedTabGroupForExternalLinks;
@property (getter=isShowingAppInfoOverlay, nonatomic, readonly) bool showingAppInfoOverlay;
@property (getter=isShowingCompletionDetail, nonatomic, readonly) bool showingCompletionDetail;
@property (getter=isShowingCompletionListCompletions, nonatomic, readonly) bool showingCompletionListCompletions;
@property (getter=isShowingContinuousReadingList, nonatomic, readonly) bool showingContinuousReadingList;
@property (getter=isShowingFavorites, nonatomic, readonly) bool showingFavorites;
@property (getter=isShowingReader, nonatomic, readonly) bool showingReader;
@property (nonatomic, readonly) UIAction *sidebarAction;
@property (nonatomic, readonly) <SidebarUIProxy> *sidebarUIProxy;
@property (nonatomic, readonly) SFSiriLinkCoordinator *siriLinkCoordinator;
@property (nonatomic, readonly) long long siriReaderPlaybackStateForActiveTab;
@property (nonatomic, readonly) TabDocument *speculativeLoadDocument;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsPrivacyReport;
@property (nonatomic) bool suppressWebExtensionEvents;
@property (getter=isSuspendedOrSuspending, nonatomic, readonly) bool suspendedOrSuspending;
@property (nonatomic, readonly) long long tabBarDisplayMode;
@property (nonatomic, readonly) bool tabBarIsCurrentlyScrollable;
@property (nonatomic, readonly) TabBarManager *tabBarManager;
@property (nonatomic, readonly) TabController *tabController;
@property (nonatomic, retain) TabDocument *tabDocumentPlayingPIPVideo;
@property (nonatomic, readonly, copy) NSArray *tabDocumentsForActiveTabThatCanReceiveMessages;
@property (nonatomic, readonly) WBTabGroupManager *tabGroupManager;
@property (nonatomic, readonly) <TabGroupProvider> *tabGroupProvider;
@property (nonatomic, readonly) TabHoverPreview *tabHoverPreview;
@property (nonatomic, readonly) bool tabViewPinchActive;
@property (nonatomic, readonly) UIPinchGestureRecognizer *tabViewPinchRecognizer;
@property (nonatomic, readonly) bool tabsShowOnlyIcons;
@property (nonatomic, retain) UITextRange *textRangeToRestoreAfterParsecCardDismissal;
@property (nonatomic, readonly) long long unifiedTabBarLayoutStyle;
@property (nonatomic, readonly) UniversalSearchSession *universalSearchSession;
@property (nonatomic, readonly) WBTabGroup *unnamedTabGroup;
@property (nonatomic, readonly) UserActivityController *userActivityController;
@property (nonatomic) bool usesNarrowLayout;
@property (nonatomic, readonly) bool usesTabBar;
@property (nonatomic, readonly) UIViewController *viewControllerToPresentFrom;
@property (nonatomic) bool wantsUnifiedFieldFocused;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } webExtensionTabSize;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } webExtensionWindowGeometry;
@property (nonatomic, readonly, copy) NSArray *webExtensionWindows;
@property (nonatomic, readonly) _SFWebView *webView;
@property (nonatomic, retain) UIWindow *window;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } windowSize;
@property (nonatomic, readonly) WBWindowState *windowState;
@property (nonatomic, readonly) _SFBrowserWindowStateData *windowStateData;
@property (nonatomic, readonly) WKPreferences *wkPreferences;
@property (nonatomic) float zoomScale;

+ (id)newProcessPool;

- (void).cxx_destruct;
- (id)UUID;
- (void)_automaticPasswordInputViewAutoFillContextProviderRequiredNotification:(id)arg1;
- (void)_automaticPasswordInputViewNotification:(id)arg1;
- (void)_backgroundImageFileModifiedRemotely:(id)arg1;
- (void)_backgroundImageNeedsCloudKitUpdate:(id)arg1;
- (void)_beganSharingTabGroup:(id)arg1;
- (void)_bookmarksDidReload:(id)arg1;
- (long long)_bookmarksPresentationStyle;
- (void)_closePreviewDocumentTimerFired:(id)arg1;
- (void)_contentBlockersPerSitePreferenceDidChange:(id)arg1;
- (void)_defaultSearchEngineDidChange:(id)arg1;
- (void)_didChangePowerState;
- (void)_didChangeToFirstResponder:(id)arg1;
- (void)_didDismissManageExtensionsViewController:(id)arg1;
- (void)_downloadManagerDidFinishLastDownload:(id)arg1;
- (void)_downloadsDidChange:(id)arg1;
- (void)_downloadsTotalProgressDidChange:(id)arg1;
- (void)_hasUnviewedDownloadsDidChange:(id)arg1;
- (void)_hideCrashBanner;
- (void)_initSubviews;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (void)_lockedPrivateBrowsingStateDidChange;
- (void)_parsecABGroupIdentifierDidChange:(id)arg1;
- (void)_parsecBagDidLoad:(id)arg1;
- (void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)arg1;
- (void)_perSiteLockdownModePreferenceDidChange:(id)arg1;
- (void)_perSitePageZoomPreferenceDidChange:(id)arg1;
- (void)_perSitePreferencesDidChange:(id)arg1;
- (void)_perSitePreferencesDidChangeRemotely:(id)arg1;
- (void)_presentModalViewController:(id)arg1 fromBarItem:(long long)arg2 completion:(id /* block */)arg3;
- (void)_profileWallpaperDidChange:(id)arg1;
- (bool)_shouldUseNarrowLayout;
- (void)_tabViewPinch:(id)arg1;
- (void)_updatePrivateBrowsingAvailability:(bool)arg1;
- (void)_voiceSearchAvailabilityDidChange:(id)arg1;
- (void)actionPanel:(id)arg1 prepareForMailActivityWithMailController:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)actionPanelAddTabDocumentToReadingList:(id)arg1 completion:(id /* block */)arg2;
- (id)activeDocument;
- (id)activeLibraryType;
- (id)activeProfile;
- (id)activeProfileIdentifier;
- (id)activeSearchEngine;
- (id)activeTabForExtensions;
- (bool)activeTabIsBlank;
- (id)activeWebExtensionWindow;
- (bool)activeWebExtensionWindowIsFocused;
- (bool)activeWindowIsForeground;
- (id)activityItemsConfiguration;
- (bool)activityViewControllerSupportsDownloads:(id)arg1;
- (void)addAllTabsToBookmarks:(id)arg1;
- (bool)addBookmarkActivityCanSaveBookmarkChanges:(id)arg1;
- (void)addBookmarkActivityFailedToAcquireBookmarkLock:(id)arg1;
- (id)addBookmarkActivityTabGroupProvider;
- (void)addBookmarkFolderForCurrentTabs;
- (void)addBookmarkForCurrentTab;
- (void)addBookmarkNavController:(id)arg1 didFinishWithResult:(bool)arg2 bookmark:(id)arg3;
- (bool)addBookmarkNavControllerCanSaveBookmarkChanges:(id)arg1;
- (bool)addReadingListBookmarkForCurrentTab;
- (void)addToBookmarks:(id)arg1;
- (void)addToReadingList:(id)arg1;
- (void)adoptSceneID:(id)arg1;
- (long long)analyticsLayoutProvenance;
- (void)animateLinkImage:(struct CGImage { }*)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3 toBarItem:(long long)arg4;
- (id /* block */)animationPendingDynamicBarAnimatorSteadyState;
- (id)appReviewPromptManager;
- (bool)areCustomTabGroupsEnabled;
- (void)attachToScene:(id)arg1;
- (void)authenticateToUnlockPrivateBrowsing;
- (void)autoFillFormKeyPressed;
- (void)autoFillStateChangedMessageReceived;
- (bool)avoidSnapshotOfActiveTabIfPossible;
- (bool)backgroundColorInTabBarEnabled;
- (id)bannerController;
- (id)barManager;
- (bool)barManager:(id)arg1 canHandleLongPressForBarItem:(long long)arg2;
- (void)barManager:(id)arg1 didReceiveLongPressForBarItem:(long long)arg2;
- (void)barManager:(id)arg1 didReceiveTapForBarItem:(long long)arg2;
- (void)barManager:(id)arg1 didReceiveTouchDownForBarItem:(long long)arg2;
- (id)barManager:(id)arg1 visibleBarItemsForLayout:(long long)arg2 availableItems:(id)arg3;
- (void)barManager:(id)arg1 willRegisterBarWithToken:(id)arg2;
- (bool)becomeFirstResponder;
- (void)beginIgnoringUserInteraction:(id)arg1;
- (void)beginTrackingDropSessionForTabBarVisibility:(id)arg1;
- (void)bookmarksBarView:(id)arg1 bookmarksNavigationControllerViewDidAppear:(id)arg2;
- (void)bookmarksBarView:(id)arg1 bookmarksNavigationControllerViewDidDisappear:(id)arg2;
- (id)bookmarksNavigationController;
- (void)bookmarksNavigationController:(id)arg1 editFavoritesGridViewBookmark:(id)arg2;
- (void)bookmarksNavigationController:(id)arg1 provideContextResponseWithBlock:(id /* block */)arg2;
- (void)bookmarksNavigationController:(id)arg1 setBookmark:(id)arg2 asRead:(bool)arg3;
- (bool)bookmarksNavigationController:(id)arg1 tabItem:(id)arg2 matchesSearchText:(id)arg3;
- (void)bookmarksNavigationController:(id)arg1 updateReadingListUnreadFilterShowingAllBookmarks:(bool)arg2;
- (void)bookmarksNavigationControllerContentDidBecomeDirty:(id)arg1;
- (id)bookmarksNavigationControllerCurrentContinuousReadingItem:(id)arg1;
- (void)bookmarksNavigationControllerDidPressDoneButton:(id)arg1;
- (void)bookmarksNavigationControllerDidTapOutsideFavorites:(id)arg1;
- (bool)bookmarksNavigationControllerIsPresentedInsideBlankTab:(id)arg1;
- (void)bookmarksNavigationControllerReloadDidFail:(id)arg1;
- (void)bookmarksNavigationControllerViewDidAppear:(id)arg1;
- (void)bookmarksNavigationControllerViewDidDisappear:(id)arg1;
- (long long)bookmarksPresentationStyleForViewOfSize:(struct CGSize { double x1; double x2; })arg1;
- (id)borrowContentViewForTab:(id)arg1 withTopBackdropView:(id*)arg2 ofHeight:(double)arg3;
- (long long)browserPersonaForActivityViewController:(id)arg1;
- (double)browserViewController:(id)arg1 adjustedBottomContentInset:(double)arg2;
- (double)browserViewController:(id)arg1 adjustedBottomObscuredInset:(double)arg2;
- (double)browserViewController:(id)arg1 adjustedTopObscuredInsetForBanners:(double)arg2;
- (void)browserViewController:(id)arg1 didChangeShowingSidebar:(bool)arg2;
- (void)browserViewController:(id)arg1 didChangeSidebarStyle:(long long)arg2;
- (void)browserViewController:(id)arg1 didCreateNavigationBar:(id)arg2;
- (void)browserViewController:(id)arg1 didCreateToolbar:(id)arg2;
- (void)browserViewController:(id)arg1 didCreateUnifiedBar:(id)arg2;
- (void)browserViewController:(id)arg1 didUpdateBannerTheme:(id)arg2;
- (long long)browserViewController:(id)arg1 sidebarStyleForViewSize:(struct CGSize { double x1; double x2; })arg2;
- (long long)browserViewController:(id)arg1 toolbarPlacementForViewSize:(struct CGSize { double x1; double x2; })arg2;
- (void)browserViewController:(id)arg1 traitCollectionDidChange:(id)arg2;
- (double)browserViewControllerAdditionalContentHeightForBanners:(id)arg1;
- (void)browserViewControllerDidChangeBarInsets:(id)arg1;
- (void)browserViewControllerDidChangeToolbarPlacement:(id)arg1;
- (void)browserViewControllerDidLayOutSubviews:(id)arg1;
- (bool)browserViewControllerInterfaceFillsScreen:(id)arg1;
- (bool)browserViewControllerShouldFreezeWebViewUpdatesForSizeTransition:(id)arg1;
- (bool)browserViewControllerShouldTemporarilyHideBottomToolbar:(id)arg1;
- (id)browserWindowController;
- (id)cachedDocumentOnContinuousTransition;
- (bool)canAutoFocusURLField;
- (bool)canBecomeFirstResponder;
- (bool)canCloseActiveTab;
- (bool)canCloseTab;
- (bool)canCreateNewBookmark;
- (bool)canCreateNewPrivateTab;
- (bool)canCreateNewTab;
- (bool)canCreateReadingListItem;
- (bool)canFocusNavigationBarURL;
- (bool)canHideBars;
- (bool)canNavigateContinuousReadingListInDirection:(unsigned long long)arg1;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canPerformPostLaunchActions;
- (bool)canReadActiveLanguage;
- (bool)canReadThis;
- (bool)canShowProfileInNavigationBar;
- (bool)canShowProfileInTabOverviewToolbar;
- (bool)canShowSidebar;
- (bool)canToggleVisibilityForView:(unsigned long long)arg1;
- (void)cancelFavorites;
- (void)cancelFavoritesAnimated:(bool)arg1;
- (void)cancelKeyPressed;
- (void)cancelSpeculativeLoad;
- (void)carrierBundledChanged;
- (bool)catalogPopoverIsShowing;
- (void)catalogViewController:(id)arg1 cacheSearchQueryID:(long long)arg2;
- (void)catalogViewController:(id)arg1 completionItem:(id)arg2 wasAcceptedForString:(id)arg3;
- (void)catalogViewController:(id)arg1 didFinishVoiceSearchWithNavigation:(bool)arg2;
- (void)catalogViewController:(id)arg1 didPasteText:(id)arg2;
- (void)catalogViewController:(id)arg1 didSelectAddress:(id)arg2;
- (void)catalogViewController:(id)arg1 didSelectSearch:(id)arg2;
- (void)catalogViewController:(id)arg1 focusNextKeyView:(bool)arg2;
- (void)catalogViewController:(id)arg1 loadURL:(id)arg2 inExternalApplication:(bool)arg3;
- (void)catalogViewController:(id)arg1 mightSelectCompletionItem:(id)arg2 forString:(id)arg3;
- (void)catalogViewController:(id)arg1 presentViewControllerWithinPopover:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)catalogViewController:(id)arg1 willPresentCustomizationViewController:(id)arg2;
- (void)catalogViewController:(id)arg1 willPresentDetailViewController:(id)arg2;
- (void)catalogViewController:(id)arg1 willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inView:(inout id*)arg3;
- (void)catalogViewControllerDidAppear:(id)arg1;
- (void)catalogViewControllerDidBeginEditing:(id)arg1;
- (void)catalogViewControllerDidEndEditing:(id)arg1;
- (void)catalogViewControllerDidScroll:(id)arg1 animated:(bool)arg2;
- (void)catalogViewControllerDidSelectFindOnPage:(id)arg1;
- (void)catalogViewControllerMakeWindowKey:(id)arg1;
- (double)catalogViewControllerPopoverMaxHeight:(id)arg1;
- (double)catalogViewControllerPopoverWidth:(id)arg1;
- (void)catalogViewControllerPopoverWillDismiss:(id)arg1 dismissalReason:(long long)arg2;
- (bool)catalogViewControllerPresentingInPortraitAspectRatio:(id)arg1;
- (bool)catalogViewControllerShouldRequestNetworkedSuggestions:(id)arg1;
- (bool)catalogViewControllerShouldSuppressPopover:(id)arg1;
- (bool)catalogViewControllerShouldUsePopoverForCompletions:(id)arg1;
- (id)catalogViewControllerStartPageVisualStyleProvider:(id)arg1;
- (void)catalogViewControllerWillUnfocusUnifiedField:(id)arg1;
- (void)clearBadgeOnPageFormatMenu;
- (void)clearCachedTabCompletionData;
- (void)clearContinuousItemDocuments;
- (void)clearDocumentForContinuousReading:(id)arg1;
- (void)clearParsecQueryOriginatingFromSearchSuggestion;
- (void)clearParticipantsList;
- (void)clearReaderViews;
- (void)clearSpeculativeLoadDocument;
- (void)closeActiveTab:(id)arg1;
- (void)closeAllTabs:(id)arg1;
- (void)closeAllTabsMatchingSearch:(id)arg1;
- (void)closeOtherTabsKeyPressed;
- (void)closePreviewDocument;
- (void)closeProfileWindow:(id)arg1;
- (void)closeStartPage;
- (void)closeTabDocument:(id)arg1 animated:(bool)arg2;
- (void)closeTabGroupKeyPressed;
- (void)closeTabWithUUID:(id)arg1;
- (void)closeWindow;
- (void)cloudSharingController:(id)arg1 failedToSaveShareWithError:(id)arg2;
- (void)cloudSharingControllerDidStopSharing:(id)arg1;
- (id)cloudTabStore;
- (void)cloudTabsEnabledDidChange;
- (bool)cloudTabsViewController:(id)arg1 tabItem:(id)arg2 matchesSearchText:(id)arg3;
- (void)commitLinkPreviewViewController:(id)arg1;
- (void)completionDetailViewControllerDidDismiss:(id)arg1;
- (void)compressedNavigationBarWasTapped:(id)arg1;
- (id)configuration;
- (void)configureMenuAndAdoptButton:(id)arg1;
- (struct CGSize { double x1; double x2; })contentSizeForSnapshotGenerator:(id)arg1;
- (id)continuousReadingController;
- (void)continuousReadingViewController:(id)arg1 didCommitToLoadItem:(id)arg2;
- (void)continuousReadingViewController:(id)arg1 scrollViewDidScroll:(id)arg2;
- (void)continuousReadingViewControllerCommitToLoadPreviousItem:(id)arg1;
- (id)continuousReadingViewControllerForBrowserViewController:(id)arg1;
- (double)continuousReadingViewControllerNextWebViewLandingOffset:(id)arg1 includeBottomBar:(bool)arg2;
- (void)continuousReadingViewControllerWillCommitToLoadNextItem:(id)arg1;
- (id)createCatalogViewControllerIfNeeded;
- (void)createNewBookmarkWithTitle:(id)arg1;
- (void)createNewPrivateTab;
- (void)createNewTab;
- (void)createNewTabGroupWithTitle:(id)arg1;
- (void)createReadingListItem;
- (id)currentBookmarksCollection;
- (id)currentContentUUIDForNavigationBar:(id)arg1;
- (long long)dataOwnerForNavigationBar:(id)arg1;
- (void)dealloc;
- (void)decreaseSize:(id)arg1;
- (id)detachFromScene;
- (void)didAddTabWithUUID:(id)arg1 title:(id)arg2 inSharedTabGroupWithUUID:(id)arg3 byParticipantWithRecordID:(id)arg4;
- (void)didBecomeActive;
- (void)didCancelDismissingTabOverview;
- (void)didChangeBackgroundImageInSharedTabGroupWithUUID:(id)arg1 byParticipantWithRecordID:(id)arg2;
- (void)didChangeContinuousReadingItemInActiveDocument;
- (void)didChangeScopedFavoritesInSharedTabGroupWithUUID:(id)arg1 byParticipantWithRecordID:(id)arg2;
- (void)didCloseBrowserWindow;
- (void)didCompleteScrolling;
- (void)didEnterBackground;
- (void)didNavigateInTabWithUUID:(id)arg1 title:(id)arg2 inSharedTabGroupWithUUID:(id)arg3 byParticipantWithRecordID:(id)arg4;
- (void)didReceiveMemoryWarning;
- (void)didRemoveTabWithUUID:(id)arg1 title:(id)arg2 inSharedTabGroupWithUUID:(id)arg3 byParticipantWithRecordID:(id)arg4;
- (id)digitalHealthManager;
- (void)dismissCatalogViewController:(id)arg1;
- (void)dismissCompletionDetail;
- (void)dismissPageFormatMenu;
- (void)dismissToastViewController:(id)arg1;
- (bool)dismissTransientUIAnimated:(bool)arg1;
- (bool)dismissTransientUIAnimated:(bool)arg1 options:(unsigned long long)arg2;
- (void)dispatchNavigationIntent:(id)arg1;
- (void)document:(id)arg1 willMakeReaderVisible:(bool)arg2;
- (unsigned long long)downloadsCount;
- (id)downloadsViewControllerForActionPanel:(id)arg1;
- (bool)dynamicBarAnimator:(id)arg1 canTransitionToState:(long long)arg2 byDraggingWithOffset:(double)arg3;
- (double)dynamicBarAnimator:(id)arg1 minimumTopBarHeightForOffset:(double)arg2;
- (void)dynamicBarAnimatorOutputsDidChange:(id)arg1;
- (void)dynamicBarAnimatorStateDidChange:(id)arg1;
- (void)dynamicBarAnimatorWillEnterSteadyState:(id)arg1;
- (void)dynamicBarAnimatorWillLeaveSteadyState:(id)arg1;
- (void)editBookmark:(id)arg1;
- (void)editBookmarksKeyPressed;
- (id)effectiveProfile;
- (id)effectiveProfileIdentifier;
- (void)emailCurrentPage;
- (void)emptySelectorForAddLinkToReadingListModifierLinkTap;
- (void)emptySelectorForDownloadModifierLinkTap;
- (void)emptySelectorForOpenInNewTabModifierLinkTap;
- (void)emptySelectorForOpenInNewTabOppositePreferenceModifierLinkTap;
- (void)endIgnoringUserInteraction:(id)arg1;
- (void)endTrackingDropSessionForTabBarVisibility:(id)arg1;
- (id)extractedArticleText;
- (bool)favoritesAreEmbedded;
- (bool)favoritesAreShowingInPopover;
- (bool)favoritesFieldShouldBeExpanded;
- (bool)favoritesFieldShouldBeExpandedForFavoritesState:(long long)arg1;
- (long long)favoritesState;
- (void)filteredArticleTextDidBecomeReadyInTabDocument:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })finalObscuredInsetsForScrollView:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)find:(id)arg1;
- (void)focusAddressFieldAlternativeKeyPressed;
- (void)focusAddressFieldKeyPressed;
- (void)fraudWarningsToggled;
- (bool)fullScreenInPortrait;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)getContextForCurrentPageWithCompletionHandler:(id /* block */)arg1;
- (void)goBack;
- (void)goForward;
- (void)handleNavigationIntent:(id)arg1 completion:(id /* block */)arg2;
- (void)handleTabViewPinch;
- (bool)hasDedicatedDownloadsToolbarItem;
- (bool)hasDedicatedExtensionsButton;
- (bool)hasDedicatedMediaStateButton;
- (bool)hasMultipleProfiles;
- (bool)hasUnviewedDownloads;
- (void)hideReaderForTabDocument:(id)arg1 animated:(bool)arg2 deactivationMode:(unsigned long long)arg3;
- (void)hideTabGroupPicker;
- (long long)idOfParsecQueryOriginatingFromSearchSuggestion;
- (void)increaseSize:(id)arg1;
- (id)initWithStateData:(id)arg1 browserWindowController:(id)arg2 savedState:(id)arg3 controlledByAutomation:(bool)arg4;
- (id)initWithUUID:(id)arg1 sceneID:(id)arg2 browserWindowController:(id)arg3 tabGroupManager:(id)arg4 controlledByAutomation:(bool)arg5;
- (id)initWithWindowState:(id)arg1 browserWindowController:(id)arg2 tabGroupManager:(id)arg3;
- (id)initWithWindowState:(id)arg1 browserWindowController:(id)arg2 tabGroupManager:(id)arg3 controlledByAutomation:(bool)arg4;
- (id /* block */)intentSceneConfigurationCompletion;
- (bool)interfaceFillsScreen;
- (void)invalidateSourceApplication;
- (bool)isAnyPageLoaded;
- (bool)isBackgrounded;
- (bool)isContinuousReadingDocument:(id)arg1;
- (bool)isControlledByAutomation;
- (bool)isFavoritesFieldFocused;
- (bool)isInDefaultProfile;
- (bool)isPresentingModalBookmarksController;
- (bool)isPrivateBrowsingAvailable;
- (bool)isPrivateBrowsingEnabled;
- (bool)isReaderAvailable;
- (bool)isReaderViewStale;
- (bool)isShowingAppInfoOverlay;
- (bool)isShowingCompletionDetail;
- (bool)isShowingCompletionListCompletions;
- (bool)isShowingContinuousReadingList;
- (bool)isShowingFavorites;
- (bool)isShowingInOneThirdMode;
- (bool)isShowingReader;
- (bool)isSuspendedOrSuspending;
- (bool)isViewVisible:(unsigned long long)arg1;
- (id)itemProviderForNavigationBar:(id)arg1;
- (id)itemTitleForCloudSharingController:(id)arg1;
- (bool)keepBarsMinimized;
- (double)lastInteractionTime;
- (id)libraryController;
- (void)linkPreviewProviderWillDismissPreview;
- (id)linkPreviewViewControllerForNavigationIntent:(id)arg1;
- (id)linkPreviewViewControllerForURL:(id)arg1;
- (void)loadBackgroundImageIfNeededForIdentifier:(id)arg1;
- (void)loadCloudTabsForDeviceRestoration:(id)arg1;
- (id)loadProgressObserver;
- (void)loadURL:(id)arg1;
- (id)loadURLInNewTab:(id)arg1 inBackground:(bool)arg2;
- (id)loadURLInNewTab:(id)arg1 inBackground:(bool)arg2 animated:(bool)arg3;
- (id)loadURLInNewTab:(id)arg1 inBackground:(bool)arg2 animated:(bool)arg3 fromExternalApplication:(bool)arg4;
- (id)loadURLInNewTab:(id)arg1 title:(id)arg2 UUID:(id)arg3 inBackground:(bool)arg4 animated:(bool)arg5 fromExternalApplication:(bool)arg6 restoringCloudTab:(bool)arg7;
- (id)makeSidebarButton;
- (void)makeSpaceForTabWithPrivateBrowsing:(bool)arg1 resultHandler:(id /* block */)arg2;
- (id)makeTabOverview;
- (void)markReadingListBookmark:(id)arg1 asRead:(bool)arg2 postNotification:(bool)arg3;
- (void)mergeAllWindows:(id)arg1;
- (void)navigateBackKeyPressed;
- (void)navigateContinuousReadingListToDirection:(unsigned long long)arg1;
- (void)navigateForwardKeyPressed;
- (void)navigationBar:(id)arg1 didCreateLeadingToolbar:(id)arg2 trailingToolbar:(id)arg3;
- (void)navigationBar:(id)arg1 didFinishShowingAvailabilityLabelOfType:(long long)arg2;
- (void)navigationBar:(id)arg1 didProduceNavigationIntent:(id)arg2;
- (void)navigationBar:(id)arg1 extensionButtonTapped:(id)arg2 extension:(id)arg3;
- (void)navigationBar:(id)arg1 multipleExtensionsButtonTapped:(id)arg2;
- (void)navigationBarCancelButtonWasTapped:(id)arg1;
- (void)navigationBarDidLayoutSubviews:(id)arg1;
- (void)navigationBarFormatMenuButtonBecameUnavailable:(id)arg1;
- (void)navigationBarFormatMenuButtonStartedInteraction:(id)arg1;
- (void)navigationBarFormatMenuButtonWasTapped:(id)arg1;
- (void)navigationBarMediaStateMuteButtonWasTapped:(id)arg1;
- (void)navigationBarMetricsDidChange:(id)arg1;
- (void)navigationBarMinimizationChanged;
- (void)navigationBarReaderButtonWasTapped:(id)arg1;
- (void)navigationBarReloadButtonWasTapped:(id)arg1;
- (void)navigationBarStopLoadingButtonWasTapped:(id)arg1;
- (void)navigationBarTranslateButtonWasTapped:(id)arg1;
- (void)navigationBarTranslateButtonWasTappedWithSourceInfo:(id)arg1;
- (id)navigationBarURLForSharing:(id)arg1;
- (void)navigationBarURLWasTapped:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)navigationBarVoiceSearchButtonWasTapped:(id)arg1;
- (id)newCollaborationButton;
- (id)newCollaborationButtonWithActiveTabGroup:(id)arg1 existingShare:(id)arg2;
- (void)newTabAlternativeKeyPressed;
- (void)newTabGroupKeyPressed;
- (void)newTabWithAlternativeOrderingKeyPressed;
- (id)nextContinuousItemDocument;
- (void)nextReadingListItemKeyPressed;
- (id)nextResponder;
- (void)nextTabGroupKeyPressed;
- (void)nextTabKeyPressed:(id)arg1;
- (unsigned long long)numberOfTabsInCurrentTabBar;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)openBookmarkWithUUIDString:(id)arg1;
- (void)openDownload:(id)arg1;
- (void)openLibrary:(id)arg1;
- (void)openNewPrivateTab:(id)arg1;
- (void)openNewPrivateWindow:(id)arg1;
- (void)openNewTab:(id)arg1;
- (void)openNewWindow:(id)arg1;
- (void)openNewWindowInFrontmostProfile:(id)arg1;
- (void)openStartPage;
- (void)openTabGroupOfKind:(long long)arg1 uuidString:(id)arg2;
- (void)openTabWithUUID:(id)arg1;
- (void)overlayDidHide:(id)arg1;
- (long long)overrideBarTintStyleForUnifiedBar;
- (bool)overridesUndoManagerForClosedTabs;
- (id)pageZoomManager;
- (id)pageZoomPreferenceManagerForTabDocument:(id)arg1;
- (void)participants:(id)arg1 didJoinSharedTabGroupWithUUID:(id)arg2;
- (void)participants:(id)arg1 didLeaveSharedTabGroupWithUUID:(id)arg2;
- (void)pasteAndGo:(id)arg1;
- (void)pasteAndSearch:(id)arg1;
- (id)perSitePreferencesVendor;
- (void)performSearchUsingQuery:(id)arg1;
- (void)playbackContentIdentifierDidChangeForSiriReaderPlaybackController:(id)arg1;
- (void)playbackStateDidChangeForSiriReaderPlaybackController:(id)arg1;
- (void)policyDidChangeForDigitalHealthManager:(id)arg1;
- (unsigned long long)popUpPolicyForTabDocument:(id)arg1;
- (void)prepareForTabDocumentWebViewFullscreenMayReturnToInline:(id)arg1;
- (void)prepareIntentInteractionWithCompletionHandler:(id /* block */)arg1;
- (void)prepareToNavigateInTabDocument:(id)arg1;
- (void)presentAutomaticTabClosingAlertController;
- (void)presentBookmarkPickerWithImportHandler:(id /* block */)arg1;
- (void)presentCloudTabsPickerWithPrimaryDeviceUUID:(id)arg1;
- (void)presentDownloadsViewController;
- (void)presentModalViewController:(id)arg1 completion:(id /* block */)arg2;
- (void)presentModalViewController:(id)arg1 fromPopoverSource:(id)arg2;
- (void)presentPrintControllerForTabDocument:(id)arg1 frame:(id)arg2 initiatedByWebContent:(bool)arg3;
- (void)presentPrivacyReport;
- (void)presentPromptForAppReviewPromptManager:(id)arg1;
- (void)presentationControllerDidDismiss:(id)arg1;
- (id)presentedActivityViewController;
- (id)presentedStoreProductViewController;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (long long)previewController:(id)arg1 editingModeForPreviewItem:(id)arg2;
- (bool)previewController:(id)arg1 shouldOpenURL:(id)arg2 forPreviewItem:(id)arg3;
- (id)previewController:(id)arg1 transitionViewForPreviewItem:(id)arg2;
- (void)previewControllerDidDismiss:(id)arg1;
- (id)previousContinuousItemDocument;
- (void)previousReadingListItemKeyPressed;
- (void)previousTabGroupKeyPressed;
- (void)previousTabKeyPressed:(id)arg1;
- (id)printControllerForContentProvider:(id)arg1;
- (void)printKeyPressed;
- (id)processPool;
- (void)productViewControllerDidFinish:(id)arg1;
- (void)profileWindow:(id)arg1 selectProfile:(id)arg2;
- (void)profileWindow:(id)arg1 selectTabGroup:(id)arg2;
- (id)readerControllerForMailContentProvider:(id)arg1;
- (bool)readerShouldBeShownIfPossible;
- (bool)readerViewIsVisibleForMailContentProvider:(id)arg1;
- (void)reinsertBorrowedContentViewForTab:(id)arg1;
- (void)reloadFromOriginKeyPressed;
- (void)reloadKeyPressed;
- (void)reloadSidebarAnimated:(bool)arg1;
- (void)removeAppBannerFromTabDocument:(id)arg1 animated:(bool)arg2;
- (void)removeCachedSearchStateForActiveTabDocument;
- (void)renameTabGroupKeyPressed;
- (void)reopenLastClosedTabPressed;
- (void)resetPageZoomLevelAndFontSize;
- (void)resetWhatsNewInPrivateBrowsingStartPageModule;
- (void)restoreInterfaceAfterElementFullscreen;
- (id)rootViewController;
- (void)rootViewControllerViewDidTransitionFromSize:(struct CGSize { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)rootViewControllerViewTransitionFromSize:(struct CGSize { double x1; double x2; })arg1 includingSidebar:(bool)arg2 animated:(bool)arg3;
- (void)rootViewControllerViewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1;
- (void)saveKeyPressed;
- (void)saveToFilesOperation:(id)arg1 didFinishWithSuccess:(bool)arg2;
- (void)saveToFilesOperation:(id)arg1 presentViewController:(id)arg2;
- (bool)saveToFilesOperationSupportsDownloads:(id)arg1;
- (void)saveWebpageAlternativeKeyPressed;
- (id)savedState;
- (id)scene;
- (void)scene:(id)arg1 continueUserActivity:(id)arg2;
- (void)scene:(id)arg1 didFailToContinueUserActivityWithType:(id)arg2 error:(id)arg3;
- (void)scene:(id)arg1 openURLContexts:(id)arg2;
- (void)scene:(id)arg1 willConnectToSession:(id)arg2 options:(id)arg3;
- (void)scene:(id)arg1 willContinueUserActivityWithType:(id)arg2;
- (void)sceneDidBecomeActive:(id)arg1;
- (void)sceneDidDisconnect:(id)arg1;
- (void)sceneDidEnterBackground:(id)arg1;
- (void)sceneWillEnterForeground:(id)arg1;
- (void)sceneWillResignActive:(id)arg1;
- (void)screenTimeOverlayViewController:(id)arg1 didFinishDismissingBlockingViewController:(id)arg2;
- (void)screenshotService:(id)arg1 generatePDFRepresentationWithCompletion:(id /* block */)arg2;
- (void)scrollSidebarToTopAnimated:(bool)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (bool)scrollViewShouldScrollToTop:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setActiveProfileIdentifier:(id)arg1;
- (void)setAnimationPendingDynamicBarAnimatorSteadyState:(id /* block */)arg1;
- (void)setAppBannerPinnedToTop:(bool)arg1 forTabDocument:(id)arg2;
- (void)setAppReviewPromptManager:(id)arg1;
- (void)setBackgrounded:(bool)arg1;
- (void)setCachedDocumentOnContinuousTransition:(id)arg1;
- (void)setCanFocusNavigationBarURL:(bool)arg1;
- (void)setCookiePolicyMessageReceived;
- (void)setCurrentBookmarksCollection:(id)arg1;
- (void)setFavoritesAreEmbedded:(bool)arg1 animated:(bool)arg2;
- (void)setFavoritesFieldFocused:(bool)arg1 animated:(bool)arg2;
- (void)setFavoritesFieldFocused:(bool)arg1 forVoiceSearch:(bool)arg2 animated:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)setFavoritesState:(long long)arg1;
- (void)setFavoritesState:(long long)arg1 animated:(bool)arg2;
- (void)setFavoritesState:(long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)setFavoritesState:(long long)arg1 forVoiceSearch:(bool)arg2 animated:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)setIntentSceneConfigurationCompletion:(id /* block */)arg1;
- (void)setKeepBarsMinimized:(bool)arg1;
- (void)setLastInteractionTime:(double)arg1;
- (void)setNeedsSnapshotUpdateForActiveTab;
- (void)setNeedsSnapshotUpdateForActiveTabIfTabIsBlank;
- (void)setNextContinuousItemDocument:(id)arg1;
- (void)setOverridesUndoManagerForClosedTabs:(bool)arg1;
- (void)setPresentedStoreProductViewController:(id)arg1;
- (void)setPresentingModalBookmarksController:(bool)arg1 withExclusiveCollection:(id)arg2 bookmarkUUIDString:(id)arg3 animated:(bool)arg4;
- (void)setPreviousContinuousItemDocument:(id)arg1;
- (void)setPrivateBrowsingEnabled:(bool)arg1;
- (void)setProgressEnabled:(bool)arg1;
- (void)setReaderModeEnabled:(bool)arg1;
- (void)setReaderShouldBeShownIfPossible:(bool)arg1;
- (void)setReaderViewStale:(bool)arg1;
- (void)setScrollViewZoomEnabled:(bool)arg1;
- (void)setShouldKeepKeyboardFocused:(bool)arg1;
- (void)setShowingCrashBanner:(bool)arg1 animated:(bool)arg2;
- (void)setShowingReader:(bool)arg1 animated:(bool)arg2;
- (void)setShowingReader:(bool)arg1 animated:(bool)arg2 forTabDocument:(id)arg3;
- (void)setSuppressWebExtensionEvents:(bool)arg1;
- (void)setTabDocumentPlayingPIPVideo:(id)arg1;
- (void)setTextRangeToRestoreAfterParsecCardDismissal:(id)arg1;
- (void)setUpWithURL:(id)arg1 launchOptions:(id)arg2;
- (void)setUsesNarrowLayout:(bool)arg1;
- (void)setView:(unsigned long long)arg1 visible:(bool)arg2;
- (void)setWantsUnifiedFieldFocused:(bool)arg1;
- (void)setZoomScale:(float)arg1;
- (void)share:(id)arg1;
- (void)shareDidUpdateForTabGroupWithUUID:(id)arg1;
- (id)shortcutController;
- (bool)shouldDeferHistoryUpdatesForWKWebView:(id)arg1;
- (bool)shouldIncreaseTopSpacingForStartPageController:(id)arg1;
- (bool)shouldKeepKeyboardFocused;
- (bool)shouldReportUnifiedTabBarAnalytics;
- (bool)shouldShowTurnOnLockedPrivateBrowsingSheet;
- (bool)shouldShowWhatsNewInPrivateBrowsingSheet;
- (bool)shouldSnapshotActiveTab;
- (bool)shouldStayInFocusedTabGroupForExternalLinks;
- (void)showBars;
- (void)showBookmarksCollectionKeyPressed;
- (void)showBookmarksPanelWithNonAnimatedTransition;
- (void)showCloudTabsCollectionKeyPressed;
- (void)showCrashBanner:(id)arg1 animated:(bool)arg2;
- (bool)showDemoModeFeatureDisabledAlert;
- (void)showExtensionPermissionBannerForExtensions:(id)arg1;
- (void)showHistoryCollectionAlternativeKeyPressed;
- (void)showHistoryCollectionKeyPressed;
- (void)showPopupForWebExtension:(id)arg1;
- (void)showPrivateBrowsingPrivacyProtectionsBanner:(id)arg1;
- (void)showReaderForTabDocument:(id)arg1 animated:(bool)arg2;
- (void)showReadingListAutomaticArchiveAlertIfNeededWithCompletion:(id /* block */)arg1;
- (void)showReadingListCollectionKeyPressed;
- (void)showSharedWithYouCollectionKeyPressed;
- (void)showTabGroupPicker:(id)arg1;
- (void)showTabView;
- (void)showWebExtensionBanner:(id)arg1;
- (id)sidebarAction;
- (id)sidebarContentViewControllerForSidebarUIProxy:(id)arg1;
- (void)sidebarTrailingButtonWasTapped;
- (id)sidebarUIProxy;
- (id)siriLinkCoordinator;
- (void)siriReadThisMenuInvocation;
- (void)siriReadThisVocalInvocation;
- (long long)siriReaderPlaybackStateForActiveTab;
- (void)snapshotTabDocument:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 topBackdropHeight:(double)arg3 options:(unsigned long long)arg4 completion:(id /* block */)arg5;
- (id)speculativeLoadDocument;
- (bool)startPageControllerActiveTabIsBlank:(id)arg1;
- (void)statusBarHeightChanged;
- (bool)supportsPrivacyReport;
- (bool)suppressWebExtensionEvents;
- (void)switchFromTabDocument:(id)arg1 toTabDocument:(id)arg2;
- (void)switchToProfileKeyPressed:(id)arg1;
- (void)switchToTabKeyPressed:(id)arg1;
- (void)switchToTabWithUUID:(id)arg1 inWindowWithUUID:(id)arg2 forTabGroupWithUUID:(id)arg3;
- (long long)tabBarDisplayMode;
- (bool)tabBarIsCurrentlyScrollable;
- (id)tabBarManager;
- (void)tabBarManager:(id)arg1 didCreateTabBar:(id)arg2;
- (void)tabBarManagerDidUpdateDisplayMode:(id)arg1;
- (void)tabCollectionViewDidDismiss:(id)arg1;
- (void)tabCollectionViewWillDismiss:(id)arg1;
- (void)tabCollectionViewWillPresent:(id)arg1;
- (id)tabController;
- (void)tabController:(id)arg1 didSwitchFromTabDocument:(id)arg2 toTabDocument:(id)arg3;
- (void)tabController:(id)arg1 didSwitchFromTabGroup:(id)arg2;
- (void)tabControllerDocumentCountDidChange:(id)arg1;
- (bool)tabDocument:(id)arg1 canShowDownload:(id)arg2;
- (void)tabDocument:(id)arg1 didChangePIPState:(bool)arg2;
- (void)tabDocument:(id)arg1 didCreateNewTabDocument:(id)arg2;
- (void)tabDocument:(id)arg1 didCreatePreviewDocument:(id)arg2;
- (void)tabDocument:(id)arg1 didDetectReaderAvailability:(bool)arg2;
- (void)tabDocument:(id)arg1 didExtractArticleText:(id)arg2 withMetadata:(id)arg3;
- (void)tabDocument:(id)arg1 didFinishLoadingWithError:(bool)arg2;
- (void)tabDocument:(id)arg1 dismissViewControllerAnimated:(id)arg2;
- (void)tabDocument:(id)arg1 presentViewControllerAnimated:(id)arg2;
- (bool)tabDocumentCanBecomeCurrentUserActivity:(id)arg1;
- (bool)tabDocumentCanBeginInputSessionForStreamlinedLogin:(id)arg1;
- (bool)tabDocumentCanCloseWindow:(id)arg1;
- (bool)tabDocumentCanDisplayModalUI:(id)arg1;
- (bool)tabDocumentCanDownloadFile:(id)arg1;
- (bool)tabDocumentCanFindNextOrPrevious:(id)arg1;
- (bool)tabDocumentCanRedirectToExternalApplication:(id)arg1;
- (bool)tabDocumentCanShowJavaScriptAlertConfirmOrTextInput:(id)arg1;
- (void)tabDocumentCommitPreviewedDocument:(id)arg1;
- (void)tabDocumentCommitPreviewedDocumentAsNewTab:(id)arg1 inBackground:(bool)arg2;
- (void)tabDocumentDidAddAlert:(id)arg1;
- (void)tabDocumentDidBeginNavigationGesture:(id)arg1;
- (void)tabDocumentDidCancelRedirectToExternalApplication:(id)arg1;
- (void)tabDocumentDidChangeCanStopLoadingState:(id)arg1;
- (void)tabDocumentDidChangeLocationWithinPageForMainFrame:(id)arg1;
- (void)tabDocumentDidChangeMediaState:(id)arg1;
- (void)tabDocumentDidChangeSafeAreaInsets:(id)arg1;
- (void)tabDocumentDidChangeSafeAreaShouldAffectObscuredInsets:(id)arg1;
- (void)tabDocumentDidClearLibraryType:(id)arg1;
- (void)tabDocumentDidCommitNavigation:(id)arg1;
- (void)tabDocumentDidCompleteCheckForAppBanner:(id)arg1;
- (void)tabDocumentDidDimissPreviewedDocument:(id)arg1;
- (void)tabDocumentDidEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;
- (void)tabDocumentDidStartLoading:(id)arg1;
- (void)tabDocumentDidUpdateBackForward:(id)arg1;
- (void)tabDocumentDidUpdatePersistentState:(id)arg1;
- (void)tabDocumentDidUpdatePinned:(id)arg1;
- (void)tabDocumentDidUpdateShowingContinuous:(id)arg1;
- (void)tabDocumentDidUpdateThemeColor:(id)arg1;
- (void)tabDocumentDidUpdateTitle:(id)arg1;
- (void)tabDocumentDidUpdateURL:(id)arg1;
- (void)tabDocumentFluidProgressRocketAnimationDidComplete:(id)arg1;
- (bool)tabDocumentIsBackgroundPreloading:(id)arg1;
- (long long)tabDocumentOrderIndex:(id)arg1;
- (id)tabDocumentPlayingPIPVideo;
- (id)tabDocumentSavedSessionStateData:(id)arg1;
- (void)tabDocumentShouldBecomeActive:(id)arg1;
- (void)tabDocumentShouldCloseAndSwitchToParentTab:(id)arg1;
- (bool)tabDocumentShouldDeferAppBannerRemoval:(id)arg1;
- (bool)tabDocumentShouldFillStringForFind:(id)arg1;
- (bool)tabDocumentShouldHandleAuthentication:(id)arg1;
- (bool)tabDocumentShouldHandleCertificateError:(id)arg1;
- (void)tabDocumentWillBeginDragSession:(id)arg1;
- (void)tabDocumentWillDisableLinkPreview;
- (void)tabDocumentWillDismissInlineDialog:(id)arg1;
- (void)tabDocumentWillEndDragSession:(id)arg1;
- (void)tabDocumentWillEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;
- (void)tabDocumentWillShowInlineDialog:(id)arg1;
- (id)tabDocumentsForActiveTabThatCanReceiveMessages;
- (id)tabGroupManager;
- (void)tabGroupManager:(id)arg1 didBeginAcceptingTabGroupShareWithMetadata:(id)arg2;
- (void)tabGroupManager:(id)arg1 didFinishAcceptingTabGroupShareWithMetadata:(id)arg2 result:(long long)arg3;
- (void)tabGroupManager:(id)arg1 didUpadateActiveParticipants:(id)arg2 inTabGroupWithUUID:(id)arg3;
- (void)tabGroupManager:(id)arg1 didUpdateProfileWithIdentifier:(id)arg2 difference:(id)arg3;
- (void)tabGroupManager:(id)arg1 didUpdateTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 selectProfileIdentifierForShareMetadata:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)tabGroupManagerDidUpdateProfiles:(id)arg1;
- (id)tabGroupProvider;
- (id)tabHoverPreview;
- (bool)tabItem:(id)arg1 matchesSearchText:(id)arg2;
- (void)tabOverviewWillShiftScrollPositionForBoundsChange:(id)arg1;
- (bool)tabViewPinchActive;
- (id)tabViewPinchRecognizer;
- (bool)tabsShowOnlyIcons;
- (void)takeFindStringKeyPressed;
- (id)textRangeToRestoreAfterParsecCardDismissal;
- (void)toggleAlwaysShowBookmarksBarMessageReceived;
- (void)toggleBookmarksKeyPressed;
- (void)toggleBookmarksPresentation;
- (void)toggleDownloadsKeyPressed;
- (void)togglePrivateBrowsingEnabled;
- (void)toggleReaderKeyPressed;
- (void)toggleReaderMode;
- (void)toggleShowWebpageStatusBar;
- (void)toggleShowingFavoritesBarKeyPressed;
- (void)toggleShowingReaderForUserAction;
- (void)toggleTabView;
- (void)toggleTabViewKeyPressed;
- (void)toggleVoiceSearch;
- (double)topBarsHeightForSnapshotGenerator:(id)arg1;
- (id)undoManager;
- (void)unifiedTabBarActiveTabWasTapped;
- (long long)unifiedTabBarLayoutStyle;
- (id)universalSearchSession;
- (id)unnamedTabGroup;
- (void)updateApplePayPreferences;
- (void)updateCollaborationButton;
- (void)updateContinuousPreviewViewFrame;
- (void)updateDynamicBarGeometry;
- (void)updateExposedScrollViewRect;
- (void)updateFavoritesForNewDocument;
- (void)updateInsetsForBackgroundWebView:(id)arg1;
- (void)updateInterface;
- (void)updateJavaScriptPreferences;
- (long long)updatePolicyForStartPageController:(id)arg1;
- (void)updatePopoverPositionAfterSizeTransition;
- (void)updatePresenceForActiveUser;
- (void)updatePrivateBrowsingAvailabilityWithCompletionHandler:(id /* block */)arg1;
- (void)updatePullToRefreshIsEnabled;
- (void)updateScrollToTopView;
- (void)updateSearchEngineIfNeeded;
- (void)updateShowingTabBarAnimated:(bool)arg1;
- (void)updateSpeculativeLoadingPreferences;
- (void)updateTabGroupButtonsVisibility;
- (void)updateTabGroupHeading;
- (void)updateTabOverviewButton;
- (void)updateTabViewPinchRecognizer;
- (void)updateUnifiedBarVisibility;
- (id)userActivityController;
- (void)userDefaultsDidChangeValueForKey:(id)arg1;
- (bool)usesNarrowLayout;
- (bool)usesTabBar;
- (void)validateCommand:(id)arg1;
- (void)validateExtensionToolbarItemsInWindow:(id)arg1;
- (double)verticalScrollOffsetForReaderViewInTabDocument:(id)arg1;
- (id)viewControllerToPresentFrom;
- (bool)wantsUnifiedFieldFocused;
- (void)webExtensionButtonTapped:(id)arg1 extension:(id)arg2;
- (void)webExtensionKeyCommandPressed:(id)arg1;
- (struct CGSize { double x1; double x2; })webExtensionTabSize;
- (void)webExtensionWasRemotelyEnabled:(id)arg1;
- (id)webExtensionWindowForTabDocument:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })webExtensionWindowGeometry;
- (id)webExtensionWindowWithID:(double)arg1;
- (id)webExtensionWindows;
- (void)webExtensionsButtonTapped:(id)arg1;
- (id)webView;
- (void)webViewDidFirstVisuallyNonEmptyLayoutForTabDocument:(id)arg1;
- (id)webViewForMailContentProvider:(id)arg1;
- (void)willEnterForeground;
- (void)willResignActive;
- (void)willSelectTabGroupWithUUID:(id)arg1;
- (void)willStartLoadFromUserTap:(id)arg1;
- (void)windowScene:(id)arg1 didUpdateCoordinateSpace:(id)arg2 interfaceOrientation:(long long)arg3 traitCollection:(id)arg4;
- (void)windowScene:(id)arg1 performActionForShortcutItem:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)windowScene:(id)arg1 userDidAcceptCloudKitShareWithMetadata:(id)arg2;
- (struct CGSize { double x1; double x2; })windowSize;
- (id)windowState;
- (id)windowStateData;
- (id)wkPreferences;
- (void)writePrivateBrowsingEnabled:(bool)arg1;
- (float)zoomScale;

@end
