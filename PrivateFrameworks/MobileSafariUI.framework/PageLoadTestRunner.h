
@interface PageLoadTestRunner : NSObject {
    double  _allSubresourcesFinishedLoadingDelay;
    BrowserController * _browserController;
    int  _cacheClearDirective;
    bool  _checkForWorldLeaks;
    bool  _collectHeapStatistics;
    unsigned int  _currentTestIteration;
    <PageLoadTestRunnerDelegate> * _delegate;
    bool  _disableProgressBar;
    bool  _failFast;
    double  _initialDelay;
    bool  _loadURLInNewTab;
    NSString * _logFile;
    NSOutputStream * _logStream;
    bool  _measureTime;
    NSString * _outputFilename;
    double  _pageActionInterval;
    NSMutableArray * _pageLoadArray;
    double  _pageRestInterval;
    double  _pageTimeout;
    NSMutableArray * _pagesNeedingMemoryWarningSent;
    bool  _resetsZoomBetweenPages;
    double  _savedDefaultTimeoutInterval;
    unsigned long long  _skipCount;
    bool  _started;
    NSString * _suiteName;
    unsigned long long  _tabCount;
    unsigned int  _testIterations;
    NSString * _testName;
    unsigned int  _version;
}

@property (nonatomic, readonly) BrowserController *browserController;
@property (nonatomic) int cacheClearDirective;
@property (nonatomic) bool checkForWorldLeaks;
@property (nonatomic) bool collectHeapStatistics;
@property (nonatomic) <PageLoadTestRunnerDelegate> *delegate;
@property (nonatomic) bool disableProgressBar;
@property (nonatomic) bool failFast;
@property (nonatomic) bool loadURLInNewTab;
@property (nonatomic, retain) NSString *logFile;
@property (nonatomic, retain) NSString *outputFilename;
@property (nonatomic) double pageActionInterval;
@property (nonatomic) double pageRestInterval;
@property (nonatomic) double pageTimeout;
@property (nonatomic) bool resetsZoomBetweenPages;
@property (nonatomic) unsigned long long skipCount;
@property (nonatomic, retain) NSString *suiteName;
@property (nonatomic) unsigned long long tabCount;
@property (nonatomic, copy) NSString *testName;

+ (void)addLeakToArray:(id)arg1 count:(int)arg2 name:(id)arg3;
+ (bool)closingBrowserWindowsForWorldLeakTest;
+ (struct { int x1; int x2; })heapStatistics;
+ (id)worldLeaksString;

- (void).cxx_destruct;
- (void)_checkRedirect:(id)arg1;
- (void)_closeLogStream;
- (void)_handleActionTimer:(id)arg1;
- (id)_pageLoadForTabDocument:(id)arg1;
- (void)_pageRestExpired:(id)arg1;
- (void)_pageTimeoutExpired:(id)arg1;
- (void)_startNextPageNow;
- (void)_updatePageLoad:(id)arg1 stats:(id)arg2;
- (void)addPageURL:(id)arg1 withProcessSwap:(bool)arg2;
- (id)browserController;
- (int)cacheClearDirective;
- (bool)checkForWorldLeaks;
- (bool)checkForWorldLeaksNow;
- (void)checkForWorldLeaksSoon;
- (void)clearCacheWithURL:(id)arg1;
- (void)closeBrowserWindows;
- (void)closeBrowserWindowsAndFinishCheckingForWorldLeaks;
- (bool)collectHeapStatistics;
- (void)dealloc;
- (id)delegate;
- (bool)disableProgressBar;
- (bool)failFast;
- (void)finish;
- (bool)finishCheckingForWorldLeaks;
- (void)finishPage:(id)arg1 stats:(id)arg2 error:(id)arg3;
- (void)finishedTestPage:(id)arg1;
- (void)finishedTestRunner;
- (void)finishedTestRunnerIteration;
- (id)initWithTestName:(id)arg1 browserController:(id)arg2;
- (bool)loadTestSuiteFile:(id)arg1;
- (bool)loadURLInNewTab;
- (void)log:(id)arg1;
- (id)logFile;
- (id)outputFilename;
- (double)pageActionInterval;
- (double)pageRestInterval;
- (double)pageTimeout;
- (bool)performActionForPage:(id)arg1;
- (void)removeURLsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)resetsZoomBetweenPages;
- (void)setCacheClearDirective:(int)arg1;
- (void)setCheckForWorldLeaks:(bool)arg1;
- (void)setCollectHeapStatistics:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableProgressBar:(bool)arg1;
- (void)setExistingProperty:(id)arg1 to:(id)arg2;
- (void)setFailFast:(bool)arg1;
- (void)setLoadURLInNewTab:(bool)arg1;
- (void)setLogFile:(id)arg1;
- (void)setOutputFilename:(id)arg1;
- (void)setPageActionInterval:(double)arg1;
- (void)setPageRestInterval:(double)arg1;
- (void)setPageTimeout:(double)arg1;
- (void)setResetsZoomBetweenPages:(bool)arg1;
- (void)setSkipCount:(unsigned long long)arg1;
- (void)setSuiteName:(id)arg1;
- (void)setTabCount:(unsigned long long)arg1;
- (void)setTestName:(id)arg1;
- (void)setTestOptions:(id)arg1;
- (unsigned long long)skipCount;
- (void)start;
- (void)startNextPage;
- (bool)startPageAction:(id)arg1;
- (void)startingTestPage:(id)arg1;
- (void)startingTestRunner;
- (id)suiteName;
- (unsigned long long)tabCount;
- (id)testName;

@end
