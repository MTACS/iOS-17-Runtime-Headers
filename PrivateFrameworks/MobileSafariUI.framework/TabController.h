
@interface TabController : NSObject <PinnedTabsContainer, PinnedTabsObserving, SFTabHoverPreviewControllerDelegate, TabBarDelegate, TabBarManagerObserving, TabDocumentDragDropDataSource, TabGroupProvider, TabGroupSwitcherViewControllerDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, UITextFieldDelegate, WBSTabGroupConfirmationAlertDelegate, WBSTabOrderProvider, WBTabGroupManagerObserver, WBTabGroupSyncAgentSyncObserver> {
    NSString * _activeTabGroupUUID;
    BrowserController * _browserController;
    NSUUID * _browserWindowUUID;
    CKContextCompleter * _contextCompleter;
    bool  _didFinishTabGroupSetup;
    bool  _didReadWindowState;
    bool  _didReceiveFirstCloudTabDeviceUpdateNotification;
    bool  _didRestoreCloudTabsForEducationDevice;
    bool  _didSelectAcceptedSharedTabGroup;
    NSHashTable * _documentObservers;
    NSHashTable * _documentObserversToReceiveUpdatesDidEnd;
    long long  _documentUpdateCount;
    NSMutableArray * _expandedTabGroupUUIDs;
    SFFluidTabOverviewViewController * _fluidTabOverviewViewController;
    bool  _flushPendingSnapshots;
    id /* block */  _flushPendingSnapshotsCompletion;
    bool  _isClosingDocuments;
    NSString * _lastSearchTerm;
    TabDocument * _normalActiveTabDocument;
    NSMutableArray * _normalTabDocuments;
    NSMutableDictionary * _originalToReplacementUUIDMap;
    PinnedTabsManager * _pinnedTabsManager;
    id /* block */  _postponedSnapshotInvalidationBlock;
    id /* block */  _postponedSnapshotInvalidationCondition;
    TabDocument * _privateActiveTabDocument;
    long long  _privateBrowsingMode;
    NSMutableArray * _privateTabDocuments;
    NSTimer * _saveStateTimer;
    _SFBrowserSavedState * _savedState;
    NSArray * _searchTermWords;
    bool  _shouldDeferSnapshotRequest;
    bool  _shouldTogglePrivateBrowsingOnSplit;
    bool  _showsTabGroupNameSuggestions;
    TabSnapshotCache * _snapshotCache;
    bool  _snapshotInvalidationIsPostponed;
    bool  _snapshotsAreEnabled;
    NSTimer * _stateValidateTimer;
    bool  _suppressSidebarReloadAnimation;
    bool  _suppressTabBarAnimation;
    bool  _switchingActiveDocument;
    TabBar * _tabBar;
    unsigned long long  _tabBarItemsFixed;
    TabBarManager * _tabBarManager;
    long long  _tabDisplayMode;
    TabDocument * _tabDocumentBeingDragged;
    TabDocument * _tabDocumentBeingHiddenFromTabView;
    NSArray * _tabDocumentsThatShouldSuppressOnCreatedEvents;
    NSArray * _tabDocumentsToKeepVisible;
    WBTabGroupManager * _tabGroupManager;
    NSArray * _tabGroupSuggestions;
    TabGroupSwitcherViewController * _tabGroupSwitcherViewController;
    WBSTabOrderManager * _tabOrderManager;
    TabOverview * _tabOverview;
    _SWCollaborationButtonView * _tabOverviewCollaborationButton;
    TabDocument * _tabShowingPreview;
    long long  _tabThumbnailCollectionViewStyle;
    unsigned long long  _tabViewItemsFixed;
    unsigned long long  _tabsClosedWhileTabViewPresentedCount;
    TabCloseUndoGroup * _undoGroup;
    NSUndoManager * _undoManager;
    NSTimer * _updateContinuityTimer;
    long long  _updateTabsSuppressionCount;
    NSMapTable * _uuidToTabDocumentMap;
    unsigned long long  _veryRecentlyClosedTabCount;
    NSTimer * _veryRecentlyClosedTabCountInvalidationTimer;
    WBWindowState * _windowState;
}

@property (nonatomic, readonly) NSString *activeLibraryType;
@property (nonatomic, readonly, copy) WBProfile *activeProfile;
@property (nonatomic, readonly, copy) NSString *activeProfileIdentifier;
@property (nonatomic, retain) TabDocument *activeTabDocument;
@property (nonatomic, readonly, copy) WBTabGroup *activeTabGroup;
@property (nonatomic, copy) NSString *activeTabGroupUUID;
@property (nonatomic, readonly, copy) NSSet *allSnapshotIdentifiers;
@property (nonatomic, readonly) NSArray *allSyntheticBookmarkFolders;
@property (nonatomic, readonly, copy) NSArray *allTabDocuments;
@property (nonatomic, readonly) NSArray *allTabGroups;
@property (nonatomic, readonly) bool canAddNewTabForCurrentBrowsingMode;
@property (nonatomic, readonly) bool canCloseOtherTabs;
@property (nonatomic, readonly) bool canCloseTab;
@property (nonatomic, readonly) bool canCreateTabGroupFromCurrentTabs;
@property (nonatomic, readonly) bool canRenameActiveTabGroup;
@property (nonatomic, readonly) CloudTabStore *cloudTabStore;
@property (getter=isControlledByAutomation, nonatomic, readonly) bool controlledByAutomation;
@property (nonatomic, readonly) bool createTabGroupAlertIsPresented;
@property (nonatomic, readonly, copy) NSArray *currentTabDocuments;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSString *deviceIdentifier;
@property (nonatomic, readonly) WBTabGroup *focusedTabGroup;
@property (nonatomic, readonly) bool hasMultipleProfiles;
@property (nonatomic, readonly) bool hasTabBar;
@property (nonatomic, readonly) bool hasTabsThatShouldBeObscuredForDigitalHealth;
@property (nonatomic, readonly) bool hasUnreadTab;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TabDocument *hiddenPrivateTabDocumentWhenShowingPrivateBrowsingExplanationText;
@property (nonatomic, readonly) UIImage *iconForSharingActiveTabGroup;
@property (nonatomic, readonly) unsigned long long indexOfSelectedTab;
@property (nonatomic, readonly) bool isInDefaultProfile;
@property (nonatomic, readonly) bool isPrivateBrowsingAndLocked;
@property (nonatomic, readonly) UIMenu *menuForSwitchingProfiles;
@property (nonatomic, readonly) NSString *moveLocalTabsToNewGroupTitle;
@property (nonatomic, readonly) NSArray *namedTabGroups;
@property (nonatomic, readonly) UIMenu *newTabGroupMenu;
@property (nonatomic, readonly) NSSet *nonActiveTabGroupsInCurrentBrowsingMode;
@property (nonatomic, retain) TabDocument *normalActiveTabDocument;
@property (nonatomic, readonly, copy) NSArray *normalUnpinnedTabDocuments;
@property (nonatomic, readonly) unsigned long long numberOfCurrentNonHiddenTabs;
@property (nonatomic, readonly) unsigned long long numberOfTabs;
@property (nonatomic, readonly) unsigned long long numberOfTabsForCloseAllAction;
@property (nonatomic, readonly, copy) NSArray *pinnedTabDocuments;
@property (nonatomic, retain) PinnedTabsManager *pinnedTabsManager;
@property (nonatomic, copy) id /* block */ postponedSnapshotInvalidationCondition;
@property (nonatomic, retain) TabDocument *privateActiveTabDocument;
@property (getter=isPrivateBrowsingEnabled, nonatomic) bool privateBrowsingEnabled;
@property (nonatomic) long long privateBrowsingMode;
@property (nonatomic, readonly, copy) NSArray *privateTabDocuments;
@property (nonatomic, readonly, copy) WBTabGroup *privateTabGroupIfAvailable;
@property (nonatomic, readonly, copy) NSArray *privateUnpinnedTabDocuments;
@property (nonatomic, readonly) <WBSCloudTabDeviceProvider> *profileCloudTabStore;
@property (nonatomic, readonly, copy) NSArray *profiles;
@property (nonatomic, retain) _SFBrowserSavedState *savedState;
@property (nonatomic, readonly) <WBSOrderedTab> *selectedTabForTabOrderProvider;
@property (nonatomic, readonly) CKShare *shareRecordForActiveTabGroup;
@property (nonatomic) bool shouldTogglePrivateBrowsingOnSplit;
@property (getter=isShowingLibraryDocument, nonatomic, readonly) bool showingLibraryDocument;
@property (getter=isShowingTabView, nonatomic, readonly) bool showingTabView;
@property (nonatomic, readonly) TabDocument *singleUnpinnedBlankTab;
@property (nonatomic) bool snapshotInvalidationIsPostponed;
@property (nonatomic) bool snapshotsAreEnabled;
@property (nonatomic, readonly, copy) NSString *startPageBackgroundImageIdentifier;
@property (readonly) Class superclass;
@property (nonatomic) TabBar *tabBar;
@property (nonatomic) TabBarManager *tabBarManager;
@property (nonatomic, readonly) <TabCollectionView> *tabCollectionView;
@property (nonatomic) long long tabDisplayMode;
@property (nonatomic, readonly) TabDocument *tabDocumentBeingActivated;
@property (nonatomic, readonly) TabDocument *tabDocumentForSpotlightSearch;
@property (nonatomic, readonly, copy) NSArray *tabDocuments;
@property (nonatomic, readonly) NSArray *tabDocumentsMatchingSearchTerm;
@property (nonatomic, readonly) UIMenu *tabExposeMenu;
@property (nonatomic, readonly) WBTabGroupManager *tabGroupManager;
@property (nonatomic) bool tabGroupOverviewIsPresented;
@property (nonatomic, readonly) NSArray *tabGroups;
@property (nonatomic, readonly) WBSTabOrderManager *tabOrderManager;
@property (nonatomic, readonly, retain) TabOverview *tabOverview;
@property (nonatomic, readonly) _SWCollaborationButtonView *tabOverviewCollaborationButton;
@property (nonatomic, readonly) <TabThumbnailCollectionView> *tabThumbnailCollectionView;
@property (nonatomic) long long tabThumbnailCollectionViewStyle;
@property (nonatomic, readonly) UIView<TabContainerView> *tabViewContainerView;
@property (nonatomic) bool tabViewDefersActivation;
@property (nonatomic, readonly) NSUndoManager *undoManager;
@property (nonatomic, readonly, copy) WBTabGroup *unnamedTabGroup;
@property (nonatomic, readonly) id /* block */ unnamedTabGroupDisplayTitleProvider;
@property (nonatomic, readonly) NSArray *unnamedTabGroups;
@property (nonatomic, readonly, copy) NSArray *unpinnedTabDocuments;
@property (nonatomic, readonly) bool updatingTabGroupTabs;
@property (nonatomic, readonly) long long visibleTabCollectionViewType;
@property (nonatomic, retain) WBWindowState *windowState;

- (void).cxx_destruct;
- (void)_beganSharingTabGroup:(id)arg1;
- (void)_cancelVeryRecentlyClosedTabCountInvalidationTimer;
- (void)_cloudTabsDidUpdate:(id)arg1;
- (id)_currentTabs;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)_dismissTabView;
- (void)_lockedPrivateBrowsingStateDidChange:(id)arg1;
- (void)_newTabFromTabViewButton;
- (void)_redoCloseTabsWithUUIDs:(id)arg1;
- (void)_saveStateFromTimer:(id)arg1;
- (void)_undoCloseTabs:(id)arg1;
- (void)_updateUserActivityTimerFired;
- (void)_validateSavedState:(id)arg1;
- (id)activeLibraryType;
- (id)activeProfile;
- (id)activeProfileIdentifier;
- (id)activeTabDocument;
- (id)activeTabGroup;
- (id)activeTabGroupUUID;
- (void)addDocumentObserver:(id)arg1;
- (id)addNewTabGroupWithTitle:(id)arg1 fromExistingTabs:(bool)arg2;
- (id)addNewTabGroupWithTitle:(id)arg1 fromTabs:(id)arg2;
- (void)addSnapshotCacheObserver:(id)arg1;
- (id)allSnapshotIdentifiers;
- (id)allSyntheticBookmarkFolders;
- (id)allTabDocuments;
- (id)allTabGroups;
- (void)attemptToSelectTabGroupFromShare:(id)arg1;
- (id)blankTabDocumentToReuse;
- (id)blankTabDocumentToReuseAllowingReorder:(bool)arg1;
- (id)browserControllerContainingLocalTabGroupUUID:(id)arg1;
- (id)cachedContentImageForTabDocument:(id)arg1;
- (bool)canAddNewTabForCurrentBrowsingMode;
- (bool)canAddNewTabForPrivateBrowsing:(bool)arg1;
- (bool)canCloseOtherTabs;
- (bool)canCloseTab;
- (bool)canCreateTabGroupFromCurrentTabs;
- (bool)canRenameActiveTabGroup;
- (unsigned long long)capacityForTabSnapshotCache:(id)arg1;
- (void)clearBrowserController;
- (void)closeAllOpenTabsAnimated:(bool)arg1;
- (void)closeAllOpenTabsAnimated:(bool)arg1 temporarily:(bool)arg2;
- (void)closeAllTabsForTabGroupSwitcher:(id)arg1;
- (void)closeOtherTabs;
- (void)closeTab;
- (void)closeTabDocument:(id)arg1 animated:(bool)arg2;
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;
- (void)closeTabDocuments:(id)arg1;
- (void)closeTabDocuments:(id)arg1 animated:(bool)arg2;
- (void)closeTabDocuments:(id)arg1 animated:(bool)arg2 allowAddingToRecentlyClosedTabs:(bool)arg3 showAutoCloseTabsAlert:(bool)arg4;
- (void)closeTabGroup:(id)arg1;
- (void)closeTabs:(id)arg1 inInactiveTabGroup:(id)arg2;
- (void)closeTabsAutomaticallyIfNecessary;
- (id)cloudTabStore;
- (id)contextMenuConfigurationForTab:(id)arg1 inTabGroup:(id)arg2;
- (id)contextMenuConfigurationForTabGroup:(id)arg1 variant:(long long)arg2;
- (id)copyBookmark:(id)arg1 toPerTabGroupBookmarkFolderWithID:(int)arg2;
- (void)createNewTabGroup;
- (bool)createTabGroupAlertIsPresented;
- (void)createTabGroupFromExistingTabs:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)currentItemForTabOverview:(id)arg1;
- (id)currentTabDocuments;
- (void)deactivateAllUsageTrackingInformationIfNecessary;
- (void)dealloc;
- (void)deleteScopedBookmarkWithUUID:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)deviceIdentifier;
- (void)didBeginTrackingSession:(id)arg1;
- (void)didEndTrackingSession:(id)arg1;
- (void)didFetchRecentlyAcceptedSharedTabGroupWithUUID:(id)arg1 acceptedShareDate:(id)arg2;
- (void)didGainOwnershipOfTabDocument:(id)arg1;
- (void)didSelectProfileWithIdentifier:(id)arg1;
- (void)didTransitionTabView;
- (void)didUpdateTabDocuments;
- (void)dismissOpenTabGroupAlertIfNeeded;
- (void)dismissTabGroupSwitcher:(id)arg1;
- (void)displayAlreadyAcceptedSharedTabGroupWithUUID:(id)arg1;
- (id)dragItemForTab:(id)arg1 inTabGroup:(id)arg2;
- (id)duplicateTabDocument:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })effectiveSafeAreaInsetsForTabCollectionView:(id)arg1;
- (void)enumerateTabCollectionViewsWithBlock:(id /* block */)arg1;
- (void)evictTabDocument:(id)arg1;
- (id)existingPersistedTitleForTabDocument:(id)arg1;
- (void)flushPendingSnapshotsWithCompletion:(id /* block */)arg1;
- (id)focusedTabGroup;
- (id)globalPinnedTabsForTabGroup:(id)arg1;
- (bool)hasMultipleProfiles;
- (bool)hasTabBar;
- (bool)hasTabsThatShouldBeObscuredForDigitalHealth;
- (bool)hasUnreadTab;
- (id)hiddenPrivateTabDocumentWhenShowingPrivateBrowsingExplanationText;
- (void)hideTabDocuments:(id)arg1;
- (id)iconForSharingActiveTabGroup;
- (id)iconForSharingTabGroup:(id)arg1;
- (id)iconForTabUUID:(id)arg1;
- (id)imageForProfile:(id)arg1;
- (id)imageForTabGroup:(id)arg1;
- (unsigned long long)indexForTab:(id)arg1;
- (unsigned long long)indexOfSelectedTab;
- (id)initWithBrowserController:(id)arg1;
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(bool)arg1;
- (void)insertNewBlankTabDocumentAnimated:(bool)arg1;
- (void)insertNewTabDocument:(id)arg1 forcingOrderAfterTabDocument:(id)arg2 inBackground:(bool)arg3 animated:(bool)arg4;
- (void)insertNewTabDocumentWithDefaultOrdering:(id)arg1 inBackground:(bool)arg2 animated:(bool)arg3;
- (void)insertPerTabGroupBookmark:(id)arg1 inPerTabGroupBookmarkFolderWithID:(int)arg2;
- (id)insertPlaceholderTabDocumentAfterDocument:(id)arg1;
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(bool)arg3 animated:(bool)arg4;
- (void)insertTabDocumentFromTabStateData:(id)arg1;
- (void)insertTabDocuments:(id)arg1 beforeTabDocument:(id)arg2 inBackground:(bool)arg3 animated:(bool)arg4;
- (void)invalidateSnapshotForTabDocument:(id)arg1;
- (bool)isControlledByAutomation;
- (bool)isInDefaultProfile;
- (bool)isPrivateBrowsingAndLocked;
- (bool)isPrivateBrowsingEnabled;
- (bool)isShowingLibraryDocument;
- (bool)isShowingTabView;
- (bool)isTabGroupActive:(id)arg1;
- (bool)isTabGroupUUIDExpanded:(id)arg1;
- (bool)isTabUUIDActive:(id)arg1;
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;
- (void)makeActiveTabDocumentActive;
- (id)menuForSwitchingProfiles;
- (id)menuForTabGroup:(id)arg1 variant:(long long)arg2;
- (id)moveLocalTabsToNewGroupTitle;
- (void)moveTab:(id)arg1 fromTabGroupWithUUID:(id)arg2 toTabGroupWithUUID:(id)arg3 afterTab:(id)arg4;
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;
- (void)moveTabDocument:(id)arg1 toTabGroupWithUUID:(id)arg2;
- (void)moveTabDocumentToEndOfPinnedTabs:(id)arg1;
- (void)moveTabGroup:(id)arg1 beforeOrAfterTabGroup:(id)arg2;
- (void)moveTabGroup:(id)arg1 toProfile:(id)arg2;
- (bool)moveTabWithUUID:(id)arg1 fromForeignLocalGroupWithUUIDIntoActiveGroup:(id)arg2;
- (id)namedTabGroups;
- (id)newTabGroupMenu;
- (id)nonActiveTabGroupsInCurrentBrowsingMode;
- (id)normalActiveTabDocument;
- (id)normalUnpinnedTabDocuments;
- (unsigned long long)numberOfCurrentNonHiddenTabs;
- (unsigned long long)numberOfTabs;
- (unsigned long long)numberOfTabsForCloseAllAction;
- (void)openBookmark:(id)arg1 inTabGroup:(id)arg2;
- (void)openFocusProfileWithCompletionHandler:(id /* block */)arg1;
- (void)openFocusedTabGroupWithCompletionHandler:(id /* block */)arg1;
- (id)openInTabGroupMenuWithNewTabGroupName:(id)arg1 URL:(id)arg2 descendantCount:(long long)arg3 handler:(id /* block */)arg4;
- (void)openInitialBlankTabDocumentIfNeeded;
- (void)openNewTabForTabGroupSwitcher:(id)arg1;
- (void)openNewTabWithOptions:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)openNewTabWithOptions:(long long)arg1 libraryType:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)openTabDocumentForLibraryType:(id)arg1;
- (void)openURL:(id)arg1 inTabGroup:(id)arg2;
- (id)originatingTabForTab:(id)arg1;
- (id)perTabGroupBookmarkListForFolderID:(int)arg1 filteredUsingString:(id)arg2;
- (void)performBatchUpdatesWithBlock:(id /* block */)arg1;
- (void)performSuppressingDataModelUpdates:(id /* block */)arg1;
- (id)pinnedTabDocuments;
- (id)pinnedTabsManager;
- (void)pinnedTabsManager:(id)arg1 didUpdatePinnedTabs:(id)arg2 inProfileWithIdentifier:(id)arg3;
- (void)pinnedTabsManager:(id)arg1 didUpdatePinnedTabs:(id)arg2 isPrivate:(bool)arg3;
- (id /* block */)postponedSnapshotInvalidationCondition;
- (void)presentAlertToCreateTabGroupFromTabs:(id)arg1 withTitle:(id)arg2 message:(id)arg3 suggestedName:(id)arg4 okActionTitle:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)presentTabGroupSheetForTabGroupSwitcher:(id)arg1;
- (id)privateActiveTabDocument;
- (void)privateBrowsingAvailabilityDidChange;
- (long long)privateBrowsingMode;
- (id)privateTabDocuments;
- (id)privateTabGroupIfAvailable;
- (id)privateUnpinnedTabDocuments;
- (id)profileCloudTabStore;
- (id)profiles;
- (id)profilesMenuElementsWithOptions:(unsigned long long)arg1 movingSelectedTabGroups:(id)arg2 actionHandler:(id /* block */)arg3;
- (void)registerTabGroupManagerObserver:(id)arg1;
- (void)registerUndoWithName:(id)arg1 actions:(id /* block */)arg2;
- (void)registerUndoWithType:(long long)arg1 actions:(id /* block */)arg2;
- (void)removeDocumentObserver:(id)arg1;
- (void)removeSingleBlankTabFromActiveTabGroup;
- (void)removeSingleBlankTabFromInactiveTabGroup:(id)arg1;
- (void)removeSnapshotCacheObserver:(id)arg1;
- (void)removeSnapshotForDocument:(id)arg1;
- (void)renameTabGroup:(id)arg1;
- (void)reorderPinnedTabsIntoPlace;
- (void)reorderScopedBookmarkWithUUID:(id)arg1 afterBookmarkWithUUID:(id)arg2 notify:(bool)arg3;
- (id)replacePlaceholderTabDocument:(id)arg1 withTabDocuments:(id)arg2 transitionToDragStateWithBlock:(id /* block */)arg3;
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2 committingSpeculativeLoad:(bool)arg3;
- (id)representativeURLForTabGroupConfirmationAlert:(id)arg1;
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(id /* block */)arg2;
- (void)restoreEducationDeviceTabs;
- (id)restoreRecentlyClosedTabDocumentWithTabStateData:(id)arg1;
- (void)saveTabDocumentUserActivitySoon:(id)arg1;
- (id)savedState;
- (bool)selectFirstUnpinnedTab;
- (void)selectLocalTabGroup;
- (void)selectNextTabGroup;
- (void)selectPreviousTabGroup;
- (void)selectPrivateTabGroup;
- (id)selectedTabForTabOrderProvider;
- (void)setActiveProfileIdentifier:(id)arg1;
- (void)setActiveTabDocument:(id)arg1;
- (void)setActiveTabDocument:(id)arg1 animated:(bool)arg2;
- (void)setActiveTabDocument:(id)arg1 animated:(bool)arg2 deferActivation:(bool)arg3;
- (void)setActiveTabGroupUUID:(id)arg1;
- (void)setNormalActiveTabDocument:(id)arg1;
- (void)setPinnedTabsManager:(id)arg1;
- (void)setPostponedSnapshotInvalidationCondition:(id /* block */)arg1;
- (void)setPrivateActiveTabDocument:(id)arg1;
- (void)setPrivateBrowsingEnabled:(bool)arg1;
- (void)setPrivateBrowsingMode:(long long)arg1;
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(bool)arg2;
- (void)setSavedState:(id)arg1;
- (void)setShouldTogglePrivateBrowsingOnSplit:(bool)arg1;
- (void)setSnapshotInvalidationIsPostponed:(bool)arg1;
- (void)setSnapshotsAreEnabled:(bool)arg1;
- (void)setTabBar:(id)arg1;
- (void)setTabBarManager:(id)arg1;
- (void)setTabDisplayMode:(long long)arg1;
- (void)setTabGroupOverviewIsPresented:(bool)arg1;
- (void)setTabThumbnailCollectionViewStyle:(long long)arg1;
- (void)setTabViewDefersActivation:(bool)arg1;
- (void)setWindowState:(id)arg1;
- (id)shareRecordForActiveTabGroup;
- (bool)shouldTogglePrivateBrowsingOnSplit;
- (id)singleUnpinnedBlankTab;
- (bool)snapshotInvalidationIsPostponed;
- (bool)snapshotsAreEnabled;
- (id)snapshotsToPersistOnDiskForTabSnapshotCache:(id)arg1;
- (void)sortTabsInInactiveTabGroup:(id)arg1 withSortMode:(long long)arg2;
- (void)sortTabsWithMode:(long long)arg1;
- (id)startPageBackgroundImageIdentifier;
- (id)swipeActionsConfigurationForTab:(id)arg1 inTabGroup:(id)arg2;
- (id)swipeActionsConfigurationForTabGroup:(id)arg1 forPickerSheet:(bool)arg2;
- (void)switchOutOfSyncedTabGroup;
- (bool)switchToTabWithUUID:(id)arg1 inTabGroupWithUUID:(id)arg2;
- (id)syntheticBookmarkFolderForTabGroup:(id)arg1 withAttribution:(bool)arg2;
- (id)syntheticBookmarkFoldersIncludingActiveTabGroup:(bool)arg1;
- (id)tabAtIndex:(unsigned long long)arg1;
- (id)tabBar;
- (bool)tabBar:(id)arg1 canMoveItem:(id)arg2;
- (void)tabBar:(id)arg1 toggleMediaStateMutedForItem:(id)arg2;
- (id)tabBarManager;
- (void)tabBarManager:(id)arg1 didCreateTabBar:(id)arg2;
- (id)tabCollectionView;
- (id)tabCollectionView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id*)arg3 ofHeight:(double)arg4;
- (bool)tabCollectionView:(id)arg1 canCloseItem:(id)arg2;
- (void)tabCollectionView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;
- (void)tabCollectionView:(id)arg1 closeItem:(id)arg2;
- (bool)tabCollectionView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;
- (void)tabCollectionView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;
- (void)tabCollectionView:(id)arg1 didSelectItem:(id)arg2;
- (void)tabCollectionView:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;
- (bool)tabCollectionView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;
- (void)tabCollectionView:(id)arg1 relinquishBorrowedContentView:(id)arg2 forItem:(id)arg3;
- (id)tabCollectionView:(id)arg1 snapshotForItem:(id)arg2;
- (bool)tabCollectionView:(id)arg1 validSnapshotExistsForItem:(id)arg2;
- (void)tabCollectionViewBeginIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (bool)tabCollectionViewCanDismiss:(id)arg1;
- (void)tabCollectionViewDidCancelDismissal:(id)arg1;
- (void)tabCollectionViewDidDismiss:(id)arg1;
- (void)tabCollectionViewDidPresent:(id)arg1;
- (void)tabCollectionViewDidUpdateItemVisibilityOrder:(id)arg1;
- (void)tabCollectionViewEndIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (double)tabCollectionViewItemHeaderHeight:(id)arg1;
- (void)tabCollectionViewWillDismiss:(id)arg1;
- (void)tabCollectionViewWillPresent:(id)arg1;
- (long long)tabDisplayMode;
- (id)tabDocumentBeingActivated;
- (void)tabDocumentDidUpdatePinned:(id)arg1;
- (void)tabDocumentDidUpdateUUID:(id)arg1 previousUUID:(id)arg2;
- (id)tabDocumentForSpotlightSearch;
- (id)tabDocumentForURL:(id)arg1;
- (id)tabDocumentWithIDForWebExtensions:(double)arg1;
- (id)tabDocumentWithUUID:(id)arg1;
- (id)tabDocuments;
- (id)tabDocumentsMatchingSearchTerm;
- (id)tabExposeMenu;
- (void)tabGroupConfirmationAlertDidBeginDismissal:(id)arg1;
- (id)tabGroupManager;
- (void)tabGroupManager:(id)arg1 didPerformBlockUpdatesForTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 didRemoveTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 didUpdateTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 didUpdateTabWithUUID:(id)arg2 userDriven:(bool)arg3;
- (void)tabGroupManager:(id)arg1 didUpdateTabsInTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 willPerformBlockUpdatesForTabGroupWithUUID:(id)arg2;
- (void)tabGroupManager:(id)arg1 willReplaceTabWithUUID:(id)arg2 withTabWithUUID:(id)arg3;
- (void)tabGroupManagerDidFinishSetup:(id)arg1;
- (void)tabGroupManagerDidUpdateTabGroups:(id)arg1;
- (void)tabGroupNamingTextDidChange:(id)arg1;
- (bool)tabGroupOverviewIsPresented;
- (id)tabGroupShareSheetForCurrentTabGroup;
- (bool)tabGroupSwitcherCanShowProfileInToolbar:(id)arg1;
- (id)tabGroupWithUUID:(id)arg1;
- (id)tabGroups;
- (id)tabGroupsForProfileWithIdentifier:(id)arg1;
- (id)tabGroupsMenuElementsWithOptions:(unsigned long long)arg1 newTabGroupName:(id)arg2 hostTitle:(id)arg3 descendantCount:(long long)arg4 movingSelectedTabs:(id)arg5 actionHandler:(id /* block */)arg6;
- (id)tabGroupsMenuForTabGroupButton:(bool)arg1;
- (void)tabHoverPreviewController:(id)arg1 showPreviewForItem:(id)arg2;
- (void)tabHoverPreviewControllerDismissPreview:(id)arg1;
- (void)tabHoverPreviewControllerNeedsSnapshotUpdate:(id)arg1;
- (bool)tabItem:(id)arg1 matchesSearchText:(id)arg2;
- (id)tabOrderManager;
- (id)tabOverview;
- (void)tabOverview:(id)arg1 closeItems:(id)arg2;
- (void)tabOverview:(id)arg1 willInteractivelyCloseItem:(id)arg2;
- (double)tabOverviewAdditionalItemHeaderHeight:(id)arg1;
- (id)tabOverviewCollaborationButton;
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;
- (void)tabOverviewWillUpdateInteractivePresentation:(id)arg1;
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(id /* block */)arg3;
- (bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;
- (bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;
- (id)tabThumbnailCollectionView;
- (long long)tabThumbnailCollectionViewStyle;
- (id)tabViewContainerView;
- (bool)tabViewDefersActivation;
- (void)tabViewDidUpdateItemVisibilityOrder;
- (void)textFieldDidBeginEditing:(id)arg1;
- (void)textFieldDidEndEditing:(id)arg1;
- (void)togglePinningTab:(id)arg1 inInactiveTabGroup:(id)arg2;
- (void)toggleTabGroupUUIDExpanded:(id)arg1;
- (id)topScopedBookmarkListForActiveTabGroup;
- (bool)trySwitchingToPinnedTabOnNavigationToURL:(id)arg1;
- (id)undoManager;
- (id)undoManagerForTabCollectionView:(id)arg1;
- (void)unhideTabDocuments:(id)arg1;
- (id)unnamedTabGroup;
- (id /* block */)unnamedTabGroupDisplayTitleProvider;
- (id)unnamedTabGroups;
- (id)unpinnedTabDocuments;
- (void)updateActiveTab;
- (void)updateBackgroundImageForProfile:(id)arg1;
- (void)updateBackgroundImageForTabGroup:(id)arg1;
- (void)updateEducationTabsLastSyncDate;
- (void)updateFocusProfileEnteringForeground;
- (void)updateFocusedTabGroupEnteringForeground;
- (void)updateHibernatedTabDocumentsSavingState;
- (void)updateLocalTabGroupTitle;
- (void)updateLockedBrowsingState;
- (id)updateProfileWithIdentifier:(id)arg1 persist:(bool)arg2 usingBlock:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (void)updateScopedBookmarkWithUUID:(id)arg1 title:(id)arg2 address:(id)arg3;
- (void)updateSelectedTabGroupName;
- (void)updateSnapshotCacheAndSnapshotActiveTab;
- (void)updateSnapshotsForTabHoverPreviewIfNeeded;
- (void)updateTabBarAnimated:(bool)arg1;
- (void)updateTabCount;
- (void)updateTabViewsAnimatingTabBar:(bool)arg1;
- (void)updateTabWithTabDocument:(id)arg1 notify:(bool)arg2 persist:(bool)arg3;
- (void)updateUsageTrackingInformationIfNecessary;
- (bool)updatingTabGroupTabs;
- (long long)visibleTabCollectionViewType;
- (void)willBeginDragSession:(id)arg1;
- (void)willEndDragSession:(id)arg1;
- (void)willLoseOwnershipOfTabDocument:(id)arg1;
- (void)willSelectProfileWithIdentifier:(id)arg1;
- (void)willTransitionTabView;
- (id)windowState;

@end
