
@interface TabOverview : UIView <ReorderingAutoscrollerDelegate, TabCollectionViewDragDropSupport, TabThumbnailCollectionView, UIGestureRecognizerDelegate, UIKeyInput, UIPointerInteractionDelegate, UISearchBarDelegate, UISearchBarDelegate_Private, _UIBasicAnimationFactory, _UIScrollToTopView> {
    TabOverviewItem * _activeItem;
    bool  _allowsInteractivePresentation;
    double  _alternateBottomSafeAreaInset;
    long long  _alternateItemPosition;
    NSArray * _alternateItems;
    NSArray * _barButtonItems;
    long long  _barPlacement;
    double  _bottomKeyboardInset;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cachedContentRect;
    double  _cachedItemAdditionalHeaderHeight;
    double  _cachedItemHeaderHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cachedScreenRectInScrollingContainer;
    double  _cachedThumbnailScaleForPresentedLayout;
    struct CGPoint { 
        double x; 
        double y; 
    }  _cachedVanishingPoint;
    UIPointerInteraction * _cursorInteraction;
    NSMutableArray * _deferredClosingItems;
    bool  _defersActivation;
    <TabOverviewDelegate> * _delegate;
    UIVisualEffectView * _dismissibleSearchBarBackground;
    double  _dismissibleSearchBarHeight;
    bool  _dismissingWithAddTabAnimation;
    CADisplayLink * _displayLink;
    NSArray * _displayedItems;
    bool  _displayedItemsNeedUpdate;
    bool  _dragging;
    TabExplanationView * _explanationView;
    struct CGSize { 
        double width; 
        double height; 
    }  _explanationViewSize;
    bool  _explanationViewVisible;
    unsigned long long  _fadingSnapshotCount;
    UIView * _gridVisualizationView;
    TabOverviewToolbar * _header;
    double  _headerHeight;
    bool  _horizontalBounceEnabled;
    bool  _inSteadyState;
    bool  _includeIncomingItemsInSearch;
    NSIndexSet * _indexesMatchingSearch;
    UIView * _inputView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _interactivePresentationFirstOffset;
    double  _interactivePresentationLastLogScale;
    struct CGPoint { 
        double x; 
        double y; 
    }  _interactivePresentationLastOffset;
    double  _interactivePresentationLastTimestamp;
    TabOverviewItem * _interactivePresentationStartingItem;
    struct CGPoint { 
        double x; 
        double y; 
    }  _interactivePresentationVelocity;
    struct CGPoint { 
        double x; 
        double y; 
    }  _interactivePresentationZoomLockOffset;
    double  _interactivePresentationZoomLockStartTime;
    TabOverviewItem * _interactivelyLiftingItem;
    TabOverviewInterpolatedLocation * _interpolatedLocation;
    NSTimer * _itemActivationTimer;
    TabOverviewItem * _itemToActivate;
    NSMutableArray * _itemViewReuseStack;
    NSArray * _items;
    NSCountedSet * _itemsShowingContextMenu;
    struct CGSize { 
        double width; 
        double height; 
    }  _lastContentSize;
    bool  _lastDecelerationWasInterrupted;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _lastLayoutBounds;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastPanTranslation;
    double  _lastPresentationProgress;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _lastScrollBounds;
    double  _lastUpdateTime;
    long long  _lastUsedLayout;
    SFLockedPrivateBrowsingView * _lockedPrivateBrowsingView;
    UIView * _menuPreviewContainerView;
    bool  _needsResizeHeaderItems;
    SFScrollingPanGestureRecognizer * _panRecognizer;
    bool  _pinching;
    unsigned long long  _pinnedAlternateItemCount;
    unsigned long long  _pinnedItemCount;
    id /* block */  _pptStateUpdateHandler;
    NSHashTable * _presentationObservers;
    long long  _presentationState;
    long long  _presentedTabLayout;
    ReorderingAutoscroller * _reorderingAutoscroller;
    UIView * _scrollingContainerView;
    UISearchBar * _searchBar;
    bool  _searchBarBackdropStyleUpdated;
    double  _searchBarMinimumWidth;
    bool  _shouldAnimateDimmingForSearch;
    bool  _shouldBounceToConstrainedLocation;
    bool  _shouldShowPrivateBrowsingExplanationView;
    id /* block */  _stateUpdateHandler;
    SFGradientView * _statusBarGradient;
    bool  _suppressItemAnimation;
    bool  _suppressesTabCloseAnimation;
    double  _swipeCloseTranslation;
    TabOverviewItem * _swipeClosingItem;
    SFScrollingPanGestureRecognizer * _tabCloseRecognizer;
    UITapGestureRecognizer * _tapRecognizer;
    bool  _targetItemLiftsFromGrid;
    <TabOverviewThemeProviding> * _themeProvider;
    UILabel * _titleLabel;
    TabOverviewItemView * _titleSizingItemView;
    UIToolbar * _titleToolbar;
    long long  _toolbarAnimationCount;
    bool  _toolbarDismissed;
    bool  _transitioningItemIsPinned;
    bool  _updatingAlternateItemPosition;
    bool  _usesAccessibilityContentSize;
    bool  _verticalBounceEnabled;
    TabOverviewItem * _visiblyCenteredItem;
}

@property (nonatomic, readonly) bool allowsInteractivePresentation;
@property (nonatomic) double alternateBottomSafeAreaInset;
@property (nonatomic, readonly) long long alternateItemPosition;
@property (nonatomic, readonly) NSArray *alternateItems;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, copy) NSArray *barButtonItems;
@property (nonatomic) long long barPlacement;
@property (nonatomic, readonly) bool canDragOntoActiveTab;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool defersActivation;
@property (nonatomic) <TabOverviewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double desiredSnapshotScale;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool hidesInactiveTabs;
@property (getter=isInSteadyState, nonatomic, readonly) bool inSteadyState;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic, readonly) long long itemDragContentType;
@property (nonatomic, retain) TabOverviewItem *itemToActivate;
@property (nonatomic, copy) NSArray *items;
@property (nonatomic, readonly) NSArray *itemsFullyInView;
@property (nonatomic, readonly) NSArray *itemsMatchingSearchTerm;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, readonly) bool lastDecelerationWasInterrupted;
@property (nonatomic, readonly) unsigned long long layoutAxes;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic, copy) id /* block */ pptStateUpdateHandler;
@property (nonatomic, readonly) long long presentationState;
@property (nonatomic) long long presentedTabLayout;
@property (nonatomic, readonly) bool presentingInteractively;
@property (nonatomic, readonly) ReorderingAutoscroller *reorderingAutoscroller;
@property (nonatomic) long long returnKeyType;
@property (nonatomic, readonly) double scalePercentageForActiveItem;
@property (nonatomic, copy) NSString *searchTerm;
@property (getter=isSearching, nonatomic, readonly) bool searching;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic, readonly) unsigned long long snapshotBorderOptions;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic, copy) id /* block */ stateUpdateHandler;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsDropTransitionToItemView;
@property (nonatomic) bool targetItemLiftsFromGrid;
@property (nonatomic, copy) NSString *textContentType;
@property (nonatomic) <TabOverviewThemeProviding> *themeProvider;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, readonly) TabOverviewToolbar *toolbar;
@property (nonatomic, readonly) UIView *view;

- (void).cxx_destruct;
- (void)_activateItemToActivate:(id)arg1;
- (id)_basicAnimationForView:(id)arg1 withKeyPath:(id)arg2;
- (void)_cancelSearch;
- (void)_close:(id)arg1;
- (struct CGSize { double x1; double x2; })_contentSize;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)_dismissWithItemAtCurrentDecelerationFactor:(id)arg1;
- (void)_displayLinkFired:(id)arg1;
- (bool)_isClosingLastItem;
- (void)_pan:(id)arg1;
- (void)_scrollToTopFromTouchAtScreenLocation:(struct CGPoint { double x1; double x2; })arg1 resultHandler:(id /* block */)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_searchBar:(id)arg1 proposedSearchFieldFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_tabClose:(id)arg1;
- (void)_tap:(id)arg1;
- (id)_timingFunctionForAnimation;
- (void)_updateDisplayLink;
- (void)_updateScrollBoundsForKeyboardNotification:(id)arg1;
- (void)activateItem:(id)arg1;
- (void)addPresentationObserver:(id)arg1;
- (bool)allowsInteractivePresentation;
- (double)alternateBottomSafeAreaInset;
- (long long)alternateItemPosition;
- (id)alternateItems;
- (void)attachView:(id)arg1 withReferenceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 toItem:(id)arg3;
- (id)attachedViewForItem:(id)arg1;
- (long long)autocapitalizationType;
- (long long)autocorrectionType;
- (id)barButtonItems;
- (long long)barPlacement;
- (void)beginInteractivePresentationWithOffset:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2;
- (void)beginSearching;
- (bool)canBecomeFirstResponder;
- (void)cancelInteractivePresentation;
- (void)copyGeometryFromTabOverview:(id)arg1;
- (void)copyLocationFromItem:(id)arg1 toItem:(id)arg2;
- (void)dealloc;
- (bool)defersActivation;
- (id)delegate;
- (void)deleteBackward;
- (double)desiredSnapshotScale;
- (void)didEndShowingContextMenuForItem:(id)arg1;
- (void)didMoveToWindow;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (void)dismissAnimated:(bool)arg1;
- (void)dismissWithAddTabAnimation;
- (void)endAnimation;
- (void)endInteractivePresentation;
- (void)endInteractivePresentationAllowingDismissalToTargetItem:(bool)arg1;
- (void)endSearching;
- (void)enumerateItemsOrderedByVisibility:(id /* block */)arg1;
- (unsigned long long)estimatedSnapshotsPerPageForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withTraitCollection:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForItem:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inputView;
- (void)insertText:(id)arg1;
- (bool)isInSteadyState;
- (bool)isItemAnimating:(id)arg1;
- (bool)isScrollEnabled;
- (bool)isSearching;
- (id)itemAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)itemDragContentType;
- (id)itemToActivate;
- (id)items;
- (id)itemsFullyInView;
- (id)itemsMatchingSearchTerm;
- (bool)lastDecelerationWasInterrupted;
- (void)layoutSubviews;
- (void)performUpdatesWithoutTabCloseAnimation:(id /* block */)arg1;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (id /* block */)pptStateUpdateHandler;
- (void)presentAnimated:(bool)arg1;
- (long long)presentationState;
- (long long)presentedTabLayout;
- (bool)presentingInteractively;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)removePresentationObserver:(id)arg1;
- (id)reorderingAutoscroller;
- (void)reorderingAutoscroller:(id)arg1 handleScroll:(struct CGPoint { double x1; double x2; })arg2;
- (void)resetPresentationScrollPosition;
- (double)scalePercentageForActiveItem;
- (void)searchBar:(id)arg1 textDidChange:(id)arg2;
- (void)searchBarCancelButtonClicked:(id)arg1;
- (void)searchBarSearchButtonClicked:(id)arg1;
- (void)searchBarTextDidBeginEditing:(id)arg1;
- (void)searchBarTextDidEndEditing:(id)arg1;
- (id)searchTerm;
- (void)setAlternateBottomSafeAreaInset:(double)arg1;
- (void)setBarButtonItems:(id)arg1;
- (void)setBarPlacement:(long long)arg1;
- (void)setDefersActivation:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInteractiveInsertionProgress:(double)arg1 forItem:(id)arg2;
- (void)setItemToActivate:(id)arg1;
- (void)setItems:(id)arg1;
- (void)setItems:(id)arg1 alternateItems:(id)arg2 atPosition:(long long)arg3;
- (void)setPptStateUpdateHandler:(id /* block */)arg1;
- (void)setPresentedTabLayout:(long long)arg1;
- (void)setSearchTerm:(id)arg1;
- (void)setShowsLockedPrivateBrowsingView:(bool)arg1 withUnlockHandler:(id /* block */)arg2;
- (void)setShowsPrivateBrowsingExplanationView:(bool)arg1 animated:(bool)arg2;
- (void)setStateUpdateHandler:(id /* block */)arg1;
- (void)setTargetItemLiftsFromGrid:(bool)arg1;
- (void)setThemeProvider:(id)arg1;
- (void)setTitle:(id)arg1;
- (long long)smartDashesType;
- (long long)smartInsertDeleteType;
- (long long)smartQuotesType;
- (unsigned long long)snapshotBorderOptions;
- (struct CGSize { double x1; double x2; })snapshotSizeForSuggestedSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)spellCheckingType;
- (id /* block */)stateUpdateHandler;
- (bool)supportsDropTransitionToItemView;
- (id)targetItemForDropAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)targetItemLiftsFromGrid;
- (double)targetScaleWithTabLayout:(long long)arg1;
- (id)targetedDragPreviewForDroppingItem:(id)arg1;
- (id)targetedDragPreviewForLiftingItem:(id)arg1;
- (id)targetedPreviewForDismissingMenuForItem:(id)arg1;
- (void)test_scrollToTopWithoutAnimation;
- (void)test_simulateScrollByOffset:(struct CGPoint { double x1; double x2; })arg1 inTime:(double)arg2;
- (id)themeProvider;
- (id)title;
- (id)toolbar;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (id)undoManager;
- (void)updateInteractivePresentationWithOffset:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2;
- (void)updateInteractivePresentationWithOffset:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2 animated:(bool)arg3;
- (void)updateSnapshotForItem:(id)arg1;
- (id)view;
- (id)viewForItem:(id)arg1;
- (void)willAnimateDropForItem:(id)arg1 withAnimator:(id)arg2;
- (void)willBeginShowingContextMenuForItem:(id)arg1;
- (void)willMoveToWindow:(id)arg1;

@end
