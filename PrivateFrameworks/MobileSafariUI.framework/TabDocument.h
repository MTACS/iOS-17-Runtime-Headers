
@interface TabDocument : NSObject <LoadableResource, LoadingControllerDelegate, PKAddPassesViewControllerDelegate, QuickWebsiteSearchEventListener, ReadingListMetadataProvider, SFAppBannerMetaTagContentObserver, SFAppSuggestionBannerDelegate, SFDialogControllerDelegate, SFDialogPresenting, SFDialogViewControllerPresenting, SFFormAutoFillControllerDelegate, SFHighlightAttributionPresenter, SFMediaRecordingDocument, SFQuickLookDocumentSource, WBReusableTab, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, WBSOrderedTab, WBSQueryParameterFilteringDataQueueDelegate, WBSTabItemSearchSupport, WBSTranslationConsentAlertHelperDelegate, WBSTranslationContextDelegate, WBSWebExtensionTab, WBTabGroupManagerObserver, WKNavigationDelegatePrivate, WKUIDelegatePrivate, _SFAutoFillContextProviding, _SFBrowserDocument, _SFDownloadDelegate, _SFLinkPreviewHandler, _SFNavigationIntentHandling, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFReaderControllerDelegate, _SFWebViewDelegate, _WKAppHighlightDelegate, _WKDiagnosticLoggingDelegate, _WKFullscreenDelegate, _WKIconLoadingDelegate, _WKInputDelegate, _WKWebAuthenticationPanelDelegate> {
    NSString * _EVOrganizationName;
    bool  _EVOrganizationNameIsValid;
    NSURL * _URLFromExternalApplication;
    WBSURLSpoofingMitigator * _URLSpoofingMitigator;
    NSArray * _URLStringComponents;
    NSString * _URLStringForLastSearch;
    bool  _active;
    _SFDownload * _activeDownload;
    _SFInjectedJavaScriptController * _activityJSController;
    bool  _allowInspectionWhenUnlocked;
    bool  _allowURLAsTitle;
    bool  _allowsExternalRedirectWithoutPrompting;
    bool  _allowsProgrammaticFocusToBeginInputSession;
    bool  _allowsSwitchingToPinnedTabOnNavigation;
    NSArray * _ancestorUUIDs;
    SFPinnableBanner * _appBanner;
    _WKRemoteObjectInterface * _appBannerMetaTagContentObserverInterface;
    SFPinnableBanner * _appBannerPendingFirstPaint;
    NSTimer * _appBannerRemovalTimer;
    bool  _appBannerRemovalWasDeferred;
    WBSApplicationManifestFetcher * _applicationManifestFetcher;
    STBlockingViewController * _associatedBlockingViewController;
    id /* block */  _autoFillAuthenticationCompletionBlock;
    _SFFormAutoFillController * _autoFillController;
    WKBackForwardListItem * _backForwardListItemForCurrentAppLinkBannerCheck;
    WKBackForwardListItem * _backForwardListItemForCurrentHighlightBannerCheck;
    WKBackForwardListItem * _backForwardListItemForCurrentNoteTakingCheck;
    WebBookmark * _bookmarkForIconFetching;
    BrowserController * _browserController;
    bool  _browsingModeDidSupportAdvancedPrivacyProtectionsAtPreviousNavigation;
    ActionPanelActivityItemProvider * _cachedActivityItemProvider;
    NSURL * _cachedCanonicalURL;
    NSString * _cachedDebugTitle;
    unsigned long long  _cachedMediaStateIcon;
    NSURL * _cachedURL;
    NSURL * _cachedURLForDebugTitle;
    TabDocumentView * _cachedView;
    _SFCalendarEventDetector * _calendarEventDetector;
    bool  _canShowPrivateBrowsingPrivacyProtectionsBanner;
    bool  _canStopLoading;
    unsigned long long  _changedPropertiesForOnUpdatedWebExtensionEvent;
    bool  _closeWhenNextDownloadStarts;
    bool  _closed;
    long long  _concurrentNavigationActionPolicyDecisions;
    _SFBrowserConfiguration * _configuration;
    <WBSContentBlockerStatisticsStore> * _contentBlockerStatisticsStore;
    bool  _contentIsReadyForSnapshot;
    WBSHistoryContextController * _contextController;
    unsigned long long  _currentUsageState;
    NSDate * _dateOfLastFinishedNavigation;
    _SFNavigationIntent * _deferredDropNavigationIntent;
    unsigned long long  _deferredDropNavigationIntentGeneration;
    NSNumber * _deferredDropWasHandledByWebKit;
    NSString * _deferredNavigationTitle;
    NSURL * _deferredNavigationURL;
    <TabDocumentDelegate> * _delegate;
    SFDialogController * _dialogController;
    bool  _didAlreadyShowPrivateBrowsingPrivacyProtectionsBannerForDomain;
    bool  _didCommitCurrentNavigation;
    bool  _didFinishDocumentLoad;
    bool  _didFirstLayout;
    bool  _didFirstMeaningfulPaint;
    bool  _didFirstPaint;
    bool  _didQuickStopWhileBlank;
    bool  _didSpawnNewTabOnNavigationFromPinnedTab;
    bool  _disableAdvancedPrivateBrowsingPrivacyProtectionsWhenReloading;
    bool  _disableContentBlockersWhenReloading;
    bool  _disablePrivateRelayWhenReloading;
    bool  _displayingStandaloneImage;
    bool  _displayingStandaloneMedia;
    NSString * _domainWhereUserDeclinedAutomaticStrongPassword;
    NSTimer * _donateTextTimer;
    _SFDownload * _downloadReflectedInFluidProgress;
    _WKActivatedElementInfo * _elementInfoToAnimateForNextDownload;
    bool  _exitingElementFullscreen;
    NSDictionary * _extensionIdentifierToDynamicallyInjectedStyleSheets;
    long long  _externalAppRedirectState;
    NSMutableArray * _fallbackURLs;
    id  _faviconToken;
    FindOnPageCompletionProvider * _findCompletionProvider;
    SFTextSearchMatchesCounter * _findMatchesCounter;
    NSTimer * _fireOnUpdatedWebExtensionEventTimer;
    struct { 
        long long impressionProvenance; 
        unsigned int shouldIgnoreURLAsAnalyticsImpression : 1; 
        unsigned int shouldNotifyImpressionAnalyticsRecorder : 1; 
        unsigned int shouldNotifyImpressionAnalyticsRecorderWhenDisplayedToUser : 1; 
        bool updateLocalAttributesWhileHibernated; 
    }  _flags;
    WBSFluidProgressController * _fluidProgressController;
    WBSFluidProgressState * _fluidProgressState;
    bool  _forwardActivityToCoreSpotlight;
    bool  _gestureRequiresGoBackToParentTab;
    bool  _hasBeenInserted;
    bool  _hasDeferredNavigation;
    bool  _hasDoneReaderAvailabilityDetection;
    bool  _hasFocusedInputFieldOnCurrentPage;
    bool  _hasFormControlInteraction;
    bool  _hibernated;
    bool  _hibernatedDueToMemoryWarning;
    SLHighlight * _highlightFromNavigation;
    History * _history;
    double  _idForWebExtensions;
    NSDictionary * _initialArticleScrollDictionaryForCloudTab;
    bool  _interactivelyInserted;
    bool  _isBlank;
    bool  _isDecidingNavigationResponsePolicyForMainFrameDownload;
    bool  _isDisplayingTelephonyPrompt;
    bool  _isNavigatingViaNormalReload;
    bool  _isNavigatingViaReloadFromOrigin;
    bool  _isNavigatingViaReloadWithoutPrivateRelay;
    bool  _isPlaceholder;
    bool  _isShowingSearchQueryInNavigationBar;
    NSError * _lastLoadError;
    NSError * _lastLoadErrorForFormatMenu;
    unsigned long long  _lastReaderDeactivationMode;
    NSString * _lastSearchTerm;
    NSString * _lastSiriReaderSessionIdentifier;
    NSURL * _lastURLForWhichUsageStateWasSet;
    _WKUserInitiatedAction * _lastUserInitiatedAction;
    double  _lastViewedTime;
    WBSHistoryVisit * _lastVisit;
    NSDate * _lastWebViewIncreaseZoomDate;
    NSString * _libraryType;
    id /* block */  _linkAddedToUserActivityCallback;
    LinkPreviewViewController * _linkPreviewViewController;
    bool  _loadNextNavigationInline;
    <LoadProgressObserver> * _loadProgressObserver;
    bool  _loadWasUserDriven;
    LoadingController * _loadingController;
    bool  _locked;
    bool  _matchedLastSearch;
    bool  _mediaCaptureEnabled;
    unsigned long long  _mediaSuspensionReasons;
    SFNavigationBarItem * _navigationBarItem;
    NSHashTable * _navigationObservers;
    _SFNavigationUtilitiesManager * _navigationUtilitiesManager;
    bool  _needsSendTelemetryForProvisionalLoad;
    NSURL * _originalURL;
    NSURL * _overrideURLForHTTPAuthenticationDialog;
    NSUUID * _ownerUUID;
    _SFPageLoadErrorController * _pageLoadErrorController;
    PageLoadTestStatistics * _pageLoadStatistics;
    PageLoadTest * _pageLoadTest;
    TabDocument * _parentTabDocumentForBackClosesSpawnedTab;
    WKBackForwardListItem * _parentTabItem;
    id /* block */  _pendingNavigationActionDueToExternalSchemePromptHandler;
    bool  _pendingNavigationWillLoadWithLockdownModeEnabled;
    bool  _performingFirstLoadAfterOpenInBackground;
    bool  _performingRedirectAfterOpenInBackground;
    WBSPermissionDialogThrottler * _permissionDialogThrottler;
    bool  _persistWhenHibernated;
    WBSSiriIntelligenceDonorPersonalizationData * _personalizationData;
    unsigned long long  _phishingURLClassification;
    bool  _pinned;
    NSString * _pinnedTitle;
    NSURL * _pinnedURL;
    long long  _policy;
    bool  _preparingForNewUserActivity;
    bool  _previousLoadingCompleteStateForWebExtensionOnUpdatedEvent;
    NSString * _previousTitleForWebExtensionOnUpdatedEvent;
    NSURL * _previousURLForWebExtensionOnUpdatedEvent;
    bool  _previousURLWasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
    bool  _previousURLWasLoadedWithContentBlockersEnabled;
    bool  _previousURLWasLoadedWithPrivateRelay;
    WBSWebExtensionTabPosition * _previousWebExtensionTabPosition;
    NSURL * _previousWebPageURLBeforeNavigation;
    _SFPrintController * _printController;
    SFPrivateBrowsingPrivacyProtectionsBanner * _privateBrowsingPrivacyProtectionsBanner;
    unsigned long long  _progressAnimationSuppressedCount;
    SFQuickLookDocument * _quickLookDocument;
    bool  _quickLookDocumentCheckCompleted;
    SFQuickLookDocumentWriter * _quickLookDocumentWriter;
    _SFReaderController * _readerContext;
    long long  _readerViewTopScrollOffset;
    _SFWebView * _readerWebView;
    WebBookmark * _readingListBookmark;
    _SFReloadOptionsController * _reloadOptionsController;
    NSHashTable * _renderingProgressEventObservers;
    long long  _retainCount;
    _SFSafeBrowsingController * _safeBrowsingController;
    WBSSameDocumentNavigationToHistoryVisitCorrelator * _sameDocumentNavigationToHistoryVisitCorrelator;
    _WKSessionState * _savedSessionState;
    struct CGPoint { 
        double x; 
        double y; 
    }  _scrollPoint;
    CSSearchableItemAttributeSet * _searchableItemAttributes;
    _SFSecIdentityPreferencesController * _secIdentityPreferencesController;
    unsigned long long  _sessionStateRestorationSource;
    NSArray * _shareParticipants;
    _SFSafariSharingExtensionController * _sharingExtensionController;
    bool  _shouldDismissReaderInReponseToSameDocumentNavigation;
    bool  _shouldDonateResponseForCurrentNavigation;
    bool  _shouldReflectTranslationAsFluidProgress;
    bool  _shouldResetPrintSuppressionOnNextCommit;
    bool  _shouldRestoreReader;
    bool  _shouldRevealAppLinkBannerForNextCommit;
    bool  _shouldSuppressDialogsThatBlockWebProcessForProvisionalNavigation;
    bool  _showingContinuous;
    bool  _showingInlineDialog;
    bool  _showingReader;
    UIImage * _siteCustomIcon;
    bool  _siteCustomIconPrecomposed;
    _WKRemoteObjectInterface * _siteSpecificSearchEventListenerInterface;
    bool  _skipSyncableTabUpdates;
    NSString * _sourceApplicationBundleIdentifier;
    NSString * _sourceApplicationBundleIdentifierForNextCommit;
    bool  _sourceApplicationIsValid;
    NSPointerArray * _spawnedTabDocuments;
    NSHTTPURLResponse * _speculativeLoadNavigationResponse;
    SFPinnableBanner<SFAppSuggestionBanner> * _storeBanner;
    bool  _storeBannersAreDisabled;
    NSString * _suggestedFilenameForNextCommit;
    bool  _supportsReuseForSpotlightSearch;
    bool  _suppressCrashBanner;
    bool  _suppressWebExtensionEvents;
    bool  _suppressingProgressAnimationForNavigationGesture;
    TabBarItem * _tabBarItem;
    TabDocumentCollectionItem * _tabCollectionItem;
    WBTab * _tabGroupTab;
    TabOverviewItem * _tabOverviewItem;
    NSURL * _tabReuseURL;
    _SFTelephonyNavigationMitigationPolicy * _telephonyNavigationPolicy;
    UIColor * _themeColor;
    NSString * _titleForLastSearch;
    NSArray * _titleWords;
    TouchIconFetcher * _touchIconFetcher;
    SFBrowserDocumentTrackerInfo * _trackerInfo;
    WBSTranslationContext * _translationContext;
    UnifiedTabBarItem * _unifiedTabBarItem;
    bool  _unread;
    id /* block */  _unresponsiveWebProcessBlock;
    NSTimer * _unresponsiveWebProcessTimer;
    NSTimer * _updateFaviconTimer;
    NSURL * _urlForDisplayedContent;
    NSURL * _urlToReloadEnablingPrivateRelay;
    NSURL * _urlToReloadForAdvancedPrivateBrowsingPrivacyProtections;
    NSURL * _urlToReloadForcingContentBlockers;
    NSUserActivity * _userActivity;
    NSUserActivity * _userActivityFromNotes;
    bool  _userDrivenLoadWasConsumed;
    NSUUID * _uuid;
    bool  _wantsReaderWhenActivated;
    bool  _wasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
    bool  _wasLoadedWithContentBlockersEnabled;
    bool  _wasLoadedWithLockdownModeEnabled;
    bool  _wasLoadedWithPrivateRelay;
    bool  _wasOpenedFromHistory;
    bool  _wasOpenedFromLink;
    _SFWebClipMetadataFetcher * _webClipMetadataFetcher;
    WBSSafariExtensionStateObserver * _webExtensionsStateObserver;
    <UIDragSession> * _webKitDragSession;
    _SFWebView * _webView;
    bool  _webViewIsFullscreen;
    bool  _webViewIsLoading;
}

@property (nonatomic, readonly) NSURL *URLForPerSitePreferences;
@property (nonatomic, retain) NSURL *URLFromExternalApplication;
@property (nonatomic, readonly, copy) NSString *URLString;
@property (nonatomic, copy) NSArray *URLStringComponents;
@property (nonatomic, copy) NSString *URLStringForLastSearch;
@property (getter=isActive, nonatomic) bool active;
@property (nonatomic, readonly) _SFWebView *activeWebView;
@property (nonatomic, readonly) ActionPanelActivityItemProvider *activityItemProvider;
@property (nonatomic, readonly) _SFInjectedJavaScriptController *activityJSController;
@property (getter=isAlive, nonatomic, readonly) bool alive;
@property (nonatomic, readonly, copy) NSSet *allBrowserHistories;
@property (nonatomic, readonly, copy) NSSet *allBrowserProfileIdentifiers;
@property (nonatomic) bool allowsProgrammaticFocusToBeginInputSession;
@property (nonatomic, readonly) NSString *alphanumericStrongPassword;
@property (nonatomic, readonly, copy) NSArray *ancestorTabIdentifiers;
@property (nonatomic, readonly) NSArray *ancestorUUIDs;
@property (nonatomic, retain) SFPinnableBanner *appBanner;
@property (nonatomic) bool appBannerRemovalWasDeferred;
@property (nonatomic) STBlockingViewController *associatedBlockingViewController;
@property (nonatomic, readonly) NSURL *attributionPresenterURL;
@property (nonatomic, readonly) bool audioOnly;
@property (nonatomic, readonly) BrowserController *browserController;
@property (nonatomic, readonly) bool browserHasMultipleProfiles;
@property (nonatomic, readonly) NSURL *cachedCanonicalURLOrURLForSharing;
@property (nonatomic, readonly) bool canGoBackToParentTab;
@property (nonatomic, readonly) bool canHideToolbar;
@property (nonatomic, readonly) bool canOverrideStatusBar;
@property (nonatomic, readonly) bool canSetPinned;
@property (nonatomic, readonly) bool canShowPageFormatMenu;
@property (nonatomic, readonly) bool canStopLoading;
@property (nonatomic) unsigned long long changedPropertiesForOnUpdatedWebExtensionEvent;
@property (getter=isClosed, nonatomic) bool closed;
@property (getter=isClosing, nonatomic, readonly) bool closing;
@property (nonatomic, readonly) _SFBrowserConfiguration *configuration;
@property (nonatomic, readonly) SFContentBlockerManager *contentBlockerManager;
@property (nonatomic, readonly) bool contentIsReadyForSnapshot;
@property (getter=isContentReady, nonatomic, readonly) bool contentReady;
@property (nonatomic, readonly) WBSHistoryContextController *contextController;
@property (getter=isControlledByAutomation, nonatomic, readonly) bool controlledByAutomation;
@property (nonatomic, readonly) WKBackForwardListItem *currentBackForwardListItem;
@property (nonatomic, readonly) NSString *currentStrongPassword;
@property (nonatomic, readonly) UnifiedTabBarItem *currentUnifiedTabBarItem;
@property (nonatomic, copy) NSString *customUserAgent;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *defaultStrongPassword;
@property (nonatomic) <TabDocumentDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) SFDialogController *dialogController;
@property (nonatomic, readonly) bool didFinishDocumentLoad;
@property (nonatomic, readonly) bool didFirstLayout;
@property (nonatomic, readonly) bool didFirstMeaningfulPaint;
@property (getter=isDisplayingStandaloneImage, nonatomic) bool displayingStandaloneImage;
@property (getter=isDisplayingStandaloneMedia, nonatomic) bool displayingStandaloneMedia;
@property (nonatomic, readonly) double estimatedProgress;
@property (getter=isExitingElementFullscreen, nonatomic, readonly) bool exitingElementFullscreen;
@property (nonatomic, readonly) NSURL *expectedOrCurrentURL;
@property (nonatomic, readonly) NSURL *expectedOrCurrentURLOrLastActiveURLIfCrashed;
@property (nonatomic, copy) NSDictionary *extensionIdentifierToDynamicallyInjectedStyleSheets;
@property (nonatomic) long long externalAppRedirectState;
@property (nonatomic, readonly) UIFindInteraction *findInteraction;
@property (nonatomic, readonly) _SFWebView *frontWebView;
@property (nonatomic) bool hasBeenInserted;
@property (nonatomic, readonly) bool hasDoneReaderDetection;
@property (nonatomic, readonly) bool hasFormControlInteraction;
@property (readonly) unsigned long long hash;
@property (getter=isHibernated, nonatomic, readonly) bool hibernated;
@property (getter=wasHibernatedDueToMemoryWarning, nonatomic) bool hibernatedDueToMemoryWarning;
@property (nonatomic, readonly) History *history;
@property (nonatomic, readonly) double idForWebExtensions;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, readonly) bool inElementFullscreen;
@property (getter=isInteractivelyInserted, nonatomic) bool interactivelyInserted;
@property (nonatomic, readonly) bool isArticle;
@property (nonatomic, readonly) bool isAudible;
@property (nonatomic) bool isBlank;
@property (nonatomic, readonly) bool isBlockedByScreenTime;
@property (nonatomic, readonly) bool isFrontmost;
@property (nonatomic, readonly) bool isInReaderMode;
@property (nonatomic, readonly) bool isLoadingComplete;
@property (nonatomic, readonly) bool isMuted;
@property (nonatomic) bool isNavigatingViaReloadWithoutPrivateRelay;
@property (nonatomic, readonly) bool isPinnedTab;
@property (nonatomic) bool isPlaceholder;
@property (nonatomic, readonly) bool isPrivate;
@property (nonatomic, readonly) bool isSecure;
@property (nonatomic, readonly) bool isShowingSearchQueryInNavigationBar;
@property (nonatomic, readonly) double lastActivationTime;
@property (nonatomic, copy) NSString *lastSearchTerm;
@property (nonatomic, copy) NSString *lastSiriReaderSessionIdentifier;
@property (nonatomic) double lastViewedTime;
@property (nonatomic, retain) WBSHistoryVisit *lastVisit;
@property (nonatomic, copy) NSString *libraryType;
@property (nonatomic, copy) id /* block */ linkAddedToUserActivityCallback;
@property (nonatomic, retain) LinkPreviewViewController *linkPreviewViewController;
@property (nonatomic) <LoadProgressObserver> *loadProgressObserver;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic) bool matchedLastSearch;
@property (nonatomic) bool mediaCaptureEnabled;
@property (nonatomic, readonly) unsigned long long mediaStateIcon;
@property (nonatomic) unsigned long long mediaSuspensionReasons;
@property (nonatomic, readonly) SFNavigationBarItem *navigationBarItem;
@property (nonatomic, retain) NSUUID *ownerUUID;
@property (nonatomic, readonly) _SFPageLoadErrorController *pageLoadErrorController;
@property (nonatomic, retain) PageLoadTestStatistics *pageLoadStatistics;
@property (nonatomic, readonly) long long pageStatus;
@property (nonatomic) double pageZoomFactor;
@property (nonatomic) TabDocument *parentTabDocumentForBackClosesSpawnedTab;
@property (nonatomic, readonly) double parentTabIDForWebExtensions;
@property (nonatomic, readonly) NSURL *pendingURLForWebExtensions;
@property (getter=isPerformingFirstLoadAfterOpenInBackground, nonatomic) bool performingFirstLoadAfterOpenInBackground;
@property (getter=isPerformingRedirectAfterOpenInBackground, nonatomic) bool performingRedirectAfterOpenInBackground;
@property (nonatomic) bool persistWhenHibernated;
@property (nonatomic, readonly) WBSSiriIntelligenceDonorPersonalizationData *personalizationData;
@property (getter=isPinnable, nonatomic, readonly) bool pinnable;
@property (getter=isPinned, nonatomic) bool pinned;
@property (nonatomic, copy) NSString *pinnedTitle;
@property (nonatomic, copy) NSURL *pinnedURL;
@property (nonatomic) long long policy;
@property (getter=isPreparingForNewUserActivity, nonatomic) bool preparingForNewUserActivity;
@property (nonatomic, readonly) bool previousLoadingCompleteStateForWebExtensionOnUpdatedEvent;
@property (nonatomic, readonly, copy) NSString *previousTitleForWebExtensionOnUpdatedEvent;
@property (nonatomic, readonly) NSURL *previousURLForWebExtensionOnUpdatedEvent;
@property (nonatomic, retain) WBSWebExtensionTabPosition *previousWebExtensionTabPosition;
@property (nonatomic, readonly) _SFPrintController *printController;
@property (nonatomic, readonly) bool privacyReportShouldSeparateBlockedTrackers;
@property (getter=isPrivateBrowsingEnabled, nonatomic, readonly) bool privateBrowsingEnabled;
@property (nonatomic, readonly) SFPrivateBrowsingPrivacyProtectionsBanner *privateBrowsingPrivacyProtectionsBanner;
@property (nonatomic, readonly) WBProfile *profile;
@property (nonatomic, readonly) WBSFluidProgressState *progressState;
@property (nonatomic, retain) SFQuickLookDocument *quickLookDocument;
@property (nonatomic, readonly) <SFReaderContext> *readerContext;
@property (nonatomic) long long readerViewTopScrollOffset;
@property (nonatomic, readonly) _SFWebView *readerWebView;
@property (nonatomic, retain) WebBookmark *readingListBookmark;
@property (nonatomic, readonly) _SFReloadOptionsController *reloadOptionsController;
@property (nonatomic, readonly) _SFSafeBrowsingController *safeBrowsingController;
@property (nonatomic, readonly) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator;
@property (nonatomic) struct CGPoint { double x1; double x2; } scrollPoint;
@property (nonatomic, retain) CSSearchableItemAttributeSet *searchableItemAttributes;
@property (nonatomic, readonly) _WKSessionState *sessionState;
@property (nonatomic) unsigned long long sessionStateRestorationSource;
@property (nonatomic, copy) NSArray *shareParticipants;
@property (nonatomic, readonly) _SFSafariSharingExtensionController *sharingExtensionController;
@property (nonatomic, readonly) bool shouldObscureForDigitalHealth;
@property (nonatomic, readonly) bool shouldPersist;
@property (nonatomic) bool shouldRestoreReader;
@property (nonatomic) bool shouldRevealAppLinkBannerForNextCommit;
@property (nonatomic, readonly) bool shouldSelectOriginatingTabWhenClosed;
@property (getter=isShowingContinuous, nonatomic) bool showingContinuous;
@property (getter=isShowingErrorPage, nonatomic, readonly) bool showingErrorPage;
@property (getter=isShowingFindOnPage, nonatomic, readonly) bool showingFindOnPage;
@property (getter=isShowingInlineDialog, nonatomic, readonly) bool showingInlineDialog;
@property (getter=isShowingReader, nonatomic) bool showingReader;
@property (getter=isShowingStartPageOverriddenByExtension, nonatomic, readonly) bool showingStartPageOverriddenByExtension;
@property (getter=isShowingSystemStartPage, nonatomic, readonly) bool showingSystemStartPage;
@property (nonatomic, retain) UIImage *siteCustomIcon;
@property (nonatomic) bool siteCustomIconPrecomposed;
@property (nonatomic, copy) NSString *sourceApplicationBundleIdentifier;
@property (nonatomic, copy) NSString *sourceApplicationBundleIdentifierForNextCommit;
@property (nonatomic) bool storeBannersAreDisabled;
@property (nonatomic, readonly) NSString *suggestedTitleForCurrentURL;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsReuseForSpotlightSearch;
@property (nonatomic) bool suppressWebExtensionEvents;
@property (nonatomic) bool suppressingProgressAnimationForNavigationGesture;
@property (nonatomic, readonly) TabBarItem *tabBarItem;
@property (nonatomic, readonly) NSArray *tabCollectionItems;
@property (nonatomic, retain) WBTab *tabGroupTab;
@property (nonatomic, readonly) TabOverviewItem *tabOverviewItem;
@property (nonatomic, copy) NSURL *tabReuseURL;
@property (nonatomic, readonly) SFTabStateData *tabStateData;
@property (nonatomic, readonly, copy) NSString *tabTitle;
@property (nonatomic, readonly, copy) id /* block */ tabUpdateBlock;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } tabViewSize;
@property (nonatomic, readonly) UIColor *themeColor;
@property (nonatomic, readonly, copy) NSString *title;
@property (nonatomic, readonly) NSString *titleForCloudTab;
@property (nonatomic, copy) NSString *titleForLastSearch;
@property (nonatomic, copy) NSArray *titleWords;
@property (nonatomic, readonly) SFBrowserDocumentTrackerInfo *trackerInfo;
@property (nonatomic, readonly) WBSTranslationContext *translationContext;
@property (nonatomic, readonly) UnifiedTabBarItem *unifiedTabBarItem;
@property (getter=isUnread, nonatomic) bool unread;
@property (nonatomic, readonly) NSURL *urlForExtensions;
@property (nonatomic, readonly) NSUserActivity *userActivity;
@property (nonatomic, retain) NSUserActivity *userActivityFromNotes;
@property (nonatomic, copy) NSUUID *uuid;
@property (nonatomic, readonly) TabDocumentView *view;
@property (nonatomic) bool wantsReaderWhenActivated;
@property (nonatomic, readonly) bool wasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
@property (nonatomic, readonly) bool wasLoadedWithContentBlockersEnabled;
@property (nonatomic, readonly) bool wasLoadedWithPrivateRelay;
@property (nonatomic) bool wasOpenedFromLink;
@property (nonatomic, readonly) _SFWebClipMetadataFetcher *webClipMetadataFetcher;
@property (nonatomic, readonly) <WBSWebExtensionWindow> *webExtensionWindow;
@property (nonatomic, readonly) SFWebExtensionsController *webExtensionsController;
@property (nonatomic, readonly) unsigned long long webPageID;
@property (nonatomic, readonly) _SFWebView *webView;
@property (nonatomic, readonly) WKWebView *webViewForExtensions;
@property (nonatomic, readonly) bool webViewIsFullscreen;
@property (nonatomic, readonly, copy) NSArray *webViewsThatCanReceiveMessages;
@property (nonatomic, readonly, copy) NSString *windowIdentifier;
@property (nonatomic) double zoomFactor;

+ (id)blankTabTitleWithLibraryType:(id)arg1 controlledByAutomation:(bool)arg2;
+ (id)tabDocumentForWKWebView:(id)arg1;
+ (id)urlForExternalURL:(id)arg1 forPrivateBrowsing:(bool)arg2;

- (void).cxx_destruct;
- (id)URL;
- (id)URLForPerSitePreferences;
- (id)URLForSharing;
- (id)URLForStatePersisting;
- (id)URLFromExternalApplication;
- (id)URLString;
- (id)URLStringComponents;
- (id)URLStringForLastSearch;
- (id)URLStringForPrintController:(id)arg1;
- (id)_backForwardList;
- (void)_closeTabDocumentAnimated:(bool)arg1;
- (id)_initWithBrowserController:(id)arg1 configuration:(id)arg2;
- (bool)_isDeallocating;
- (id)_presentingViewControllerForWebView:(id)arg1;
- (void)_searchEngineControllerDidFinishPopulating:(id)arg1;
- (void)_translationAvailabilityDidChange:(id)arg1;
- (void)_translationContextStateDidChange:(id)arg1;
- (bool)_tryRetain;
- (void)_unresponsiveWebProcessTimerFired:(id)arg1;
- (void)_voiceSearchAvailabilityDidChange:(id)arg1;
- (id)_webCryptoMasterKeyForWebView:(id)arg1;
- (void)_webView:(id)arg1 accessoryViewCustomButtonTappedInFormInputSession:(id)arg2;
- (id)_webView:(id)arg1 adjustedDataInteractionItemProvidersForItemProvider:(id)arg2 representingObjects:(id)arg3 additionalData:(id)arg4;
- (id)_webView:(id)arg1 alternateURLFromImage:(id)arg2 userInfo:(id*)arg3;
- (void)_webView:(id)arg1 authenticationChallenge:(id)arg2 shouldAllowLegacyTLS:(id /* block */)arg3;
- (void)_webView:(id)arg1 checkUserMediaPermissionForURL:(id)arg2 mainFrameURL:(id)arg3 frameIdentifier:(unsigned long long)arg4 decisionHandler:(id /* block */)arg5;
- (void)_webView:(id)arg1 contentRuleListWithIdentifier:(id)arg2 performedAction:(id)arg3 forURL:(id)arg4;
- (void)_webView:(id)arg1 contextMenuConfigurationForElement:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_webView:(id)arg1 contextMenuContentPreviewForElement:(id)arg2;
- (void)_webView:(id)arg1 contextMenuDidEndForElement:(id)arg2;
- (void)_webView:(id)arg1 contextMenuForElement:(id)arg2 willCommitWithAnimator:(id)arg3;
- (void)_webView:(id)arg1 contextMenuWillPresentForElement:(id)arg2;
- (void)_webView:(id)arg1 createWebViewWithConfiguration:(id)arg2 forNavigationAction:(id)arg3 windowFeatures:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 session:(id)arg3 didEndWithOperation:(unsigned long long)arg4;
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 sessionWillBegin:(id)arg3;
- (void)_webView:(id)arg1 dataInteractionOperationWasHandled:(bool)arg2 forSession:(id)arg3 itemProviders:(id)arg4;
- (long long)_webView:(id)arg1 dataOwnerForDragSession:(id)arg2;
- (long long)_webView:(id)arg1 dataOwnerForDropSession:(id)arg2;
- (void)_webView:(id)arg1 decideDatabaseQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 currentOriginUsage:(unsigned long long)arg4 currentDatabaseUsage:(unsigned long long)arg5 expectedUsage:(unsigned long long)arg6 decisionHandler:(id /* block */)arg7;
- (long long)_webView:(id)arg1 decidePolicyForFocusedElement:(id)arg2;
- (void)_webView:(id)arg1 decidePolicyForSOAuthorizationLoadWithCurrentPolicy:(long long)arg2 forExtension:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_webView:(id)arg1 decideWebApplicationCacheQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 totalBytesNeeded:(unsigned long long)arg4 decisionHandler:(id /* block */)arg5;
- (void)_webView:(id)arg1 didChangeLookalikeCharactersFromURL:(id)arg2 toURL:(id)arg3;
- (void)_webView:(id)arg1 didChangeSafeAreaShouldAffectObscuredInsets:(bool)arg2;
- (void)_webView:(id)arg1 didCommitLoadWithRequest:(id)arg2 inFrame:(id)arg3;
- (void)_webView:(id)arg1 didFailLoadDueToNetworkConnectionIntegrityWithURL:(id)arg2;
- (void)_webView:(id)arg1 didFailLoadWithRequest:(id)arg2 inFrame:(id)arg3 withError:(id)arg4;
- (void)_webView:(id)arg1 didFailProvisionalLoadWithRequest:(id)arg2 inFrame:(id)arg3 withError:(id)arg4;
- (void)_webView:(id)arg1 didFinishLoadForQuickLookDocumentInMainFrame:(id)arg2;
- (void)_webView:(id)arg1 didFinishLoadWithRequest:(id)arg2 inFrame:(id)arg3;
- (void)_webView:(id)arg1 didNegotiateModernTLSForURL:(id)arg2;
- (void)_webView:(id)arg1 didResignInputElementStrongPasswordAppearanceWithUserInfo:(id)arg2;
- (void)_webView:(id)arg1 didStartInputSession:(id)arg2;
- (void)_webView:(id)arg1 didStartLoadForQuickLookDocumentInMainFrameWithFileName:(id)arg2 uti:(id)arg3;
- (void)_webView:(id)arg1 didStartProvisionalLoadWithRequest:(id)arg2 inFrame:(id)arg3;
- (bool)_webView:(id)arg1 fileUploadPanelContentIsManagedWithInitiatingFrame:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_webView:(id)arg1 finalObscuredInsetsForScrollView:(id)arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg4;
- (bool)_webView:(id)arg1 focusRequiresStrongPasswordAssistance:(id)arg2;
- (bool)_webView:(id)arg1 gestureRecognizerCanBePreventedByTouchEvents:(id)arg2;
- (bool)_webView:(id)arg1 gestureRecognizerCouldPinch:(id)arg2;
- (void)_webView:(id)arg1 hasVideoInPictureInPictureDidChange:(bool)arg2;
- (void)_webView:(id)arg1 imageOrMediaDocumentSizeChanged:(struct CGSize { double x1; double x2; })arg2;
- (void)_webView:(id)arg1 insertTextSuggestion:(id)arg2 inInputSession:(id)arg3;
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3;
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3 valueDictionary:(id)arg4;
- (void)_webView:(id)arg1 logDiagnosticMessageWithDomain:(id)arg2 domain:(long long)arg3;
- (void)_webView:(id)arg1 logDiagnosticMessageWithEnhancedPrivacy:(id)arg2 description:(id)arg3;
- (void)_webView:(id)arg1 logDiagnosticMessageWithResult:(id)arg2 description:(id)arg3 result:(long long)arg4;
- (void)_webView:(id)arg1 logDiagnosticMessageWithValue:(id)arg2 description:(id)arg3 value:(id)arg4;
- (void)_webView:(id)arg1 mediaCaptureStateDidChange:(unsigned long long)arg2;
- (void)_webView:(id)arg1 mouseDidMoveOverElement:(id)arg2 withFlags:(long long)arg3 userInfo:(id)arg4;
- (void)_webView:(id)arg1 navigation:(id)arg2 didFailProvisionalLoadInSubframe:(id)arg3 withError:(id)arg4;
- (void)_webView:(id)arg1 navigation:(id)arg2 didSameDocumentNavigation:(long long)arg3;
- (void)_webView:(id)arg1 navigationDidFinishDocumentLoad:(id)arg2;
- (bool)_webView:(id)arg1 performDataInteractionOperationWithItemProviders:(id)arg2;
- (void)_webView:(id)arg1 printFrame:(id)arg2;
- (void)_webView:(id)arg1 queryPermission:(id)arg2 forOrigin:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_webView:(id)arg1 renderingProgressDidChange:(unsigned long long)arg2;
- (void)_webView:(id)arg1 requestGeolocationAuthorizationForURL:(id)arg2 frame:(id)arg3 decisionHandler:(id /* block */)arg4;
- (void)_webView:(id)arg1 requestStorageAccessPanelForDomain:(id)arg2 underCurrentDomain:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_webView:(id)arg1 requestUserMediaAuthorizationForDevices:(unsigned long long)arg2 url:(id)arg3 mainFrameURL:(id)arg4 decisionHandler:(id /* block */)arg5;
- (void)_webView:(id)arg1 runWebAuthenticationPanel:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(id /* block */)arg4;
- (bool)_webView:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;
- (void)_webView:(id)arg1 storeAppHighlight:(id)arg2 inNewGroup:(bool)arg3 requestOriginatedInApp:(bool)arg4;
- (void)_webView:(id)arg1 takeFocus:(long long)arg2;
- (void)_webView:(id)arg1 willGoToBackForwardListItem:(id)arg2 inPageCache:(bool)arg3;
- (void)_webView:(id)arg1 willSnapshotBackForwardListItem:(id)arg2;
- (void)_webView:(id)arg1 willStartInputSession:(id)arg2;
- (void)_webView:(id)arg1 willSubmitFormValues:(id)arg2 userObject:(id)arg3 submissionHandler:(id /* block */)arg4;
- (unsigned long long)_webView:(id)arg1 willUpdateDataInteractionOperationToOperation:(unsigned long long)arg2 forSession:(id)arg3;
- (id)_webViewAdditionalContextForStrongPasswordAssistance:(id)arg1;
- (bool)_webViewCanBecomeFocused:(id)arg1;
- (void)_webViewDidBeginNavigationGesture:(id)arg1;
- (void)_webViewDidDisableInspectorBrowserDomain:(id)arg1;
- (void)_webViewDidEnableInspectorBrowserDomain:(id)arg1;
- (void)_webViewDidEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;
- (void)_webViewDidEnterElementFullscreen:(id)arg1;
- (void)_webViewDidEnterFullscreen:(id)arg1;
- (void)_webViewDidExitElementFullscreen:(id)arg1;
- (void)_webViewDidExitFullscreen:(id)arg1;
- (void)_webViewFullscreenMayReturnToInline:(id)arg1;
- (void)_webViewWebProcessDidCrash:(id)arg1;
- (void)_webViewWillEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;
- (void)_webViewWillExitElementFullscreen:(id)arg1;
- (id)activeWebView;
- (id)activityItemProvider;
- (id)activityJSController;
- (void)addAppHighlightCreatingLink:(bool)arg1;
- (void)addMediaSuspensionReason:(unsigned long long)arg1;
- (void)addNavigationObserver:(id)arg1;
- (void)addPassesViewControllerDidFinish:(id)arg1;
- (void)addRenderingProgressObserver:(id)arg1;
- (id)allBrowserHistories;
- (id)allBrowserProfileIdentifiers;
- (bool)allowsProgrammaticFocusToBeginInputSession;
- (id)alphanumericStrongPassword;
- (id)ancestorTabIdentifiers;
- (id)ancestorUUIDs;
- (void)animateElement:(id)arg1 toBarItem:(long long)arg2;
- (void)animateElementToDownloadsBarItemSoon:(id)arg1;
- (void)animateProgressForCompletedDocument;
- (id)appBanner;
- (bool)appBannerRemovalWasDeferred;
- (void)applyHighlightFromNotesIfNeeded;
- (id)associatedBlockingViewController;
- (id)attributionPresenterURL;
- (bool)audioOnly;
- (void)automaticPasswordSheetDismissed;
- (id)backListMenuWithLimit:(int)arg1;
- (void)beginSuppressingProgressAnimation;
- (id)browserController;
- (bool)browserHasMultipleProfiles;
- (id)cachedCanonicalURLOrURLForSharing;
- (bool)canGoBack;
- (bool)canGoBackToParentTab;
- (bool)canGoForward;
- (bool)canHideToolbar;
- (bool)canOverrideStatusBar;
- (bool)canSetPinned;
- (bool)canShowPageFormatMenu;
- (bool)canStopLoading;
- (unsigned long long)changedPropertiesForOnUpdatedWebExtensionEvent;
- (void)clearBackForwardList;
- (void)clearBackForwardListKeepingCurrentItem;
- (void)clearBrowserController;
- (void)clearFluidProgressState;
- (void)clearPageLoadStatistics;
- (void)clearReaderContext;
- (void)clearReaderScrollInformation;
- (void)clearReaderView;
- (void)clearTabReuseURL;
- (void)close;
- (void)collectReadingListItemInfo;
- (void)commitPreviewViewController:(id)arg1;
- (id)committedURL;
- (id)configuration;
- (id)contentBlockerManager;
- (bool)contentIsReadyForSnapshot;
- (id)contextController;
- (void)copyCurrentStrongPassword;
- (void)createBrowserReaderViewIfNeeded;
- (bool)createFluidProgressState;
- (void)createReaderWebViewForReaderController:(id)arg1;
- (id)currentBackForwardListItem;
- (id)currentFluidProgressStateSource;
- (bool)currentPageLoadedFromReadingList;
- (id)currentSavedAccountContextForFormAutoFillController:(id)arg1;
- (id)currentStrongPassword;
- (id)currentUnifiedTabBarItem;
- (id)customUserAgent;
- (id)customUserVisibleStringForReadingListBookmarkURL:(id)arg1;
- (id)dataForDisplayedPDF;
- (id)dataForQuickLookDocument:(id)arg1;
- (void)dealloc;
- (void)decreasePageZoomSetting;
- (id)defaultStrongPassword;
- (id)delegate;
- (id)description;
- (id)dialogController;
- (void)dialogController:(id)arg1 didDismissDialog:(id)arg2;
- (void)dialogController:(id)arg1 dismissViewController:(id)arg2 withAdditionalAnimations:(id /* block */)arg3;
- (void)dialogController:(id)arg1 presentViewController:(id)arg2 withAdditionalAnimations:(id /* block */)arg3;
- (long long)dialogController:(id)arg1 presentationPolicyForDialog:(id)arg2;
- (void)dialogController:(id)arg1 willPresentDialog:(id)arg2;
- (void)didActivateReader;
- (void)didAutoDetectSiteSpecificSearchProviderWithOriginatingURL:(id)arg1 searchURLTemplate:(id)arg2;
- (void)didFailToContinueUserActivity;
- (void)didFindAppBannerWithContent:(id)arg1;
- (bool)didFinishDocumentLoad;
- (bool)didFirstLayout;
- (bool)didFirstMeaningfulPaint;
- (void)didReplaceTabDocument:(id)arg1;
- (void)dismissAppSuggestionBanner:(id)arg1;
- (void)dismissSiriReaderMediaSessionImmediately:(bool)arg1;
- (void)dispatchNavigationIntent:(id)arg1;
- (void)displayAttributionBannerForHighlightIfNeeded:(id)arg1;
- (void)displayNewTabOverridePageIfNecessary;
- (void)donateCurrentNavigationWithNavigationResponse:(id)arg1;
- (void)doneWaitingToContinueUserActivity;
- (void)downloadDidFail:(id)arg1;
- (void)downloadDidFinish:(id)arg1;
- (void)downloadDidStart:(id)arg1;
- (void)downloadShouldContinueAfterReceivingResponse:(id)arg1 decisionHandler:(id /* block */)arg2;
- (void)endSuppressingProgressAnimation;
- (void)endSuppressingProgressAnimationAnimated:(bool)arg1;
- (double)estimatedProgress;
- (void)evictFromTabReuse;
- (id)expectedOrCurrentURL;
- (id)expectedOrCurrentURLOrLastActiveURLIfCrashed;
- (id)extensionIdentifierToDynamicallyInjectedStyleSheets;
- (long long)externalAppRedirectState;
- (void)fetchCanonicalURLWithCompletionHandler:(id /* block */)arg1;
- (void)fetchMetadataForBookmark:(id)arg1 completion:(id /* block */)arg2;
- (void)filteredArticleTextDidBecomeReadyForReaderController:(id)arg1;
- (id)findInteraction;
- (void)findOnPageCompletionProvider:(id)arg1 setStringToComplete:(id)arg2;
- (void)fluidProgressRocketAnimationDidComplete;
- (bool)formAutoFillControllerCanPrefillForm:(id)arg1;
- (void)formAutoFillControllerDidFocusSensitiveFormField:(id)arg1;
- (bool)formAutoFillControllerDidUserDeclineAutomaticStrongPasswordForCurrentDomain:(id)arg1;
- (void)formAutoFillControllerGetAuthenticationForAutoFill:(id)arg1 completion:(id /* block */)arg2;
- (bool)formAutoFillControllerShouldDisableStreamlinedLogin:(id)arg1;
- (bool)formAutoFillControllerShouldShowIconsInPasswordPicker:(id)arg1;
- (id)formAutoFillControllerURLForFormAutoFill:(id)arg1;
- (void)formAutoFillControllerUserChoseToUseGeneratedPassword:(id)arg1;
- (id)forwardListMenuWithLimit:(int)arg1;
- (void)freezeForNavigationGesture;
- (id)frontWebView;
- (void)getApplicationManifestWithCompletionHandler:(id /* block */)arg1;
- (void)goBack;
- (void)goBackAllowingNewTabToSpawnIfNeeded:(bool)arg1;
- (void)goBackToParentTab;
- (void)goForward;
- (void)goForwardAllowingNewTabToSpawnIfNeeded:(bool)arg1;
- (void)goToBackForwardListItem:(id)arg1;
- (void)handleNavigationIntent:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasBeenInserted;
- (bool)hasDoneReaderDetection;
- (bool)hasFailedURL;
- (bool)hasFormControlInteraction;
- (bool)hasQuickLookContent;
- (void)hibernate;
- (void)hideBannerForHighlightIdentifier:(id)arg1;
- (bool)hideFindOnPage;
- (id)history;
- (double)idForWebExtensions;
- (id)identifier;
- (bool)inElementFullscreen;
- (void)increasePageZoomSetting;
- (id)initForBackgroundLoadingWithBrowserController:(id)arg1 relatedWebView:(id)arg2 webViewToCloneSessionStorageFrom:(id)arg3;
- (id)initWithBrowserController:(id)arg1;
- (id)initWithTabGroupTab:(id)arg1 privateBrowsingEnabled:(bool)arg2 hibernated:(bool)arg3 bookmark:(id)arg4 browserController:(id)arg5;
- (id)initWithTabStateData:(id)arg1 hibernated:(bool)arg2 browserController:(id)arg3;
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(bool)arg4 controlledByAutomation:(bool)arg5 hibernated:(bool)arg6 bookmark:(id)arg7 browserController:(id)arg8 relatedWebView:(id)arg9;
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(bool)arg4 hibernated:(bool)arg5 bookmark:(id)arg6 browserController:(id)arg7;
- (void)invalidateSourceApplication;
- (bool)isActive;
- (bool)isAlive;
- (bool)isArticle;
- (bool)isAudible;
- (bool)isAutomationEnabledForLinkPreviewHelper:(id)arg1;
- (bool)isBlank;
- (bool)isBlockedByScreenTime;
- (bool)isClosed;
- (bool)isClosing;
- (bool)isContentReady;
- (bool)isControlledByAutomation;
- (bool)isDisplayingStandaloneImage;
- (bool)isDisplayingStandaloneMedia;
- (bool)isExitingElementFullscreen;
- (bool)isFrontmost;
- (bool)isHibernated;
- (bool)isInReaderMode;
- (bool)isInteractivelyInserted;
- (bool)isLoading;
- (bool)isLoadingComplete;
- (bool)isMuted;
- (bool)isNavigatingViaReloadWithoutPrivateRelay;
- (bool)isPDFDocument;
- (bool)isPerformingFirstLoadAfterOpenInBackground;
- (bool)isPerformingRedirectAfterOpenInBackground;
- (bool)isPinnable;
- (bool)isPinned;
- (bool)isPinnedTab;
- (bool)isPlaceholder;
- (bool)isPreparingForNewUserActivity;
- (bool)isPrivate;
- (bool)isPrivateBrowsingEnabled;
- (bool)isPrivateBrowsingEnabledForPreviewHelper:(id)arg1;
- (bool)isReaderAvailable;
- (bool)isSecure;
- (bool)isShowingContinuous;
- (bool)isShowingErrorPage;
- (bool)isShowingFindOnPage;
- (bool)isShowingInlineDialog;
- (bool)isShowingReader;
- (bool)isShowingReadingListArchive;
- (bool)isShowingSearchQueryInNavigationBar;
- (bool)isShowingStartPageOverriddenByExtension;
- (bool)isShowingSystemStartPage;
- (bool)isUnread;
- (id)itemForTabCollectionView:(id)arg1;
- (double)lastActivationTime;
- (id)lastSearchTerm;
- (id)lastSiriReaderSessionIdentifier;
- (double)lastViewedTime;
- (id)lastVisit;
- (id)libraryType;
- (id /* block */)linkAddedToUserActivityCallback;
- (void)linkPreviewHelper:(id)arg1 addURLToReadingList:(id)arg2;
- (void)linkPreviewHelper:(id)arg1 commitPreviewViewControllerForAction:(long long)arg2 withTabOrder:(long long)arg3;
- (void)linkPreviewHelper:(id)arg1 didProduceNavigationIntent:(id)arg2 forAction:(long long)arg3;
- (id)linkPreviewHelper:(id)arg1 previewViewControllerForURL:(id)arg2;
- (void)linkPreviewHelper:(id)arg1 redirectToExternalNavigationResult:(id)arg2;
- (id)linkPreviewHelper:(id)arg1 resultOfLoadingURL:(id)arg2;
- (bool)linkPreviewHelper:(id)arg1 supportsAction:(long long)arg2 forURL:(id)arg3;
- (void)linkPreviewHelperWillBeginDownload:(id)arg1;
- (void)linkPreviewHelperWillDisableLinkPreview;
- (void)linkPreviewHelperWillOpenUniversalLinkLocally:(id)arg1;
- (id)linkPreviewViewController;
- (void)loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (void)loadCloudTab:(id)arg1;
- (id)loadProgressObserver;
- (id)loadRequest:(id)arg1 userDriven:(bool)arg2;
- (void)loadTestURL:(id)arg1 withCallback:(id /* block */)arg2;
- (void)loadTestURL:(id)arg1 withCallback:(id /* block */)arg2 pagesNeedingMemoryWarningSent:(id)arg3;
- (void)loadURL:(id)arg1;
- (void)loadURL:(id)arg1 title:(id)arg2 deferNavigationWhenNotActive:(bool)arg3 skipSyncableTabUpdates:(bool)arg4;
- (id)loadURL:(id)arg1 userDriven:(bool)arg2;
- (void)loadURLForContinuousReadingList:(id)arg1 fromBookmark:(id)arg2;
- (void)loadWindowDotOpenExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2;
- (void)loadingController:(id)arg1 willLoadRequest:(id)arg2 webView:(id)arg3 userDriven:(bool)arg4;
- (void)loadingControllerWillStartUserDrivenLoad:(id)arg1;
- (id)loadingDialogPageTitleForPrintController:(id)arg1;
- (void)makeStrongPasswordFieldViewableAndEditable:(bool)arg1;
- (bool)matchedLastSearch;
- (bool)mediaCaptureEnabled;
- (unsigned long long)mediaStateIcon;
- (unsigned long long)mediaSuspensionReasons;
- (bool)mustShowBarsForBackForwardListItem:(id)arg1;
- (void)mute;
- (void)muteMediaCapture;
- (id)navigationBarItem;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)openInTabGroupMenuWithNewTabGroupName:(id)arg1 URL:(id)arg2 descendantCount:(long long)arg3 handler:(id /* block */)arg4;
- (id)overrideUndoManagerForSFWebView:(id)arg1;
- (id)ownerUUID;
- (id)pageLoadErrorController;
- (void)pageLoadErrorController:(id)arg1 allowLegacyTLSConnectionForURL:(id)arg2 navigateToURL:(id)arg3;
- (void)pageLoadErrorController:(id)arg1 loadFailedRequestAfterError:(id)arg2;
- (void)pageLoadErrorController:(id)arg1 presentViewController:(id)arg2;
- (void)pageLoadErrorControllerClosePage:(id)arg1;
- (void)pageLoadErrorControllerDidAddAlert:(id)arg1;
- (id)pageLoadErrorControllerGetSecIdentityPreferencesController:(id)arg1;
- (bool)pageLoadErrorControllerIsInPreviewMode:(id)arg1;
- (void)pageLoadErrorControllerReloadWithoutPrivateRelay:(id)arg1;
- (bool)pageLoadErrorControllerShouldHandleCertificateError:(id)arg1;
- (bool)pageLoadErrorControllerShouldPermanentlyAcceptCertificate:(id)arg1;
- (bool)pageLoadErrorControllerShouldReloadAfterError:(id)arg1;
- (id)pageLoadStatistics;
- (long long)pageStatus;
- (id)pageTitleForPrintController:(id)arg1;
- (double)pageZoomFactor;
- (void)panel:(id)arg1 decidePolicyForLocalAuthenticatorWithCompletionHandler:(id /* block */)arg2;
- (void)panel:(id)arg1 dismissWebAuthenticationPanelWithResult:(long long)arg2;
- (void)panel:(id)arg1 requestPINWithRemainingRetries:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)panel:(id)arg1 selectAssertionResponse:(id)arg2 source:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)panel:(id)arg1 updateWebAuthenticationPanel:(long long)arg2;
- (id)parentTabDocumentForBackClosesSpawnedTab;
- (double)parentTabIDForWebExtensions;
- (id)pdfView;
- (id)pendingURLForWebExtensions;
- (void)perSiteSettingsUIPresentSettings;
- (void)performAutoFillAction;
- (void)performPageLevelAutoFill;
- (id)permissionDialogThrottler;
- (bool)persistWhenHibernated;
- (id)personalizationData;
- (id)pinnedTitle;
- (id)pinnedURL;
- (long long)policy;
- (void)prepareToContinueUserActivity;
- (void)prepareToUseReader;
- (void)presentDialog:(id)arg1 sender:(id)arg2;
- (void)presentNextDialogIfNeeded;
- (id)presentingViewControllerForAction:(id)arg1;
- (id)presentingViewControllerForPrintController:(id)arg1;
- (id)previewViewControllerForURL:(id)arg1;
- (bool)previousLoadingCompleteStateForWebExtensionOnUpdatedEvent;
- (id)previousTitleForWebExtensionOnUpdatedEvent;
- (id)previousURLForWebExtensionOnUpdatedEvent;
- (id)previousWebExtensionTabPosition;
- (id)printController;
- (void)printController:(id)arg1 didCreatePrintInfo:(id)arg2;
- (bool)printControllerCanPresentPrintUI:(id)arg1;
- (bool)printControllerPageIsLoading:(id)arg1;
- (bool)printControllerShouldPrintReader:(id)arg1;
- (bool)privacyReportShouldSeparateBlockedTrackers;
- (id)privateBrowsingPrivacyProtectionsBanner;
- (id)profile;
- (id)progressState;
- (bool)queryParameterFilteringDataQueueShouldMergePendingData:(id)arg1;
- (id)quickLookDocument;
- (id)readerContext;
- (void)readerController:(id)arg1 didClickLinkInReaderWithRequest:(id)arg2;
- (void)readerController:(id)arg1 didClickLinkRequestingNewWindowInReaderWithRequest:(id)arg2;
- (void)readerController:(id)arg1 didDeactivateReaderWithMode:(unsigned long long)arg2;
- (void)readerController:(id)arg1 didDetermineAdditionalTextSamples:(id)arg2 dueTo:(long long)arg3;
- (void)readerController:(id)arg1 didDetermineReaderAvailability:(id)arg2 dueTo:(long long)arg3;
- (void)readerController:(id)arg1 didExtractArticleText:(id)arg2 withMetadata:(id)arg3;
- (void)readerController:(id)arg1 didTwoFingerTapLinkInReaderWithContext:(id)arg2;
- (id)readerPageArchiveURL;
- (id)readerURLForReaderController:(id)arg1;
- (long long)readerViewTopScrollOffset;
- (id)readerWebView;
- (id)readingListBookmark;
- (int)readingListBookmarkID;
- (oneway void)release;
- (void)reload;
- (void)reloadDisablingAdvancedPrivateBrowsingPrivacyProtections:(bool)arg1;
- (void)reloadDisablingContentBlockers:(bool)arg1;
- (void)reloadEnablingDowngradedPrivateRelay:(bool)arg1;
- (void)reloadFromOrigin;
- (void)reloadFromOriginUserInitiated;
- (id)reloadOptionsController;
- (void)reloadUserInitiated;
- (void)removeAutomaticPasswordButton;
- (void)removeMediaSuspensionReason:(unsigned long long)arg1;
- (void)removeNavigationObserver:(id)arg1;
- (void)removeRenderingProgressObserver:(id)arg1;
- (void)replaceCurrentPasswordWithPassword:(id)arg1;
- (void)resetPageZoomSetting;
- (void)resetTabViewItems;
- (void)restoreAllHighlightsData;
- (void)restoreScrollPositionWithCloudTab:(id)arg1;
- (void)restoreSessionState:(id)arg1 andNavigate:(bool)arg2;
- (void)restoreSessionState:(id)arg1 andNavigate:(bool)arg2 fromSafariViewService:(bool)arg3;
- (void)restoreStateFromTab:(id)arg1;
- (id)resultOfLoadingURL:(id)arg1;
- (id)retain;
- (unsigned long long)retainCount;
- (id)safariApplicationVersionForTranslationContext:(id)arg1;
- (id)safeBrowsingController;
- (id)sameDocumentNavigationToHistoryVisitCorrelator;
- (void)saveWebArchiveToPath:(id)arg1 completion:(id /* block */)arg2;
- (struct CGPoint { double x1; double x2; })scrollPoint;
- (id)searchableItemAttributes;
- (void)select;
- (id)sessionState;
- (unsigned long long)sessionStateRestorationSource;
- (void)setActive:(bool)arg1;
- (void)setAllowsProgrammaticFocusToBeginInputSession:(bool)arg1;
- (void)setAllowsRemoteInspection:(bool)arg1;
- (void)setAppBanner:(id)arg1;
- (void)setAppBannerRemovalWasDeferred:(bool)arg1;
- (void)setAppSuggestionBanner:(id)arg1 isPinned:(bool)arg2;
- (void)setAssociatedBlockingViewController:(id)arg1;
- (void)setBrowserController:(id)arg1 afterTabGroupReuse:(bool)arg2;
- (void)setChangedPropertiesForOnUpdatedWebExtensionEvent:(unsigned long long)arg1;
- (void)setClosed:(bool)arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayingStandaloneImage:(bool)arg1;
- (void)setDisplayingStandaloneMedia:(bool)arg1;
- (void)setExtensionIdentifierToDynamicallyInjectedStyleSheets:(id)arg1;
- (void)setExternalAppRedirectState:(long long)arg1;
- (void)setHasBeenInserted:(bool)arg1;
- (void)setHibernatedDueToMemoryWarning:(bool)arg1;
- (void)setInitialURLForStatePersisting:(id)arg1 title:(id)arg2;
- (void)setInteractivelyInserted:(bool)arg1;
- (void)setIsBlank:(bool)arg1;
- (void)setIsNavigatingViaReloadWithoutPrivateRelay:(bool)arg1;
- (void)setIsPlaceholder:(bool)arg1;
- (void)setLastSearchTerm:(id)arg1;
- (void)setLastSiriReaderSessionIdentifier:(id)arg1;
- (void)setLastViewedTime:(double)arg1;
- (void)setLastVisit:(id)arg1;
- (void)setLibraryType:(id)arg1;
- (void)setLinkAddedToUserActivityCallback:(id /* block */)arg1;
- (void)setLinkPreviewViewController:(id)arg1;
- (void)setLoadProgressObserver:(id)arg1;
- (void)setMatchedLastSearch:(bool)arg1;
- (void)setMediaCaptureEnabled:(bool)arg1;
- (void)setMediaSuspensionReasons:(unsigned long long)arg1;
- (void)setNeedsNewTabSnapshot;
- (void)setNeedsSendTelemetryForProvisionalLoad;
- (void)setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (void)setOwnerUUID:(id)arg1;
- (void)setPageLoadStatistics:(id)arg1;
- (void)setPageZoomFactor:(double)arg1;
- (void)setParentTabDocumentForBackClosesSpawnedTab:(id)arg1;
- (void)setPerformingFirstLoadAfterOpenInBackground:(bool)arg1;
- (void)setPerformingRedirectAfterOpenInBackground:(bool)arg1;
- (void)setPersistWhenHibernated:(bool)arg1;
- (void)setPinned:(bool)arg1;
- (void)setPinned:(bool)arg1 notify:(bool)arg2;
- (void)setPinnedTitle:(id)arg1;
- (void)setPinnedURL:(id)arg1;
- (void)setPolicy:(long long)arg1;
- (void)setPreparingForNewUserActivity:(bool)arg1;
- (void)setPreviousWebExtensionTabPosition:(id)arg1;
- (void)setQuickLookDocument:(id)arg1;
- (void)setReaderViewTopScrollOffset:(long long)arg1;
- (void)setReadingListBookmark:(id)arg1;
- (void)setScrollPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setSearchableItemAttributes:(id)arg1;
- (void)setSessionStateRestorationSource:(unsigned long long)arg1;
- (void)setShareParticipants:(id)arg1;
- (void)setShouldRestoreReader:(bool)arg1;
- (void)setShouldRevealAppLinkBannerForNextCommit:(bool)arg1;
- (void)setShowingContinuous:(bool)arg1;
- (void)setShowingReader:(bool)arg1;
- (void)setSiteCustomIcon:(id)arg1;
- (void)setSiteCustomIconPrecomposed:(bool)arg1;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (void)setSourceApplicationBundleIdentifierForNextCommit:(id)arg1;
- (void)setStoreBannersAreDisabled:(bool)arg1;
- (void)setSupportsReuseForSpotlightSearch:(bool)arg1;
- (void)setSuppressWebExtensionEvents:(bool)arg1;
- (void)setSuppressingProgressAnimationForNavigationGesture:(bool)arg1;
- (void)setTabGroupTab:(id)arg1;
- (void)setTabReuseURL:(id)arg1;
- (void)setTitleForLastSearch:(id)arg1;
- (void)setTitleWords:(id)arg1;
- (void)setURLFromExternalApplication:(id)arg1;
- (void)setURLStringComponents:(id)arg1;
- (void)setURLStringForLastSearch:(id)arg1;
- (void)setUnread:(bool)arg1;
- (void)setUpBackClosesSpawnedTabWithParent:(id)arg1;
- (void)setUserActivityFromNotes:(id)arg1;
- (void)setUuid:(id)arg1;
- (void)setWantsReaderWhenActivated:(bool)arg1;
- (void)setWasOpenedFromLink:(bool)arg1;
- (void)setZoomFactor:(double)arg1;
- (id)sfWebView:(id)arg1 didStartDownload:(id)arg2;
- (bool)sfWebViewCanFindNextOrPrevious:(id)arg1;
- (void)sfWebViewDidBecomeFirstResponder:(id)arg1;
- (void)sfWebViewDidChangeSafeAreaInsets:(id)arg1;
- (void)sfWebViewDidEndFormControlInteraction:(id)arg1;
- (void)sfWebViewDidStartFormControlInteraction:(id)arg1;
- (bool)sfWebViewShouldFillStringForFind:(id)arg1;
- (id)shareParticipants;
- (id)sharingExtensionController;
- (bool)shouldActivateReaderWhenAvailable;
- (bool)shouldBlockAppSuggestionBanner:(id)arg1;
- (bool)shouldObscureForDigitalHealth;
- (bool)shouldPersist;
- (bool)shouldRestoreReader;
- (bool)shouldRevealAppLinkBannerForNextCommit;
- (bool)shouldSelectOriginatingTabWhenClosed;
- (bool)shouldShowReaderOnActivate;
- (bool)shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:(id)arg1;
- (void)showDownload:(id)arg1;
- (void)showFindOnPage;
- (id)siteCustomIcon;
- (bool)siteCustomIconPrecomposed;
- (void)snapshotForWebClipIcon:(id /* block */)arg1;
- (void)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1 topBackdropHeight:(double)arg2 options:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (id)sourceApplicationBundleIdentifier;
- (id)sourceApplicationBundleIdentifierForNextCommit;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceRectForPopoverActionPicker:(id)arg1;
- (void)statusBarIndicatorTappedWithCompletionHandler:(id /* block */)arg1;
- (void)stopAdvertisingProactiveActivityContent;
- (void)stopLoading;
- (void)stopLoadingUserInitiated;
- (bool)storeBannersAreDisabled;
- (id)suggestedFileExtensionForQuickLookDocument:(id)arg1;
- (id)suggestedFileNameForQuickLookDocument:(id)arg1;
- (id)suggestedFilenameForDisplayedPDF;
- (id)suggestedTitleForCurrentURL;
- (bool)supportsAdvancedPrivacyProtectionsForURL:(id)arg1;
- (bool)supportsReuseForSpotlightSearch;
- (bool)suppressWebExtensionEvents;
- (bool)suppressingProgressAnimationForNavigationGesture;
- (id)tabBarItem;
- (id)tabCollectionItems;
- (void)tabGroupManager:(id)arg1 didUpadateActiveParticipants:(id)arg2 inTabWithUUID:(id)arg3;
- (id)tabGroupTab;
- (id)tabOverviewItem;
- (id)tabReuseURL;
- (id)tabStateData;
- (id)tabStateDataForQuickUpdate;
- (id)tabTitle;
- (id /* block */)tabUpdateBlock;
- (struct CGSize { double x1; double x2; })tabViewSize;
- (id)themeColor;
- (id)title;
- (id)titleForCloudTab;
- (id)titleForLastSearch;
- (id)titleForNewBookmark;
- (id)titleForSharing;
- (id)titleWords;
- (void)toggleMediaStateMuted;
- (void)toggleReader;
- (id)trackerInfo;
- (id)translationConsentAlertHelperViewControllerToPresentDetailsFrom:(id)arg1;
- (id)translationContext;
- (void)translationContext:(id)arg1 shouldReportProgressInUnifiedField:(bool)arg2;
- (void)translationContext:(id)arg1 showFeedbackConsentAlertWithCompletionHandler:(id /* block */)arg2;
- (void)translationContext:(id)arg1 showFirstTimeConsentAlertWithCompletionHandler:(id /* block */)arg2;
- (void)translationContext:(id)arg1 showTranslationErrorAlertWithTitle:(id)arg2 message:(id)arg3;
- (void)translationContext:(id)arg1 urlForCurrentPageWithCompletionHandler:(id /* block */)arg2;
- (bool)translationContextIsUsingPrivateBrowsing:(id)arg1;
- (void)translationContextNeedsScrollHeightVisibilityUpdate:(id)arg1;
- (void)translationContextReloadPageInOriginalLanguage:(id)arg1;
- (void)translationContextWillRequestTranslatingWebpage:(id)arg1;
- (void)unfreezeAfterNavigationGesture:(bool)arg1;
- (void)unhibernate;
- (id)unifiedTabBarItem;
- (void)unmute;
- (void)updateAccessibilityIdentifier;
- (void)updateAncestryToChildOfTopLevelAncestorRelatedTab:(id)arg1;
- (void)updateAncestryWithParentTab:(id)arg1;
- (void)updateLockedBrowsingState;
- (void)updateMenuButtonShowsBadge;
- (void)updateReadingListItemPreviewText:(id)arg1;
- (void)updateShowsSiriReaderPlayingIcon;
- (void)updateTabIcon;
- (void)updateTabIconWithDelay:(double)arg1;
- (void)updateTabTitle;
- (void)updateThemeColorAndUnderPageBackground:(bool)arg1;
- (void)updateUsageTrackingInformationAfterLinkPreviewDismissal;
- (void)updateUsageTrackingInformationIfNecessaryGivenDocumentIsCurrent:(bool)arg1;
- (void)updateUserActivity;
- (void)updateUsesDarkTheme;
- (id)urlForExtensions;
- (id)userActivity;
- (id)userActivityFromNotes;
- (void)userDeclinedAutomaticStrongPasswordForCurrentDomainOnTabWithUUID:(id)arg1;
- (void)userDidManipulateVisibleRegion;
- (id)uuid;
- (void)validateExtensionToolbarItems;
- (id)view;
- (bool)wantsReaderWhenActivated;
- (bool)wasHibernatedDueToMemoryWarning;
- (bool)wasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
- (bool)wasLoadedWithContentBlockersEnabled;
- (bool)wasLoadedWithPrivateRelay;
- (bool)wasOpenedFromLink;
- (id)webClipMetadataFetcher;
- (id)webExtensionWindow;
- (id)webExtensionsController;
- (unsigned long long)webPageID;
- (id)webView;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 preferences:(id)arg3 decisionHandler:(id /* block */)arg4;
- (void)webView:(id)arg1 decidePolicyForNavigationResponse:(id)arg2 decisionHandler:(id /* block */)arg3;
- (void)webView:(id)arg1 didCommitNavigation:(id)arg2;
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;
- (void)webView:(id)arg1 didFailProvisionalNavigation:(id)arg2 withError:(id)arg3;
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;
- (void)webView:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)webView:(id)arg1 didReceiveServerRedirectForProvisionalNavigation:(id)arg2;
- (void)webView:(id)arg1 didStartProvisionalNavigation:(id)arg2;
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)webView:(id)arg1 runJavaScriptTextInputPanelWithPrompt:(id)arg2 defaultText:(id)arg3 initiatedByFrame:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)webView:(id)arg1 shouldLoadIconWithParameters:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)webViewDidChangeSize;
- (void)webViewDidClose:(id)arg1;
- (void)webViewDidIncreaseZoom;
- (void)webViewDidScroll;
- (id)webViewForExtensions;
- (bool)webViewIsFullscreen;
- (id)webViewsThatCanReceiveMessages;
- (void)willClose;
- (void)willDismissLinkPreviewViewController;
- (id)windowIdentifier;
- (double)zoomFactor;

@end
