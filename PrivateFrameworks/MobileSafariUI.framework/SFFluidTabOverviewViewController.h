
@interface SFFluidTabOverviewViewController : UIViewController <SFFluidCollectionViewDelegate, SFFluidCollectionViewDragDelegate, SFFluidCollectionViewDropDelegate, SFFluidTabOverviewCapsuleSelectionInteractionDelegate, SFFluidTabOverviewItemViewBorrowedContentProvider, SFFluidTabOverviewPinchInteractionDelegate, SFFluidTabOverviewViewGridLayoutDelegate, SFFluidTabOverviewViewSwipeDeleteInteractionDelegate, TabControllerDocumentObserving, TabThumbnailCollectionView> {
    <TabCollectionItem> * _activeItem;
    SFCapsuleCollectionView * _capsuleCollectionView;
    SFFluidTabOverviewCapsuleSelectionInteraction * _capsuleInteraction;
    SFFluidTabOverviewDataSource * _dataSource;
    bool  _defersActivation;
    <TabThumbnailCollectionViewDelegate> * _delegate;
    unsigned long long  _edgeForPreviousTabGroup;
    SFFluidCollectionView * _fluidCollectionView;
    SFFluidTabOverviewZoomableGridLayout * _gridLayout;
    SFFluidTabOverviewHeaderView * _headerForSizing;
    long long  _itemDragContentType;
    <TabCollectionItem> * _itemToActivate;
    SFFluidTabOverviewLinearLayout * _linearLayout;
    SFFluidTabOverviewPinchInteraction * _pinchInteraction;
    NSHashTable * _presentationObservers;
    long long  _presentationState;
    NSString * _searchTerm;
    NSIndexPath * _swipeDeleteIndexPath;
    TabController * _tabController;
    bool  _tabControllerIsPerformingBatchUpdates;
    TabOverviewToolbar * _toolbar;
    bool  _toolbarHidden;
    bool  _updateWasDeferred;
    NSMutableSet * _viewsWithBorrowedContentViews;
}

@property (nonatomic) SFCapsuleCollectionView *capsuleCollectionView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool defersActivation;
@property (nonatomic) <TabThumbnailCollectionViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double desiredSnapshotScale;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long itemDragContentType;
@property (nonatomic, retain) <TabCollectionItem> *itemToActivate;
@property (nonatomic, readonly, copy) NSArray *items;
@property (nonatomic, readonly) NSArray *itemsFullyInView;
@property (nonatomic, readonly) NSArray *itemsMatchingSearchTerm;
@property (nonatomic, readonly) UIGestureRecognizer *pinchPresentationGestureRecognizer;
@property (nonatomic, readonly) long long presentationState;
@property (nonatomic, copy) NSString *searchTerm;
@property (getter=isSearching, nonatomic, readonly) bool searching;
@property (nonatomic, readonly) unsigned long long snapshotBorderOptions;
@property (readonly) Class superclass;
@property (nonatomic) TabController *tabController;
@property (nonatomic, readonly) TabOverviewToolbar *toolbar;
@property (nonatomic, readonly) UIView *view;

- (void).cxx_destruct;
- (void)_capsuleInteractionDidBegin:(id)arg1;
- (void)_capsuleInteractionDidEnd:(id)arg1;
- (void)_tabPinchInteractionDidBegin:(id)arg1;
- (void)_tabPinchInteractionDidEnd:(id)arg1;
- (void)addPresentationObserver:(id)arg1;
- (void)beginSearching;
- (id)capsuleCollectionView;
- (bool)defersActivation;
- (id)delegate;
- (double)desiredSnapshotScale;
- (void)didUpdateItem:(id)arg1;
- (void)dismissAnimated:(bool)arg1;
- (void)endSearching;
- (void)enumerateItemsOrderedByVisibility:(id /* block */)arg1;
- (unsigned long long)estimatedSnapshotsPerPageForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withTraitCollection:(id)arg2;
- (bool)fluidCollectionView:(id)arg1 canHandleDropSession:(id)arg2;
- (id)fluidCollectionView:(id)arg1 contextMenuConfigurationForItemsAtIndexPaths:(id)arg2 point:(struct CGPoint { double x1; double x2; })arg3;
- (double)fluidCollectionView:(id)arg1 delayForAnimatingItemAtIndexPath:(id)arg2 indexPathBeforeUpdate:(id)arg3 update:(id)arg4;
- (void)fluidCollectionView:(id)arg1 didEndAnimatingItemAtIndexPath:(id)arg2;
- (void)fluidCollectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (id)fluidCollectionView:(id)arg1 indexPathForCapsuleSelectionGestureInteraction:(id)arg2;
- (bool)fluidCollectionView:(id)arg1 interaction:(id)arg2 canDeleteItemAtIndexPath:(id)arg3;
- (void)fluidCollectionView:(id)arg1 interaction:(id)arg2 didDeleteItemAtIndexPath:(id)arg3;
- (double)fluidCollectionView:(id)arg1 interaction:(id)arg2 targetScaleForPinchingItemAtIndexPath:(id)arg3;
- (id)fluidCollectionView:(id)arg1 itemsForAddingToDragSession:(id)arg2 atIndexPath:(id)arg3;
- (id)fluidCollectionView:(id)arg1 itemsForBeginningDragSession:(id)arg2 atIndexPath:(id)arg3;
- (unsigned long long)fluidCollectionView:(id)arg1 layout:(id)arg2 edgeForDeletedItemAtIndexPath:(id)arg3;
- (double)fluidCollectionView:(id)arg1 layout:(id)arg2 heightForHeaderInSection:(unsigned long long)arg3;
- (double)fluidCollectionView:(id)arg1 layout:(id)arg2 heightForItemsInSection:(unsigned long long)arg3;
- (void)fluidCollectionView:(id)arg1 performDropWithCoordinator:(id)arg2;
- (void)fluidCollectionView:(id)arg1 willBeginAnimatingItemAtIndexPath:(id)arg2;
- (void)fluidCollectionView:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isSearching;
- (long long)itemDragContentType;
- (id)itemToActivate;
- (void)itemViewDidChangeWantsBorrowedContentView:(id)arg1;
- (id)items;
- (id)itemsFullyInView;
- (id)itemsMatchingSearchTerm;
- (id)pinchPresentationGestureRecognizer;
- (void)presentAnimated:(bool)arg1;
- (long long)presentationState;
- (void)removePresentationObserver:(id)arg1;
- (id)searchTerm;
- (void)setCapsuleCollectionView:(id)arg1;
- (void)setDefersActivation:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setItemToActivate:(id)arg1;
- (void)setSearchTerm:(id)arg1;
- (void)setTabController:(id)arg1;
- (unsigned long long)snapshotBorderOptions;
- (struct CGSize { double x1; double x2; })snapshotSizeForSuggestedSize:(struct CGSize { double x1; double x2; })arg1;
- (id)tabController;
- (void)tabController:(id)arg1 didSwitchFromTabDocument:(id)arg2 toTabDocument:(id)arg3;
- (void)tabController:(id)arg1 didSwitchFromTabGroup:(id)arg2;
- (void)tabControllerDidEndUpdates:(id)arg1;
- (void)tabControllerDocumentCountDidChange:(id)arg1;
- (void)tabControllerWillBeginUpdates:(id)arg1;
- (id)toolbar;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewSafeAreaInsetsDidChange;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
