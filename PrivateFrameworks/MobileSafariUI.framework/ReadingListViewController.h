
@interface ReadingListViewController : UIViewController <BookmarksPanelStateRestoring, BookmarksToolbarItemProvider, PreviewTableViewControllerDelegate, UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate, UITableViewDragDelegate, UITableViewDropDelegate, WebBookmarksClientDelegateProtocol> {
    NSString * _archivingBookmarkUUID;
    UIBarButtonItem * _cachedDeleteBarButtonItem;
    UIBarButtonItem * _cachedSaveOfflineBarButtonItem;
    UIBarButtonItem * _cachedUnreadFilterBarButtonButton;
    WebBookmarkCollection * _collection;
    bool  _deferEnteringEditMode;
    <ReadingListViewControllerDelegate> * _delegate;
    NSTimer * _deletionNotificationTimer;
    ReadingListContentUnavailableView * _explanationView;
    ReadingListLeadImageCache * _imageCache;
    bool  _isUsingSwipeAction;
    <LinkPreviewProvider> * _linkPreviewProvider;
    bool  _loadIconsSynchronously;
    <_SFNavigationIntentHandling> * _navigationIntentHandler;
    bool  _needsContentOffsetAdjustment;
    bool  _networkIsReachable;
    WebBookmarkList * _readingList;
    SafariFetcherServerProxy * _safariFetcherServerProxy;
    UISearchBar * _searchBar;
    bool  _shouldUseSearchControllerInNavigationBar;
    bool  _showingAllBookmarks;
    <TabGroupProvider> * _tabGroupProvider;
    UITableView * _tableView;
    PreviewTableViewController * _tableViewController;
    NSString * _userTypedFilter;
    NSMutableSet * _visibleBookmarkIDs;
}

@property (nonatomic, readonly) NSArray *bookmarksPanelToolbarItems;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ReadingListViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) <LinkPreviewProvider> *linkPreviewProvider;
@property (nonatomic) <_SFNavigationIntentHandling> *navigationIntentHandler;
@property (nonatomic, readonly) bool showingAllBookmarks;
@property (readonly) Class superclass;
@property (nonatomic) <TabGroupProvider> *tabGroupProvider;
@property (nonatomic, readonly) UITableView *tableView;

- (void).cxx_destruct;
- (id)_URLForRowAtIndexPath:(id)arg1;
- (void)_adjustContentOffsetIfNeeded;
- (id)_bookmarkAtIndexPath:(id)arg1;
- (void)_clearExplanationView;
- (void)_connectSafariFetcherServerProxy;
- (id)_createAction:(long long)arg1 forRowAtIndexPath:(id)arg2 allowingNewlineInTitle:(bool)arg3 withBlock:(id /* block */)arg4;
- (id)_createActions:(id)arg1 forRowAtIndexPath:(id)arg2 allowingNewlineInTitles:(bool)arg3 withBlock:(id /* block */)arg4;
- (id)_currentReadingListBookmark;
- (id)_deleteBarButtonItem;
- (void)_deleteBookmarks:(id)arg1;
- (void)_didAddNewReadingListBookmark;
- (void)_didChangeUnreadFilter;
- (void)_disconnectSafariFetcherServerProxy;
- (id)_editButtonIdentifier;
- (void)_fetchMetadataIfNeededForBookmark:(id)arg1;
- (id)_iconForUUID:(id)arg1 iconData:(id)arg2;
- (void)_networkReachabilityChanged:(id)arg1;
- (void)_postChangeNotification;
- (void)_readingListBookmarkDidUpdate:(id)arg1;
- (void)_readingListBookmarkMetadataDidUpdate:(id)arg1;
- (void)_readingListItemAtIndexPath:(id)arg1 lockAndPerformUpdates:(id /* block */)arg2 performBlockIfLockFailed:(id /* block */)arg3;
- (void)_readingListItemAtIndexPath:(id)arg1 setUnread:(bool)arg2;
- (void)_readingListItemAtIndexPathDelete:(id)arg1;
- (void)_readingListItemsAtIndexPaths:(id)arg1 lockAndPerformUpdate:(id /* block */)arg2 performBlockIfLockFailed:(id /* block */)arg3;
- (void)_reloadReadingList;
- (void)_reloadReadingListAndTable;
- (void)_restoreCellSeparator;
- (void)_saveForOffline:(id)arg1;
- (id)_saveOfflineBarButtonItem;
- (void)_scheduleDelayedChangeNotification;
- (id)_separatorEffect;
- (void)_setIconForBookmark:(id)arg1 cell:(id)arg2 synchronously:(bool)arg3;
- (bool)_shouldUseTranslucentAppearance;
- (void)_showExplanationView;
- (long long)_tableView:(id)arg1 dataOwnerForDragSession:(id)arg2 atIndexPath:(id)arg3;
- (long long)_tableView:(id)arg1 dataOwnerForDropSession:(id)arg2 withDestinationIndexPath:(id)arg3;
- (id)_unreadFilterBarButtonItem;
- (id)_unreadFilterButtonIdentifier;
- (id)_unreadFilterButtonTitle;
- (void)_updateEditingButtonsEnabled;
- (void)_updateSearchBar;
- (void)_updateTableViewByComputingDifference;
- (void)_updateTableViewByRemovingReadingListItemAtIndexPath:(id)arg1;
- (void)_updateTableViewByRemovingReadingListItemsAtIndexPaths:(id)arg1;
- (void)_updateToolbarItemsAnimated:(bool)arg1;
- (void)_webBookmarksDidReload:(id)arg1;
- (id)bookmarksPanelToolbarItems;
- (void)bookmarksServerProxy:(id)arg1 didStartFetchingReadingListItem:(id)arg2;
- (void)bookmarksServerProxy:(id)arg1 didStopFetchingReadingListItem:(id)arg2;
- (void)bookmarksServerProxyConnectionInvalidated:(id)arg1;
- (void)bookmarksServerProxyDidFinishFetching:(id)arg1;
- (id)currentStateDictionary;
- (void)dealloc;
- (id)delegate;
- (void)didMarkBookmarkUnreadAtIndex:(unsigned long long)arg1;
- (id)init;
- (id)linkPreviewProvider;
- (void)loadView;
- (id)navigationIntentHandler;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)previewTableViewController:(id)arg1 URLForRowAtIndexPath:(id)arg2;
- (id)previewTableViewController:(id)arg1 menuForRowAtIndexPath:(id)arg2;
- (bool)restoreStateWithDictionary:(id)arg1;
- (id)safari_tableViewForScrollPositionSaving;
- (id)safari_tableViewScrollPositionSaveIdentifier;
- (bool)safari_wantsDoneButtonInModalBookmarksPanel;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)searchBar:(id)arg1 textDidChange:(id)arg2;
- (void)searchBarCancelButtonClicked:(id)arg1;
- (void)searchBarSearchButtonClicked:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setLinkPreviewProvider:(id)arg1;
- (void)setNavigationIntentHandler:(id)arg1;
- (void)setTabGroupProvider:(id)arg1;
- (bool)showingAllBookmarks;
- (id)tabGroupProvider;
- (id)tableView;
- (bool)tableView:(id)arg1 canFocusRowAtIndexPath:(id)arg2;
- (bool)tableView:(id)arg1 canHandleDropSession:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 contextMenuConfigurationForRowAtIndexPath:(id)arg2 point:(struct CGPoint { double x1; double x2; })arg3;
- (void)tableView:(id)arg1 didBeginMultipleSelectionInteractionAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didDeselectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didEndDisplayingCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 didEndEditingRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 dragSessionWillBegin:(id)arg2;
- (id)tableView:(id)arg1 dropSessionDidUpdate:(id)arg2 withDestinationIndexPath:(id)arg3;
- (double)tableView:(id)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (id)tableView:(id)arg1 itemsForAddingToDragSession:(id)arg2 atIndexPath:(id)arg3 point:(struct CGPoint { double x1; double x2; })arg4;
- (id)tableView:(id)arg1 itemsForBeginningDragSession:(id)arg2 atIndexPath:(id)arg3;
- (id)tableView:(id)arg1 leadingSwipeActionsForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)tableView:(id)arg1 performDropWithCoordinator:(id)arg2;
- (id)tableView:(id)arg1 previewForDismissingContextMenuWithConfiguration:(id)arg2;
- (id)tableView:(id)arg1 previewForHighlightingContextMenuWithConfiguration:(id)arg2;
- (bool)tableView:(id)arg1 shouldBeginMultipleSelectionInteractionAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 trailingSwipeActionsForRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (void)tableView:(id)arg1 willBeginEditingRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (void)tableViewDidFinishReload:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateAndScrollToCurrentSelectedItemIfNeeded:(bool)arg1;
- (void)updateUserActivityState:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)willMoveToParentViewController:(id)arg1;

@end
