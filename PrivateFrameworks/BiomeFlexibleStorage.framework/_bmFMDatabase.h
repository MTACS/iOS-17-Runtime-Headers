
@interface _bmFMDatabase : NSObject {
    NSMutableDictionary * _cachedStatements;
    bool  _checkedOut;
    bool  _crashOnErrors;
    NSString * _databasePath;
    NSDateFormatter * _dateFormat;
    void * _db;
    bool  _isExecutingStatement;
    bool  _isInTransaction;
    bool  _isOpen;
    bool  _logsErrors;
    double  _maxBusyRetryTimeInterval;
    NSMutableSet * _openFunctions;
    NSMutableSet * _openResultSets;
    bool  _shouldCacheStatements;
    double  _startBusyRetryTime;
    bool  _traceExecution;
}

@property (nonatomic) unsigned int applicationID;
@property (retain) NSMutableDictionary *cachedStatements;
@property (nonatomic, readonly) int changes;
@property bool checkedOut;
@property bool crashOnErrors;
@property (nonatomic, readonly) NSString *databasePath;
@property (nonatomic, readonly) NSURL *databaseURL;
@property (nonatomic, readonly) bool goodConnection;
@property (nonatomic, readonly) bool hasOpenResultSets;
@property (nonatomic, readonly) bool isInTransaction;
@property (nonatomic) bool isOpen;
@property (nonatomic, readonly) long long lastInsertRowId;
@property bool logsErrors;
@property (nonatomic) double maxBusyRetryTimeInterval;
@property (nonatomic) bool shouldCacheStatements;
@property (nonatomic, readonly) void*sqliteHandle;
@property bool traceExecution;
@property (nonatomic) unsigned int userVersion;

+ (id)FMDBUserVersion;
+ (int)FMDBVersion;
+ (id)databaseWithPath:(id)arg1;
+ (id)databaseWithURL:(id)arg1;
+ (bool)isSQLiteThreadSafe;
+ (id)sqliteLibVersion;
+ (id)storeableDateFormat:(id)arg1;

- (void).cxx_destruct;
- (unsigned int)applicationID;
- (bool)beginDeferredTransaction;
- (bool)beginExclusiveTransaction;
- (bool)beginImmediateTransaction;
- (bool)beginTransaction;
- (int)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt { }*)arg3;
- (bool)bindStatement:(struct sqlite3_stmt { }*)arg1 WithArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;
- (bool)boolForQuery:(id)arg1;
- (int)busyRetryTimeout;
- (id)cachedStatementForQuery:(id)arg1;
- (id)cachedStatements;
- (int)changes;
- (bool)checkedOut;
- (bool)checkpoint:(int)arg1 error:(id*)arg2;
- (bool)checkpoint:(int)arg1 name:(id)arg2 error:(id*)arg3;
- (bool)checkpoint:(int)arg1 name:(id)arg2 logFrameCount:(int*)arg3 checkpointCount:(int*)arg4 error:(id*)arg5;
- (void)clearCachedStatements;
- (bool)close;
- (void)closeOpenResultSets;
- (bool)columnExists:(id)arg1 columnName:(id)arg2;
- (bool)columnExists:(id)arg1 inTableWithName:(id)arg2;
- (bool)commit;
- (bool)crashOnErrors;
- (id)dataForQuery:(id)arg1;
- (bool)databaseExists;
- (id)databasePath;
- (id)databaseURL;
- (id)dateForQuery:(id)arg1;
- (id)dateFromString:(id)arg1;
- (void)dealloc;
- (double)doubleForQuery:(id)arg1;
- (id)errorWithMessage:(id)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id*)arg3;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4 shouldBind:(bool)arg5;
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;
- (id)executeQuery:(id)arg1 withVAList:(char *)arg2;
- (id)executeQueryWithFormat:(id)arg1;
- (bool)executeStatements:(id)arg1;
- (bool)executeStatements:(id)arg1 withResultBlock:(id /* block */)arg2;
- (bool)executeUpdate:(id)arg1;
- (bool)executeUpdate:(id)arg1 error:(id*)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(char *)arg5;
- (bool)executeUpdate:(id)arg1 values:(id)arg2 error:(id*)arg3;
- (bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;
- (bool)executeUpdate:(id)arg1 withErrorAndBindings:(id*)arg2;
- (bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;
- (bool)executeUpdate:(id)arg1 withVAList:(char *)arg2;
- (bool)executeUpdateWithFormat:(id)arg1;
- (void)extractSQL:(id)arg1 argumentsList:(char *)arg2 intoString:(id)arg3 arguments:(id)arg4;
- (id)getSchema;
- (id)getTableSchema:(id)arg1;
- (bool)goodConnection;
- (bool)hadError;
- (bool)hasDateFormatter;
- (bool)hasOpenResultSets;
- (id)inSavePoint:(id /* block */)arg1;
- (bool)inTransaction;
- (id)init;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;
- (int)intForQuery:(id)arg1;
- (bool)interrupt;
- (bool)isInTransaction;
- (bool)isOpen;
- (id)lastError;
- (int)lastErrorCode;
- (id)lastErrorMessage;
- (int)lastExtendedErrorCode;
- (long long)lastInsertRowId;
- (int)limitFor:(int)arg1 value:(int)arg2;
- (bool)logsErrors;
- (long long)longForQuery:(id)arg1;
- (void)makeFunctionNamed:(id)arg1 arguments:(int)arg2 block:(id /* block */)arg3;
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(id /* block */)arg3;
- (double)maxBusyRetryTimeInterval;
- (bool)open;
- (bool)openWithFlags:(int)arg1;
- (bool)openWithFlags:(int)arg1 vfs:(id)arg2;
- (id)prepare:(id)arg1;
- (bool)rekey:(id)arg1;
- (bool)rekeyWithData:(id)arg1;
- (bool)releaseSavePointWithName:(id)arg1 error:(id*)arg2;
- (void)resultData:(id)arg1 context:(void*)arg2;
- (void)resultDouble:(double)arg1 context:(void*)arg2;
- (void)resultError:(id)arg1 context:(void*)arg2;
- (void)resultErrorCode:(int)arg1 context:(void*)arg2;
- (void)resultErrorNoMemoryInContext:(void*)arg1;
- (void)resultErrorTooBigInContext:(void*)arg1;
- (void)resultInt:(int)arg1 context:(void*)arg2;
- (void)resultLong:(long long)arg1 context:(void*)arg2;
- (void)resultNullInContext:(void*)arg1;
- (void)resultSetDidClose:(id)arg1;
- (void)resultString:(id)arg1 context:(void*)arg2;
- (bool)rollback;
- (bool)rollbackToSavePointWithName:(id)arg1 error:(id*)arg2;
- (void)setApplicationID:(unsigned int)arg1;
- (void)setBusyRetryTimeout:(int)arg1;
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;
- (void)setCachedStatements:(id)arg1;
- (void)setCheckedOut:(bool)arg1;
- (void)setCrashOnErrors:(bool)arg1;
- (void)setDateFormat:(id)arg1;
- (void)setIsOpen:(bool)arg1;
- (bool)setKey:(id)arg1;
- (bool)setKeyWithData:(id)arg1;
- (void)setLogsErrors:(bool)arg1;
- (void)setMaxBusyRetryTimeInterval:(double)arg1;
- (void)setShouldCacheStatements:(bool)arg1;
- (void)setTraceExecution:(bool)arg1;
- (void)setUserVersion:(unsigned int)arg1;
- (bool)shouldCacheStatements;
- (void*)sqliteHandle;
- (const char *)sqlitePath;
- (bool)startSavePointWithName:(id)arg1 error:(id*)arg2;
- (id)stringForQuery:(id)arg1;
- (id)stringFromDate:(id)arg1;
- (bool)tableExists:(id)arg1;
- (bool)traceExecution;
- (bool)update:(id)arg1 withErrorAndBindings:(id*)arg2;
- (unsigned int)userVersion;
- (bool)validateSQL:(id)arg1 error:(id*)arg2;
- (id)valueData:(void*)arg1;
- (double)valueDouble:(void*)arg1;
- (int)valueInt:(void*)arg1;
- (long long)valueLong:(void*)arg1;
- (id)valueString:(void*)arg1;
- (int)valueType:(void*)arg1;
- (void)warnInUse;

@end
