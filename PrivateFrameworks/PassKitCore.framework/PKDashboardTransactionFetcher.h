
@interface PKDashboardTransactionFetcher : NSObject <PKPaymentDataProviderDelegate> {
    bool  _allowSynchronousFetch;
    PKCurrencyAmount * _amount;
    long long  _amountComparison;
    unsigned long long  _cashBackType;
    NSDictionary * _cashbackGroups;
    PKPaymentPass * _cashbackPass;
    NSString * _cashbackPassUniqueID;
    PKTransactionSourceCollection * _cashbackTransactionSourceCollection;
    NSSet * _counterpartHandles;
    <PKDashboardTransactionFetcherDelegate> * _delegate;
    NSDate * _endDate;
    bool  _filterDisputesOnly;
    NSSet * _filteredTransactionSourceIdentifiers;
    bool  _hasMoreUpdates;
    PKCreditInstallmentPlan * _installmentPlan;
    NSArray * _instantWithdrawalFeeGroups;
    unsigned long long  _limit;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lockUpdate;
    PKMerchant * _merchant;
    long long  _merchantCategory;
    bool  _needsCashbackUniqueID;
    bool  _needsInstantWithdrawalFees;
    <PKPaymentDataProvider> * _paymentDataProvider;
    bool  _pendingUpdate;
    NSArray * _regions;
    NSDecimalNumber * _rewardsValue;
    unsigned long long  _rewardsValueUnit;
    NSArray * _sources;
    NSDate * _startDate;
    NSArray * _statuses;
    long long  _subType;
    NSSet * _tags;
    PKTransactionSourceCollection * _transactionSourceCollection;
    long long  _transactionType;
    unsigned long long  _type;
    NSArray * _types;
}

@property (nonatomic) bool allowSynchronousFetch;
@property (nonatomic, retain) PKPaymentPass *cashbackPass;
@property (nonatomic, retain) PKTransactionSourceCollection *cashbackTransactionSourceCollection;
@property (nonatomic, readonly) NSSet *counterpartHandles;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKDashboardTransactionFetcherDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSDate *endDate;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long limit;
@property (nonatomic, readonly) <PKPaymentDataProvider> *paymentDataProvider;
@property (nonatomic, readonly) NSDate *startDate;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long type;

- (void).cxx_destruct;
- (void)_addCashbackTransactions:(id)arg1 currentMonthOnly:(bool)arg2 completion:(id /* block */)arg3;
- (void)_addInstantWidthdrawalTransactionsWithCompletion:(id /* block */)arg1;
- (void)_commonSetup;
- (id)_feeTotalForTransaction:(id)arg1;
- (void)_processPaymentPassTransactionsWithTransactions:(id)arg1 currentMonthOnly:(bool)arg2 sendTransactionsBlock:(id /* block */)arg3;
- (void)_sendUpdatedTransactions;
- (id)_sortedTransactions:(id)arg1 ascending:(bool)arg2 limit:(unsigned long long)arg3;
- (id)_transactionRequestForCurrentFilters;
- (id)_transactionSourceIdentifiers;
- (bool)allowSynchronousFetch;
- (id)cashbackGroupForDateComponents:(id)arg1 cashbackTransactionSourceCollection:(id*)arg2;
- (id)cashbackGroupForTransactionWithIdentifier:(id)arg1 cashbackTransactionSourceCollection:(id*)arg2;
- (id)cashbackPass;
- (id)cashbackTransactionSourceCollection;
- (id)counterpartHandles;
- (id)delegate;
- (void)didRemoveTransactionsWithSourceIdentifierMapping:(id)arg1;
- (id)endDate;
- (void)filterAmount:(id)arg1 comparison:(long long)arg2;
- (void)filterCategory:(long long)arg1;
- (void)filterDisputesOnly:(bool)arg1;
- (void)filterMerchant:(id)arg1;
- (void)filterPeerPaymentSubType:(long long)arg1;
- (void)filterRegions:(id)arg1;
- (void)filterRewardsValue:(id)arg1 unit:(unsigned long long)arg2;
- (void)filterSources:(id)arg1;
- (void)filterStatuses:(id)arg1;
- (void)filterTags:(id)arg1;
- (void)filterTransactionSourceIdentifiers:(id)arg1;
- (void)filterTypes:(id)arg1;
- (id)initWithCounterpartHandles:(id)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)initWithInstallmentPlan:(id)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)initWithMerchant:(id)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)initWithMerchantCategory:(long long)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)initWithRegions:(id)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)initWithTransactionSourceCollection:(id)arg1 paymentDataProvider:(id)arg2;
- (id)initWithTransactionType:(long long)arg1 transactionSourceCollection:(id)arg2 paymentDataProvider:(id)arg3;
- (id)instantWithdrawalFeesTransactionGroups;
- (unsigned long long)limit;
- (id)paymentDataProvider;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didEnableTransactionService:(bool)arg2;
- (void)peerPaymentCounterpartHandlesForTransactionSourceIdentifier:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 completion:(id /* block */)arg4;
- (void)reloadTransactionsWithCompletion:(id /* block */)arg1;
- (void)setAllowSynchronousFetch:(bool)arg1;
- (void)setCashbackPass:(id)arg1;
- (void)setCashbackTransactionSourceCollection:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLimit:(unsigned long long)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)startDate;
- (void)transactionCountByPeriod:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
- (void)transactionSourceIdentifier:(id)arg1 didReceiveTransaction:(id)arg2;
- (void)transactionSourceIdentifier:(id)arg1 didRemoveTransactionWithIdentifier:(id)arg2;
- (unsigned long long)type;

@end
