
@interface ACHCodableAchievement : PBCodable <NSCopying> {
    ACHCodableTemplate * _achievementTemplate;
    ACHCodableColor * _badgeEnamelColor;
    ACHCodableColor * _badgeMetalColor;
    NSMutableArray * _badgeModelFilenames;
    long long  _badgeModelVersion;
    NSString * _badgeShapeName;
    bool  _badgeUsesFullColorEnamel;
    bool  _badgeUsesTriColorEnamel;
    NSMutableArray * _customPlaceholderValues;
    long long  _earnedInstanceCount;
    NSMutableArray * _earnedInstances;
    ACHCodableColor * _enamelTriColor1;
    ACHCodableColor * _enamelTriColor2;
    ACHCodableColor * _enamelTriColor3;
    bool  _faceHasMetalInlay;
    double  _glyphPositionOffsetX;
    double  _glyphPositionOffsetY;
    NSString * _glyphTextureFilename;
    double  _glyphTextureScale;
    NSString * _goalUnitString;
    double  _goalValue;
    struct { 
        unsigned int badgeModelVersion : 1; 
        unsigned int earnedInstanceCount : 1; 
        unsigned int glyphPositionOffsetX : 1; 
        unsigned int glyphPositionOffsetY : 1; 
        unsigned int glyphTextureScale : 1; 
        unsigned int goalValue : 1; 
        unsigned int progressValue : 1; 
        unsigned int badgeUsesFullColorEnamel : 1; 
        unsigned int badgeUsesTriColorEnamel : 1; 
        unsigned int faceHasMetalInlay : 1; 
        unsigned int prerequisiteMet : 1; 
        unsigned int unearnedUsesTwoToneEnamel : 1; 
    }  _has;
    NSString * _localizationBundleURL;
    bool  _prerequisiteMet;
    NSString * _progressUnitString;
    double  _progressValue;
    NSString * _propertyListBundleURL;
    ACHCodableEarnedInstance * _relevantEarnedInstance;
    NSString * _resourceBundleURL;
    NSString * _section;
    NSString * _stickerBundleURL;
    ACHCodableSyncIdentity * _syncIdentity;
    NSMutableArray * _textureFilenames;
    bool  _unearnedUsesTwoToneEnamel;
}

@property (nonatomic, retain) ACHCodableTemplate *achievementTemplate;
@property (nonatomic, retain) ACHCodableColor *badgeEnamelColor;
@property (nonatomic, retain) ACHCodableColor *badgeMetalColor;
@property (nonatomic, retain) NSMutableArray *badgeModelFilenames;
@property (nonatomic) long long badgeModelVersion;
@property (nonatomic, retain) NSString *badgeShapeName;
@property (nonatomic) bool badgeUsesFullColorEnamel;
@property (nonatomic) bool badgeUsesTriColorEnamel;
@property (nonatomic, retain) NSMutableArray *customPlaceholderValues;
@property (nonatomic) long long earnedInstanceCount;
@property (nonatomic, retain) NSMutableArray *earnedInstances;
@property (nonatomic, retain) ACHCodableColor *enamelTriColor1;
@property (nonatomic, retain) ACHCodableColor *enamelTriColor2;
@property (nonatomic, retain) ACHCodableColor *enamelTriColor3;
@property (nonatomic) bool faceHasMetalInlay;
@property (nonatomic) double glyphPositionOffsetX;
@property (nonatomic) double glyphPositionOffsetY;
@property (nonatomic, retain) NSString *glyphTextureFilename;
@property (nonatomic) double glyphTextureScale;
@property (nonatomic, retain) NSString *goalUnitString;
@property (nonatomic) double goalValue;
@property (nonatomic, readonly) bool hasAchievementTemplate;
@property (nonatomic, readonly) bool hasBadgeEnamelColor;
@property (nonatomic, readonly) bool hasBadgeMetalColor;
@property (nonatomic) bool hasBadgeModelVersion;
@property (nonatomic, readonly) bool hasBadgeShapeName;
@property (nonatomic) bool hasBadgeUsesFullColorEnamel;
@property (nonatomic) bool hasBadgeUsesTriColorEnamel;
@property (nonatomic) bool hasEarnedInstanceCount;
@property (nonatomic, readonly) bool hasEnamelTriColor1;
@property (nonatomic, readonly) bool hasEnamelTriColor2;
@property (nonatomic, readonly) bool hasEnamelTriColor3;
@property (nonatomic) bool hasFaceHasMetalInlay;
@property (nonatomic) bool hasGlyphPositionOffsetX;
@property (nonatomic) bool hasGlyphPositionOffsetY;
@property (nonatomic, readonly) bool hasGlyphTextureFilename;
@property (nonatomic) bool hasGlyphTextureScale;
@property (nonatomic, readonly) bool hasGoalUnitString;
@property (nonatomic) bool hasGoalValue;
@property (nonatomic, readonly) bool hasLocalizationBundleURL;
@property (nonatomic) bool hasPrerequisiteMet;
@property (nonatomic, readonly) bool hasProgressUnitString;
@property (nonatomic) bool hasProgressValue;
@property (nonatomic, readonly) bool hasPropertyListBundleURL;
@property (nonatomic, readonly) bool hasRelevantEarnedInstance;
@property (nonatomic, readonly) bool hasResourceBundleURL;
@property (nonatomic, readonly) bool hasSection;
@property (nonatomic, readonly) bool hasStickerBundleURL;
@property (nonatomic, readonly) bool hasSyncIdentity;
@property (nonatomic) bool hasUnearnedUsesTwoToneEnamel;
@property (nonatomic, retain) NSString *localizationBundleURL;
@property (nonatomic) bool prerequisiteMet;
@property (nonatomic, retain) NSString *progressUnitString;
@property (nonatomic) double progressValue;
@property (nonatomic, retain) NSString *propertyListBundleURL;
@property (nonatomic, retain) ACHCodableEarnedInstance *relevantEarnedInstance;
@property (nonatomic, retain) NSString *resourceBundleURL;
@property (nonatomic, retain) NSString *section;
@property (nonatomic, retain) NSString *stickerBundleURL;
@property (nonatomic, retain) ACHCodableSyncIdentity *syncIdentity;
@property (nonatomic, retain) NSMutableArray *textureFilenames;
@property (nonatomic) bool unearnedUsesTwoToneEnamel;

+ (Class)badgeModelFilenamesType;
+ (Class)customPlaceholderValuesType;
+ (Class)earnedInstancesType;
+ (Class)textureFilenamesType;

- (void).cxx_destruct;
- (id)achievementTemplate;
- (void)addBadgeModelFilenames:(id)arg1;
- (void)addCustomPlaceholderValues:(id)arg1;
- (void)addEarnedInstances:(id)arg1;
- (void)addTextureFilenames:(id)arg1;
- (id)badgeEnamelColor;
- (id)badgeMetalColor;
- (id)badgeModelFilenames;
- (id)badgeModelFilenamesAtIndex:(unsigned long long)arg1;
- (unsigned long long)badgeModelFilenamesCount;
- (long long)badgeModelVersion;
- (id)badgeShapeName;
- (bool)badgeUsesFullColorEnamel;
- (bool)badgeUsesTriColorEnamel;
- (void)clearBadgeModelFilenames;
- (void)clearCustomPlaceholderValues;
- (void)clearEarnedInstances;
- (void)clearTextureFilenames;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)customPlaceholderValues;
- (id)customPlaceholderValuesAtIndex:(unsigned long long)arg1;
- (unsigned long long)customPlaceholderValuesCount;
- (id)description;
- (id)dictionaryRepresentation;
- (long long)earnedInstanceCount;
- (id)earnedInstances;
- (id)earnedInstancesAtIndex:(unsigned long long)arg1;
- (unsigned long long)earnedInstancesCount;
- (id)enamelTriColor1;
- (id)enamelTriColor2;
- (id)enamelTriColor3;
- (bool)faceHasMetalInlay;
- (double)glyphPositionOffsetX;
- (double)glyphPositionOffsetY;
- (id)glyphTextureFilename;
- (double)glyphTextureScale;
- (id)goalUnitString;
- (double)goalValue;
- (bool)hasAchievementTemplate;
- (bool)hasBadgeEnamelColor;
- (bool)hasBadgeMetalColor;
- (bool)hasBadgeModelVersion;
- (bool)hasBadgeShapeName;
- (bool)hasBadgeUsesFullColorEnamel;
- (bool)hasBadgeUsesTriColorEnamel;
- (bool)hasEarnedInstanceCount;
- (bool)hasEnamelTriColor1;
- (bool)hasEnamelTriColor2;
- (bool)hasEnamelTriColor3;
- (bool)hasFaceHasMetalInlay;
- (bool)hasGlyphPositionOffsetX;
- (bool)hasGlyphPositionOffsetY;
- (bool)hasGlyphTextureFilename;
- (bool)hasGlyphTextureScale;
- (bool)hasGoalUnitString;
- (bool)hasGoalValue;
- (bool)hasLocalizationBundleURL;
- (bool)hasPrerequisiteMet;
- (bool)hasProgressUnitString;
- (bool)hasProgressValue;
- (bool)hasPropertyListBundleURL;
- (bool)hasRelevantEarnedInstance;
- (bool)hasResourceBundleURL;
- (bool)hasSection;
- (bool)hasStickerBundleURL;
- (bool)hasSyncIdentity;
- (bool)hasUnearnedUsesTwoToneEnamel;
- (unsigned long long)hash;
- (id)initWithSerializedData:(id)arg1 error:(id*)arg2;
- (bool)isEqual:(id)arg1;
- (id)localizationBundleURL;
- (void)mergeFrom:(id)arg1;
- (bool)prerequisiteMet;
- (id)progressUnitString;
- (double)progressValue;
- (id)propertyListBundleURL;
- (bool)readFrom:(id)arg1;
- (id)relevantEarnedInstance;
- (id)resourceBundleURL;
- (id)section;
- (void)setAchievementTemplate:(id)arg1;
- (void)setBadgeEnamelColor:(id)arg1;
- (void)setBadgeMetalColor:(id)arg1;
- (void)setBadgeModelFilenames:(id)arg1;
- (void)setBadgeModelVersion:(long long)arg1;
- (void)setBadgeShapeName:(id)arg1;
- (void)setBadgeUsesFullColorEnamel:(bool)arg1;
- (void)setBadgeUsesTriColorEnamel:(bool)arg1;
- (void)setCustomPlaceholderValues:(id)arg1;
- (void)setEarnedInstanceCount:(long long)arg1;
- (void)setEarnedInstances:(id)arg1;
- (void)setEnamelTriColor1:(id)arg1;
- (void)setEnamelTriColor2:(id)arg1;
- (void)setEnamelTriColor3:(id)arg1;
- (void)setFaceHasMetalInlay:(bool)arg1;
- (void)setGlyphPositionOffsetX:(double)arg1;
- (void)setGlyphPositionOffsetY:(double)arg1;
- (void)setGlyphTextureFilename:(id)arg1;
- (void)setGlyphTextureScale:(double)arg1;
- (void)setGoalUnitString:(id)arg1;
- (void)setGoalValue:(double)arg1;
- (void)setHasBadgeModelVersion:(bool)arg1;
- (void)setHasBadgeUsesFullColorEnamel:(bool)arg1;
- (void)setHasBadgeUsesTriColorEnamel:(bool)arg1;
- (void)setHasEarnedInstanceCount:(bool)arg1;
- (void)setHasFaceHasMetalInlay:(bool)arg1;
- (void)setHasGlyphPositionOffsetX:(bool)arg1;
- (void)setHasGlyphPositionOffsetY:(bool)arg1;
- (void)setHasGlyphTextureScale:(bool)arg1;
- (void)setHasGoalValue:(bool)arg1;
- (void)setHasPrerequisiteMet:(bool)arg1;
- (void)setHasProgressValue:(bool)arg1;
- (void)setHasUnearnedUsesTwoToneEnamel:(bool)arg1;
- (void)setLocalizationBundleURL:(id)arg1;
- (void)setPrerequisiteMet:(bool)arg1;
- (void)setProgressUnitString:(id)arg1;
- (void)setProgressValue:(double)arg1;
- (void)setPropertyListBundleURL:(id)arg1;
- (void)setRelevantEarnedInstance:(id)arg1;
- (void)setResourceBundleURL:(id)arg1;
- (void)setSection:(id)arg1;
- (void)setStickerBundleURL:(id)arg1;
- (void)setSyncIdentity:(id)arg1;
- (void)setTextureFilenames:(id)arg1;
- (void)setUnearnedUsesTwoToneEnamel:(bool)arg1;
- (id)stickerBundleURL;
- (id)syncIdentity;
- (id)textureFilenames;
- (id)textureFilenamesAtIndex:(unsigned long long)arg1;
- (unsigned long long)textureFilenamesCount;
- (bool)unearnedUsesTwoToneEnamel;
- (void)writeTo:(id)arg1;

@end
