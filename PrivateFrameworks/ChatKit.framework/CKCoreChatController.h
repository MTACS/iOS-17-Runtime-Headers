
@interface CKCoreChatController : CKScrollViewController <IMChatSendProgressDelegate, IMSystemMonitorListener> {
    long long  _acknowledgmentToSend;
    NSCountedSet * _activePinningInputViewReasons;
    CKViewController<CKCoreTranscriptControllerProtocol> * _collectionViewController;
    CKConversation * _conversation;
    <CKCoreChatControllerDelegate> * _delegate;
    bool  _disableAnimationsUnderTest;
    CKFullScreenBalloonViewController * _fullScreenBalloonViewController;
    bool  _ignoreLastBalloonVisibleInMarkAsReadCheck;
    bool  _initialLayoutComplete;
    struct CGSize { 
        double width; 
        double height; 
    }  _initialViewSize;
    bool  _isShowingLockoutView;
    STLockoutViewController * _lockoutViewController;
    CKMacToolbarController * _macToolbarController;
    bool  _needsEndPinningInputViewsForSwitchingConversationAfterConversationIsSet;
    id /* block */  _overrideScrollBlock;
    UIProgressView * _progressBar;
    CKScheduledUpdater * _refreshServiceForSendingUpdater;
    double  _sendProgress;
    unsigned long long  _sendProgressSendCount;
    unsigned long long  _sendProgressTotalCount;
    bool  _sendingMessage;
    bool  _shareWasCreated;
    bool  _showingInStandAloneWindow;
    bool  _transitionedFromComposing;
    bool  _userInitiatedTranscriptPush;
    bool  _viewIsVisible;
}

@property (nonatomic) long long acknowledgmentToSend;
@property (nonatomic, retain) NSCountedSet *activePinningInputViewReasons;
@property (nonatomic, readonly) double balloonMaxWidth;
@property (nonatomic, readonly) IMChat *chat;
@property (nonatomic, readonly) CKTranscriptCollectionView *collectionView;
@property (nonatomic, retain) CKViewController<CKCoreTranscriptControllerProtocol> *collectionViewController;
@property (nonatomic, retain) CKConversation *conversation;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CKCoreChatControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableAnimationsUnderTest;
@property (nonatomic, retain) CKFullScreenBalloonViewController *fullScreenBalloonViewController;
@property (nonatomic, readonly) double gradientBottomPlaceholderHeight;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreLastBalloonVisibleInMarkAsReadCheck;
@property (nonatomic) bool initialLayoutComplete;
@property (nonatomic) struct CGSize { double x1; double x2; } initialViewSize;
@property (nonatomic) bool isShowingLockoutView;
@property (nonatomic, retain) STLockoutViewController *lockoutViewController;
@property (nonatomic, retain) CKMacToolbarController *macToolbarController;
@property (nonatomic) bool needsEndPinningInputViewsForSwitchingConversationAfterConversationIsSet;
@property (nonatomic, copy) id /* block */ overrideScrollBlock;
@property (nonatomic, retain) UIProgressView *progressBar;
@property (nonatomic, retain) CKScheduledUpdater *refreshServiceForSendingUpdater;
@property (nonatomic) double sendProgress;
@property (nonatomic) unsigned long long sendProgressSendCount;
@property (nonatomic) unsigned long long sendProgressTotalCount;
@property (getter=isSendingMessage, nonatomic) bool sendingMessage;
@property (nonatomic) bool shareWasCreated;
@property (nonatomic, readonly) bool shouldDismissAfterSend;
@property (nonatomic, readonly) bool shouldDisplayTextEntry;
@property (nonatomic, readonly) bool shouldUseInitialViewSize;
@property (nonatomic) bool showingInStandAloneWindow;
@property (readonly) Class superclass;
@property (nonatomic) bool transitionedFromComposing;
@property (nonatomic) bool userInitiatedTranscriptPush;
@property (nonatomic) bool viewIsVisible;

+ (Class)_gradientReferenceViewClass;
+ (Class)transcriptControllerClass;

- (void).cxx_destruct;
- (bool)_alwaysShowNicknameBanners;
- (void)_availabilityDaemonDisconnectedNotification:(id)arg1;
- (void)_chatRegistryDidReloadNotification:(id)arg1;
- (void)_chatsRemergedNotification:(id)arg1;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (bool)_controllerEligibleForSetConversation;
- (bool)_conversationHasReplyEnabled;
- (void)_conversationListFinishedMerging:(id)arg1;
- (void)_deregisterSendProgressDelegate;
- (bool)_deviceIsPasscodeLocked;
- (void)_didSendCompositionInConversation:(id)arg1;
- (void)_dismissFullScreenBubbleViewControllerAnimated:(bool)arg1 withSendAnimation:(bool)arg2 completion:(id /* block */)arg3;
- (void)_displayNameUpdatedNotification:(id)arg1;
- (void)_downgradeStateChangedNotification:(id)arg1;
- (id)_fullScreenBalloonViewControllerWithChatItem:(id)arg1;
- (void)_handleAddressBookChangedNotification:(id)arg1;
- (void)_handleAvailabilityChangedNotification:(id)arg1;
- (void)_handleAvailabilityInvitationReceivedNotification:(id)arg1;
- (void)_handleAvailabilityStateChangedNotification:(id)arg1;
- (id)_handleIDsForCurrentConversation;
- (void)_handleShowInlineReplyForItemWithIndexPath:(id)arg1 replyTransitionProperties:(id)arg2;
- (void)_handleTapEventForBalloonView:(id)arg1 atIndexPath:(id)arg2;
- (bool)_haveUpdateAlready:(id)arg1 forContact:(id)arg2;
- (void)_increaseContrastDidChangeNotification:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_initialFrameForCollectionView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_initialFrameForGradientReferenceView;
- (void)_inviteToViewFocusStatusIfNeeded;
- (bool)_isRunningPPT;
- (void)_localeDidChangeNotification:(id)arg1;
- (void)_markAsReadIfNecessary;
- (double)_maxEntryViewHeight;
- (id)_nicknameBannerUpdatesAndStyle:(unsigned long long*)arg1;
- (void)_performResume;
- (void)_preferredServiceChangedNotification:(id)arg1;
- (void)_reassignConversationWithDeferredReload:(bool)arg1;
- (void)_refreshActiveChat:(id)arg1;
- (void)_refreshServiceForSending;
- (void)_registerSendProgressDelegate;
- (void)_removeExistingCollectionViewController;
- (id)_retrieveNicknameBannerUpdatesIfNeeded:(unsigned long long*)arg1;
- (void)_setConversationDeferredSetup;
- (void)_setTitle:(id)arg1 animated:(bool)arg2;
- (bool)_shouldAllowReply;
- (bool)_shouldAllowReplyFromLockScreen;
- (id)_threadChatItemForReplyCountChatItem:(id)arg1 chatItems:(id)arg2;
- (void)_transferFinishedNotification:(id)arg1;
- (void)_transferRestoredNotification:(id)arg1;
- (void)_updateForNewPreferredService;
- (void)_updateNavigationButtons;
- (void)_updateTitleAnimated:(bool)arg1;
- (void)_willSendComposition:(id)arg1 inConversation:(id)arg2;
- (bool)accountCanCreateNickname;
- (long long)acknowledgmentToSend;
- (id)activePinningInputViewReasons;
- (void)applyInitialContextToCollectionViewIfNeeded;
- (double)balloonMaxWidth;
- (void)beginPinningInputViewsForReason:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })calculateTranscriptMarginInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })calculateTranscriptSafeAreaInsets;
- (id)chat;
- (void)chat:(id)arg1 progressDidChange:(float)arg2 sendingMessages:(id)arg3 sendCount:(unsigned long long)arg4 totalCount:(unsigned long long)arg5 finished:(bool)arg6;
- (id)collectionView;
- (id)collectionViewController;
- (void)configureWithToolbarController:(id)arg1;
- (void)contentInsetDidChange;
- (void)contentInsetWillChange:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 animated:(bool)arg2 duration:(double)arg3 animationCurve:(long long)arg4;
- (id)conversation;
- (bool)conversationAllowedByScreenTime;
- (void)copyChatItem:(id)arg1;
- (void)copySelectedChatItemsToPasteboard;
- (id)createMutableContact:(id)arg1 withNicknameUpdate:(id)arg2 updateType:(unsigned long long)arg3 addHandleToContact:(bool)arg4;
- (void)dealloc;
- (id)delegate;
- (void)deleteChatItem:(id)arg1;
- (bool)disableAnimationsUnderTest;
- (void)dismissInlineReplyController:(bool)arg1;
- (void)dismissMessageEditingViewController:(bool)arg1;
- (void)endPinningInputViewsForReason:(id)arg1;
- (id)fullScreenBalloonViewController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })fullScreenBalloonViewController:(id)arg1 balloonFrameForChatItem:(id)arg2;
- (void)fullScreenBalloonViewController:(id)arg1 didAppearAnimated:(bool)arg2;
- (void)fullScreenBalloonViewController:(id)arg1 sendMessageAcknowledgment:(long long)arg2 forChatItem:(id)arg3;
- (void)fullScreenBalloonViewController:(id)arg1 sendMessageHighlight:(bool)arg2 forChatItem:(id)arg3;
- (void)fullScreenBalloonViewController:(id)arg1 willAppearAnimated:(bool)arg2;
- (void)fullScreenBalloonViewController:(id)arg1 willDisappearWithSendAnimation:(bool)arg2;
- (void)fullScreenBalloonViewControllerDidDisappear:(id)arg1;
- (void)fullScreenBalloonViewControllerHandleDismissTap:(id)arg1;
- (void)fullScreenBalloonViewControllerMessageHighlightButtonDidFinishAnimating:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })fullScreenBalloonViewControllerSafeAreaLayoutFrame:(id)arg1;
- (bool)fullScreenBalloonViewControllerShouldShowHightlightButton:(id)arg1 forChatItem:(id)arg2;
- (bool)fullScreenBalloonViewControllerShouldShowReplyButton:(id)arg1;
- (double)gradientBottomPlaceholderHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })gradientFrameWithInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)gradientReferenceView;
- (bool)ignoreLastBalloonVisibleInMarkAsReadCheck;
- (id)initWithConversation:(id)arg1;
- (bool)initialLayoutComplete;
- (struct CGSize { double x1; double x2; })initialViewSize;
- (void)invalidateChatItemLayoutForTraitCollectionChangeIfNeeded:(id)arg1;
- (bool)isInline;
- (bool)isSafeToMarkAsRead;
- (bool)isSendingMessage;
- (bool)isShowingLockoutView;
- (bool)itemProviderDisablesTouches;
- (void)keyboardWillHideViaGesture;
- (id)lazyCreatedActivePinningInputViewReasons;
- (void)loadView;
- (id)lockoutViewController;
- (id)macToolbarController;
- (void)messageSomeonePressed;
- (bool)needsEndPinningInputViewsForSwitchingConversationAfterConversationIsSet;
- (id /* block */)overrideScrollBlock;
- (void)parentControllerDidBecomeActive;
- (void)parentControllerDidResume:(bool)arg1 animating:(bool)arg2;
- (void)preferredSendingServiceChanged;
- (void)prepareForSuspend;
- (void)presentMacToolbarController;
- (id)progressBar;
- (void)providerWillBeRemovedFromToolbarController:(id)arg1;
- (void)refreshServiceForSending;
- (id)refreshServiceForSendingUpdater;
- (void)registerNotifications;
- (void)registerNotificationsForConversation:(id)arg1;
- (bool)saveContact:(id)arg1 shouldUpdate:(bool)arg2;
- (id)scrollView;
- (id)selectedChatItems;
- (void)sendComposition:(id)arg1;
- (double)sendProgress;
- (unsigned long long)sendProgressSendCount;
- (unsigned long long)sendProgressTotalCount;
- (void)setAcknowledgmentToSend:(long long)arg1;
- (void)setActivePinningInputViewReasons:(id)arg1;
- (void)setCollectionViewController:(id)arg1;
- (void)setConversation:(id)arg1;
- (void)setConversation:(id)arg1 forceReload:(bool)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDisableAnimationsUnderTest:(bool)arg1;
- (void)setFullScreenBalloonViewController:(id)arg1;
- (void)setIgnoreLastBalloonVisibleInMarkAsReadCheck:(bool)arg1;
- (void)setInitialLayoutComplete:(bool)arg1;
- (void)setInitialViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setIsShowingLockoutView:(bool)arg1;
- (void)setLockoutViewController:(id)arg1;
- (void)setMacToolbarController:(id)arg1;
- (void)setNeedsEndPinningInputViewsForSwitchingConversationAfterConversationIsSet:(bool)arg1;
- (void)setOverrideScrollBlock:(id /* block */)arg1;
- (void)setProgressBar:(id)arg1;
- (void)setRefreshServiceForSendingUpdater:(id)arg1;
- (void)setSendProgress:(double)arg1;
- (void)setSendProgressSendCount:(unsigned long long)arg1;
- (void)setSendProgressTotalCount:(unsigned long long)arg1;
- (void)setSendingMessage:(bool)arg1;
- (void)setShareWasCreated:(bool)arg1;
- (void)setShowingInStandAloneWindow:(bool)arg1;
- (void)setTransitionedFromComposing:(bool)arg1;
- (void)setUserInitiatedTranscriptPush:(bool)arg1;
- (void)setViewIsVisible:(bool)arg1;
- (void)setupScrollingForKeyboardInteraction;
- (void)setupStateForLaunchURL:(id)arg1;
- (bool)shareWasCreated;
- (bool)shouldDismissAfterSend;
- (bool)shouldDisplayTextEntry;
- (bool)shouldListParticipantsInTitle;
- (bool)shouldUseInitialViewSize;
- (void)showFullScreenAcknowledgmentPickerForChatItem:(id)arg1;
- (void)showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:(id)arg1;
- (void)showInlineReplyControllerForChatItem:(id)arg1 presentKeyboard:(bool)arg2;
- (void)showInlineReplyControllerForChatItem:(id)arg1 presentKeyboard:(bool)arg2 replyTransitionProperties:(id)arg3;
- (void)showMessageEditingViewControllerForChatItem:(id)arg1 presentKeyboard:(bool)arg2;
- (bool)showingInStandAloneWindow;
- (void)significantTimeChange;
- (void)systemApplicationDidResume;
- (void)systemApplicationWillEnterForeground;
- (id)textInputContextIdentifier;
- (id)toolbarItemForIdentifier:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (id)traitCollectionForTranscriptCollectionViewController:(id)arg1;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 didRequestPresentationStyle:(unsigned long long)arg3 forChatItem:(id)arg4 allowAllStyles:(bool)arg5;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 doubleTappedItemAtIndexPath:(id)arg3;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 longPressedForItemWithIndexPath:(id)arg3;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 selectedItemAtIndexPath:(id)arg3;
- (bool)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 shouldSelectChatItem:(id)arg3;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 showInlineReplyForItemWithIndexPath:(id)arg3;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 showInlineReplyForItemWithIndexPath:(id)arg3 withReplyTransitionProperties:(id)arg4;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 tappedForChatItem:(id)arg3;
- (bool)transcriptCollectionViewController:(id)arg1 balloonViewDidRequestCommitPayload:(id)arg2 forPlugin:(id)arg3 allowAllCommits:(bool)arg4 error:(id*)arg5;
- (bool)transcriptCollectionViewController:(id)arg1 balloonViewDidRequestCommitSticker:(id)arg2 forPlugin:(id)arg3 allowAllCommits:(bool)arg4 error:(id*)arg5;
- (void)transcriptCollectionViewController:(id)arg1 balloonViewDidRequestStartEditingPayload:(id)arg2 forPlugin:(id)arg3 allowAllCommits:(bool)arg4 completionHandler:(id /* block */)arg5;
- (void)transcriptCollectionViewController:(id)arg1 balloonViewTitleTappedForItemWithIndexPath:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 collectionViewContentSizeDidChange:(struct CGSize { double x1; double x2; })arg2;
- (void)transcriptCollectionViewController:(id)arg1 didDeselectItemAtIndexPath:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 didEndImpactEffectAnimationWithSendAnimationContext:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 didTapReplyCountStatusButtonForChatItem:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 requestDeleteJunkConversation:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 requestRecoverJunkConversation:(id)arg2;
- (bool)transcriptCollectionViewController:(id)arg1 shouldCleanupFullscreenEffectUI:(id)arg2;
- (bool)transcriptCollectionViewController:(id)arg1 shouldSetupFullscreenEffectUI:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 showMessageSomeoneForItemWithIndexPath:(id)arg2;
- (double)transcriptCollectionViewController:(id)arg1 targetAlphaForChatItem:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 viewedCommSafetyItemWithIndexPath:(id)arg2;
- (void)transcriptCollectionViewController:(id)arg1 willBeginImpactEffectAnimationWithSendAnimationContext:(id)arg2;
- (id)transcriptCollectionViewControllerAdditionalFullscreenEffectViews:(id)arg1;
- (void)transcriptCollectionViewControllerBlockContactButtonTapped:(id)arg1;
- (void)transcriptCollectionViewControllerChatItemsDidChange:(id)arg1;
- (void)transcriptCollectionViewControllerDidInsertAssociatedChatItem:(id)arg1;
- (void)transcriptCollectionViewControllerDidInset:(id)arg1;
- (void)transcriptCollectionViewControllerNeedsChatItemLayoutInvalidation:(id)arg1;
- (id)transcriptCollectionViewControllerOuterEffectPresentingView:(id)arg1;
- (void)transcriptCollectionViewControllerPerformBatchUpdateCompleted:(id)arg1;
- (bool)transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:(id)arg1;
- (void)transcriptCollectionViewControllerPlayingAudioDidChange:(id)arg1;
- (void)transcriptCollectionViewControllerReportSpamButtonTapped:(id)arg1;
- (void)transcriptCollectionViewControllerRestingStateDidChange:(id)arg1;
- (bool)transcriptCollectionViewControllerShouldLayoutFullscreenEffects:(id)arg1;
- (bool)transcriptCollectionViewControllerShouldPlayAudio:(id)arg1;
- (bool)transcriptCollectionViewControllerShouldShouldScrollToTopForStatusBarTap:(id)arg1;
- (void)transcriptCollectionViewControllerWillDisplayLastBalloon:(id)arg1;
- (void)transcriptCollectionViewControllerWillInset:(id)arg1 targetContentInset:(inout struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg2;
- (void)transcriptCollectionViewControllerWillScrollToBottom:(id)arg1;
- (bool)transitionedFromComposing;
- (void)updateContact:(id)arg1 withHandle:(id)arg2;
- (bool)userInitiatedTranscriptPush;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidAppearDeferredSetup;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (bool)viewIsVisible;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (bool)wantsReplyButton;

@end
