
@interface CKMessageEntryTextView : EMKTextView <UIGestureRecognizerDelegate, UIScribbleInteractionDelegate> {
    double  _adjustedLineFragmentPadding;
    bool  _hideCaret;
    bool  _hideCaretUntilUserTypes;
    bool  _inPencilMode;
    bool  _pencilWriting;
    double  _placeHolderWidth;
    UIColor * _placeholderColor;
    NSString * _placeholderText;
    bool  _preventShowingCalloutMenu;
    NSDictionary * _proofreadingInfo;
    UIKeyboardInputMode * _savedKeyboardInputMode;
    UIScribbleInteraction * _scribbleInteraction;
    bool  _sendCurrentLocationFromKeyboardEnabled;
    bool  _shouldStripEmojis;
    bool  _showingDictationPlaceholder;
    bool  _updatesFontOnTextChange;
}

@property (nonatomic) double adjustedLineFragmentPadding;
@property (nonatomic, copy) NSAttributedString *compositionText;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hideCaret;
@property (nonatomic) bool hideCaretUntilUserTypes;
@property (getter=isInPencilMode, nonatomic) bool inPencilMode;
@property (getter=isPencilWriting, nonatomic) bool pencilWriting;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic, copy) UIColor *placeholderColor;
@property (nonatomic, copy) NSString *placeholderText;
@property (nonatomic) bool preventShowingCalloutMenu;
@property (nonatomic, copy) NSDictionary *proofreadingInfo;
@property (nonatomic, retain) UIKeyboardInputMode *savedKeyboardInputMode;
@property (nonatomic, retain) UIScribbleInteraction *scribbleInteraction;
@property (nonatomic) bool sendCurrentLocationFromKeyboardEnabled;
@property (nonatomic) bool shouldStripEmojis;
@property (getter=isShowingDictationPlaceholder, nonatomic) bool showingDictationPlaceholder;
@property (getter=isSingleLine, nonatomic, readonly) bool singleLine;
@property (readonly) Class superclass;
@property (nonatomic) bool updatesFontOnTextChange;

- (void).cxx_destruct;
- (void)_layoutPlaceholder;
- (SEL)_sendCurrentLocationAction;
- (void)_stripEmojisIfNecessary;
- (void)_updateAttributedPlaceholder;
- (double)adjustedLineFragmentPadding;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (id)compositionText;
- (void)dealloc;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)handleHoverGesture:(id)arg1;
- (bool)hideCaret;
- (bool)hideCaretUntilUserTypes;
- (id)initUsingTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initUsingTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (bool)isInPencilMode;
- (bool)isPencilWriting;
- (bool)isShowingDictationPlaceholder;
- (bool)isSingleLine;
- (void)layoutSubviews;
- (double)placeHolderWidth;
- (id)placeholderColor;
- (id)placeholderText;
- (bool)preventShowingCalloutMenu;
- (id)proofreadingInfo;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (bool)resignFirstResponder;
- (void)restoreKeyboardInputMode;
- (void)saveKeyboardInputMode;
- (id)savedKeyboardInputMode;
- (id)scribbleInteraction;
- (void)scribbleInteractionDidFinishWriting:(id)arg1;
- (void)scribbleInteractionWillBeginWriting:(id)arg1;
- (bool)sendCurrentLocationFromKeyboardEnabled;
- (void)setAdjustedLineFragmentPadding:(double)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setCompositionText:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setHideCaret:(bool)arg1;
- (void)setHideCaretUntilUserTypes:(bool)arg1;
- (void)setInPencilMode:(bool)arg1;
- (void)setPencilWriting:(bool)arg1;
- (void)setPlaceHolderWidth:(double)arg1;
- (void)setPlaceholderColor:(id)arg1;
- (void)setPlaceholderText:(id)arg1;
- (void)setPreventShowingCalloutMenu:(bool)arg1;
- (void)setProofreadingInfo:(id)arg1;
- (void)setSavedKeyboardInputMode:(id)arg1;
- (void)setScribbleInteraction:(id)arg1;
- (void)setSendCurrentLocationFromKeyboardEnabled:(bool)arg1;
- (void)setShouldStripEmojis:(bool)arg1;
- (void)setShowingDictationPlaceholder:(bool)arg1;
- (void)setUpdatesFontOnTextChange:(bool)arg1;
- (void)setupScribbleInteraction;
- (void)setupTextViewFromInitWithTextLayoutManagerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldIncludeDictationPadding;
- (bool)shouldStripEmojis;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)textViewDidChange:(id)arg1;
- (void)updateFontIfNeeded;
- (void)updatePlaceholderLabelIfNeeded;
- (void)updateTextView;
- (bool)updatesFontOnTextChange;

@end
