
@interface CKDetailsContactsTableViewCell : CKDetailsCell {
    long long  _callType;
    CNContact * _contact;
    CKAvatarView * _contactAvatarView;
    <CKDetailsContactsTableViewCellDelegate> * _delegate;
    NSString * _entityName;
    UILabel * _expanseStatusLabel;
    UIButton * _facetimeVideoButton;
    UILabel * _locationLabel;
    NSString * _locationString;
    UIButton * _messageButton;
    CKLabel * _nameLabel;
    UIButton * _phoneButton;
    UIButton * _screenSharingButton;
    bool  _showFaceTimeVideoButton;
    bool  _showInfoButton;
    bool  _showMessageButton;
    bool  _showPhoneButton;
    bool  _showScreenSharingButton;
    bool  _showsLocation;
    bool  _showsTUConversationStatus;
    bool  _tuConversationStatusIsActive;
    UIActivityIndicatorView * _updatingParticipantSpinner;
}

@property (nonatomic) long long callType;
@property (nonatomic, retain) CNContact *contact;
@property (nonatomic, retain) CKAvatarView *contactAvatarView;
@property (nonatomic) <CKDetailsContactsTableViewCellDelegate> *delegate;
@property (nonatomic, copy) NSString *entityName;
@property (nonatomic, retain) UILabel *expanseStatusLabel;
@property (nonatomic, retain) UIButton *facetimeVideoButton;
@property (nonatomic, retain) UILabel *locationLabel;
@property (nonatomic, copy) NSString *locationString;
@property (nonatomic, retain) UIButton *messageButton;
@property (nonatomic, retain) CKLabel *nameLabel;
@property (nonatomic, retain) UIButton *phoneButton;
@property (nonatomic, retain) UIButton *screenSharingButton;
@property (nonatomic) bool showFaceTimeVideoButton;
@property (nonatomic) bool showInfoButton;
@property (nonatomic) bool showMessageButton;
@property (nonatomic) bool showPhoneButton;
@property (nonatomic) bool showScreenSharingButton;
@property (nonatomic) bool showsLocation;
@property (nonatomic) bool showsTUConversationStatus;
@property (nonatomic) bool tuConversationStatusIsActive;
@property (nonatomic, retain) UIActivityIndicatorView *updatingParticipantSpinner;

+ (Class)cellClass;
+ (double)estimatedHeight;
+ (double)marginWidth;
+ (double)preferredHeight;
+ (id)reuseIdentifier;

- (void).cxx_destruct;
- (id)_ckSymbolImageNamed:(id)arg1 preferredContentSizeCategory:(id)arg2 preferredFontTextStyle:(id)arg3;
- (void)_configureButtonLayer:(id)arg1;
- (void)_dismissUpdatingParticipantSpinner;
- (void)_formatExpanseStatusLabel;
- (void)_handleCommunicationAction:(id)arg1;
- (void)_hideAllButtons;
- (id)_imageNamed:(id)arg1;
- (void)_showUpdatingParticipantSpinner;
- (void)_updateVisibleButtons;
- (long long)callType;
- (void)configureWithViewModel:(id)arg1;
- (id)contact;
- (id)contactAvatarView;
- (id)delegate;
- (void)didHoverOverCell:(id)arg1;
- (id)entityName;
- (id)expanseStatusLabel;
- (id)facetimeVideoButton;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;
- (void)layoutSubviews;
- (id)locationLabel;
- (id)locationString;
- (id)messageButton;
- (id)nameLabel;
- (id)phoneButton;
- (id)screenSharingButton;
- (void)setCallType:(long long)arg1;
- (void)setContact:(id)arg1;
- (void)setContactAvatarView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEntityName:(id)arg1;
- (void)setExpanseStatusLabel:(id)arg1;
- (void)setFacetimeVideoButton:(id)arg1;
- (void)setLocationLabel:(id)arg1;
- (void)setLocationString:(id)arg1;
- (void)setMessageButton:(id)arg1;
- (void)setNameLabel:(id)arg1;
- (void)setPhoneButton:(id)arg1;
- (void)setScreenSharingButton:(id)arg1;
- (void)setShowFaceTimeVideoButton:(bool)arg1;
- (void)setShowInfoButton:(bool)arg1;
- (void)setShowMessageButton:(bool)arg1;
- (void)setShowPhoneButton:(bool)arg1;
- (void)setShowScreenSharingButton:(bool)arg1;
- (void)setShowsLocation:(bool)arg1;
- (void)setShowsTUConversationStatus:(bool)arg1;
- (void)setTuConversationStatusIsActive:(bool)arg1;
- (void)setUpdatingParticipantSpinner:(id)arg1;
- (bool)showFaceTimeVideoButton;
- (bool)showInfoButton;
- (bool)showMessageButton;
- (bool)showPhoneButton;
- (bool)showScreenSharingButton;
- (bool)showsLocation;
- (bool)showsTUConversationStatus;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)tuConversationStatusIsActive;
- (id)updatingParticipantSpinner;

@end
