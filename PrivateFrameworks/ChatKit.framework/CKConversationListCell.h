
@interface CKConversationListCell : UITableViewCell <CKConversationListCell> {
    bool  __editingPins;
    CKConversationListCellLayout * _cellLayout;
    UIImageView * _chevronImageView;
    UIButton * _closeButton;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _containerBounds;
    CKConversation * _conversation;
    CKDateLabel * _dateLabel;
    NSObject<CKConversationListCellDelegate> * _delegate;
    bool  _freezeSummaryText;
    CKLabel * _fromLabel;
    CAGradientLayer * _gradient;
    bool  _isStewie;
    UIImageView * _muteIndicatorImageView;
    bool  _muted;
    bool  _placeholder;
    bool  _shouldHidePreviewSummary;
    bool  _shouldLabelsBeHighlighted;
    UILabel * _summaryBlockedLabel;
    UILabel * _summaryLabel;
    CKConversationListTypingIndicatorView * _typingIndicatorView;
    bool  _verified;
}

@property (nonatomic) bool _editingPins;
@property (nonatomic, readonly) CKAvatarView *avatarView;
@property (nonatomic, retain) CKConversationListCellLayout *cellLayout;
@property (nonatomic, retain) UIImageView *chevronImageView;
@property (nonatomic, retain) UIButton *closeButton;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } containerBounds;
@property (nonatomic, retain) CKConversation *conversation;
@property (nonatomic, retain) CKDateLabel *dateLabel;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) NSObject<CKConversationListCellDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool freezeSummaryText;
@property (nonatomic, retain) CKLabel *fromLabel;
@property (nonatomic, readonly) CAGradientLayer *gradient;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isStewie;
@property (nonatomic, retain) UIImageView *muteIndicatorImageView;
@property (getter=isMuted, nonatomic) bool muted;
@property (getter=isPlaceholder, nonatomic) bool placeholder;
@property (nonatomic) bool shouldHidePreviewSummary;
@property (nonatomic) bool shouldLabelsBeHighlighted;
@property (nonatomic, readonly) UILabel *summaryBlockedLabel;
@property (nonatomic, retain) UILabel *summaryLabel;
@property (readonly) Class superclass;
@property (nonatomic, retain) CKConversationListTypingIndicatorView *typingIndicatorView;
@property (nonatomic) bool verified;

+ (long long)_titleIconImageTypeForConversation:(id)arg1;
+ (double)cellHeightForDisplayScale:(double)arg1;
+ (id)identifierForConversation:(id)arg1;

- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (bool)_editingPins;
- (void)_increaseContrastDidChange:(id)arg1;
- (id)_makeSummaryAttributedStringWithText:(id)arg1 multiwayConversation:(id)arg2;
- (void)_performBlock:(id /* block */)arg1 animated:(bool)arg2;
- (void)_prependSummaryLabelWithSIMForConversation:(id)arg1;
- (void)_simLabelImageDidChange:(id)arg1;
- (id)avatarView;
- (id)cellLayout;
- (id)chevronImageView;
- (id)closeButton;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })containerBounds;
- (void)contentSizeCategoryDidChange;
- (id)conversation;
- (id)dateLabel;
- (void)dealloc;
- (id)delegate;
- (void)deleteButtonTapped;
- (void)didHoverOverCell:(id)arg1;
- (bool)freezeSummaryText;
- (id)fromLabel;
- (id)gradient;
- (bool)hasUnreadMessagesForConversation:(id)arg1;
- (void)increaseContrastDidChange;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;
- (bool)isMuted;
- (bool)isPlaceholder;
- (bool)isStewie;
- (bool)lastMessageIsTypingIndicator;
- (id)muteIndicatorImageView;
- (void)prepareForReuse;
- (void)setCellLayout:(id)arg1;
- (void)setChevronImageView:(id)arg1;
- (void)setCloseButton:(id)arg1;
- (void)setContainerBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setConversation:(id)arg1;
- (void)setDateLabel:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEditingPins:(bool)arg1 animated:(bool)arg2;
- (void)setFreezeSummaryText:(bool)arg1;
- (void)setFromLabel:(id)arg1;
- (void)setIsStewie:(bool)arg1;
- (void)setMuteIndicatorImageView:(id)arg1;
- (void)setMuted:(bool)arg1;
- (void)setPlaceholder:(bool)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (void)setShouldHidePreviewSummary:(bool)arg1;
- (void)setShouldLabelsBeHighlighted:(bool)arg1;
- (void)setSummaryLabel:(id)arg1;
- (void)setTypingIndicatorView:(id)arg1;
- (void)setVerified:(bool)arg1;
- (void)set_editingPins:(bool)arg1;
- (bool)shouldAlwaysHideAvatar;
- (bool)shouldAlwaysHideUnreadIndicatorForConversation:(id)arg1;
- (bool)shouldAppearAsRecoverableConversation;
- (bool)shouldHideMuteIndicator;
- (bool)shouldHidePreviewSummary;
- (bool)shouldLabelsBeHighlighted;
- (bool)showingEditControl;
- (void)simLabelImageDidChange;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)summaryAttributedTextForBlockedConversationWithIcon:(bool)arg1;
- (id)summaryBlockedLabel;
- (id)summaryLabel;
- (id)summaryLabelTextColor;
- (id)typingIndicatorView;
- (id)unreadIndicatorImageForVisibility:(bool)arg1 withMuteState:(bool)arg2;
- (unsigned long long)unreadMessageCount;
- (void)updateBlockedSummaryLabelIfNeeded;
- (void)updateContentsForConversation:(id)arg1;
- (void)updateContentsForConversation:(id)arg1 fastPreview:(bool)arg2;
- (void)updateDateLabel:(id)arg1 conversation:(id)arg2;
- (void)updateForEditing:(bool)arg1;
- (void)updateFromLabelWithText:(id)arg1;
- (void)updateLabelTextColors;
- (void)updateMuteIndicatorColor;
- (void)updateSummaryLabel:(id)arg1 conversation:(id)arg2 fastPreview:(bool)arg3;
- (void)updateUnreadIndicatorForCurrentConversation;
- (void)updateUnreadIndicatorWithImage:(id)arg1;
- (void)updateVerifiedCheckmarkForBusiness;
- (void)updateWithForwardedConfigurationState:(id)arg1;
- (bool)verified;

@end
