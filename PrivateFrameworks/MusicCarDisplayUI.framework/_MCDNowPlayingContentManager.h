
@interface _MCDNowPlayingContentManager : NSObject <CARSessionObserving, CPUINowPlayingViewControllerDataSource, CPUINowPlayingViewControllerDelegate, MCDNowPlayingContentManagerProtocol, MPRequestResponseControllerDelegate, UITableViewDataSource, UITableViewDelegate> {
    UIImage * _albumArtwork;
    UIAlertController * _alertController;
    bool  _allowsAlbumArt;
    NSMutableDictionary * _artworkCache;
    MPArtworkCatalog * _artworkCatalog;
    MSVTimer * _artworkTimer;
    NSString * _bundleID;
    CARSessionStatus * _carSessionStatus;
    <MCDNowPlayingDataSource> * _dataSource;
    <MCDNowPlayingContentManagerDelegate> * _delegate;
    MPCPlayerResponse * _lastReceivedResponse;
    MPCPlayerResponseItem * _nowPlayingItem;
    long long  _playerState;
    MPRequestResponseController * _requestController;
    UITableView * _tableView;
    MPModelPlaylist * currentPlayingPlaylist;
    MPModelPlaylistEntry * currentPlayingPlaylistEntry;
    MPModelRadioStation * currentPlayingRadioStation;
    MPModelSong * currentPlayingSong;
    bool  limitedUI;
    Class  tableCellClass;
}

@property (nonatomic, retain) UIImage *albumArtwork;
@property (nonatomic, retain) UIAlertController *alertController;
@property (nonatomic) bool allowsAlbumArt;
@property (nonatomic, retain) NSMutableDictionary *artworkCache;
@property (nonatomic, retain) MPArtworkCatalog *artworkCatalog;
@property (nonatomic, retain) MSVTimer *artworkTimer;
@property (nonatomic, retain) NSString *bundleID;
@property (nonatomic, retain) CARSessionStatus *carSessionStatus;
@property (nonatomic, retain) MPModelPlaylist *currentPlayingPlaylist;
@property (nonatomic, retain) MPModelPlaylistEntry *currentPlayingPlaylistEntry;
@property (nonatomic, retain) MPModelRadioStation *currentPlayingRadioStation;
@property (nonatomic, retain) MPModelSong *currentPlayingSong;
@property (nonatomic) <MCDNowPlayingDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MCDNowPlayingContentManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) MPCPlayerResponse *lastReceivedResponse;
@property (nonatomic) bool limitedUI;
@property (nonatomic, readonly, copy) NSString *nowPlayingBundleID;
@property (nonatomic, retain) MPCPlayerResponseItem *nowPlayingItem;
@property (nonatomic) long long playerState;
@property (nonatomic, retain) MPRequestResponseController *requestController;
@property (readonly) Class superclass;
@property (nonatomic) Class tableCellClass;
@property (nonatomic) UITableView *tableView;

- (void).cxx_destruct;
- (void)_limitedUIChanged:(id)arg1;
- (void)_performChangeRequest:(id)arg1;
- (void)_performRequest;
- (void)_processResponse:(id)arg1 error:(id)arg2;
- (id)_requestResponseItem;
- (bool)_sessionAllowsAlbumArt:(id)arg1;
- (id)_setupRequest;
- (bool)_shouldShowPlaybackQueueForItemCount:(long long)arg1;
- (void)_showPlaceholderArtwork;
- (id)albumArtwork;
- (id)albumTextForNowPlayingController:(id)arg1;
- (id)alertController;
- (bool)allowsAlbumArt;
- (id)artistTextForNowPlayingController:(id)arg1;
- (id)artworkCache;
- (id)artworkCatalog;
- (id)artworkTimer;
- (id)backgroundArtForNowPlayingController:(id)arg1;
- (void)beginRequestObservation;
- (id)bundleID;
- (id)carSessionStatus;
- (void)controller:(id)arg1 defersResponseReplacement:(id /* block */)arg2;
- (id)currentPlayingPlaylist;
- (id)currentPlayingPlaylistEntry;
- (id)currentPlayingRadioStation;
- (id)currentPlayingSong;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (struct { double x1; double x2; double x3; double x4; double x5; float x6; float x7; bool x8; bool x9; })durationSnapshotForNowPlayingViewController:(id)arg1;
- (void)endRequestObservation;
- (id)initWithDelegate:(id)arg1 dataSource:(id)arg2 bundleID:(id)arg3;
- (id)lastReceivedResponse;
- (bool)limitedUI;
- (void)modelResponseDidInvalidate:(id)arg1;
- (id)nowPlayingBundleID;
- (id)nowPlayingItem;
- (bool)nowPlayingViewControllerCanRepeat:(id)arg1;
- (bool)nowPlayingViewControllerCanShowAlbumArt:(id)arg1;
- (bool)nowPlayingViewControllerCanShowAlbumLink:(id)arg1;
- (bool)nowPlayingViewControllerCanShowChangePlaybackRate:(id)arg1;
- (bool)nowPlayingViewControllerCanShowUpNext:(id)arg1;
- (bool)nowPlayingViewControllerCanShuffle:(id)arg1;
- (void)nowPlayingViewControllerChangePlaybackRate:(id)arg1;
- (id)nowPlayingViewControllerGetPlaybackRate:(id)arg1;
- (bool)nowPlayingViewControllerIsPlaying:(id)arg1;
- (bool)nowPlayingViewControllerIsRightHandDrive:(id)arg1;
- (bool)nowPlayingViewControllerIsShowingExplicitTrack:(id)arg1;
- (bool)nowPlayingViewControllerShouldUseMusicExplicitGlyph:(id)arg1;
- (void)nowPlayingViewControllerToggleRepeat:(id)arg1;
- (void)nowPlayingViewControllerToggleShuffle:(id)arg1;
- (void)nowPlayingViewControllerUpNextButtonTapped:(id)arg1;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (long long)placeholderTypeForNowPlayingViewController:(id)arg1;
- (long long)playerState;
- (void)processArtworkForCurrentlyPlayingSong;
- (id)progressBarLocalizedDurationStringForNowPlayingViewController:(id)arg1;
- (long long)repeatTypeForNowPlayingViewController:(id)arg1;
- (id)requestController;
- (void)session:(id)arg1 didUpdateConfiguration:(id)arg2;
- (void)sessionDidConnect:(id)arg1;
- (void)setAlbumArtwork:(id)arg1;
- (void)setAlertController:(id)arg1;
- (void)setAllowsAlbumArt:(bool)arg1;
- (void)setArtworkCache:(id)arg1;
- (void)setArtworkCatalog:(id)arg1;
- (void)setArtworkTimer:(id)arg1;
- (void)setBundleID:(id)arg1;
- (void)setCarSessionStatus:(id)arg1;
- (void)setCurrentPlayingPlaylist:(id)arg1;
- (void)setCurrentPlayingPlaylistEntry:(id)arg1;
- (void)setCurrentPlayingRadioStation:(id)arg1;
- (void)setCurrentPlayingSong:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLastReceivedResponse:(id)arg1;
- (void)setLimitedUI:(bool)arg1;
- (void)setNowPlayingItem:(id)arg1;
- (void)setPlayerState:(long long)arg1;
- (void)setRequestController:(id)arg1;
- (void)setTableCellClass:(Class)arg1;
- (void)setTableView:(id)arg1;
- (long long)shuffleTypeForNowPlayingViewController:(id)arg1;
- (Class)tableCellClass;
- (id)tableView;
- (bool)tableView:(id)arg1 canEditRowAtIndexPath:(id)arg2;
- (bool)tableView:(id)arg1 canMoveRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)titleForNowPlayingController:(id)arg1;
- (void)viewWillDisappear;

@end
