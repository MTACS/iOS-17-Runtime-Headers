
@interface TIKeyboardTyper : NSObject <ACTUserActionStreamDelegate> {
    NSString * _badSentenceLogFilePath;
    TIInputMode * _inputMode;
    double  _interTouchTimestampInterval;
    ACTKeyboardController * _keyboardController;
    double  _lastTimestamp;
    unsigned long long  _learnWordContextIndex;
    NSLocale * _locale;
    bool  _logDocumentContext;
    long long  _maxPredictions;
    int  _maxPredictionsReported;
    bool  _printTypingTranscript;
    NSDictionary * _shiftedKeyToUnShiftedKeyExcludeCapitalizationMap;
    bool  _shouldDecomposeInputString;
    unsigned long long  _touchPathID;
    <ACTUserActionStreaming> * _userActionStream;
    TITestUserPersona * _userPersona;
    bool  _warnIfSelectingPopupVariant;
}

@property (nonatomic) bool asyncPredictions;
@property (nonatomic) unsigned long long autocapitalizationType;
@property (nonatomic, readonly) TIKeyboardCandidate *autocorrection;
@property (nonatomic, retain) TIAutocorrectionList *autocorrectionList;
@property (nonatomic) unsigned long long autocorrectionType;
@property (getter=isAutoshifted, nonatomic, readonly) bool autoshifted;
@property (nonatomic, retain) NSString *badSentenceLogFilePath;
@property (nonatomic, readonly) TIKeyboardCandidateResultSet *candidateResultSet;
@property (nonatomic, copy) NSString *clientIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) TIErrorGenerator *errorGenerator;
@property (nonatomic) bool hardwareKeyboardMode;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool inPartialCandidateSelection;
@property (nonatomic, readonly) NSArray *inlineCompletionCandidates;
@property (nonatomic) bool inlineCompletionEnabled;
@property (nonatomic, retain) TIInputContextHistory *inputContextHistory;
@property (nonatomic, readonly) TIKeyboardInputManager *inputManager;
@property (nonatomic, retain) TIInputMode *inputMode;
@property (nonatomic, copy) NSString *inputModeIdentifier;
@property (nonatomic) bool insertsSpaceAfterPredictiveInput;
@property (nonatomic) double interTouchTimestampInterval;
@property (nonatomic, retain) UIKBTree *keyboard;
@property (nonatomic, readonly) ACTKeyboardController *keyboardController;
@property (nonatomic) <TIKeyboardInputManagerFactory> *keyboardInputManagerFactory;
@property (nonatomic, readonly) UIKBTree *keyplane;
@property (nonatomic) bool lastInputWasSelection;
@property (nonatomic) double lastTimestamp;
@property (nonatomic) unsigned long long learnWordContextIndex;
@property (nonatomic, copy) NSLocale *locale;
@property (nonatomic) bool logDocumentContext;
@property (nonatomic) bool longPredictionListEnabled;
@property (nonatomic, readonly) NSString *markedText;
@property (nonatomic) long long maxPredictions;
@property (nonatomic) int maxPredictionsReported;
@property (nonatomic) bool nextKeyIsMultitap;
@property (nonatomic, readonly) NSArray *predictionBarCandidates;
@property (nonatomic, readonly) NSArray *predictions;
@property (nonatomic) bool printTypingTranscript;
@property (nonatomic, copy) NSString *recipientIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } selectedRange;
@property (getter=isShifted, nonatomic, readonly) bool shifted;
@property (nonatomic, retain) NSDictionary *shiftedKeyToUnShiftedKeyExcludeCapitalizationMap;
@property (nonatomic) bool shouldDecomposeInputString;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *text;
@property (nonatomic, readonly) bool usePartialCandidates;
@property (nonatomic, readonly) <ACTUserActionStreaming> *userActionStream;
@property (nonatomic, retain) TIKeyboardTyperUserModel *userModel;
@property (nonatomic, retain) TITestUserPersona *userPersona;
@property (nonatomic) bool usesAutocapitalization;
@property (nonatomic) bool usesAutocorrection;
@property (nonatomic) bool usesPrediction;
@property (nonatomic) bool usesTransliteration;
@property (nonatomic) bool warnIfSelectingPopupVariant;
@property (nonatomic) bool wordLearningEnabled;

- (void).cxx_destruct;
- (void)_bumpTouchPathID;
- (void)_finishKeystrokeAndRecordPredictionsInTypingLog:(id)arg1 touchedKey:(id)arg2 insertedKey:(id)arg3 typingLog:(id)arg4;
- (id)_keyplaneCloserToKeyWithString:(id)arg1;
- (id)_logStringForTouchedKey:(id)arg1;
- (void)_performAcceptCandidate:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3;
- (void)_performAcceptCandidate:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3 predictiveCandidate:(bool)arg4;
- (void)_performAcceptCandidate:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3 predictiveCandidate:(bool)arg4 intendedTransliteration:(id)arg5;
- (void)_performAcceptPredictiveCandidate:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3;
- (id)_performGestureKeyInput:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3;
- (void)_performRejectCandidate:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3;
- (id)_performTapAtLocation:(struct CGPoint { double x1; double x2; })arg1 timestamp:(double)arg2 fingerID:(int)arg3 secondaryString:(bool)arg4;
- (id)_performTapAtLocation:(struct CGPoint { double x1; double x2; })arg1 timestamp:(double)arg2 intendedKey:(id)arg3 touchedKey:(id)arg4 secondaryString:(bool)arg5 touchError:(id)arg6 typingLog:(id)arg7;
- (id)_performTouchEvent:(id)arg1 typingLog:(id)arg2;
- (id)_performVariantKey:(id)arg1 timestamp:(double)arg2 typingLog:(id)arg3;
- (void)_skipTapTimestamp:(double)arg1 intendedKey:(id)arg2 typingLog:(id)arg3;
- (void)acceptAutocorrection;
- (void)acceptCandidate:(id)arg1;
- (void)acceptCandidateFromPredictionBar:(id)arg1;
- (void)acceptCandidateInputEvent:(id)arg1 fromCandidateBar:(bool)arg2;
- (void)acceptCandidateViaKeyboard:(id)arg1;
- (void)acceptPredictiveCandidate:(id)arg1;
- (void)adjustCursorByOffset:(long long)arg1;
- (void)adjustPhraseBoundaryByOffset:(long long)arg1 granularity:(int)arg2;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2;
- (bool)asyncPredictions;
- (void)attemptGestureKeyInput:(id)arg1;
- (void)attemptTapOnKeyWithString:(id)arg1;
- (void)attemptTapOnKeyWithString:(id)arg1 withErrorGenerator:(id)arg2 typingLog:(id)arg3;
- (void)attemptToDelete;
- (void)attemptToDeleteWithCount:(unsigned int)arg1;
- (void)attemptToRapidDeleteCharacters:(unsigned int)arg1;
- (void)attemptToShift;
- (void)attemptToStrokeWord:(id)arg1;
- (void)attemptToStrokeWord:(id)arg1 startTime:(double)arg2 duration:(double)arg3 typingLog:(id)arg4 callback:(id /* block */)arg5;
- (void)attemptToStrokeWord:(id)arg1 startTime:(double)arg2 typingLog:(id)arg3 callback:(id /* block */)arg4;
- (void)attemptToStrokeWord:(id)arg1 typingLog:(id)arg2;
- (void)attemptToStrokeWord:(id)arg1 typingLog:(id)arg2 callback:(id /* block */)arg3;
- (void)attemptToStrokeWord:(id)arg1 withCallback:(id /* block */)arg2;
- (void)attemptToStrokeWord:(id)arg1 withStartTime:(double)arg2;
- (void)attemptToStrokeWord:(id)arg1 withStartTime:(double)arg2 duration:(double)arg3;
- (bool)attemptToTapAutocorrectionWithString:(id)arg1;
- (void)attemptToTapKeys:(id)arg1;
- (void)attemptToTapMoreKey;
- (void)attemptToTapPredictionWithLiteral:(id)arg1;
- (bool)attemptToTapPredictionWithString:(id)arg1;
- (void)attemptToTypeIntended:(id)arg1 expected:(id)arg2 typingLog:(id)arg3;
- (void)attemptToTypeText:(id)arg1;
- (void)attemptToTypeText:(id)arg1 typingLog:(id)arg2;
- (void)attemptToTypeWithLog:(id)arg1;
- (void)attemptVariantKey:(id)arg1;
- (unsigned long long)autocapitalizationType;
- (id)autocorrection;
- (id)autocorrectionList;
- (unsigned long long)autocorrectionType;
- (id)badSentenceLogFilePath;
- (id)candidateBarCandidates;
- (id)candidateResultSet;
- (id)candidatesForString:(id)arg1;
- (bool)changeToNearestAlphabeticPlane;
- (bool)changeToNearestKeyplaneWithString:(id)arg1;
- (id)clientIdentifier;
- (void)commitText;
- (unsigned long long)cursorLocationInMarkedText;
- (void)dealloc;
- (id)displayStringOverrideForKey:(id)arg1;
- (id)document;
- (id)errorGenerator;
- (id)externalStringToInternal:(id)arg1;
- (void)generateAutocorrectionsWithShiftState:(int)arg1;
- (void)generateCandidates;
- (bool)hardwareKeyboardMode;
- (bool)hasPrediction:(id)arg1;
- (bool)inPartialCandidateSelection;
- (id)init;
- (id)initWithInputMode:(id)arg1;
- (id)inlineCompletionCandidates;
- (bool)inlineCompletionEnabled;
- (id)inputContextHistory;
- (id)inputManager;
- (id)inputMode;
- (id)inputModeIdentifier;
- (id)inputSegmentsForContinuousPathString:(id)arg1;
- (id)inputSegmentsForString:(id)arg1;
- (void)insertText:(id)arg1;
- (bool)insertsSpaceAfterPredictiveInput;
- (double)interTouchTimestampInterval;
- (id)internalStringToExternal:(id)arg1;
- (bool)isAutoshifted;
- (bool)isShifted;
- (id)keyContainingPoint:(struct CGPoint { double x1; double x2; })arg1 inKeyplane:(id)arg2;
- (id)keyToAccessKeyplaneCloserToKeyString:(id)arg1;
- (id)keyWithString:(id)arg1 inKeyplane:(id)arg2;
- (id)keyWithString:(id)arg1 inKeyplane:(id)arg2 includeSecondaryStrings:(bool)arg3;
- (id)keyboard;
- (id)keyboardController;
- (id)keyboardInputManagerFactory;
- (id)keyplane;
- (bool)lastInputWasSelection;
- (double)lastTimestamp;
- (void)learnWord:(id)arg1 withCount:(unsigned long long)arg2;
- (unsigned long long)learnWordContextIndex;
- (void)linkWithUserActionStream:(id)arg1;
- (id)locale;
- (bool)logDocumentContext;
- (bool)longPredictionListEnabled;
- (id)mapShiftedKeyToUnShiftedKeyExcludeCapitalization:(id)arg1;
- (id)markedText;
- (long long)maxPredictions;
- (int)maxPredictionsReported;
- (id)mergeHyphenatedWord:(id)arg1 string:(id)arg2;
- (bool)nextKeyIsMultitap;
- (void)performStrokeForPath:(id)arg1 typingLog:(id)arg2 callback:(id /* block */)arg3;
- (id)performTapAtKey:(id)arg1 biasedTowards:(id)arg2 biasWeight:(float)arg3;
- (id)performTapAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)performTouchCancelAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (long long)performTouchDownAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (long long)performTouchDragAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (void)performTouchEndRestAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (void)performTouchRestAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (id)performTouchUpAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (id)performTouchUpAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5 secondaryString:(bool)arg6;
- (struct CGPoint { double x1; double x2; })pointForAttemptedTapOnKey:(id)arg1 withError:(id)arg2;
- (bool)postTokenisString:(id)arg1 i:(unsigned long long)arg2;
- (id)predictionBarCandidates;
- (id)predictions;
- (bool)printTypingTranscript;
- (bool)priorTokenisString:(id)arg1 i:(unsigned long long)arg2;
- (id)recipientIdentifier;
- (void)registerLearning:(id)arg1 fullCandidate:(id)arg2 mode:(id)arg3;
- (void)rejectAutocorrection;
- (void)reset;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (void)setAsyncPredictions:(bool)arg1;
- (void)setAutocapitalizationType:(unsigned long long)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)setAutocorrectionType:(unsigned long long)arg1;
- (void)setBadSentenceLogFilePath:(id)arg1;
- (void)setClientIdentifier:(id)arg1;
- (void)setErrorGenerator:(id)arg1;
- (void)setHardwareKeyboardMode:(bool)arg1;
- (void)setInlineCompletionEnabled:(bool)arg1;
- (void)setInputContextHistory:(id)arg1;
- (void)setInputMode:(id)arg1;
- (void)setInputModeIdentifier:(id)arg1;
- (void)setInsertsSpaceAfterPredictiveInput:(bool)arg1;
- (void)setInterTouchTimestampInterval:(double)arg1;
- (void)setKeyboard:(id)arg1;
- (void)setKeyboardInputManagerFactory:(id)arg1;
- (void)setLastInputWasSelection:(bool)arg1;
- (void)setLastTimestamp:(double)arg1;
- (void)setLearnWordContextIndex:(unsigned long long)arg1;
- (void)setLocale:(id)arg1;
- (void)setLogDocumentContext:(bool)arg1;
- (void)setLongPredictionListEnabled:(bool)arg1;
- (void)setMaxPredictions:(long long)arg1;
- (void)setMaxPredictionsReported:(int)arg1;
- (void)setNextKeyIsMultitap:(bool)arg1;
- (void)setPrintTypingTranscript:(bool)arg1;
- (void)setRecipientIdentifier:(id)arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setShiftedKeyToUnShiftedKeyExcludeCapitalizationMap;
- (void)setShiftedKeyToUnShiftedKeyExcludeCapitalizationMap:(id)arg1;
- (void)setShouldDecomposeInputString:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setUserModel:(id)arg1;
- (void)setUserPersona:(id)arg1;
- (void)setUsesAutocapitalization:(bool)arg1;
- (void)setUsesAutocorrection:(bool)arg1;
- (void)setUsesPrediction:(bool)arg1;
- (void)setUsesTransliteration:(bool)arg1;
- (void)setWarnIfSelectingPopupVariant:(bool)arg1;
- (void)setWordLearningEnabled:(bool)arg1;
- (id)shiftKeyToAccessKeyplaneCloserToKeyString:(id)arg1;
- (id)shiftedKeyToUnShiftedKeyExcludeCapitalizationMap;
- (bool)shouldDecomposeInputString;
- (bool)shouldSkipCandidateSelection;
- (id)splitDigraphsInString:(id)arg1;
- (void)suspendAndResume;
- (void)syncToDocumentState:(id)arg1;
- (void)syncToEmptyDocument;
- (void)tearDown;
- (id)text;
- (id)tokensForString:(id)arg1;
- (id)transliteratedTokensForString:(id)arg1;
- (bool)usePartialCandidates;
- (id)userActionStream;
- (id)userModel;
- (id)userPersona;
- (bool)usesAutocapitalization;
- (bool)usesAutocorrection;
- (bool)usesPrediction;
- (bool)usesTransliteration;
- (bool)warnIfSelectingPopupVariant;
- (bool)wordLearningEnabled;

@end
