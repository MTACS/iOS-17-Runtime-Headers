
@interface ACTKeyboardController : NSObject <ACTClientProtocol, TIKeyboardInfoDelegate> {
    NSMutableDictionary * _activeTouchState;
    bool  _asyncPredictions;
    unsigned long long  _autocapitalizationType;
    TIAutocorrectionList * _autocorrectionList;
    unsigned long long  _autocorrectionType;
    bool  _canSuggestSupplementalItemsForCurrentSelection;
    TIKeyboardCandidateResultSet * _candidateResultSet;
    NSString * _clientIdentifier;
    NSLock * _cpRequestTokenLock;
    TICandidateRequestToken * _currentRequestToken;
    bool  _hardwareKeyboardMode;
    bool  _inlineCompletionEnabled;
    TIInputContextHistory * _inputContextHistory;
    bool  _inputIsPunctuationFollowingContinuousPath;
    TIKeyboardInputManagerState * _inputManagerState;
    TIKeyboardInputManagerWrapper * _inputManagerWrapper;
    TIInputMode * _inputMode;
    NSString * _inputModeIdentifier;
    bool  _insertsSpaceAfterPredictiveInput;
    TIKeyboardIntermediateText * _intermediateText;
    bool  _isScreenLocked;
    bool  _justAcceptedAutocorrection;
    UIKBTree * _keyboard;
    <TIKeyboardInputManagerFactory> * _keyboardInputManagerFactory;
    TIKeyboardState * _keyboardState;
    UIKBTree * _keyplane;
    NSArray * _keys;
    TICandidateRequestToken * _lastCPRequestToken;
    NSString * _lastCommittedText;
    bool  _lastInputWasContinuousPath;
    bool  _lastInputWasSelection;
    ACTKeyboardLayoutUtils * _layoutUtils;
    NSMutableSet * _leftKeys;
    bool  _longPredictionListEnabled;
    NSString * _markedText;
    bool  _nextKeyIsFlick;
    bool  _nextKeyIsMultitap;
    NSString * _recipientIdentifier;
    NSCondition * _requestCondition;
    NSMutableSet * _rightKeys;
    bool  _secureTextEntry;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _selectedRange;
    TISmartPunctuationController * _smartPunctuationController;
    unsigned long long  _supplementalLexiconIdentifier;
    NSMutableString * _text;
    TTKSimpleKeyboardPlane * _ttkLayout;
    bool  _usesAutocapitalization;
    bool  _usesAutocorrection;
    bool  _usesPrediction;
    bool  _usesTransliteration;
    bool  _wordLearningEnabled;
}

@property (nonatomic, retain) NSMutableDictionary *activeTouchState;
@property (nonatomic) bool asyncPredictions;
@property (nonatomic) unsigned long long autocapitalizationType;
@property (nonatomic, readonly) TIKeyboardCandidate *autocorrection;
@property (nonatomic, retain) TIAutocorrectionList *autocorrectionList;
@property (nonatomic) unsigned long long autocorrectionType;
@property (getter=isAutoshifted, nonatomic, readonly) bool autoshifted;
@property (nonatomic) bool canSuggestSupplementalItemsForCurrentSelection;
@property (nonatomic, retain) TIKeyboardCandidateResultSet *candidateResultSet;
@property (nonatomic, copy) NSString *clientIdentifier;
@property (nonatomic, retain) NSLock *cpRequestTokenLock;
@property (nonatomic, retain) TICandidateRequestToken *currentRequestToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TIKeyboardInputManager *existingInputManager;
@property (nonatomic) bool hardwareKeyboardMode;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TIKeyboardCandidate *inlineCompletion;
@property (nonatomic) bool inlineCompletionEnabled;
@property (nonatomic, retain) TIInputContextHistory *inputContextHistory;
@property (nonatomic) bool inputIsPunctuationFollowingContinuousPath;
@property (nonatomic, readonly) TIKeyboardInputManager *inputManager;
@property (nonatomic, retain) TIKeyboardInputManagerState *inputManagerState;
@property (nonatomic, retain) TIKeyboardInputManagerWrapper *inputManagerWrapper;
@property (nonatomic, readonly) TIInputMode *inputMode;
@property (nonatomic, copy) NSString *inputModeIdentifier;
@property (nonatomic) bool insertsSpaceAfterPredictiveInput;
@property (nonatomic, retain) TIKeyboardIntermediateText *intermediateText;
@property (nonatomic) bool isScreenLocked;
@property (nonatomic) bool justAcceptedAutocorrection;
@property (nonatomic, retain) UIKBTree *keyboard;
@property (nonatomic) <TIKeyboardInputManagerFactory> *keyboardInputManagerFactory;
@property (nonatomic, retain) TIKeyboardState *keyboardState;
@property (nonatomic, retain) UIKBTree *keyplane;
@property (nonatomic, retain) NSArray *keys;
@property (nonatomic, retain) TICandidateRequestToken *lastCPRequestToken;
@property (nonatomic, readonly) NSString *lastCommittedText;
@property (nonatomic) bool lastInputWasContinuousPath;
@property (nonatomic) bool lastInputWasSelection;
@property (nonatomic, readonly) ACTKeyboardLayoutUtils *layoutUtils;
@property (nonatomic, retain) NSMutableSet *leftKeys;
@property (nonatomic) bool longPredictionListEnabled;
@property (nonatomic, copy) NSString *markedText;
@property (nonatomic) bool nextKeyIsFlick;
@property (nonatomic) bool nextKeyIsMultitap;
@property (nonatomic, readonly) NSArray *predictions;
@property (nonatomic, copy) NSString *recipientIdentifier;
@property (nonatomic, readonly) NSCondition *requestCondition;
@property (nonatomic, retain) NSMutableSet *rightKeys;
@property (nonatomic) bool secureTextEntry;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } selectedRange;
@property (getter=isShifted, nonatomic, readonly) bool shifted;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (nonatomic, readonly) TISmartPunctuationController *smartPunctuationController;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long supplementalLexiconIdentifier;
@property (nonatomic, readonly) NSString *text;
@property (nonatomic, retain) TTKSimpleKeyboardPlane *ttkLayout;
@property (nonatomic) bool usesAutocapitalization;
@property (nonatomic) bool usesAutocorrection;
@property (nonatomic) bool usesPrediction;
@property (nonatomic) bool usesTransliteration;
@property (nonatomic) bool wordLearningEnabled;

- (void).cxx_destruct;
- (void)acceptAutocorrection;
- (void)acceptCandidate:(id)arg1;
- (void)acceptCandidate:(id)arg1 predictiveCandidate:(bool)arg2;
- (void)acceptCandidateInputEvent:(id)arg1 fromCandidateBar:(bool)arg2;
- (id)activeTouchState;
- (void)addInput:(id)arg1 fromVariantKey:(bool)arg2 fromGestureKey:(bool)arg3;
- (void)addInput:(id)arg1 fromVariantKey:(bool)arg2 fromGestureKey:(bool)arg3 touchEvent:(id)arg4;
- (void)addInput:(id)arg1 fromVariantKey:(bool)arg2 touchEvent:(id)arg3;
- (void)addStringFromGestureKeyInput:(id)arg1;
- (void)addStringFromVariantKey:(id)arg1;
- (id)adjustContinuousPathCandidate:(id)arg1;
- (void)adjustCursorByOffset:(long long)arg1;
- (void)adjustKeyplaneEmulatingKBStar:(id)arg1;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2;
- (void)alternateKeyplane;
- (bool)asyncPredictions;
- (unsigned long long)autocapitalizationType;
- (id)autocorrection;
- (id)autocorrectionList;
- (unsigned long long)autocorrectionType;
- (bool)canSuggestSupplementalItemsForCurrentSelection;
- (id)candidateByApplyingSmartPunctuationToCandidate:(id)arg1;
- (id)candidateResultSet;
- (id)candidateToConfirmInputString;
- (id)candidatesForString:(id)arg1;
- (id)clientIdentifier;
- (id)clonedKeyboardState;
- (void)closeRequestToken:(id)arg1;
- (void)commitText;
- (id)cpRequestTokenLock;
- (id)createKeyboardInputManagerWrapper;
- (id)currentRequestToken;
- (void)dealloc;
- (void)deleteBackwards;
- (void)deleteInput;
- (void)deleteInput:(id)arg1;
- (void)deleteText:(id)arg1 rawText:(id)arg2;
- (id)displayStringOverrideForKey:(id)arg1;
- (float)distanceFromKey:(id)arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)divideKeyplane:(id)arg1 intoLeft:(id)arg2 right:(id)arg3;
- (void)enumerateKeyplaneNamesAdjacentToKeyplane:(id)arg1 usingBlock:(id /* block */)arg2;
- (id)existingInputManager;
- (void)generateAutocorrectionsOrCandidates;
- (void)generateAutocorrectionsWithCount:(unsigned long long)arg1;
- (void)generateAutocorrectionsWithKeyboardState:(id)arg1;
- (void)generateAutocorrectionsWithShiftState:(int)arg1;
- (void)generateCandidates;
- (void)generateCandidatesWithKeyboardState:(id)arg1;
- (bool)generatesCandidates;
- (void)handleKeyboardInput:(id)arg1;
- (bool)hardwareKeyboardMode;
- (bool)hasPrediction:(id)arg1;
- (id)init;
- (id)initWithInputMode:(id)arg1;
- (id)inlineCompletion;
- (bool)inlineCompletionEnabled;
- (id)inputContextHistory;
- (bool)inputIsPunctuationFollowingContinuousPath;
- (id)inputManager;
- (id)inputManagerState;
- (id)inputManagerWrapper;
- (id)inputMode;
- (id)inputModeIdentifier;
- (void)insertText:(id)arg1;
- (bool)insertsSpaceAfterPredictiveInput;
- (id)intermediateText;
- (bool)isAutoshifted;
- (bool)isContinuousPathNonSpacePunctuation:(unsigned int)arg1;
- (bool)isKeyStringAboveSpaceBar:(id)arg1;
- (bool)isKeyplane:(id)arg1 alternateOfKeyplane:(id)arg2;
- (bool)isKeyplane:(id)arg1 shiftAlternateOfKeyplane:(id)arg2;
- (bool)isScreenLocked;
- (bool)isShifted;
- (bool)justAcceptedAutocorrection;
- (long long)keyCodeWithString:(id)arg1 inKeyplane:(id)arg2;
- (id)keyContainingPoint:(struct CGPoint { double x1; double x2; })arg1 inKeyplane:(id)arg2;
- (id)keyToAccessKeyplane:(id)arg1 fromKeyplane:(id)arg2;
- (id)keyboard;
- (id)keyboardInputManagerFactory;
- (id)keyboardState;
- (id)keyplane;
- (id)keys;
- (id)lastCPRequestToken;
- (id)lastCommittedText;
- (bool)lastInputWasContinuousPath;
- (bool)lastInputWasSelection;
- (id)layoutUtils;
- (id)leftKeys;
- (bool)longPredictionListEnabled;
- (id)markedText;
- (void)mergeFrameFromKey:(id)arg1 intoKey:(id)arg2;
- (bool)nextKeyIsFlick;
- (bool)nextKeyIsMultitap;
- (id)performSkipTapAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5 forcedKeyCode:(long long)arg6;
- (void)performTouchCancelAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (long long)performTouchDownAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (long long)performTouchDragAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (void)performTouchEndRestAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (void)performTouchRestAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (id)performTouchUpAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5 secondaryString:(bool)arg6;
- (id)predictions;
- (void)processPayloadInfo:(id)arg1;
- (void)pushAutocorrections:(id)arg1 requestToken:(id)arg2;
- (void)pushCandidateResultSet:(id)arg1 requestToken:(id)arg2;
- (id)recipientIdentifier;
- (void)registerLayoutWithFavonius;
- (void)rejectCandidate:(id)arg1;
- (id)requestCondition;
- (void)reset;
- (long long)retestTouchAtLocation:(struct CGPoint { double x1; double x2; })arg1 radius:(float)arg2 timestamp:(double)arg3 pathIndex:(unsigned long long)arg4 fingerID:(int)arg5;
- (id)rightKeys;
- (bool)secureTextEntry;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRangeForText:(id)arg1;
- (void)setActiveTouchState:(id)arg1;
- (void)setAsyncPredictions:(bool)arg1;
- (void)setAutocapitalizationType:(unsigned long long)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)setAutocorrectionType:(unsigned long long)arg1;
- (void)setCanSuggestSupplementalItemsForCurrentSelection:(bool)arg1;
- (void)setCandidateResultSet:(id)arg1;
- (void)setClientIdentifier:(id)arg1;
- (void)setCpRequestTokenLock:(id)arg1;
- (void)setCurrentRequestToken:(id)arg1;
- (void)setHardwareKeyboardMode:(bool)arg1;
- (void)setInitialKeyplane;
- (void)setInlineCompletionEnabled:(bool)arg1;
- (void)setInputContextHistory:(id)arg1;
- (void)setInputIsPunctuationFollowingContinuousPath:(bool)arg1;
- (void)setInputManagerState:(id)arg1;
- (void)setInputManagerWrapper:(id)arg1;
- (void)setInputModeIdentifier:(id)arg1;
- (void)setInsertsSpaceAfterPredictiveInput:(bool)arg1;
- (void)setIntermediateText:(id)arg1;
- (void)setIsScreenLocked:(bool)arg1;
- (void)setJustAcceptedAutocorrection:(bool)arg1;
- (void)setKeyboard:(id)arg1;
- (void)setKeyboardConfiguration:(id)arg1;
- (void)setKeyboardInputManagerFactory:(id)arg1;
- (void)setKeyboardState:(id)arg1;
- (void)setKeyplane:(id)arg1;
- (void)setKeys:(id)arg1;
- (void)setLastCPRequestToken:(id)arg1;
- (void)setLastInputWasContinuousPath:(bool)arg1;
- (void)setLastInputWasSelection:(bool)arg1;
- (void)setLeftKeys:(id)arg1;
- (void)setLongPredictionListEnabled:(bool)arg1;
- (void)setMarkedText:(id)arg1;
- (void)setNextKeyIsFlick:(bool)arg1;
- (void)setNextKeyIsMultitap:(bool)arg1;
- (void)setRecipientIdentifier:(id)arg1;
- (void)setRightKeys:(id)arg1;
- (void)setSecureTextEntry:(bool)arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setSupplementalLexiconIdentifier:(unsigned long long)arg1;
- (void)setTtkLayout:(id)arg1;
- (void)setUsesAutocapitalization:(bool)arg1;
- (void)setUsesAutocorrection:(bool)arg1;
- (void)setUsesPrediction:(bool)arg1;
- (void)setUsesTransliteration:(bool)arg1;
- (void)setWordLearningEnabled:(bool)arg1;
- (void)shiftKeyplane;
- (bool)shouldAcceptCandidate:(id)arg1 beforeInputString:(id)arg2;
- (bool)shouldSkipCandidateSelection;
- (id)smartPunctuationController;
- (unsigned long long)supplementalLexiconIdentifier;
- (void)syncToDocumentState:(id)arg1;
- (void)syncToEmptyDocument;
- (void)syncToKeyboardState;
- (bool)syncToKeyboardStateByWaitingForResults:(bool)arg1;
- (void)tearDown;
- (id)text;
- (void)textAccepted:(id)arg1 predictiveCandidate:(bool)arg2;
- (bool)touchPassesDragThresholdAtPoint:(struct CGPoint { double x1; double x2; })arg1 pathIndex:(unsigned long long)arg2;
- (id)trimmedCandidate:(id)arg1;
- (id)ttkLayout;
- (void)updateAutoshift;
- (void)updateDocumentState;
- (void)updateKeyboardOutput:(id)arg1 withInputForSmartPunctuation:(id)arg2;
- (bool)usesAutocapitalization;
- (bool)usesAutocorrection;
- (bool)usesPrediction;
- (bool)usesTransliteration;
- (bool)wordLearningEnabled;

@end
