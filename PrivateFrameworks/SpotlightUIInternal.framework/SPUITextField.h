
@interface SPUITextField : UISearchTextField <UIGestureRecognizerDelegate, UIScribbleInteractionDelegate> {
    UIFont * _accessoryIconFont;
    long long  _accessorySymbolWeight;
    long long  _activeInterfaceOrientation;
    id  _animateAssertion;
    SPUIHeaderBlurView * _blurView;
    bool  _canAcquireFieldEditor;
    <UITextCursorAssertion> * _caretAssertion;
    UIGestureRecognizer * _completionTapGestureRecognizer;
    bool  _didShowWebEntityBeforeTap;
    SPUICompletionStringView * _hintingView;
    bool  _ignoreTokensUpdate;
    long long  _internalTextAlignment;
    bool  _isOnDarkBackground;
    bool  _lastUpdateWasDeletion;
    UIImage * _microphoneImage;
    UIColor * _primaryColor;
    UIResponder * _responderForKeyboardInput;
    NSString * _restorationStringOnKBMovement;
    UIScribbleInteraction * _scribbleInteraction;
    SPUICompletionStringModel * _searchFieldModel;
    UIColor * _secondaryColor;
    NSTimer * _switchBackToSuggestionsTimer;
    UIView * _tintView;
}

@property (retain) UIFont *accessoryIconFont;
@property long long accessorySymbolWeight;
@property (nonatomic) long long activeInterfaceOrientation;
@property (retain) id animateAssertion;
@property (readonly) double backgroundCornerRadius;
@property (nonatomic, retain) SPUIHeaderBlurView *blurView;
@property (nonatomic) bool canAcquireFieldEditor;
@property (retain) <UITextCursorAssertion> *caretAssertion;
@property (readonly) bool completionResultIsPotentiallyPunchout;
@property (retain) UIGestureRecognizer *completionTapGestureRecognizer;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SPUITextFieldDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property bool didShowWebEntityBeforeTap;
@property (readonly) unsigned long long hash;
@property (retain) SPUICompletionStringView *hintingView;
@property bool ignoreTokensUpdate;
@property long long internalTextAlignment;
@property (readonly) bool isOnDarkBackground;
@property bool lastUpdateWasDeletion;
@property (retain) UIImage *microphoneImage;
@property (nonatomic, readonly) bool needsLandscapeHeight;
@property (nonatomic, readonly) bool optOutOfGoButton;
@property (readonly) UIColor *primaryColor;
@property (nonatomic) UIResponder *responderForKeyboardInput;
@property (retain) NSString *restorationStringOnKBMovement;
@property (retain) UIScribbleInteraction *scribbleInteraction;
@property (readonly) SPSearchEntity *searchEntity;
@property (nonatomic, retain) SPUICompletionStringModel *searchFieldModel;
@property (readonly) UIColor *secondaryColor;
@property (readonly) Class superclass;
@property (retain) NSTimer *switchBackToSuggestionsTimer;
@property (nonatomic, readonly) double textFieldHeight;
@property (nonatomic, readonly) NSString *textIncludingTokens;
@property (retain) UIView *tintView;

+ (void)updateBlueButton;
+ (id)webEntityStringForEntity:(id)arg1;

- (void).cxx_destruct;
- (long long)_focusItemDeferralMode;
- (void)_promoteCompletionAndMoveForward:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_shiftedBoundsForText:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_shouldSendContentChangedNotificationsIfOnlyMarkedTextChanged;
- (id)accessoryIconFont;
- (id)accessoryIconWithSymbolName:(id)arg1;
- (long long)accessorySymbolWeight;
- (long long)activeInterfaceOrientation;
- (id)animateAssertion;
- (void)applyMetrics;
- (double)backgroundCornerRadius;
- (bool)becomeFirstResponder;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)blurView;
- (void)buildMenuWithBuilder:(id)arg1;
- (bool)canAcquireFieldEditor;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)caretAssertion;
- (void)clearAllTokens;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clearButtonRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)commitToCommitedSearch;
- (bool)completionResultIsPotentiallyPunchout;
- (id)completionTapGestureRecognizer;
- (id)currentQueryContext;
- (void)detokenizeIfNeededAndSearch:(bool)arg1;
- (bool)didShowWebEntityBeforeTap;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })editingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)enterKeyPressed;
- (void)escapeKeyCommand;
- (id)focusGroupIdentifier;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hasContent;
- (id)hintingView;
- (bool)ignoreTokensUpdate;
- (id)init;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })insertFilteredText:(id)arg1;
- (void)insertText:(id)arg1;
- (long long)internalTextAlignment;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isOnDarkBackground;
- (id)keyCommands;
- (void)keyboardFrameChanged:(id)arg1;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (bool)lastUpdateWasDeletion;
- (void)layoutSubviews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })leftViewRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)microphoneImage;
- (bool)needsLandscapeHeight;
- (id)nextResponder;
- (bool)optOutOfGoButton;
- (id)preferredFocusEnvironments;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (id)primaryColor;
- (void)promoteCompletionIfPossibleAndMoveForward:(bool)arg1;
- (void)removeCaretAssertion;
- (void)removeCompletionAndHighlight;
- (void)removeCompletionsOrEntitiesAndGoToSuggestions:(bool)arg1;
- (void)resetClearButtonWithScale:(long long)arg1;
- (void)resetDeletion;
- (void)resetMicrophoneButtonWithScale:(long long)arg1;
- (void)resetPhoneClearButton;
- (bool)resignFirstResponder;
- (id)responderForKeyboardInput;
- (id)restorationStringOnKBMovement;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rightViewRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)scribbleInteraction;
- (void)scribbleInteractionWillBeginWriting:(id)arg1;
- (id)searchEntity;
- (id)searchFieldModel;
- (id)secondaryColor;
- (void)selectAll:(id)arg1;
- (void)setAccessoryIconFont:(id)arg1;
- (void)setAccessorySymbolWeight:(long long)arg1;
- (void)setActiveInterfaceOrientation:(long long)arg1;
- (void)setAnimateAssertion:(id)arg1;
- (void)setBlurView:(id)arg1;
- (void)setCanAcquireFieldEditor:(bool)arg1;
- (void)setCaretAssertion:(id)arg1;
- (void)setCompletionTapGestureRecognizer:(id)arg1;
- (void)setDidShowWebEntityBeforeTap:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setHintingView:(id)arg1;
- (void)setIgnoreTokensUpdate:(bool)arg1;
- (void)setInternalTextAlignment:(long long)arg1;
- (void)setLastUpdateWasDeletion:(bool)arg1;
- (void)setMicrophoneImage:(id)arg1;
- (void)setResponderForKeyboardInput:(id)arg1;
- (void)setRestorationStringOnKBMovement:(id)arg1;
- (void)setScribbleInteraction:(id)arg1;
- (void)setSearchFieldModel:(id)arg1;
- (void)setSwitchBackToSuggestionsTimer:(id)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTintView:(id)arg1;
- (bool)shouldPromoteCompletion;
- (id)switchBackToSuggestionsTimer;
- (double)textFieldHeight;
- (void)textFieldWasTapped;
- (id)textIncludingTokens;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)tintColorDidChange;
- (id)tintView;
- (void)toggleBackToCommittedSearch;
- (void)toggleCommitedSearch;
- (void)traitCollectionDidChange:(id)arg1;
- (void)unmarkText;
- (void)updateCaretVisibility;
- (void)updateCaretVisibility:(bool)arg1;
- (void)updateFocusResult:(id)arg1 cardSection:(id)arg2 focusIsOnFirstResult:(bool)arg3;
- (void)updateLeftViewWithSymbolName:(id)arg1;
- (void)updateRightView;
- (void)updateTextRange:(id)arg1;
- (void)updateToken:(id)arg1;
- (void)updateWithPrimaryColor:(id)arg1 secondaryColor:(id)arg2 isOnDarkBackground:(bool)arg3;

@end
