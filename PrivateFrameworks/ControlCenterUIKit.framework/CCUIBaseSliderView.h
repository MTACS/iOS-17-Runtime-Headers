
@interface CCUIBaseSliderView : UIControl <CCUIContentModuleExpandedStateListener, CCUIContentModuleTopLevelGestureProvider, CCUIGroupRendering, CCUITouchContinuationProviding> {
    UIView<CCUIPunchOutRendering><CCUIPunchOutCompensating> * _activeGlyphView;
    UIView * _backgroundView;
    unsigned long long  _behaviorIdentifier;
    UIView<CCUIPunchOutCompensating> * _compensatingGlyphView;
    double  _continuousSliderCornerRadius;
    bool  _editingValue;
    UIView * _elasticBackgroundContentView;
    UIView * _elasticContentBoundaryView;
    double  _elasticContentStretchAmount;
    UIView * _elasticContentView;
    bool  _expanded;
    UIView * _glyphContainerView;
    UIImage * _glyphImage;
    UIImageView * _glyphImageView;
    CCUICAPackageDescription * _glyphPackageDescription;
    CCUICAPackageView * _glyphPackageView;
    double  _glyphScale;
    NSString * _glyphState;
    bool  _glyphVisible;
    _UIFluidSliderInteraction * _interaction;
    bool  _interactiveWhenUnexpanded;
    bool  _isReceivingIndirectInputUpdates;
    _UIFluidSliderInteractionUpdate * _lastInteractionUpdate;
    bool  _shouldIncludeVolumeButtonsInput;
    bool  _shouldRelaxVisibilityRequirementForButtonInput;
    bool  _shouldSendEditingControlEvents;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeForValidConfiguration;
    bool  _usesBuiltInBackgroundView;
    float  _value;
    bool  _valueVisible;
}

@property (nonatomic, readonly) UIView *backgroundView;
@property (nonatomic) unsigned long long behaviorIdentifier;
@property (nonatomic) double continuousSliderCornerRadius;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEditingValue, nonatomic, readonly) bool editingValue;
@property (nonatomic, readonly) UIView *elasticBackgroundContentView;
@property (nonatomic, readonly) UIView *elasticContentBoundaryView;
@property (nonatomic) double elasticContentStretchAmount;
@property (nonatomic, readonly) UIView *elasticContentView;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } glyphCenter;
@property (nonatomic, readonly) UIView *glyphContainerView;
@property (nonatomic, retain) UIImage *glyphImage;
@property (nonatomic, retain) CCUICAPackageDescription *glyphPackageDescription;
@property (nonatomic) double glyphScale;
@property (nonatomic, retain) NSString *glyphState;
@property (getter=isGlyphVisible, nonatomic) bool glyphVisible;
@property (getter=isGroupRenderingRequired, nonatomic, readonly) bool groupRenderingRequired;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) _UIFluidSliderInteraction *interaction;
@property (getter=isInteractiveWhenUnexpanded, nonatomic) bool interactiveWhenUnexpanded;
@property (getter=_panGestureRecognizer, nonatomic, readonly) UIPanGestureRecognizer *panGestureRecognizer;
@property (nonatomic, readonly) float presentationValue;
@property (nonatomic, readonly) NSArray *punchOutRenderingViews;
@property (nonatomic, readonly) NSArray *punchOutRootLayers;
@property (nonatomic, readonly) bool shouldAlwaysEnableButtonElasticity;
@property (nonatomic) bool shouldIncludeVolumeButtonsInput;
@property (nonatomic, readonly) bool shouldIntegralizeContentLayout;
@property (nonatomic, readonly) bool shouldIntegralizeValueLayout;
@property (nonatomic) bool shouldProvideBuiltInFeedback;
@property (nonatomic) bool shouldRelaxVisibilityRequirementForButtonInput;
@property (nonatomic) bool shouldScaleWithButtonInput;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *topLevelBlockingGestureRecognizers;
@property (nonatomic) bool usesBuiltInBackgroundView;
@property (nonatomic, readonly) float value;
@property (getter=isValueVisible, nonatomic) bool valueVisible;

- (void).cxx_destruct;
- (id)_additionalTopLevelBlockingGestureRecognizers;
- (void)_applyGlyphState:(id)arg1 performConfiguration:(bool)arg2;
- (void)_configureButtonInteraction;
- (void)_configurePanGestureRecognizer;
- (double)_effectiveStretchAmount;
- (void)_handleFluidSliderInteractionUpdate:(id)arg1;
- (bool)_isInteractionStable;
- (void)_layoutElasticContentContainers;
- (double)_length;
- (id)_panGestureRecognizer;
- (void)_setActiveGlyphView:(id)arg1;
- (void)_setGlyphState:(id)arg1;
- (void)_updateBackgroundViewAppearance;
- (void)_updateInteractionEnabled;
- (id)backgroundView;
- (unsigned long long)behaviorIdentifier;
- (void)contentModuleWillTransitionToExpandedContentMode:(bool)arg1;
- (double)continuousSliderCornerRadius;
- (id)createBackgroundView;
- (id)elasticBackgroundContentView;
- (id)elasticContentBoundaryView;
- (double)elasticContentStretchAmount;
- (id)elasticContentView;
- (struct CGPoint { double x1; double x2; })glyphCenter;
- (id)glyphContainerView;
- (id)glyphImage;
- (id)glyphPackageDescription;
- (double)glyphScale;
- (id)glyphState;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)interaction;
- (bool)isEditingValue;
- (bool)isGlyphVisible;
- (bool)isGroupRenderingRequired;
- (bool)isInteractiveWhenUnexpanded;
- (bool)isValueVisible;
- (void)layoutElasticContentViews;
- (void)layoutSubviews;
- (float)presentationValue;
- (id)punchOutRenderingViews;
- (id)punchOutRootLayers;
- (void)setBehaviorIdentifier:(unsigned long long)arg1;
- (void)setContinuousSliderCornerRadius:(double)arg1;
- (void)setElasticContentStretchAmount:(double)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setGlyphImage:(id)arg1;
- (void)setGlyphPackageDescription:(id)arg1;
- (void)setGlyphScale:(double)arg1;
- (void)setGlyphState:(id)arg1;
- (void)setGlyphVisible:(bool)arg1;
- (void)setInteractiveWhenUnexpanded:(bool)arg1;
- (void)setShouldIncludeVolumeButtonsInput:(bool)arg1;
- (void)setShouldProvideBuiltInFeedback:(bool)arg1;
- (void)setShouldRelaxVisibilityRequirementForButtonInput:(bool)arg1;
- (void)setShouldScaleWithButtonInput:(bool)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setUsesBuiltInBackgroundView:(bool)arg1;
- (void)setValue:(float)arg1;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (void)setValueVisible:(bool)arg1;
- (bool)shouldAlwaysEnableButtonElasticity;
- (bool)shouldIncludeVolumeButtonsInput;
- (bool)shouldIntegralizeContentLayout;
- (bool)shouldIntegralizeValueLayout;
- (bool)shouldProvideBuiltInFeedback;
- (bool)shouldRelaxVisibilityRequirementForButtonInput;
- (bool)shouldScaleWithButtonInput;
- (id)topLevelBlockingGestureRecognizers;
- (bool)usesBuiltInBackgroundView;
- (float)value;
- (id)viewForTouchContinuation;

@end
