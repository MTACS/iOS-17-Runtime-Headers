
@interface CCUIMenuModuleViewController : CCUIButtonModuleViewController <CCUIContentModuleContentViewController, UIGestureRecognizerDelegate> {
    bool  _allowsMenuInteraction;
    bool  _busy;
    UIActivityIndicatorView * _busyIndicatorView;
    NSMutableDictionary * _categoriesToVisualStylingProviders;
    CCUIContentModuleContext * _contentModuleContext;
    UIScrollView * _contentScrollView;
    UIView * _contentView;
    UIView * _customContentView;
    bool  _customContentViewScrolls;
    UIView * _darkeningBackgroundView;
    UISelectionFeedbackGenerator * _feedbackGenerator;
    CCUIMenuModuleItemView * _footerButtonView;
    UIView * _footerSeparatorView;
    bool  _forceLimitContentSizeCategory;
    UIView * _headerSeparatorView;
    bool  _hideGlyphInHeader;
    NSMutableDictionary * _identiferToActivityIndicatorView;
    bool  _ignoreMenuItemAtTouchLocationAfterExpanded;
    unsigned long long  _indentation;
    NSMutableArray * _menuItems;
    UIStackView * _menuItemsContainer;
    unsigned long long  _minimumMenuItems;
    MTMaterialView * _platterMaterialView;
    UILongPressGestureRecognizer * _pressGestureRecognizer;
    bool  _shouldProvideOwnPlatter;
    bool  _shouldShowFooterButton;
    NSString * _subtitle;
    UILabel * _subtitleLabel;
    UILabel * _titleLabel;
    struct CGPoint { 
        double x; 
        double y; 
    }  _touchLocationToIgnore;
    UIView * _transformView;
    bool  _useTallLayout;
    bool  _useTrailingCheckmarkLayout;
    bool  _useTrailingInset;
    double  _visibleMenuItems;
}

@property (nonatomic, readonly) unsigned long long actionsCount;
@property (getter=isBusy, nonatomic) bool busy;
@property (nonatomic) CCUIContentModuleContext *contentModuleContext;
@property (nonatomic, readonly) UIView *contentView;
@property (nonatomic, readonly) UIViewPropertyAnimator *customAnimator;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasFooterButton;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double headerHeight;
@property (nonatomic) bool hideGlyphInHeader;
@property (nonatomic) unsigned long long indentation;
@property (nonatomic, readonly) unsigned long long menuItemCount;
@property (nonatomic) unsigned long long minimumMenuItems;
@property (nonatomic, readonly) double preferredExpandedContentHeight;
@property (nonatomic, readonly) double preferredExpandedContentWidth;
@property (nonatomic, readonly) double preferredExpandedContinuousCornerRadius;
@property (nonatomic, readonly) bool providesOwnPlatter;
@property (nonatomic, readonly) bool shouldPerformClickInteraction;
@property (nonatomic, readonly) bool shouldPerformHoverInteraction;
@property (nonatomic) bool shouldProvideOwnPlatter;
@property (nonatomic, copy) NSString *subtitle;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (nonatomic) bool useTallLayout;
@property (nonatomic) bool useTrailingCheckmarkLayout;
@property (nonatomic) bool useTrailingInset;
@property (nonatomic) double visibleMenuItems;

+ (id)checkmarkImageForPreferredContentSizeCategory:(id)arg1;

- (void).cxx_destruct;
- (double)_aggregateModuleHeight;
- (id)_busyIndicatorView;
- (bool)_canShowWhileLocked;
- (double)_contentScaleForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_contentSizeCategoryDidChange;
- (double)_defaultMenuItemHeight;
- (double)_desiredExpandedHeight;
- (void)_fadeViewsForExpandedState:(bool)arg1;
- (double)_footerHeight;
- (void)_handleActionTapped:(id)arg1;
- (void)_handlePressGesture:(id)arg1;
- (void)_layoutBusyIndicatorForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutContentViewForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutFooterButtonForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutFooterSeparatorForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutGlyphViewForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutHeaderSeparatorForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutSubtitleLabelForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutTitleLabelForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutTransformViewForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutViewSubviews;
- (id)_leadingViewForMenuItem:(id)arg1;
- (double)_maximumHeight;
- (id)_menuItemFromPlaceholderIndex:(unsigned long long)arg1;
- (double)_menuItemsHeightForWidth:(double)arg1;
- (id)_preferredFontForTextStyle:(id)arg1 hiFontStyle:(long long)arg2;
- (double)_separatorHeight;
- (void)_setForceLimitContentSizeCategory:(bool)arg1;
- (void)_setMenuItems:(id)arg1;
- (void)_setRootViewClipsToBounds:(bool)arg1;
- (void)_setTransformViewClipsToBounds:(bool)arg1;
- (void)_setView:(id)arg1 clipsToBounds:(bool)arg2;
- (void)_setupSubtitleLabel;
- (void)_setupTitleLabel;
- (bool)_shouldHideGlyphForLimitedContentSizeCategory;
- (bool)_shouldLimitContentSizeCategory;
- (bool)_shouldShowFooterChin;
- (bool)_shouldShowFooterSeparator;
- (id)_subtitleFont;
- (id)_titleFont;
- (double)_titleWidthForContainerWidth:(double)arg1;
- (bool)_toggleSelectionForMenuItem:(id)arg1;
- (id)_trailingViewForMenuItem:(id)arg1;
- (void)_updateLeadingAndTrailingViews;
- (void)_updateMenuItemsSeparatorVisiblity;
- (void)_updatePreferredContentSize;
- (void)_updateSubtitleFont;
- (void)_updateTitleFont;
- (unsigned long long)actionsCount;
- (void)addActionWithTitle:(id)arg1 glyph:(id)arg2 handler:(id /* block */)arg3;
- (void)addActionWithTitle:(id)arg1 subtitle:(id)arg2 glyph:(id)arg3 handler:(id /* block */)arg4;
- (id)contentModuleContext;
- (void)contentModuleWillTransitionToExpandedContentMode:(bool)arg1;
- (id)contentView;
- (void)didTransitionToExpandedContentMode:(bool)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)hasFooterButton;
- (bool)hasGlyph;
- (double)headerHeight;
- (double)headerHeightForWidth:(double)arg1;
- (bool)hideGlyphInHeader;
- (unsigned long long)indentation;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isBusy;
- (id)leadingImageForMenuItem:(id)arg1;
- (id)leadingViewForMenuItem:(id)arg1;
- (unsigned long long)menuItemCount;
- (id)menuItemForIdentifier:(id)arg1;
- (unsigned long long)minimumMenuItems;
- (double)preferredExpandedContentHeight;
- (double)preferredExpandedContentHeightWithWidth:(double)arg1;
- (double)preferredExpandedContentWidth;
- (void)removeAllActions;
- (void)removeFooterButton;
- (void)scrollToTop:(bool)arg1;
- (double)scrollViewContentHeightForWidth:(double)arg1;
- (void)setBusy:(bool)arg1;
- (void)setContentModuleContext:(id)arg1;
- (void)setCustomContentView:(id)arg1;
- (void)setFooterButtonTitle:(id)arg1 handler:(id /* block */)arg2;
- (void)setGlyphImage:(id)arg1;
- (void)setGlyphPackageDescription:(id)arg1;
- (void)setHideGlyphInHeader:(bool)arg1;
- (void)setIndentation:(unsigned long long)arg1;
- (void)setMenuItems:(id)arg1;
- (void)setMinimumMenuItems:(unsigned long long)arg1;
- (void)setShouldProvideOwnPlatter:(bool)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUseIndentedLayout:(bool)arg1;
- (void)setUseTallLayout:(bool)arg1;
- (void)setUseTrailingCheckmarkLayout:(bool)arg1;
- (void)setUseTrailingInset:(bool)arg1;
- (void)setVisibleMenuItems:(double)arg1;
- (bool)shouldBeginTransitionToExpandedContentModule;
- (bool)shouldProvideOwnPlatter;
- (id)subtitle;
- (id)trailingImageForMenuItem:(id)arg1;
- (id)trailingViewForMenuItem:(id)arg1;
- (bool)useTallLayout;
- (bool)useTrailingCheckmarkLayout;
- (bool)useTrailingInset;
- (void)viewDidLoad;
- (void)viewDidMoveToWindow:(id)arg1 shouldAppearOrDisappear:(bool)arg2;
- (id)viewForTouchContinuation;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (double)visibleMenuItems;
- (void)willTransitionToExpandedContentMode:(bool)arg1;

@end
