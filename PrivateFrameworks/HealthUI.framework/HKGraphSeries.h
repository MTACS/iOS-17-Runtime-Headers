
@interface HKGraphSeries : NSObject <HKChartCachePriorityDelegate, HKGraphSeriesDataSourceDelegate> {
    NSUUID * _UUID;
    bool  _adjustYAxisForLabelsStorage;
    bool  _allowsSelectionStorage;
    double  _alphaStorage;
    <HKGraphSeriesAxisScalingRule> * _axisScalingRuleStorage;
    NSMutableDictionary * _cachedCoordinateListsByBlockPath;
    NSMutableDictionary * _cachedDataBlocksByBlockPath;
    HKValueRange * _closestXCoordinateRangeStorage;
    HKGraphSeriesDataSource * _dataSourceStorage;
    <HKSeriesDelegate> * _delegateStorage;
    NSArray * _detailLegendEntriesStorage;
    bool  _drawLegendInsideSeriesStorage;
    bool  _internalDirtyFlag;
    bool  _invertYAxisStorage;
    bool  _isCriticalForAutoscaleStorage;
    UIColor * _offScreenIndicatorColorStorage;
    double  _offscreenIndicatorAlphaStorage;
    struct { 
        struct { 
            struct HKGraphSeriesDataBlockPath { 
                long long index; 
                long long zoom; 
                long long resolution; 
            } blockPath; 
            long long index; 
        } min; 
        struct { 
            struct HKGraphSeriesDataBlockPath { 
                long long index; 
                long long zoom; 
                long long resolution; 
            } blockPath; 
            long long index; 
        } max; 
    }  _selectedPathRangeStorage;
    id  _seriesDataSourceContextStorage;
    NSLock * _seriesMutableStateLock;
    NSArray * _titleLegendEntriesStorage;
    HKValueRange * _visibleValueRangeStorage;
    bool  _wantsRoundingDuringYRangeExpansionStorage;
    HKAxis * _yAxisStorage;
}

@property (nonatomic, readonly) NSUUID *UUID;
@property (nonatomic) bool adjustYAxisForLabels;
@property (nonatomic, readonly) bool adjustYAxisForLabelsStorage;
@property (nonatomic) bool allowsSelection;
@property (nonatomic, readonly) bool allowsSelectionStorage;
@property (nonatomic) double alpha;
@property (nonatomic, readonly) double alphaStorage;
@property (nonatomic, retain) <HKGraphSeriesAxisScalingRule> *axisScalingRule;
@property (nonatomic, readonly) <HKGraphSeriesAxisScalingRule> *axisScalingRuleStorage;
@property (nonatomic, retain) NSMutableDictionary *cachedCoordinateListsByBlockPath;
@property (nonatomic, retain) NSMutableDictionary *cachedDataBlocksByBlockPath;
@property (nonatomic, readonly) HKValueRange *closestXCoordinateRangeStorage;
@property (nonatomic, retain) HKGraphSeriesDataSource *dataSource;
@property (nonatomic, readonly) HKGraphSeriesDataSource *dataSourceStorage;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <HKSeriesDelegate> *delegate;
@property (nonatomic, readonly) <HKSeriesDelegate> *delegateStorage;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSArray *detailLegendEntries;
@property (nonatomic, readonly) NSArray *detailLegendEntriesStorage;
@property (nonatomic) bool drawLegendInsideSeries;
@property (nonatomic, readonly) bool drawLegendInsideSeriesStorage;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool internalDirtyFlag;
@property (nonatomic) bool invertYAxis;
@property (nonatomic, readonly) bool invertYAxisStorage;
@property (nonatomic) bool isCriticalForAutoscale;
@property (nonatomic, readonly) bool isCriticalForAutoscaleStorage;
@property (nonatomic, retain) UIColor *offScreenIndicatorColor;
@property (nonatomic, readonly) UIColor *offScreenIndicatorColorStorage;
@property (nonatomic) double offscreenIndicatorAlpha;
@property (nonatomic, readonly) double offscreenIndicatorAlphaStorage;
@property (nonatomic, readonly) struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; } selectedPathRangeStorage;
@property (nonatomic, retain) id seriesDataSourceContext;
@property (nonatomic, readonly) id seriesDataSourceContextStorage;
@property (nonatomic, readonly) NSLock *seriesMutableStateLock;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSArray *titleLegendEntries;
@property (nonatomic, readonly) NSArray *titleLegendEntriesStorage;
@property (nonatomic, readonly) HKValueRange *visibleValueRange;
@property (nonatomic, readonly) HKValueRange *visibleValueRangeStorage;
@property (nonatomic) bool wantsRoundingDuringYRangeExpansion;
@property (nonatomic, readonly) bool wantsRoundingDuringYRangeExpansionStorage;
@property (nonatomic, retain) HKAxis *yAxis;
@property (nonatomic, readonly) HKAxis *yAxisStorage;

+ (void)drawFilledMarkerInContext:(struct CGContext { }*)arg1 color:(struct CGColor { }*)arg2 x:(double)arg3 y:(double)arg4 radius:(double)arg5;
+ (void)drawInnerDotMarkerInContext:(struct CGContext { }*)arg1 outColor:(struct CGColor { }*)arg2 inColor:(struct CGColor { }*)arg3 x:(double)arg4 y:(double)arg5 radius:(double)arg6;

- (void).cxx_destruct;
- (id)UUID;
- (void)_cacheCoordinates:(id)arg1 forBlockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg2;
- (id)_cachedCoordinatesForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg1;
- (bool)_checkInternalDirtyFlag;
- (void)_clearInternalDirtyFlag;
- (id)_clipYAxisValueRangeIfNecessary:(id)arg1;
- (id)_coordinateListsForGeneratorWithXAxis:(id)arg1 zoomScale:(double)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 resolution:(long long)arg5;
- (id)_coordinateListsWithXValueRange:(id)arg1 xAxis:(id)arg2 zoomLevel:(long long)arg3 resolution:(long long)arg4;
- (id)_coordinatesForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg1 xAxis:(id)arg2;
- (id)_dataBlockForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg1;
- (void)_enumeratePathIndexesInValueRange:(id)arg1 zoomLevel:(long long)arg2 resolution:(long long)arg3 block:(id /* block */)arg4;
- (id)_expandYRange:(id)arg1 withXRange:(id)arg2 dateZoom:(long long)arg3 resolution:(long long)arg4 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5;
- (id)_getBlockFromDataSource:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg1;
- (unsigned long long)_mainThreadJoinTimeout;
- (void)_requestDataSourceBlocksFromPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg1 toPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg2;
- (void)_setDirtyWithNewData:(bool)arg1;
- (bool)_setInternalDirtyFlag;
- (id)_visibleXValueRangeWithAxis:(id)arg1 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentOffset:(struct CGPoint { double x1; double x2; })arg3 zoomScale:(double)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forFont:(id)arg2;
- (bool)adjustYAxisForLabels;
- (bool)adjustYAxisForLabelsStorage;
- (bool)allowsSelection;
- (bool)allowsSelectionStorage;
- (double)alpha;
- (double)alphaStorage;
- (id)axisScalingRule;
- (id)axisScalingRuleStorage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backgroundRectFromStringRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forFont:(id)arg2;
- (bool)blockCoordinate:(id)arg1 greaterThan:(id)arg2;
- (bool)blockCoordinate:(id)arg1 lessThan:(id)arg2;
- (bool)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 blockCoordinate:(id)arg2;
- (id)cachedCoordinateListsByBlockPath;
- (id)cachedDataBlocksByBlockPath;
- (void)clearCaches;
- (id)closestXCoordinateRange;
- (id)closestXCoordinateRangeStorage;
- (bool)containsCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 resolution:(long long)arg4 contentOffset:(struct CGPoint { double x1; double x2; })arg5 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })coordinateTransformForChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })coordinateTransformFromXAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)coordinatesForBlock:(id)arg1 blockPath:(struct HKGraphSeriesDataBlockPath { long long x1; long long x2; long long x3; })arg2 xAxis:(id)arg3 yAxis:(id)arg4;
- (id)dataSource;
- (void)dataSourceDidUpdateCache:(id)arg1;
- (id)dataSourceStorage;
- (void)dealloc;
- (id)delegate;
- (id)delegateStorage;
- (void)deselectPath;
- (id)detailLegendEntries;
- (id)detailLegendEntriesStorage;
- (double)distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)distanceFromTouchPoint:(struct CGPoint { double x1; double x2; })arg1 inChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 xAxis:(id)arg3 zoomScale:(double)arg4 resolution:(long long)arg5 contentOffset:(struct CGPoint { double x1; double x2; })arg6 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg7;
- (bool)drawLegendInsideSeries;
- (bool)drawLegendInsideSeriesStorage;
- (void)drawOverlayInContext:(struct CGContext { }*)arg1 seriesOverlayData:(id)arg2;
- (void)drawSeriesWithBlockCoordinates:(id)arg1 axisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomLevelConfiguration:(id)arg3 pointTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 renderContext:(struct CGContext { }*)arg5 secondaryRenderContext:(id)arg6 seriesRenderingDelegate:(id)arg7;
- (void)drawWithChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 seriesCoordinates:(id)arg2 zoomLevelConfiguration:(id)arg3 coordinateTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 inContext:(struct CGContext { }*)arg5 secondaryRenderContext:(id)arg6 seriesRenderingDelegate:(id)arg7;
- (void)enumerateChartPointsInRange:(id)arg1 zoomLevel:(long long)arg2 resolution:(long long)arg3 block:(id /* block */)arg4;
- (void)enumerateCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 resolution:(long long)arg4 contentOffset:(struct CGPoint { double x1; double x2; })arg5 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6 roundToViewScale:(bool)arg7 exclusionOptions:(long long)arg8 block:(id /* block */)arg9;
- (id)findVisibleBlockCoordinatesForChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 resolution:(long long)arg4 contentOffset:(struct CGPoint { double x1; double x2; })arg5 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6;
- (bool)hasAnyDataLoadedInXAxisRange:(id)arg1 dateZoom:(long long)arg2 resolution:(long long)arg3;
- (id)init;
- (bool)internalDirtyFlag;
- (bool)invertYAxis;
- (bool)invertYAxisStorage;
- (bool)isCriticalForAutoscale;
- (bool)isCriticalForAutoscaleStorage;
- (bool)isHighlighted;
- (bool)isRangeHighPriority:(id)arg1;
- (void)layoutOverlayInteractiveViews:(id)arg1 seriesOverlayData:(id)arg2 overlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)marginsForYAxis:(id)arg1 xAxisRange:(id)arg2 zoomLevel:(long long)arg3 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)offScreenIndicatorColor;
- (id)offScreenIndicatorColorStorage;
- (double)offscreenIndicatorAlpha;
- (double)offscreenIndicatorAlphaStorage;
- (id)overlayIdentifier;
- (id)overlayInteractiveViewsWithDelegate:(id)arg1;
- (long long)overlayType;
- (long long)resolutionForTimeScope:(long long)arg1 traitResolution:(long long)arg2;
- (void)selectPathsinPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; })arg1 coordinateRange:(id)arg2;
- (struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; })selectedPathRange;
- (struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; })selectedPathRangeStorage;
- (id)seriesCoordinatesWithXAxis:(id)arg1 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomScale:(double)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 resolution:(long long)arg5;
- (id)seriesDataSourceContext;
- (id)seriesDataSourceContextStorage;
- (id)seriesMutableStateLock;
- (void)setAdjustYAxisForLabels:(bool)arg1;
- (void)setAllowsSelection:(bool)arg1;
- (void)setAlpha:(double)arg1;
- (void)setAxisScalingRule:(id)arg1;
- (void)setCachedCoordinateListsByBlockPath:(id)arg1;
- (void)setCachedDataBlocksByBlockPath:(id)arg1;
- (void)setClosestXCoordinateRange:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDetailLegendEntries:(id)arg1;
- (void)setDrawLegendInsideSeries:(bool)arg1;
- (void)setInvertYAxis:(bool)arg1;
- (void)setIsCriticalForAutoscale:(bool)arg1;
- (void)setOffScreenIndicatorColor:(id)arg1;
- (void)setOffscreenIndicatorAlpha:(double)arg1;
- (void)setSelectedPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_1_1_1; long long x_1_1_2; } x1; struct { struct HKGraphSeriesDataBlockPath { long long x_1_2_1; long long x_1_2_2; long long x_1_2_3; } x_2_1_1; long long x_2_1_2; } x2; })arg1;
- (void)setSeriesDataSourceContext:(id)arg1;
- (void)setTitleLegendEntries:(id)arg1;
- (void)setWantsRoundingDuringYRangeExpansion:(bool)arg1;
- (void)setYAxis:(id)arg1;
- (bool)shouldInvertAxis;
- (bool)supportsMultiTouchSelection;
- (id)titleLegendEntries;
- (id)titleLegendEntriesStorage;
- (bool)untransformedChartPointsForTimeScope:(long long)arg1 resolution:(long long)arg2 range:(id)arg3 completion:(id /* block */)arg4;
- (void)updateForAutoscale:(id)arg1;
- (void)updateLegendsForTimeScope:(long long)arg1 range:(id)arg2 drawingDuringScrolling:(bool)arg3;
- (id)valueRangeForYAxisWithXAxisRange:(id)arg1 dateZoom:(long long)arg2 resolution:(long long)arg3 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)visibleValueRange;
- (id)visibleValueRangeStorage;
- (bool)wantsRoundingDuringYRangeExpansion;
- (bool)wantsRoundingDuringYRangeExpansionStorage;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)xAxisSelectedCoordinate:(double)arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)yAxis;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)yAxisStorage;

@end
