
@interface CADNotificationUtilities : NSObject

+ (int)CADDatabaseGetEventNotificationItemsWithConnection:(id)arg1 afterDate:(id)arg2 forSourceWithExternalIdentifier:(id)arg3 excludingDelegateSources:(bool)arg4 excludingUncheckedCalendars:(bool)arg5 filteredByShowsNotificationsFlag:(bool)arg6 expanded:(bool)arg7 earliestExpirationDate:(id*)arg8 notificationTypes:(id*)arg9 objectIDs:(id*)arg10 occurrenceDates:(id*)arg11 attendeeObjectIDs:(id*)arg12;
+ (id)_attendeeObjectIDsFromNotifications:(id)arg1;
+ (int)_gatherEventInvitationsAndRepliesWithContext:(id)arg1;
+ (int)_gatherSharedCalendarInvitationsWithContext:(id)arg1;
+ (int)_gatherSharedCalendarInviteReplyNotification:(void*)arg1 withContext:(id)arg2 database:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; void *x6; void *x7; struct __CFDictionary {} *x8; struct __CFDictionary {} *x9; struct os_unfair_lock_s { unsigned int x_10_1_1; } x10; unsigned int x11; unsigned int x12; struct __CFArray {} *x13; struct __CFString {} *x14; struct __CFArray {} *x15; int x16; int x17; struct __CFString {} *x18; struct __CFURL {} *x19; struct __CFString {} *x20; struct __CFString {} *x21; unsigned long long x22; int x23; int x24; int x25; id /* block */ x26; struct _opaque_pthread_mutex_t { long long x_27_1_1; BOOL x_27_1_2[56]; } x27; bool x28; struct __CFArray {} *x29; bool x30; struct __CFSet {} *x31; id x32; id x33; id x34; int x35; id x36; id x37; id x38; char *x39; unsigned int x40; unsigned int x41; int x42; bool x43; bool x44; bool x45; bool x46; bool x47; bool x48; bool x49; }*)arg3 databaseID:(int)arg4;
+ (int)_gatherSharedCalendarResourceChangeNotification:(void*)arg1 withContext:(id)arg2 database:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; void *x6; void *x7; struct __CFDictionary {} *x8; struct __CFDictionary {} *x9; struct os_unfair_lock_s { unsigned int x_10_1_1; } x10; unsigned int x11; unsigned int x12; struct __CFArray {} *x13; struct __CFString {} *x14; struct __CFArray {} *x15; int x16; int x17; struct __CFString {} *x18; struct __CFURL {} *x19; struct __CFString {} *x20; struct __CFString {} *x21; unsigned long long x22; int x23; int x24; int x25; id /* block */ x26; struct _opaque_pthread_mutex_t { long long x_27_1_1; BOOL x_27_1_2[56]; } x27; bool x28; struct __CFArray {} *x29; bool x30; struct __CFSet {} *x31; id x32; id x33; id x34; int x35; id x36; id x37; id x38; char *x39; unsigned int x40; unsigned int x41; int x42; bool x43; bool x44; bool x45; bool x46; bool x47; bool x48; bool x49; }*)arg3 databaseID:(int)arg4;
+ (int)_gatherSharedCalendarResponsesAndResourceChangesWithContext:(id)arg1;
+ (int)_gatherSuggestionResourceChangeNotification:(void*)arg1 withContext:(id)arg2 database:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; void *x6; void *x7; struct __CFDictionary {} *x8; struct __CFDictionary {} *x9; struct os_unfair_lock_s { unsigned int x_10_1_1; } x10; unsigned int x11; unsigned int x12; struct __CFArray {} *x13; struct __CFString {} *x14; struct __CFArray {} *x15; int x16; int x17; struct __CFString {} *x18; struct __CFURL {} *x19; struct __CFString {} *x20; struct __CFString {} *x21; unsigned long long x22; int x23; int x24; int x25; id /* block */ x26; struct _opaque_pthread_mutex_t { long long x_27_1_1; BOOL x_27_1_2[56]; } x27; bool x28; struct __CFArray {} *x29; bool x30; struct __CFSet {} *x31; id x32; id x33; id x34; int x35; id x36; id x37; id x38; char *x39; unsigned int x40; unsigned int x41; int x42; bool x43; bool x44; bool x45; bool x46; bool x47; bool x48; bool x49; }*)arg3 databaseID:(int)arg4;
+ (void)_logNotificationCountsForNotifications:(id)arg1;
+ (id)_notificationTypesFromNotifications:(id)arg1;
+ (id)_objectIDsFromNotifications:(id)arg1;
+ (id)_occurrenceDatesFromNotifications:(id)arg1;
+ (bool)_storeIsDelegate:(void*)arg1;
+ (id)_stringForNotificationType:(int)arg1;
+ (id)flattenedNotificationsFromNotifications:(id)arg1 expanded:(bool)arg2;
+ (bool)storeIsReadOnlyDelegate:(void*)arg1;

@end
