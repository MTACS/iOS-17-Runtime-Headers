
@interface HAPAccessoryServerHAP2Adapter : HAPAccessoryServer <HAP2AccessoryDelegate, HAP2AccessoryServerDelegate, HAP2PairedAccessoryServerDelegate, HAP2UnpairedAccessoryServerDelegate, HAP2UnpairedAccessoryServerPairDelegate, HMFTimerDelegate> {
    NSArray * _accessories;
    id /* block */  _authValidationCompletion;
    id /* block */  _authenticateUUIDCompletion;
    HMFTimer * _connectionIdleTimer;
    double  _disconnectOnIdleTimeout;
    bool  _discoverAccessoriesOncePaired;
    bool  _internallyPaired;
    HAP2SerializedOperationQueue * _operationQueue;
    <HAP2PairedAccessoryServer> * _pairedServer;
    <HAP2Cancelable> * _pairingSessionCancelable;
    HAPAccessory * _primaryAccessory;
    HAP2AccessorySessionInfo * _sessionInfo;
    id /* block */  _setupCodeCompletion;
    bool  _skipUserConsent;
    id /* block */  _softwareAuthFinishedCompletion;
    <HAP2UnpairedAccessoryServer> * _unpairedServer;
    id /* block */  _userConsentCompletion;
}

@property (nonatomic, copy) id /* block */ authValidationCompletion;
@property (nonatomic, copy) id /* block */ authenticateUUIDCompletion;
@property (nonatomic, retain) HMFTimer *connectionIdleTimer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property double disconnectOnIdleTimeout;
@property (getter=shouldDiscoverAccessoriesOncePaired, nonatomic) bool discoverAccessoriesOncePaired;
@property (readonly) unsigned long long hash;
@property (getter=isInternallyPaired, nonatomic) bool internallyPaired;
@property (nonatomic, readonly) HAP2SerializedOperationQueue *operationQueue;
@property (nonatomic, retain) <HAP2PairedAccessoryServer> *pairedServer;
@property (readonly) HAPAccessoryPairingRequest *pairingRequest;
@property (nonatomic, retain) <HAP2Cancelable> *pairingSessionCancelable;
@property (nonatomic, retain) HAP2AccessorySessionInfo *sessionInfo;
@property (nonatomic, copy) id /* block */ setupCodeCompletion;
@property (getter=shouldSkipUserConsent, nonatomic) bool skipUserConsent;
@property (nonatomic, copy) id /* block */ softwareAuthFinishedCompletion;
@property (readonly) Class superclass;
@property (nonatomic, retain) <HAP2UnpairedAccessoryServer> *unpairedServer;
@property (nonatomic, copy) id /* block */ userConsentCompletion;

+ (void)initialize;

- (void).cxx_destruct;
- (id)_accessoryFromHAP2Accessory:(id)arg1;
- (void)_continuePairingAfterAuthPromptWithError:(id)arg1;
- (void)_enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id /* block */)arg3 queue:(id)arg4;
- (void)_firedConnectionIdleTimer:(id)arg1;
- (void)_handleConnectionIdleTimeout;
- (void)_handleIncorrectStartPairingCall;
- (bool)_hap2CharacteristicTuplesForHAPCharacteristics:(id)arg1 tuples:(id*)arg2 error:(id*)arg3;
- (id)_hapIdentifierForAccessory:(id)arg1;
- (void)_informDelegateOfUpdatedAccessories:(id)arg1 error:(id)arg2;
- (bool)_isActiveServer:(id)arg1;
- (void)_kickConnectionIdleTimer;
- (void)_notifyDelegatePairingStoppedWithError:(id)arg1;
- (void)_printMissingValues:(id)arg1;
- (void)_readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_resetPairingState;
- (void)_startConnectionIdleTimer;
- (void)_suspendConnectionIdleTimer;
- (void)_writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)accessories;
- (void)accessory:(id)arg1 didNotifyForUpdatedValuesOnCharacteristic:(id)arg2;
- (void)accessoryServer:(id)arg1 authenticateSoftwareAuthUUID:(id)arg2 token:(id)arg3 completion:(id /* block */)arg4;
- (void)accessoryServer:(id)arg1 confirmSoftwareAuthUUID:(id)arg2 token:(id)arg3 completion:(id /* block */)arg4;
- (void)accessoryServer:(id)arg1 didCompleteWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didFailToUpdateAccessoriesWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didFinishAuthWithError:(id)arg2;
- (void)accessoryServer:(id)arg1 didRejectSetupCodeWithBackoffInterval:(double)arg2 completion:(id /* block */)arg3;
- (void)accessoryServer:(id)arg1 doesRequirePermission:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)accessoryServer:(id)arg1 doesRequireSetupCodeWithCompletion:(id /* block */)arg2;
- (void)accessoryServer:(id)arg1 validatePairingCert:(id)arg2 model:(id)arg3 completion:(id /* block */)arg4;
- (void)accessoryServer:(id)arg1 validateSoftwareAuthUUID:(id)arg2 token:(id)arg3 model:(id)arg4 completion:(id /* block */)arg5;
- (void)accessoryServerConnectedWithSecureSession;
- (void)accessoryServerConnectionFailureReportWithError:(id)arg1;
- (void)accessoryServerDidBecomeUnpaired:(id)arg1;
- (void)accessoryServerDidUpdateAccessories:(id)arg1;
- (void)accessoryServerDidUpdateCategory:(id)arg1;
- (void)accessoryServerDidUpdateConnectionState:(id)arg1;
- (void)accessoryServerDidUpdateHasPairings:(id)arg1;
- (void)accessoryServerDidUpdateName:(id)arg1;
- (id)activeServer;
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (id /* block */)authValidationCompletion;
- (void)authenticateAccessory;
- (id /* block */)authenticateUUIDCompletion;
- (id)category;
- (id)clientQueue;
- (void)closeSessions;
- (unsigned long long)configNumber;
- (id)connectionIdleTimer;
- (void)continueAuthAfterValidation:(bool)arg1;
- (void)continuePairingAfterAuthPrompt;
- (void)continuePairingUsingWAC;
- (id)currentIdentity;
- (id)description;
- (void)disconnect;
- (double)disconnectOnIdleTimeout;
- (void)disconnectOnIdleUpdated;
- (void)discoverAccessories;
- (bool)doesPeriodicSessionChecks;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id /* block */)arg3 queue:(id)arg4;
- (id)getSessionInfo;
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;
- (bool)hasAdvertisement;
- (void)identifyWithCompletion:(id /* block */)arg1;
- (id)initWithOperationQueue:(id)arg1 accessoryServer:(id)arg2;
- (id)initWithPairedServer:(id)arg1;
- (id)initWithUnpairedServer:(id)arg1;
- (bool)isInternallyPaired;
- (bool)isPaired;
- (bool)isReachable;
- (bool)isSecuritySessionOpen;
- (long long)linkLayerType;
- (long long)linkType;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (unsigned long long)numActiveSessionClients;
- (bool)onDemandConnectionsAreEnabled;
- (id)operationQueue;
- (id)pairedServer;
- (id)pairingSessionCancelable;
- (id)primaryAccessory;
- (id)productData;
- (void)provisionToken:(id)arg1;
- (id)reachabilityChangedReason;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)sessionCheckInterval;
- (id)sessionInfo;
- (void)setAccessories:(id)arg1;
- (void)setAuthValidationCompletion:(id /* block */)arg1;
- (void)setAuthenticateUUIDCompletion:(id /* block */)arg1;
- (void)setConnectionIdleTimer:(id)arg1;
- (void)setDisconnectOnIdleTimeout:(double)arg1;
- (void)setDiscoverAccessoriesOncePaired:(bool)arg1;
- (void)setInternallyPaired:(bool)arg1;
- (void)setPairedServer:(id)arg1;
- (void)setPairingSessionCancelable:(id)arg1;
- (void)setPrimaryAccessory:(id)arg1;
- (void)setSecuritySessionOpen:(bool)arg1;
- (void)setSessionInfo:(id)arg1;
- (void)setSessionInfoWithNumIPsResolved:(unsigned long long)arg1 numIPsTried:(unsigned long long)arg2 numBonjourNames:(unsigned long long)arg3;
- (void)setSetupCodeCompletion:(id /* block */)arg1;
- (void)setShouldBePaired:(bool)arg1;
- (void)setSkipUserConsent:(bool)arg1;
- (void)setSoftwareAuthFinishedCompletion:(id /* block */)arg1;
- (void)setUnpairedServer:(id)arg1;
- (void)setUserConsentCompletion:(id /* block */)arg1;
- (id /* block */)setupCodeCompletion;
- (id)setupHash;
- (bool)shouldDiscoverAccessoriesOncePaired;
- (bool)shouldSkipUserConsent;
- (id /* block */)softwareAuthFinishedCompletion;
- (void)startPairingWithRequest:(id)arg1;
- (void)startPing;
- (bool)stopPairingWithError:(id*)arg1;
- (void)stopPing;
- (bool)supportsTimedWrite;
- (void)tearDownSessionOnAuthCompletion;
- (void)timerDidFire:(id)arg1;
- (bool)tryPairingPassword:(id)arg1 onboardingSetupPayloadString:(id)arg2 error:(id*)arg3;
- (id)unpairedServer;
- (void)updateActiveDisconnectOnIdleTimeout:(double)arg1;
- (id /* block */)userConsentCompletion;
- (void)validatePairingAuthMethod:(id /* block */)arg1;
- (id)version;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;

@end
