
@interface HAPAccessoryServer : HMFObject {
    NSArray * _accessories;
    unsigned long long  _authMethod;
    bool  _bleLinkConnected;
    NSNumber * _category;
    NSObject<OS_dispatch_queue> * _clientQueue;
    unsigned long long  _compatibilityFeatures;
    unsigned long long  _configNumber;
    NSDate * _connectionStartTime;
    <HAPAccessoryServerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    int  _failedPingCount;
    bool  _hasAdvertisement;
    bool  _hasPairings;
    NSString * _identifier;
    bool  _incompatibleUpdate;
    NSObject<OS_dispatch_queue> * _internalDelegateQueue;
    NSHashTable * _internalDelegates;
    HAPKeyBag * _keyBag;
    <HAPKeyStore> * _keyStore;
    long long  _linkLayerType;
    long long  _linkType;
    NSMutableDictionary * _localPairingMetricDictionary;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    unsigned long long  _metric_pairVerifyDurationInMS;
    NSString * _metric_pairVerifyReason;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _metriclock;
    NSString * _name;
    NSNumber * _nodeID;
    NSHashTable * _notificationClients;
    unsigned long long  _pairSetupType;
    HMFActivity * _pairingActivity;
    HAPAccessoryPairingRequest * _pairingRequest;
    unsigned long long  _pendingRemovePairing;
    HAPAccessory * _primaryAccessory;
    NSString * _productData;
    NSNumber * _productID;
    NSString * _reachabilityChangedReason;
    bool  _reachabilityPingEnabled;
    bool  _reachable;
    NSData * _rootPublicKey;
    bool  _securitySessionOpen;
    bool  _sessionRestoreActive;
    NSData * _setupHash;
    bool  _shouldDisconnectOnIdle;
    unsigned long long  _stateNumber;
    int  _successfulPingCount;
    bool  _supportsTimedWrite;
    bool  _supportsUnreachablePing;
    HAPSuspendedAccessory * _suspendedAccessory;
    bool  _unitTest_useHH2;
    NSNumber * _vendorID;
    HMFVersion * _version;
    unsigned long long  _wakeNumber;
}

@property (nonatomic, copy) NSArray *accessories;
@property (nonatomic) unsigned long long authMethod;
@property (getter=isBLELinkConnected, nonatomic, readonly) bool bleLinkConnected;
@property (nonatomic, copy) NSNumber *category;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *clientQueue;
@property (readonly, copy) NSUUID *commissioningID;
@property (readonly) long long communicationProtocol;
@property (nonatomic) unsigned long long compatibilityFeatures;
@property (nonatomic) unsigned long long configNumber;
@property (nonatomic, copy) NSDate *connectionStartTime;
@property (readonly) <HAPAccessoryServerDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) HAPDeviceID *deviceID;
@property (nonatomic) int failedPingCount;
@property bool hasAdvertisement;
@property (nonatomic) bool hasPairings;
@property (nonatomic, copy) NSString *identifier;
@property (getter=isIncompatibleUpdate, nonatomic) bool incompatibleUpdate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *internalDelegateQueue;
@property (nonatomic, readonly) NSHashTable *internalDelegates;
@property (nonatomic, retain) HAPKeyBag *keyBag;
@property (nonatomic, readonly) <HAPKeyStore> *keyStore;
@property (getter=isKnownToSystemCommissioner, readonly) bool knownToSystemCommissioner;
@property (nonatomic, readonly) long long linkLayerType;
@property (nonatomic, readonly) long long linkType;
@property (nonatomic, retain) NSMutableDictionary *localPairingMetricDictionary;
@property unsigned long long metric_pairVerifyDurationInMS;
@property (nonatomic, copy) NSString *metric_pairVerifyReason;
@property (nonatomic, copy) NSString *name;
@property (readonly, copy) NSNumber *nodeID;
@property (nonatomic, retain) NSHashTable *notificationClients;
@property (nonatomic) unsigned long long pairSetupType;
@property (nonatomic) HMFActivity *pairingActivity;
@property (nonatomic, readonly) NSDictionary *pairingMetricDictionary;
@property (nonatomic, retain) HAPAccessoryPairingRequest *pairingRequest;
@property (nonatomic) unsigned long long pendingRemovePairing;
@property (nonatomic, retain) HAPAccessory *primaryAccessory;
@property (nonatomic, retain) NSString *productData;
@property (readonly, copy) NSNumber *productID;
@property (nonatomic, copy) NSString *reachabilityChangedReason;
@property (nonatomic) bool reachabilityPingEnabled;
@property (getter=isReachable, nonatomic) bool reachable;
@property (readonly, copy) NSData *rootPublicKey;
@property (getter=isSecuritySessionOpen) bool securitySessionOpen;
@property (getter=isSessionRestoreActive, setter=setSessionRestoreActive:, nonatomic) bool sessionRestoreActive;
@property (nonatomic, copy) NSData *setupHash;
@property bool shouldDisconnectOnIdle;
@property (nonatomic) unsigned long long stateNumber;
@property (nonatomic) int successfulPingCount;
@property (nonatomic) bool supportsTimedWrite;
@property bool supportsUnreachablePing;
@property (nonatomic, retain) HAPSuspendedAccessory *suspendedAccessory;
@property bool unitTest_useHH2;
@property (readonly, copy) NSNumber *vendorID;
@property (copy) HMFVersion *version;
@property (nonatomic) unsigned long long wakeNumber;

- (void).cxx_destruct;
- (id)accessories;
- (void)addInternalDelegate:(id)arg1;
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)associateAccessoryWithControllerKey:(id)arg1 usingAccessoryPublicKey:(id)arg2;
- (void)associateAccessoryWithControllerKeyUsingAccessoryIdentifier:(id)arg1;
- (void)associateAccessoryWithControllerKeyUsingAccessoryPublicKey:(id)arg1;
- (unsigned long long)authMethod;
- (void)authenticateAccessory;
- (id)buildReachabilityNotificationDictionary:(id)arg1 reachable:(bool)arg2 linkType:(long long)arg3 withError:(long long)arg4;
- (id)category;
- (void)clearPairingMetrics;
- (id)clientQueue;
- (id)commissioningID;
- (long long)communicationProtocol;
- (unsigned long long)compatibilityFeatures;
- (unsigned long long)configNumber;
- (id)connectionStartTime;
- (void)continueAuthAfterValidation:(bool)arg1;
- (void)continuePairingAfterAuthPrompt;
- (void)continuePairingUsingWAC;
- (id)delegate;
- (id)delegateQueue;
- (id)deviceID;
- (void)disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier:(id)arg1;
- (void)disconnect;
- (void)disconnectOnIdleUpdated;
- (void)disconnectWithError:(id)arg1;
- (void)discoverAccessories;
- (bool)doesPeriodicSessionChecks;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id /* block */)arg3 queue:(id)arg4;
- (void)enumerateInternalDelegatesUsingBlock:(id /* block */)arg1;
- (int)failedPingCount;
- (id)getControllerPairingIdentityWithError:(id*)arg1;
- (id)getControllerUserName;
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;
- (bool)hasAdvertisement;
- (bool)hasPairings;
- (id)identifier;
- (void)identifyWithCompletion:(id /* block */)arg1;
- (void)incrementFailedPing;
- (void)incrementSuccessfulPing;
- (id)init;
- (id)initWithKeystore:(id)arg1;
- (void)initializeKeyBagIfNecessary;
- (id)internalDelegateQueue;
- (id)internalDelegates;
- (bool)isAccessoryAssociatedWithControllerKey:(id)arg1;
- (bool)isBLELinkConnected;
- (bool)isIncompatibleUpdate;
- (bool)isKnownToSystemCommissioner;
- (bool)isPaired;
- (bool)isPinging;
- (bool)isReachable;
- (bool)isSecuritySessionOpen;
- (bool)isSessionRestoreActive;
- (id)keyBag;
- (id)keyStore;
- (long long)linkLayerType;
- (long long)linkType;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)localPairingMetricDictionary;
- (id)logIdentifier;
- (bool)matchesSetupID:(id)arg1;
- (bool)matchesSetupID:(id)arg1 serverIdentifier:(id)arg2;
- (unsigned long long)metric_pairVerifyDurationInMS;
- (id)metric_pairVerifyReason;
- (id)name;
- (id)nodeID;
- (id)notificationClients;
- (bool)notifyClients:(unsigned long long)arg1 withDictionary:(id)arg2;
- (unsigned long long)numActiveSessionClients;
- (unsigned long long)pairSetupType;
- (id)pairingActivity;
- (id)pairingMetricDictionary;
- (id)pairingRequest;
- (unsigned long long)pendingRemovePairing;
- (bool)pingSupported;
- (id)primaryAccessory;
- (id)productData;
- (id)productID;
- (void)provisionToken:(id)arg1;
- (id)reachabilityChangedReason;
- (bool)reachabilityPingEnabled;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)reconfirm;
- (void)refreshKeyBag;
- (void)registerForNotifications:(id)arg1;
- (void)removeInternalDelegate:(id)arg1;
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)removePairingIdentifier:(id)arg1 pairingPublicKey:(id)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (bool)requiresTimedWrite:(id)arg1;
- (id)rootPublicKey;
- (void)securitySessionWillCloseWithResponseData:(id)arg1 error:(id*)arg2;
- (unsigned long long)sessionCheckInterval;
- (void)setAccessories:(id)arg1;
- (void)setAuthMethod:(unsigned long long)arg1;
- (void)setCategory:(id)arg1;
- (void)setCompatibilityFeatures:(unsigned long long)arg1;
- (void)setConfigNumber:(unsigned long long)arg1;
- (void)setConnectionStartTime:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setFailedPingCount:(int)arg1;
- (void)setHasAdvertisement:(bool)arg1;
- (void)setHasPairings:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIncompatibleUpdate:(bool)arg1;
- (void)setKeyBag:(id)arg1;
- (void)setLocalPairingMetricDictionary:(id)arg1;
- (void)setMetric_pairVerifyDurationInMS:(unsigned long long)arg1;
- (void)setMetric_pairVerifyReason:(id)arg1;
- (void)setName:(id)arg1;
- (void)setNotificationClients:(id)arg1;
- (void)setPairSetupType:(unsigned long long)arg1;
- (void)setPairingActivity:(id)arg1;
- (void)setPairingMetricWithKey:(id)arg1 value:(id)arg2;
- (void)setPairingRequest:(id)arg1;
- (void)setPendingRemovePairing:(unsigned long long)arg1;
- (void)setPrimaryAccessory:(id)arg1;
- (void)setProductData:(id)arg1;
- (void)setReachabilityChangedReason:(id)arg1;
- (void)setReachabilityPingEnabled:(bool)arg1;
- (void)setReachable:(bool)arg1;
- (void)setSecuritySessionOpen:(bool)arg1;
- (void)setSessionRestoreActive:(bool)arg1;
- (void)setSetupHash:(id)arg1;
- (void)setShouldDisconnectOnIdle:(bool)arg1;
- (void)setStateNumber:(unsigned long long)arg1;
- (void)setSuccessfulPingCount:(int)arg1;
- (void)setSupportsTimedWrite:(bool)arg1;
- (void)setSupportsUnreachablePing:(bool)arg1;
- (void)setSuspendedAccessory:(id)arg1;
- (void)setUnitTest_useHH2:(bool)arg1;
- (void)setVersion:(id)arg1;
- (void)setWakeNumber:(unsigned long long)arg1;
- (id)setupHash;
- (id)shortDescription;
- (bool)shouldDisconnectOnIdle;
- (bool)shouldRetryPVDueToAuthenticationError:(id)arg1;
- (void)startPairingWithConsentRequired:(bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;
- (void)startPairingWithRequest:(id)arg1;
- (void)startPing;
- (unsigned long long)stateNumber;
- (bool)stopPairingWithError:(id*)arg1;
- (void)stopPing;
- (void)submitPairVerifyMetricWithError:(id)arg1;
- (int)successfulPingCount;
- (bool)supportsTimedWrite;
- (bool)supportsUnreachablePing;
- (id)suspendedAccessory;
- (void)tearDownSessionOnAuthCompletion;
- (bool)tryPairingPassword:(id)arg1 onboardingSetupPayloadString:(id)arg2 error:(id*)arg3;
- (bool)unitTest_useHH2;
- (void)unregisterForNotifications:(id)arg1;
- (void)updateAccessoryInfoDictionary:(id)arg1;
- (void)updateActiveDisconnectOnIdleTimeout:(double)arg1;
- (bool)useHH2;
- (void)validatePairingAuthMethod:(id /* block */)arg1;
- (id)vendorID;
- (id)version;
- (unsigned long long)wakeNumber;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;

@end
