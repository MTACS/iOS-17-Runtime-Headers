
@interface VKKeyboardCameraViewController : UIViewController <VKAVCaptureFrameProviderDelegate, VKCaptureTextAnalysisRequestDelegate, VKTextLiftingViewDelegate> {
    VKKeyboardCameraCloseButton * _closeButton;
    VKRecognizedText * _closestItem;
    NSMutableArray * _dataForRadar;
    <VKKeyboardCameraViewControllerDelegate> * _delegate;
    bool  _didDismiss;
    bool  _didOverrideComparisonPoint;
    bool  _didSetInitialComparisonPoint;
    VKFeedbackProvider * _feedbackProvider;
    VKAVCaptureFrameProvider * _frameProvider;
    VKKeyboardCameraGuidanceView * _guidanceView;
    UIView * _hitTestView;
    VKHomographyFrameProcessor * _homographyProcessor;
    double  _initialPinchZoom;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _initialRecordingTimestamp;
    VKKeyboardCameraInsertButton * _insertButton;
    bool  _isPinchToZoomInProgress;
    bool  _isTextLifted;
    VKImageAnalysisButton * _liftTextButton;
    NSString * _liftedString;
    VKTextWithTrackingFrameProcessor * _optFlowTextProcessor;
    UIPinchGestureRecognizer * _pinchGestureRecognizer;
    NSString * _previousString;
    bool  _recording;
    VKKeyboardCameraReticleView * _reticleView;
    UITapGestureRecognizer * _tapGestureRecognizer;
    VKCaptureTextAnalyzer * _textAnalyzer;
    NSString * _textContentType;
    VKTextLiftingView * _textLiftingView;
    VKTextFrameProcessor * _textProcessor;
    NSTimer * _timeWithoutTextTimer;
}

@property (nonatomic, retain) VKKeyboardCameraCloseButton *closeButton;
@property (nonatomic, retain) VKRecognizedText *closestItem;
@property (nonatomic, retain) NSMutableArray *dataForRadar;
@property (nonatomic, readonly) unsigned long long dataType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKKeyboardCameraViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didDismiss;
@property (nonatomic) bool didOverrideComparisonPoint;
@property (nonatomic) bool didSetInitialComparisonPoint;
@property (nonatomic, retain) VKFeedbackProvider *feedbackProvider;
@property (nonatomic, retain) VKAVCaptureFrameProvider *frameProvider;
@property (nonatomic, retain) VKKeyboardCameraGuidanceView *guidanceView;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIView *hitTestView;
@property (nonatomic, retain) VKHomographyFrameProcessor *homographyProcessor;
@property (nonatomic) double initialPinchZoom;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } initialRecordingTimestamp;
@property (nonatomic, retain) VKKeyboardCameraInsertButton *insertButton;
@property (nonatomic) bool isPinchToZoomInProgress;
@property (nonatomic) bool isTextLifted;
@property (nonatomic, retain) VKImageAnalysisButton *liftTextButton;
@property (nonatomic, retain) NSString *liftedString;
@property (nonatomic, retain) VKTextWithTrackingFrameProcessor *optFlowTextProcessor;
@property (nonatomic, retain) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (nonatomic, retain) NSString *previousString;
@property (getter=isRecording, nonatomic) bool recording;
@property (nonatomic, retain) VKKeyboardCameraReticleView *reticleView;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic, retain) VKCaptureTextAnalyzer *textAnalyzer;
@property (nonatomic) NSString *textContentType;
@property (nonatomic, retain) VKTextLiftingView *textLiftingView;
@property (nonatomic, retain) VKTextFrameProcessor *textProcessor;
@property (nonatomic, retain) NSTimer *timeWithoutTextTimer;

+ (bool)isOpticalFlowForTextEnabled;

- (void).cxx_destruct;
- (bool)_canShowWhileLocked;
- (void)addButtons;
- (void)animate:(id /* block */)arg1;
- (void)animateAlongsideFadeOutForTextLiftingView:(id)arg1;
- (void)animateAlongsideTextLiftingForView:(id)arg1;
- (void)cancelTimeWithoutTextTimer;
- (void)clearFoundItemAndRemoveLiftTextButton:(bool)arg1;
- (id)closeButton;
- (id)closestItem;
- (void)configureConstraints;
- (id)dataForRadar;
- (unsigned long long)dataType;
- (void)dealloc;
- (id)delegate;
- (bool)didDismiss;
- (void)didEndPinchToZoom;
- (bool)didOverrideComparisonPoint;
- (bool)didSetInitialComparisonPoint;
- (void)dismissLiftedText;
- (void)fadeOutAnimationDidEndForView:(id)arg1;
- (id)feedbackProvider;
- (id)findTextLocalizedStringKey;
- (id)frameProvider;
- (void)frameProvider:(id)arg1 didChangeSceneStabilityState:(unsigned long long)arg2;
- (id)guidanceView;
- (id)hitTestView;
- (id)homographyProcessor;
- (id)init;
- (double)initialPinchZoom;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })initialRecordingTimestamp;
- (id)insertButton;
- (bool)isPinchToZoomInProgress;
- (bool)isRecording;
- (bool)isTextLifted;
- (id)liftTextButton;
- (void)liftTextIfPossible;
- (void)liftTextWithCompletion:(id /* block */)arg1;
- (bool)liftTextWithSnapshot:(id)arg1;
- (id)liftedString;
- (void)loadView;
- (void)onCancel;
- (void)onInsert;
- (void)onLiftTextButton:(id)arg1;
- (void)onPinch:(id)arg1;
- (void)onSelectionChanged:(id)arg1;
- (void)onTap:(id)arg1;
- (id)optFlowTextProcessor;
- (id)pinchGestureRecognizer;
- (id)previousString;
- (void)request:(id)arg1 didDetectTextWithResult:(id)arg2;
- (void)request:(id)arg1 didFailWithError:(id)arg2;
- (void)request:(id)arg1 didRecgonizeTextWithAnalysis:(id)arg2;
- (void)requestDidCancel:(id)arg1;
- (void)resetToDefaultComparisonPoint;
- (id)reticleView;
- (void)setCloseButton:(id)arg1;
- (void)setClosestItem:(id)arg1;
- (void)setDataForRadar:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidDismiss:(bool)arg1;
- (void)setDidOverrideComparisonPoint:(bool)arg1;
- (void)setDidSetInitialComparisonPoint:(bool)arg1;
- (void)setFeedbackProvider:(id)arg1;
- (void)setFrameProvider:(id)arg1;
- (void)setGuidanceView:(id)arg1;
- (void)setHitTestView:(id)arg1;
- (void)setHomographyProcessor:(id)arg1;
- (void)setInitialPinchZoom:(double)arg1;
- (void)setInitialRecordingTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setInsertButton:(id)arg1;
- (void)setIsPinchToZoomInProgress:(bool)arg1;
- (void)setIsTextLifted:(bool)arg1;
- (void)setLiftTextButton:(id)arg1;
- (void)setLiftedString:(id)arg1;
- (void)setOptFlowTextProcessor:(id)arg1;
- (void)setPinchGestureRecognizer:(id)arg1;
- (void)setPreviousString:(id)arg1;
- (void)setRecording:(bool)arg1;
- (void)setReticleView:(id)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setTextAnalyzer:(id)arg1;
- (void)setTextContentType:(id)arg1;
- (void)setTextLiftingView:(id)arg1;
- (void)setTextProcessor:(id)arg1;
- (void)setTimeWithoutTextTimer:(id)arg1;
- (void)startTimeWithoutTextTimer;
- (id)tapGestureRecognizer;
- (id)textAnalyzer;
- (id)textContentType;
- (void)textLiftingAnimationDidEndForView:(id)arg1;
- (id)textLiftingView;
- (id)textProcessor;
- (void)textProcessorResult:(id)arg1;
- (id)timeWithoutTextTimer;
- (void)updateInsertButtonWithRecognizedString:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)willBeginPinchToZoom;

@end
