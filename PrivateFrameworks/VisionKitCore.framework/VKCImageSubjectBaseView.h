
@interface VKCImageSubjectBaseView : VKCImageBaseOverlayView {
    UIImage * __cachedSubject;
    NSIndexSet * __cachedSubjectIndexSet;
    NSIndexSet * _activeGlowLayerIndexSet;
    NSObject<OS_dispatch_queue> * _backgroundQueue;
    <VKCImageSubjectBaseViewDelegate> * _baseSubjectDelegate;
    NSValue * _burstPoint;
    CALayer * _colorLayer;
    UIImage * _customImageForRemoveBackground;
    VKCImageSubjectGlowLayer * _glowLayer;
    bool  _glowLayerActive;
    CALayer * _imageHighlightLayer;
    CALayer * _imageHighlightLayerContainer;
    CALayer * _imageHighlightLayerContainerShadow;
    CALayer * _imageHighlightLayerMask;
    long long  _imageOrientation;
    CAShapeLayer * _intersectionMask;
    unsigned long long  _loadMaskIndex;
    unsigned long long  _loadMaskRequestStatus;
    CIContext * _maskLoadContext;
    CAPackage * _pulsePackage;
    VKCRemoveBackgroundRequestHandler * _removeBackgroundRequestHandler;
    VKCImageSubjectContext * _subjectContext;
    bool  _subjectHighlightFeatureFlagEnabled;
    <UITraitChangeRegistration> * _traitChangeRegistration;
    bool  _usesLightDimmingViewInLightMode;
}

@property (retain) UIImage *_cachedSubject;
@property (retain) NSIndexSet *_cachedSubjectIndexSet;
@property (nonatomic, copy) NSIndexSet *activeGlowLayerIndexSet;
@property (nonatomic, copy) NSIndexSet *activeSubjectIndexSet;
@property (nonatomic, readonly) NSIndexSet *allSubjectsIndexSet;
@property (nonatomic, readonly) VKCImageAnalysisResult *analysisResult;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *backgroundQueue;
@property (nonatomic) <VKCImageSubjectBaseViewDelegate> *baseSubjectDelegate;
@property (nonatomic, retain) NSValue *burstPoint;
@property (nonatomic, retain) CALayer *colorLayer;
@property (nonatomic, retain) UIImage *customImageForRemoveBackground;
@property (nonatomic, retain) VKCImageSubjectGlowLayer *glowLayer;
@property (nonatomic) bool glowLayerActive;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } imageBounds;
@property (nonatomic, retain) CALayer *imageHighlightLayer;
@property (nonatomic, retain) CALayer *imageHighlightLayerContainer;
@property (nonatomic, retain) CALayer *imageHighlightLayerContainerShadow;
@property (nonatomic, retain) CALayer *imageHighlightLayerMask;
@property (nonatomic) long long imageOrientation;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } imageSize;
@property (nonatomic, retain) CAShapeLayer *intersectionMask;
@property (nonatomic, readonly) bool isLivePhoto;
@property (nonatomic) unsigned long long loadMaskIndex;
@property (nonatomic) unsigned long long loadMaskRequestStatus;
@property (retain) CIContext *maskLoadContext;
@property (nonatomic, readonly) UIBezierPath *normalizedSubjectPath;
@property (nonatomic, readonly) CALayer *pulseLayer;
@property (nonatomic, retain) CAPackage *pulsePackage;
@property (nonatomic, retain) VKCRemoveBackgroundRequestHandler *removeBackgroundRequestHandler;
@property (nonatomic, retain) VKCImageSubjectContext *subjectContext;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } subjectFrame;
@property (nonatomic) bool subjectHighlightFeatureFlagEnabled;
@property (nonatomic, readonly) UIBezierPath *subjectPathInBoundsCoordinates;
@property (nonatomic, retain) <UITraitChangeRegistration> *traitChangeRegistration;
@property (nonatomic) bool usesLightDimmingViewInLightMode;

- (void).cxx_destruct;
- (id)_cachedSubject;
- (id)_cachedSubjectIndexSet;
- (void)_loadSubjectMaskIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)_updateForImageBoundsChange;
- (id)activeGlowLayerIndexSet;
- (id)activeSubjectIndexSet;
- (id)allSubjectsIndexSet;
- (id)analysisResult;
- (id)backgroundQueue;
- (id)baseSubjectDelegate;
- (void)beginImageSubjectAnalysisIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)beginImageSubjectAnalysisWithDelayIfNecessary;
- (id)burstPoint;
- (id)cachedSubjectForIndexSet:(id)arg1;
- (void)clearCachedSubject;
- (id)colorLayer;
- (void)configureMaskForCurrentSubjectContextWithLayer:(id)arg1 animated:(bool)arg2;
- (void)configurePulseAnimationWithViewScale:(double)arg1;
- (void)configureSubjectLiftAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)convertNormalizedPathToBoundsCoordinates:(id)arg1;
- (id)customImageForRemoveBackground;
- (id)glowLayer;
- (bool)glowLayerActive;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageBounds;
- (id)imageHighlightLayer;
- (id)imageHighlightLayerContainer;
- (id)imageHighlightLayerContainerShadow;
- (id)imageHighlightLayerMask;
- (long long)imageOrientation;
- (struct CGSize { double x1; double x2; })imageSize;
- (id)imageSubjectPathWithIndexes:(id)arg1;
- (id)indexOfSubjectAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)intersectionMask;
- (bool)isLivePhoto;
- (void)loadImageSubjectIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)loadImageSubjectWithIndexes:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)loadMaskIndex;
- (unsigned long long)loadMaskRequestStatus;
- (id)loadPulsePackage;
- (void)loadSubjectMaskIfNecessary;
- (void)loadSubjectMaskIfNecessaryWithCompletion:(id /* block */)arg1;
- (id)maskLoadContext;
- (id)normalizedSubjectPath;
- (id)opacityAnimationFromValue:(double)arg1 toValue:(double)arg2;
- (id)pulseLayer;
- (id)pulsePackage;
- (id)removeBackgroundRequestHandler;
- (void)sendSubjectAnalyticsEventWithEventType:(long long)arg1 interactionType:(long long)arg2 subjectFound:(bool)arg3 processingDuration:(double)arg4;
- (void)setActiveGlowLayerIndexSet:(id)arg1;
- (void)setActiveSubjectIndexSet:(id)arg1;
- (void)setActiveSubjectIndexSet:(id)arg1 animated:(bool)arg2;
- (void)setBackgroundQueue:(id)arg1;
- (void)setBaseSubjectDelegate:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBurstPoint:(id)arg1;
- (void)setCachedSubject:(id)arg1 forIndexSet:(id)arg2;
- (void)setColorLayer:(id)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCustomImageForRemoveBackground:(id)arg1;
- (void)setGlowLayer:(id)arg1;
- (void)setGlowLayerActive:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setImageHighlightLayer:(id)arg1;
- (void)setImageHighlightLayerContainer:(id)arg1;
- (void)setImageHighlightLayerContainerShadow:(id)arg1;
- (void)setImageHighlightLayerMask:(id)arg1;
- (void)setImageOrientation:(long long)arg1;
- (void)setIntersectionMask:(id)arg1;
- (void)setLoadMaskIndex:(unsigned long long)arg1;
- (void)setLoadMaskRequestStatus:(unsigned long long)arg1;
- (void)setMaskLoadContext:(id)arg1;
- (void)setPulsePackage:(id)arg1;
- (void)setRecognitionResult:(id)arg1;
- (void)setRemoveBackgroundRequestHandler:(id)arg1;
- (void)setSubjectContext:(id)arg1;
- (void)setSubjectHighlightFeatureFlagEnabled:(bool)arg1;
- (void)setTraitChangeRegistration:(id)arg1;
- (void)setUsesLightDimmingViewInLightMode:(bool)arg1;
- (void)set_cachedSubject:(id)arg1;
- (void)set_cachedSubjectIndexSet:(id)arg1;
- (void)showPulseAnimationWithViewScale:(double)arg1;
- (id)subjectContext;
- (bool)subjectExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })subjectFrame;
- (bool)subjectHighlightFeatureFlagEnabled;
- (id)subjectPathInBoundsCoordinates;
- (id)traitChangeRegistration;
- (void)updateDimmingColorForAppearance;
- (void)updateForImageBoundsChangeIfNecessary;
- (void)updateGlowLayerForActiveSubjectIndexSet;
- (void)updateMaskForCurrentSubjectIndexesAnimated:(bool)arg1;
- (bool)usesLightDimmingViewInLightMode;

@end
