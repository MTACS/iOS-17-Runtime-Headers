
@interface PGPlaybackState : NSObject <NSCopying, PGMutablePlaybackState, PGMutablePlaybackStateFaceTimeSupport, PGMutablePlaybackStateSecurityCameraSupport, PGPlaybackStateDiffConsumer> {
    NSMutableDictionary * _mutableDictionary;
    PGPlaybackStatePrerollAttributes * _prerollAttributes;
}

@property (nonatomic, readonly) long long backgroundAudioPolicy;
@property (getter=isCameraActive, nonatomic) bool cameraActive;
@property (nonatomic) bool cameraHasMicrophone;
@property (nonatomic) bool canSwitchCamera;
@property (nonatomic, readonly) double contentDuration;
@property (nonatomic, readonly) long long contentType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSDictionary *dictionaryRepresentation;
@property (nonatomic) bool disablesLayerCloning;
@property (nonatomic, readonly) double elapsedTime;
@property (nonatomic, readonly) bool hasInvalidTiming;
@property (readonly) unsigned long long hash;
@property (getter=isMicrophoneMuted, nonatomic) bool microphoneMuted;
@property (nonatomic, readonly) NSMutableDictionary *mutableDictionary;
@property (getter=isMuted, nonatomic, readonly) bool muted;
@property (nonatomic, readonly) double normalizedProgress;
@property (nonatomic, readonly) double playbackRate;
@property (nonatomic, readonly) PGPlaybackStatePrerollAttributes *prerollAttributes;
@property (nonatomic, readonly) bool requiresLinearPlayback;
@property (getter=isRoutingVideoToHostedWindow, nonatomic, readonly) bool routingVideoToHostedWindow;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsFaceTimeActions;
@property (nonatomic, readonly) bool supportsMicroPIP;
@property (nonatomic, readonly) long long timeControlStatus;

+ (id)defaultValueForKey:(id)arg1;
+ (id)keysForEqualityOfNumberValues;

- (void).cxx_destruct;
- (bool)_boolForKey:(long long)arg1;
- (id)_dictionaryForKey:(long long)arg1;
- (double)_doubleForKey:(long long)arg1;
- (void)_ensureMutableDictionary;
- (long long)_integerForKey:(long long)arg1;
- (id)_numberForKey:(long long)arg1;
- (void)_setBool:(bool)arg1 forKey:(long long)arg2;
- (void)_setDictionaryOrNotFound:(id)arg1 forKey:(long long)arg2;
- (void)_setDouble:(double)arg1 forKey:(long long)arg2;
- (void)_setInteger:(long long)arg1 forKey:(long long)arg2;
- (void)_setStateValue:(id)arg1 forKey:(long long)arg2;
- (id)_stringForKey:(long long)arg1;
- (double)anchorContentTime;
- (double)anchorWallTime;
- (void)appendDescriptionForKey:(long long)arg1 value:(id)arg2 toBuilder:(id)arg3;
- (long long)backgroundAudioPolicy;
- (bool)cameraHasMicrophone;
- (bool)canSwitchCamera;
- (double)contentDuration;
- (long long)contentType;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)dictionaryRepresentation;
- (id)diffFromPlaybackState:(id)arg1;
- (bool)disablesLayerCloning;
- (double)elapsedTime;
- (bool)hasInvalidTiming;
- (id)initWithDictionary:(id)arg1;
- (bool)isCameraActive;
- (bool)isEqual:(id)arg1;
- (bool)isEquivalentToPlaybackState:(id)arg1;
- (bool)isMicrophoneMuted;
- (bool)isMuted;
- (bool)isRoutingVideoToHostedWindow;
- (id)mutableDictionary;
- (double)normalizedProgress;
- (double)playbackRate;
- (id)prerollAttributes;
- (bool)requiresLinearPlayback;
- (void)setBackgroundAudioPolicy:(long long)arg1;
- (void)setCameraActive:(bool)arg1;
- (void)setCameraHasMicrophone:(bool)arg1;
- (void)setCanSwitchCamera:(bool)arg1;
- (void)setContentDuration:(double)arg1;
- (void)setContentType:(long long)arg1;
- (void)setDisablesLayerCloning:(bool)arg1;
- (void)setMicrophoneMuted:(bool)arg1;
- (void)setMuted:(bool)arg1;
- (void)setPlaybackRate:(double)arg1 elapsedTime:(double)arg2 timeControlStatus:(long long)arg3;
- (void)setPrerollAttributes:(id)arg1;
- (void)setRequiresLinearPlayback:(bool)arg1;
- (void)setRoutingVideoToHostedWindow:(bool)arg1;
- (void)setSupportsFaceTimeActions:(bool)arg1;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (bool)supportsFaceTimeActions;
- (bool)supportsMicroPIP;
- (long long)timeControlStatus;
- (void)updatePlaybackStateWithDiff:(id)arg1;

@end
