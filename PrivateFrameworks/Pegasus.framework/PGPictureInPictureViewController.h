
@interface PGPictureInPictureViewController : UIViewController <PGCommandHandler, PGPlaybackStateDiffConsumer, PTSettingsKeyPathObserver, UIPointerInteractionDelegate> {
    <PGPictureInPictureAnalyticsDelegate> * _analyticsDelegate;
    NSUUID * _analyticsSessionUUID;
    NSUUID * _analyticsSourceUUID;
    PGPictureInPictureApplication * _application;
    PGPictureInPictureViewControllerBackgroundView * _backgroundView;
    bool  _canStartShowingChrome;
    UIView * _containerView;
    PGPictureInPictureViewControllerClippingView * _contentClippingView;
    <PGPictureInPictureViewControllerContentContainer> * _contentContainer;
    struct { 
        unsigned int prepareStopAnimationWithCompletionHandler : 1; 
        unsigned int acquireInterfaceOrientationLock : 1; 
        unsigned int relinquishInterfaceOrientationLock : 1; 
        unsigned int handleTapWhileStashedGesture : 1; 
        unsigned int handleDoubleTapGesture : 1; 
        unsigned int performRotateAnimationWithRotation : 1; 
    }  _contentContainerRespondsTo;
    PGLayerHostView * _contentView;
    PGControlsContainerView * _controlsContainerView;
    long long  _controlsStyle;
    double  _currentContentCornerRadius;
    <PGPictureInPictureViewControllerDelegate> * _delegate;
    PGHostedWindowHostingHandle * _hostedWindowHostingHandle;
    unsigned long long  _inFlightStashProgressAnimationIdentifier;
    unsigned long long  _inFlightStashTabAnimationIdentifier;
    bool  _initialLayerFrameIsNull;
    bool  _interactivelyResizing;
    bool  _isMicroPIP;
    bool  _isShowingChrome;
    bool  _isSuspended;
    PGPortalView * _leftSideContentPortalView;
    NSArray * _menuItems;
    PGHostedWindowHostingHandle * _microPIPHostedWindowHostingHandle;
    struct CGSize { 
        double width; 
        double height; 
    }  _microPIPSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumStashTabSize;
    UIPointerInteraction * _pointerInteraction;
    bool  _portalsWereActive;
    bool  _portalsWereActiveLeft;
    struct CGSize { 
        double width; 
        double height; 
    }  _preferredContentSize;
    bool  _prefersHiddenFromClonedDisplay;
    bool  _prefersIdleTimerDisabled;
    bool  _prefersStashTabSuppressed;
    PGPortalView * _rightSideContentPortalView;
    PGMobilePIPSettings * _settings;
    UIView * _shadowView;
    bool  _shouldDisablePointerInteraction;
    NSString * _sourceSceneSessionPersistentIdentifier;
    bool  _startedAutomatically;
    PGStashedMaskView * _stashMaskView;
    bool  _stashTabHidden;
    bool  _stashTabShownLeft;
    id  _stashTabSpringBehavior;
    PGStashView * _stashView;
    bool  _stashed;
    UITapGestureRecognizer * _stashedTapGestureRecognizer;
    UIView * _tabShadowView;
    PGPictureInPictureViewController * _tetheredViewController;
    long long  _tetheringMode;
    PGPictureInPictureViewController * _tetheringViewController;
    PGControlsViewModel * _viewModel;
    id /* block */  _waitForUIFinalizationCompletionBlock;
}

@property (nonatomic, readonly) PGPictureInPictureApplication *application;
@property (nonatomic) bool canStartShowingChrome;
@property (nonatomic) <PGPictureInPictureViewControllerContentContainer> *contentContainer;
@property (nonatomic, readonly) UIView *contentContainerView;
@property (nonatomic, readonly) long long contentType;
@property (nonatomic, readonly) long long controlsStyle;
@property (nonatomic) double currentContentCornerRadius;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PGPictureInPictureViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PGHostedWindowHostingHandle *hostedWindowHostingHandle;
@property (getter=isInteractivelyResizing, nonatomic) bool interactivelyResizing;
@property (getter=isInterrupted, nonatomic) bool interrupted;
@property (nonatomic, readonly) bool isStashTabHidden;
@property (nonatomic, copy) NSArray *menuItems;
@property (nonatomic, retain) PGHostedWindowHostingHandle *microPIPHostedWindowHostingHandle;
@property (nonatomic) struct CGSize { double x1; double x2; } microPIPSize;
@property (nonatomic) struct CGSize { double x1; double x2; } minimumStashTabSize;
@property (nonatomic) UIPointerInteraction *pointerInteraction;
@property (nonatomic, readonly) double preferredMinimumWidth;
@property (nonatomic, readonly) bool prefersHiddenFromClonedDisplay;
@property (nonatomic, readonly) bool prefersIdleTimerDisabled;
@property (nonatomic) bool prefersStashTabSuppressed;
@property (nonatomic, readonly) NSString *sourceSceneSessionPersistentIdentifier;
@property (nonatomic) bool stashed;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PGPictureInPictureViewController *tetheredViewController;
@property (nonatomic, readonly) long long tetheringMode;
@property (nonatomic, readonly) PGPictureInPictureViewController *tetheringViewController;
@property (nonatomic, readonly) PGControlsViewModel *viewModel;
@property (nonatomic, copy) id /* block */ waitForUIFinalizationCompletionBlock;
@property (nonatomic, readonly) bool wantsStashTabSuppression;

+ (void)animateViewWithAnimationType:(long long)arg1 initialSpringVelocity:(double)arg2 animations:(id /* block */)arg3 completion:(id /* block */)arg4;
+ (double)defaultContentCornerRadius;
+ (void)tetherViewController:(id)arg1 toViewController:(id)arg2 mode:(long long)arg3;

- (void).cxx_destruct;
- (void)_addMaskViewSubviewIfNeeded;
- (void)_applyShadowSettingsToView:(id)arg1;
- (void)_handleTapWhileStashedGestureRecognizer:(id)arg1;
- (void)_insertContentContainerViewIfNeeded;
- (void)_layoutStashTabViewsIfNeeded;
- (void)_loadShadowViewIfNeeded;
- (void)_loadTabShadowViewIfNeeded;
- (id)_newShadowView;
- (void)_noteTetheringDidUpdate;
- (void)_performStartAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)_performStopAnimationWithFinalInterfaceOrientation:(long long)arg1 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)_resetStashTabViewsIfPossible;
- (void)_setPortalActive:(bool)arg1 left:(bool)arg2;
- (void)_setStashMaskActive:(bool)arg1;
- (void)_setStashedTabHidden:(bool)arg1 left:(bool)arg2;
- (void)_updateContentCornerRadiusForMaskActive:(bool)arg1;
- (void)_updateCornerRadii;
- (void)_updatePointerEffect;
- (void)_updatePrefersIdleTimerDisabled;
- (void)_updateStashTabStateWithBehavior:(id)arg1;
- (void)acquireInterfaceOrientationLock;
- (id)application;
- (bool)canStartShowingChrome;
- (id)contentContainer;
- (id)contentContainerView;
- (long long)contentType;
- (long long)controlsStyle;
- (double)currentContentCornerRadius;
- (void)deactivateAnalyticsSessionIfNeeded;
- (void)dealloc;
- (id)delegate;
- (void)flashControls;
- (void)handleCommand:(id)arg1;
- (id)hostedWindowHostingHandle;
- (void)hostedWindowSizeChangeBegan;
- (void)hostedWindowSizeChangeEnded;
- (id)initWithApplication:(id)arg1 sourceSceneSessionPersistentIdentifier:(id)arg2 controlsStyle:(long long)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isInteractivelyResizing;
- (bool)isInterrupted;
- (bool)isStashTabHidden;
- (void)loadView;
- (id)menuItems;
- (id)microPIPHostedWindowHostingHandle;
- (struct CGSize { double x1; double x2; })microPIPSize;
- (struct CGSize { double x1; double x2; })minimumStashTabSize;
- (void)notePictureInPictureStartedAutomatically:(bool)arg1;
- (void)notePictureInPictureWillStopForAppRequest:(bool)arg1 preferredFullScreenRestore:(bool)arg2;
- (void)performResumeAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)performRotateAnimationWithRotation:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)performStartAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)performStopAnimated:(bool)arg1 withFinalInterfaceOrientation:(long long)arg2 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)performSuspendAnimationWithCompletionHandler:(id /* block */)arg1;
- (id)pointerInteraction;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (struct CGSize { double x1; double x2; })preferredContentSize;
- (long long)preferredInterfaceOrientationForPresentation;
- (double)preferredMinimumWidth;
- (bool)prefersHiddenFromClonedDisplay;
- (bool)prefersIdleTimerDisabled;
- (bool)prefersStashTabSuppressed;
- (void)prepareStartAnimationWithInitialInterfaceOrientation:(long long)arg1 initialLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)prepareStopAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)relinquishInterfaceOrientationLock;
- (void)setAnalyticsDelegate:(id)arg1 analyticsSourceUUID:(id)arg2;
- (void)setCanStartShowingChrome:(bool)arg1;
- (void)setContentContainer:(id)arg1;
- (void)setContentCornerRadius:(double)arg1 animated:(bool)arg2;
- (void)setContentViewHidden:(bool)arg1;
- (void)setCurrentContentCornerRadius:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHostedWindowHostingHandle:(id)arg1;
- (void)setInteractivelyResizing:(bool)arg1;
- (void)setInterrupted:(bool)arg1;
- (void)setMenuItems:(id)arg1;
- (void)setMicroPIPHostedWindowHostingHandle:(id)arg1;
- (void)setMicroPIPSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMinimumStashTabSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPointerInteraction:(id)arg1;
- (void)setPreferredContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPrefersStashTabSuppressed:(bool)arg1;
- (void)setShouldDisablePointerInteraction:(bool)arg1;
- (void)setShowsPictureInPictureUnavailableIndicator:(bool)arg1;
- (void)setStashProgress:(double)arg1;
- (void)setStashTabHidden:(bool)arg1 left:(bool)arg2 withSpringBehavior:(id)arg3;
- (void)setStashed:(bool)arg1;
- (void)setTetheredViewController:(id)arg1 mode:(long long)arg2;
- (void)setTetheringViewController:(id)arg1 mode:(long long)arg2;
- (void)setWaitForUIFinalizationCompletionBlock:(id /* block */)arg1;
- (void)settings:(id)arg1 changedValueForKeyPath:(id)arg2;
- (bool)shouldAutorotate;
- (void)showChrome:(bool)arg1 animated:(bool)arg2;
- (bool)showsPictureInPictureUnavailableIndicator;
- (id)sourceSceneSessionPersistentIdentifier;
- (bool)stashed;
- (id)tetheredViewController;
- (long long)tetheringMode;
- (id)tetheringViewController;
- (void)updateHostedWindowSize:(struct CGSize { double x1; double x2; })arg1;
- (void)updatePlaybackStateWithDiff:(id)arg1;
- (void)viewDidLoad;
- (id)viewModel;
- (void)viewWillLayoutSubviews;
- (id /* block */)waitForUIFinalizationCompletionBlock;
- (bool)wantsStashTabSuppression;

@end
