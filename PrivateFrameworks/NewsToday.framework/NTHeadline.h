
@interface NTHeadline : NSObject <FCFeedTransformationItem, NTFeedTransformationItem, NTHeadlineProviding> {
    NSURL * _NewsURL;
    NTPBHeadlineAdElement * _adElement;
    NSDate * _ageDisplayDate;
    NTPBHeadlineAnalyticsElement * _analyticsElement;
    NTPBHeadlineBackingElement * _backingElement;
    NSString * _compactSourceName;
    NSURL * _compactSourceNameImageRemoteURL;
    NSURL * _flintDocumentURL;
    bool  _hiddenFromAutoFavorites;
    NSString * _identifier;
    bool  _isBundlePaid;
    NSString * _language;
    bool  _needsPlaceholderThumbnail;
    bool  _needsSeenStateTracking;
    NTHeadlinePersonalizationMetadata * _personalizationMetadata;
    SFSearchResult * _searchResult;
    NSString * _shortExcerpt;
    NSString * _sourceName;
    NSURL * _sourceNameImageRemoteURL;
    double  _sourceNameImageScale;
    NSString * _sourceTagID;
    NSString * _storyType;
    bool  _supportsSavingForLater;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _thumbnailFocalFrame;
    NSString * _thumbnailIdentifier;
    NSURL * _thumbnailRemoteURL;
    unsigned long long  _thumbnailSizePreset;
    NSString * _title;
    NSString * _titleCompact;
    NSArray * _topicIDs;
    NSString * _videoCallToActionTitle;
    NSURL * _videoCallToActionURL;
    NSURL * _webURL;
}

@property (nonatomic, copy) NSURL *NewsURL;
@property (nonatomic, copy) NTPBHeadlineAdElement *adElement;
@property (nonatomic, copy) NSDate *ageDisplayDate;
@property (nonatomic, copy) NTPBHeadlineAnalyticsElement *analyticsElement;
@property (getter=isANF, nonatomic, readonly) bool anf;
@property (nonatomic, readonly, copy) NSString *articleID;
@property (nonatomic, copy) NTPBHeadlineBackingElement *backingElement;
@property (nonatomic, readonly) long long bodyTextLength;
@property (getter=isBundlePaid, nonatomic, readonly) bool bundlePaid;
@property (nonatomic, readonly, copy) NSDate *cacheCutoffTimeRelativeDate;
@property (nonatomic, readonly, copy) NSDate *cacheExpirationDate;
@property (nonatomic, readonly) bool canBePurchased;
@property (nonatomic, readonly, copy) NSString *clusterID;
@property (nonatomic, copy) NSString *compactSourceName;
@property (nonatomic, copy) NSURL *compactSourceNameImageRemoteURL;
@property (nonatomic, readonly) unsigned long long contentType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLArticleContentExpiration *expirationData;
@property (getter=isExplicitContent, nonatomic, readonly) bool explicitContent;
@property (nonatomic, readonly) unsigned long long feedHalfLifeMilliseconds;
@property (nonatomic, readonly, copy) NSString *feedID;
@property (nonatomic, readonly, copy) NTPBFeedItem *feedItemForHeadlineFetch;
@property (nonatomic, readonly) <FCFeedTransformationItem> *feedTransformationItem;
@property (nonatomic, copy) NSURL *flintDocumentURL;
@property (nonatomic, readonly) NSData *float16FullBodyEncoding;
@property (nonatomic, readonly) NSData *float16TitleEncoding;
@property (getter=isFromBlockedStorefront, nonatomic, readonly) bool fromBlockedStorefront;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohortList *globalCohorts;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLConversionStats *globalConversionStats;
@property (nonatomic, readonly) double globalUserFeedback;
@property (nonatomic, readonly) unsigned long long halfLife;
@property (nonatomic, readonly) unsigned long long halfLifeOverride;
@property (nonatomic, readonly) bool hasAudioTrack;
@property (nonatomic, readonly) bool hasGlobalUserFeedback;
@property (nonatomic, readonly) bool hasThumbnail;
@property (nonatomic, readonly) bool hasVideo;
@property (nonatomic, readonly) bool hasVideoStillImage;
@property (readonly) unsigned long long hash;
@property (getter=isHiddenFromAutoFavorites, nonatomic, readonly) bool hiddenFromAutoFavorites;
@property (getter=isHiddenFromAutoFavorites, nonatomic) bool hiddenFromAutoFavorites;
@property (nonatomic, readonly, copy) NSArray *iAdCategories;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, copy) NSString *identifier;
@property (nonatomic) bool isBundlePaid;
@property (nonatomic, readonly) bool isEvergreen;
@property (nonatomic, readonly) bool isFeatureCandidate;
@property (nonatomic, readonly) bool isFeatured;
@property (nonatomic, readonly, copy) NSString *itemID;
@property (nonatomic, readonly) unsigned long long itemType;
@property (nonatomic, readonly, copy) NSString *language;
@property (nonatomic, copy) NSString *language;
@property (nonatomic, readonly) long long minimumNewsVersion;
@property (nonatomic, readonly) bool needsFeedItemHeadlinesFetch;
@property (nonatomic) bool needsPlaceholderThumbnail;
@property (nonatomic) bool needsSeenStateTracking;
@property (nonatomic, readonly) unsigned long long order;
@property (getter=isPaid, nonatomic, readonly) bool paid;
@property (nonatomic, copy) NTHeadlinePersonalizationMetadata *personalizationMetadata;
@property (nonatomic, readonly) unsigned long long preferredDynamicSlotAllocation;
@property (nonatomic, readonly, copy) NSDate *publishDate;
@property (nonatomic, readonly) unsigned long long publishDateMilliseconds;
@property (nonatomic, readonly) long long publisherArticleVersion;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohortList *publisherCohorts;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLConversionStats *publisherConversionStats;
@property (nonatomic, readonly, copy) NSString *publisherID;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLTagMetadata *publisherTagMetadata;
@property (nonatomic, readonly) bool reduceVisibility;
@property (nonatomic, readonly) unsigned long long role;
@property (retain) FCFeedPersonalizedItemScoreProfile *scoreProfile;
@property (nonatomic, readonly, copy) SFSearchResult *searchResult;
@property (nonatomic, copy) SFSearchResult *searchResult;
@property (nonatomic, copy) NSString *shortExcerpt;
@property (nonatomic, readonly, copy) <FCChannelProviding> *sourceChannel;
@property (nonatomic, readonly, copy) NSString *sourceChannelID;
@property (nonatomic, readonly, copy) NSString *sourceFeedID;
@property (nonatomic, copy) NSString *sourceName;
@property (nonatomic, copy) NSURL *sourceNameImageRemoteURL;
@property (nonatomic) double sourceNameImageScale;
@property (nonatomic, copy) NSString *sourceTagID;
@property (getter=isSponsored, nonatomic, readonly) bool sponsored;
@property (nonatomic, readonly) unsigned long long storyType;
@property (nonatomic, copy) NSString *storyType;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsSavingForLater;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } thumbnailFocalFrame;
@property (nonatomic, copy) NSString *thumbnailIdentifier;
@property (nonatomic, readonly) NSData *thumbnailPerceptualHash;
@property (nonatomic, copy) NSURL *thumbnailRemoteURL;
@property (nonatomic) unsigned long long thumbnailSizePreset;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *titleCompact;
@property (nonatomic, readonly) unsigned long long todayItemType;
@property (nonatomic, readonly, copy) NSArray *topicIDs;
@property (nonatomic, copy) NSArray *topicIDs;
@property (nonatomic, readonly, copy) NSArray *topics;
@property (nonatomic, readonly) bool usesDynamicSlotAllocation;
@property (nonatomic, copy) NSString *videoCallToActionTitle;
@property (nonatomic, copy) NSURL *videoCallToActionURL;
@property (nonatomic, readonly) bool webConverted;
@property (nonatomic, copy) NSURL *webURL;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)NewsURL;
- (id)adElement;
- (id)ageDisplayDate;
- (id)analyticsElement;
- (id)articleID;
- (id)backingElement;
- (id)cacheCutoffTimeRelativeDate;
- (id)cacheExpirationDate;
- (bool)canBePurchased;
- (id)clusterID;
- (id)compactSourceName;
- (id)compactSourceNameImageRemoteURL;
- (unsigned long long)contentType;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateTopicCohortsWithBlock:(id /* block */)arg1;
- (void)enumerateTopicConversionStatsWithBlock:(id /* block */)arg1;
- (unsigned long long)feedHalfLifeMilliseconds;
- (id)feedID;
- (id)feedItemForHeadlineFetch;
- (id)feedTransformationItem;
- (id)flintDocumentURL;
- (id)globalCohorts;
- (id)globalConversionStats;
- (double)globalUserFeedback;
- (unsigned long long)halfLife;
- (bool)hasGlobalUserFeedback;
- (bool)hasVideo;
- (unsigned long long)hash;
- (id)identifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (bool)isANF;
- (bool)isBundlePaid;
- (bool)isEqual:(id)arg1;
- (bool)isExplicitContent;
- (bool)isFromBlockedStorefront;
- (bool)isHiddenFromAutoFavorites;
- (bool)isHiddenFromAutoFavorites;
- (bool)isPaid;
- (id)itemID;
- (unsigned long long)itemType;
- (id)language;
- (long long)minimumNewsVersion;
- (bool)needsFeedItemHeadlinesFetch;
- (bool)needsPlaceholderThumbnail;
- (bool)needsSeenStateTracking;
- (unsigned long long)order;
- (id)personalizationMetadata;
- (id)protoitemWithFetchedFeedItemHeadline:(id)arg1;
- (id)publishDate;
- (unsigned long long)publishDateMilliseconds;
- (long long)publisherArticleVersion;
- (id)publisherCohorts;
- (id)publisherConversionStats;
- (id)publisherID;
- (id)publisherTagMetadata;
- (id)searchResult;
- (void)setAdElement:(id)arg1;
- (void)setAgeDisplayDate:(id)arg1;
- (void)setAnalyticsElement:(id)arg1;
- (void)setBackingElement:(id)arg1;
- (void)setCompactSourceName:(id)arg1;
- (void)setCompactSourceNameImageRemoteURL:(id)arg1;
- (void)setFlintDocumentURL:(id)arg1;
- (void)setHiddenFromAutoFavorites:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIsBundlePaid:(bool)arg1;
- (void)setLanguage:(id)arg1;
- (void)setNeedsPlaceholderThumbnail:(bool)arg1;
- (void)setNeedsSeenStateTracking:(bool)arg1;
- (void)setNewsURL:(id)arg1;
- (void)setPersonalizationMetadata:(id)arg1;
- (void)setSearchResult:(id)arg1;
- (void)setShortExcerpt:(id)arg1;
- (void)setSourceName:(id)arg1;
- (void)setSourceNameImageRemoteURL:(id)arg1;
- (void)setSourceNameImageScale:(double)arg1;
- (void)setSourceTagID:(id)arg1;
- (void)setStoryType:(id)arg1;
- (void)setSupportsSavingForLater:(bool)arg1;
- (void)setThumbnailFocalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setThumbnailIdentifier:(id)arg1;
- (void)setThumbnailRemoteURL:(id)arg1;
- (void)setThumbnailSizePreset:(unsigned long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleCompact:(id)arg1;
- (void)setTopicIDs:(id)arg1;
- (void)setVideoCallToActionTitle:(id)arg1;
- (void)setVideoCallToActionURL:(id)arg1;
- (void)setWebURL:(id)arg1;
- (id)shortExcerpt;
- (id)sourceChannelID;
- (id)sourceFeedID;
- (id)sourceName;
- (id)sourceNameImageRemoteURL;
- (double)sourceNameImageScale;
- (id)sourceTagID;
- (id)storyType;
- (bool)supportsSavingForLater;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbnailFocalFrame;
- (id)thumbnailIdentifier;
- (id)thumbnailRemoteURL;
- (unsigned long long)thumbnailSizePreset;
- (id)title;
- (id)titleCompact;
- (unsigned long long)todayItemType;
- (id)topicIDs;
- (id)topicIDs;
- (id)topics;
- (bool)usesDynamicSlotAllocation;
- (id)videoCallToActionTitle;
- (id)videoCallToActionURL;
- (id)webURL;

@end
