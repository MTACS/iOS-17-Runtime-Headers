
@interface PLPersistedMemoryMetadata : NSObject {
    NSData * _assetListPredicate;
    NSData * _blacklistedFeature;
    short  _category;
    NSDate * _creationDate;
    NSSet * _curatedAssetUUIDs;
    NSOrderedSet * _customUserAssetUUIDs;
    NSSet * _extendedCuratedAssetUUIDs;
    bool  _favorite;
    short  _featuredState;
    NSString * _keyAssetUUID;
    PLMemory * _memory;
    NSURL * _metadataURL;
    NSDictionary * _movieAssetState;
    NSSet * _movieCuratedAssetUUIDs;
    NSData * _movieData;
    short  _notificationState;
    long long  _pendingPlayCount;
    long long  _pendingShareCount;
    short  _pendingState;
    long long  _pendingViewCount;
    NSData * _photosGraphData;
    long long  _photosGraphVersion;
    long long  _playCount;
    bool  _rejected;
    NSSet * _representativeAssetUUIDs;
    double  _score;
    long long  _shareCount;
    short  _subcategory;
    NSString * _subtitle;
    NSString * _title;
    short  _userActionOptions;
    NSSet * _userCuratedAssetUUIDs;
    NSSet * _userFeedbacks;
    NSArray * _userFeedbacksDictionaryArray;
    NSString * _uuid;
    long long  _version;
    long long  _viewCount;
}

@property (nonatomic, retain) NSData *assetListPredicate;
@property (nonatomic, retain) NSData *blacklistedFeature;
@property (nonatomic) short category;
@property (nonatomic, retain) NSDate *creationDate;
@property (nonatomic, retain) NSSet *curatedAssetUUIDs;
@property (nonatomic, retain) NSOrderedSet *customUserAssetUUIDs;
@property (nonatomic, retain) NSSet *extendedCuratedAssetUUIDs;
@property (getter=isFavorite, nonatomic) bool favorite;
@property (nonatomic) short featuredState;
@property (nonatomic, retain) NSString *keyAssetUUID;
@property (nonatomic, retain) PLMemory *memory;
@property (nonatomic, retain) NSURL *metadataURL;
@property (nonatomic, retain) NSDictionary *movieAssetState;
@property (nonatomic, retain) NSSet *movieCuratedAssetUUIDs;
@property (nonatomic, retain) NSData *movieData;
@property (nonatomic) short notificationState;
@property (nonatomic) long long pendingPlayCount;
@property (nonatomic) long long pendingShareCount;
@property (nonatomic) short pendingState;
@property (nonatomic) long long pendingViewCount;
@property (nonatomic, retain) NSData *photosGraphData;
@property (nonatomic) long long photosGraphVersion;
@property (nonatomic) long long playCount;
@property (getter=isRejected, nonatomic) bool rejected;
@property (nonatomic, retain) NSSet *representativeAssetUUIDs;
@property (nonatomic) double score;
@property (nonatomic) long long shareCount;
@property (nonatomic) short subcategory;
@property (nonatomic, retain) NSString *subtitle;
@property (nonatomic, retain) NSString *title;
@property (nonatomic) short userActionOptions;
@property (nonatomic, retain) NSSet *userCuratedAssetUUIDs;
@property (nonatomic, retain) NSSet *userFeedbacks;
@property (nonatomic, retain) NSArray *userFeedbacksDictionaryArray;
@property (nonatomic, retain) NSString *uuid;
@property (nonatomic) long long version;
@property (nonatomic) long long viewCount;

+ (bool)isValidPath:(id)arg1;

- (void).cxx_destruct;
- (id)_metadataData;
- (bool)_readMetadata;
- (void)_saveMetadata;
- (bool)_updateAssetsInMemory:(id)arg1 relationshipName:(id)arg2 persistedAssetUUIDs:(id)arg3 includePendingChanges:(bool)arg4;
- (bool)_updateAssetsInMemory:(id)arg1 relationshipName:(id)arg2 persistedOrderedAssetUUIDs:(id)arg3 includePendingChanges:(bool)arg4;
- (id)assetListPredicate;
- (id)blacklistedFeature;
- (short)category;
- (id)creationDate;
- (id)curatedAssetUUIDs;
- (id)customUserAssetUUIDs;
- (id)description;
- (id)extendedCuratedAssetUUIDs;
- (short)featuredState;
- (bool)hasAllAssetsAvailableInManagedObjectContext:(id)arg1 includePendingAssetChanges:(bool)arg2;
- (id)init;
- (id)initWithPLMemory:(id)arg1 metadataURL:(id)arg2;
- (id)initWithPLMemory:(id)arg1 pathManager:(id)arg2;
- (id)initWithPersistedDataAtURL:(id)arg1;
- (id)insertMemoryFromDataInManagedObjectContext:(id)arg1;
- (bool)isFavorite;
- (bool)isObsolete;
- (bool)isRejected;
- (id)keyAssetUUID;
- (id)memory;
- (id)metadataURL;
- (id)movieAssetState;
- (id)movieCuratedAssetUUIDs;
- (id)movieData;
- (short)notificationState;
- (long long)pendingPlayCount;
- (long long)pendingShareCount;
- (short)pendingState;
- (long long)pendingViewCount;
- (id)photosGraphData;
- (long long)photosGraphVersion;
- (long long)playCount;
- (void)removePersistedData;
- (id)representativeAssetUUIDs;
- (double)score;
- (void)setAssetListPredicate:(id)arg1;
- (void)setBlacklistedFeature:(id)arg1;
- (void)setCategory:(short)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setCuratedAssetUUIDs:(id)arg1;
- (void)setCustomUserAssetUUIDs:(id)arg1;
- (void)setExtendedCuratedAssetUUIDs:(id)arg1;
- (void)setFavorite:(bool)arg1;
- (void)setFeaturedState:(short)arg1;
- (void)setKeyAssetUUID:(id)arg1;
- (void)setMemory:(id)arg1;
- (void)setMetadataURL:(id)arg1;
- (void)setMovieAssetState:(id)arg1;
- (void)setMovieCuratedAssetUUIDs:(id)arg1;
- (void)setMovieData:(id)arg1;
- (void)setNotificationState:(short)arg1;
- (void)setPendingPlayCount:(long long)arg1;
- (void)setPendingShareCount:(long long)arg1;
- (void)setPendingState:(short)arg1;
- (void)setPendingViewCount:(long long)arg1;
- (void)setPhotosGraphData:(id)arg1;
- (void)setPhotosGraphVersion:(long long)arg1;
- (void)setPlayCount:(long long)arg1;
- (void)setRejected:(bool)arg1;
- (void)setRepresentativeAssetUUIDs:(id)arg1;
- (void)setScore:(double)arg1;
- (void)setShareCount:(long long)arg1;
- (void)setSubcategory:(short)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUserActionOptions:(short)arg1;
- (void)setUserCuratedAssetUUIDs:(id)arg1;
- (void)setUserFeedbacks:(id)arg1;
- (void)setUserFeedbacksDictionaryArray:(id)arg1;
- (void)setUuid:(id)arg1;
- (void)setVersion:(long long)arg1;
- (void)setViewCount:(long long)arg1;
- (long long)shareCount;
- (short)subcategory;
- (id)subtitle;
- (id)title;
- (bool)updateAssetsInMemory:(id)arg1 includePendingAssetChanges:(bool)arg2;
- (short)userActionOptions;
- (id)userCuratedAssetUUIDs;
- (id)userFeedbacks;
- (id)userFeedbacksDictionaryArray;
- (id)uuid;
- (long long)version;
- (long long)viewCount;
- (void)writePersistedData;

@end
