
@interface PXZoomablePhotosViewModel : PXObservable <PXAssetsDataSourceManagerObserver, PXChangeObserver, PXMutableZoomablePhotosViewModel> {
    NSArray * _allowedColumnWidths;
    NSArray * _allowedColumns;
    bool  _allowsCaptionsInSquare;
    PXZoomablePhotosAlphaAnimator * _alphaAnimator;
    bool  _alwaysShowTopBadges;
    PXAssetReference * _anchorAssetReference;
    bool  _animatePendingZoom;
    bool  _aspectFit;
    PXAssetsDataSourceManager * _assetsDataSourceManager;
    id /* block */  _badgesModifier;
    bool  _captionsVisible;
    PXNumberAnimator * _columnWidthAnimator;
    NSSet * _draggedAssetReferences;
    PXAssetReference * _dropTargetAssetReference;
    id /* block */  _effectProvider;
    bool  _faceModeEnabled;
    bool  _hasInlineHeadersContent;
    PXZoomableInlineHeadersDataSourceManager * _inlineHeadersDataSourceManager;
    PXGridInlinePlaybackController<PXGDisplayAssetPixelBufferSourcesProvider> * _inlinePlaybackController;
    double  _interactiveZoomColumnIndex;
    bool  _isInSelectMode;
    bool  _isInteractiveZooming;
    bool  _isPerformingInitialChanges;
    bool  _isPinching;
    bool  _isUpdatingZoomState;
    bool  _layoutExtendsContentBelowBounds;
    PXLoadingStatusManager * _loadingStatusManager;
    bool  _lowMemoryMode;
    PXMediaProvider * _mediaProvider;
    double  _normalizedColumnWidthWhenPinchStarted;
    id  _pauseToken;
    long long  _pendingZoomColumnIndex;
    double  _pinchLastDate;
    double  _pinchLogValue;
    double  _pinchLogVelocity;
    struct { 
        struct CGPoint { 
            double x; 
            double y; 
        } normalizedInitialPosition; 
        double normalizedInitialPinchDistance; 
        struct CGPoint { 
            double x; 
            double y; 
        } normalizedPosition; 
        double initialScale; 
        double scale; 
        double scaleVelocity; 
        long long events; 
        double lastEventTime; 
    }  _pinchState;
    <PXPhotosPreferredAssetCropDelegate> * _preferredAssetCropDelegate;
    <PXPhotosPreferredColumnCountsDelegate> * _preferredColumnCountsDelegate;
    PXSectionedSelectionManager * _selectionManager;
    bool  _shouldHideSurroundingContent;
    PXZoomablePhotosLayoutSpecManager * _specManager;
    unsigned long long  _supportLevel;
    PXUpdater * _updater;
    bool  _useLowMemoryDecode;
    bool  _viewBasedDecorationsEnabled;
    bool  _wantsDimmedSelectionStyle;
    bool  _wantsFileSizeBadge;
    bool  _wantsNumberedSelectionStyle;
    bool  _wantsOverBackgroundFloatingHeaderAppearance;
    bool  _wasInteractiveZooming;
    bool  _wasPinching;
    struct { 
        struct CGPoint { 
            double x; 
            double y; 
        } normalizedScaleCenter; 
        double scale; 
        double scaleVelocity; 
        long long columns; 
        long long columnIndex; 
        double normalizedColumnWidth; 
        bool isAnimating; 
        bool isInteractive; 
        bool isTracking; 
        bool hasBeenInitialized; 
        long long fromColumnIndex; 
        long long toColumnIndex; 
        double interactiveProgress; 
        double animatedProgress; 
        double stickyHeaderOpacity; 
    }  _zoomState;
}

@property (nonatomic, readonly) bool allowDenseLevels;
@property (nonatomic, readonly) NSArray *allowedColumnWidths;
@property (nonatomic, retain) NSArray *allowedColumns;
@property (nonatomic, readonly) bool allowsCaptionsInSquare;
@property (nonatomic, readonly) bool alwaysShowTopBadges;
@property (nonatomic, readonly) PXAssetReference *anchorAssetReference;
@property (nonatomic, readonly) bool aspectFit;
@property (nonatomic, readonly) PXAssetsDataSourceManager *assetsDataSourceManager;
@property (nonatomic, readonly) id /* block */ badgesModifier;
@property (nonatomic, readonly) bool captionsVisible;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSSet *draggedAssetReferences;
@property (nonatomic, readonly) PXAssetReference *dropTargetAssetReference;
@property (nonatomic, readonly) id /* block */ effectProvider;
@property (getter=isFaceModeEnabled, nonatomic, readonly) bool faceModeEnabled;
@property (nonatomic) bool hasInlineHeadersContent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PXZoomableInlineHeadersDataSourceManager *inlineHeadersDataSourceManager;
@property (nonatomic, readonly) PXGridInlinePlaybackController<PXGDisplayAssetPixelBufferSourcesProvider> *inlinePlaybackController;
@property (nonatomic, readonly) double interactiveZoomColumnIndex;
@property (nonatomic, readonly) bool isDisplayingIndividualItems;
@property (nonatomic, readonly) bool isInSelectMode;
@property (nonatomic, readonly) bool isInteractiveZooming;
@property (nonatomic, readonly) bool isPerformingInitialChanges;
@property (nonatomic, readonly) bool isPinching;
@property (nonatomic, readonly) bool layoutExtendsContentBelowBounds;
@property (nonatomic, readonly) PXLoadingStatusManager *loadingStatusManager;
@property (nonatomic, readonly) bool lowMemoryMode;
@property (nonatomic, readonly) PXMediaProvider *mediaProvider;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; double x4; double x5; double x6; long long x7; double x8; } pinchState;
@property (nonatomic, readonly) <PXPhotosPreferredAssetCropDelegate> *preferredAssetCropDelegate;
@property (nonatomic, readonly) <PXPhotosPreferredColumnCountsDelegate> *preferredColumnCountsDelegate;
@property (nonatomic, readonly) PXSectionedSelectionManager *selectionManager;
@property (nonatomic, readonly) PXSelectionSnapshot *selectionSnapshot;
@property (nonatomic) bool shouldHideSurroundingContent;
@property (nonatomic, readonly) PXZoomablePhotosLayoutSpecManager *specManager;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PXUpdater *updater;
@property (nonatomic, readonly) bool useLowMemoryDecode;
@property (nonatomic, readonly) <PXZoomablePhotosUserDefaults> *userDefaults;
@property (nonatomic, readonly) bool viewBasedDecorationsEnabled;
@property (nonatomic, readonly) bool wantsDimmedSelectionStyle;
@property (nonatomic, readonly) bool wantsFileSizeBadge;
@property (nonatomic, readonly) bool wantsNumberedSelectionStyle;
@property (nonatomic, readonly) bool wantsOverBackgroundFloatingHeaderAppearance;
@property (nonatomic) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; long long x4; long long x5; double x6; bool x7; bool x8; bool x9; bool x10; long long x11; long long x12; double x13; double x14; double x15; } zoomState;

- (void).cxx_destruct;
- (long long)_clampColumnIndexToValidIndex:(long long)arg1;
- (long long)_closestColumnIndexForAnimatedValue:(double)arg1;
- (long long)_closestColumnIndexForColumnWidth:(double)arg1;
- (double)_columnIndexForItemWidth:(double)arg1;
- (double)_columnWidthForDesiredColumnIndex:(double)arg1;
- (void)_handleSpecChange;
- (void)_invalidateAllowedColumns;
- (void)_invalidateAlphaAnimator;
- (void)_invalidatePinchVelocity;
- (void)_invalidateShouldHideSurroundingContent;
- (void)_invalidateZoomState;
- (long long)_maxColumnsForIndividualItems;
- (long long)_nextColumnIndexForInitialColumnWidth:(double)arg1 currentColumnWidth:(double)arg2 velocity:(double)arg3;
- (void)_setNeedsUpdate;
- (void)_updateAllowedColumns;
- (void)_updateAlphaAnimator;
- (void)_updatePinchVelocity;
- (void)_updateShouldHideSurroundingContent;
- (void)_updateZoomState;
- (bool)allowDenseLevels;
- (id)allowedColumnWidths;
- (id)allowedColumns;
- (bool)allowsCaptionsInSquare;
- (bool)alwaysShowTopBadges;
- (id)anchorAssetReference;
- (bool)aspectFit;
- (id)assetsDataSourceManager;
- (id /* block */)badgesModifier;
- (long long)bestColumnIndexForPreferredNumberOfColumns:(long long)arg1;
- (bool)captionsVisible;
- (void)dealloc;
- (long long)denseZoomLevelForZoomState:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; long long x4; long long x5; double x6; bool x7; bool x8; bool x9; bool x10; long long x11; long long x12; double x13; double x14; double x15; })arg1;
- (id)description;
- (void)didPerformChanges;
- (id)draggedAssetReferences;
- (id)dropTargetAssetReference;
- (id /* block */)effectProvider;
- (bool)hasContentToZoom;
- (bool)hasInlineHeadersContent;
- (id)init;
- (id)initWithDataSourceManager:(id)arg1 selectionManager:(id)arg2 mediaProvider:(id)arg3 specManager:(id)arg4 loadingStatusManager:(id)arg5 badgesModifier:(id /* block */)arg6 preferredAssetCropDelegate:(id)arg7 preferredColumnCountsDelegate:(id)arg8 inlinePlaybackController:(id)arg9;
- (id)inlineHeadersDataSourceManager;
- (id)inlinePlaybackController;
- (double)interactiveZoomColumnIndex;
- (bool)isDisplayingIndividualItems;
- (bool)isFaceModeEnabled;
- (bool)isInSelectMode;
- (bool)isInteractiveZooming;
- (bool)isPerformingInitialChanges;
- (bool)isPinching;
- (bool)layoutExtendsContentBelowBounds;
- (id)loadingStatusManager;
- (bool)lowMemoryMode;
- (id)mediaProvider;
- (id)mutableChangeObject;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)performChanges:(id /* block */)arg1;
- (void)performInitialChanges:(id /* block */)arg1;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; double x4; double x5; double x6; long long x7; double x8; })pinchState;
- (id)preferredAssetCropDelegate;
- (id)preferredColumnCountsDelegate;
- (void)resetColumns;
- (id)selectionManager;
- (id)selectionSnapshot;
- (void)setAllowedColumns:(id)arg1;
- (void)setAllowsCaptionsInSquare:(bool)arg1;
- (void)setAlwaysShowTopBadges:(bool)arg1;
- (void)setAspectFit:(bool)arg1;
- (void)setCaptionsVisible:(bool)arg1;
- (void)setDraggedAssetReferences:(id)arg1;
- (void)setDropTargetAssetReference:(id)arg1;
- (void)setEffectProvider:(id /* block */)arg1;
- (void)setFaceModeEnabled:(bool)arg1;
- (void)setHasInlineHeadersContent:(bool)arg1;
- (void)setInteractiveZoomColumnIndex:(double)arg1 withAnchorAssetReference:(id)arg2;
- (void)setIsInSelectMode:(bool)arg1;
- (void)setIsInteractiveZooming:(bool)arg1;
- (void)setIsPinching:(bool)arg1;
- (void)setLayoutExtendsContentBelowBounds:(bool)arg1;
- (void)setLowMemoryMode:(bool)arg1;
- (void)setPinchState:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; double x4; double x5; double x6; long long x7; double x8; })arg1 withAnchorAssetReference:(id)arg2;
- (void)setShouldHideSurroundingContent:(bool)arg1;
- (void)setUseLowMemoryDecode:(bool)arg1;
- (void)setViewBasedDecorationsEnabled:(bool)arg1;
- (void)setWantsDimmedSelectionStyle:(bool)arg1;
- (void)setWantsFileSizeBadge:(bool)arg1;
- (void)setWantsNumberedSelectionStyle:(bool)arg1;
- (void)setWantsOverBackgroundFloatingHeaderAppearance:(bool)arg1;
- (void)setZoomState:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; long long x4; long long x5; double x6; bool x7; bool x8; bool x9; bool x10; long long x11; long long x12; double x13; double x14; double x15; })arg1;
- (bool)shouldHideSurroundingContent;
- (id)specManager;
- (id)updater;
- (bool)useLowMemoryDecode;
- (id)userDefaults;
- (bool)viewBasedDecorationsEnabled;
- (bool)wantsDimmedSelectionStyle;
- (bool)wantsFileSizeBadge;
- (bool)wantsNumberedSelectionStyle;
- (bool)wantsOverBackgroundFloatingHeaderAppearance;
- (void)zoomInToIndividualItemsWithAnchorAssetReference:(id)arg1 animated:(bool)arg2;
- (void)zoomInToLastRememberedWithAnchorAssetReference:(id)arg1 animated:(bool)arg2;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; long long x4; long long x5; double x6; bool x7; bool x8; bool x9; bool x10; long long x11; long long x12; double x13; double x14; double x15; })zoomState;
- (void)zoomToColumnIndex:(long long)arg1 withAnchorAssetReference:(id)arg2 animated:(bool)arg3;

@end
