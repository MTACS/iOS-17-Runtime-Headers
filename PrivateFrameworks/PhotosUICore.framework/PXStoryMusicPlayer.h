
@interface PXStoryMusicPlayer : PXObservable <PXAudioPlayerAVAudioSessionDelegate, PXChangeObserver, PXMutableStoryMusicPlayer, PXSettingsKeyObserver, PXStoryDiagnosticHUDContentProvider, PXStoryPacingCueSource, PXStoryQueueParticipant> {
    long long  _audioDesiredPlayState;
    long long  _bufferingEvents;
    <PXAudioCueProvider> * _cueProvider;
    long long  _cueRequestID;
    <PXAudioCueSource> * _cueSource;
    long long  _cuesVersion;
    <PXAudioAsset> * _currentAudioAsset;
    <PXStorySongResource> * _currentSongResource;
    long long  _desiredPlayState;
    float  _duckedVolume;
    NSString * _duckingReason;
    PXNumberAnimator * _duckingVolumeAnimator;
    PXNumberAnimator * _fadeOutVolumeAnimator;
    PXNumberAnimator * _focusVolumeAnimator;
    NSMutableSet * _internalFailedAudioAssets;
    bool  _isActive;
    bool  _isDucked;
    PXStoryModel * _model;
    NSString * _pauseReason;
    NSTimer * _playbackTimer;
    PXAudioPlayer * _player;
    long long  _readinessStatus;
    bool  _shouldDuckForCurrentTouch;
    NSObject<OS_dispatch_queue> * _storyQueue;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _targetDuration;
    NSDate * _touchingBeganDate;
    PXUpdater * _updater;
    PXNumberAnimator * _viewControllerTransitionVolumeAnimator;
    float  _volume;
}

@property (nonatomic, readonly) <PXAudioCueSource> *audioCueSource;
@property (nonatomic, readonly) long long audioDesiredPlayState;
@property (nonatomic) long long bufferingEvents;
@property (nonatomic, retain) <PXAudioCueProvider> *cueProvider;
@property (nonatomic) long long cueRequestID;
@property (nonatomic, retain) <PXAudioCueSource> *cueSource;
@property (nonatomic) long long cuesVersion;
@property (nonatomic, retain) <PXAudioAsset> *currentAudioAsset;
@property (nonatomic, readonly) <PXStorySongResource> *currentSongResource;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long desiredPlayState;
@property (nonatomic) float duckedVolume;
@property (nonatomic, copy) NSString *duckingReason;
@property (nonatomic, readonly) PXNumberAnimator *duckingVolumeAnimator;
@property (nonatomic, readonly) PXNumberAnimator *fadeOutVolumeAnimator;
@property (nonatomic, readonly, copy) NSSet *failedAudioAssets;
@property (nonatomic, readonly) PXNumberAnimator *focusVolumeAnimator;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSMutableSet *internalFailedAudioAssets;
@property (nonatomic, readonly) bool isActive;
@property (nonatomic) bool isDucked;
@property (nonatomic, readonly) PXStoryModel *model;
@property (nonatomic, copy) NSString *pauseReason;
@property (nonatomic, retain) NSTimer *playbackTimer;
@property (nonatomic, readonly) PXAudioPlayer *player;
@property (nonatomic) long long readinessStatus;
@property (nonatomic) bool shouldDuckForCurrentTouch;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *storyQueue;
@property (readonly) Class superclass;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } targetDuration;
@property (nonatomic, retain) NSDate *touchingBeganDate;
@property (nonatomic, readonly) PXUpdater *updater;
@property (nonatomic, readonly) PXNumberAnimator *viewControllerTransitionVolumeAnimator;
@property (nonatomic, readonly) float volume;

- (void).cxx_destruct;
- (id)AVAudioSessionForPlayer:(id)arg1;
- (void)_handleAudioCues:(id)arg1 asset:(id)arg2 error:(id)arg3 requestID:(long long)arg4;
- (void)_handleDuckingDelayPassedForTouchingBeganDate:(id)arg1;
- (void)_handlePlaybackFailureIfNeeded;
- (void)_handlePlaybackTimerFired:(id)arg1;
- (void)_invalidateCueSource;
- (void)_invalidateCurrentAudioAsset;
- (void)_invalidateCurrentSongResource;
- (void)_invalidateDesiredPlayState;
- (void)_invalidateDucked;
- (void)_invalidateDuckingVolumeAnimator;
- (void)_invalidateError;
- (void)_invalidateFadeOutVolumeAnimator;
- (void)_invalidateFailedAudioAssets;
- (void)_invalidateFocusVolumeAnimator;
- (void)_invalidateModelProperties;
- (void)_invalidatePlaybackTimer;
- (void)_invalidatePlayerCurrentAsset;
- (void)_invalidatePlayerDesiredPlayState;
- (void)_invalidatePlayerVolume;
- (void)_invalidateReadinessStatus;
- (void)_invalidateTargetDuration;
- (void)_invalidateTouchingBeganDate;
- (void)_invalidateViewControllerTransitionVolumeAnimator;
- (void)_updateCueSource;
- (void)_updateCurrentAudioAsset;
- (void)_updateCurrentSongResource;
- (void)_updateDesiredPlayState;
- (void)_updateDucked;
- (void)_updateDuckingVolumeAnimator;
- (void)_updateError;
- (void)_updateFadeOutVolumeAnimator;
- (void)_updateFailedAudioAssets;
- (void)_updateFocusVolumeAnimator;
- (void)_updateModelProperties;
- (void)_updatePlaybackTimer;
- (void)_updatePlayerCurrentAsset;
- (void)_updatePlayerDesiredPlayState;
- (void)_updatePlayerVolume;
- (void)_updateReadinessStatus;
- (void)_updateTargetDuration;
- (void)_updateTouchingBeganDate;
- (void)_updateViewControllerTransitionVolumeAnimator;
- (id)audioCueSource;
- (long long)audioDesiredPlayState;
- (long long)bufferingEvents;
- (id)cueProvider;
- (long long)cueRequestID;
- (id)cueSource;
- (long long)cuesVersion;
- (id)currentAudioAsset;
- (id)currentSongResource;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (id)description;
- (long long)desiredPlayState;
- (id)diagnosticCueStringForSize:(struct CGSize { double x1; double x2; })arg1 withIndicatorTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 rangeIndicatorTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg3;
- (id)diagnosticErrorsByComponentForHUDType:(long long)arg1;
- (id)diagnosticTextForHUDType:(long long)arg1;
- (id)diagnosticTextForHUDType:(long long)arg1 displaySize:(struct CGSize { double x1; double x2; })arg2;
- (void)didPerformChanges;
- (float)duckedVolume;
- (id)duckingReason;
- (id)duckingVolumeAnimator;
- (id)fadeOutVolumeAnimator;
- (id)failedAudioAssets;
- (id)focusVolumeAnimator;
- (id)init;
- (id)initWithModel:(id)arg1;
- (id)internalFailedAudioAssets;
- (bool)isActive;
- (bool)isDucked;
- (id)model;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (id)pauseReason;
- (void)performChanges:(id /* block */)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })playbackStartTimeForIncomingSong:(id)arg1;
- (id)playbackTimer;
- (id)player;
- (long long)readinessStatus;
- (void)replay;
- (void)setAudioDesiredPlayState:(long long)arg1;
- (void)setBufferingEvents:(long long)arg1;
- (void)setCueProvider:(id)arg1;
- (void)setCueRequestID:(long long)arg1;
- (void)setCueSource:(id)arg1;
- (void)setCuesVersion:(long long)arg1;
- (void)setCurrentAudioAsset:(id)arg1;
- (void)setCurrentSongResource:(id)arg1;
- (void)setDesiredPlayState:(long long)arg1;
- (void)setDuckedVolume:(float)arg1;
- (void)setDuckingReason:(id)arg1;
- (void)setIsActive:(bool)arg1;
- (void)setIsDucked:(bool)arg1;
- (void)setPauseReason:(id)arg1;
- (void)setPlaybackTimer:(id)arg1;
- (void)setReadinessStatus:(long long)arg1;
- (void)setShouldDuckForCurrentTouch:(bool)arg1;
- (void)setTargetDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTouchingBeganDate:(id)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (bool)shouldDuckForCurrentTouch;
- (id)storyQueue;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })targetDuration;
- (id)touchingBeganDate;
- (id)updater;
- (id)viewControllerTransitionVolumeAnimator;
- (float)volume;

@end
