
@interface PXGridInlinePlaybackController : NSObject <PXEventCoalescerObserver, PXPreferencesObserver> {
    bool  _active;
    bool  _applicationActive;
    bool  _autoplaySettingEnabled;
    bool  _canCreateRecords;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _criticallyVisibleEdgeInsets;
    NSMutableArray * _currentlyPlayingRecords;
    bool  _isContentViewVisible;
    bool  _isContextMenuInteractionActive;
    bool  _isDragSessionActive;
    bool  _isOneUpVisible;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lookupLock;
    NSMapTable * _lookupLock_recordsByDisplayAsset;
    bool  _lowPowerModeEnabled;
    bool  _playbackEnabled;
    PXEventCoalescer * _playingRecordsEventCoalescer;
    NSObject<OS_dispatch_queue> * _recordsQueue;
    bool  _shouldCoalescePlayingRecordsUpdates;
    PXUpdater * _updater;
    NSMutableArray * _visibleRecords;
}

@property (nonatomic) bool active;
@property (nonatomic) bool applicationActive;
@property (nonatomic) bool autoplaySettingEnabled;
@property (nonatomic) bool canCreateRecords;
@property (nonatomic, readonly) bool canProvideGeometriesForRecords;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } criticallyVisibleEdgeInsets;
@property (nonatomic, readonly) <PXDisplayAsset> *currentHoveredDisplayAsset;
@property (nonatomic, readonly, copy) NSArray *currentRecords;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentVisibleRect;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isContentViewVisible;
@property (nonatomic) bool isContextMenuInteractionActive;
@property (nonatomic) bool isDragSessionActive;
@property (nonatomic) bool isOneUpVisible;
@property (nonatomic) bool lowPowerModeEnabled;
@property (nonatomic, readonly) long long maxNumberOfPlayingItems;
@property (nonatomic) bool playbackEnabled;
@property (nonatomic, readonly) PXEventCoalescer *playingRecordsEventCoalescer;
@property (nonatomic, readonly) bool shouldCoalescePlayingRecordsUpdates;
@property (nonatomic, readonly) bool shouldEnablePlayback;
@property (nonatomic, readonly) bool shouldPlayOnHover;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidResignActive:(id)arg1;
- (bool)_hasAnyPlaybackRecords;
- (void)_processInfoPowerStateDidChange:(id)arg1;
- (void)_startPlaybackForRecords:(id)arg1;
- (void)_stopPlaybackForRecords:(id)arg1;
- (void)_updateActive;
- (void)_updateCanCreateRecords;
- (void)_updateLowPowerModeEnabled;
- (void)_updatePlaybackEnabled;
- (void)_updatePlayingRecords;
- (void)_updatePlayingRecordsImmediately;
- (void)_updateVisibilityOfRecords;
- (bool)active;
- (bool)applicationActive;
- (bool)autoplaySettingEnabled;
- (bool)canCreateRecords;
- (bool)canPlayAsset:(id)arg1;
- (bool)canProvideGeometriesForRecords;
- (bool)canUpdatePlayingRecords;
- (void)checkInPlaybackRecordForDisplayAsset:(id)arg1;
- (void)checkInPlaybackRecordForDisplayAssets:(id)arg1;
- (id)checkOutPlaybackRecordForDisplayAsset:(id)arg1 mediaProvider:(id)arg2 geometryReference:(id)arg3;
- (id)checkOutPlaybackRecordForDisplayAsset:(id)arg1 mediaProvider:(id)arg2 geometryReference:(id)arg3 configurationBlock:(id /* block */)arg4;
- (id)createPlaybackRecordForDisplayAsset:(id)arg1 mediaProvider:(id)arg2 geometryReference:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })criticallyVisibleEdgeInsets;
- (id)currentHoveredDisplayAsset;
- (id)currentRecords;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentVisibleRect;
- (void)dealloc;
- (void)didUpdatePlayingRecords;
- (id)filterSortedRecordsToPlay:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForPlaybackRecord:(id)arg1 minPlayableSize:(out struct CGSize { double x1; double x2; }*)arg2;
- (id)init;
- (void)invalidatePlaybackEnabled;
- (void)invalidatePlayingRecords;
- (bool)isContentViewVisible;
- (bool)isContextMenuInteractionActive;
- (bool)isDisplayAssetEligibleForAutoPlayback:(id)arg1;
- (bool)isDragSessionActive;
- (bool)isOneUpVisible;
- (bool)isPlayingDisplayAsset:(id)arg1;
- (bool)lowPowerModeEnabled;
- (long long)maxNumberOfPlayingItems;
- (void)outputEventSignaledForCoalescer:(id)arg1;
- (bool)playbackEnabled;
- (id)playingRecordsEventCoalescer;
- (void)preferencesDidChange;
- (void)setActive:(bool)arg1;
- (void)setApplicationActive:(bool)arg1;
- (void)setAutoplaySettingEnabled:(bool)arg1;
- (void)setCanCreateRecords:(bool)arg1;
- (void)setIsContentViewVisible:(bool)arg1;
- (void)setIsContextMenuInteractionActive:(bool)arg1;
- (void)setIsDragSessionActive:(bool)arg1;
- (void)setIsOneUpVisible:(bool)arg1;
- (void)setLowPowerModeEnabled:(bool)arg1;
- (void)setNeedsUpdate;
- (void)setPlaybackEnabled:(bool)arg1;
- (bool)shouldCoalescePlayingRecordsUpdates;
- (bool)shouldEnablePlayback;
- (bool)shouldPlayOnHover;
- (void)visibleRectDidChange;
- (void)willCheckInPlaybackRecordForDisplayAsset:(id)arg1;

@end
