
@interface PXImportItemViewModel : PXObservable <NSCopying, PXDisplayAsset, PXMetadataDetailsContentItem> {
    PXImportAssetCollection * _assetCollection;
    NSMutableDictionary * _assetRequestsBySize;
    NSString * _collectionIdentifier;
    NSString * _deleteSession;
    <PXImportDisplayDelegate> * _displayDelegate;
    bool  _duplicate;
    double  _imageProcessingEndTime;
    double  _imageProcessingStartTime;
    NSMutableDictionary * _imageRepresentationsBySize;
    PHImportAsset * _importAsset;
    NSDate * _importDate;
    bool  _isDeleted;
    NSString * _kind;
    struct CGSize { 
        double width; 
        double height; 
    }  _largeThumbnailSize;
    bool  _selectable;
    bool  _selected;
    long long  _state;
    NSError * _thumbnailError;
    long long  _thumbnailIndex;
    PHImportAssetDataRequest * _thumbnailRequest;
    NSMutableDictionary * _thumbnailRequestsBySize;
    struct CGSize { 
        double width; 
        double height; 
    }  _thumbnailSize;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } acceptableCropRect;
@property (nonatomic, readonly) double aspectRatio;
@property (nonatomic) PXImportAssetCollection *assetCollection;
@property (nonatomic, retain) NSMutableDictionary *assetRequestsBySize;
@property (nonatomic, readonly) float audioScore;
@property (nonatomic, readonly) long long badgeType;
@property (nonatomic, readonly) unsigned long long burstSelectionTypes;
@property (nonatomic, readonly) NSDate *creationDate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugDisplayName;
@property (nonatomic, readonly) Class defaultImageProviderClass;
@property (nonatomic, readonly) NSString *deleteSession;
@property (readonly, copy) NSString *description;
@property (nonatomic) <PXImportDisplayDelegate> *displayDelegate;
@property (getter=isDuplicate, nonatomic, readonly) bool duplicate;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } faceAreaRect;
@property (getter=isFavorite, nonatomic, readonly) bool favorite;
@property (nonatomic, readonly) NSData *fetchColorNormalizationData;
@property (nonatomic, readonly) NSDate *fileCreationDate;
@property (nonatomic, readonly) NSString *fileName;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSNumber *hdrGain;
@property (nonatomic) double imageProcessingEndTime;
@property (nonatomic) double imageProcessingStartTime;
@property (nonatomic, readonly) NSDictionary *imageRepresentations;
@property (nonatomic, retain) NSMutableDictionary *imageRepresentationsBySize;
@property (nonatomic, readonly) PHImportAsset *importAsset;
@property (nonatomic, readonly) NSDate *importDate;
@property (nonatomic, readonly) bool isAutoPlaybackEligibilityEstimated;
@property (nonatomic, readonly) bool isDeleted;
@property (nonatomic, readonly) bool isEligibleForAutoPlayback;
@property (nonatomic, readonly) bool isInCloud;
@property (nonatomic, readonly) bool isInSharedLibrary;
@property (nonatomic, readonly) bool isMediaAsset;
@property (nonatomic, readonly) bool isNotYetImported;
@property (nonatomic, readonly) bool isPanoramicImage;
@property (nonatomic, readonly) bool isSpatialMedia;
@property (nonatomic, readonly) NSString *kind;
@property (nonatomic) struct CGSize { double x1; double x2; } largeThumbnailSize;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } livePhotoVideoDuration;
@property (nonatomic, readonly) NSDate *localCreationDate;
@property (nonatomic, readonly) NSString *localizedGeoDescription;
@property (nonatomic, readonly) unsigned long long mediaSubtypes;
@property (nonatomic, readonly) long long mediaType;
@property (nonatomic, readonly) long long originalFileSize;
@property (nonatomic, readonly) unsigned long long pixelHeight;
@property (nonatomic, readonly) unsigned long long pixelWidth;
@property (nonatomic, readonly) long long playbackStyle;
@property (nonatomic, readonly) unsigned short playbackVariation;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } preferredCropRect;
@property (nonatomic, readonly) NSNumber *px_FPS;
@property (nonatomic, readonly) NSNumber *px_ISORating;
@property (nonatomic, readonly) NSNumber *px_aperture;
@property (nonatomic, readonly) NSString *px_assetDescription;
@property (getter=px_isAudio, nonatomic, readonly) bool px_audio;
@property (nonatomic, readonly) unsigned int px_audioTrackFormat;
@property (nonatomic, readonly) NSNumber *px_bitRate;
@property (nonatomic, readonly) NSString *px_burstUUID;
@property (nonatomic, readonly) bool px_canUseLocation;
@property (nonatomic, readonly) NSString *px_codec;
@property (nonatomic, readonly) NSDate *px_creationDate;
@property (nonatomic, readonly) NSNumber *px_digitalZoomRatio;
@property (nonatomic, readonly) NSNumber *px_duration;
@property (nonatomic, readonly) NSNumber *px_exposureBias;
@property (getter=ipx_isFavorite, nonatomic, readonly) bool px_favorite;
@property (nonatomic, readonly) unsigned short px_fetchCloudLocalState;
@property (nonatomic, readonly) unsigned long long px_fileType;
@property (nonatomic, readonly) NSString *px_filename;
@property (nonatomic, readonly) NSNumber *px_filesize;
@property (nonatomic, readonly) NSNumber *px_flash;
@property (nonatomic, readonly) NSNumber *px_focalLength;
@property (nonatomic, readonly) NSNumber *px_focalLengthIn35mm;
@property (nonatomic, readonly) NSString *px_formattedCameraModel;
@property (nonatomic, readonly) bool px_hasKeywords;
@property (getter=px_isHidden, nonatomic, readonly) bool px_hidden;
@property (getter=px_isImage, nonatomic, readonly) bool px_image;
@property (getter=px_isInTrash, nonatomic, readonly) bool px_inTrash;
@property (nonatomic, readonly) bool px_isActionModeVideo;
@property (nonatomic, readonly) bool px_isCinematicVideo;
@property (nonatomic, readonly) bool px_isDepthEffect;
@property (nonatomic, readonly) bool*px_isExtendedPropertiesProcessed;
@property (nonatomic, readonly) bool px_isH264;
@property (nonatomic, readonly) bool px_isHEVC;
@property (nonatomic, readonly) bool px_isLivePhoto;
@property (nonatomic, readonly) bool px_isPanorama;
@property (nonatomic, readonly) bool px_isProRes;
@property (nonatomic, readonly) bool px_isScreenRecording;
@property (nonatomic, readonly) bool px_isScreenshot;
@property (nonatomic, readonly) bool px_isSelfie;
@property (nonatomic, readonly) bool px_isSloMo;
@property (nonatomic, readonly) bool px_isTimelapse;
@property (nonatomic, readonly) NSString *px_lensModel;
@property (nonatomic, readonly) NSString *px_make;
@property (nonatomic, readonly) NSNumber *px_meteringMode;
@property (nonatomic, readonly) NSString *px_model;
@property (nonatomic, readonly) NSDate *px_originalCreationDate;
@property (nonatomic, readonly) unsigned long long px_originalFileType;
@property (nonatomic, readonly) CLLocation *px_originalLocation;
@property (nonatomic, readonly) NSTimeZone *px_originalTimeZone;
@property (nonatomic, readonly) unsigned long long px_originalType;
@property (nonatomic, readonly) bool px_representsBurst;
@property (nonatomic, readonly) struct PXIntSize_st { unsigned long long x1; unsigned long long x2; } px_resolution;
@property (nonatomic, readonly) bool px_reverseLocationDataIsValid;
@property (nonatomic, readonly) NSNumber *px_sampleRate;
@property (nonatomic, readonly) NSNumber *px_semanticStylePreset;
@property (nonatomic, readonly) bool px_shotWithNightMode;
@property (nonatomic, readonly) NSNumber *px_shutterSpeed;
@property (nonatomic, readonly) bool px_supportsImageProperties;
@property (nonatomic, readonly) NSTimeZone *px_timeZone;
@property (nonatomic, readonly) NSString *px_title;
@property (nonatomic, readonly) unsigned long long px_type;
@property (nonatomic, readonly) NSString *px_uniformTypeIdentifier;
@property (getter=px_isVideo, nonatomic, readonly) bool px_video;
@property (nonatomic, readonly) NSNumber *px_whiteBalance;
@property (nonatomic, readonly) bool representsBurst;
@property (getter=isSelectable, nonatomic, readonly) bool selectable;
@property (getter=isSelected, nonatomic, readonly) bool selected;
@property (nonatomic, readonly) long long state;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSError *thumbnailError;
@property (nonatomic, readonly) unsigned long long thumbnailIndex;
@property (nonatomic, readonly) long long thumbnailIndex;
@property (nonatomic) PHImportAssetDataRequest *thumbnailRequest;
@property (nonatomic, retain) NSMutableDictionary *thumbnailRequestsBySize;
@property (nonatomic) struct CGSize { double x1; double x2; } thumbnailSize;
@property (nonatomic, readonly) unsigned long long thumbnailVersion;
@property (nonatomic, readonly) NSString *uniformTypeIdentifier;
@property (nonatomic, readonly) NSString *uuid;
@property (nonatomic, readonly) id uuid;

+ (id)alreadyImportedGroupIdentifier;
+ (id)dateFormatter;
+ (bool)hasPanoramaImageDimensions:(struct CGSize { double x1; double x2; })arg1;
+ (id)importAssetsFromModels:(id)arg1;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })acceptableCropRect;
- (id)accessibilityLabel;
- (void)addImageRepresentation:(id)arg1;
- (void)addThumbnailRequest:(id)arg1;
- (double)aspectRatio;
- (id)assetCollection;
- (id)assetDataRequestForRequestSize:(unsigned long long)arg1;
- (id)assetRequestsBySize;
- (float)audioScore;
- (long long)badgeType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bestCropRectForAspectRatio:(double)arg1;
- (bool)canPlayLoopingVideo;
- (bool)canPlayPhotoIris;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (id)debugDisplayName;
- (Class)defaultImageProviderClass;
- (unsigned long long)deferredLogInfo;
- (id)deleteSession;
- (id)description;
- (id)displayDelegate;
- (double)duration;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })faceAreaRect;
- (id)fileCreationDate;
- (id)fileName;
- (id)groupIdentifier;
- (bool)hasPhotoColorAdjustments;
- (unsigned long long)hash;
- (double)imageProcessingEndTime;
- (double)imageProcessingStartTime;
- (id)imageRepresentations;
- (id)imageRepresentationsBySize;
- (id)importAsset;
- (id)importDate;
- (id)init;
- (id)initWithImportAsset:(id)arg1;
- (id)initWithKind:(id)arg1 selectable:(bool)arg2;
- (bool)ipx_isFavorite;
- (bool)isAnimatedImage;
- (long long)isContentEqualTo:(id)arg1;
- (bool)isDeleted;
- (bool)isDuplicate;
- (bool)isEligibleForAutoPlayback;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToImportItemViewModel:(id)arg1;
- (bool)isFavorite;
- (bool)isGuestAsset;
- (bool)isHidden;
- (bool)isInCloud;
- (bool)isInSharedLibrary;
- (bool)isLivePhoto;
- (bool)isMediaAsset;
- (bool)isNotYetImported;
- (bool)isPanoramicImage;
- (bool)isPhotoIrisPlaceholder;
- (bool)isSelectable;
- (bool)isSelected;
- (bool)isTemporaryPlaceholder;
- (id)kind;
- (struct CGSize { double x1; double x2; })largeThumbnailSize;
- (id)localCreationDate;
- (id)localizedGeoDescription;
- (unsigned long long)mediaSubtypes;
- (long long)mediaType;
- (id)modificationDate;
- (id)mutableChangeObject;
- (long long)originalFilesize;
- (void)performChanges:(id /* block */)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })photoIrisStillDisplayTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })photoIrisVideoDuration;
- (unsigned long long)pixelHeight;
- (unsigned long long)pixelWidth;
- (long long)playbackStyle;
- (unsigned short)playbackVariation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })preferredCropRect;
- (id)px_FPS;
- (id)px_ISORating;
- (id)px_aperture;
- (id)px_assetDescription;
- (unsigned int)px_audioTrackFormat;
- (id)px_bitRate;
- (id)px_burstUUID;
- (bool)px_canUseLocation;
- (id)px_codec;
- (id)px_creationDate;
- (id)px_digitalZoomRatio;
- (id)px_duration;
- (id)px_exposureBias;
- (unsigned short)px_fetchCloudLocalState;
- (unsigned long long)px_fileType;
- (id)px_filename;
- (id)px_filesize;
- (id)px_flash;
- (id)px_focalLength;
- (id)px_focalLengthIn35mm;
- (id)px_formattedCameraModel;
- (bool)px_hasKeywords;
- (bool)px_isActionModeVideo;
- (bool)px_isAudio;
- (bool)px_isCinematicVideo;
- (bool)px_isDepthEffect;
- (bool)px_isExtendedPropertiesProcessed;
- (bool)px_isH264;
- (bool)px_isHEVC;
- (bool)px_isHidden;
- (bool)px_isImage;
- (bool)px_isInTrash;
- (bool)px_isLivePhoto;
- (bool)px_isPanorama;
- (bool)px_isProRes;
- (bool)px_isScreenRecording;
- (bool)px_isScreenshot;
- (bool)px_isSelfie;
- (bool)px_isSloMo;
- (bool)px_isTimelapse;
- (bool)px_isVideo;
- (id)px_lensModel;
- (id)px_localizedGeoDescriptionForRTL:(bool)arg1;
- (id)px_make;
- (id)px_meteringMode;
- (id)px_model;
- (id)px_originalCreationDate;
- (unsigned long long)px_originalFileType;
- (id)px_originalLocation;
- (id)px_originalTimeZone;
- (unsigned long long)px_originalType;
- (bool)px_representsBurst;
- (struct PXIntSize_st { unsigned long long x1; unsigned long long x2; })px_resolution;
- (bool)px_reverseLocationDataIsValid;
- (id)px_sampleRate;
- (id)px_semanticStylePreset;
- (bool)px_shotWithNightMode;
- (id)px_shutterSpeed;
- (bool)px_supportsImageProperties;
- (id)px_timeZone;
- (id)px_title;
- (unsigned long long)px_type;
- (id)px_uniformTypeIdentifier;
- (id)px_whiteBalance;
- (void)removeAssetDataRequestForRequestSize:(unsigned long long)arg1;
- (void)removeThumbnailRequest:(id)arg1;
- (bool)representsBurst;
- (void)setAssetCollection:(id)arg1;
- (void)setAssetDataRequest:(id)arg1 forRequestSize:(unsigned long long)arg2;
- (void)setAssetRequestsBySize:(id)arg1;
- (void)setDeleteSession:(id)arg1;
- (void)setDisplayDelegate:(id)arg1;
- (void)setDuplicate:(bool)arg1;
- (void)setImageProcessingEndTime:(double)arg1;
- (void)setImageProcessingStartTime:(double)arg1;
- (void)setImageRepresentationsBySize:(id)arg1;
- (void)setImportDate:(id)arg1;
- (void)setIsDeleted:(bool)arg1;
- (void)setLargeThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSelectable:(bool)arg1;
- (void)setSelected:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setThumbnailError:(id)arg1;
- (void)setThumbnailRequest:(id)arg1;
- (void)setThumbnailRequestsBySize:(id)arg1;
- (void)setThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)state;
- (id)thumbnailError;
- (long long)thumbnailIndex;
- (id)thumbnailRequest;
- (id)thumbnailRequestsBySize;
- (id)thumbnailRequestsForRequestSize:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })thumbnailSize;
- (id)uniformTypeIdentifier;
- (id)uuid;

@end
