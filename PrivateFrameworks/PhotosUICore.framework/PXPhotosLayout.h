
@interface PXPhotosLayout : PXGStackLayout <PXChangeObserver, PXGItemPlacementController, PXGNamedImageSource, PXGSolidColorSource, PXGStringSource, PXPhotosSectionHeaderLayoutProviderInvalidationDelegate, PXScrollablePageSource> {
    bool  _alignsHeaderTitleWithLayoutMargins;
    PXNumberAnimator * _alternateAppearanceMixAnimator;
    <PXPhotosLayoutAnimationProvider> * _animationProvider;
    NSDateIntervalFormatter * _dateIntervalFormatter;
    <PXPhotosLayoutDelegate> * _delegate;
    NSString * _dynamicDateInterval;
    NSString * _dynamicLocationName;
    bool  _footerHasAppearedInitially;
    PXGSingleViewLayout * _footerLayout;
    UIView * _footerView;
    PXPhotosHeaderCustomizationModel * _headerCustomizationModel;
    PXNumberAnimator * _headerFooterAlphaAnimator;
    PXGSingleViewLayout * _headerLayout;
    struct { 
        bool createTopHeaderLayoutForDataSource; 
        bool topHeaderLayoutDidChangeDataSource; 
        bool configureTopHeaderLayout; 
    }  _headerProviderRespondsTo;
    NSString * _headerSubtitle;
    NSDictionary * _headerSubtitleOverBackgroundAttributes;
    NSDictionary * _headerSubtitleOverContentAttributes;
    NSString * _headerTitle;
    double  _headerTitleBaselineToBottom;
    long long  _headerTitleDrawingOptions;
    struct CGPoint { 
        double x; 
        double y; 
    }  _headerTitleOrigin;
    NSDictionary * _headerTitleOverBackgroundAttributes;
    NSDictionary * _headerTitleOverContentAttributes;
    struct CGSize { 
        double width; 
        double height; 
    }  _headerTitleSize;
    unsigned short  _headerTitleVersion;
    UIView * _headerView;
    bool  _isUpdatingSublayouts;
    bool  _managesHeaderSprites;
    long long  _pendingHideAnimationType;
    PXGItemPlacement * _placementOverride;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _postUpdateFlags;
    PXPhotosLayoutState * _presentedLayoutState;
    bool  _presentedVisibility;
    <PXPhotosSectionBodyLayoutProvider> * _sectionBodyProvider;
    <PXPhotosSectionHeaderLayoutProvider> * _sectionHeaderProvider;
    PXPhotosSectionedLayout * _sectionedLayout;
    PXPhotosLayoutSpecManager * _specManager;
    double  _statusBarHeight;
    double  _titleBackgroundGradientAdditionalCoverage;
    unsigned short  _titleBackgroundGradientResizableCapInsetsIndex;
    double  _titleBackgroundSpriteHeight;
    PXGLayout<PXPhotosSectionedLayoutHeader> * _topHeaderLayout;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _updateFlags;
    PXPhotosViewModel * _viewModel;
    bool  _wantsHeaderInSafeArea;
}

@property (nonatomic) bool alignsHeaderTitleWithLayoutMargins;
@property (nonatomic, readonly) <PXPhotosLayoutAnimationProvider> *animationProvider;
@property (nonatomic, readonly) struct PXFloatRange { double x1; double x2; } bottomCollapsibleArea;
@property (nonatomic, readonly) NSDateIntervalFormatter *dateIntervalFormatter;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXPhotosLayoutDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIView *footerView;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PXPhotosHeaderCustomizationModel *headerCustomizationModel;
@property (nonatomic, copy) NSString *headerSubtitle;
@property (nonatomic, copy) NSDictionary *headerSubtitleOverBackgroundAttributes;
@property (nonatomic, copy) NSDictionary *headerSubtitleOverContentAttributes;
@property (nonatomic, copy) NSString *headerTitle;
@property (nonatomic) double headerTitleBaselineToBottom;
@property (nonatomic, readonly) long long headerTitleDrawingOptions;
@property (nonatomic) struct CGPoint { double x1; double x2; } headerTitleOrigin;
@property (nonatomic, copy) NSDictionary *headerTitleOverBackgroundAttributes;
@property (nonatomic, copy) NSDictionary *headerTitleOverContentAttributes;
@property (nonatomic) struct CGSize { double x1; double x2; } headerTitleSize;
@property (nonatomic, retain) UIView *headerView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } originalPlacementRect;
@property (nonatomic) long long pendingHideAnimationType;
@property (nonatomic, retain) PXGItemPlacement *placementOverride;
@property (nonatomic, retain) PXPhotosLayoutState *presentedLayoutState;
@property (nonatomic, retain) <PXPhotosSectionBodyLayoutProvider> *sectionBodyProvider;
@property (nonatomic, retain) <PXPhotosSectionHeaderLayoutProvider> *sectionHeaderProvider;
@property (nonatomic, readonly) PXPhotosLayoutSpecManager *specManager;
@property (nonatomic) double statusBarHeight;
@property (readonly) Class superclass;
@property (nonatomic) double titleBackgroundGradientAdditionalCoverage;
@property (nonatomic) double titleBackgroundSpriteHeight;
@property (nonatomic, readonly) struct PXFloatRange { double x1; double x2; } topCollapsibleArea;
@property (nonatomic, readonly) PXPhotosViewModel *viewModel;
@property (nonatomic) bool wantsHeaderInSafeArea;

- (void).cxx_destruct;
- (double)_headerSubtitleLineHeight;
- (double)_headerTitleLineHeight;
- (struct CGSize { double x1; double x2; })_headerTitleReferenceSize;
- (struct CGSize { double x1; double x2; })_headerTitleSize;
- (void)_informTopHeaderLayoutAboutDataSourceChange;
- (void)_invalidateContentBelowTitle;
- (void)_invalidateDynamicHeaderTitle;
- (void)_invalidateFooter;
- (void)_invalidateHeaderAnimated:(bool)arg1;
- (void)_invalidateHeaderAttributes;
- (void)_invalidateHeaderMeasurements;
- (void)_invalidateHeaderMeasurementsForTitleChange;
- (void)_invalidateHeaderOrigin;
- (void)_invalidateHeaderTitle;
- (void)_invalidateLocalSprites;
- (void)_invalidateLocalSpritesAlpha;
- (void)_invalidateLocalSpritesCount;
- (void)_invalidateSectionedLayout;
- (void)_invalidateSectionedLayoutPlacementOverrides;
- (void)_invalidateTopHeaderLayout;
- (void)_performPreUpdateInvalidationDeferredIfNeeded:(id /* block */)arg1;
- (bool)_shouldShowSectionedLayout;
- (void)_updateContentBelowTitle;
- (void)_updateFooter;
- (void)_updateHeaderAnimated:(bool)arg1;
- (void)_updateHeaderAttributes;
- (void)_updateHeaderFooterAlphaAnimator;
- (void)_updateHeaderMeasurements;
- (void)_updateHeaderOrigin;
- (void)_updateHeaderTitle;
- (void)_updateLocalSprites;
- (void)_updateLocalSpritesAlpha;
- (void)_updateLocalSpritesCount;
- (void)_updatePresentedLayoutState;
- (void)_updateSectionedLayout;
- (void)_updateSectionedLayoutPlacementOverrides;
- (void)_updateTopHeaderLayout;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })additionalSafeAreaInsetsForSublayout:(id)arg1;
- (void)adjustCopiedSprites:(struct { unsigned int x1; struct { /* ? */ } *x2; struct { /* ? */ } *x3; struct { /* ? */ } *x4; struct { /* ? */ } *x5; })arg1;
- (struct CGPoint { double x1; double x2; })adjustedTargetVisibleOriginForProposedTargetVisibleOrigin:(struct CGPoint { double x1; double x2; })arg1 scrollingVelocity:(struct CGPoint { double x1; double x2; })arg2 decelerationRate:(inout long long*)arg3;
- (bool)alignsHeaderTitleWithLayoutMargins;
- (id)animationProvider;
- (bool)appliesAlphaToSublayouts;
- (id)attributedStringForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)axSpriteIndexes;
- (struct PXFloatRange { double x1; double x2; })bottomCollapsibleArea;
- (bool)canHandleVisibleRectRejection;
- (id)colorAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)createAnchorForScrollingToInitialPosition;
- (id)createAnchorForVisibleAreaIgnoringEdges:(unsigned long long)arg1;
- (id)createCurrentLayoutState;
- (id)createDefaultAnimationForCurrentContext;
- (id)dateIntervalFormatter;
- (id /* block */)dateIntervalFutureForContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 type:(unsigned long long)arg2;
- (id)delegate;
- (void)didUpdate;
- (void)displayScaleDidChange;
- (void)enumerateItemsGeometriesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 dataSource:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateScrollablePagesWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (id)footerView;
- (unsigned long long)fullyVisibleEdgesWithDefaultTolerance;
- (id)headerCustomizationModel;
- (id)headerSubtitle;
- (id)headerSubtitleOverBackgroundAttributes;
- (id)headerSubtitleOverContentAttributes;
- (id)headerTitle;
- (double)headerTitleBaselineToBottom;
- (long long)headerTitleDrawingOptions;
- (struct CGPoint { double x1; double x2; })headerTitleOrigin;
- (id)headerTitleOverBackgroundAttributes;
- (id)headerTitleOverContentAttributes;
- (struct CGSize { double x1; double x2; })headerTitleSize;
- (id)headerView;
- (void)hideSpritesForObjectReferences:(id)arg1;
- (id)hitTestResultForSpriteIndex:(unsigned int)arg1;
- (id)imageConfigurationAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)initWithViewModel:(id)arg1 specManager:(id)arg2;
- (void)invalidateFooterHeight;
- (id)itemPlacementControllerForItemReference:(id)arg1;
- (id /* block */)locationNamesFutureForContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })originalPlacementRect;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)pendingHideAnimationType;
- (void)photosSectionHeaderLayoutInvalidateConfiguredLayouts:(id)arg1;
- (id)placementInContext:(id)arg1 forItemReference:(id)arg2;
- (id)placementOverride;
- (id)presentedDataSource;
- (id)presentedItemsGeometryForSection:(unsigned long long)arg1 inDataSource:(id)arg2;
- (id)presentedLayoutState;
- (void)referenceSizeDidChange;
- (id)regionOfInterestForAssetReference:(id)arg1;
- (void)safeAreaInsetsDidChange;
- (id)sectionBodyProvider;
- (id)sectionHeaderProvider;
- (void)setAlignsHeaderTitleWithLayoutMargins:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFooterView:(id)arg1;
- (void)setHeaderSubtitle:(id)arg1;
- (void)setHeaderSubtitleOverBackgroundAttributes:(id)arg1;
- (void)setHeaderSubtitleOverContentAttributes:(id)arg1;
- (void)setHeaderTitle:(id)arg1;
- (void)setHeaderTitleBaselineToBottom:(double)arg1;
- (void)setHeaderTitleOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setHeaderTitleOverBackgroundAttributes:(id)arg1;
- (void)setHeaderTitleOverContentAttributes:(id)arg1;
- (void)setHeaderTitleSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHeaderView:(id)arg1;
- (void)setHeaderView:(id)arg1 animated:(bool)arg2;
- (void)setPendingHideAnimationType:(long long)arg1;
- (void)setPlacementOverride:(id)arg1;
- (void)setPlacementOverride:(id)arg1 forItemReference:(id)arg2;
- (void)setPresentedLayoutState:(id)arg1;
- (void)setSectionBodyProvider:(id)arg1;
- (void)setSectionHeaderProvider:(id)arg1;
- (void)setStatusBarHeight:(double)arg1;
- (void)setTitleBackgroundGradientAdditionalCoverage:(double)arg1;
- (void)setTitleBackgroundSpriteHeight:(double)arg1;
- (void)setWantsHeaderInSafeArea:(bool)arg1;
- (id)specManager;
- (double)statusBarHeight;
- (id)stringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)stringAttributesAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)stringDrawingOptionsForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)sublayoutIndexForObjectReference:(id)arg1 options:(unsigned long long)arg2 updatedObjectReference:(out id*)arg3;
- (double)titleBackgroundGradientAdditionalCoverage;
- (double)titleBackgroundSpriteHeight;
- (struct PXFloatRange { double x1; double x2; })topCollapsibleArea;
- (id)topmostSectionHeaderSnapshotInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)update;
- (long long)verticalAlignmentForStringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (Class)viewClassForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)viewModel;
- (id)viewUserDataForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (struct CGPoint { double x1; double x2; })visibleOriginForScrollingToNeighboringSectionInDirection:(unsigned long long)arg1;
- (void)visibleRectDidChange;
- (bool)wantsHeaderInSafeArea;
- (void)willUpdate;

@end
