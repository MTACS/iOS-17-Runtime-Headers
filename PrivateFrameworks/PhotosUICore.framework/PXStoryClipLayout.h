
@interface PXStoryClipLayout : PXGLayout <PXChangeObserver, PXGDisplayAssetSource, PXGSolidColorSource, PXGStringSource, PXStoryDiagnosticHUDContentProvider, PXStoryTitleInternationalStylePreferencesObserver> {
    PXStoryHUDViewConfiguration * _HUDConfiguration;
    unsigned char  _HUDContentVersion;
    NSTimer * _HUDTimer;
    unsigned long long  _assetPresentationStyles;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _autoplayTimeRange;
    PXGRegionMaskEffect * _bottomEdgeMaskEffect;
    bool  _canAspectFitContent;
    bool  _canShowColorNormalizedContent;
    bool  _canShowDynamicContent;
    bool  _canShowHUD;
    bool  _canShowTextLegibilityEffect;
    <PXStoryClip> * _clip;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _clipTimeRange;
    PXStoryTiltedEdgeInsetsAnimation * _clippingAnimation;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _clippingInsets;
    long long  _colorGradeKind;
    PXGColorGradingEffect * _colorGradingEffect;
    PXStoryColorNormalizationAdjustment * _colorNormalizationAdjustment;
    PXStoryColorNormalizationEffect * _colorNormalizationEffect;
    PXGCombinedEffect * _combinedEffect;
    float  _contentAlpha;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentBounds;
    struct { 
        struct { 
            double preRotationInset; 
            double rotationAngle; 
            double postRotationInset; 
        } top; 
        struct { 
            double preRotationInset; 
            double rotationAngle; 
            double postRotationInset; 
        } left; 
        struct { 
            double preRotationInset; 
            double rotationAngle; 
            double postRotationInset; 
        } bottom; 
        struct { 
            double preRotationInset; 
            double rotationAngle; 
            double postRotationInset; 
        } right; 
    }  _contentEdgeInsets;
    bool  _contentPrefersPresentationTypeView;
    float  _contentScale;
    unsigned int  _contentSpriteIndex;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentSpriteNormalizedFrameOverride;
    long long  _contentSpriteNormalizedFrameOverrideCoordinateSystem;
    unsigned char  _contentVersion;
    struct { 
        struct CGAffineTransform { 
            double a; 
            double b; 
            double c; 
            double d; 
            double tx; 
            double ty; 
        } t; 
    }  _contentsRectOverride;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _contentsRectTransform;
    struct { 
        union { 
            struct { 
                float topLeft; 
                float topRight; 
                float bottomLeft; 
                float bottomRight; 
            } ; 
            float byIndex[4]; 
        } ; 
    }  _cornerRadius;
    float  _currentAudioVolume;
    PXStoryTextResourceInfo * _currentTextResourceInfo;
    long long  _customColorGradeKind;
    unsigned int  _diagnosticHUDSpriteIndex;
    bool  _disableClippingAnimation;
    <PXDisplayAsset> * _displayAsset;
    struct CGSize { 
        double width; 
        double height; 
    }  _displayedTimelineOriginalSize;
    bool  _isFeedThumbnail;
    bool  _isPlayheadInAudioTimeRange;
    bool  _isPlayheadInVideoTimeRange;
    bool  _isReadyForAutoplay;
    bool  _isSegmentVisible;
    PXStoryRectAnimation * _kenBurnsAnimation;
    PXGRegionMaskEffect * _leftEdgeClippingMaskEffect;
    PXGRegionMaskEffect * _leftEdgeMaskEffect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _manualContentsRect;
    double  _manualContentsRectAmount;
    PXStoryModel * _model;
    id  _musicDuckingToken;
    long long  _offsetFromCurrentSegment;
    <PXStoryStyleDescriptor> * _overrideStyleInfo;
    struct { 
        struct CGAffineTransform { 
            double a; 
            double b; 
            double c; 
            double d; 
            double tx; 
            double ty; 
        } t; 
    }  _preferredPresentedContentsRect;
    struct { 
        struct CGAffineTransform { 
            double a; 
            double b; 
            double c; 
            double d; 
            double tx; 
            double ty; 
        } t; 
    }  _presentedContentsRect;
    struct CGSize { 
        double width; 
        double height; 
    }  _presentedKenBurnsAnimationContentSize;
    struct { 
        struct CGAffineTransform { 
            double a; 
            double b; 
            double c; 
            double d; 
            double tx; 
            double ty; 
        } t; 
    }  _presentedKenBurnsAnimationCurrentRect;
    double  _primaryDividerAlpha;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _primaryDividerBounds;
    struct CGSize { 
        double width; 
        double height; 
    }  _primaryDividerScale;
    unsigned int  _primaryDividerSpriteIndex;
    PXStoryTextResourceInfo * _relativeTextResourceInfo;
    double  _relativeZPositionAboveLegibilityGradients;
    <PXStoryResource> * _resource;
    double  _resourceContentAspectRatio;
    long long  _resourceKind;
    PXGRegionMaskEffect * _rightEdgeClippingMaskEffect;
    PXGRegionMaskEffect * _rightEdgeMaskEffect;
    double  _secondaryDividerAlpha;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _secondaryDividerBounds;
    struct CGSize { 
        double width; 
        double height; 
    }  _secondaryDividerScale;
    unsigned int  _secondaryDividerSpriteIndex;
    NSIndexSet * _segmentIdentifiers;
    bool  _shouldAspectFitContent;
    bool  _shouldAutoplay;
    bool  _shouldObserveInternationalStyleTitlePreferences;
    PXStorySmartGradientAdjustment * _smartGradientAdjustment;
    NSProgress * _textFrameProgress;
    PXGTextLegibilityEffect * _textLegibilityEffect;
    struct CGSize { 
        double width; 
        double height; 
    }  _textResourceContentSize;
    unsigned char  _textResourceContentVersion;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _textResourceSpriteFrame;
    PXGLayout * _timelineLayout;
    PXGRegionMaskEffect * _topEdgeMaskEffect;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _updateFlags;
    bool  _useContentBoundsForContentEdgeInsets;
    PXGDisplayAssetVideoPresentationController * _videoPresentationController;
    bool  _wantsHUD;
    bool  _wasPlayheadMovedManually;
}

@property (nonatomic, readonly) PXStoryHUDViewConfiguration *HUDConfiguration;
@property (nonatomic, retain) NSTimer *HUDTimer;
@property (nonatomic, readonly) PXStoryAnimationController *animationController;
@property (nonatomic) unsigned long long assetPresentationStyles;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } autoplayTimeRange;
@property (nonatomic, retain) PXGRegionMaskEffect *bottomEdgeMaskEffect;
@property (nonatomic) bool canAspectFitContent;
@property (nonatomic) bool canShowColorNormalizedContent;
@property (nonatomic) bool canShowDynamicContent;
@property (nonatomic) bool canShowHUD;
@property (nonatomic) bool canShowTextLegibilityEffect;
@property (nonatomic, retain) <PXStoryClip> *clip;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } clipTimeRange;
@property (nonatomic, retain) PXStoryTiltedEdgeInsetsAnimation *clippingAnimation;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } clippingInsets;
@property (nonatomic) long long colorGradeKind;
@property (nonatomic, retain) PXGColorGradingEffect *colorGradingEffect;
@property (nonatomic, retain) PXStoryColorNormalizationAdjustment *colorNormalizationAdjustment;
@property (nonatomic, retain) PXStoryColorNormalizationEffect *colorNormalizationEffect;
@property (nonatomic, retain) PXGCombinedEffect *combinedEffect;
@property (nonatomic) float contentAlpha;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentBounds;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; struct { double x_2_1_1; double x_2_1_2; double x_2_1_3; } x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; } contentEdgeInsets;
@property (nonatomic) bool contentPrefersPresentationTypeView;
@property (nonatomic) float contentScale;
@property (nonatomic, readonly) struct { unsigned int x1; } contentSpriteEntity;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentSpriteNormalizedFrameOverride;
@property (nonatomic, readonly) long long contentSpriteNormalizedFrameOverrideCoordinateSystem;
@property (nonatomic) struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; } contentsRectOverride;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } contentsRectTransform;
@property (nonatomic) struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; } cornerRadius;
@property (nonatomic, readonly) float currentAudioVolume;
@property (nonatomic, retain) PXStoryTextResourceInfo *currentTextResourceInfo;
@property (nonatomic) long long customColorGradeKind;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableClippingAnimation;
@property (nonatomic, retain) <PXDisplayAsset> *displayAsset;
@property (nonatomic) struct CGSize { double x1; double x2; } displayedTimelineOriginalSize;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isPlayheadInAudioTimeRange;
@property (nonatomic, readonly) bool isPlayheadInVideoTimeRange;
@property (nonatomic) bool isReadyForAutoplay;
@property (nonatomic) bool isSegmentVisible;
@property (nonatomic, retain) PXStoryRectAnimation *kenBurnsAnimation;
@property (nonatomic, retain) PXGRegionMaskEffect *leftEdgeClippingMaskEffect;
@property (nonatomic, retain) PXGRegionMaskEffect *leftEdgeMaskEffect;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } manualContentsRect;
@property (nonatomic) double manualContentsRectAmount;
@property (nonatomic, retain) PXStoryModel *model;
@property (nonatomic, retain) id musicDuckingToken;
@property (nonatomic) long long offsetFromCurrentSegment;
@property (nonatomic, retain) <PXStoryStyleDescriptor> *overrideStyleInfo;
@property (nonatomic) struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; } preferredPresentedContentsRect;
@property (nonatomic) struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; } presentedContentsRect;
@property (nonatomic) struct CGSize { double x1; double x2; } presentedKenBurnsAnimationContentSize;
@property (nonatomic) struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; } presentedKenBurnsAnimationCurrentRect;
@property (nonatomic) double primaryDividerAlpha;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } primaryDividerBounds;
@property (nonatomic) struct CGSize { double x1; double x2; } primaryDividerScale;
@property (nonatomic, retain) PXStoryTextResourceInfo *relativeTextResourceInfo;
@property (nonatomic) double relativeZPositionAboveLegibilityGradients;
@property (nonatomic, retain) <PXStoryResource> *resource;
@property (nonatomic, retain) PXGRegionMaskEffect *rightEdgeClippingMaskEffect;
@property (nonatomic, retain) PXGRegionMaskEffect *rightEdgeMaskEffect;
@property (nonatomic) double secondaryDividerAlpha;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } secondaryDividerBounds;
@property (nonatomic) struct CGSize { double x1; double x2; } secondaryDividerScale;
@property (nonatomic, copy) NSIndexSet *segmentIdentifiers;
@property (nonatomic) bool shouldAspectFitContent;
@property (nonatomic) bool shouldAutoplay;
@property (nonatomic) bool shouldObserveInternationalStyleTitlePreferences;
@property (nonatomic, retain) PXStorySmartGradientAdjustment *smartGradientAdjustment;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSProgress *textFrameProgress;
@property (nonatomic, retain) PXGTextLegibilityEffect *textLegibilityEffect;
@property (nonatomic) struct CGSize { double x1; double x2; } textResourceContentSize;
@property (nonatomic) unsigned char textResourceContentVersion;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } textResourceSpriteFrame;
@property (nonatomic) PXGLayout *timelineLayout;
@property (nonatomic, retain) PXGRegionMaskEffect *topEdgeMaskEffect;
@property (nonatomic) bool useContentBoundsForContentEdgeInsets;
@property (nonatomic, retain) PXGDisplayAssetVideoPresentationController *videoPresentationController;
@property (nonatomic) bool wantsHUD;
@property (nonatomic, readonly) bool wasPlayheadMovedManually;

+ (bool)shouldContinueKenBurnsAnimationFromPreviousPresentedContentSize:(struct CGSize { double x1; double x2; })arg1 toCurrentContentSize:(struct CGSize { double x1; double x2; })arg2;

- (void).cxx_destruct;
- (id)HUDConfiguration;
- (id)HUDTimer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_denormalizeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 coordinateSystem:(long long)arg2;
- (id)_effectWithClass:(Class)arg1 reusableInstance:(id)arg2;
- (long long)_effectiveColorGradeKind;
- (void)_invalidateAnimations;
- (void)_invalidateAssetPresentationStyles;
- (void)_invalidateColorGradeKind;
- (void)_invalidateColorGradingEffect;
- (void)_invalidateColorNormalizationEffect;
- (void)_invalidateCombinedEffect;
- (void)_invalidateContent;
- (void)_invalidateContentMode;
- (void)_invalidateContentStyle;
- (void)_invalidateContentVersion;
- (void)_invalidateDisplayAsset;
- (void)_invalidateEdgeMaskEffects;
- (void)_invalidateHUD;
- (void)_invalidateIsSegmentVisible;
- (void)_invalidateModelPresentedTextProperties;
- (void)_invalidateMusicDucking;
- (void)_invalidateOffsetFromCurrentSegment;
- (void)_invalidatePlayheadState;
- (void)_invalidateResource;
- (void)_invalidateSegmentIdentifiers;
- (void)_invalidateShouldAutoplay;
- (void)_invalidateSmartGradientAdjustment;
- (void)_invalidateTextLegibilityEffect;
- (void)_invalidateTextResourceSpriteFrame;
- (void)_invalidateVideoPresentationController;
- (void)_invalidateVideoPresentationControllerState;
- (void)_invalidateWantsHUD;
- (bool)_isDisplayingContentOfAsset:(id)arg1;
- (bool)_isDisplayingTextResourceType:(long long)arg1;
- (id)_maskEffectForEdge:(unsigned int)arg1 tiltedInset:(struct { double x1; double x2; double x3; })arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 reusableInstance:(id)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_normalizeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 coordinateSystem:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_referenceRectForNormalizedCoordinateSystem:(long long)arg1;
- (id)_textForHUD;
- (unsigned long long)_titleKind;
- (void)_updateAnimations;
- (void)_updateAssetPresentationStyles;
- (void)_updateColorGradeKind;
- (void)_updateColorGradingEffect;
- (void)_updateColorNormalizationEffect;
- (void)_updateCombinedEffect;
- (void)_updateContent;
- (void)_updateContentMode;
- (void)_updateContentStyle;
- (void)_updateDisplayAsset;
- (void)_updateEdgeMaskEffects;
- (void)_updateHUD;
- (void)_updateIsSegmentVisible;
- (void)_updateModelPresentedTextProperties;
- (void)_updateMusicDucking;
- (void)_updateOffsetFromCurrentSegment;
- (void)_updatePlayheadState;
- (void)_updateResource;
- (void)_updateSegmentIdentifiers;
- (void)_updateShouldAutoplay;
- (void)_updateSmartGradientAdjustment;
- (void)_updateTextLegibilityEffect;
- (void)_updateTextResourceSpriteFrame;
- (void)_updateVideoPresentationController;
- (void)_updateVideoPresentationControllerState;
- (void)_updateWantsHUD;
- (void)_validateVideoPlaybackState;
- (id)adjustmentForDisplayAsset:(id)arg1 spriteIndex:(unsigned int)arg2 inLayout:(id)arg3;
- (void)alphaDidChange;
- (id)animationController;
- (unsigned long long)assetPresentationStyles;
- (struct CGSize { double x1; double x2; })attributedStringBoundingSizeForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)attributedStringForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })autoplayTimeRange;
- (unsigned long long)axFocusabilityForSpriteAtIndex:(unsigned int)arg1;
- (id)axSpriteIndexes;
- (id)axVisibleSpriteIndexes;
- (id)bottomEdgeMaskEffect;
- (bool)canAspectFitContent;
- (bool)canShowColorNormalizedContent;
- (bool)canShowDynamicContent;
- (bool)canShowHUD;
- (bool)canShowTextLegibilityEffect;
- (id)clip;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })clipTimeRange;
- (id)clippingAnimation;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })clippingInsets;
- (id)colorAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)colorGradeKind;
- (id)colorGradingEffect;
- (id)colorNormalizationAdjustment;
- (id)colorNormalizationEffect;
- (id)combinedEffect;
- (float)contentAlpha;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentBounds;
- (struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; struct { double x_2_1_1; double x_2_1_2; double x_2_1_3; } x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; })contentEdgeInsets;
- (bool)contentPrefersPresentationTypeView;
- (float)contentScale;
- (void)contentSizeDidChange;
- (struct { unsigned int x1; })contentSpriteEntity;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentSpriteNormalizedFrameOverride;
- (long long)contentSpriteNormalizedFrameOverrideCoordinateSystem;
- (struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })contentsRectOverride;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })contentsRectTransform;
- (struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; })cornerRadius;
- (float)currentAudioVolume;
- (id)currentTextResourceInfo;
- (long long)customColorGradeKind;
- (void)dealloc;
- (id)description;
- (unsigned long long)desiredPlaceholderStyleInLayout:(id)arg1;
- (id)diagnosticErrorsByComponentForHUDType:(long long)arg1;
- (id)diagnosticTextForHUDType:(long long)arg1 displaySize:(struct CGSize { double x1; double x2; })arg2;
- (void)didUpdate;
- (bool)disableClippingAnimation;
- (id)displayAsset;
- (id)displayAssetFetchResultForSpritesInRange:(struct _PXGSpriteIndexRange { unsigned int x1; unsigned int x2; })arg1 inLayout:(id)arg2;
- (void)displayScaleDidChange;
- (struct CGSize { double x1; double x2; })displayedTimelineOriginalSize;
- (id)drawingContextForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (void)entityManagerDidChange;
- (void)getDetailedPresentedPlacement:(id)arg1 forItemReference:(id)arg2;
- (id)init;
- (void)internationalStyleTitlePreferencesDidChange;
- (bool)isDisplayingSubtitle;
- (bool)isDisplayingTitle;
- (bool)isPlayheadInAudioTimeRange;
- (bool)isPlayheadInVideoTimeRange;
- (bool)isReadyForAutoplay;
- (bool)isSegmentVisible;
- (id)itemPlacementSourceIdentifier;
- (id)kenBurnsAnimation;
- (id)leftEdgeClippingMaskEffect;
- (id)leftEdgeMaskEffect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })manualContentsRect;
- (double)manualContentsRectAmount;
- (id)model;
- (id)musicDuckingToken;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (long long)offsetFromCurrentSegment;
- (id)overrideStyleInfo;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })preferredPresentedContentsRect;
- (unsigned long long)presentationIntentForSpritesInRange:(struct _PXGSpriteIndexRange { unsigned int x1; unsigned int x2; })arg1 inLayout:(id)arg2;
- (struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })presentedContentsRect;
- (struct CGSize { double x1; double x2; })presentedKenBurnsAnimationContentSize;
- (struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })presentedKenBurnsAnimationCurrentRect;
- (double)primaryDividerAlpha;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })primaryDividerBounds;
- (struct CGSize { double x1; double x2; })primaryDividerScale;
- (void)referenceDepthDidChange;
- (void)referenceSizeDidChange;
- (id)relativeTextResourceInfo;
- (double)relativeZPositionAboveLegibilityGradients;
- (id)resource;
- (id)rightEdgeClippingMaskEffect;
- (id)rightEdgeMaskEffect;
- (double)secondaryDividerAlpha;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })secondaryDividerBounds;
- (struct CGSize { double x1; double x2; })secondaryDividerScale;
- (id)segmentIdentifiers;
- (void)setAssetPresentationStyles:(unsigned long long)arg1;
- (void)setAutoplayTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setBottomEdgeMaskEffect:(id)arg1;
- (void)setCanAspectFitContent:(bool)arg1;
- (void)setCanShowColorNormalizedContent:(bool)arg1;
- (void)setCanShowDynamicContent:(bool)arg1;
- (void)setCanShowHUD:(bool)arg1;
- (void)setCanShowTextLegibilityEffect:(bool)arg1;
- (void)setClip:(id)arg1;
- (void)setClipTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setClippingAnimation:(id)arg1;
- (void)setClippingInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setColorGradeKind:(long long)arg1;
- (void)setColorGradingEffect:(id)arg1;
- (void)setColorNormalizationAdjustment:(id)arg1;
- (void)setColorNormalizationEffect:(id)arg1;
- (void)setCombinedEffect:(id)arg1;
- (void)setContentAlpha:(float)arg1;
- (void)setContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentEdgeInsets:(struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; struct { double x_2_1_1; double x_2_1_2; double x_2_1_3; } x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; })arg1;
- (void)setContentPrefersPresentationTypeView:(bool)arg1;
- (void)setContentScale:(float)arg1;
- (void)setContentSpriteNormalizedFrameOverride:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 coordinateSystem:(long long)arg2;
- (void)setContentsRectOverride:(struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })arg1;
- (void)setContentsRectTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setCornerRadius:(struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; })arg1;
- (void)setCurrentTextResourceInfo:(id)arg1;
- (void)setCustomColorGradeKind:(long long)arg1;
- (void)setDetailedPlacementOverride:(id)arg1 forItemReference:(id)arg2;
- (void)setDisableClippingAnimation:(bool)arg1;
- (void)setDisplayAsset:(id)arg1;
- (void)setDisplayedTimelineOriginalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHUDTimer:(id)arg1;
- (void)setIsPlayheadInVideoTimeRange:(bool)arg1 isPlayheadInAudioTimeRange:(bool)arg2 wasPlayheadMovedManually:(bool)arg3 currentAudioVolume:(float)arg4;
- (void)setIsReadyForAutoplay:(bool)arg1;
- (void)setIsSegmentVisible:(bool)arg1;
- (void)setKenBurnsAnimation:(id)arg1;
- (void)setLeftEdgeClippingMaskEffect:(id)arg1;
- (void)setLeftEdgeMaskEffect:(id)arg1;
- (void)setManualContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setManualContentsRectAmount:(double)arg1;
- (void)setModel:(id)arg1;
- (void)setMusicDuckingToken:(id)arg1;
- (void)setOffsetFromCurrentSegment:(long long)arg1;
- (void)setOverrideStyleInfo:(id)arg1;
- (void)setPreferredPresentedContentsRect:(struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })arg1;
- (void)setPresentedContentsRect:(struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })arg1;
- (void)setPresentedKenBurnsAnimationContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPresentedKenBurnsAnimationCurrentRect:(struct { struct CGAffineTransform { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; } x1; })arg1;
- (void)setPrimaryDividerAlpha:(double)arg1;
- (void)setPrimaryDividerBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPrimaryDividerScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setRelativeTextResourceInfo:(id)arg1;
- (void)setRelativeZPositionAboveLegibilityGradients:(double)arg1;
- (void)setResource:(id)arg1;
- (void)setRightEdgeClippingMaskEffect:(id)arg1;
- (void)setRightEdgeMaskEffect:(id)arg1;
- (void)setSecondaryDividerAlpha:(double)arg1;
- (void)setSecondaryDividerBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSecondaryDividerScale:(struct CGSize { double x1; double x2; })arg1;
- (void)setSegmentIdentifiers:(id)arg1;
- (void)setShouldAspectFitContent:(bool)arg1;
- (void)setShouldAutoplay:(bool)arg1;
- (void)setShouldObserveInternationalStyleTitlePreferences:(bool)arg1;
- (void)setSmartGradientAdjustment:(id)arg1;
- (void)setTextFrameProgress:(id)arg1;
- (void)setTextLegibilityEffect:(id)arg1;
- (void)setTextResourceContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTextResourceContentVersion:(unsigned char)arg1;
- (void)setTextResourceSpriteFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTimelineLayout:(id)arg1;
- (void)setTopEdgeMaskEffect:(id)arg1;
- (void)setUseContentBoundsForContentEdgeInsets:(bool)arg1;
- (void)setVideoPresentationController:(id)arg1;
- (void)setWantsHUD:(bool)arg1;
- (bool)shouldApplyCleanApertureCropToStillImagesInLayout:(id)arg1;
- (bool)shouldAspectFitContent;
- (bool)shouldAutoplay;
- (bool)shouldObserveInternationalStyleTitlePreferences;
- (id)smartGradientAdjustment;
- (id)spriteReferenceForContentSprite;
- (id)stringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)stringAttributesAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)stringDrawingOptionsForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (unsigned long long)supportedDisplayAssetPresentationStylesInLayout:(id)arg1;
- (id)textFrameProgress;
- (id)textLegibilityEffect;
- (struct CGSize { double x1; double x2; })textResourceContentSize;
- (unsigned char)textResourceContentVersion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textResourceSpriteFrame;
- (id)timelineLayout;
- (id)topEdgeMaskEffect;
- (void)update;
- (bool)useContentBoundsForContentEdgeInsets;
- (bool)useLowMemoryDecodeInLayout:(id)arg1;
- (long long)verticalAlignmentForStringAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)videoPresentationController;
- (id)videoPresentationControllerForDisplayAsset:(id)arg1 spriteIndex:(unsigned int)arg2 inLayout:(id)arg3;
- (Class)viewClassForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)viewUserDataForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (bool)wantsHUD;
- (bool)wasPlayheadMovedManually;
- (void)willUpdate;

@end
