
@interface PXCuratedLibrarySectionHeaderLayoutSpec : PXFeatureSpec {
    double  _buttonHeight;
    double  _buttonHorizontalPadding;
    double  _buttonSpacing;
    double  _buttonsFadeOutMinimumAlpha;
    bool  _canShowAspectFitButtons;
    bool  _canShowCancelButton;
    bool  _canShowSelectButton;
    bool  _canShowZoomButtons;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentPadding;
    struct { 
        union { 
            struct { 
                float topLeft; 
                float topRight; 
                float bottomLeft; 
                float bottomRight; 
            } ; 
            float byIndex[4]; 
        } ; 
    }  _cornerRadius;
    PXTitleSubtitleLabelSpec * _debugInterestingTitleSubtitleLabelSpec;
    PXTitleSubtitleLabelSpec * _debugNonInterestingTitleSubtitleLabelSpec;
    bool  _ellipsisButtonSpecialTreatment;
    double  _fadeOutDistance;
    double  _fadeOutDistanceFromSafeAreaTop;
    PXCuratedLibrarySectionHeaderLayoutSpec * _firstCardVariantSpec;
    double  _gradientAlpha;
    double  _gradientHeight;
    bool  _gradientRespectsSafeArea;
    PXExtendedImageConfiguration * _headerGradientImageConfiguration;
    unsigned long long  _inlineHeaderStyle;
    bool  _isFloating;
    double  _minimumSpacingBetweenTopSafeAreaAndContentTop;
    double  _minimumSpacingBetweenTopSafeAreaAndTitleTop;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    bool  _requiresTitleRenderedAsView;
    bool  _shouldAccommodateLeadingButtonsLayout;
    bool  _shouldAvoidOverlapWithSecondaryToolbar;
    bool  _shouldButtonsFadeOutWhenReachingTop;
    bool  _shouldOmitYear;
    bool  _shouldTextFadeOutWhenReachingTop;
    PXCuratedLibrarySectionHeaderLayoutSpec * _smallVariantSpec;
    PXCuratedLibraryStyleGuide * _styleGuide;
    NSDateFormatter * _subtitleDateFormatter;
    bool  _swapTitleWithSubtitle;
    double  _textFadeOutMinimumAlpha;
    NSDateFormatter * _titleDateFormatter;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _titlePadding;
    PXTitleSubtitleLabelSpec * _titleSubtitleLabelSpec;
    long long  _variant;
    bool  _wantsInlineHeader;
    bool  _wantsSubtitle;
    bool  _wantsTitle;
}

@property (nonatomic) double buttonHeight;
@property (nonatomic) double buttonHorizontalPadding;
@property (nonatomic) double buttonSpacing;
@property (nonatomic) double buttonsFadeOutMinimumAlpha;
@property (nonatomic) bool canShowAspectFitButtons;
@property (nonatomic) bool canShowCancelButton;
@property (nonatomic) bool canShowSelectButton;
@property (nonatomic) bool canShowZoomButtons;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentPadding;
@property (nonatomic) struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; } cornerRadius;
@property (nonatomic, copy) PXTitleSubtitleLabelSpec *debugInterestingTitleSubtitleLabelSpec;
@property (nonatomic, copy) PXTitleSubtitleLabelSpec *debugNonInterestingTitleSubtitleLabelSpec;
@property (nonatomic) bool ellipsisButtonSpecialTreatment;
@property (nonatomic) double fadeOutDistance;
@property (nonatomic) double fadeOutDistanceFromSafeAreaTop;
@property (nonatomic, retain) PXCuratedLibrarySectionHeaderLayoutSpec *firstCardVariantSpec;
@property (nonatomic) double gradientAlpha;
@property (nonatomic) double gradientHeight;
@property (nonatomic) bool gradientRespectsSafeArea;
@property (nonatomic, readonly) PXExtendedImageConfiguration *headerGradientImageConfiguration;
@property (nonatomic) unsigned long long inlineHeaderStyle;
@property (nonatomic) bool isFloating;
@property (nonatomic, readonly) double maximumTitleSubtitleHeight;
@property (nonatomic, readonly) double minimumSpacingBetweenTopSafeAreaAndContentTop;
@property (nonatomic, readonly) double minimumSpacingBetweenTopSafeAreaAndTitleTop;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } padding;
@property (nonatomic) bool requiresTitleRenderedAsView;
@property (nonatomic) bool shouldAccommodateLeadingButtonsLayout;
@property (nonatomic) bool shouldAvoidOverlapWithSecondaryToolbar;
@property (nonatomic) bool shouldButtonsFadeOutWhenReachingTop;
@property (nonatomic) bool shouldOmitYear;
@property (nonatomic) bool shouldTextFadeOutWhenReachingTop;
@property (nonatomic, retain) PXCuratedLibrarySectionHeaderLayoutSpec *smallVariantSpec;
@property (nonatomic, readonly) PXCuratedLibraryStyleGuide *styleGuide;
@property (nonatomic, copy) NSDateFormatter *subtitleDateFormatter;
@property (nonatomic) bool swapTitleWithSubtitle;
@property (nonatomic) double textFadeOutMinimumAlpha;
@property (nonatomic, copy) NSDateFormatter *titleDateFormatter;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } titlePadding;
@property (nonatomic, copy) PXTitleSubtitleLabelSpec *titleSubtitleLabelSpec;
@property (nonatomic) long long variant;
@property (nonatomic) bool wantsInlineHeader;
@property (nonatomic) bool wantsSubtitle;
@property (nonatomic) bool wantsTitle;

- (void).cxx_destruct;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })adjustedContentPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (double)buttonHeight;
- (double)buttonHorizontalPadding;
- (double)buttonSpacing;
- (double)buttonsFadeOutMinimumAlpha;
- (bool)canShowAspectFitButtons;
- (bool)canShowCancelButton;
- (bool)canShowSelectButton;
- (bool)canShowZoomButtons;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentPadding;
- (struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; })cornerRadius;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })curatedLibraryEdgeToEdgeContentDefaultPadding;
- (id)debugInterestingTitleSubtitleLabelSpec;
- (id)debugNonInterestingTitleSubtitleLabelSpec;
- (bool)ellipsisButtonSpecialTreatment;
- (double)fadeOutDistance;
- (double)fadeOutDistanceFromSafeAreaTop;
- (id)firstCardVariantSpec;
- (double)gradientAlpha;
- (double)gradientHeight;
- (bool)gradientRespectsSafeArea;
- (id)headerGradientImageConfiguration;
- (id)initWithExtendedTraitCollection:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithExtendedTraitCollection:(id)arg1 options:(unsigned long long)arg2 variant:(long long)arg3;
- (unsigned long long)inlineHeaderStyle;
- (bool)isFloating;
- (double)maximumTitleSubtitleHeight;
- (double)minimumSpacingBetweenTopSafeAreaAndContentTop;
- (double)minimumSpacingBetweenTopSafeAreaAndTitleTop;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (bool)requiresTitleRenderedAsView;
- (void)setButtonHeight:(double)arg1;
- (void)setButtonHorizontalPadding:(double)arg1;
- (void)setButtonSpacing:(double)arg1;
- (void)setButtonsFadeOutMinimumAlpha:(double)arg1;
- (void)setCanShowAspectFitButtons:(bool)arg1;
- (void)setCanShowCancelButton:(bool)arg1;
- (void)setCanShowSelectButton:(bool)arg1;
- (void)setCanShowZoomButtons:(bool)arg1;
- (void)setContentPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setCornerRadius:(struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; })arg1;
- (void)setDebugInterestingTitleSubtitleLabelSpec:(id)arg1;
- (void)setDebugNonInterestingTitleSubtitleLabelSpec:(id)arg1;
- (void)setEllipsisButtonSpecialTreatment:(bool)arg1;
- (void)setFadeOutDistance:(double)arg1;
- (void)setFadeOutDistanceFromSafeAreaTop:(double)arg1;
- (void)setFirstCardVariantSpec:(id)arg1;
- (void)setGradientAlpha:(double)arg1;
- (void)setGradientHeight:(double)arg1;
- (void)setGradientRespectsSafeArea:(bool)arg1;
- (void)setInlineHeaderStyle:(unsigned long long)arg1;
- (void)setIsFloating:(bool)arg1;
- (void)setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setRequiresTitleRenderedAsView:(bool)arg1;
- (void)setShouldAccommodateLeadingButtonsLayout:(bool)arg1;
- (void)setShouldAvoidOverlapWithSecondaryToolbar:(bool)arg1;
- (void)setShouldButtonsFadeOutWhenReachingTop:(bool)arg1;
- (void)setShouldOmitYear:(bool)arg1;
- (void)setShouldTextFadeOutWhenReachingTop:(bool)arg1;
- (void)setSmallVariantSpec:(id)arg1;
- (void)setSubtitleDateFormatter:(id)arg1;
- (void)setSwapTitleWithSubtitle:(bool)arg1;
- (void)setTextFadeOutMinimumAlpha:(double)arg1;
- (void)setTitleDateFormatter:(id)arg1;
- (void)setTitlePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setTitleSubtitleLabelSpec:(id)arg1;
- (void)setVariant:(long long)arg1;
- (void)setWantsInlineHeader:(bool)arg1;
- (void)setWantsSubtitle:(bool)arg1;
- (void)setWantsTitle:(bool)arg1;
- (bool)shouldAccommodateLeadingButtonsLayout;
- (bool)shouldAvoidOverlapWithSecondaryToolbar;
- (bool)shouldButtonsFadeOutWhenReachingTop;
- (bool)shouldOmitYear;
- (bool)shouldTextFadeOutWhenReachingTop;
- (bool)showMainEllipsisButtonWhenSecondaryEllipsisButtonIsShown:(bool)arg1 selectButtonIsShown:(bool)arg2;
- (id)smallVariantSpec;
- (id)styleGuide;
- (id)subtitleDateFormatter;
- (bool)swapTitleWithSubtitle;
- (double)textFadeOutMinimumAlpha;
- (id)titleDateFormatter;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })titlePadding;
- (id)titleSubtitleLabelSpec;
- (long long)variant;
- (bool)wantsInlineHeader;
- (bool)wantsSubtitle;
- (bool)wantsTitle;

@end
