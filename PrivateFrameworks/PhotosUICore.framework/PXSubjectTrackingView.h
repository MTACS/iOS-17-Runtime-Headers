
@interface PXSubjectTrackingView : UIView <PTCinematographyScriptChanges> {
    bool  _badgeVisibleAndWillAutoClose;
    PXCinematicEditController * _cineController;
    PTCinematographyFrame * _cinematographyFrame;
    <PXSubjectTrackingViewDelegate> * _delegate;
    NSDictionary * _detectionViewCache;
    long long  _focusState;
    UIView * _focusStateBadge;
    NSTimer * _hideFocusStateBadgeTimer;
    long long  _inProgressTrackID;
    UIView * _inProgressTrackingView;
    bool  _isAnimating;
    double  _lastLayoutTime;
    <PXSubjectTrackingLayoutDelegate> * _layoutDelegate;
    NUMediaView * _mediaView;
    bool  _needsUpdateFrame;
    bool  _needsUpdateFrameTime;
    bool  _needsUpdateViewCache;
    id  _playbackTimeObserver;
    NSNumber * _primaryKey;
    bool  _viewCanBeEnabled;
    bool  _viewEnabled;
}

@property (nonatomic) bool badgeVisibleAndWillAutoClose;
@property (nonatomic, readonly) PXCinematicEditController *cineController;
@property (nonatomic, retain) PTCinematographyFrame *cinematographyFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXSubjectTrackingViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSDictionary *detectionViewCache;
@property (nonatomic, readonly) long long focusState;
@property (nonatomic, retain) UIView *focusStateBadge;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSTimer *hideFocusStateBadgeTimer;
@property (nonatomic) long long inProgressTrackID;
@property (nonatomic, retain) UIView *inProgressTrackingView;
@property (nonatomic) bool isAnimating;
@property (nonatomic) double lastLayoutTime;
@property (nonatomic) <PXSubjectTrackingLayoutDelegate> *layoutDelegate;
@property (nonatomic, readonly) NUMediaView *mediaView;
@property (nonatomic) bool needsUpdateFrame;
@property (nonatomic) bool needsUpdateFrameTime;
@property (nonatomic) bool needsUpdateViewCache;
@property (nonatomic, retain) id playbackTimeObserver;
@property (nonatomic, retain) NSNumber *primaryKey;
@property (readonly) Class superclass;
@property (nonatomic) bool viewCanBeEnabled;
@property (nonatomic) bool viewEnabled;

+ (struct CGPoint { double x1; double x2; })denormalizePoint:(struct CGPoint { double x1; double x2; })arg1 masterSize:(struct CGSize { double x1; double x2; })arg2 flipYCoordinate:(bool)arg3;

- (void).cxx_destruct;
- (id)_axDescriptionForCacheKey:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_currentCinematographyTime;
- (void)_disparitySampleFinishedWithResponse:(id)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 strong:(bool)arg4;
- (void)_finishedProcessingTrackedObject:(id)arg1;
- (bool)_focusOnFixedLocationAtDetection:(id)arg1 strong:(bool)arg2;
- (bool)_focusOnFixedLocationAtPoint:(struct CGPoint { double x1; double x2; })arg1 strong:(bool)arg2;
- (bool)_focusOnGroup:(long long)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 strong:(bool)arg3;
- (bool)_focusOnTrackWithID:(long long)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 strong:(bool)arg3;
- (id)_hitDetectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isValidTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_newTrackWasAddedAndFocusedAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_objectTrackingStartedAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_playbackTimeDidUpdate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_reframeWithinVideo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isFixedFocus:(bool)arg2 fixedFocusCenter:(struct CGPoint { double x1; double x2; })arg3;
- (void)_setPrimaryDetection:(id)arg1 focusState:(long long)arg2 animated:(bool)arg3;
- (double)_smoothenFromValue:(double)arg1 toNewValue:(double)arg2 forTime:(double)arg3 tolerance:(double)arg4;
- (void)_trackAndFocusObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 strong:(bool)arg2;
- (void)_trackedObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 failedWithError:(id)arg2;
- (void)_trackedObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 finishedWithResponse:(id)arg2 trackStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 strongTrack:(bool)arg4;
- (void)_trackedObjectWasUpdatedAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 trackedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 confidence:(float)arg3 shouldStop:(bool*)arg4;
- (void)_updateCinematographyFrameWithTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_updateDetectionViewCache;
- (void)_updateFocusStateAnimated:(bool)arg1;
- (long long)addFocusTrack:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 strong:(bool)arg3;
- (bool)badgeVisibleAndWillAutoClose;
- (id)cineController;
- (id)cinematographyFrame;
- (void)decisionsDidChangeInScript:(id)arg1 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
- (id)delegate;
- (id)detectionViewCache;
- (void)enableUIForCinematographyScriptLoad:(bool)arg1;
- (bool)focusOnDetection:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 strong:(bool)arg3;
- (bool)focusOnTrack:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 strong:(bool)arg3;
- (long long)focusState;
- (id)focusStateBadge;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDetection:(id)arg1;
- (void)framesDidChangeInScript:(id)arg1 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
- (void)handleDoubleSelectOnPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)handleInteractionBegan;
- (void)handleLongSelectOnPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)handleSingleSelectOnPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)hideFocusStateBadgeTimer;
- (long long)inProgressTrackID;
- (id)inProgressTrackingView;
- (id)initWithMediaView:(id)arg1 cineController:(id)arg2;
- (bool)isAnimating;
- (double)lastLayoutTime;
- (id)layoutDelegate;
- (void)layoutSubviews;
- (id)mediaView;
- (bool)needsUpdateFrame;
- (bool)needsUpdateFrameTime;
- (bool)needsUpdateViewCache;
- (struct CGPoint { double x1; double x2; })normalizedPointForViewPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)playbackTimeObserver;
- (id)primaryKey;
- (void)renderDidChange:(bool)arg1;
- (void)scriptDidUpdate;
- (void)setBadgeVisibleAndWillAutoClose:(bool)arg1;
- (void)setCinematographyFrame:(id)arg1;
- (void)setCinematographyFrame:(id)arg1 animate:(bool)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDetectionViewCache:(id)arg1;
- (void)setFocusState:(long long)arg1 detection:(id)arg2;
- (void)setFocusStateBadge:(id)arg1;
- (void)setFocusStateBadgeVisible:(bool)arg1 autoHide:(bool)arg2;
- (void)setHideFocusStateBadgeTimer:(id)arg1;
- (void)setInProgressTrackID:(long long)arg1;
- (void)setInProgressTrackingView:(id)arg1;
- (void)setIsAnimating:(bool)arg1;
- (void)setLastLayoutTime:(double)arg1;
- (void)setLayoutDelegate:(id)arg1;
- (void)setNeedsUpdateFrame;
- (void)setNeedsUpdateFrame:(bool)arg1;
- (void)setNeedsUpdateFrameTime;
- (void)setNeedsUpdateFrameTime:(bool)arg1;
- (void)setNeedsUpdateViewCache:(bool)arg1;
- (void)setPlaybackTimeObserver:(id)arg1;
- (void)setPrimaryKey:(id)arg1;
- (void)setViewCanBeEnabled:(bool)arg1;
- (void)setViewEnabled:(bool)arg1;
- (void)showTrackingInformationalString:(id)arg1;
- (bool)viewCanBeEnabled;
- (bool)viewEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewFrameForNormalizedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })viewPointForNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1;

@end
