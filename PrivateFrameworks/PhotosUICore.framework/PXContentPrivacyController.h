
@interface PXContentPrivacyController : PXObservable <PXChangeObserver, PXPhotoLibraryUIChangeObserver, PXSettingsKeyObserver> {
    <PXDisplayCollection> * _assetCollectionToObserve;
    id /* block */  _authChallengeHandlerForTesting;
    bool  _authenticationAttemptDidFailOrWasCancelled;
    NSMutableArray * _authenticationStack;
    long long  _authenticationType;
    PXSystemAuthenticationTypeObserver * _authenticationTypeObserver;
    unsigned long long  _autolockReason;
    NSTimer * _autolockTimer;
    unsigned long long  _cachedAuthenticationStackCount;
    bool  _contentPrivacyEnabled;
    NSNumber * _contentPrivacyEnabledNumberForTesting;
    LAContext * _currentAuthenticationContext;
    bool  _hasPerformedAuthenticationInStack;
    bool  _locked;
    NSString * _logIdentifier;
    NSMutableSet * _observers;
    NSNumber * _testingOverride_authenticationType;
    NSNumber * _testingOverride_autolockTimeout;
    NSNumber * _testingOverride_shouldLockAfterDelayWhenLeavingViewHierarchy;
    NSNumber * _testingOverride_shouldOnlyPerformAutomaticAuthenticationOnce;
    NSNumber * _testingOverride_shouldPerformAuthenticationOnAppearing;
    bool  _willPerformAuthenticationAutomatically;
}

@property (nonatomic, retain) <PXDisplayCollection> *assetCollectionToObserve;
@property (nonatomic, copy) id /* block */ authChallengeHandlerForTesting;
@property (nonatomic) bool authenticationAttemptDidFailOrWasCancelled;
@property (nonatomic, readonly) NSMutableArray *authenticationStack;
@property (nonatomic, readonly) long long authenticationType;
@property (nonatomic, readonly) PXSystemAuthenticationTypeObserver *authenticationTypeObserver;
@property (nonatomic) unsigned long long autolockReason;
@property (nonatomic, retain) NSTimer *autolockTimer;
@property (nonatomic) unsigned long long cachedAuthenticationStackCount;
@property (getter=isContentPrivacyEnabled, nonatomic, readonly) bool contentPrivacyEnabled;
@property (nonatomic, retain) NSNumber *contentPrivacyEnabledNumberForTesting;
@property (nonatomic, retain) LAContext *currentAuthenticationContext;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDelayedLockScheduled, nonatomic, readonly) bool delayedLockScheduled;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasPerformedAuthenticationInStack;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *identifier;
@property (getter=isLocked, nonatomic, readonly) bool locked;
@property (nonatomic, readonly) NSString *logIdentifier;
@property (nonatomic, retain) NSMutableSet *observers;
@property (getter=isPerformingAuthentication, nonatomic, readonly) bool performingAuthentication;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSNumber *testingOverride_authenticationType;
@property (nonatomic, retain) NSNumber *testingOverride_autolockTimeout;
@property (nonatomic, retain) NSNumber *testingOverride_shouldLockAfterDelayWhenLeavingViewHierarchy;
@property (nonatomic, retain) NSNumber *testingOverride_shouldOnlyPerformAutomaticAuthenticationOnce;
@property (nonatomic, retain) NSNumber *testingOverride_shouldPerformAuthenticationOnAppearing;
@property (nonatomic, readonly) bool willPerformAuthenticationAutomatically;

+ (id)privacyControllerForCollection:(id)arg1;
+ (void)tearDownPrivacyControllersIfNeeded;

- (void).cxx_destruct;
- (void)_beginObservingApplicationStateChangesAndSystemEvents;
- (void)_beginObservingAssetCollectionChanges;
- (void)_beginObservingContentPrivacyPrefs;
- (long long)_calculateAuthenticationTypeWithForcedUpdate:(bool)arg1;
- (void)_cancelAuthentication;
- (void)_cancelDelayedLockIfNeededWithReason:(id)arg1;
- (void)_finishAuthenticationChallengeWithCompletionHandler:(id /* block */)arg1 success:(bool)arg2 error:(id)arg3;
- (bool)_isContentPrivacyPrefEnabled;
- (void)_lockOrCancelAuthenticationIfNeeded;
- (void)_lockWithReasonForLogging:(id)arg1;
- (void)_logCurrentAuthenticationStack;
- (void)_performDelayedAuthenticationTypeUpdate;
- (void)_performUserAuthenticationIfNeededAfterForegrounding;
- (void)_performUserAuthenticationWithTitle:(id)arg1 passcodeTitle:(id)arg2 passcodeSubtitle:(id)arg3 reason:(id)arg4 completion:(id /* block */)arg5;
- (void)_preferencesDidChange;
- (void)_startAutolockTimerForReason:(unsigned long long)arg1 resetIfActive:(bool)arg2;
- (void)_stopAutolockTimer;
- (void)_stopObservingApplicationStateChanges;
- (void)_stopObservingAssetCollectionChanges;
- (void)_stopObservingContentPrivacyPrefs;
- (void)_updateAuthenticationType;
- (void)_updateCachedAuthenticationStackCount;
- (void)_updateContentPrivacyEnabled;
- (void)_updateWillPerformAuthenticationAutomatically;
- (void)addContextToStack:(id)arg1;
- (void)applicationDidEnterBackground;
- (void)applicationWillEnterForeground;
- (id)assetCollectionToObserve;
- (id /* block */)authChallengeHandlerForTesting;
- (bool)authenticationAttemptDidFailOrWasCancelled;
- (id)authenticationStack;
- (long long)authenticationType;
- (id)authenticationTypeObserver;
- (unsigned long long)autolockReason;
- (double)autolockTimeout;
- (id)autolockTimer;
- (unsigned long long)cachedAuthenticationStackCount;
- (void)cancelAuthentication;
- (void)cancelDelayedLockIfNeeded;
- (void)clearAuthenticationStack;
- (void)commonInitWithLogIdentifier:(id)arg1;
- (id)contentPrivacyEnabledNumberForTesting;
- (id)currentAuthenticationContext;
- (void)dealloc;
- (bool)hasPerformedAuthenticationInStack;
- (void)hostApplicationDidBecomeActiveFromNotification:(id)arg1;
- (void)hostApplicationWillResignActiveFromNotification:(id)arg1;
- (id)identifier;
- (id)initWithAssetCollectionToObserve:(id)arg1 logIdentifier:(id)arg2;
- (id)initWithContentPrivacyEnabledForTesting:(id)arg1 availableAuthenticationTypeForTesting:(id)arg2 assetCollectionToObserveForTesting:(id)arg3;
- (id)initWithLogIdentifier:(id)arg1;
- (bool)isContentPrivacyEnabled;
- (bool)isDelayedLockScheduled;
- (bool)isLocked;
- (bool)isPerformingAuthentication;
- (bool)isRunningInExtension;
- (void)lockImmediately;
- (id)logIdentifier;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (id)observers;
- (void)performUserAuthenticationIfNeededFromContext:(id)arg1;
- (void)performUserAuthenticationIfNeededWithLocalizedReason:(id)arg1 completion:(id /* block */)arg2;
- (void)performUserAuthenticationIfNeededWithTitle:(id)arg1 passcodeTitle:(id)arg2 passcodeSubtitle:(id)arg3 completion:(id /* block */)arg4;
- (void)photoLibraryDidChangeOnMainQueue:(id)arg1;
- (void)removeContextFromStack:(id)arg1;
- (void)resetHasPerformedAuthenticationInStack;
- (void)scheduleAuthenticationStackCountUpdate;
- (void)scheduleDelayedLock;
- (void)setAssetCollectionToObserve:(id)arg1;
- (void)setAssetCollectionToObserveForTesting:(id)arg1;
- (void)setAuthChallengeHandlerForTesting:(id /* block */)arg1;
- (void)setAuthenticationAttemptDidFailOrWasCancelled:(bool)arg1;
- (void)setAuthenticationType:(long long)arg1;
- (void)setAutolockReason:(unsigned long long)arg1;
- (void)setAutolockTimer:(id)arg1;
- (void)setCachedAuthenticationStackCount:(unsigned long long)arg1;
- (void)setContentPrivacyEnabled:(bool)arg1;
- (void)setContentPrivacyEnabledNumberForTesting:(id)arg1;
- (void)setCurrentAuthenticationContext:(id)arg1;
- (void)setHasPerformedAuthenticationInStack:(bool)arg1;
- (void)setLocked:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setTestingOverride_authenticationType:(id)arg1;
- (void)setTestingOverride_autolockTimeout:(id)arg1;
- (void)setTestingOverride_shouldLockAfterDelayWhenLeavingViewHierarchy:(id)arg1;
- (void)setTestingOverride_shouldOnlyPerformAutomaticAuthenticationOnce:(id)arg1;
- (void)setTestingOverride_shouldPerformAuthenticationOnAppearing:(id)arg1;
- (void)setWillPerformAuthenticationAutomatically:(bool)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (bool)shouldLockAfterDelayWhenLeavingViewHierarchy;
- (bool)shouldOnlyPerformAutomaticAuthenticationOnceInStack;
- (bool)shouldPerformAuthenticationUponAppearing;
- (id)testingOverride_authenticationType;
- (id)testingOverride_autolockTimeout;
- (id)testingOverride_shouldLockAfterDelayWhenLeavingViewHierarchy;
- (id)testingOverride_shouldOnlyPerformAutomaticAuthenticationOnce;
- (id)testingOverride_shouldPerformAuthenticationOnAppearing;
- (void)unlock;
- (void)updateAuthenticationTypeImmediately;
- (void)viewDidAppearForAuthenticationContext:(id)arg1;
- (void)viewDidDisappearForAuthenticationContext:(id)arg1 withNavigationState:(unsigned long long)arg2;
- (bool)willPerformAuthenticationAutomatically;

@end
