
@interface PXGDisplayAssetVideoPresentationController : PXObservable <PXChangeObserver, PXGMutableDisplayAssetVideoPresentationController_Private, PXStoryVideoPresentationController> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    long long  _actualPlayState;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _actualTime;
    NSString * _audioSessionCategory;
    <PXGDisplayAssetVideoPresentationControllerDelegate> * _delegate;
    long long  _desiredPlayState;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _desiredTime;
    <PXDisplayAsset> * _displayAsset;
    NSString * _identifier;
    bool  _isAtEnd;
    bool  _isCleanApertureCompensationEnabled;
    bool  _isCrossfadingFromStillToVideoEnabled;
    bool  _isDuckingOtherAudioEnabled;
    bool  _isLoopingEnabled;
    bool  _isMixingAudioWithOthersEnabled;
    bool  _isReadyForImmediatePlayback;
    bool  _isVisible;
    long long  _loadingPriority;
    PXVideoSessionManagerDisplayAssetOptions * _options;
    float  _pendingPrerollRate;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _pendingSeekTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _pendingSeekToleranceAfter;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _pendingSeekToleranceBefore;
    PXGVideoSessionPixelBufferSource * _pixelBufferSource;
    long long  _pixelBufferSourceCounter;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _playbackStartTime;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _playbackTimeRange;
    bool  _resetsDesiredPlayStateOnHide;
    bool  _shouldDisableAutomaticPixelBufferUpdates;
    bool  _shouldDisplayPreviousNonNullPixelBuffer;
    bool  _shouldFadeVolumeChange;
    struct CGSize { 
        double width; 
        double height; 
    }  _targetSize;
    NSMutableDictionary * _timeObserversByTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _videoDuration;
    PXVideoSession * _videoSession;
    PXVideoSessionManager * _videoSessionManager;
    void * _videoSessionPresenter;
    float  _volume;
}

@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *accessQueue;
@property (nonatomic, readonly) long long actualPlayState;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } actualTime;
@property (nonatomic, readonly) NSString *audioSessionCategory;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } beginningTime;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXGDisplayAssetVideoPresentationControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long desiredPlayState;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } desiredTime;
@property (nonatomic, readonly) NSString *diagnosticDescription;
@property (nonatomic, readonly) <PXDisplayAsset> *displayAsset;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic, readonly) bool isAtEnd;
@property (nonatomic, readonly) bool isCleanApertureCompensationEnabled;
@property (nonatomic, readonly) bool isCrossfadingFromStillToVideoEnabled;
@property (nonatomic, readonly) bool isDuckingOtherAudioEnabled;
@property (nonatomic, readonly) bool isLoopingEnabled;
@property (nonatomic, readonly) bool isMixingAudioWithOthersEnabled;
@property (nonatomic, readonly) bool isReadyForImmediatePlayback;
@property (nonatomic, readonly) bool isVisible;
@property (nonatomic, readonly) long long loadingPriority;
@property (nonatomic, readonly) PXVideoSessionManagerDisplayAssetOptions *options;
@property (nonatomic) float pendingPrerollRate;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } pendingSeekTime;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } pendingSeekToleranceAfter;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } pendingSeekToleranceBefore;
@property (nonatomic, retain) PXGVideoSessionPixelBufferSource *pixelBufferSource;
@property (nonatomic) long long pixelBufferSourceCounter;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } playbackStartTime;
@property (nonatomic, readonly) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } playbackTimeRange;
@property (nonatomic, readonly) bool resetsDesiredPlayStateOnHide;
@property (nonatomic, readonly) bool shouldDisableAutomaticPixelBufferUpdates;
@property (nonatomic, readonly) bool shouldDisplayPreviousNonNullPixelBuffer;
@property (nonatomic) bool shouldFadeVolumeChange;
@property (nonatomic, readonly) bool shouldRewindOnBackAction;
@property (readonly) Class superclass;
@property (nonatomic) struct CGSize { double x1; double x2; } targetSize;
@property (nonatomic, retain) NSMutableDictionary *timeObserversByTime;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } videoDuration;
@property (nonatomic, retain) PXVideoSession *videoSession;
@property (nonatomic, readonly) PXVideoSessionManager *videoSessionManager;
@property (nonatomic) float volume;

- (void).cxx_destruct;
- (void)_invalidatePresentationControllerState;
- (void)_invalidateVideoSession;
- (void)_notifyReachedTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_performPendingPrerollIfNeeded;
- (void)_performPendingSeekIfNeeded;
- (void)_performPrerollAtRate:(float)arg1;
- (void)_performSeekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)_prerollCompletedSuccessfully:(bool)arg1;
- (void)_setupPixelBufferSourceIfNeededWithMediaProvider:(id)arg1;
- (void)_setupVideoSessionIfNeededWithMediaProvider:(id)arg1;
- (bool)_timeConversionNeeded;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_timeConvertedFromVideoSessionTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })_timeRangeConvertedFromVideoSessionTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)_updatePresentationControllerState;
- (void)_updateVideoSession;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_videoSessionTimeConvertedFromTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })_videoSessionTimeRangeConvertedFromTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)accessQueue;
- (long long)actualPlayState;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })actualTime;
- (id)audioSessionCategory;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })beginningTime;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (long long)desiredPlayState;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })desiredTime;
- (id)diagnosticDescription;
- (id)displayAsset;
- (id)identifier;
- (id)init;
- (id)initWithDisplayAsset:(id)arg1 accessQueue:(id)arg2;
- (id)initWithDisplayAsset:(id)arg1 accessQueue:(id)arg2 videoSessionManager:(id)arg3 options:(id)arg4 loadingPriority:(long long)arg5;
- (bool)isAtEnd;
- (bool)isCleanApertureCompensationEnabled;
- (bool)isCrossfadingFromStillToVideoEnabled;
- (bool)isDuckingOtherAudioEnabled;
- (bool)isLoopingEnabled;
- (bool)isMixingAudioWithOthersEnabled;
- (bool)isPendingSeekScheduled;
- (bool)isReadyForImmediatePlayback;
- (bool)isVisible;
- (long long)loadingPriority;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (id)options;
- (float)pendingPrerollRate;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })pendingSeekTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })pendingSeekToleranceAfter;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })pendingSeekToleranceBefore;
- (void)performChanges:(id /* block */)arg1;
- (id)pixelBufferSource;
- (long long)pixelBufferSourceCounter;
- (id)pixelBufferSourceWithMediaProvider:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })playbackStartTime;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })playbackTimeRange;
- (void)prerollForImmediatePlaybackAtRate:(float)arg1 withMediaProvider:(id)arg2;
- (void)recyclePixelBufferSource;
- (bool)resetsDesiredPlayStateOnHide;
- (void)rewind;
- (void)seekToBeginning;
- (void)setActualPlayState:(long long)arg1;
- (void)setActualTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setAudioSessionCategory:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredPlayState:(long long)arg1;
- (void)setDesiredTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDesiredTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)setIsAtEnd:(bool)arg1;
- (void)setIsCleanApertureCompensationEnabled:(bool)arg1;
- (void)setIsCrossfadingFromStillToVideoEnabled:(bool)arg1;
- (void)setIsDuckingOtherAudioEnabled:(bool)arg1;
- (void)setIsLoopingEnabled:(bool)arg1;
- (void)setIsMixingAudioWithOthersEnabled:(bool)arg1;
- (void)setIsReadyForImmediatePlayback:(bool)arg1;
- (void)setIsVisible:(bool)arg1;
- (void)setPendingPrerollRate:(float)arg1;
- (void)setPendingSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPendingSeekToleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPendingSeekToleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPixelBufferSource:(id)arg1;
- (void)setPixelBufferSourceCounter:(long long)arg1;
- (void)setPlaybackStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPlaybackTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setResetsDesiredPlayStateOnHide:(bool)arg1;
- (void)setShouldDisableAutomaticPixelBufferUpdates:(bool)arg1;
- (void)setShouldDisplayPreviousNonNullPixelBuffer:(bool)arg1;
- (void)setShouldFadeVolumeChange:(bool)arg1;
- (void)setTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTimeObserversByTime:(id)arg1;
- (void)setVideoDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoSession:(id)arg1;
- (void)setVolume:(float)arg1;
- (void)setVolume:(float)arg1 withFade:(bool)arg2;
- (bool)shouldDisableAutomaticPixelBufferUpdates;
- (bool)shouldDisplayPreviousNonNullPixelBuffer;
- (bool)shouldFadeVolumeChange;
- (bool)shouldRewindOnBackAction;
- (void)startObservingBoundaryTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)stopObservingBoundaryTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)synchronouslySeekToDesiredTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 updatePixelBufferSource:(bool)arg2;
- (struct CGSize { double x1; double x2; })targetSize;
- (id)timeObserversByTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoDuration;
- (id)videoSession;
- (id)videoSessionManager;
- (id)videoSessionWithMediaProvider:(id)arg1;
- (float)volume;

@end
