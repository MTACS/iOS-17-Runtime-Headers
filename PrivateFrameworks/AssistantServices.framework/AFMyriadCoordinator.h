
@interface AFMyriadCoordinator : NSObject <AFNotifyObserverDelegate, WPHeySiriProtocol> {
    bool  _BLEActivityEnabled;
    bool  _BTLEReady;
    AFMyriadAdvertisementContextManager * _advContextManager;
    struct { 
        NSDate *advertTriggerAdvStartTime; 
        NSDate *advertTriggerEndTime; 
    }  _advTiming;
    float  _advertInterval;
    <AFArbitrationEventUpdatesDelegate> * _arbitrationEventsDelegate;
    AFMyriadEmergencyCallPunchout * _callPunchout;
    struct __CFNotificationCenter { } * _center;
    bool  _clientDoneRespondingToSlowdown;
    bool  _clientIsDeciding;
    bool  _clientIsDirectActivating;
    bool  _clientIsInEarActivation;
    bool  _clientIsListeningAfterRecentWin;
    bool  _clientIsRespondingToSlowdown;
    bool  _clientIsWatchActivation;
    bool  _clientIsWatchTrumpPromote;
    bool  _clientLostDueToTrumping;
    bool  _clientRecentlyLostElection;
    bool  _clientRespondingToCarPlay;
    int  _constantGoodness;
    AFMyriadAdvertisementContextRecord * _contextRecord;
    bool  _coordinationEnabled;
    AFMyriadContext * _currentMyriadContext;
    NSUUID * _currentRequestId;
    NSDateFormatter * _dateFormat;
    float  _delayTarget;
    id  _delegate;
    NSUUID * _designatedSelfID;
    int  _deviceAdjust;
    unsigned char  _deviceClass;
    NSString * _deviceClassName;
    double  _deviceDelay;
    unsigned char  _deviceGroup;
    double  _deviceInEarDelay;
    double  _deviceInEarInterval;
    double  _deviceTrumpDelay;
    double  _deviceVTEndtimeDistanceThreshold;
    bool  _ducking;
    AFNotifyStatePublisher * _electionBeginPublisher;
    AFNotifyStatePublisher * _electionLossPublisher;
    unsigned long long  _electionPublisherState;
    AFNotifyStatePublisher * _electionRepostWinDecisionPublisher;
    AFNotifyStatePublisher * _electionWinPublisher;
    NSUUID * _eventToken;
    AFMyriadGoodnessScoreEvaluator * _goodnessScoreEvaluator;
    WPHeySiri * _heySiriBTLE;
    struct { 
        bool didRequestForBTLEScan; 
        bool didRequestForBTLEAdvertisement; 
    }  _heySiriBTLEState;
    bool  _ignoreInTaskTimer;
    bool  _inSetupMode;
    bool  _inTask;
    unsigned char  _incomingAdjustment;
    NSMutableDictionary * _incomingTrumps;
    bool  _lastDecision;
    unsigned long long  _lastDecisionTime;
    double  _lastEmergencyAttempt;
    unsigned short  _lastPHash;
    NSDate * _lastWonBySmallAmountDate;
    unsigned long long  _latestRecordReceivedTime;
    bool  _listenTimerIsRunning;
    AFMyriadRecord * _maxSlowdownRecord;
    NSMutableDictionary * _multipleContinuations;
    NSObject<OS_dispatch_queue> * _myriadAdvertisementContextQueue;
    AFMyriadInstrumentation * _myriadInstrumentation;
    AFMyriadSession * _myriadSession;
    unsigned long long  _myriadState;
    AFNotifyObserver * _myriadStateMachineForceNoActivityObserver;
    NSObject<OS_dispatch_queue> * _myriadWorkQueue;
    int  _nDeltaTs;
    int  _nTimesContinued;
    int  _nTimesExtended;
    unsigned long long  _nextState;
    AFWatchdogTimer * _overallTimeout;
    AFMyriadRecord * _overrideMyriadRecord;
    AFPowerAssertionManager * _powerAssertionManager;
    AFMyriadPreferences * _preferences;
    AFNotifyObserver * _preferencesChangedNotification;
    NSData * _previousAdvertisedData;
    unsigned long long  _previousState;
    NSMutableDictionary * _previousTrumps;
    unsigned char  _productType;
    NSString * _productTypeName;
    long long  _recordType;
    NSMutableDictionary * _replies;
    NSMutableDictionary * _repliesBeforeDecision;
    NSMutableDictionary * _replyCounts;
    AFWatchdogTimer * _sfDiagnosticsTimer;
    SFDiagnostics * _sfdiagnostics;
    int  _slowdownMsecs;
    bool  _stateMachineEncounteredError;
    bool  _suppressLateTrigger;
    int  _testInducedSlowdownMsecs;
    NSObject<OS_dispatch_source> * _timer;
    NSString * _timerLabel;
    NSObject<OS_dispatch_source> * _timerSource;
    AFMyriadRecord * _triggerRecord;
    NSDate * _triggerTime;
    unsigned long long  _voiceTriggerTime;
    id /* block */  _waitForWiproxReadinessToScan;
    bool  _wasEmergency;
    struct { 
        NSObject<OS_dispatch_source> *waitTimer; 
        id /* block */ waitBlock; 
        bool isWaitTimerSuspended; 
    }  _wiproxReadinessTimer;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)clearCurrentCoordinator;
+ (id)currentCoordinator;
+ (void)didChangeDefaults;

- (void).cxx_destruct;
- (void)_addElectionAdvertisementDataToMyriadSession:(id)arg1;
- (void)_adjustActionWindowsFromSlowdown:(int)arg1;
- (void)_advertise:(id)arg1 afterDelay:(float)arg2 maxInterval:(float)arg3 andMoveTo:(unsigned long long)arg4;
- (void)_advertise:(id)arg1 andMoveTo:(unsigned long long)arg2;
- (void)_advertiseIndefinite:(id)arg1;
- (void)_advertiseSlowdown;
- (void)_advertiseSuppressTriggerInOutput;
- (void)_advertiseTrigger;
- (void)_advertiseWith:(id)arg1 afterDelay:(float)arg2 maxInterval:(float)arg3 thenExecute:(id /* block */)arg4;
- (void)_ageWedgeFilter;
- (void)_cancelOverallTimeout;
- (void)_cancelTimer;
- (void)_clearMyriadSession;
- (void)_clearWiProxReadinessTimer;
- (double)_contextFetchDelayForAdvertimentInterval:(double)arg1 advertisementDelay:(double)arg2;
- (void)_createDispatchTimerFor:(double)arg1 toExecute:(id /* block */)arg2;
- (void)_createDispatchTimerForEvent:(id)arg1 toExecute:(id /* block */)arg2;
- (void)_createDispatchTimerWithTime:(unsigned long long)arg1 toExecute:(id /* block */)arg2;
- (void)_createMyriadSessionIfRequired;
- (void)_createWaitWiProxTimer:(long long)arg1 waitBlock:(id /* block */)arg2;
- (bool)_deviceShouldContinue:(id)arg1;
- (void)_duringNextWindowEnterState:(unsigned long long)arg1;
- (void)_duringNextWindowExecute:(id /* block */)arg1;
- (void)_endAdvertising:(id /* block */)arg1;
- (id)_endAdvertisingAnalyticsContext:(bool)arg1;
- (void)_endAdvertisingWithDeviceProhibitions:(id)arg1;
- (void)_enterBLEDiagnosticMode;
- (void)_enterState:(unsigned long long)arg1;
- (void)_enteringIntoState:(unsigned long long)arg1 fromState:(unsigned long long)arg2;
- (void)_forceLocalWinner:(id)arg1;
- (void)_handleStateMachineErrorIfNeeded;
- (bool)_inTaskTriggerWasTooSoon;
- (void)_initDeviceClassAndAdjustments;
- (void)_initializeTimer;
- (void)_initializeWiProxReadinessTimer;
- (bool)_isAPhone:(unsigned char)arg1;
- (void)_leaveBLEDiagnosticMode;
- (void)_loseElection;
- (id)_myriadSession;
- (int)_myriadStateForSelf:(unsigned long long)arg1;
- (unsigned long long)_nextElectionPublisherState;
- (bool)_okayToSuppressOnOutput;
- (id)_phsSetupRecord;
- (void)_pushMyriadAdvertisementContextToContextCollectorWithAdvertisementInterval:(double)arg1 advertisementDelay:(double)arg2;
- (void)_readDefaults;
- (void)_resetActionWindows;
- (void)_resetAdvertisementTimings;
- (void)_resetAudioData;
- (void)_resumeWiProxReadinessTimer;
- (void)_setMyriadContext:(id)arg1;
- (void)_setOverallTimeout;
- (void)_setupActionWindows;
- (bool)_shouldContinueFor:(id)arg1;
- (bool)_shouldHandleEmergency;
- (bool)_shouldStopListeningBeforeAdvertising;
- (bool)_shouldUseContextCollector;
- (void)_signalEmergencyCallHandled;
- (id)_sortedReplies;
- (id)_sortedReplies:(id)arg1;
- (void)_startAdvertising:(id)arg1 afterDelay:(float)arg2 maxInterval:(float)arg3;
- (void)_startAdvertisingFromInTaskVoiceTrigger;
- (void)_startAdvertisingFromVoiceTrigger;
- (void)_startListenTimer;
- (void)_startListening:(id /* block */)arg1;
- (void)_startListeningAfterWiProxIsReady:(bool)arg1 inState:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_startTimer:(id)arg1 for:(float)arg2 thenEnterState:(unsigned long long)arg3;
- (void)_startTimer:(id)arg1 for:(float)arg2 thenExecute:(id /* block */)arg3;
- (id)_stateAsString;
- (id)_stateAsString:(unsigned long long)arg1;
- (void)_stopAdvertising:(id /* block */)arg1;
- (void)_stopAdvertisingAndListening;
- (void)_stopListening:(id /* block */)arg1;
- (void)_suppressDeviceIfNeededWithVoiceTriggerEndTime:(double)arg1 adverisementDispatchTime:(double)arg2;
- (void)_suspendWiProxReadinessTimer;
- (id)_testAndFilterAdvertisementsFromContextCollector:(id)arg1 voiceTriggerEndTime:(double)arg2 advertisementDispatchTime:(double)arg3 advertisement:(id)arg4;
- (bool)_testAndUpdateWedgeFilter:(id)arg1;
- (void)_trackHeySiriStartedAdvertisingAt:(unsigned long long)arg1;
- (void)_triggerABCForType:(id)arg1 context:(id)arg2;
- (id)_triggerTypeForArbitrationParticipationFrom:(long long)arg1;
- (void)_unduck;
- (void)_updateArbitrationParticipationContextWithCompletion:(id /* block */)arg1;
- (void)_updateRepliesWith:(id)arg1 id:(id)arg2 data:(id)arg3;
- (void)_updateVoiceTriggerTimeFromFile;
- (void)_waitWiProx:(long long)arg1 andExecute:(id /* block */)arg2;
- (void)_waitWiProxAndExecute:(id /* block */)arg1;
- (void)_winElection;
- (void)advertiseWith:(id)arg1;
- (void)advertiseWith:(id)arg1 afterDelay:(float)arg2 maxInterval:(float)arg3;
- (id)continuationRecord;
- (void)dealloc;
- (unsigned char)deviceClass;
- (unsigned char)deviceGroup;
- (float)deviceTrumpDelay;
- (id)directTriggerRecord;
- (id)emergencyHandledRecord;
- (id)emergencyRecord;
- (id)emptyRecord;
- (void)endAdvertising:(id /* block */)arg1;
- (void)endAdvertisingAfterDelay:(float)arg1;
- (void)endAdvertisingWithDeviceProhibitions:(id)arg1;
- (void)endTask;
- (void)enterState:(unsigned long long)arg1;
- (void)faceDetectedBoostWithMyriadContext:(id)arg1;
- (void)heySiri:(id)arg1 failedToStartAdvertisingWithError:(id)arg2;
- (void)heySiri:(id)arg1 failedToStartScanningWithError:(id)arg2;
- (void)heySiri:(id)arg1 foundDevice:(id)arg2 withInfo:(id)arg3;
- (void)heySiriAdvertisingPending:(id)arg1;
- (void)heySiriDidUpdateState:(id)arg1;
- (void)heySiriStartedAdvertising:(id)arg1;
- (void)heySiriStartedAdvertisingAt:(id)arg1 timeStamp:(unsigned long long)arg2;
- (void)heySiriStartedScanning:(id)arg1;
- (void)heySiriStoppedAdvertising:(id)arg1;
- (void)heySiriStoppedScanning:(id)arg1;
- (bool)inTask;
- (id)initWithDelegate:(id)arg1;
- (void)injectAdvertisementForTesting:(id)arg1 forDevice:(id)arg2;
- (void)instrumentationUpdateBoost:(unsigned char)arg1 value:(unsigned int)arg2;
- (id)lateSuppressionRecord;
- (void)myriadSession:(id /* block */)arg1;
- (void)notifyCurrentDecisionResult;
- (void)notifyObserver:(id)arg1 didReceiveNotificationWithToken:(int)arg2;
- (void)preheatWiProx;
- (void)readDefaults;
- (void)requestWillPresentUsefulUserResult;
- (void)resetMyriadCoordinator:(id /* block */)arg1;
- (void)resetReplies;
- (void)resetStateMachine;
- (id)responseObject:(unsigned short)arg1;
- (void)setCurrentRequestId:(id)arg1;
- (void)setInTask:(bool)arg1;
- (void)setupActionWindows;
- (void)setupAdvIntervalsInDelay:(float*)arg1 interval:(float*)arg2 withSlowdown:(int)arg3;
- (void)setupEnabled:(bool)arg1;
- (id)slowdownRecord:(unsigned short)arg1;
- (void)startAdvertising:(id)arg1 afterDelay:(float)arg2 maxInterval:(float)arg3;
- (void)startAdvertisingEmergency;
- (void)startAdvertisingEmergencyHandled;
- (void)startAdvertisingEmergencySignal;
- (void)startAdvertisingForPHSSetupAfterDelay:(float)arg1 maxInterval:(float)arg2;
- (void)startAdvertisingFromAlertFiringVoiceTrigger;
- (void)startAdvertisingFromAlertFiringVoiceTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromCarPlayTrigger;
- (void)startAdvertisingFromDirectTrigger;
- (void)startAdvertisingFromDirectTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromInEarTrigger;
- (void)startAdvertisingFromInTaskTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromInTaskVoiceTrigger;
- (void)startAdvertisingFromInTaskVoiceTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromOutgoingTrigger;
- (void)startAdvertisingFromOutgoingTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromVoiceTrigger;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(BOOL)arg1;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(BOOL)arg1 withContext:(id)arg2;
- (void)startAdvertisingFromVoiceTriggerWithContext:(id)arg1;
- (void)startAdvertisingFromVoiceTriggerWithGoodnessScoreContext:(id)arg1 withContext:(id)arg2;
- (void)startAdvertisingSlowdown:(unsigned short)arg1;
- (void)startListening;
- (void)startListening:(id /* block */)arg1;
- (void)startListeningToEmergencySignal;
- (void)startResponseAdvertising:(unsigned short)arg1;
- (void)startWatchAdvertisingFromDirectTrigger;
- (void)startWatchAdvertisingFromDirectTriggerWithContext:(id)arg1;
- (void)startWatchAdvertisingFromVoiceTrigger;
- (void)startWatchAdvertisingFromVoiceTriggerWithContext:(id)arg1;
- (id)stateAsString:(unsigned long long)arg1;
- (void)stopListening;
- (void)stopListening:(id /* block */)arg1;
- (void)updateRepliesWith:(id)arg1 id:(id)arg2 data:(id)arg3;
- (void)updateRequestId:(id)arg1;
- (id)voiceTriggerRecord;
- (void)waitWiProx:(long long)arg1 andExecute:(id /* block */)arg2;

@end
