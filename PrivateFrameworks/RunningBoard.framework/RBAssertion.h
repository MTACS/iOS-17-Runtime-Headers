
@interface RBAssertion : NSObject <RBStateCapturing> {
    bool  _active;
    RBSProcessAssertionInfo * _assertionInfo;
    NSArray * _attributes;
    double  _creationTime;
    NSString * _description;
    NSString * _explanation;
    RBSAssertionIdentifier * _identifier;
    RBAssertionIntransientState * _intransientState;
    unsigned char  _invalidationReason;
    NSDictionary * _lastConditions;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    RBProcess * _originator;
    NSSet * _originatorInheritances;
    bool  _persistent;
    id  _plugInHoldToken;
    bool  _suspended;
    <RBConcreteTargeting> * _target;
    RBProcess * _targetProcessForAbstract;
    id  _targetState;
    RBAssertionTransientState * _transientState;
}

@property (getter=isActive, nonatomic, readonly) bool active;
@property (nonatomic, readonly, copy) NSArray *attributes;
@property (nonatomic, readonly) double creationTime;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) bool definesRelativeStartTime;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long endPolicy;
@property (nonatomic, readonly, copy) NSString *explanation;
@property (nonatomic, readonly) bool hasDomainAttribute;
@property (nonatomic, readonly) bool hasHereditaryGrant;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) RBSAssertionIdentifier *identifier;
@property (nonatomic, readonly, copy) RBInheritanceCollection *inheritances;
@property (nonatomic, readonly, copy) RBAssertionIntransientState *intransientState;
@property (getter=isValid, nonatomic, readonly) bool invalid;
@property (nonatomic, readonly) bool invalidatesSynchronously;
@property (nonatomic, readonly) double invalidationDuration;
@property (nonatomic) unsigned char invalidationReason;
@property (nonatomic, readonly) unsigned long long legacyReason;
@property (nonatomic, readonly) RBProcess *originator;
@property (getter=isPersistent, nonatomic, readonly) bool persistent;
@property (nonatomic, retain) id plugInHoldToken;
@property (nonatomic, readonly, copy) RBProcessState *processState;
@property (nonatomic, readonly) unsigned long long runningReason;
@property (nonatomic, readonly) NSSet *sourceEnvironments;
@property (nonatomic, readonly) unsigned long long startPolicy;
@property (nonatomic, readonly, copy) NSString *stateCaptureTitle;
@property (readonly) Class superclass;
@property (getter=isSuspended, nonatomic, readonly) bool suspended;
@property (nonatomic, readonly) bool suspendsOnOriginatorSuspension;
@property (nonatomic, readonly, copy) <RBConcreteTargeting> *target;
@property (nonatomic, readonly) bool terminateTargetOnOriginatorExit;
@property (nonatomic, readonly) double warningDuration;

+ (id)assertionWithDescriptor:(id)arg1 target:(id)arg2 originator:(id)arg3 context:(id)arg4;
+ (id)assertionWithDescriptor:(id)arg1 target:(id)arg2 originator:(id)arg3 context:(id)arg4 creationTime:(double)arg5;
+ (id)assertionWithIdentifier:(id)arg1 target:(id)arg2 explanation:(id)arg3 attributes:(id)arg4 originator:(id)arg5 context:(id)arg6;

- (void).cxx_destruct;
- (void)activate;
- (void)applyToAssertionTransientState:(id)arg1 withAttributeContext:(id)arg2;
- (void)applyToProcessState:(id)arg1 withAttributeContext:(id)arg2;
- (void)applyToSystemState:(id)arg1 withAttributeContext:(id)arg2;
- (id)attributes;
- (id)captureState;
- (double)creationTime;
- (void)deactivate;
- (id)debugDescription;
- (bool)definesRelativeStartTime;
- (id)description;
- (unsigned long long)endPolicy;
- (id)explanation;
- (bool)hasDomainAttribute;
- (bool)hasHereditaryGrant;
- (id)identifier;
- (id)inheritances;
- (id)intransientState;
- (bool)invalidatesSynchronously;
- (double)invalidationDuration;
- (unsigned char)invalidationReason;
- (bool)isActive;
- (bool)isPersistent;
- (bool)isSuspended;
- (bool)isValid;
- (unsigned long long)legacyReason;
- (id)lock_targetProcessForAbstract;
- (unsigned long long)maxCPUUsageViolationPolicyForRole:(unsigned char)arg1;
- (id)originator;
- (id)plugInHoldToken;
- (id)processState;
- (bool)resolveStateWithContext:(id)arg1;
- (void)resume;
- (unsigned long long)runningReason;
- (void)setInvalidationReason:(unsigned char)arg1;
- (void)setPlugInHoldToken:(id)arg1;
- (void)setTargetProcessForAbstract:(id)arg1;
- (id)sourceEnvironments;
- (unsigned long long)startPolicy;
- (id)stateCaptureTitle;
- (void)suspend;
- (bool)suspendsOnOriginatorSuspension;
- (id)target;
- (bool)terminateTargetOnOriginatorExit;
- (id)updateProcessStateWithAttributeContext:(id)arg1;
- (double)warningDuration;

@end
