
@interface EMBaseMessageListItem : EMRepositoryObject <EFLoggable, EMBaseMessageListItemBuilder, EMMessageListItem, EMMutableMessageListItem> {
    long long  __internalID;
    NSArray * _bccList;
    NSURL * _brandIndicatorLocation;
    NSArray * _ccList;
    long long  _conversationID;
    long long  _conversationNotificationLevel;
    NSDate * _date;
    NSDate * _displayDate;
    ECMessageFlags * _flags;
    EMFollowUp * _followUp;
    bool  _hasAttachments;
    bool  _isBlocked;
    bool  _isCCMe;
    unsigned long long  _isEditable;
    bool  _isToMe;
    bool  _isVIP;
    NSArray * _mailboxObjectIDs;
    NSArray * _mailboxes;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _mailboxesLock;
    EMReadLater * _readLater;
    NSDate * _sendLaterDate;
    <ECEmailAddressConvertible> * _senderAddress;
    long long  _senderBucket;
    ECSubject * _subject;
    NSString * _summary;
    NSArray * _toList;
    long long  _unsubscribeType;
}

@property long long _internalID;
@property (nonatomic, copy) NSArray *bccList;
@property (nonatomic, retain) NSURL *brandIndicatorLocation;
@property (copy) NSArray *ccList;
@property long long conversationID;
@property long long conversationNotificationLevel;
@property unsigned long long count;
@property (retain) NSDate *date;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) bool deleteMovesToTrash;
@property (readonly, copy) NSString *description;
@property (retain) NSDate *displayDate;
@property (readonly) EFFuture *displayMessage;
@property (retain) <EMCollectionItemID> *displayMessageItemID;
@property (readonly) EMObjectID *displayMessageObjectID;
@property (nonatomic, readonly, copy) NSString *ef_publicDescription;
@property (copy) NSIndexSet *flagColors;
@property (retain) ECMessageFlags *flags;
@property (retain) EMFollowUp *followUp;
@property bool hasAttachments;
@property bool hasUnflagged;
@property (readonly) unsigned long long hash;
@property bool isBlocked;
@property bool isCCMe;
@property (readonly) bool isEditable;
@property bool isToMe;
@property bool isVIP;
@property (nonatomic, readonly) <EMCollectionItemID> *itemID;
@property (copy) NSArray *mailboxObjectIDs;
@property (copy) NSArray *mailboxes;
@property (readonly, copy) NSArray *mailboxesIfAvailable;
@property (nonatomic, readonly, copy) EMObjectID *objectID;
@property (retain) EMReadLater *readLater;
@property (nonatomic, readonly) EMMessageRepository *repository;
@property (retain) NSDate *sendLaterDate;
@property (nonatomic, retain) <ECEmailAddressConvertible> *senderAddress;
@property long long senderBucket;
@property (copy) NSArray *senderList;
@property (readonly) bool shouldArchiveByDefault;
@property (retain) ECSubject *subject;
@property (copy) NSString *summary;
@property (readonly) Class superclass;
@property (readonly) bool supportsArchiving;
@property (copy) NSArray *toList;
@property long long unsubscribeType;

+ (id)log;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_commonInitWithBaseBuilder:(id /* block */)arg1;
- (long long)_internalID;
- (id)bccList;
- (id)brandIndicatorLocation;
- (id)ccList;
- (long long)conversationID;
- (long long)conversationNotificationLevel;
- (unsigned long long)count;
- (id)date;
- (id)debugDescription;
- (bool)deleteMovesToTrash;
- (id)description;
- (id)displayDate;
- (id)displayMessage;
- (id)displayMessageItemID;
- (id)displayMessageObjectID;
- (id)ef_publicDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)flagColors;
- (id)flags;
- (id)followUp;
- (bool)hasAttachments;
- (bool)hasUnflagged;
- (id)initWithCoder:(id)arg1;
- (id)initWithObjectID:(id)arg1;
- (id)initWithObjectID:(id)arg1 baseBuilder:(id /* block */)arg2;
- (bool)isBlocked;
- (bool)isCCMe;
- (bool)isEditable;
- (bool)isToMe;
- (bool)isVIP;
- (id)itemID;
- (id)mailboxObjectIDs;
- (id)mailboxes;
- (id)mailboxesIfAvailable;
- (id)readLater;
- (id)repository;
- (id)sendLaterDate;
- (id)senderAddress;
- (long long)senderBucket;
- (id)senderList;
- (void)setBccList:(id)arg1;
- (void)setBrandIndicatorLocation:(id)arg1;
- (void)setCcList:(id)arg1;
- (void)setConversationID:(long long)arg1;
- (void)setConversationNotificationLevel:(long long)arg1;
- (void)setCount:(unsigned long long)arg1;
- (void)setDate:(id)arg1;
- (void)setDisplayDate:(id)arg1;
- (void)setDisplayMessageItemID:(id)arg1;
- (void)setFlagColors:(id)arg1;
- (void)setFlags:(id)arg1;
- (void)setFollowUp:(id)arg1;
- (void)setHasAttachments:(bool)arg1;
- (void)setHasUnflagged:(bool)arg1;
- (void)setIsBlocked:(bool)arg1;
- (void)setIsCCMe:(bool)arg1;
- (void)setIsToMe:(bool)arg1;
- (void)setIsVIP:(bool)arg1;
- (void)setMailboxObjectIDs:(id)arg1;
- (void)setMailboxes:(id)arg1;
- (void)setReadLater:(id)arg1;
- (void)setRepository:(id)arg1;
- (void)setSendLaterDate:(id)arg1;
- (void)setSenderAddress:(id)arg1;
- (void)setSenderBucket:(long long)arg1;
- (void)setSenderList:(id)arg1;
- (void)setSubject:(id)arg1;
- (void)setSummary:(id)arg1;
- (void)setToList:(id)arg1;
- (void)setUnsubscribeType:(long long)arg1;
- (void)set_internalID:(long long)arg1;
- (bool)shouldArchiveByDefault;
- (id)subject;
- (id)summary;
- (bool)supportsArchiving;
- (id)toList;
- (long long)unsubscribeType;
- (id)valueForUndefinedKey:(id)arg1;

@end
