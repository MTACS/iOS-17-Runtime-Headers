
@interface EMMessage : EMBaseMessageListItem <EFLoggable, EMContentItem, EMExtendedContentItem, EMMessageBuilder, EMMutableMessageListItem> {
    long long  __internalID;
    long long  _dataTransferByteCount;
    NSUUID * _documentID;
    int  _exchangeEventUID;
    bool  _isAvailableLocally;
    id /* block */  _loaderBlock;
    EMMailDropMetadata * _mailDropMetadata;
    long long  _storageByteCount;
}

@property long long _internalID;
@property (nonatomic, copy) NSArray *availableRepresentations;
@property (nonatomic, copy) NSArray *bccList;
@property (nonatomic, retain) NSURL *brandIndicatorLocation;
@property (copy) NSArray *ccList;
@property (nonatomic, copy) NSString *contentID;
@property long long conversationID;
@property long long conversationNotificationLevel;
@property unsigned long long count;
@property (nonatomic) long long dataTransferByteCount;
@property (retain) NSDate *date;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) bool deleteMovesToTrash;
@property (readonly, copy) NSString *description;
@property (retain) NSDate *displayDate;
@property (readonly) EFFuture *displayMessage;
@property (retain) <EMCollectionItemID> *displayMessageItemID;
@property (readonly) EMObjectID *displayMessageObjectID;
@property (nonatomic, copy) NSString *displayName;
@property (nonatomic, copy) NSUUID *documentID;
@property (nonatomic, readonly, copy) NSString *ef_publicDescription;
@property (nonatomic) int exchangeEventUID;
@property (copy) NSIndexSet *flagColors;
@property (retain) ECMessageFlags *flags;
@property (retain) EMFollowUp *followUp;
@property bool hasAttachments;
@property bool hasUnflagged;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAvailableLocally;
@property bool isBlocked;
@property bool isCCMe;
@property (readonly) bool isEditable;
@property bool isToMe;
@property bool isVIP;
@property (nonatomic, readonly) <EMCollectionItemID> *itemID;
@property (nonatomic, copy) id /* block */ loaderBlock;
@property (nonatomic, copy) EMMailDropMetadata *mailDropMetadata;
@property (nonatomic, readonly, copy) NSString *mailProviderDisplayNameForBIMI;
@property (copy) NSArray *mailboxObjectIDs;
@property (copy) NSArray *mailboxes;
@property (readonly, copy) NSArray *mailboxesIfAvailable;
@property (nonatomic, readonly, copy) EMMessageObjectID *objectID;
@property (retain) EMReadLater *readLater;
@property (nonatomic, readonly) EMMessageRepository *repository;
@property (retain) NSDate *sendLaterDate;
@property (nonatomic, retain) <ECEmailAddressConvertible> *senderAddress;
@property long long senderBucket;
@property (copy) NSArray *senderList;
@property (readonly) bool shouldArchiveByDefault;
@property (nonatomic) long long storageByteCount;
@property (retain) ECSubject *subject;
@property (copy) NSString *summary;
@property (readonly) Class superclass;
@property (readonly) bool supportsArchiving;
@property (copy) NSArray *toList;
@property (nonatomic, readonly, copy) UTType *type;
@property (nonatomic, copy) NSString *uniformTypeIdentifier;
@property long long unsubscribeType;

+ (id)_predicateForMessagesWithObjectIDConstantValue:(id)arg1 operatorType:(unsigned long long)arg2;
+ (id)combinedFlagsForMessageListItemFlags:(id)arg1 forDisplay:(bool)arg2;
+ (id)combinedFlagsForMessageListItems:(id)arg1;
+ (id)combinedFlagsForMessageListItems:(id)arg1 forDisplay:(bool)arg2;
+ (id)externalDataTypeIdentifiers;
+ (id)log;
+ (id)predicateForExcludingMessageWithObjectID:(id)arg1;
+ (id)predicateForExcludingMessagesWithObjectIDs:(id)arg1;
+ (id)predicateForMessageWithInternalID:(long long)arg1;
+ (id)predicateForMessageWithItemID:(id)arg1 mailboxPredicate:(id)arg2 mailboxTypeResolver:(id)arg3;
+ (id)predicateForMessageWithObjectID:(id)arg1;
+ (id)predicateForMessagesWithObjectIDs:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)uniformTypeIdentifier;

- (void).cxx_destruct;
- (void)_commonInitWithBuilder:(id /* block */)arg1;
- (long long)_internalID;
- (id)availableRepresentations;
- (id)cachedMetadataOfClass:(Class)arg1 forKey:(id)arg2;
- (id)contentID;
- (long long)dataTransferByteCount;
- (id)displayName;
- (id)documentID;
- (void)encodeWithCoder:(id)arg1;
- (int)exchangeEventUID;
- (id)initWithCoder:(id)arg1;
- (id)initWithObjectID:(id)arg1;
- (id)initWithObjectID:(id)arg1 builder:(id /* block */)arg2;
- (bool)isAvailableLocally;
- (bool)isInManagedAccountWithSourceMailboxScope:(id)arg1;
- (id)itemID;
- (id /* block */)loaderBlock;
- (id)mailDropMetadata;
- (id)mailProviderDisplayNameForBIMI;
- (id)repository;
- (id)requestRepresentationWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)requestRepresentationWithOptions:(id)arg1 delegate:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)senderDisplayNameUsingContactStore:(id)arg1;
- (void)setAvailableRepresentations:(id)arg1;
- (void)setCachedMetadata:(id)arg1 forKey:(id)arg2;
- (void)setContentID:(id)arg1;
- (void)setDataTransferByteCount:(long long)arg1;
- (void)setDisplayName:(id)arg1;
- (void)setDocumentID:(id)arg1;
- (void)setExchangeEventUID:(int)arg1;
- (void)setIsAvailableLocally:(bool)arg1;
- (void)setLoaderBlock:(id /* block */)arg1;
- (void)setMailDropMetadata:(id)arg1;
- (void)setRepository:(id)arg1;
- (void)setStorageByteCount:(long long)arg1;
- (void)setUniformTypeIdentifier:(id)arg1;
- (void)set_internalID:(long long)arg1;
- (bool)shouldShowReplyAll;
- (long long)storageByteCount;
- (id)type;
- (id)uniformTypeIdentifier;

@end
