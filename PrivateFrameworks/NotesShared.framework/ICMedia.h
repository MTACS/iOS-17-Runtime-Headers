
@interface ICMedia : ICCloudSyncingObject <ICCloudObject> {
    ICAssetGenerationManager * _generationManager;
    ICAccount * placeholderAccount;
}

@property (nonatomic, retain) ICAccount *account;
@property (nonatomic, retain) NSData *assetCryptoInitializationVector;
@property (nonatomic, retain) NSData *assetCryptoTag;
@property (nonatomic, retain) ICAttachment *attachment;
@property (nonatomic, readonly) NSString *cacheKey;
@property (nonatomic, readonly) ICAccount *containerAccount;
@property (nonatomic, readonly) <ICMediaCryptoStrategy> *cryptoStrategy;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSString *filename;
@property (nonatomic, copy) NSString *generation;
@property (nonatomic, readonly) ICAssetGenerationManager *generationManager;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isInICloudAccount;
@property (nonatomic, readonly) bool isValidObject;
@property (nonatomic, readonly, copy) NSString *loggingDescription;
@property (nonatomic, readonly) bool needsToBeDeletedFromCloud;
@property (nonatomic, readonly) bool needsToBeFetchedFromCloud;
@property (nonatomic, readonly) bool needsToBePushedToCloud;
@property (nonatomic, readonly) bool needsToSaveUserSpecificRecord;
@property (nonatomic, readonly) NSManagedObjectID *objectID;
@property (nonatomic) ICAccount *placeholderAccount;
@property (nonatomic, readonly, copy) CKRecordID *recordID;
@property (nonatomic, readonly, copy) NSString *recordType;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSSet *urlsToConsiderForCloudBackup;
@property (nonatomic, readonly, copy) CKRecordID *userSpecificRecordID;
@property (nonatomic, readonly, retain) CKRecord *userSpecificServerRecord;
@property (nonatomic, readonly) bool wantsUserSpecificRecord;

+ (id)allMediaInContext:(id)arg1;
+ (id)containerDirectoryURLForMediaWithIdentifier:(id)arg1 account:(id)arg2;
+ (void)deleteMedia:(id)arg1;
+ (void)enumerateMediaInContext:(id)arg1 batchSize:(unsigned long long)arg2 saveAfterBatch:(bool)arg3 usingBlock:(id /* block */)arg4;
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)exportableContainerDirectoryURLForMediaWithIdentifier:(id)arg1 account:(id)arg2;
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;
+ (id)keyPathsForValuesAffectingParentCloudObject;
+ (id)mediaIdentifiersForAccount:(id)arg1;
+ (id)mediaWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)newMediaWithAttachment:(id)arg1;
+ (id)newMediaWithAttachment:(id)arg1 forData:(id)arg2 filename:(id)arg3 error:(id*)arg4;
+ (id)newMediaWithAttachment:(id)arg1 forFileWrapper:(id)arg2 error:(id*)arg3;
+ (id)newMediaWithAttachment:(id)arg1 forURL:(id)arg2 error:(id*)arg3;
+ (id)newMediaWithIdentifier:(id)arg1 account:(id)arg2;
+ (id)newMediaWithIdentifier:(id)arg1 attachment:(id)arg2;
+ (void)purgeMedia:(id)arg1;
+ (void)purgeMediaFilesForIdentifiers:(id)arg1 account:(id)arg2;
+ (void)undeleteMedia:(id)arg1;

- (void).cxx_destruct;
- (void)accountWillChangeToAccount:(id)arg1;
- (void)applyRandomCryptoGooIfNeeded;
- (void)awakeFromFetch;
- (id)cacheKey;
- (id)cloudAccount;
- (id)containerAccount;
- (id)containerDirectoryURL;
- (id)cryptoStrategyProtocol;
- (id)data;
- (id)dataWithoutImageMarkupMetadata:(bool)arg1;
- (id)decryptedData;
- (void)deleteExportableMedia;
- (void)deleteFromLocalDatabase;
- (id)encryptedMediaFallbackURL;
- (id)encryptedMediaURL;
- (id)exportableContainerDirectoryURL;
- (id)exportableMediaURL;
- (id)filename;
- (void)fixBrokenReferences;
- (id)generationManager;
- (bool)hasAllMandatoryFields;
- (bool)hasFile;
- (id)ic_loggingValues;
- (bool)isArchivedDirectory;
- (bool)isInICloudAccount;
- (bool)isValid;
- (id)makeCloudKitRecordForApproach:(long long)arg1 mergeableFieldState:(id)arg2;
- (void)markForDeletion;
- (id)mediaArchiveFallbackURL;
- (id)mediaArchiveURL;
- (id)mediaFallbackURL;
- (id)mediaTarArchiveURL;
- (id)mediaURL;
- (bool)mergeCloudKitRecord:(id)arg1 accountID:(id)arg2 approach:(long long)arg3 mergeableFieldState:(id)arg4;
- (bool)needsToBePushedToCloud;
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;
- (id)objectsToBeDeletedBeforeThisObject;
- (id)parentCloudObject;
- (id)parentCloudObjectForMinimumSupportedVersionPropagation;
- (id)parentEncryptableObject;
- (id)placeholderAccount;
- (id)prepareExportableMediaURL;
- (void)prepareForDeletion;
- (id)recordType;
- (id)recordZoneName;
- (void)setAttachment:(id)arg1;
- (void)setFilename:(id)arg1;
- (void)setPlaceholderAccount:(id)arg1;
- (bool)shouldSyncMinimumSupportedNotesVersion;
- (bool)supportsDeletionByTTL;
- (bool)supportsEncryptedValuesDictionary;
- (void)unmarkForDeletion;
- (void)updateFlagToExcludeFromCloudBackup;
- (id)urlsToConsiderForCloudBackup;
- (bool)writeData:(id)arg1 error:(id*)arg2;
- (bool)writeDataFromAsset:(id)arg1 accountID:(id)arg2 isArchivedDirectory:(bool)arg3 error:(id*)arg4;
- (bool)writeDataFromFileURL:(id)arg1 error:(id*)arg2;
- (bool)writeDataFromFileWrapper:(id)arg1 error:(id*)arg2;
- (void)writeDataFromItemProvider:(id)arg1 checkForMarkupData:(bool)arg2 completionBlock:(id /* block */)arg3;
- (bool)writeDataWithBlock:(id /* block */)arg1 error:(id*)arg2;

@end
