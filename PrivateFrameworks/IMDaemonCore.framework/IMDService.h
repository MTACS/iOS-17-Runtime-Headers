
@interface IMDService : NSObject <IMSystemMonitorListener> {
    NSDictionary * _accountDefaults;
    bool  _blockPrefWriting;
    NSBundle * _bundle;
    NSDictionary * _cachedServiceDefaults;
    NSDictionary * _cachedSetupServiceDefaults;
    unsigned int  _idSensitivity;
    NSString * _internalName;
    NSDictionary * _serviceDefaults;
    NSDictionary * _serviceProperties;
    Class  _sessionClass;
}

@property (nonatomic, readonly) Class accountClass;
@property (nonatomic, readonly) NSBundle *bundle;
@property (nonatomic, readonly) unsigned long long caseInsensitivityByHandleType;
@property (nonatomic, readonly) bool chatsIgnoreLoginStatus;
@property (nonatomic, readonly) NSDictionary *defaultAccountSettings;
@property (nonatomic, readonly) bool disallowDeactivation;
@property (getter=isDiscontinued, nonatomic, readonly) bool discontinued;
@property (nonatomic, readonly) bool groupsMergeDisplayNames;
@property (nonatomic, readonly) bool handleIDInsensitivityIsCarrierBased;
@property (nonatomic, readonly) unsigned int idSensitivity;
@property (getter=isIDSBased, nonatomic, readonly) bool idsBased;
@property (nonatomic, readonly) bool ignoresNetworkConnectivity;
@property (nonatomic, readonly) NSString *internalName;
@property (getter=isLegacy, nonatomic, readonly) bool legacy;
@property (nonatomic, readonly) bool needsLogin;
@property (nonatomic, readonly) bool needsPassword;
@property (nonatomic, readonly) long long protocolVersion;
@property (nonatomic, readonly) NSArray *replicationServices;
@property (nonatomic, readonly) long long replicationSourceID;
@property (nonatomic, readonly) bool requiresHost;
@property (nonatomic, readonly) bool requiresSingleAccount;
@property (nonatomic, readonly) NSDictionary *serviceDefaults;
@property (nonatomic, readonly) NSDictionary *serviceDefaultsForSetup;
@property (nonatomic, readonly) NSString *serviceDomain;
@property (nonatomic, retain) NSDictionary *serviceProperties;
@property (nonatomic, readonly) Class sessionClass;
@property (nonatomic, readonly) bool shouldBeAlwaysLoggedIn;
@property (nonatomic, readonly) bool shouldCreateActiveAccounts;
@property (nonatomic, readonly) bool shouldForceAccountsActive;
@property (nonatomic, readonly) bool shouldForceAccountsConnected;
@property (nonatomic, readonly) bool supportsAuthorization;
@property (nonatomic, readonly) bool supportsDatabase;
@property (nonatomic, readonly) bool supportsMutatingGroupMembers;
@property (nonatomic, readonly) bool supportsOneSessionForAllAccounts;
@property (nonatomic, readonly) bool supportsPresence;
@property (nonatomic, readonly) bool supportsRegistration;
@property (nonatomic, readonly) bool wantsNullHostReachability;

- (void).cxx_destruct;
- (id)_copyServicePropertiesFromIMServiceBundle:(id)arg1;
- (id)_defaultDefaults;
- (id)_oldServiceDomain;
- (void)_reallyUnloadServiceBundle;
- (id)_serviceDefaultsForDomain:(id)arg1;
- (id)_serviceDomain;
- (void)accountAdded:(id)arg1;
- (Class)accountClass;
- (void)accountRemoved:(id)arg1;
- (id)bundle;
- (unsigned long long)caseInsensitivityByHandleType;
- (bool)chatsIgnoreLoginStatus;
- (bool)clearOneTimeImportAccounts;
- (id)createDiscontinuedAccount;
- (void)dealloc;
- (id)defaultAccountSettings;
- (void)delayedSaveSettings;
- (id)description;
- (void)disableAccount:(id)arg1;
- (bool)disallowDeactivation;
- (void)enableAccount:(id)arg1;
- (bool)groupsMergeDisplayNames;
- (bool)handleIDInsensitivityIsCarrierBased;
- (unsigned int)idSensitivity;
- (bool)ignoresNetworkConnectivity;
- (id)initWithBundle:(id)arg1;
- (id)internalName;
- (bool)isDiscontinued;
- (bool)isIDSBased;
- (bool)isLegacy;
- (void)loadServiceBundle;
- (id)mainService;
- (bool)needsLogin;
- (bool)needsPassword;
- (id)newAccountWithAccountDefaults:(id)arg1 accountID:(id)arg2;
- (id)oldInternalName;
- (long long)protocolVersion;
- (void)purgeMemoryCaches;
- (id)replicationServices;
- (long long)replicationSourceID;
- (bool)requiresHost;
- (bool)requiresSingleAccount;
- (void)saveSettings;
- (id)serviceDefaults;
- (id)serviceDefaultsForSetup;
- (id)serviceDomain;
- (id)serviceProperties;
- (Class)sessionClass;
- (void)setServiceProperties:(id)arg1;
- (bool)shouldBeAlwaysLoggedIn;
- (bool)shouldCreateActiveAccounts;
- (bool)shouldForceAccountsActive;
- (bool)shouldForceAccountsConnected;
- (bool)supportsAuthorization;
- (bool)supportsDatabase;
- (bool)supportsMutatingGroupMembers;
- (bool)supportsOneSessionForAllAccounts;
- (bool)supportsPresence;
- (bool)supportsRegistration;
- (void)synchronizeServiceDefaults;
- (void)systemDidEnterMemoryPressure;
- (void)systemDidStartBackup;
- (bool)wantsNullHostReachability;

@end
