
@interface UITextRangeView : UIView <UIPointerInteractionDelegate, UITextRangeAdjustmentInteractionDelegate> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _activeTouchPoint;
    bool  _baseIsStart;
    UISelectionGrabberCustomPath * _endCustomPath;
    UIPointerInteraction * _pointerInteraction;
    UISelectionGrabberCustomPath * _startCustomPath;
    UITouch * m_activeTouch;
    bool  m_animateUpdate;
    struct CGPoint { 
        double x; 
        double y; 
    }  m_basePoint;
    bool  m_commandsWereShowing;
    UIResponder<UITextInput> * m_container;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_endEdge;
    UISelectionGrabber * m_endGrabber;
    struct CGPoint { 
        double x; 
        double y; 
    }  m_extentPoint;
    bool  m_inGesture;
    struct CGPoint { 
        double x; 
        double y; 
    }  m_initialExtentPoint;
    bool  m_inputViewIsChanging;
    bool  m_isClearingRange;
    bool  m_magnifying;
    int  m_mode;
    UIView * m_rectContainerView;
    NSMutableArray * m_rectViews;
    NSArray * m_rects;
    bool  m_rotating;
    bool  m_scaling;
    bool  m_scrolling;
    UITextSelectionView * m_selectionView;
    bool  m_shouldStayVisible;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_startEdge;
    UISelectionGrabber * m_startGrabber;
    bool  m_willBeginMagnifying;
}

@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } activeTouchPoint;
@property (nonatomic) bool animateUpdate;
@property (nonatomic, readonly) bool areSelectionRectsVisible;
@property (nonatomic, readonly) bool autoscrolled;
@property (nonatomic) bool baseIsStart;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } basePoint;
@property (nonatomic) bool commandsWereShowing;
@property (nonatomic, readonly) UIResponder<UITextInput> *container;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDisplayingVerticalSelection, nonatomic, readonly) bool displayingVerticalSelection;
@property (nonatomic, retain) UISelectionGrabberCustomPath *endCustomPath;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } endEdge;
@property (nonatomic, retain) UISelectionGrabber *endGrabber;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } extentPoint;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inGesture;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialExtentPoint;
@property (nonatomic) bool inputViewIsChanging;
@property (nonatomic) bool isClearingRange;
@property (nonatomic) bool isScrolling;
@property (nonatomic) bool magnifying;
@property (nonatomic) int mode;
@property (nonatomic, retain) NSArray *rects;
@property (nonatomic) bool rotating;
@property (nonatomic) bool scaling;
@property (nonatomic, readonly) UITextSelectionView *selectionView;
@property (nonatomic) bool shouldStayVisible;
@property (nonatomic, retain) UISelectionGrabberCustomPath *startCustomPath;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } startEdge;
@property (nonatomic, retain) UISelectionGrabber *startGrabber;
@property (readonly) Class superclass;
@property (nonatomic) bool willBeginMagnifying;

- (void).cxx_destruct;
- (void)_cancelGrabberTransitionOutAnimations:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_edgeHitRectForEdgeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 grabber:(id)arg2 precision:(unsigned long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_endEdgeHitRectWithPrecision:(unsigned long long)arg1;
- (bool)_endIsHorizontal;
- (bool)_gestureRecognizerShouldReceiveTouch:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (void)_setGrabber:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 center:(struct CGPoint { double x1; double x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_startEdgeHitRectWithPrecision:(unsigned long long)arg1;
- (bool)_startIsHorizontal;
- (void)_updateGrabbersVisibility:(bool)arg1 animated:(bool)arg2;
- (struct CGPoint { double x1; double x2; })activeTouchPoint;
- (void)animateHighlighterDelayedFadeInOnLayer:(id)arg1;
- (void)animateHighlighterExpanderAnimation;
- (void)animateHighlighterExpanderOnLayer:(id)arg1 withOffset:(struct CGPoint { double x1; double x2; })arg2;
- (bool)animateUpdate;
- (bool)areSelectionRectsVisible;
- (bool)autoscrolled;
- (bool)baseIsStart;
- (struct CGPoint { double x1; double x2; })basePoint;
- (void)beginMagnifying;
- (void)cancelDelayedActions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForTextRangeAdjustmentInteraction:(id)arg1;
- (void)clearRangeAnimated:(bool)arg1;
- (bool)commandsWereShowing;
- (id)container;
- (id)containerCoordinateSpaceForTextRangeAdjustmentInteraction:(id)arg1;
- (struct CGPoint { double x1; double x2; })convertFromMagnifierPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)didRotate;
- (void)didScroll;
- (void)doneMagnifying;
- (id)endCustomPath;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })endEdge;
- (id)endGrabber;
- (struct CGPoint { double x1; double x2; })extentPoint;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)inGesture;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 selectionView:(id)arg2;
- (struct CGPoint { double x1; double x2; })initialExtentPoint;
- (void)inputViewDidChange;
- (bool)inputViewIsChanging;
- (void)inputViewWillChange;
- (bool)isClearingRange;
- (bool)isDisplayingVerticalSelection;
- (bool)isScrolling;
- (unsigned long long)loupeOrientationForTextRangeAdjustmentInteraction:(id)arg1;
- (struct CGPoint { double x1; double x2; })magnifierPoint;
- (bool)magnifying;
- (int)mode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })paddedTextRangeAdjustmentHitRegionForEdge:(unsigned long long)arg1 precision:(unsigned long long)arg2;
- (bool)pointCloserToEnd:(struct CGPoint { double x1; double x2; })arg1 startEdge:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 endEdge:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (void)prepareForMagnification;
- (id)rects;
- (void)removeFromSuperview;
- (bool)rotating;
- (void)scaleDidChange;
- (void)scaleWillChange;
- (bool)scaling;
- (id)selectionView;
- (void)setAnimateUpdate:(bool)arg1;
- (void)setBaseIsStart:(bool)arg1;
- (void)setCommandsWereShowing:(bool)arg1;
- (void)setEndCustomPath:(id)arg1;
- (void)setEndEdge:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEndGrabber:(id)arg1;
- (void)setInGesture:(bool)arg1;
- (void)setInitialExtentPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInputViewIsChanging:(bool)arg1;
- (void)setIsClearingRange:(bool)arg1;
- (void)setIsScrolling:(bool)arg1;
- (void)setMagnifierOrientation;
- (void)setMagnifying:(bool)arg1;
- (void)setMode:(int)arg1;
- (void)setRects:(id)arg1;
- (void)setRotating:(bool)arg1;
- (void)setScaling:(bool)arg1;
- (void)setShouldStayVisible:(bool)arg1;
- (void)setStartCustomPath:(id)arg1;
- (void)setStartEdge:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setStartGrabber:(id)arg1;
- (void)setWillBeginMagnifying:(bool)arg1;
- (bool)shouldHitTestGrabbers;
- (bool)shouldShowGrabbers;
- (bool)shouldStayVisible;
- (void)startAnimating;
- (id)startCustomPath;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })startEdge;
- (id)startGrabber;
- (void)stopAnimating;
- (void)textRangeAdjustmentInteraction:(id)arg1 didBeginAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)textRangeAdjustmentInteraction:(id)arg1 didEndAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)textRangeAdjustmentInteraction:(id)arg1 selectionMoved:(struct CGPoint { double x1; double x2; })arg2 withTouchPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)textRangeAdjustmentInteraction:(id)arg1 shouldBeginAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)textRangeAdjustmentInteraction:(id)arg1 shouldDisplayLoupeForTouchType:(long long)arg2;
- (bool)textRangeAdjustmentInteractionShouldApplyTouchOffset:(id)arg1;
- (void)textRangeAdjustmentInteractionWasCancelled:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textRangeAdjustmentRectForEdge:(unsigned long long)arg1;
- (id)textRangeAdjustmentViewForEdge:(unsigned long long)arg1;
- (void)updateAfterEffectiveModeChange;
- (void)updateBaseAndExtentPointsFromEdges;
- (void)updateBaseIsStartWithDocumentPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateDots;
- (void)updateEdges;
- (void)updateGrabbers;
- (void)updateRectViews;
- (void)updateSelectionWithDocumentPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)willBeginMagnifying;
- (void)willRotate;
- (void)willScroll;

@end
