
@interface UITextView : UIScrollView <ABText, MULabelViewProtocol, NCTextSupporting, PKAppearanceObject, UIContentSizeCategoryAdjusting, UIFindInteractionDelegate, UIKeyboardInput, UILetterformAwareAdjusting, UITextAutoscrolling, UITextDragSupporting, UITextDraggable, UITextDropSupporting, UITextDroppable, UITextInput, UITextInputControllerDelegate, UITextInputPrivate, UITextInputTraits_Private, UITextPasteConfigurationSupporting, UITextPasteConfigurationSupporting_Internal, UITextSearching, UIViewGhostedRangeSupporting, WFInputViewMutable, _UILayoutBaselineUpdating, _UIMultilineTextContentSizing, _UITextContainerViewDelegate, _UITextContent, _UITextFormattingViewControllerDelegate, _UITextItemInteracting, _UITextSearching, _UITextViewContentPaddingDelegate, _UIViewBaselineSpacing, _UIViewLanguageAwareAdjusting> {
    bool  __dci_findInteractionEnabled;
    bool  _adjustsFontForContentSizeCategory;
    UIAutoscroll * _autoscroll;
    struct CGSize { 
        double width; 
        double height; 
    }  _beforeFreezingFrameSize;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _beforeFreezingTextContainerInset;
    long long  _borderStyle;
    double  _bottomContentInsetAdjustmentForTextFormattingController;
    _UITextViewContentPadding * _bottomContentPadding;
    bool  _canShowTextFormattingOptions;
    _UICharacterStreamingManager * _characterStreamingManager;
    bool  _clearsOnInsertion;
    _UITextContainerView * _containerView;
    long long  _contentSizeUpdateSeqNo;
    CUICatalog * _cuiCatalog;
    unsigned long long  _dataDetectorTypes;
    unsigned long long  _defaultTextPreviewOptions;
    bool  _didDisableAutomaticKeyboardBehaviorForTextFormatting;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _duringFreezingTextContainerInset;
    UIFindInteraction * _findInteraction;
    bool  _findInteractionEnabled;
    double  _firstBaselineOffsetFromTop;
    bool  _forceSelectionDisplayForTextFormatting;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameOfTrailingWhitespace;
    _UITextStorageDraggableGeometry * _geometry;
    UIView * _inputAccessoryView;
    UITextInputController * _inputController;
    id  _inputDelegate;
    UIView * _inputView;
    UITextInteractionAssistant * _interactionAssistant;
    _UITextSizeCache * _intrinsicSizeCache;
    double  _lastBaselineOffsetFromBottom;
    _UITextLayoutView * _layoutView;
    NSDictionary * _linkTextAttributes;
    double  _multilineContextWidth;
    double  _offsetFromScrollPosition;
    NSAttributedString * _overriddenPlaceholder;
    long long  _overriddenPlaceholderAlignment;
    <UITextPasteDelegate> * _pasteDelegate;
    UILabel * _placeholderLabel;
    double  _preferredMaxLayoutWidth;
    struct CGPoint { 
        double x; 
        double y; 
    }  _scrollEndDraggingVelocity;
    _UITextViewRestorableScrollPosition * _scrollPosition;
    unsigned long long  _scrollPositionDontRecordCount;
    _UITextViewRestorableScrollPosition * _scrollTarget;
    _UITextViewSearchableObject * _searchableObject;
    UIView * _selectionContainerView;
    NSDictionary * _siriParameters;
    NSTextContainer * _textContainer;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _textContainerInsetAdjustment;
    <UITextDragDelegate> * _textDragDelegate;
    <UITextDragDropSupport> * _textDragDropSupport;
    long long  _textDragOptions;
    <UITextDropDelegate> * _textDropDelegate;
    UIBarButtonItemGroup * _textFormattingAssistantBarGroup;
    bool  _textFormattingControllerPresentationDeferred;
    id  _textFormattingKeyboardSuppressionAssertion;
    UITextFormattingViewController * _textFormattingViewController;
    UITextInputTraits * _textInputTraits;
    _UITextInteractableItemCache * _textInteractableItemCache;
    long long  _textKitCodingFlavor;
    _UITextLayoutControllerBase<_UITextLayoutController> * _textLayoutController;
    bool  _textLayoutManagerEnabled;
    NSTextStorage * _textStorage;
    _UITextViewContentPadding * _topContentPadding;
    struct { 
        unsigned int needsScrollToSelectionAfterLayout : 1; 
        unsigned int editable : 1; 
        unsigned int reentrancyGuard : 1; 
        unsigned int usesExplicitPreferredMaxLayoutWidth : 1; 
        unsigned int interactiveSelectionDisabled : 1; 
        unsigned int selectable : 1; 
        unsigned int shouldPresentSheetsInAWindowLayeredAboveTheKeyboard : 1; 
        unsigned int shouldAutoscrollAboveBottom : 1; 
        unsigned int containerViewSizeInvalid : 1; 
        unsigned int isAnimatingPaste : 1; 
        unsigned int textSizeCacheEnabled : 1; 
        unsigned int showsEditMenu : 1; 
        unsigned int transitioningFromNSTextLayoutManagerToNSLayoutManager : 1; 
        unsigned int extremeSizingEnabled : 1; 
        unsigned int sizingRule : 1; 
        unsigned int wantsContentAwareTypesettingLanguage : 1; 
    }  _tvFlags;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _unadjustedTextContainerInset;
    bool  _unfreezingTextContainerSize;
    _UITextViewVisualStyle * _visualStyle;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (setter=_setCropDrawingAttachmentsWhenViewIsSmaller:, nonatomic) bool _cropDrawingAttachmentsWhenViewIsSmaller;
@property (getter=_dci_findInteraction, nonatomic, readonly) _UIFindInteraction *_dci_findInteraction;
@property (getter=_dci_isFindInteractionEnabled, setter=_dci_setFindInteractionEnabled:, nonatomic) bool _dci_findInteractionEnabled;
@property (setter=_setDrawsDebugBaselines:, nonatomic) bool _drawsDebugBaselines;
@property (getter=_isExtremeSizingEnabled, setter=_setExtremeSizingEnabled:, nonatomic) bool _extremeSizingEnabled;
@property (setter=_setHyphenationFactor:, nonatomic) float _hyphenationFactor;
@property (setter=_setInteractionState:, nonatomic, copy) id _interactionState;
@property (nonatomic, readonly) bool _isHandwritingToolSelected;
@property (nonatomic, copy) NSAttributedString *_mapsui_attributedText;
@property (nonatomic, copy) NSString *_mapsui_text;
@property (nonatomic, readonly) RTIInputSystemSourceSession *_rtiSourceSession;
@property (nonatomic) bool _systemCursorAccessoriesDisabled;
@property (nonatomic) long long _textInputSource;
@property (nonatomic, retain) _UITextInteractableItemCache *_textInteractableItemCache;
@property (setter=_setTool:, nonatomic, copy) PKTool *_tool;
@property (nonatomic, copy) NSString *ab_text;
@property (nonatomic, copy) NSDictionary *ab_textAttributes;
@property (nonatomic) bool acceptsDictationSearchResults;
@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsInitialEmojiKeyboard;
@property (nonatomic) bool acceptsPayloads;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property (nonatomic) bool allowsDefaultTighteningForTruncation;
@property (nonatomic) bool allowsEditingTextAttributes;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (copy) NSAttributedString *attributedText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic) long long borderStyle;
@property (nonatomic) bool clearsOnInsertion;
@property (nonatomic) struct CGPoint { double x1; double x2; } contentOffsetForSameViewDrops;
@property (nonatomic) bool contentsIsSingleValue;
@property (nonatomic, readonly) long long cursorBehavior;
@property (nonatomic) unsigned long long dataDetectorTypes;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deferBecomingResponder;
@property (nonatomic) <UITextViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry;
@property (nonatomic) bool disableHandwritingKeyboard;
@property (nonatomic) bool disableInputBars;
@property (nonatomic) bool disablePrediction;
@property (nonatomic) bool displaySecureEditsUsingPlainText;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (nonatomic) <UITextViewDrawingDelegate> *drawingDelegate;
@property (getter=isEditable, nonatomic) bool editable;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic, readonly) UIFindInteraction *findInteraction;
@property (getter=isFindInteractionEnabled, nonatomic) bool findInteractionEnabled;
@property (getter=isFingerDrawingEnabled, nonatomic) bool fingerDrawingEnabled;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets;
@property (nonatomic, retain) UIFont *font;
@property (nonatomic) bool forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) bool forceDisableDictation;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic) bool forceFloatingKeyboard;
@property (nonatomic) bool forceSpellingDictation;
@property (nonatomic) bool hasDefaultContents;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction;
@property (nonatomic, readonly) PKSelectionInteraction *ic_pkSelectionInteraction;
@property (nonatomic, readonly) PKTiledView *ic_pkTiledView;
@property (nonatomic, retain) NSArray *ic_selectedRanges;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } ic_textContainerOrigin;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } ic_visibleRange;
@property (nonatomic, readonly) double idealWidth;
@property (nonatomic, copy) PKInk *ink;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic, retain) UIView *inputAccessoryView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, retain) UIView *inputView;
@property (retain) UIView *inputView;
@property (nonatomic, readonly) id insertDictationResultPlaceholder;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, copy) id interactionState;
@property (nonatomic) bool isCarPlayIdiom;
@property (nonatomic, readonly) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, readonly) NSLayoutManager *layoutManager;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic) long long lineBreakMode;
@property (nonatomic, copy) PKLinedPaper *linedPaper;
@property (nonatomic, copy) NSDictionary *linkTextAttributes;
@property (nonatomic) bool loadKeyboardsForSiriLanguage;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (getter=nc_isMenuEnabled, setter=nc_setMenuEnabled:, nonatomic) bool nc_menuEnabled;
@property (setter=nc_setNumberOfLines:, nonatomic) unsigned long long nc_numberOfLines;
@property (nonatomic) long long numberOfLines;
@property (getter=isPaperEnabled, nonatomic) bool paperEnabled;
@property (nonatomic, retain) UIImage *paperTexture;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic, copy) UIPasteConfiguration *pasteConfiguration;
@property (nonatomic) <UITextPasteDelegate> *pasteDelegate;
@property (nonatomic) bool preferOnlineDictation;
@property (nonatomic) long long preferredKeyboardStyle;
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) bool roundedFont;
@property (getter=isRulerEnabled, nonatomic) bool rulerEnabled;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (getter=isSelectable, nonatomic) bool selectable;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } selectedRange;
@property (copy) UITextRange *selectedTextRange;
@property (readonly) <NSCoding><NSCopying> *selectedTextSearchDocument;
@property (nonatomic) long long selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } selectionEdgeInsets;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) bool showDictationButton;
@property (nonatomic) long long sizingRule;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (getter=isStylusDrawingEnabled, nonatomic) bool stylusDrawingEnabled;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UISupplementalLexicon *supplementalLexicon;
@property (nonatomic, retain) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic, readonly) bool supportsImagePaste;
@property (nonatomic, readonly) bool supportsTextReplacement;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, copy) UIColor *textColor;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, readonly) NSTextContainer *textContainer;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } textContainerInset;
@property (nonatomic, copy) NSString *textContentType;
@property (getter=isTextDragActive, nonatomic, readonly) bool textDragActive;
@property (nonatomic) <UITextDragDelegate> *textDragDelegate;
@property (nonatomic, readonly) UIDragInteraction *textDragInteraction;
@property (nonatomic) long long textDragOptions;
@property (getter=isTextDropActive, nonatomic, readonly) bool textDropActive;
@property (nonatomic) <UITextDropDelegate> *textDropDelegate;
@property (nonatomic, readonly) UIDropInteraction *textDropInteraction;
@property (nonatomic, readonly) <UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic, readonly) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (nonatomic, readonly) NSTextLayoutManager *textLayoutManager;
@property (getter=_isTextLayoutManagerEnabled, nonatomic, readonly) bool textLayoutManagerEnabled;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic, readonly) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) long long textScriptType;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic, readonly) NSTextStorage *textStorage;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, retain) UIColor *tintColor;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (setter=ts_setMarginTop:, nonatomic) unsigned long long ts_marginTop;
@property (nonatomic, copy) NSDictionary *typingAttributes;
@property (nonatomic, retain) UIColor *underlineColorForSpelling;
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useInterfaceLanguageForLocalization;
@property (nonatomic) bool usesStandardTextScaling;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange;
@property (nonatomic, retain) _UITextViewVisualStyle *visualStyle;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_defaultFont;
+ (id)_defaultTextColor;
+ (bool)_isTextLayoutManagerEnabled;
+ (id)textViewUsingTextLayoutManager:(bool)arg1;

- (void).cxx_destruct;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_addShortcut:(id)arg1;
- (void)_adjustBottomContentInsetForTextFormattingController:(bool)arg1;
- (void)_adjustFontForAccessibilityTraits:(bool)arg1;
- (void)_adjustFontForTypesettingLanguage;
- (bool)_allowAnimatedUpdateSelectionRectViews;
- (bool)_allowHighlightForTextInteractableItem:(id)arg1;
- (bool)_allowInteraction:(long long)arg1 forTextInteractableItem:(id)arg2;
- (id)_allowedTypingAttributes;
- (bool)_allowsOverflowForIntrinsicSizeCalculation;
- (id)_anyTextItemConstrainedToLineAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_applyOptionsToGeometry;
- (id)_attributedStringForInsertionOfAttributedString:(id)arg1;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 inContainer:(id)arg3 isGuide:(bool)arg4;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 nextToNeighbor:(id)arg3 edge:(int)arg4 attribute:(long long)arg5 multiplier:(double)arg6;
- (double)_baselineOffsetFromBottom;
- (struct { double x1; double x2; })_baselineOffsetsAtSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingRectForRange:(id)arg1;
- (void)_cancelDataDetectors;
- (void)_clearHighlightView;
- (void)_commonInitWithTextContainer:(id)arg1 decoding:(bool)arg2 editable:(bool)arg3 selectable:(bool)arg4 draggable:(bool)arg5 textLayoutManagerEnabled:(bool)arg6;
- (void)_configureForLayoutCalculation:(id)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_configureWithTextContainer:(id)arg1 layoutManager:(id)arg2 textLayoutManagerEnabled:(bool)arg3;
- (void)_constrainTiledRenderingToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_containerSizeForBoundsSize:(struct CGSize { double x1; double x2; })arg1 allowingOverflow:(bool)arg2;
- (id)_containerView;
- (struct CGPoint { double x1; double x2; })_contentOffsetForScrollToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGPoint { double x1; double x2; })_contentOffsetForScrollingToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_contentView;
- (id)_cuiCatalog;
- (id)_cuiStyleEffectConfiguration;
- (id)_currentDefaultAttributes;
- (double)_currentPreferredMaxLayoutWidth;
- (id)_dci_findInteraction;
- (bool)_dci_isFindInteractionEnabled;
- (void)_dci_setFindInteractionEnabled:(bool)arg1;
- (id)_defaultFocusEffect;
- (unsigned long long)_defaultTextPreviewOptions;
- (void)_define:(id)arg1;
- (bool)_delegatesAllowingLinkInteraction;
- (bool)_delegatesAllowingTextItemInteractions;
- (bool)_delegatesAllowingTextItemMenuInteraction;
- (bool)_delegatesAllowingTextItemPrimaryActionInteraction;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (void)_diagnoseFocusabilityForReport:(id)arg1;
- (void)_didFinishSpeechRecognition;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (void)_didRecognizeSpeechStrings:(id)arg1;
- (void)_didRecognizeSpeechTokens:(id)arg1;
- (bool)_disableAutomaticKeyboardBehavior;
- (void)_disableTiledViews;
- (void)_dismissTextFormattingControllerIfNeededWithAnimation:(bool)arg1;
- (bool)_drawsDebugBaselines;
- (unsigned long long)_effectiveDataDetectorTypes;
- (id)_effectivePasteConfiguration;
- (void)_enableSiriAnimationDictationStyle;
- (long long)_encodedTextKitFlavor;
- (void)_ensureCleanedUp;
- (void)_findSelected:(id)arg1;
- (bool)_finishResignFirstResponder;
- (double)_firstBaselineOffsetFromTop;
- (id)_fontInfoForBaselineSpacing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameOfTrailingWhitespace;
- (bool)_freezeTextContainerSize;
- (id)_getDelegateZoomView;
- (bool)_hasBaseline;
- (bool)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long*)arg1;
- (bool)_hasFontInfoForVerticalBaselineSpacing;
- (bool)_implementsEditMenu;
- (id)_implicitPasteConfigurationClasses;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textLayoutManagerEnabled:(bool)arg2;
- (id)_inputController;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)_installContainerViewAtIndex:(unsigned long long)arg1;
- (bool)_interactionPossibleWithAttachment:(id)arg1;
- (id)_interactionRequestForItem:(id)arg1;
- (id)_interactionState;
- (double)_internalFirstBaselineOffsetFromTop;
- (double)_internalLastBaselineOffsetFromBottom;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_invalidateContainerViewSize;
- (bool)_isDisplayingLookupViewController;
- (bool)_isDisplayingReferenceLibraryViewController;
- (bool)_isDisplayingShareViewController;
- (bool)_isDisplayingShortcutViewController;
- (bool)_isDisplayingTextService;
- (bool)_isExtremeSizingEnabled;
- (bool)_isInCompactHorizontalSizeClass;
- (bool)_isInteractiveTextSelectionDisabled;
- (bool)_isSystemAttachment:(id)arg1;
- (bool)_isTextLayoutManagerEnabled;
- (bool)_isTextSizeCacheEnabled;
- (void)_keyboardDidShow:(id)arg1;
- (void)_keyboardFrameDidChange:(id)arg1;
- (id)_layoutDebuggingTitle;
- (void)_layoutPlaceholder;
- (void)_layoutText;
- (id)_linkTextAttributesForLink:(id)arg1 forCharacterAtIndex:(unsigned long long)arg2;
- (void)_logWarningForMenuControllerUsage;
- (id)_menuConfigurationForTextInteractableItem:(id)arg1 defaultMenu:(id)arg2;
- (bool)_mightHaveInteractableItems;
- (bool)_mightHaveSelection;
- (double)_multilineContextWidth;
- (bool)_needsDoubleUpdateConstraintsPass;
- (id)_newContainerViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2 textLayoutController:(id)arg3;
- (id)_newTextContainer;
- (id)_newTextKit1LayoutControllerWithTextContainer:(id)arg1 layoutManager:(id)arg2 textStorage:(id)arg3;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (void)_observedTextViewDidChange:(id)arg1;
- (bool)_ownsInputAccessoryView;
- (void)_pasteAttributedString:(id)arg1 pasteAsRichText:(bool)arg2;
- (void)_performTextKit1LayoutCalculation:(id /* block */)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_performTextKit2LayoutCalculation:(id /* block */)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (id)_placeholderLabel;
- (void)_populateArchivedSubviews:(id)arg1;
- (double)_preferredMaxLayoutWidth;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_presentTextFormattingController;
- (bool)_preserveSelectionDisplayForTextFormatting;
- (id)_previewRendererForRange:(id)arg1 unifyRects:(bool)arg2;
- (id)_primaryActionForTextInteractableItem:(id)arg1 defaultAction:(id)arg2;
- (void)_promptForReplace:(id)arg1;
- (id)_rangeForTextKitRanges:(id)arg1;
- (bool)_reconfigureWithLayoutManager:(id)arg1 triggeredByLayoutManagerAccess:(bool)arg2 triggeringSelector:(SEL)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectForScrollToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectToScrollToVisibleInCellInWindow:(id)arg1;
- (void)_registerUndoOperationForReplacementWithActionName:(id)arg1 replacementText:(id)arg2;
- (void)_resetDataDetectorsResults;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (id)_resolvedTypesettingLanguage:(id)arg1;
- (id)_restorableScrollPosition;
- (id)_restorableScrollPositionForStateRestoration;
- (bool)_restoreFirstResponder;
- (void)_restoreScrollPosition:(id)arg1 animated:(bool)arg2;
- (void)_restoreSize:(struct { bool x1; bool x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })arg1 afterLayoutCalculation:(id)arg2;
- (void)_resyncContainerFrameForNonAutolayout;
- (void)_resyncContainerFrameForNonAutolayoutDeferringSizeToFit:(bool)arg1;
- (struct { bool x1; bool x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })_saveSizeBeforeLayoutCalculation:(id)arg1;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 animated:(bool)arg2;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toVisibleInContainingScrollView:(bool)arg2;
- (void)_scrollSelectionToVisibleInContainingScrollView;
- (void)_scrollSelectionToVisibleInContainingScrollView:(bool)arg1;
- (void)_scrollToCaretIfNeeded;
- (void)_scrollToSelectionIfNeeded;
- (void)_scrollViewAnimationEnded:(id)arg1 finished:(bool)arg2;
- (void)_scrollViewDidEndDraggingWithDeceleration:(bool)arg1;
- (void)_scrollViewWillEndDraggingWithVelocity:(struct CGPoint { double x1; double x2; })arg1 targetContentOffset:(struct CGPoint { double x1; double x2; }*)arg2;
- (id)_selectionContainerViewAboveText;
- (void)_selectionMayChange:(id)arg1;
- (void)_setAllowedTypingAttributes:(id)arg1;
- (void)_setContentOffsetWithoutRecordingScrollPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setCuiCatalog:(id)arg1;
- (void)_setCuiStyleEffectConfiguration:(id)arg1;
- (void)_setDefaultTextPreviewOptions:(unsigned long long)arg1;
- (void)_setDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (void)_setDrawsDebugBaselines:(bool)arg1;
- (void)_setEncodedTextKitFlavor:(long long)arg1;
- (void)_setExtremeSizingEnabled:(bool)arg1;
- (void)_setFrameOrBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromOldRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 settingAction:(id /* block */)arg3;
- (void)_setFreezeTextContainerSize:(bool)arg1;
- (void)_setInteractionState:(id)arg1;
- (void)_setInteractiveTextSelectionDisabled:(bool)arg1;
- (void)_setMultilineContextWidth:(double)arg1;
- (void)_setNeedsTextLayout;
- (void)_setOverridePlaceholder:(id)arg1 alignment:(long long)arg2;
- (void)_setPreferredMaxLayoutWidth:(double)arg1;
- (void)_setShowsEditMenu:(bool)arg1;
- (void)_setSiriAnimationDictationStyleWithCharacterInsertionRate:(double)arg1 minimumDurationBetweenHypotheses:(double)arg2;
- (void)_setTextColor:(id)arg1;
- (void)_setTextSizeCacheEnabled:(bool)arg1;
- (void)_setTypingAttributesTextColor:(id)arg1;
- (void)_setUpWithTextContainer:(id)arg1 textLayoutManagerEnabled:(bool)arg2;
- (void)_setWantsContentAwareTypesettingLanguage:(bool)arg1;
- (void)_setupDefaultStyleEffectConfiguration;
- (void)_share:(id)arg1;
- (bool)_shouldAppendTextInViewDescription;
- (bool)_shouldBecomeEditableUponBecomingTargetOfKeyboardEventDeferringEnvironment;
- (bool)_shouldBecomeEditableUponFocus;
- (bool)_shouldCollectAsKeyView;
- (bool)_shouldHideInputViewsForTextFormatting;
- (bool)_shouldInvalidateBaselineConstraintsForSize:(struct CGSize { double x1; double x2; })arg1 oldSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)_shouldObscureInput;
- (bool)_shouldScrollEnclosingScrollView;
- (bool)_shouldShowEditMenu;
- (bool)_shouldStartDataDetectors;
- (bool)_shouldSuppressSelectionCommands;
- (void)_showTextFormattingOptions:(id)arg1;
- (bool)_showsEditMenu;
- (void)_startDataDetectors;
- (void)_startDataDetectorsIfNeeded;
- (void)_startSuppressingKeyboardForTextFormatting:(id)arg1;
- (void)_stopSuppressingKeyboardForTextFormatting:(id)arg1;
- (void)_syncTypingAttributesToTextContainerAttributesForExtraLineFragment;
- (id)_systemDefaultFocusGroupIdentifier;
- (id)_targetedPreviewForHighlightRange:(id)arg1;
- (id)_targetedPreviewForTextInteractableItem:(id)arg1 dismissing:(bool)arg2;
- (void)_textContainerSizeDidChange:(id)arg1;
- (double)_textFormattingControllerOverlapHeight;
- (void)_textFormattingRequestsFirstResponderResignation:(id)arg1;
- (void)_textFormattingRequestsFirstResponderRestoration:(id)arg1;
- (id)_textGeometry;
- (id)_textInputTraits;
- (id)_textInputViewForAddingGestureRecognizers;
- (void)_textInteractableItem:(id)arg1 willDismissMenuWithAnimator:(id)arg2;
- (void)_textInteractableItem:(id)arg1 willDisplayMenuWithAnimator:(id)arg2;
- (id)_textInteractableItemAtPoint:(struct CGPoint { double x1; double x2; })arg1 precision:(unsigned long long)arg2;
- (id)_textInteractableItemCache;
- (id)_textItemForItem:(id)arg1;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (void)_textStorageDidProcessEditing:(id)arg1;
- (void)_textViewContentPaddingDidChange:(id)arg1;
- (void)_textViewDidDismissTextFormattingOptions;
- (void)_textViewWillPresentTextFormattingOptions;
- (unsigned long long)_totalNumberOfTextViewsInLayoutManager;
- (void)_translate:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_unconstrainTiledRendering;
- (void)_updateBaselineInformationDependentOnBounds;
- (void)_updateContainerTileAndSizingFlags;
- (void)_updateContentSize;
- (void)_updateFrameOfTrailingWhitespace:(struct CGSize { double x1; double x2; })arg1;
- (void)_updatePlaceholderVisibility;
- (void)_updateSelectableInteractions;
- (void)_updateSelectionGestures;
- (void)_updateTextContainerSizeAndSizeToFit;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (void)_updateTextFormattingController;
- (void)_updateTextFormattingControllerPresentationSource;
- (void)_updateTextFormattingGroupInInputAssistantItem;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_visibleRangeWithLayout:(bool)arg1;
- (id)_visualSelectionRangeForExtent:(id)arg1 forPoint:(struct CGPoint { double x1; double x2; })arg2 fromPosition:(id)arg3 inDirection:(long long)arg4;
- (bool)_wantsBaselineUpdatingFollowingConstraintsPass;
- (bool)_wantsContentAwareTypesettingLanguage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (void)addGhostedRange:(id)arg1;
- (void)addInvisibleRange:(id)arg1;
- (void)addTextAlternatives:(id)arg1;
- (void)addTextAlternativesDisplayStyle:(long long)arg1 toRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)adjustedContentInsetDidChange;
- (bool)adjustsFontForContentSizeCategory;
- (void)alignCenter:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignRight:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)allowsAttachments;
- (bool)allowsDraggingAttachments;
- (bool)allowsEditingTextAttributes;
- (void)applyGrammarCheckingIndication;
- (id)attributedPlaceholder;
- (id)attributedText;
- (id)attributedTextInRange:(id)arg1;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (void)becomeDropResponder;
- (bool)becomeFirstResponder;
- (bool)becomesEditableWithGestures;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (long long)borderStyle;
- (id)bottomContentPadding;
- (bool)canBecomeDropResponder;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canResignFirstResponder;
- (void)cancelAutoscroll;
- (void)captureTextFromCamera:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)clearAllDecoratedFoundText;
- (bool)clearsOnInsertion;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)compareFoundRange:(id)arg1 toRange:(id)arg2 inDocument:(id)arg3;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (struct CGPoint { double x1; double x2; })contentOffsetForSameViewDrops;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (unsigned long long)dataDetectorTypes;
- (void)dealloc;
- (id)debugDescription;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (void)decodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)decorateFoundTextRange:(id)arg1 inDocument:(id)arg2 usingStyle:(long long)arg3;
- (void)decreaseSize:(id)arg1;
- (void)deleteBackward;
- (void)didBeginTextSearchOperation;
- (void)didEndTextSearchOperation;
- (void)disableClearsOnInsertion;
- (void)draggingFinished:(id)arg1;
- (void)draggingStarted;
- (void)droppingFinished;
- (void)droppingStarted;
- (id)editMenuForTextRange:(id)arg1 suggestedActions:(id)arg2;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)endFloatingCursor;
- (id)endOfDocument;
- (void)endSelectionChange;
- (id)extractWordArrayFromTokensArray:(id)arg1;
- (void)find:(id)arg1;
- (void)findAndReplace:(id)arg1;
- (id)findInteraction;
- (void)findInteraction:(id)arg1 didBeginFindSession:(id)arg2;
- (void)findInteraction:(id)arg1 didEndFindSession:(id)arg2;
- (id)findInteraction:(id)arg1 sessionForView:(id)arg2;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)font;
- (bool)forceDisableDictation;
- (bool)forceEnableDictation;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)increaseSize:(id)arg1;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2 textLayoutManagerEnabled:(bool)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 font:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)inputAccessoryView;
- (id)inputDelegate;
- (id)inputView;
- (void)insertAttributedText:(id)arg1;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertText:(id)arg1;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;
- (void)insertText:(id)arg1 style:(long long)arg2 alternatives:(id)arg3;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)interactionAssistant;
- (id)interactionState;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidateDropCaret;
- (void)invalidateIntrinsicContentSize;
- (bool)isAccessibilityElementByDefault;
- (bool)isEditable;
- (bool)isEditableForTextContainerView:(id)arg1;
- (bool)isEditing;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isFindInteractionEnabled;
- (bool)isSelectable;
- (bool)isTextDragActive;
- (bool)isTextDropActive;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (bool)keyboardInput:(id)arg1 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (bool)keyboardInputChanged:(id)arg1;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (id)largeContentTitle;
- (id)layoutManager;
- (void)layoutSubviews;
- (double)lineHeight;
- (id)linkTextAttributes;
- (id)linkTextAttributesForTextContainerView:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (unsigned long long)marginTop;
- (id)markedTextRange;
- (id)markedTextStyle;
- (double)maxTileHeight;
- (id)metadataDictionariesForDictationResults;
- (id)methodSignatureForSelector:(SEL)arg1;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (id)pasteDelegate;
- (void)pasteItemProviders:(id)arg1;
- (bool)performFinalGrammarChecking;
- (void)performTextSearchWithQueryString:(id)arg1 usingOptions:(id)arg2 resultAggregator:(id)arg3;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (void)removeAllGhostedRanges;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)removeEmojiAlternatives;
- (void)removeInvisibleRange:(id)arg1;
- (void)removeTextPlaceholder:(id)arg1;
- (void)replace:(id)arg1;
- (void)replaceAllOccurrencesOfQueryString:(id)arg1 usingOptions:(id)arg2 withText:(id)arg3;
- (void)replaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)resignDropResponderWithDropPerformed:(bool)arg1;
- (bool)resignFirstResponder;
- (bool)respondsToSelector:(SEL)arg1;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)scrollRangeToVisible:(id)arg1 inDocument:(id)arg2;
- (void)scrollSelectionToVisible:(bool)arg1;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRangeForTextContainerView:(id)arg1;
- (id)selectedText;
- (id)selectedTextRange;
- (long long)selectionAffinity;
- (id)selectionContainerView;
- (id)selectionHighlightColor;
- (id)selectionRectsForRange:(id)arg1;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setAllowsEditingTextAttributes:(bool)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setAttributedPlaceholder:(id)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesEditableWithGestures:(bool)arg1;
- (void)setBorderStyle:(long long)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClearsOnInsertion:(bool)arg1;
- (void)setContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentMode:(long long)arg1;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setContentOffsetForSameViewDrops:(struct CGPoint { double x1; double x2; })arg1;
- (void)setContentToHTMLString:(id)arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setDataDetectorTypes:(unsigned long long)arg1;
- (void)setEditable:(bool)arg1;
- (void)setFindInteractionEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setForceDisableDictation:(bool)arg1;
- (void)setForceEnableDictation:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputAccessoryView:(id)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setInputView:(id)arg1;
- (void)setInteractionState:(id)arg1;
- (void)setLineHeight:(double)arg1;
- (void)setLinkTextAttributes:(id)arg1;
- (void)setMarginTop:(unsigned long long)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setMaxTileHeight:(double)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNeedsLayout;
- (void)setPasteDelegate:(id)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setSecureTextEntry:(bool)arg1;
- (void)setSelectable:(bool)arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShouldAutoscrollAboveBottom:(bool)arg1;
- (void)setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard:(bool)arg1;
- (void)setShouldPreserveVisualFontSizeFidelity:(bool)arg1;
- (void)setSizingRule:(long long)arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTextContainerInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setTextDragDelegate:(id)arg1;
- (void)setTextDragOptions:(long long)arg1;
- (void)setTextDropDelegate:(id)arg1;
- (void)setTiledViewsDrawAsynchronously:(bool)arg1;
- (void)setTypingAttributes:(id)arg1;
- (void)setUsesStandardTextScaling:(bool)arg1;
- (void)setUsesTiledViews:(bool)arg1;
- (void)setVisualStyle:(id)arg1;
- (void)set_textInteractableItemCache:(id)arg1;
- (bool)shouldAutoscrollAboveBottom;
- (bool)shouldPresentSheetsInAWindowLayeredAboveTheKeyboard;
- (bool)shouldPreserveVisualFontSizeFidelity;
- (bool)shouldReplaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)sizingRule;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)startInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)supportsTextReplacement;
- (void)takeTraitsFrom:(id)arg1;
- (id)text;
- (long long)textAlignment;
- (id)textColor;
- (id)textContainer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInset;
- (struct CGPoint { double x1; double x2; })textContainerOrigin;
- (id)textContainerView:(id)arg1 cuiCatalogForTextEffectName:(id)arg2;
- (id)textContainerView:(id)arg1 linkTextAttributesForLink:(id)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (id)textDragDelegate;
- (id)textDragInteraction;
- (long long)textDragOptions;
- (id)textDropDelegate;
- (id)textDropInteraction;
- (void)textFormattingDidFinish:(id)arg1;
- (id)textInRange:(id)arg1;
- (bool)textInput:(id)arg1 shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (void)textInputDidAnimatePaste:(id)arg1;
- (void)textInputDidChange:(id)arg1;
- (void)textInputDidChangeSelection:(id)arg1;
- (bool)textInputShouldExtendCaretHeight:(id)arg1;
- (id)textInputTraits;
- (id)textInputView;
- (void)textInputWillAnimatePaste:(id)arg1;
- (id)textLayoutController;
- (id)textLayoutManager;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStorage;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)tiledViewsDrawAsynchronously;
- (void)tintColorDidChange;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)topContentPadding;
- (void)traitCollectionDidChange:(id)arg1;
- (id)typingAttributes;
- (id)undoManager;
- (void)unmarkText;
- (void)updateAutoscrollAboveBottom;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)updateInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateSelection;
- (void)updateSelectionForTextContainerView:(id)arg1;
- (void)updateSelectionImmediately;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)arg1;
- (void)useSelectionForFind:(id)arg1;
- (bool)usesStandardTextScaling;
- (bool)usesTiledViews;
- (void)validateCommand:(id)arg1;
- (void)validateInteractionWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectIgnoringKeyboard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleTextRect;
- (id)visualStyle;
- (id)webView;
- (void)willDismissEditMenuWithAnimator:(id)arg1;
- (void)willHighlightFoundTextRange:(id)arg1 inDocument:(id)arg2;
- (bool)willInteractWithLinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)willPresentEditMenuWithAnimator:(id)arg1;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (void)_cnui_applyContactStyle;
- (id)ab_text;
- (id)ab_textAttributes;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;

// Image: /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation

+ (id)_lp_createInertTextView;

- (void)_lp_setAttributedString:(id)arg1;

// Image: /System/Library/Frameworks/PencilKit.framework/PencilKit

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsForDrawingTextAttachment:(id)arg1 characterIndex:(unsigned long long)arg2 layoutManager:(id)arg3;
- (id)_cacheIdentifierForTextAttachment:(id)arg1;
- (id)_cachedViewProviderForTextAttachment:(id)arg1;
- (bool)_canAddDrawingAtIndex:(unsigned long long)arg1;
- (bool)_canAddStroke;
- (bool)_canInsertDrawing;
- (bool)_canInsertDrawingInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_canSelectDrawing;
- (void)_canvasViewWillCreateSnapshot;
- (void)_cleanupStaleCachedViewProviders;
- (void)_clearDrawingInfo;
- (bool)_cropDrawingAttachmentsWhenViewIsSmaller;
- (void)_didEndInteractiveResize;
- (void)_didEndStroke;
- (id)_drawingInfo;
- (id)_drawingInfoCreateIfNecessary;
- (bool)_growView:(id)arg1 textAttachment:(id)arg2 atCharacterIndex:(long long)arg3 step:(double)arg4 stop:(id /* block */)arg5;
- (void)_insertDrawing:(id)arg1;
- (id)_insertEmptyDrawingAttachmentAtLocation:(long long)arg1;
- (bool)_isHandwritingToolSelected;
- (id)_pkTiledViewIfEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pk_boundsForDrawingTextAttachment:(id)arg1 characterIndex:(unsigned long long)arg2;
- (void)_pk_ensureLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_pk_invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 invalidateDisplay:(bool)arg2 ensureLayout:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pk_lineFragmentRectForGlyphAtCharacterIndex:(unsigned long long)arg1;
- (id)_pk_textRangeFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 textLayoutManager:(id)arg2;
- (id)_pk_viewProviderForAttachment:(id)arg1 atCharacterIndex:(unsigned long long)arg2 createIfNeeded:(bool)arg3;
- (void)_removeDrawingAttachment:(id)arg1 withView:(id)arg2 forDeletion:(bool)arg3;
- (void)_setCachedViewProvider:(id)arg1 textAttachment:(id)arg2;
- (void)_setCropDrawingAttachmentsWhenViewIsSmaller:(bool)arg1;
- (void)_setSelectedInkColor:(id)arg1;
- (void)_setTool:(id)arg1;
- (id)_textRangeFromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_tool;
- (void)_undoDrawingBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofAttachmentUUID:(id)arg3;
- (void)_updateDrawingBackgroundColor;
- (void)_upgradeDrawingAtCharacterIndex:(long long)arg1 itemProviders:(id)arg2 insertionLocationInDrawing:(struct CGPoint { double x1; double x2; })arg3;
- (void)_willBeginInteractiveResize;
- (void)_willBeginNewStrokeForTouch:(id)arg1;
- (id)drawingDelegate;
- (id)ink;
- (bool)isFingerDrawingEnabled;
- (bool)isPaperEnabled;
- (bool)isRulerEnabled;
- (bool)isStylusDrawingEnabled;
- (id)linedPaper;
- (id)paperTexture;
- (void)setDrawingDelegate:(id)arg1;
- (void)setFingerDrawingEnabled:(bool)arg1;
- (void)setInk:(id)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setPaperEnabled:(bool)arg1;
- (void)setPaperTexture:(id)arg1;
- (void)setRulerEnabled:(bool)arg1;
- (void)setStylusDrawingEnabled:(bool)arg1;
- (void)setStylusDrawingEnabled:(bool)arg1 drawingClass:(Class)arg2 sixChannelBlending:(bool)arg3;

// Image: /System/Library/PrivateFrameworks/AppSupportUI.framework/AppSupportUI

- (long long)_nui_baselineViewType;
- (bool)isLayoutSizeDependentOnPerpendicularAxis;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

- (void)ck_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;
- (void)ck_textKit1_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;
- (void)ck_textKit2_drawVisibleTextInCurrentContextWithContainerView:(id)arg1;

// Image: /System/Library/PrivateFrameworks/DataDetectorsUI.framework/DataDetectorsUI

- (bool)dd_ignoreSignatures;
- (id)dd_newOperation;

// Image: /System/Library/PrivateFrameworks/FeedbackCore.framework/FeedbackCore

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentCursorRect;
- (bool)isCursorIsAtEndOfDocument;
- (void)scrollTableToAvoidKeyboardInTableView:(id)arg1 keyboardHeight:(double)arg2 withPadding:(double)arg3;

// Image: /System/Library/PrivateFrameworks/MapsUI.framework/MapsUI

+ (id)_mapsui_defaultTextView;

- (float)_hyphenationFactor;
- (id)_mapsui_attributedText;
- (id)_mapsui_text;
- (void)_setHyphenationFactor:(float)arg1;
- (bool)allowsDefaultTighteningForTruncation;
- (double)idealWidth;
- (long long)lineBreakMode;
- (long long)numberOfLines;
- (void)setAllowsDefaultTighteningForTruncation:(bool)arg1;
- (void)setLineBreakMode:(long long)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)set_mapsui_attributedText:(id)arg1;
- (void)set_mapsui_text:(id)arg1;

// Image: /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit

- (void)mt_applyVisualStyling:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_characterRangeFromTextPosition:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_characterRangeFromTextRange:(id)arg1;
- (id)ic_imageForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)ic_pkSelectionInteraction;
- (id)ic_pkTiledView;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_rangeFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })ic_rectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ic_scrollRangeToTop:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ic_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)ic_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 consideringInsets:(bool)arg2 animated:(bool)arg3;
- (void)ic_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (id)ic_selectedRanges;
- (struct CGPoint { double x1; double x2; })ic_textContainerOrigin;
- (id)ic_textRangeFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })ic_visibleRange;
- (void)setIc_selectedRanges:(id)arg1;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

+ (id)pkui_plainInteractiveTextViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)pkui_plainNonInteractiveTextViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (void)pkui_styleTextView:(id)arg1;

- (void)pk_applyAppearance:(id)arg1;
- (id)pk_childrenForAppearance;
- (void)pk_setAttributedTextRespectingTextAndBackgroundColors:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pkui_frameForTextFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pkui_textFrame;

// Image: /System/Library/PrivateFrameworks/PrintKitUI.framework/PrintKitUI

- (Class)_printFormatterClass;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forViewPrintFormatter:(id)arg2;

// Image: /System/Library/PrivateFrameworks/RemindersUICore.framework/RemindersUICore

- (bool)roundedFont;
- (void)setRoundedFont:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/TeaUI.framework/TeaUI

- (unsigned long long)ts_marginTop;
- (void)ts_setMarginTop:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/TestFlightCore.framework/TestFlightCore

- (double)tf_estimatedFirstBaseline;

// Image: /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit

- (unsigned long long)nc_numberOfLines;
- (void)nc_setNumberOfLines:(unsigned long long)arg1;
- (double)unui_drawingHeightWithNumberOfLines:(unsigned long long)arg1;
- (double)unui_measuringHeightWithNumberOfLines:(unsigned long long)arg1;
- (unsigned long long)unui_numberOfLinesInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 maximum:(unsigned long long)arg2 drawingContext:(inout id)arg3;

@end
