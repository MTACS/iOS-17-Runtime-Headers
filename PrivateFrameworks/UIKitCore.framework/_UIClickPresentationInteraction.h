
@interface _UIClickPresentationInteraction : NSObject <UIGestureRecognizerDelegate, UIInteraction, UIInteraction_Internal, _UIClickInteractionDriverDelegate, _UIDragInteractionPresentationDelegate> {
    bool  _activatedFeedbackGeneratorForClick;
    <_UIClickInteractionDriving> * _activeDriver;
    _UIGravityWellEffectKey * _activeEffectKey;
    NSArray * _allDrivers;
    bool  _allowSimultaneousRecognition;
    UIDragInteraction * _associatedDragInteraction;
    unsigned long long  _currentState;
    NSString * _debugIdentifier;
    <_UIClickPresentationInteractionDelegate> * _delegate;
    struct { 
        bool shouldBegin; 
        bool previewForHighlightingAtLocation; 
        bool shouldPresent; 
        bool ended; 
        bool activationStyle; 
        bool asyncShouldBegin; 
        bool shouldAllowRapidRestart; 
        bool shouldAssociateWithDrag; 
        bool shouldAllowDragAfterDismiss; 
        bool liveDragPreviewForPresentation; 
        bool previewForCancellingDragItem; 
        bool willAnimateDragCancelWithAnimator; 
        bool dragSessionDidEndForItems; 
        bool interactionEffectForTargetedPreview; 
        bool endedForPresentation; 
        bool shouldPlayFeedback; 
        bool shouldPresentWithCompletion; 
        bool shouldBeDelayedByGestureRecognizer; 
        bool secondaryPreviews; 
    }  _delegateImplements;
    _UIRelationshipGestureRecognizer * _exclusionRelationshipGestureRecognizer;
    _UIRelationshipGestureRecognizer * _failureRelationshipGestureRecognizer;
    _UIClickPresentationFeedbackGenerator * _feedbackGenerator;
    _UIRelationshipGestureRecognizer * _gestureRecognizerForBeginningDragRelationships;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialLocation;
    UIDragInteraction * _latentAssociatedDragInteraction;
    NSArray * _overrideDrivers;
    _UIClickPresentation * _pendingPresentation;
    <_UIClickPresentationAssisting> * _presentationAssistant;
    NSString * _presentationTypeDebugString;
    long long  _statsPresentation;
    bool  _unableToClick;
    UIView * _view;
}

@property (nonatomic, readonly) unsigned long long activatedDriverStyle;
@property (nonatomic, retain) <_UIClickInteractionDriving> *activeDriver;
@property (nonatomic, retain) NSArray *allDrivers;
@property (nonatomic) bool allowSimultaneousRecognition;
@property (nonatomic) UIDragInteraction *associatedDragInteraction;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSString *debugIdentifier;
@property (nonatomic, readonly) <_UIClickPresentationInteractionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) _UIRelationshipGestureRecognizer *exclusionRelationshipGestureRecognizer;
@property (nonatomic, retain) _UIRelationshipGestureRecognizer *failureRelationshipGestureRecognizer;
@property (nonatomic, retain) _UIClickPresentationFeedbackGenerator *feedbackGenerator;
@property (nonatomic, readonly) UIGestureRecognizer *gestureRecognizerForBeginningDragRelationships;
@property (nonatomic, readonly) UIGestureRecognizer *gestureRecognizerForExclusionRelationship;
@property (nonatomic, readonly) UIGestureRecognizer *gestureRecognizerForFailureRelationship;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialLocation;
@property (nonatomic, readonly) unsigned long long inputPrecision;
@property (nonatomic, retain) <UIInteractionEffect> *interactionEffect;
@property (nonatomic, retain) UIDragInteraction *latentAssociatedDragInteraction;
@property (nonatomic, retain) NSArray *overrideDrivers;
@property (nonatomic, retain) _UIClickPresentation *pendingPresentation;
@property (nonatomic, retain) <_UIClickPresentationAssisting> *presentationAssistant;
@property (nonatomic, copy) NSString *presentationTypeDebugString;
@property (nonatomic, readonly) UITargetedPreview *primaryEffectPreview;
@property (getter=_reachedForceThreshold, nonatomic, readonly) bool reachedForceThreshold;
@property (nonatomic, readonly) NSArray *secondaryEffectPreviews;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *view;

+ (void)_setDefaultDriverClasses:(id)arg1 forIdiom:(long long)arg2;

- (void).cxx_destruct;
- (id)_activeEffect;
- (void)_associateWithActiveDragInteraction;
- (void)_attemptDragLiftAtLocation:(struct CGPoint { double x1; double x2; })arg1 useDefaultLiftAnimation:(bool)arg2;
- (bool)_canPerformPresentation;
- (void)_cancelAllDrivers;
- (void)_cancelWithReason:(unsigned long long)arg1 alongsideActions:(id /* block */)arg2 completion:(id /* block */)arg3;
- (id)_candidateInteractionsForAssociation;
- (id)_clickDragDriver;
- (id)_clickDriverTouch;
- (void)_delegate_interactionEndedWithContext:(const struct InteractionEndingContext { struct InteractionContext { id x_1_1_1; } x1; bool x2; unsigned long long x3; id x4; id /* block */ x5; id /* block */ x6; }*)arg1;
- (bool)_delegate_shouldAllowDragAfterDismiss;
- (void)_dragInteractionPresentation:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)_dragInteractionPresentation:(id)arg1 previewForCancellingItem:(id)arg2 defaultPreview:(id)arg3 proposedPreview:(id)arg4;
- (void)_dragInteractionPresentation:(id)arg1 sessionDidEnd:(id)arg2 withoutBeginning:(bool)arg3;
- (void)_driverClickedDown;
- (void)_driverClickedUp;
- (void)_driverEnded;
- (void)_endInteractionEffectIfNeeded;
- (void)_endInteractionWithContext:(const struct InteractionEndingContext { struct InteractionContext { id x_1_1_1; } x1; bool x2; unsigned long long x3; id x4; id /* block */ x5; id /* block */ x6; }*)arg1;
- (void)_gestureRecognizerFailed:(id)arg1;
- (bool)_isActive;
- (bool)_isControlledByCC;
- (void)_performPresentation;
- (void)_performPreviewPresentation;
- (void)_prepareInteractionEffect;
- (bool)_reachedForceThreshold;
- (void)_refreshAllDrivers;
- (void)_setDelegate:(id)arg1;
- (bool)_supportsRapidRestart;
- (void)_transitionedFromState:(unsigned long long)arg1 toState:(unsigned long long)arg2;
- (void)_viewTraitCollectionDidChange:(id)arg1;
- (unsigned long long)activatedDriverStyle;
- (id)activeDriver;
- (id)allDrivers;
- (bool)allowSimultaneousRecognition;
- (id)associatedDragInteraction;
- (bool)beginDragIfPossibleWithTouch:(id)arg1;
- (void)beginPanInteraction;
- (void)cancelInteraction;
- (void)clickDriver:(id)arg1 didPerformEvent:(unsigned long long)arg2;
- (void)clickDriver:(id)arg1 didUpdateHighlightProgress:(double)arg2;
- (bool)clickDriver:(id)arg1 shouldBeDelayedByGestureRecognizer:(id)arg2;
- (void)clickDriver:(id)arg1 shouldBegin:(id /* block */)arg2;
- (bool)clickDriver:(id)arg1 shouldDelayGestureRecognizer:(id)arg2;
- (void)dealloc;
- (id)debugIdentifier;
- (id)delegate;
- (void)didMoveToView:(id)arg1;
- (void)endPanInteraction;
- (id)exclusionRelationshipGestureRecognizer;
- (id)failureRelationshipGestureRecognizer;
- (id)feedbackGenerator;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)gestureRecognizerForBeginningDragRelationships;
- (id)gestureRecognizerForExclusionRelationship;
- (id)gestureRecognizerForFailureRelationship;
- (id)initWithDelegate:(id)arg1;
- (struct CGPoint { double x1; double x2; })initialLocation;
- (unsigned long long)inputPrecision;
- (id)latentAssociatedDragInteraction;
- (struct CGPoint { double x1; double x2; })locationInView:(id)arg1;
- (id)overrideDrivers;
- (id)pendingPresentation;
- (void)present;
- (id)presentationAssistant;
- (id)presentationTypeDebugString;
- (id)primaryEffectPreview;
- (id)secondaryEffectPreviews;
- (void)setActiveDriver:(id)arg1;
- (void)setAllDrivers:(id)arg1;
- (void)setAllowSimultaneousRecognition:(bool)arg1;
- (void)setAssociatedDragInteraction:(id)arg1;
- (void)setDebugIdentifier:(id)arg1;
- (void)setExclusionRelationshipGestureRecognizer:(id)arg1;
- (void)setFailureRelationshipGestureRecognizer:(id)arg1;
- (void)setFeedbackGenerator:(id)arg1;
- (void)setInitialLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLatentAssociatedDragInteraction:(id)arg1;
- (void)setOverrideDrivers:(id)arg1;
- (void)setPendingPresentation:(id)arg1;
- (void)setPresentationAssistant:(id)arg1;
- (void)setPresentationTypeDebugString:(id)arg1;
- (id)view;
- (void)willMoveToView:(id)arg1;

@end
