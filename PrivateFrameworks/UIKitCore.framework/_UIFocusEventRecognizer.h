
@interface _UIFocusEventRecognizer : NSObject <UIGestureRecognizerDelegate, _UIFocusEnginePanGestureRecognizerDelegate, _UIRotaryGestureRecognizerDelegate> {
    _UIFocusItemInfo * _cachedFocusItemInfo;
    CARInputDeviceTouchpad * _currentCarTouchpad;
    <_UIFocusEventRecognizerDelegate> * _delegate;
    bool  _enabled;
    unsigned long long  _failedContinuousMovementHeading;
    double  _failedContinuousMovementTime;
    _UIFocusFastScrollingRecognizer * _fastScrollingRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _firstMomentumTouchPoint;
    struct { 
        unsigned int isEligibleToCrossSpeedBump : 1; 
        unsigned int isContinuingTouchWithMomentum : 1; 
        unsigned int isPerformingJoystickRollback : 1; 
        unsigned int isJoystickInRepeatMode : 1; 
        unsigned int isPendingJoystickRepeat : 1; 
        unsigned int isFastScrolling : 1; 
        unsigned int shouldApplyAcceleration : 1; 
        unsigned int shouldSupressActiveIndirectMotionUpdates : 1; 
        unsigned int startDeferingFocusOnTapHoldEnded : 1; 
    }  _flags;
    unsigned long long  _focusUpdateCountSinceLastContinuousMovementBegan;
    NSMapTable * _gestureRecognizers;
    unsigned long long  _inputType;
    CADisplayLink * _joystickFocusDirectionDisplayLink;
    NSTimer * _joystickModeExitTimer;
    NSTimer * _joystickModeRepeatTimer;
    long long  _joystickRepeatCount;
    unsigned long long  _joystickRepeatingHeading;
    NSArray * _keyCommands;
    double  _lastButtonPressTime;
    double  _lastEdgeScrollEdgeValue;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastKnownTouchPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastMomentumTouchPoint;
    UIScrollView * _lastScrolledScroll;
    _UIFocusLinearMovementDebugView * _linearDebugView;
    CADisplayLink * _momentumDisplayLink;
    double  _momentumFriction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _momentumVelocity;
    _UIFocusEffectsController * _motionEffectsController;
    UIMoveEvent * _moveEvent;
    int  _numFrames;
    UIView * _owningView;
    double  _panDeadBand;
    _UIFocusMovementInfo * _previousJoystickFocusMovementInfo;
    double  _previousJoystickFocusMovementTime;
    double  _previousJoystickRegionEntryTime;
    struct CGPoint { 
        double x; 
        double y; 
    }  _previousPoints;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _progressAccumulator;
    _UIFocusRotaryIndicatorView * _rotaryIndicatorView;
    NSTimer * _showRotaryIndicatorAfterDelayTimer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _touchBeganPoint;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _unlockedAccumulator;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_UIFocusEventRecognizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (getter=_fastScrollingRecognizer, nonatomic, readonly) _UIFocusFastScrollingRecognizer *fastScrollingRecognizer;
@property (nonatomic, readonly) NSSet *gesturesForFailureRequirements;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *keyCommands;
@property (getter=_motionEffectsController, nonatomic, readonly) _UIFocusEffectsController *motionEffectsController;
@property (getter=_moveEvent, setter=_setMoveEvent:, nonatomic, retain) UIMoveEvent *moveEvent;
@property (nonatomic, readonly) UIView *owningView;
@property (readonly) Class superclass;

+ (bool)_canSupportFastScrolling;

- (void).cxx_destruct;
- (struct CGVector { double x1; double x2; })_accelerationFactorForCurrentVelocity:(struct CGPoint { double x1; double x2; })arg1 alpha:(double)arg2 isRotaryGesture:(bool)arg3 isFocusInKeyboard:(bool)arg4 remoteTouchSurfaceType:(unsigned long long)arg5;
- (struct CGPoint { double x1; double x2; })_applyAxisLockingForNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1 toDelta:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGPoint { double x1; double x2; })_applyButtonMaskTimeToValue:(struct CGPoint { double x1; double x2; })arg1 remoteTouchSurfaceType:(unsigned long long)arg2;
- (struct CGPoint { double x1; double x2; })_applyHorizontalFlipForFocusItemInfo:(id)arg1 toDelta:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGPoint { double x1; double x2; })_applyPanDeadbandToValue:(struct CGPoint { double x1; double x2; })arg1 startPoint:(struct CGPoint { double x1; double x2; })arg2 currentPoint:(struct CGPoint { double x1; double x2; })arg3 remoteTouchSurfaceType:(unsigned long long)arg4;
- (bool)_attemptPanFocusMovementWithHeading:(unsigned long long)arg1 acceleratedVelocity:(struct CGPoint { double x1; double x2; })arg2 focusSystem:(id)arg3 studyLogData:(id)arg4;
- (bool)_attemptRotaryFocusMovementWithLinearHeading:(unsigned long long)arg1 directionalHeading:(unsigned long long)arg2 focusMovementAxis:(long long)arg3 focusSystem:(id)arg4 acceleratedVelocity:(struct CGPoint { double x1; double x2; })arg5 studyLogData:(id)arg6;
- (bool)_attemptToRecognizeContinuousMovementRequest:(id)arg1;
- (void)_beginMomentumImmediatelyWithVelocity:(struct CGPoint { double x1; double x2; })arg1 friction:(double)arg2;
- (bool)_buttonMaskTimeHasExpired;
- (struct CGPoint { double x1; double x2; })_calculateDeltaForNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1 studyLogData:(id)arg2;
- (unsigned long long)_calculateDirectionalHeadingForAccumulator:(struct CGVector { double x1; double x2; })arg1 studyLogData:(id)arg2;
- (unsigned long long)_calculateLinearHeadingForAccumulator:(struct CGVector { double x1; double x2; })arg1 studyLogData:(id)arg2;
- (bool)_canMoveFocusWithRotaryInputInFocusContext:(id)arg1;
- (void)_cancelAllGestureRecognizers;
- (void)_cancelShowRotaryIndicatorTimer;
- (void)_cleanupPanMomentumWithAccumulator:(struct CGVector { double x1; double x2; })arg1 movementSuccess:(bool)arg2;
- (void)_continueTouchWithMomentum;
- (void)_continuousMovementFailedWithPrimaryHeading:(unsigned long long)arg1;
- (void)_continuousMovementSucceededWithDirectionalHeading:(unsigned long long)arg1;
- (id)_createMovementInfoForHeading:(unsigned long long)arg1 groupFilter:(long long)arg2 acceleratedVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (id)_createPanMovementRequestWithFocusSystem:(id)arg1;
- (id)_createRotaryMovementRequestWithFocusSystem:(id)arg1;
- (id)_createStudyLogDataForPanNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1 reportedVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (id)_createStudyLogDataForRotaryDistance:(double)arg1 delta:(double)arg2 reportedVelocity:(double)arg3;
- (bool)_didRecognizeFocusMovementRequest:(id)arg1;
- (void)_exitJoystickModeForReal:(id)arg1;
- (id)_fastScrollingRecognizer;
- (void)_focusBehaviorDidChange:(id)arg1;
- (void)_focusDidUpdate:(id)arg1;
- (id)_focusMovementForJoystickPosition:(struct CGPoint { double x1; double x2; })arg1 usingMinimumRadius:(double)arg2 focusMovementStyle:(long long)arg3;
- (id)_focusMovementSystem;
- (void)_focusSystemEnabledStateDidChange:(id)arg1;
- (id)_focusSystemSceneComponent;
- (void)_gestureRecognizerFailed:(id)arg1;
- (id)_globalCoordinateSpace;
- (void)_handleArrowButtonGesture:(id)arg1;
- (void)_handleJoystickGesture:(id)arg1;
- (void)_handleJoystickRepeatMode:(id)arg1;
- (void)_handleJoystickTiltMode:(id)arg1;
- (void)_handleLinearDebugOverlayGesture:(id)arg1;
- (void)_handlePageButtonGesture:(id)arg1;
- (void)_handlePanGesture:(id)arg1;
- (void)_handleRotaryBegin:(id)arg1;
- (void)_handleRotaryCancelled:(id)arg1;
- (void)_handleRotaryEnd:(id)arg1;
- (void)_handleRotaryGesture:(id)arg1;
- (void)_handleSelectGesture:(id)arg1;
- (void)_handleSelectObserverGesture:(id)arg1;
- (void)_handleTabulatorGesture:(id)arg1;
- (void)_handleTapGesture:(id)arg1;
- (bool)_hasFailedMovementHeadingExpired;
- (unsigned long long)_headingForJoystickPosition:(struct CGPoint { double x1; double x2; })arg1 usingMinimumRadius:(double)arg2;
- (bool)_hideLinearDebugOverlayIfNecessary:(bool)arg1;
- (void)_hideRotaryIndicator;
- (bool)_joystickAttemptFocusMovementWithRequest:(id)arg1;
- (void)_joystickDisplayLinkHeartbeat:(id)arg1;
- (bool)_joystickFocusMovement:(id)arg1 shouldBeConsideredEqualToFocusMovement:(id)arg2;
- (void)_joystickGestureBegan:(id)arg1;
- (void)_joystickGestureEnded:(id)arg1;
- (void)_joystickGestureUpdated:(id)arg1;
- (void)_joystickPerformRepeat:(id)arg1;
- (double)_joystickRepeatDurationForTimeInMovementZone:(double)arg1;
- (struct CGVector { double x1; double x2; })_joystickVelocityForHeading:(unsigned long long)arg1;
- (unsigned long long)_momentumFocusHeadingForAccumulator:(struct CGVector { double x1; double x2; })arg1;
- (void)_momentumHeartbeat:(id)arg1;
- (struct CGSize { double x1; double x2; })_momentumReferenceSize;
- (id)_motionEffectsController;
- (id)_moveEvent;
- (bool)_moveInDirection:(unsigned long long)arg1 groupFilter:(long long)arg2;
- (bool)_moveInDirection:(unsigned long long)arg1 groupFilter:(long long)arg2 withEvaluator:(id /* block */)arg3;
- (bool)_moveInDirection:(unsigned long long)arg1 groupFilter:(long long)arg2 withSearchInfo:(id)arg3;
- (bool)_moveWithEvent:(id)arg1;
- (void)_panGestureCancelled:(id)arg1;
- (void)_panGestureEnd:(id)arg1;
- (void)_panGestureStart:(id)arg1;
- (struct CGPoint { double x1; double x2; })_pointForLinearValue:(double)arg1 axis:(unsigned long long)arg2;
- (void)_recordMomentumForPoint:(struct CGPoint { double x1; double x2; })arg1 reportedVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)_resetCachedFocusItemInfo;
- (void)_resetContinuousMovementState;
- (void)_resetFailedMovementHeading;
- (void)_resetJoystick;
- (void)_resetMomentum;
- (void)_resetMotionEffects;
- (void)_resetPanDeadband;
- (void)_resetProgressAccumulator;
- (void)_resetProgressAccumulatorWithHeading:(unsigned long long)arg1;
- (id)_retrieveCachedFocusItemInfo;
- (void)_sendGestureBeginNotification;
- (void)_sendMomentumEndNotificationsAndAnimateRollback:(bool)arg1;
- (void)_setMoveEvent:(id)arg1;
- (bool)_shouldAcceptInputType:(unsigned long long)arg1;
- (bool)_shouldPerformFocusUpdateWithCurrentMomentumStatus;
- (void)_showLinearDebugOverlay:(bool)arg1;
- (void)_showRotaryIndicator;
- (void)_showRotaryIndicatorAfterDelay;
- (void)_stopMomentumAndPerformRollback;
- (void)_timerFiredForShowRotaryIndicator:(id)arg1;
- (int)_touchRegionForDigitizerLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_touchSensitivityForItem:(id)arg1 remoteTouchSurfaceType:(unsigned long long)arg2;
- (void)_uiktest_handlePanGesture:(id)arg1;
- (id)_uiktest_panGestureRecognizer;
- (void)_uiktest_setPanGestureRecognizer:(id)arg1;
- (void)_updateAccumulatorsWithScaledDelta:(struct CGPoint { double x1; double x2; })arg1 unlockedDelta:(struct CGPoint { double x1; double x2; })arg2 studyLogData:(id)arg3;
- (void)_updateFailedContinuousMovementHeading:(unsigned long long)arg1;
- (void)_updateGestureRecognizersForcingRemoval:(bool)arg1;
- (void)_updateGestureRecognizersForcingRemoval:(bool)arg1 studyLogData:(id)arg2;
- (void)_updateMotionEffectsControllerWithProgressAccumulator:(struct CGVector { double x1; double x2; })arg1 unlockedAccumulator:(struct CGVector { double x1; double x2; })arg2;
- (void)_updatePanLocation:(struct CGPoint { double x1; double x2; })arg1 reportedVelocity:(struct CGPoint { double x1; double x2; })arg2 remoteTouchSurfaceType:(unsigned long long)arg3;
- (void)_updateRotaryDistance:(double)arg1 delta:(double)arg2 reportedVelocity:(double)arg3 remoteTouchSurfaceType:(unsigned long long)arg4 focusMovementAxis:(long long)arg5;
- (void)_updateRotaryIndicatorView;
- (id)currentFocusBehavior;
- (void)dealloc;
- (id)delegate;
- (bool)focusEnginePanGestureRecognizerShouldRecognizeImmediately:(id)arg1;
- (id)gestureForName:(unsigned long long)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gesturesForFailureRequirements;
- (id)init;
- (id)initWithOwningView:(id)arg1;
- (bool)isEnabled;
- (id)keyCommands;
- (id)owningView;
- (void)reset;
- (void)rotaryGestureRecognizerBeganClassifyingMovement:(id)arg1;
- (void)rotaryGestureRecognizerFailedClassifyingMovement:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setGesture:(id)arg1 forName:(unsigned long long)arg2;

@end
