
@interface _UILabelConfiguration : NSObject <NSCopying, NSSecureCoding> {
    bool  __hasResolvedDefaultAttributes;
    UIColor * _backgroundColor;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    struct { 
        unsigned int adjustsFontSizeToFitWidth : 1; 
        unsigned int allowsDefaultTighteningForTruncation : 1; 
        unsigned int adjustsFontForContentSizeCategory : 1; 
        unsigned int isEnabled : 1; 
        unsigned int isHighlighted : 1; 
        unsigned int hasCustomized_text : 1; 
        unsigned int hasCustomized_attributedText : 1; 
        unsigned int hasCustomized_defaultAttributes : 1; 
        unsigned int hasCustomized_font : 1; 
        unsigned int hasCustomized_textColor : 1; 
        unsigned int hasCustomized_highlightedTextColor : 1; 
        unsigned int hasCustomized_textBackgroundColor : 1; 
        unsigned int hasCustomized_shadow : 1; 
        unsigned int hasCustomized_backgroundColor : 1; 
        unsigned int hasCustomized_textAlignment : 1; 
        unsigned int hasCustomized_lineBreakMode : 1; 
        unsigned int hasCustomized_lineBreakStrategy : 1; 
        unsigned int hasCustomized_numberOfLines : 1; 
        unsigned int hasCustomized_adjustsFontSizeToFitWidth : 1; 
        unsigned int hasCustomized_minimumScaleFactor : 1; 
        unsigned int hasCustomized_allowsDefaultTighteningForTruncation : 1; 
        unsigned int hasCustomized_adjustsFontForContentSizeCategory : 1; 
        unsigned int hasCustomized_bounds : 1; 
        unsigned int hasCustomized_preferredMaxLayoutWidth : 1; 
        unsigned int hasCustomized_semanticContentAttribute : 1; 
        unsigned int hasCustomized_isEnabled : 1; 
        unsigned int hasCustomized_isHighlighted : 1; 
        unsigned int hasCustomized_internal : 1; 
    }  _configurationFlags;
    _UILabelContent * _content;
    double  _displayScale;
    UIFont * _font;
    UIColor * _highlightedTextColor;
    _UILabelConfigurationInternal * _internal;
    long long  _lineBreakMode;
    unsigned long long  _lineBreakStrategy;
    double  _minimumScaleFactor;
    long long  _numberOfLines;
    double  _preferredMaxLayoutWidth;
    long long  _semanticContentAttribute;
    NSShadow * _shadow;
    long long  _textAlignment;
    UIColor * _textBackgroundColor;
    UIColor * _textColor;
}

@property (setter=_setDefaultAttributes:, nonatomic, copy) NSDictionary *_defaultAttributes;
@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property (nonatomic) bool adjustsFontSizeToFitWidth;
@property (nonatomic) bool allowsDefaultTighteningForTruncation;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, retain) UIFont *font;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, retain) UIColor *highlightedTextColor;
@property (nonatomic) long long lineBreakMode;
@property (nonatomic) unsigned long long lineBreakStrategy;
@property (nonatomic) double minimumScaleFactor;
@property (nonatomic) long long numberOfLines;
@property (nonatomic) double preferredMaxLayoutWidth;
@property (nonatomic) long long semanticContentAttribute;
@property (nonatomic, retain) NSShadow *shadow;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, retain) UIColor *textBackgroundColor;
@property (nonatomic, retain) UIColor *textColor;

+ (id)new;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_defaultAttributes;
- (id)_initEmpty;
- (void)_setDefaultAttributes:(id)arg1;
- (bool)adjustsFontForContentSizeCategory;
- (bool)adjustsFontSizeToFitWidth;
- (bool)allowsDefaultTighteningForTruncation;
- (id)attributedText;
- (id)backgroundColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)font;
- (unsigned long long)hash;
- (id)highlightedTextColor;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithTraitCollection:(id)arg1;
- (bool)isEnabled;
- (bool)isEqual:(id)arg1;
- (bool)isHighlighted;
- (long long)lineBreakMode;
- (unsigned long long)lineBreakStrategy;
- (double)minimumScaleFactor;
- (long long)numberOfLines;
- (double)preferredMaxLayoutWidth;
- (long long)semanticContentAttribute;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setAdjustsFontSizeToFitWidth:(bool)arg1;
- (void)setAllowsDefaultTighteningForTruncation:(bool)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setHighlightedTextColor:(id)arg1;
- (void)setLineBreakMode:(long long)arg1;
- (void)setLineBreakStrategy:(unsigned long long)arg1;
- (void)setMinimumScaleFactor:(double)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)setPreferredMaxLayoutWidth:(double)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setShadow:(id)arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextBackgroundColor:(id)arg1;
- (void)setTextColor:(id)arg1;
- (id)shadow;
- (id)text;
- (long long)textAlignment;
- (id)textBackgroundColor;
- (id)textColor;

@end
