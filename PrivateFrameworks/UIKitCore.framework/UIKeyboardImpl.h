
@interface UIKeyboardImpl : UIView <TIKeyboardInputManagerToImplProtocol, UIInlineTextCompletionControllerDelegate, UIKBRTIPartnerDelegate, UIKeyboardCandidateControllerDelegate, UIKeyboardCandidateListDelegate, UIKeyboardImplStateProtocol, UIKeyboardInputModeIndicatorControllerDelegate, UIKeyboardLayoutSizeDelegate, UIPopoverPresentationControllerDelegate, UITextInputDelegatePrivate, _UIIVCResponseDelegateImpl, _UIKeyboardTextSelectionGestureControllerDelegate, _UIStickerPickerKeyboardSessionDelegate, _UITextChoicesAssistantDelegate> {
    NSString * _activeDictationLanguage;
    <AFUIPanel_Staging> * _autoFillPanel;
    UIAutocorrectBubbleContainer * _autocorrectBubbleContainer;
    UIKeyboardScheduledTask * _autocorrectPromptTask;
    TIKeyboardCandidate * _autocorrectionToAcceptBeforeProgressiveCandidates;
    long long  _candidateViewOffset;
    <UITextCursorAssertion> * _capslockAssertion;
    NSArray * _characterRectsForCharacterRange;
    id /* block */  _chooseSupplementalCandidateCompletion;
    UIContinuousPathIntroductionView * _continuousPathIntroductionView;
    int  _currentAlertReason;
    TICandidateRequestToken * _currentCandidateRequest;
    NSDictionary * _currentCandidateRequestInfo;
    <UITextCursorAssertion> * _cursorAssertion;
    _UITextChoiceAccelerationAssistant * _customInputDelegateChoiceAccelerationAssistant;
    _UIKeyboardTextSelectionController * _customInputDelegateSelectionController;
    _UIKeyboardTextSelectionInteraction * _customInputDelegateSelectionInteraction;
    id /* block */  _deferredUpdateTask;
    double  _deleteWordLastDelete;
    NSString * _deletedString;
    UIDictationPopoverController * _dictationPopoverController;
    id /* block */  _didTeardownExistingDelegate;
    UIKBEditingGesturesIntroduction * _editingGestureIntroductionView;
    UIKeyboardEmojiPopoverController * _emojiPopoverController;
    bool  _emojiPopoverToRestoreAfterRotation;
    bool  _forCustomInputView;
    UIResponder<UIKeyInput> * _forwardingInputDelegate;
    bool  _forwardingInputDelegateConformsToWKInteraction;
    bool  _handlingKeyCommandFromHardwareKeyboard;
    bool  _hasNextKeyResponder;
    bool  _hasPreviousKeyResponder;
    long long  _id;
    NSAttributedString * _inlineCompletionAsMarkedText;
    UIKBInputDelegateManager * _inputDelegateManager;
    <UITextCursorAssertion> * _inputModeAssertion;
    UIKeyboardInputModeIndicatorController * _inputModeIndicatorController;
    NSNumber * _isAttachedHardwareKeyboard;
    bool  _isCallingTextChangedDuringInputModeSwitch;
    bool  _isSettingDelegate;
    bool  _isSettingExtensionInputMode;
    KFAViewController * _keyboardFeedbackAssistantViewController;
    unsigned long long  _lastDeletionCountForFastDelete;
    bool  _lockFloating;
    bool  _mimicShiftBeingHeld;
    bool  _needsUpdateAssistantView;
    UIView * _overlayContainerObserved;
    UITextRange * _pendingAutocorrectRange;
    _UIKeyboardImplHeldOperation * _pendingKeyupOperation;
    UIPressAndHoldPopoverController * _pressAndHoldPopoverController;
    UIKBRTIPartner * _remoteTextInputPartner;
    UITextInputTraits * _remoteTextInputTraits;
    unsigned long long  _requestedInteractionModel;
    NSUUID * _resigningRTISessionIdentifier;
    unsigned long long  _serviceRole;
    bool  _shouldRespectForwardingInputDelegate;
    bool  _shouldUpdateLayoutAutomatically;
    bool  _skipRecomputeInputMode;
    void * _skippedEndInputSession;
    NSUUID * _skippedEndInputSessionID;
    _UIStickerPickerKeyboardSession * _stickerPickerSession;
    bool  _suppressUpdateAssistantView;
    bool  _suppressUpdateInputMode;
    <_UITextInputUserInteractionDelegate> * _userInteractionDelegate;
    id /* block */  _waitingOnPerformAutocorrect;
    id /* block */  _willSetupNewDelegate;
    bool  committingCandidate;
    bool  floatingForced;
    bool  geometryIsChanging;
    bool  m_UsedCandidateSelection;
    bool  m_acceptingCandidate;
    bool  m_animateUpdateBars;
    UITextInputArrowKeyHistory * m_arrowKeyHistory;
    unsigned int  m_autoDeleteCount;
    double  m_autoDeleteCurrentForce;
    double  m_autoDeleteCurrentForceMultipler;
    double  m_autoDeleteInterval;
    double  m_autoDeleteLastDelete;
    bool  m_autoDeleteOK;
    unsigned int  m_autoDeleteShiftCharacter;
    UIKeyboardScheduledTask * m_autoDeleteTask;
    bool  m_autoDeleteUseForce;
    bool  m_autocapitalizationPreference;
    UIAutocorrectInlinePrompt * m_autocorrectPrompt;
    UIKeyboardAutocorrectionController * m_autocorrectionController;
    bool  m_autocorrectionPreference;
    UIKBAutofillController * m_autofillController;
    NSDictionary * m_autofillCustomInfo;
    long long  m_autofillSubMode;
    bool  m_automaticMinimizationEnabled;
    bool  m_autoshift;
    double  m_bottomPadding;
    long long  m_cachedAutofillMode;
    UIKeyboardCandidateController * m_candidateController;
    <UIKeyboardCandidateList> * m_candidateList;
    TIKeyboardCandidateResultSet * m_candidateResultSet;
    UIView * m_capsLockSign;
    bool  m_caretShowingNow;
    int  m_changeCount;
    bool  m_changeNotificationDisabled;
    double  m_changeTime;
    id  m_changedDelegate;
    bool  m_clientVariantSupportEnabled;
    bool  m_clientVariantSupportEnabledEver;
    bool  m_correctionLearningAllowed;
    long long  m_currentDirection;
    UIPhysicalKeyboardEvent * m_currentEventForKeyCommand;
    UITextInputTraits * m_defaultTraits;
    _UIActionWhenIdle * m_deferredDidSetDelegateAction;
    UIKeyboardScheduledTask * m_delayDeleteTask;
    _UIActionWhenIdle * m_delayedCandidateRequest;
    <UIKeyInput> * m_delegate;
    bool  m_delegateAdoptsKeyInputPrivate;
    bool  m_delegateAdoptsKeyboardInput;
    bool  m_delegateAdoptsRTISourceSession;
    bool  m_delegateAdoptsTextInput;
    bool  m_delegateAdoptsTextInputPrivate;
    bool  m_delegateAdoptsWKInteraction;
    bool  m_delegateAdoptsWebTextInputPrivate;
    bool  m_delegateIsSMSTextView;
    bool  m_delegateRequiresKeyEvents;
    bool  m_delegateSupportsImagePaste;
    UIDelayedAction * m_detachHardwareKeyboardAction;
    <UITextCursorAssertion> * m_dictationIndicatorAssertion;
    UIDelayedAction * m_dictationMenuAction;
    bool  m_didAutomaticallyInsertSpace;
    bool  m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
    bool  m_didExtendLongPressDelayForContinuousPath;
    bool  m_didSyncDocumentStateToInputDelegate;
    bool  m_didUpdateCapsLockLanguageSwitchSetting;
    bool  m_disableAutocapitalization;
    bool  m_disableClearingTextSuggestions;
    bool  m_disableSmartInsertDelete;
    bool  m_disableSyncTextChanged;
    bool  m_doubleSpacePeriodPreference;
    bool  m_doubleSpacePeriodWasAppliedInCurrentContext;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_editMenuFrame;
    UIEditMenuInteraction * m_editMenuInteraction;
    bool  m_editingTraitsMarkedDirty;
    id /* block */  m_externalTask;
    <_UIKBFeedbackGenerating> * m_feedbackGenerator;
    bool  m_firstResponderAdoptsTextInput;
    <UIKeyboardImplGeometryDelegate> * m_geometryDelegate;
    NSMutableDictionary * m_hardwareKeyDownCodeToEventMap;
    bool  m_hardwareKeyboardAttached;
    bool  m_hasEditedMarkedTextInExtendedView;
    bool  m_hasInputOnAcceptCandidate;
    <_UIInvalidatable> * m_hideCursorAccessoriesAssertion;
    UIDelayedAction * m_idleDetection;
    bool  m_ignoreSelectionChange;
    _UIKeyboardImplProxy * m_implProxy;
    bool  m_inDealloc;
    bool  m_inHandleKeyAppCommandForCurrentEvent;
    bool  m_inHandleKeyTextCommandForCurrentEvent;
    bool  m_initializationDone;
    UIInlineTextCompletionController * m_inlineTextCompletionController;
    TIKeyboardInputManagerState * m_inputManagerState;
    bool  m_inputModeSwitcherVisible;
    struct CGPoint { 
        double x; 
        double y; 
    }  m_inputPoint;
    UIView * m_internationalKeyIntroductionView;
    bool  m_isAutofilling;
    bool  m_isCapsLocked;
    bool  m_isRotating;
    bool  m_keyboardDelegateStateNeedsRefresh;
    int  m_keyboardMenuType;
    TIKeyboardState * m_keyboardState;
    UIView * m_keyboardWindowSnapshot;
    NSMutableDictionary * m_keyedLayouts;
    NSMutableArray * m_keyplaneNamesCurrentDelegate;
    NSMutableArray * m_keyplaneNamesPreviousDelegate;
    UIView * m_languageIndicator;
    unsigned long long  m_lastChooseSupplementalItemToInsertCallbackIdentifier;
    _UIStringAndPositionPair * m_lastMatchedSupplementalCandidate;
    UIKeyboardLayout * m_layout;
    bool  m_layoutAllowsCP;
    bool  m_longPress;
    UIDelayedAction * m_longPressAction;
    UIView * m_markedTextOverlay;
    bool  m_maximizing;
    bool  m_needsCandidates;
    bool  m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete;
    bool  m_needsPasteSupportUpdate;
    bool  m_needsToRecomputeDesirableModes;
    unsigned long long  m_numCPwords;
    struct __CFRunLoopObserver { } * m_observer;
    long long  m_originalOrientation;
    bool  m_originalShouldSkipCandidateSelection;
    UITextInputTraits * m_overrideTraits;
    long long  m_pendingAutofillIndex;
    bool  m_pendingRestoreTextSuggestions;
    _UIStringAndPositionPair * m_pendingSupplementalCandidateToInsert;
    bool  m_policyDelegateResult;
    bool  m_preRotateShift;
    bool  m_preRotateShiftLocked;
    int  m_predictionType;
    int  m_presentingKeyboardMenuType;
    UIPhysicalKeyboardEvent * m_previousGlobeKeyEvent;
    NSString * m_previousInputString;
    unsigned long long  m_previousReturnKeyBehavior;
    unsigned long long  m_previousSpaceKeyBehavior;
    bool  m_receivedCandidatesInCurrentInputMode;
    UILexicon * m_recentInputs;
    bool  m_remoteDelegateSupportsImagePaste;
    bool  m_repeatDeleteFromHardwareKeyboard;
    bool  m_repeatDeleteWord;
    bool  m_replacingWord;
    UIDelayedAction * m_resumeDictationForResponderChange;
    bool  m_returnKeyEnabledInLayout;
    int  m_returnKeyState;
    bool  m_rivenCenterFilled;
    bool  m_scrolling;
    UITextInteractionSelectableInputDelegate * m_selectableDelegate;
    bool  m_selecting;
    bool  m_selectionIsEmpty;
    bool  m_settingShift;
    bool  m_shift;
    bool  m_shiftHeldDownNeedsUpdated;
    bool  m_shiftLocked;
    bool  m_shiftLockedEnabled;
    bool  m_shiftNeedsUpdate;
    bool  m_shiftPreventAutoshift;
    bool  m_shouldChargeKeys;
    bool  m_shouldClearTextSuggestions;
    bool  m_shouldEnableCapsLockLanguageSwitchByDefault;
    bool  m_shouldSkipCandidateGeneration;
    bool  m_shouldSuppressAssistantBar;
    bool  m_shouldSuppressSoftwareKeyboard;
    bool  m_shouldUpdateCacheOnInputModesChange;
    UIDelayedAction * m_showCursorAccessory;
    bool  m_showInputModeIndicator;
    bool  m_showsCandidateBar;
    bool  m_showsCandidateInline;
    TISmartPunctuationController * m_smartPunctuationController;
    double  m_splitProgress;
    bool  m_suggestionsShownForCurrentDeletion;
    bool  m_suppressGeometryChangeNotifications;
    bool  m_suppressUpdateCandidateView;
    bool  m_suppressUpdateLayout;
    bool  m_suppressUpdateShiftState;
    bool  m_suppressingDocumentAssertions;
    UIKeyboardTaskQueue * m_taskQueue;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  m_textAlternativesRange;
    bool  m_textInputChangesIgnored;
    unsigned long long  m_textInputChangingCount;
    bool  m_textInputChangingDirection;
    bool  m_textInputChangingText;
    long long  m_textInputSource;
    bool  m_textInputUpdatingSelection;
    UIView * m_tipView;
    TIKeyboardTouchEvent * m_touchEventWaitingForKeyInputEvent;
    UITextInputTraits * m_traits;
    UITextInputTraits * m_traitsForPreviousDelegate;
    UIDelayedAction * m_updateCapsLockDelayOverrideForNonTyping;
    UIDelayedAction * m_updateLastUsedInputModeAction;
    bool  m_updateLayoutOnShowKeyboard;
    bool  m_updatingLayout;
    bool  m_updatingPreferences;
    bool  m_userChangedSelection;
    long long  m_userInteraction;
    bool  m_usesAutoShiftFor3PK;
    bool  m_usesCandidateSelection;
    bool  m_usesSystemKeyboardForASP;
    bool  m_wasDelegateSetupWithRTIClient;
    bool  m_webEventIsKeyDown;
    bool  m_webEventWasHandledAsKeyCommand;
    bool  m_webEventWasHandledByInputManager;
    bool  performingRemoteTextOperations;
    bool  syncingDictationLanguageForInputModeSwitch;
}

@property (nonatomic, readonly) _UITextInteractionEditMenuAssistant *_editMenuAssistant;
@property (nonatomic) bool _mimicShiftBeingHeld;
@property (setter=_setShouldSuppressAssistantBar:, nonatomic) bool _shouldSuppressAssistantBar;
@property (nonatomic, readonly) _UITextChoiceAccelerationAssistant *_textChoicesAssistant;
@property (nonatomic, retain) NSString *activeDictationLanguage;
@property (nonatomic, readonly) UIKeyboardLayout *activeLayout;
@property (nonatomic) bool animateUpdateBars;
@property (nonatomic, retain) UITextInputArrowKeyHistory *arrowKeyHistory;
@property (nonatomic, retain) UIAutocorrectBubbleContainer *autocorrectBubbleContainer;
@property (nonatomic, retain) UIKeyboardScheduledTask *autocorrectPromptTask;
@property (nonatomic, readonly) UIKeyboardAutocorrectionController *autocorrectionController;
@property (nonatomic, retain) TIKeyboardCandidate *autocorrectionToAcceptBeforeProgressiveCandidates;
@property (nonatomic, retain) UIKBAutofillController *autofillController;
@property (nonatomic) bool automaticMinimizationEnabled;
@property (nonatomic, readonly) TUIKeyboardBackendController *backendController;
@property (nonatomic, readonly) bool canShowPredictionBar;
@property (nonatomic) bool canSuggestSupplementalItemsForCurrentSelection;
@property (nonatomic, readonly) UIKeyboardCandidateController *candidateController;
@property (nonatomic) long long candidateViewOffset;
@property (nonatomic, retain) <UITextCursorAssertion> *capslockAssertion;
@property (readonly) bool centerFilled;
@property (nonatomic, retain) id changedDelegate;
@property (nonatomic, copy) NSArray *characterRectsForCharacterRange;
@property (nonatomic, copy) id /* block */ chooseSupplementalCandidateCompletion;
@property (nonatomic) bool committingCandidate;
@property (nonatomic, readonly) bool continuousPathUnderway;
@property (nonatomic, retain) TICandidateRequestToken *currentCandidateRequest;
@property (nonatomic, retain) NSDictionary *currentCandidateRequestInfo;
@property (nonatomic, retain) <UITextCursorAssertion> *cursorAssertion;
@property (nonatomic, retain) _UITextChoiceAccelerationAssistant *customInputDelegateChoiceAccelerationAssistant;
@property (nonatomic, retain) _UIKeyboardTextSelectionController *customInputDelegateSelectionController;
@property (nonatomic, retain) _UIKeyboardTextSelectionInteraction *customInputDelegateSelectionInteraction;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) _UIActionWhenIdle *deferredDidSetDelegateAction;
@property (nonatomic, retain) _UIActionWhenIdle *delayedCandidateRequest;
@property (nonatomic, retain) UIResponder<UIKeyInput> *delegate;
@property (nonatomic, readonly) bool delegateRequiresKeyEvents;
@property (nonatomic, readonly) bool delegateSupportsCorrectionUI;
@property (nonatomic) double deleteWordLastDelete;
@property (nonatomic, retain) NSString *deletedString;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ didTeardownExistingDelegate;
@property (nonatomic) bool disableSmartInsertDelete;
@property (nonatomic, readonly) TIDocumentState *documentState;
@property (nonatomic, retain) UIPhysicalKeyboardEvent *eventForCurrentWebEvent;
@property (nonatomic, copy) id /* block */ externalTask;
@property (nonatomic, retain) <_UIKBFeedbackGenerating> *feedbackGenerator;
@property (nonatomic) bool floatingForced;
@property (nonatomic) bool forCustomInputView;
@property (nonatomic) <UIKeyboardImplGeometryDelegate> *geometryDelegate;
@property (nonatomic) bool geometryIsChanging;
@property (nonatomic) bool handlingKeyCommandFromHardwareKeyboard;
@property (nonatomic) bool hardwareKeyboardIsSeen;
@property (nonatomic) bool hasNextKeyResponder;
@property (nonatomic) bool hasPreviousKeyResponder;
@property (readonly) unsigned long long hash;
@property (getter=isInHardwareKeyboardMode, nonatomic) bool inHardwareKeyboardMode;
@property (nonatomic, readonly) bool inlineTextCompletionAllowedForAutocorrectionType;
@property (nonatomic, readonly) UIInlineTextCompletionController *inlineTextCompletionController;
@property (nonatomic, readonly) <UIInlineTextCompletionLearning> *inlineTextCompletionLearner;
@property (nonatomic, retain) UIKBInputDelegateManager *inputDelegateManager;
@property (nonatomic, readonly) TIKeyboardInputManagerStub *inputManager;
@property (nonatomic, retain) TIKeyboardInputManagerState *inputManagerState;
@property (nonatomic, retain) <UITextCursorAssertion> *inputModeAssertion;
@property (nonatomic, readonly) UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
@property (nonatomic, retain) UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
@property (nonatomic, readonly) UIView *inputOverlayContainer;
@property (nonatomic, retain) UIView *internationalKeyIntroductionView;
@property (nonatomic, retain) NSNumber *isAttachedHardwareKeyboard;
@property (nonatomic, readonly) bool isAutofillPrediction;
@property (nonatomic) bool isCallingTextChangedDuringInputModeSwitch;
@property (nonatomic, readonly) bool isDefaultPrediction;
@property (nonatomic, readonly) bool isRotating;
@property (nonatomic, readonly) bool isSelecting;
@property (nonatomic, readonly) bool isSettingDelegate;
@property (nonatomic, retain) KFAViewController *keyboardFeedbackAssistantViewController;
@property (nonatomic, readonly) TIKeyboardState *keyboardState;
@property (nonatomic) unsigned long long lastChooseSupplementalItemToInsertCallbackIdentifier;
@property (nonatomic) unsigned long long lastDeletionCountForFastDelete;
@property (nonatomic, retain) _UIStringAndPositionPair *lastMatchedSupplementalCandidate;
@property (nonatomic, retain) TIKeyboardLayout *layoutForKeyHitTest;
@property (getter=isFloatingLocked) bool lockFloating;
@property (readonly) unsigned long long minimumTouchesForTranslation;
@property (nonatomic, readonly) bool needAutofillLogin;
@property (nonatomic) UIView *overlayContainerObserved;
@property (nonatomic, retain) _UIStringAndPositionPair *pendingSupplementalCandidateToInsert;
@property (nonatomic) bool performingRemoteTextOperations;
@property (nonatomic) bool prewarmsPredictiveCandidates;
@property (nonatomic) bool receivedCandidatesInCurrentInputMode;
@property (nonatomic, readonly) UIKBRTIPartner *remoteTextInputPartner;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property (nonatomic, retain) NSUUID *resigningRTISessionIdentifier;
@property bool rivenSplitLock;
@property (nonatomic) unsigned long long serviceRole;
@property (nonatomic) bool shouldIgnoreTextInputChanges;
@property (nonatomic, readonly) bool shouldShowCandidateBar;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (nonatomic) bool shouldUpdateLayoutAutomatically;
@property (nonatomic) bool showInputModeIndicator;
@property (nonatomic, readonly) bool showingEmojiSearch;
@property (nonatomic) bool showsCandidateBar;
@property (nonatomic) bool showsCandidateInline;
@property (nonatomic) bool skipRecomputeInputMode;
@property (nonatomic) void*skippedEndInputSession;
@property (nonatomic, retain) NSUUID *skippedEndInputSessionID;
@property (nonatomic, readonly) TISmartPunctuationController *smartPunctuationController;
@property (nonatomic, readonly) bool splitTransitionInProgress;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressUpdateAssistantView;
@property (nonatomic) bool suppressUpdateInputMode;
@property (nonatomic) bool suppressUpdateLayout;
@property (nonatomic) bool suppressUpdateShiftState;
@property (nonatomic) bool syncingDictationLanguageForInputModeSwitch;
@property (nonatomic, readonly) UIKeyboardTaskQueue *taskQueue;
@property (nonatomic, readonly) UITextInputTraits *textInputTraits;
@property (nonatomic, readonly) UITextInteractionAssistant *textInteractionAssistant;
@property (nonatomic, readonly) _UIKeyboardTextSelectionController *textSelectionController;
@property (nonatomic, readonly) double timestampOfLastTouchesEnded;
@property (nonatomic, retain) TIKeyboardTouchEvent *touchEventWaitingForKeyInputEvent;
@property (nonatomic, retain) UIDelayedAction *updateCapsLockDelayOverrideForNonTyping;
@property (nonatomic, readonly) bool updatingPreferences;
@property (nonatomic) <_UITextInputUserInteractionDelegate> *userInteractionDelegate;
@property (nonatomic, copy) id /* block */ willSetupNewDelegate;

+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (bool)_isInputEligibleForSpaceAutodelete:(id)arg1;
+ (struct CGPoint { double x1; double x2; })_normalizedScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (struct CGPoint { double x1; double x2; })_screenPointFromNormalizedPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (id)activeInstance;
+ (double)additionalInstanceHeight;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1 hasInputView:(bool)arg2;
+ (void)applicationDidBecomeActive:(id)arg1;
+ (void)applicationDidEnterBackground:(id)arg1;
+ (void)applicationDidReceiveMemoryWarning:(id)arg1;
+ (void)applicationWillEnterForeground:(id)arg1;
+ (void)applicationWillResignActive:(id)arg1;
+ (void)applicationWillSuspend:(id)arg1;
+ (struct CGSize { double x1; double x2; })defaultSizeForInterfaceOrientation:(long long)arg1;
+ (struct CGPoint { double x1; double x2; })defaultUndockedOffsetForFloating:(bool)arg1;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificPaddingForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (double)floatingHeight;
+ (long long)floatingIdiom;
+ (struct CGPoint { double x1; double x2; })floatingNormalizedPersistentOffset;
+ (struct CGPoint { double x1; double x2; })floatingPersistentOffset;
+ (double)floatingScreenWidthToEmulate;
+ (double)floatingWidth;
+ (bool)isActivatingForeground;
+ (bool)isDictationPopoverEnabled;
+ (bool)isFloating;
+ (bool)isFloatingForced;
+ (bool)isHardwareCommandKeyBeingHeld;
+ (bool)isHardwareShiftKeyBeingHeld;
+ (bool)isSplit;
+ (bool)keyboardOrientation:(long long)arg1 isEquivalentToOrientation:(long long)arg2;
+ (id)keyboardScreen;
+ (struct CGSize { double x1; double x2; })keyboardSizeForInterfaceOrientation:(long long)arg1;
+ (double)keyboardWidthForScreen:(id)arg1 withOrientation:(long long)arg2;
+ (id)keyboardWindow;
+ (Class)layoutClassForCurrentInputMode;
+ (Class)layoutClassForInputMode:(id)arg1 keyboardType:(long long)arg2 screenTraits:(id)arg3;
+ (id)normalizedInputModesFromPreference;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffset;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffsetIgnoringState;
+ (bool)overrideNativeScreen;
+ (void)performWithoutFloatingLock:(id /* block */)arg1;
+ (struct CGPoint { double x1; double x2; })persistentOffset;
+ (double)persistentSplitProgress;
+ (void)purgeImageCache;
+ (void)refreshRivenStateWithTraits:(id)arg1 isKeyboard:(bool)arg2;
+ (void)releaseSharedInstance;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })requestedFloatingInsets;
+ (bool)rivenInstalled;
+ (bool)rivenPreference;
+ (bool)rivenShouldUndock;
+ (bool)rivenTranslationPreference;
+ (void)sendPerformanceNotification:(id)arg1;
+ (void)sendPerformanceNotification:(id)arg1 userInfo:(id)arg2;
+ (void)setFloating:(bool)arg1;
+ (void)setFloating:(bool)arg1 positionedAtDefaultOffsetAnimated:(bool)arg2;
+ (void)setFloating:(bool)arg1 positionedAtOffset:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3;
+ (void)setFloatingPersistentOffset:(struct CGPoint { double x1; double x2; })arg1;
+ (void)setParentTestForProfiling:(id)arg1;
+ (void)setPersistentOffset:(struct CGPoint { double x1; double x2; })arg1;
+ (void)setPersistentSplitProgress:(double)arg1;
+ (id)sharedInstance;
+ (id)sharedInstanceForCustomInputView:(bool)arg1;
+ (bool)shouldAccessInputManagerService;
+ (bool)shouldMergeAssistantBarWithKeyboardLayout;
+ (bool)showsGlobeAndDictationKeysExternally;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1 ignoreInputView:(bool)arg2;
+ (bool)smartInsertDeleteIsEnabled;
+ (double)splitProgress;
+ (bool)supportsFloating;
+ (bool)supportsSplit;
+ (void)suppressSetPersistentOffset:(bool)arg1;
+ (void)switchControlStatusDidChange:(id)arg1;
+ (double)topMarginForInterfaceOrientation:(long long)arg1;
+ (id)uniqueNumberPadInputModesFromInputModes:(id)arg1 forKeyboardType:(long long)arg2;

- (void).cxx_destruct;
- (id)UILanguagePreference;
- (void)_acceptAutocorrection;
- (void)_acceptAutofillCandidateRequiringAuthentication:(id)arg1 payloadDelegate:(id)arg2 executionContext:(id)arg3;
- (void)_acceptSupplementalCandidate:(id)arg1 completion:(id /* block */)arg2;
- (id /* block */)_acquireWaitingOnPerformAutocorrect;
- (id)_activeAssertionController;
- (void)_addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3;
- (void)_attemptAuthenticationWithMessage:(id)arg1;
- (long long)_autoFillModeForPopoverType:(int)arg1;
- (id)_autocorrectionListDemotingAutocorrectionFromList:(id)arg1;
- (id)_autofillContext;
- (id)_autofillGroup;
- (bool)_canDeleteForward;
- (bool)_canHandleResponderCommand:(SEL)arg1;
- (bool)_canHandleResponderCommandConservatively:(SEL)arg1;
- (bool)_cancelOperation:(bool)arg1 testOnly:(bool)arg2;
- (void)_cancelPendingSupplementalCandidateInsertion;
- (void)_clearAutofillGroup;
- (void)_clearDictationMenuTimer:(bool)arg1;
- (unsigned long long)_clipCornersOfView:(id)arg1;
- (void)_completePerformInputViewControllerOutput:(id)arg1 executionContext:(id)arg2;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)arg1 containingProactiveTriggers:(bool)arg2;
- (void)_configureMarkedTextAttributesForConversion:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 highlightRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (bool)_containsUsernamePasswordPairsInAutofillGroup:(id)arg1;
- (id)_contentsOfUsernameField;
- (void)_deactiveActiveKeys;
- (void)_deleteFromInputWithFlags:(unsigned long long)arg1;
- (void)_dictationDidRecieveDidBeginDictationNotification:(id)arg1;
- (void)_didChangeKeyplaneWithContext:(id)arg1;
- (void)_didReplaceText:(id)arg1 withSupplementalCandidate:(id)arg2;
- (void)_dispatchInsertionPointEnteredText:(id)arg1 range:(id)arg2 withSupplementalCandidate:(id)arg3;
- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate;
- (void)_dynamicUserInterfaceTraitDidChange;
- (id)_editMenuAssistant;
- (void)_ensureRTIConnection;
- (id)_fallbackAutofillGroup;
- (void)_forwardNeededShiftStatesToDestination;
- (void)_generateTextSuggestionForKeyboardCamera;
- (id)_getAutocorrection;
- (id)_getAutocorrectionList;
- (id)_getCandidateList;
- (id)_getCurrentKeyboardName;
- (id)_getCurrentKeyplaneName;
- (id)_getLocalizedInputMode;
- (void)_handleAutoFillPopoverCommandWithType:(int)arg1 action:(SEL)arg2;
- (void)_handleKeyBehavior:(unsigned long long)arg1 forKeyType:(id)arg2;
- (bool)_handleKeyCommand:(id)arg1;
- (unsigned long long)_handleKeyCommandCommon:(id)arg1 options:(unsigned long long)arg2;
- (void)_handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (bool)_handleKeyInputMethodCommandForEvent:(id)arg1 canHandleAppKeyCommand:(bool)arg2;
- (void)_handleWebKeyEvent:(id)arg1 withEventType:(unsigned long long)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4;
- (void)_handleWebKeyEvent:(id)arg1 withEventType:(int)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4 executionContext:(id)arg5;
- (void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned long long)arg2 inInputString:(id)arg3;
- (void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned long long)arg2 inInputString:(id)arg3 executionContext:(id)arg4;
- (void)_handleWebKeyEvent:(id)arg1 withInputString:(id)arg2 executionContext:(id)arg3;
- (bool)_handlesKeyCommandForEvent:(id)arg1;
- (bool)_hasCandidates;
- (void)_inputManagerDidGenerateSupplementalCandidates:(id)arg1;
- (bool)_insertSupplementalCandidate:(id)arg1 overridingCandidateText:(id)arg2;
- (void)_insertionPointExitedRangeWithSupplementalCandidate;
- (bool)_isAutoFillPopoverTypeExplicit:(int)arg1;
- (bool)_isKeyCommand:(id)arg1;
- (bool)_isShowingCandidateUIWithAvailableCandidates;
- (bool)_isShowingSuggestionForKeyboardCamera;
- (bool)_isValidKeyInput:(id)arg1;
- (id)_keyboardBehaviorState;
- (id)_layout;
- (void)_local_acceptAutocorrection;
- (bool)_mimicShiftBeingHeld;
- (void)_moveWithEvent:(id)arg1;
- (long long)_needAutofillCandidate:(id)arg1;
- (bool)_needsCandidates;
- (void)_nop;
- (void)_noteInlineCompletionAsMarkedText:(id)arg1;
- (void)_notifyDidTeardownExistingDelegate:(id)arg1 newDelegate:(id)arg2;
- (void)_notifyWillSetupNewDelegate:(id)arg1 existingDelegate:(id)arg2;
- (id)_passwordRules;
- (id)_payloadForSticker:(id)arg1;
- (void)_performInputViewControllerOutput:(id)arg1;
- (void)_performKeyboardOutput:(id /* block */)arg1 respectingForwardingDelegate:(bool)arg2;
- (void)_performTextOperationsForAutoFill:(id)arg1;
- (long long)_positionInCandidateList:(id)arg1;
- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)arg1 selectionChanged:(bool)arg2;
- (void)_postInputResponderChangedNotification;
- (void)_presentDictationMenuIfAllowed;
- (void)_presentKeyboardPopoverWithType:(int)arg1 keyString:(id)arg2 popoverController:(id)arg3 textInputView:(id)arg4 caretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 isVerticalText:(bool)arg6 completion:(id /* block */)arg7;
- (void)_processInputViewControllerKeyboardOutput:(id)arg1 executionContext:(id)arg2;
- (id)_rangeForAutocorrectionText:(id)arg1;
- (id)_rangeForSupplementalItemText:(id)arg1;
- (void)_reloadInputViewsForSameDelegate:(id)arg1 existingDelegate:(id)arg2 force:(bool)arg3 delayEndInputSession:(bool)arg4;
- (void)_remapKeyEvent:(id)arg1 withKeyEventMap:(id)arg2;
- (id)_remoteAppId;
- (id)_remoteAssociatedDomains;
- (id)_remoteLocalizedAppName;
- (id)_remoteUnlocalizedAppName;
- (void)_requestInputManagerSync;
- (void)_resetCapsLock;
- (id)_rtiDocumentStateForAutoFillPopover;
- (void)_scheduleInputAdditionOrDeletion:(id /* block */)arg1;
- (void)_selectionScrolling:(bool)arg1 scroller:(id)arg2;
- (id)_sessionIdentifier;
- (unsigned int)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 lastInputString:(id)arg4 searchString:(id)arg5 compareAttributes:(bool)arg6;
- (void)_setAutocorrects:(bool)arg1;
- (void)_setAutofillGroup:(id)arg1;
- (void)_setCandidateController:(id)arg1;
- (void)_setDelegate:(id)arg1 existingDelegate:(id)arg2 force:(bool)arg3 delayEndInputSession:(bool)arg4;
- (void)_setInputManager:(id)arg1;
- (void)_setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 force:(bool)arg3;
- (void)_setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 force:(bool)arg4 executionContext:(id)arg5;
- (void)_setNeedsCandidates:(bool)arg1;
- (void)_setShiftLockedEnabled:(bool)arg1;
- (void)_setShouldSuppressAssistantBar:(bool)arg1;
- (void)_setShouldSuppressSoftwareKeyboard:(bool)arg1;
- (void)_setSuggestions:(id)arg1;
- (void)_setTransientSelectionModeEnabled:(bool)arg1 forInputDelegate:(id)arg2;
- (void)_setWaitingOnPerformAutocorrect:(id /* block */)arg1;
- (void)_setupDelegate:(id)arg1 delegateSame:(bool)arg2 hardwareKeyboardStateChanged:(bool)arg3 endingInputSessionIdentifier:(id)arg4 force:(bool)arg5 delayEndInputSession:(bool)arg6;
- (bool)_shouldAcceptAutocorrectionOnSelectionChange;
- (void)_shouldClearTextSuggestions:(bool)arg1;
- (bool)_shouldEmitString:(id)arg1 forKeyEvent:(id)arg2;
- (bool)_shouldLoadAutofillSignUpInputViewController;
- (bool)_shouldLoadPredictionsBasedOnCurrentTraits;
- (bool)_shouldMinimizeForHardwareKeyboard;
- (bool)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)arg1;
- (bool)_shouldSuppressAssistantBar;
- (bool)_shouldSuppressSoftwareKeyboard;
- (bool)_shouldSuppressSoftwareKeyboardAndAssistantView;
- (bool)_shouldSuppressSoftwareKeyboardByDictation;
- (bool)_shouldSuppressSoftwareKeyboardForResponder:(id)arg1 ignoringPolicyDelegate:(bool)arg2;
- (bool)_shouldSuppressSoftwareKeyboardIgnoringPolicyDelegate:(bool)arg1;
- (void)_showAutofillExtras;
- (void)_showKeyboardIgnoringPolicyDelegate:(bool)arg1;
- (bool)_showsScribbleIconsInAssistantView;
- (void)_stopAutoDeleteAtDocumentStart;
- (id)_supplementalCandidateIcon:(id)arg1;
- (void)_suppressSoftwareKeyboardStateChangedIgnoringPolicyDelegate:(bool)arg1;
- (void)_tagTouchForTypingMenu:(unsigned int)arg1;
- (id)_targetForResponderCommand:(SEL)arg1;
- (void)_teardownExistingDelegate:(id)arg1 forSetDelegate:(id)arg2 force:(bool)arg3 delayEndInputSession:(bool)arg4;
- (id)_textChoicesAssistant;
- (long long)_textInputSourceForDelegate:(id)arg1;
- (unsigned long long)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(bool)arg1;
- (void)_updateCanSuggestSupplementalItemsForCurrentSelection;
- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput;
- (void)_updateExternalDeviceInputSettingForWindow:(id)arg1;
- (void)_updateInputViewControllerOutput:(id)arg1 forKeyboardOutput:(id)arg2;
- (void)_updateKeyboardConfigurations;
- (void)_updateKeyboardLanguage:(id)arg1;
- (void)_updateKeyboardSuppression:(id)arg1;
- (void)_updateSoundPreheatingForWindow:(id)arg1;
- (void)_updateTextInputPencilSource;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)_willReplaceText:(id)arg1 withSupplementalCandidate:(id)arg2;
- (void)acceptAutocorrection;
- (void)acceptAutocorrection:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (void)acceptAutocorrectionAndEndComposition;
- (id)acceptAutocorrectionForWordTerminator:(id)arg1;
- (void)acceptAutocorrectionForWordTerminator:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)arg1;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)arg1 requestedByRemoteInputDestination:(bool)arg2;
- (bool)acceptAutofillExtraCandidateIfNeeded:(id)arg1;
- (void)acceptCandidate:(id)arg1;
- (void)acceptCandidate:(id)arg1 forInput:(id)arg2;
- (void)acceptCandidate:(id)arg1 forInput:(id)arg2 executionContext:(id)arg3;
- (id)acceptCurrentCandidate;
- (id)acceptCurrentCandidateForInput:(id)arg1;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)arg1;
- (void)acceptFirstCandidate;
- (void)acceptHandwritingCandidate;
- (id)acceptInlineCandidate;
- (id)acceptInlineCandidateForInput:(id)arg1;
- (void)acceptInlineCompletionWithCompletionHandler:(id /* block */)arg1;
- (bool)acceptInputString:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1 appendSeparator:(bool)arg2;
- (void)acceptPredictiveInput:(id)arg1 appendSeparator:(bool)arg2 executionContext:(id)arg3;
- (void)acceptPredictiveInput:(id)arg1 executionContext:(id)arg2;
- (void)acceptRecentInput:(id)arg1;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2 forInput:(id)arg3;
- (void)acceptingCandidateWithTrigger:(id)arg1;
- (bool)accessibilityUsesExtendedKeyboardPredictionsEnabled;
- (id)activeDictationLanguage;
- (id)activeLayout;
- (long long)adaptivePresentationStyleForPresentationController:(id)arg1 traitCollection:(id)arg2;
- (void)addInputEvent:(id)arg1 executionContext:(id)arg2;
- (void)addInputObject:(id)arg1;
- (void)addInputObject:(id)arg1 executionContext:(id)arg2;
- (void)addInputString:(id)arg1;
- (void)addInputString:(id)arg1 fromVariantKey:(bool)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 executionContext:(id)arg3;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3 executionContext:(id)arg4;
- (void)addSupplementalLexicon:(id)arg1;
- (void)addWordTerminator:(id)arg1 afterSpace:(bool)arg2 afterAcceptingCandidate:(id)arg3 elapsedTime:(double)arg4 executionContext:(id)arg5;
- (void)adjustAutoDeleteTimerForForce:(double)arg1;
- (void)adjustCapsLockDelayOverride;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2 executionContext:(id)arg3;
- (void)adjustSegmentSize:(long long)arg1;
- (bool)allowsReachableKeyboard;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)animateAutocorrectionToText:(id)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)animateUpdateBars;
- (void)applicationResumed:(id)arg1;
- (void)applicationResumedEventsOnly:(id)arg1;
- (void)applicationSuspendedEventsOnly:(id)arg1;
- (void)applyAssistantItem:(id)arg1;
- (bool)applyAutocorrection:(id)arg1;
- (id)arrowKeyHistory;
- (unsigned int)assertIntermediateText:(id)arg1;
- (void)assertTextForDictation;
- (bool)assertTextForRemoteDocument:(id)arg1 withSelectionDelta:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 updatingSelection:(bool)arg3;
- (id)asynchronousInputDelegate;
- (id)attributedText;
- (bool)autocapitalizationPreference;
- (id)autocorrectBubbleContainer;
- (id)autocorrectPrompt;
- (id)autocorrectPromptRectsForInput:(id)arg1;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 lastDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)autocorrectPromptTask;
- (bool)autocorrectSpellingEnabled;
- (void)autocorrectionAnimationDidStopWithAutocorrectionView:(id)arg1;
- (id)autocorrectionController;
- (bool)autocorrectionPreference;
- (unsigned long long)autocorrectionPreferenceForTraits;
- (id)autocorrectionRecordForWord:(id)arg1;
- (id)autocorrectionToAcceptBeforeProgressiveCandidates;
- (id)autofillController;
- (long long)autofillSubMode;
- (bool)automaticMinimizationEnabled;
- (id)backendController;
- (void)becomeFirstResponderAndMakeVisible:(bool)arg1;
- (void)beginAcceptingInlineCompletionByDirectTap;
- (void)beginFloatingTransitionFromPanGestureRecognizer:(id)arg1;
- (void)beginObservingInputOverlayContainerFrame;
- (double)biasedKeyboardWidthRatio;
- (id)buildInputSourceState;
- (void)callChanged;
- (bool)callLayoutIgnoresShiftState;
- (bool)callLayoutIsGeometricShiftOrMoreKeyForTouch:(id)arg1;
- (bool)callLayoutIsShiftKeyBeingHeld;
- (bool)callLayoutIsShiftKeyPlaneChooser;
- (void)callLayoutLongPressAction;
- (void)callLayoutSetAutoshift:(bool)arg1;
- (void)callLayoutSetShift:(bool)arg1;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateLocalizedKeys;
- (void)callLayoutUpdateRecentInputs;
- (void)callLayoutUpdateReturnKey;
- (bool)callLayoutUsesAutoShift;
- (bool)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2;
- (bool)callShouldInsertText:(id)arg1;
- (bool)callShouldInsertText:(id)arg1 onDelegate:(id)arg2;
- (bool)canHandleDelete;
- (bool)canHandleKeyHitTest;
- (bool)canHandlePresses:(id)arg1 withEvent:(id)arg2;
- (bool)canPasteImage;
- (bool)canPresentDictationMenuWithAnimationStyle:(long long)arg1;
- (bool)canPresentEmojiPopover;
- (bool)canPresentOrDismissEmojiPopover;
- (bool)canPresentPressAndHoldPopover:(id)arg1;
- (bool)canShowAppConnections;
- (bool)canShowPredictionBar;
- (bool)canSuggestSupplementalItemsForCurrentSelection;
- (bool)canUseCandidateBarAsSupplementToInlineView;
- (void)cancelAllKeyEvents;
- (void)cancelCandidateRequests;
- (void)cancelDictationOnSendReturnKeyPressed;
- (void)cancelSplitTransition;
- (void)candidateBarDidExtendWithGesture;
- (id)candidateController;
- (id)candidateList;
- (void)candidateListAcceptCandidate:(id)arg1;
- (void)candidateListInvalidateSelection:(id)arg1;
- (void)candidateListSelectionDidChange:(id)arg1;
- (bool)candidateSelectionPredictionForTraits;
- (long long)candidateViewOffset;
- (bool)capsLockKeyHasLanguageSwitchLabel;
- (id)capslockAssertion;
- (bool)caretBlinks;
- (bool)caretVisible;
- (bool)centerFilled;
- (int)changeCount;
- (bool)changeNotificationDisabled;
- (id)changedDelegate;
- (void)changingContextWithTrigger:(id)arg1;
- (id)characterRectsForCharacterRange;
- (bool)checkSpellingPreference;
- (bool)checkSpellingPreferenceForTraits;
- (id /* block */)chooseSupplementalCandidateCompletion;
- (void)cleanUpBeforeInputModeSwitch;
- (void)cleanupKeyboardPopover:(id)arg1;
- (void)clearAnimations;
- (void)clearAutoDeleteTimer;
- (void)clearAutocorrectPromptTimer;
- (void)clearAutofillGroup;
- (void)clearCapsLockDelayOverrideTimer;
- (void)clearChangeTimeAndCount;
- (void)clearCursorAccessory;
- (void)clearDelayDeleteTimer;
- (void)clearDelegate;
- (void)clearDetachHardwareKeyboardAction;
- (void)clearDictationMenuTimer;
- (void)clearExcessKeyboardMemory;
- (void)clearForwardingInputDelegateAndResign:(bool)arg1;
- (void)clearIdleDetectionAction;
- (void)clearInput;
- (void)clearInputForMarkedText;
- (void)clearInputWithCandidatesCleared:(bool)arg1;
- (void)clearKeyboardWindowSnapshot;
- (void)clearLanguageIndicator;
- (void)clearLayouts;
- (void)clearLongPressTimer;
- (void)clearRecentInput;
- (void)clearRemoteTextInputPartner;
- (void)clearSelection;
- (void)clearShiftState;
- (void)clearTextAlternativesRange;
- (void)clearTimers;
- (void)clearTransientState;
- (void)clearUpdateLastUsedInputModeAction;
- (void)collapseSelection;
- (bool)committingCandidate;
- (void)completeAcceptCandidate:(id)arg1;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)arg1 executionContext:(id)arg2;
- (void)completeAddInputString:(id)arg1;
- (void)completeAddInputString:(id)arg1 generateCandidates:(bool)arg2;
- (void)completeDelete;
- (void)completeDeleteFromInput;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)arg1;
- (void)completeHandleAutoDelete;
- (void)completeHandleKeyEvent:(id)arg1;
- (void)completeUpdateForChangedSelection:(bool)arg1;
- (void)configureTipViewWithTitle:(id)arg1 description:(id)arg2;
- (bool)continuousPathUnderway;
- (double)convertForceToGrams:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 delegateView:(id)arg2 container:(id)arg3;
- (void)copyOperation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })correctionRect;
- (void)createTypoTrackerReport;
- (id)currentCandidateRequest;
- (id)currentCandidateRequestInfo;
- (long long)currentHandBias;
- (id)currentKey;
- (bool)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(bool)arg1;
- (id)cursorAssertion;
- (bool)cursorIsAtEndOfMarkedText;
- (bool)cursorIsAtStartOfInlineCompletionMarkedText;
- (id)customInputDelegateChoiceAccelerationAssistant;
- (id)customInputDelegateSelectionController;
- (id)customInputDelegateSelectionInteraction;
- (void)cutOperation;
- (void)deactivateLayout;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })defaultSizeForInterfaceOrientation:(long long)arg1;
- (void)defaultsDidChange;
- (id)deferredDidSetDelegateAction;
- (bool)delayedCandidateList;
- (id)delayedCandidateRequest;
- (void)delayedInit;
- (id)delegate;
- (bool)delegateAlreadyInAutofillGroup;
- (id)delegateAsResponder;
- (unsigned long long)delegateConformanceType;
- (bool)delegateIsSMSTextView;
- (bool)delegateRequiresKeyEvents;
- (bool)delegateSuggestionsForCurrentInput;
- (bool)delegateSupportsCorrectionUI;
- (bool)delegateSupportsImagePaste;
- (void)deleteBackward;
- (void)deleteBackwardAndNotify:(bool)arg1;
- (void)deleteBackwardAndNotifyAtEnd:(bool)arg1 deletionCount:(unsigned long long)arg2 reinsertTextInLoop:(bool)arg3;
- (bool)deleteForwardAndNotify:(bool)arg1;
- (bool)deleteForwardAndNotify:(bool)arg1 producedByDeleteInput:(bool)arg2;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1 executionContext:(id)arg2;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (void)deleteOnceFromInputWithExecutionContext:(id)arg1;
- (double)deleteWordLastDelete;
- (id)deletedString;
- (id)desirableInputModesWithExtensions:(bool)arg1;
- (void)detach;
- (void)detachHardwareKeyboard;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificPaddingForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
- (void)didAcceptAutocorrection:(id)arg1 inputCandidate:(id)arg2 wordTerminator:(id)arg3;
- (void)didAcceptAutocorrection:(id)arg1 inputCandidate:(id)arg2 wordTerminator:(id)arg3 learningFlagsMask:(unsigned long long)arg4;
- (void)didApplyAutocorrection:(id)arg1 autocorrectPromptFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)didChangeForwardingInputDelegate:(id)arg1;
- (void)didChangePhraseBoundary;
- (void)didClearText;
- (void)didDismissMemojiCard;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)didPresentMemojiCard;
- (void)didSetDelegate;
- (id /* block */)didTeardownExistingDelegate;
- (bool)disableInputBars;
- (bool)disableSmartInsertDelete;
- (void)disableTransientSelectionMode;
- (void)dismissAutoFillPopover;
- (void)dismissContinuousPathIntroductionView;
- (void)dismissDictationMenu;
- (void)dismissDictationPopover;
- (void)dismissDictationPopoverAndCancelDictation;
- (void)dismissDictationTip;
- (void)dismissEditingIntroductionView;
- (void)dismissEmojiPopoverBeforeCleanup:(bool)arg1;
- (void)dismissEmojiPopoverIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)dismissFloatingKeyboardFromPencilKitIfNeeded;
- (void)dismissInputModeIndicator;
- (void)dismissKeyboard;
- (void)dismissKeyboardPopover:(id)arg1 beforeCleanup:(bool)arg2 completion:(id /* block */)arg3;
- (void)dismissPressAndHoldPopover;
- (void)dismissTextChoicePrompt;
- (void)displayAutoFillPopoverIfAutoFillModeDetected;
- (bool)displaysCandidates;
- (id)documentIdentifierForInputDelegate:(id)arg1;
- (id)documentState;
- (void)documentStateFromInputDelegate:(id /* block */)arg1;
- (bool)dontPushOneTimeCode;
- (bool)doubleSpacePeriodPreference;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })dragGestureRectInView:(id)arg1;
- (id)dynamicCaretList;
- (id)editMenuInteraction:(id)arg1 menuForConfiguration:(id)arg2 suggestedActions:(id)arg3;
- (id)editMenuTipView;
- (bool)editingTraitsMarkedDirty;
- (void)ejectKeyDown;
- (id)emojiCandidate:(id)arg1;
- (id)emojiPopoverController;
- (void)emojiSearchWillInsertEmoji:(id)arg1 forSearchQuery:(id)arg2;
- (void)emojiSearchWillInsertEmoji:(id)arg1 forSearchQuery:(id)arg2 selectionMethod:(id)arg3 inputType:(id)arg4;
- (void)enable;
- (void)enableTransientInputDelegateSelectionMode;
- (void)enableTransientSelectionMode;
- (void)endAcceptingInlineCompletionByDirectTap;
- (void)endObservingInputOverlayContainerFrame;
- (id)eventForCurrentWebEvent;
- (id /* block */)externalTask;
- (void)fadeAutocorrectPrompt;
- (id)feedbackGenerator;
- (void)finishLayoutChangeWithArguments:(id)arg1;
- (void)finishLayoutToCurrentInterfaceOrientation;
- (void)finishSetExtensionInputMode:(id)arg1 didChangeDirection:(bool)arg2;
- (void)finishSetInputMode:(id)arg1 didChangeDirection:(bool)arg2;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)arg1 withPreviousInputMode:(id)arg2;
- (void)finishSetKeyboardInputMode:(id)arg1 previousInputMode:(id)arg2 didChangeDirection:(bool)arg3;
- (void)finishSplitTransitionWithProgress:(double)arg1;
- (void)finishTextChanged;
- (bool)floatingForced;
- (void)flushDelayedTasks;
- (void)flushKeyboardOutputOnInputSourceSession;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (bool)forCustomInputView;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (void)forwardDictationEvent_cancelDictation;
- (void)forwardDictationEvent_handleDictationShouldPause:(bool)arg1 withNewDelagate:(bool)arg2;
- (void)forwardDictationEvent_handleTip:(id)arg1 title:(id)arg2;
- (void)forwardDictationEvent_movePopoverView:(id)arg1;
- (void)forwardDictationEvent_resumeDictation;
- (void)forwardDictationEvent_startDictation;
- (void)forwardDictationEvent_stopDictation:(bool)arg1;
- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)arg1;
- (void)forwardDictationEvent_switchToDictationLanguage:(id)arg1;
- (void)forwardDictationEvent_updateIdleDetection:(long long)arg1;
- (void)forwardKeyboardCameraEvent_selfDestruct;
- (void)forwardKeyboardCameraEvent_startCameraInput:(id)arg1;
- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)arg1 asMarkedText:(bool)arg2;
- (void)forwardKeyboardEventBackToDestination:(id)arg1;
- (void)forwardStickerEvent_presentCard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (id)generateAutocorrectionListForSelectedText;
- (id)generateAutocorrectionReplacements:(id)arg1;
- (void)generateAutocorrectionWithExecutionContext:(id)arg1;
- (void)generateAutocorrectionsWithCompletionHandler:(id /* block */)arg1;
- (void)generateAutofillCandidate;
- (void)generateAutofillCandidateByAddingTask:(bool)arg1;
- (void)generateCandidates;
- (void)generateCandidatesAsynchronously;
- (void)generateCandidatesAsynchronouslyWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 selectedCandidate:(id)arg2;
- (void)generateCandidatesFromReplacements;
- (void)generateCandidatesWithOptions:(int)arg1;
- (void)generateReplacementsForString:(id)arg1 candidatesHandler:(id /* block */)arg2 executionContext:(id)arg3;
- (void)geometryChangeDone:(bool)arg1;
- (id)geometryDelegate;
- (bool)geometryIsChanging;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getCorrectionRectIsVertical:(bool*)arg1;
- (bool)globeKeyDisplaysAsEmojiKey;
- (void)handleAcceptedCandidate:(id)arg1 executionContext:(id)arg2;
- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unsigned long long)arg1;
- (void)handleAutoDeleteWithExecutionContext:(id)arg1;
- (void)handleAutoFillContactDetected;
- (void)handleAutoFillContactPopoverCommand;
- (void)handleAutoFillCreditCardDetected;
- (void)handleAutoFillCreditCardPopoverCommand;
- (void)handleAutoFillPasswordDetected;
- (void)handleAutoFillPasswordPopoverCommand;
- (void)handleAutofillCredentialSaveIfNeeded:(id)arg1;
- (bool)handleCandidateListNavigation:(unsigned int)arg1 hasCandidatesForTypedInput:(bool)arg2 shiftDown:(bool)arg3 keyCommandTypeHandled:(unsigned long long*)arg4 allowRepeat:(bool*)arg5 beforePublic:(bool)arg6 keyEvent:(id)arg7;
- (void)handleClear;
- (void)handleClearWithExecutionContext:(id)arg1;
- (void)handleClearWithInsertBeforeAdvance:(id)arg1;
- (void)handleDelayedActionLongPress:(id)arg1;
- (void)handleDelete;
- (void)handleDeleteAsRepeat:(bool)arg1 executionContext:(id)arg2;
- (id)handleDeleteAutospaceForInputString:(id)arg1 afterSpace:(bool)arg2;
- (void)handleDeleteWithExecutionContext:(id)arg1;
- (void)handleDeleteWordWithExecutionContext:(id)arg1;
- (void)handleDeletionForCandidate:(id)arg1;
- (void)handleDictationForResponderChange;
- (void)handleEmojiInput:(id)arg1 keyboardState:(id)arg2;
- (void)handleEmojiPopoverKeyCommand;
- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)arg1 toReplaceText:(id)arg2;
- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(bool)arg1;
- (void)handleEventFromRemoteSource_cancelChooseSupplementalItemToInsert;
- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)arg1 toReplaceText:(id)arg2;
- (void)handleEventFromRemoteSource_insertAutofillContent:(id)arg1;
- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)arg1 textToCommit:(id)arg2;
- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)arg1 withSupplementalCandidate:(id)arg2;
- (void)handleEventFromRemoteSource_insertionPointExitedTextWithSupplementalItems;
- (void)handleGrammarCorrectionEntries:(id)arg1;
- (bool)handleHorizontalArrow:(bool)arg1 shiftDown:(bool)arg2 beforePublicKeyCommands:(bool)arg3 testOnly:(bool)arg4 isVerticalCandidate:(bool)arg5 hasCandidatesForTypedInput:(bool)arg6 shouldNavigateCandidateList:(bool)arg7 canHandleInputDelegateCommand:(id /* block */)arg8 savedHistory:(id)arg9 keyCommandTypeHandled:(unsigned long long*)arg10 keyEvent:(id)arg11;
- (void)handleIdleDetectionAction;
- (bool)handleInputManagerBasedKeybind:(id)arg1 testOnly:(bool)arg2;
- (bool)handleInputSwitcherForKeyEvent:(id)arg1;
- (bool)handleKeyAppCommandForCurrentEvent;
- (bool)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2 beforePublicKeyCommands:(bool)arg3;
- (unsigned long long)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2 options:(unsigned long long)arg3;
- (bool)handleKeyCommandsBeforePublicAsInputUIHost:(id)arg1;
- (void)handleKeyEvent:(id)arg1;
- (void)handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (bool)handleKeyInputMethodCommandForCurrentEvent;
- (bool)handleKeyTextCommandForCurrentEvent;
- (void)handleKeyWithString:(id)arg1 forKeyEvent:(id)arg2 executionContext:(id)arg3;
- (void)handleKeyboardInput:(id)arg1 executionContext:(id)arg2;
- (void)handleModifiersChangeForKeyEvent:(id)arg1 executionContext:(id)arg2;
- (bool)handleMoveCursorToEndOfLine:(bool)arg1 beforePublicKeyCommands:(bool)arg2 testOnly:(bool)arg3 savedHistory:(id)arg4 force:(bool)arg5 canHandleSelectableInputDelegateCommand:(id /* block */)arg6 keyEvent:(id)arg7;
- (bool)handleMoveCursorToStartOfLine:(bool)arg1 beforePublicKeyCommands:(bool)arg2 testOnly:(bool)arg3 savedHistory:(id)arg4 force:(bool)arg5 canHandleSelectableInputDelegateCommand:(id /* block */)arg6 keyEvent:(id)arg7;
- (bool)handleMoveResponderWithShift:(bool)arg1;
- (void)handleObserverCallback;
- (void)handleRemoteDictationEvent_cancelDictation;
- (void)handleRemoteDictationEvent_handleTip:(id)arg1;
- (void)handleRemoteDictationEvent_movePopoverView:(id)arg1;
- (void)handleRemoteDictationEvent_resumeDictation;
- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)arg1;
- (void)handleRemoteDictationEvent_startDictation;
- (void)handleRemoteDictationEvent_stopDictation:(bool)arg1;
- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)arg1;
- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)arg1;
- (void)handleRemoteDictationEvent_updateIdleDetection:(long long)arg1;
- (void)handleRemoteIndirectGestureWithState:(id)arg1;
- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)arg1;
- (id)handleReplacement:(id)arg1 forSpaceAndInput:(id)arg2;
- (bool)handleReturnKey:(bool)arg1;
- (void)handleStickerEvent_presentCard;
- (void)handleStringInput:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3 executionContext:(id)arg4;
- (bool)handleTabWithShift:(bool)arg1;
- (bool)handleTabWithShift:(bool)arg1 beforePublicKeyCommands:(bool)arg2;
- (bool)handleTabWithShift:(bool)arg1 beforePublicKeyCommands:(bool)arg2 isMoveAction:(bool)arg3 testOnly:(bool)arg4;
- (void)handleUpdateLastUsedInputModeAction:(id)arg1;
- (bool)handleVerticalArrow:(bool)arg1 shiftDown:(bool)arg2 beforePublicKeyCommands:(bool)arg3 testOnly:(bool)arg4 isVerticalCandidate:(bool)arg5 hasCandidatesForTypedInput:(bool)arg6 inputDelegateCommandEnabled:(bool)arg7 canHandleInputDelegateCommand:(id /* block */)arg8 savedHistory:(id)arg9 keyCommandTypeHandled:(unsigned long long*)arg10 keyEvent:(id)arg11;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)arg1 user:(id)arg2 password:(id)arg3 passwordIsAutoGenerated:(bool)arg4;
- (bool)handlingKeyCommandFromHardwareKeyboard;
- (bool)hardwareKeyboardAttached;
- (void)hardwareKeyboardAvailabilityChanged;
- (void)hardwareKeyboardAvailabilityDidChange:(id)arg1;
- (bool)hardwareKeyboardIsSeen;
- (id)hardwareKeyboardsSeenPreference;
- (bool)hasAutocorrectPrompt;
- (bool)hasDelegate;
- (bool)hasEditableMarkedText;
- (bool)hasInlineCompletionAsMarkedText;
- (bool)hasMarkedText;
- (bool)hasNextKeyResponder;
- (bool)hasPreviousKeyResponder;
- (bool)hideAccessoryViewsDuringSplit;
- (void)hideDictationMenuIfNeeded:(bool)arg1;
- (void)hideInternationalKeyIntroductionIfNeeded;
- (void)hideKeyboard;
- (void)hideKeyboardIgnoringHardwareLayouts:(bool)arg1;
- (void)hideKeyboardWithoutPreflightChecks;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)implProxy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forCustomInputView:(bool)arg2;
- (id)inlineCompletionAsMarkedText;
- (bool)inlineTextCompletionAllowedForAutocorrectionType;
- (bool)inlineTextCompletionAllowedForTraits;
- (id)inlineTextCompletionController;
- (id)inlineTextCompletionLearner;
- (id)inputDelegate;
- (id)inputDelegateManager;
- (id)inputEventForInputString:(id)arg1;
- (id)inputForMarkedText;
- (id)inputManager;
- (void)inputManagerDidGenerateAutocorrections:(id)arg1 executionContext:(id)arg2;
- (void)inputManagerDidGenerateAutocorrections:(id)arg1 forPredictiveInput:(id)arg2 executionContext:(id)arg3;
- (void)inputManagerDidGenerateCandidateResultSet:(id)arg1;
- (id)inputManagerState;
- (id)inputModeAssertion;
- (id)inputModeIndicatorController;
- (id)inputModeLastUsedPreference;
- (id)inputModePreference;
- (bool)inputModeSwitcherVisible;
- (id)inputOverlayContainer;
- (id)inputOverlayContainerForCandidateView:(bool)arg1;
- (id)inputStringFromPhraseBoundary;
- (id)inputSystemSourceSession;
- (bool)inputUIHandleTabWithShift:(bool)arg1 testOnly:(bool)arg2;
- (id)inputWordForTerminatorAtSelection;
- (void)insertAttributedText:(id)arg1;
- (bool)insertAutoFillTextSuggestion:(id)arg1;
- (void)insertCustomTextSuggestion:(id)arg1;
- (void)insertDictationResult:(id)arg1;
- (void)insertSticker:(id)arg1;
- (void)insertText:(id)arg1 withAlternativePredictions:(id)arg2;
- (bool)insertTextIfShould:(id)arg1;
- (void)insertTextSuggestionCandidate:(id)arg1;
- (void)insertedAccentVariantFromPopover:(id)arg1;
- (void)insertedEmojiFromPopover:(id)arg1 selectionMethod:(id)arg2;
- (bool)insertsSpaceAfterPredictiveInput;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (id)internationalKeyIntroductionView;
- (id)isAttachedHardwareKeyboard;
- (bool)isAutoDeleteActive;
- (bool)isAutoFillMode;
- (bool)isAutoShifted;
- (bool)isAutofillPrediction;
- (bool)isCallingInputDelegate;
- (bool)isCallingTextChangedDuringInputModeSwitch;
- (bool)isCapsLockASCIIToggle;
- (bool)isCapsLockSignOn;
- (bool)isCapsLockSwitchEnabled;
- (bool)isCurrentEditResponderInEditingMode;
- (bool)isCurrentEditResponderWebKit;
- (bool)isDefaultPrediction;
- (bool)isDictationLanguageMenuPresented;
- (bool)isDictationMenuPresented;
- (bool)isDictationPopoverPresented;
- (bool)isEmojiPopoverBeingDismissed;
- (bool)isEmojiPopoverBeingPresented;
- (bool)isEmojiPopoverPresented;
- (bool)isEmojiPopoverVisibleOrDismissing;
- (bool)isFloatingLocked;
- (bool)isInHardwareKeyboardMode;
- (bool)isLongPress;
- (bool)isMemberOfAutofillGroup:(id)arg1;
- (bool)isMemberOfPossibleAutofillGroup:(id)arg1;
- (bool)isMinimized;
- (bool)isOutOfProcess;
- (bool)isPredictionViewControllerVisible;
- (bool)isPressAndHoldPopoverPresented;
- (bool)isRTIClient;
- (bool)isRotating;
- (bool)isSelecting;
- (bool)isSelectionAtSentenceAutoshiftBoundary;
- (bool)isSettingDelegate;
- (bool)isShiftKeyBeingHeld;
- (bool)isShiftLocked;
- (bool)isShifted;
- (bool)isSyncingDictationLanguageForInputModeSwitch;
- (bool)isTrackpadMode;
- (bool)isUsingDictationLayout;
- (void)jumpToCompositions;
- (void)keyActivated;
- (void)keyDeactivated;
- (void)keyboardDidHide:(id)arg1;
- (bool)keyboardDrawsOpaque;
- (void)keyboardFeedbackAssistantControllerDidFinish;
- (id)keyboardFeedbackAssistantViewController;
- (void)keyboardInputModeIndicatorControllerDismissIndicator:(id)arg1;
- (void)keyboardInputModeIndicatorControllerPresentIndicator:(id)arg1 reason:(id)arg2;
- (bool)keyboardInputModeIndicatorControllerShouldPresentIndicator:(id)arg1;
- (bool)keyboardIsInPencilTextInputMode;
- (bool)keyboardIsKeyPad;
- (bool)keyboardLayoutIsInAnotherProcess;
- (id)keyboardMenuElements;
- (id)keyboardMenuTipIdentifier;
- (void)keyboardSceneDelegate:(id)arg1 startedPinningInputViewsOnBehalfOfResponder:(id)arg2;
- (void)keyboardSceneDelegate:(id)arg1 stoppedPinningInputViewsOnBehalfOfResponder:(id)arg2;
- (id)keyboardState;
- (id)keyboardWindowSnapshot;
- (bool)keyboardsExpandedPreference;
- (id)keyplaneView;
- (unsigned long long)lastChooseSupplementalItemToInsertCallbackIdentifier;
- (unsigned long long)lastDeletionCountForFastDelete;
- (id)lastMatchedSupplementalCandidate;
- (double)lastTouchDownTimestamp;
- (void)layoutDidResize;
- (id)layoutForKeyHitTest;
- (void)layoutHasChanged;
- (bool)layoutIsResizing;
- (id)layoutState;
- (void)layoutSubviews;
- (bool)liveConversionEnabled;
- (void)logHandwritingData;
- (void)longPressAction;
- (void)longPressAction:(id)arg1;
- (void)lookUpResponderChainForCustomInputView;
- (id)markedText;
- (id)markedTextOverlay;
- (unsigned long long)maxNumberOfProactiveCells;
- (bool)maximizing;
- (unsigned long long)minimumTouchesForTranslation;
- (void)modifyTextInputTraits:(id /* block */)arg1 forceSync:(bool)arg2;
- (void)moveCursorByAmount:(long long)arg1;
- (void)moveCursorLeftShifted:(bool)arg1;
- (void)moveCursorRightShifted:(bool)arg1;
- (void)movePhraseBoundaryToDirection:(long long)arg1 granularity:(long long)arg2;
- (long long)needAutofill;
- (long long)needAutofillCandidate:(id)arg1;
- (bool)needAutofillLogin;
- (bool)needOneTimeCodeAutofill;
- (bool)needsToDeferUpdateTextCandidateView;
- (bool)nextCharacterIsWordCharacter;
- (bool)nextInputWouldStartSentence;
- (bool)noContent;
- (void)nonDestructivelyDismissKeyboard;
- (void)notifyInputSourceStateChangeIfNeeded;
- (void)notifyShiftState;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)optOutASPInTextField;
- (id)overlayContainerObserved;
- (void)pasteOperation;
- (void)pauseDictationForResponderChange;
- (id)pendingSupplementalCandidateToInsert;
- (void)performAutoDeleteNumberOfTimes:(unsigned long long)arg1 deleteOneWord:(bool)arg2 forwardToInputSource:(bool)arg3;
- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id /* block */)arg1;
- (void)performDelete;
- (void)performHitTestForTouchEvent:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)performHitTestForTouchEvents:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)performKeyBehaviorCommitInline;
- (void)performKeyBehaviorConfirm;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (bool)performKeyboardEvent:(id)arg1;
- (void)performKeyboardOutput:(id)arg1;
- (void)performKeyboardOutput:(id)arg1 checkingDelegate:(bool)arg2;
- (bool)performKeyboardOutput:(id)arg1 checkingDelegate:(bool)arg2 forwardToRemoteInputSource:(bool)arg3;
- (void)performKeyboardOutput:(id)arg1 forwardToRemoteInputSource:(bool)arg2;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)arg1;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)arg1 textInputSource:(long long)arg2;
- (void)performKeyboardOutputAsRTIClient:(id)arg1;
- (void)performKeyboardOutputInfo:(id)arg1;
- (void)performKeyboardOutputOnInputSourceSession:(id /* block */)arg1;
- (void)performKeyboardOutputOnInputSourceSession:(id /* block */)arg1 shouldFlush:(bool)arg2;
- (void)performOnInputSourceSessionActionSelector:(SEL)arg1;
- (void)performOperations:(id /* block */)arg1 withTextInputSource:(long long)arg2;
- (void)performReturn;
- (void)performSendAction;
- (void)performSendCurrentLocation;
- (void)performStopAutoDeleteAtDocumentStart;
- (void)performTextOperationActionSelector:(SEL)arg1;
- (bool)performingRemoteTextOperations;
- (unsigned long long)phraseBoundary;
- (id)physicalKeyboardEventWithInput:(id)arg1 inputFlags:(int)arg2;
- (void)playDeleteKeyFeedbackIfNecessaryRepeat:(bool)arg1 rapid:(bool)arg2;
- (void)playDeleteKeyFeedbackRepeat:(bool)arg1 rapid:(bool)arg2;
- (bool)playInputClick;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)popoverPresentationController:(id)arg1 willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inView:(inout id*)arg3;
- (void)postInputResponderCapabilitiesChangedNotification;
- (void)postInputViewControllerShouldUpdateNotification:(id)arg1;
- (bool)predictionFromPreference;
- (bool)preferFallbackAutofillGroup;
- (long long)preferredCandidateViewTypeForCandidateResultSet:(id)arg1;
- (void)prepareForFloatingTransition:(bool)arg1;
- (void)prepareForGeometryChange;
- (void)prepareForSelectionChange;
- (void)prepareKeyboardInputModeFromPreferences:(id)arg1;
- (void)prepareLayoutForInterfaceOrientation:(long long)arg1;
- (void)presentContinuousPathIntroductionView;
- (void)presentDictationMenu;
- (void)presentDictationMenuTip:(id)arg1;
- (void)presentDictationMenuTipWithTitle:(id)arg1 description:(id)arg2;
- (void)presentDictationMenuWithAnimationStyle:(long long)arg1;
- (void)presentDictationPopover;
- (void)presentEditingIntroductionView;
- (void)presentEmojiPopoverViaTrigger:(id)arg1 completion:(id /* block */)arg2;
- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)arg1;
- (void)presentKeyboardMenu:(int)arg1;
- (void)presentKeyboardPopoverWithType:(int)arg1 keyString:(id)arg2 completion:(id /* block */)arg3;
- (void)presentPressAndHoldPopoverWithKeyString:(id)arg1;
- (void)presentTextChoicePromptForRange:(id)arg1;
- (bool)presentTextCompletionAsMarkedText:(id)arg1;
- (void)presentationControllerDidDismiss:(id)arg1;
- (bool)presentationControllerShouldDismiss:(id)arg1;
- (bool)prewarmsPredictiveCandidates;
- (void)proceedShouldReturnIfNeededForASP;
- (void)processPayloadInfo:(id)arg1;
- (void)provideAutoFillTypingUpdatesIfNecessary;
- (void)pushAutocorrections:(id)arg1 requestToken:(id)arg2;
- (void)pushCandidateResultSet:(id)arg1 requestToken:(id)arg2;
- (void)queueDelayedTask:(id /* block */)arg1;
- (id)rangeForTextCompletionInput:(id)arg1;
- (bool)receivedCandidatesInCurrentInputMode;
- (void)recomputeActiveInputModesWithExtensions:(bool)arg1;
- (void)recomputeActiveInputModesWithExtensions:(bool)arg1 allowNonLinguisticInputModes:(bool)arg2;
- (void)refreshAutofillModeIfNecessary;
- (void)refreshKeyboardState;
- (void)refreshKeyboardStateUpdatingSecureCandidateRenderTraits:(bool)arg1;
- (void)refreshRivenPreferences;
- (void)refreshSecureCandidatesIfNecessary;
- (void)reinitializeAfterInputModeSwitch:(bool)arg1;
- (void)rejectAutocorrection:(id)arg1;
- (void)releaseInputManager;
- (void)releaseInputManagerIfInactive;
- (void)releaseSuppressUpdateCandidateView;
- (void)reloadCurrentInputMode;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (id)remoteTextEditingMetadata;
- (id)remoteTextInputPartner;
- (id)remoteTextInputPartnerPrivate;
- (void)removeASPVisualEffectsIfNecessary:(id)arg1;
- (void)removeAllDynamicDictionaries;
- (void)removeAutocorrectPrompt;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)removeAutocorrection;
- (void)removeCandidateList;
- (void)removeCapsLockDelayOverride;
- (void)removeFromSuperview;
- (void)removeInlineTextCompletionPrompt;
- (void)removeRecentInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removeSpaceAfterEmojiForInputString:(id)arg1;
- (void)removeSupplementalLexicon:(id)arg1;
- (void)removeTextChoicePrompt;
- (void)removeTextChoicePromptAndAutocorrection;
- (void)removeTextChoicePromptWithUnderline;
- (void)removeTextChoiceUnderlines;
- (void)removeTextChoiceUnderlinesInRange:(id)arg1;
- (void)removeTextCompletionFromMarkedText:(id)arg1;
- (void)replaceAllTextInResponder:(id)arg1 withText:(id)arg2;
- (void)replaceText:(id)arg1;
- (id)replacementsFromSelectedText;
- (void)representDictationMenu;
- (unsigned long long)requestedInteractionModel;
- (void)resetInputDelegate;
- (id)resigningRTISessionIdentifier;
- (id)responderForSendCurrentLocation;
- (id)responderStylingTraitsForceEditingMask:(bool)arg1;
- (void)responseContextDidChange;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)restoreTextSuggestions;
- (void)resumeDictationForResponderChange;
- (id)returnKeyDisplayName;
- (bool)returnKeyEnabled;
- (int)returnKeyType;
- (void)revealHiddenCandidates;
- (bool)rivenSplitLock;
- (void)saveInputModesPreference:(id)arg1;
- (id)savedAutocorrectionListForCandidate:(id)arg1;
- (double)scaleCurrentForceFrom:(double)arg1 to:(double)arg2;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (void)scheduleReplacementsWithOptions:(unsigned long long)arg1;
- (void)scribbleWillBeginWriting:(id)arg1;
- (id)searchStringForMarkedText;
- (void)selectionDidChange:(id)arg1;
- (void)selectionScrolling:(id)arg1;
- (void)selectionWillChange:(id)arg1;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (void)sendKeyboardDismissalNotification;
- (unsigned long long)serviceRole;
- (void)setActiveDictationLanguage:(id)arg1;
- (void)setAnimateUpdateBars:(bool)arg1;
- (void)setArrowKeyHistory:(id)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setAutocorrectBubbleContainer:(id)arg1;
- (void)setAutocorrectPromptTask:(id)arg1;
- (void)setAutocorrectSpellingEnabled:(bool)arg1;
- (void)setAutocorrection:(id)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)setAutocorrectionToAcceptBeforeProgressiveCandidates:(id)arg1;
- (void)setAutofillController:(id)arg1;
- (void)setAutomaticMinimizationEnabled:(bool)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCanSuggestSupplementalItemsForCurrentSelection:(bool)arg1;
- (void)setCandidateDisplayIsExtended:(bool)arg1;
- (void)setCandidateList:(id)arg1;
- (void)setCandidateViewOffset:(long long)arg1;
- (void)setCandidates:(id)arg1;
- (void)setCapsLockIfNeeded;
- (void)setCapsLockSign;
- (void)setCapslockAssertion:(id)arg1;
- (void)setCaretBlinks:(bool)arg1;
- (void)setCaretVisible:(bool)arg1;
- (void)setChangeNotificationDisabled:(bool)arg1;
- (void)setChanged;
- (void)setChangedDelegate:(id)arg1;
- (void)setCharacterRectsForCharacterRange:(id)arg1;
- (void)setChooseSupplementalCandidateCompletion:(id /* block */)arg1;
- (void)setCommittingCandidate:(bool)arg1;
- (void)setCorrectionLearningAllowed:(bool)arg1;
- (void)setCurrentCandidateRequest:(id)arg1;
- (void)setCurrentCandidateRequestInfo:(id)arg1;
- (void)setCursorAssertion:(id)arg1;
- (void)setCustomInputDelegateChoiceAccelerationAssistant:(id)arg1;
- (void)setCustomInputDelegateSelectionController:(id)arg1;
- (void)setCustomInputDelegateSelectionInteraction:(id)arg1;
- (void)setDefaultTextInputTraits:(id)arg1;
- (void)setDeferredDidSetDelegateAction:(id)arg1;
- (void)setDelayedCandidateRequest:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 force:(bool)arg2;
- (void)setDelegate:(id)arg1 force:(bool)arg2 delayEndInputSession:(bool)arg3;
- (void)setDeleteWordLastDelete:(double)arg1;
- (void)setDeletedString:(id)arg1;
- (void)setDidTeardownExistingDelegate:(id /* block */)arg1;
- (void)setDisableSmartInsertDelete:(bool)arg1;
- (void)setDocumentState:(id)arg1;
- (void)setDocumentStateForAutocorrection:(id)arg1;
- (void)setEditMenuFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEditingTraitsMarkedDirty:(bool)arg1;
- (void)setEventForCurrentWebEvent:(id)arg1;
- (void)setExternalTask:(id /* block */)arg1;
- (void)setFeedbackGenerator:(id)arg1;
- (void)setFloatingForced:(bool)arg1;
- (void)setForCustomInputView:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGeometryDelegate:(id)arg1;
- (void)setGeometryIsChanging:(bool)arg1;
- (void)setHandlingKeyCommandFromHardwareKeyboard:(bool)arg1;
- (void)setHardwareKeyboardIsSeen:(bool)arg1;
- (void)setHardwareKeyboardsSeenPreference:(id)arg1;
- (void)setHasNextKeyResponder:(bool)arg1;
- (void)setHasPreviousKeyResponder:(bool)arg1;
- (void)setInHardwareKeyboardMode:(bool)arg1;
- (void)setInHardwareKeyboardMode:(bool)arg1 forceRebuild:(bool)arg2;
- (void)setInHardwareKeyboardMode:(bool)arg1 forceRebuild:(bool)arg2 shouldMoveKeyboard:(bool)arg3;
- (void)setInHardwareKeyboardMode:(bool)arg1 shouldMoveKeyboard:(bool)arg2;
- (void)setInSplitKeyboardMode:(bool)arg1;
- (void)setInitialDirection;
- (void)setInlineCompletionAsMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setInputDelegateManager:(id)arg1;
- (void)setInputManagerFromCurrentInputMode;
- (void)setInputManagerState:(id)arg1;
- (void)setInputMode:(id)arg1;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4;
- (void)setInputModeAssertion:(id)arg1;
- (void)setInputModeFromPreferences;
- (void)setInputModeIndicatorController:(id)arg1;
- (void)setInputModeSwitcherVisibleInRemote:(bool)arg1;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)arg1;
- (void)setInputPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInternationalKeyIntroductionView:(id)arg1;
- (void)setIsAttachedHardwareKeyboard:(id)arg1;
- (void)setIsCallingTextChangedDuringInputModeSwitch:(bool)arg1;
- (void)setKeyboardFeedbackAssistantViewController:(id)arg1;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4;
- (void)setKeyboardInputModeFromPreferences:(id)arg1;
- (void)setKeyboardMinimizedByDictation:(bool)arg1;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLastChooseSupplementalItemToInsertCallbackIdentifier:(unsigned long long)arg1;
- (void)setLastDeletionCountForFastDelete:(unsigned long long)arg1;
- (void)setLastMatchedSupplementalCandidate:(id)arg1;
- (void)setLayoutAllowsContinuousPath:(bool)arg1;
- (void)setLayoutForKeyHitTest:(id)arg1;
- (void)setLayoutRenderConfig:(id)arg1;
- (void)setLockFloating:(bool)arg1;
- (unsigned int)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 lastInputString:(id)arg4 searchString:(id)arg5 candidateOffset:(long long)arg6 liveConversionSegments:(id)arg7 highlighSegmentIndex:(unsigned long long)arg8;
- (void)setOverlayContainerObserved:(id)arg1;
- (void)setOverrideTextInputTraits:(id)arg1;
- (void)setPendingAutofillIndex:(long long)arg1;
- (void)setPendingSupplementalCandidateToInsert:(id)arg1;
- (void)setPerformingRemoteTextOperations:(bool)arg1;
- (void)setPreviousGlobeKeyEvent:(id)arg1;
- (void)setPreviousInputString:(id)arg1;
- (void)setPrewarmsPredictiveCandidates:(bool)arg1;
- (void)setReceivedCandidatesInCurrentInputMode:(bool)arg1;
- (void)setRemoteDelegateSupportsImagePaste:(bool)arg1;
- (void)setRemoteDictationPopover:(id)arg1;
- (void)setRequestedInteractionModel:(unsigned long long)arg1;
- (void)setResigningRTISessionIdentifier:(id)arg1;
- (void)setReturnKeyEnabled:(bool)arg1;
- (void)setRivenSplitLock:(bool)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setServiceRole:(unsigned long long)arg1;
- (void)setShift:(bool)arg1;
- (void)setShift:(bool)arg1 autoshift:(bool)arg2;
- (void)setShiftLocked:(bool)arg1;
- (void)setShiftLockedForced:(bool)arg1;
- (void)setShiftNeedsUpdate;
- (void)setShiftOffIfNeeded;
- (void)setShiftPreventAutoshift:(bool)arg1;
- (void)setShiftStatesNeededInDestination:(bool)arg1 autoShifted:(bool)arg2 shiftLocked:(bool)arg3;
- (void)setShouldIgnoreTextInputChanges:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1 userInitiated:(bool)arg2;
- (void)setShouldUpdateCacheOnInputModesChange:(bool)arg1;
- (void)setShouldUpdateLayoutAutomatically:(bool)arg1;
- (void)setShowInputModeIndicator:(bool)arg1;
- (void)setShowsCandidateBar:(bool)arg1;
- (void)setShowsCandidateInline:(bool)arg1;
- (void)setSkipRecomputeInputMode:(bool)arg1;
- (void)setSkippedEndInputSession:(void*)arg1;
- (void)setSkippedEndInputSessionID:(id)arg1;
- (void)setSplit:(bool)arg1 animated:(bool)arg2;
- (void)setSplitProgress:(double)arg1;
- (void)setSuggestions:(id)arg1;
- (void)setSuppressUpdateAssistantView:(bool)arg1;
- (void)setSuppressUpdateInputMode:(bool)arg1;
- (void)setSuppressUpdateLayout:(bool)arg1;
- (void)setSuppressUpdateShiftState:(bool)arg1;
- (void)setSyncingDictationLanguageForInputModeSwitch:(bool)arg1;
- (void)setTextInputChangesIgnored:(bool)arg1;
- (void)setTouchEventWaitingForKeyInputEvent:(id)arg1;
- (void)setTwoFingerTapTimestamp:(double)arg1;
- (void)setUpdateCapsLockDelayOverrideForNonTyping:(id)arg1;
- (void)setUserInteractionDelegate:(id)arg1;
- (void)setUserSelectedCurrentCandidate:(bool)arg1;
- (void)setUsesCandidateSelection:(bool)arg1;
- (void)setWillSetupNewDelegate:(id /* block */)arg1;
- (void)set_mimicShiftBeingHeld:(bool)arg1;
- (bool)shiftLockPreference;
- (bool)shiftLockedEnabled;
- (bool)shouldAcceptCandidate:(id)arg1 beforeInputString:(id)arg2;
- (bool)shouldAcceptContinuousPathConversion:(id)arg1;
- (bool)shouldAllowRepeatEvent:(id)arg1;
- (bool)shouldAllowSelectionGestures:(bool)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toBegin:(bool)arg3;
- (bool)shouldAllowTwoFingerSelectionGestureOnView:(id)arg1;
- (bool)shouldApplyAcceptedAutocorrection:(id)arg1;
- (bool)shouldApplyKeyboardCommandToUIHost;
- (bool)shouldApplyKeyboardInputToUIHost;
- (bool)shouldDeleteAutospaceBeforeTerminator:(id)arg1;
- (double)shouldExtendLongPressAction:(id)arg1;
- (bool)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)arg1;
- (bool)shouldGenerateCandidatesAfterSelectionChange;
- (bool)shouldIgnoreTextInputChanges;
- (bool)shouldLoadAutofillSignUpInputViewController;
- (bool)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)arg1;
- (bool)shouldRapidDelete;
- (bool)shouldRapidDeleteWithDelegate;
- (bool)shouldShowCandidateBar;
- (bool)shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:(bool)arg1 ignoreHidePredictionTrait:(bool)arg2;
- (bool)shouldShowContinuousPathIntroductionView;
- (bool)shouldShowDictationKey;
- (bool)shouldShowEditingIntroductionView;
- (bool)shouldShowInternationalKey;
- (bool)shouldShowInternationalKeyIntroduction;
- (bool)shouldShowKeyboardMenu;
- (bool)shouldShowLongPredictionList;
- (bool)shouldShowModelessInputTip;
- (bool)shouldSkipCandidateSelection;
- (bool)shouldSwitchFromInputManagerMode:(id)arg1 toInputMode:(id)arg2;
- (bool)shouldSwitchInputMode:(id)arg1;
- (bool)shouldUnderlineCandidate:(id)arg1;
- (bool)shouldUpdateLayoutAutomatically;
- (bool)shouldUseAdaptiveDelete;
- (bool)shouldUseCarPlayModes;
- (bool)shouldUsePinyinStyleRowNavigation;
- (void)showCursorAccessory;
- (void)showDictationMenuIfNeeded;
- (void)showFirstTextAlternativeWithRangeAdjustment:(long long)arg1;
- (bool)showInputModeIndicator;
- (void)showInternationalKeyIntroductionIfNeededWithPreviousInputMode:(id)arg1;
- (void)showKeyboard;
- (void)showKeyboardIfNeeded;
- (void)showKeyboardWithoutSuppressionPolicy;
- (void)showNextCandidates;
- (void)showNextPage;
- (void)showPreviousCandidate;
- (void)showSelectionCommands;
- (void)showTextAlternativesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)showingEmojiSearch;
- (bool)showsCandidateBar;
- (bool)showsCandidateInline;
- (bool)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (void)skipHitTestForTouchEvent:(id)arg1;
- (void)skipHitTestForTouchEvent:(id)arg1 delayed:(bool)arg2;
- (void)skipHitTestForTouchEvents:(id)arg1;
- (bool)skipRecomputeInputMode;
- (void*)skippedEndInputSession;
- (id)skippedEndInputSessionID;
- (bool)smartInsertDeleteIsEnabled;
- (id)smartPunctuationController;
- (void)smartSelectionForTextInDocument:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 options:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (bool)splitTransitionInProgress;
- (void)startAutoDeleteTimer;
- (void)startAutoDeleteTimerForForce:(double)arg1;
- (void)startDelayDeleteTimer;
- (void)stickerPickerKeyboardSessionDidFinish;
- (void)stopAutoDelete;
- (id)stopDictationMenuElements;
- (id)stopDictationMenuElementsForTextInputView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (bool)suppliesCompletions;
- (bool)supportsNumberKeySelection;
- (bool)supportsScheduleReplacementsAfterDeletionToEndOfWord;
- (bool)supportsSetPhraseBoundary;
- (bool)suppressOptOutASPCandidateUpdateForDelegate:(id)arg1;
- (bool)suppressUpdateAssistantView;
- (bool)suppressUpdateInputMode;
- (bool)suppressUpdateLayout;
- (bool)suppressUpdateShiftState;
- (void)syncDocumentStateToInputDelegate;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)arg1;
- (void)syncInputManagerToAcceptedAutocorrection:(id)arg1 forInput:(id)arg2;
- (void)syncInputManagerToKeyboardState;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)arg1;
- (void)syncKeyboardToConfiguration:(id)arg1;
- (bool)syncingDictationLanguageForInputModeSwitch;
- (void)takeTextInputTraitsFromDelegate;
- (id)taskQueue;
- (void)textAccepted:(id)arg1;
- (void)textAccepted:(id)arg1 executionContext:(id)arg2;
- (void)textChanged:(id)arg1;
- (void)textChanged:(id)arg1 executionContext:(id)arg2;
- (id)textCompletionInputRectsFromFirstRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 lastRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)textContentTypeForCurrentInputDelegate;
- (void)textDidChange:(id)arg1;
- (void)textDidScroll;
- (void)textFrameChanged:(id)arg1;
- (int)textInputChangingCount;
- (id)textInputTraits;
- (bool)textInputTraitsNeedAutofill;
- (bool)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact;
- (bool)textInputTraitsNeedContactAutoFill;
- (bool)textInputTraitsNeedOneTimeCode;
- (bool)textInputTraitsNeedSignup;
- (id)textInteractionAssistant;
- (unsigned long long)textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (id)textSelectionController;
- (void)textSelectionInteractionWillBegin:(id)arg1;
- (void)textSuggestionDidChange:(id)arg1;
- (id)textSuggestions;
- (void)textWillChange:(id)arg1;
- (void)textWillScroll;
- (double)timeoutForCurrentForce;
- (double)timestampOfLastTouchesEnded;
- (void)toggleShift;
- (void)toggleSoftwareKeyboard;
- (void)touchAutoDeleteTimerWithThreshold:(double)arg1 adjustForPartialCompletion:(bool)arg2;
- (void)touchAutocorrectPromptTimer;
- (void)touchDelayDeleteTimerWithThreshold:(double)arg1;
- (void)touchDictationMenuTimer;
- (void)touchDictationMenuTimer:(bool)arg1;
- (id)touchEventWaitingForKeyInputEvent;
- (void)touchLongPressTimer;
- (void)touchLongPressTimerWithDelay:(double)arg1;
- (void)touchLongPressTimerWithDelay:(double)arg1 userInfo:(id)arg2;
- (void)touchUpdateLastUsedInputModeAction;
- (void)trackResponderForAutofillIfNeeded:(id)arg1;
- (void)trackUsageForAcceptedAutocorrection:(id)arg1 promptWasShowing:(bool)arg2;
- (void)trackUsageForCandidateAcceptedAction:(id)arg1;
- (void)trackUsageForPromptedCorrection:(id)arg1 inputString:(id)arg2 previousPrompt:(id)arg3;
- (void)traitCollectionDidChange;
- (bool)transitionInProgress;
- (void)triggerPendingKeyup;
- (bool)uncachedDelegateSupportsImagePaste;
- (void)underlineCandidate:(id)arg1;
- (void)undoWithKeyboardInput:(id)arg1;
- (void)unmarkText:(id)arg1;
- (void)updateAssistantView;
- (void)updateAssistantViewInfo:(id)arg1;
- (void)updateAutocorrectContainerWithAutocorrection:(id)arg1 parentView:(id)arg2 correctionRects:(id)arg3;
- (void)updateAutocorrectPrompt:(id)arg1;
- (void)updateAutocorrectPrompt:(id)arg1 correctionRects:(id)arg2;
- (void)updateAutocorrectPrompt:(id)arg1 executionContext:(id)arg2;
- (void)updateCandidateDisplay;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)arg1;
- (id)updateCapsLockDelayOverrideForNonTyping;
- (void)updateChangeTimeAndIncrementCount;
- (void)updateDefaultsWithResults:(id /* block */)arg1;
- (void)updateDelegatePasteSupport;
- (void)updateDictationPopoverLocationForCandidateInlineView:(id)arg1 yOffset:(double)arg2;
- (void)updateDictationPopoverLocationIfNeeded;
- (void)updateDocumentViewsAfterKeyboardOutput:(id)arg1;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)arg1;
- (void)updateDoubleSpacePeriodStateForString:(id)arg1;
- (void)updateForChangedSelection;
- (void)updateForChangedSelectionWithExecutionContext:(id)arg1;
- (void)updateForExpectedRemoteDocumentStateChange:(id)arg1 selectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 forceSync:(bool)arg3;
- (void)updateForHandBiasChange;
- (void)updateFromTextInputTraits;
- (void)updateHardwareKeyboardLayout;
- (void)updateHardwareKeyboardLayout:(bool)arg1;
- (void)updateIdleDetection:(long long)arg1;
- (void)updateInputAssistantButtonItems;
- (void)updateInputDelegateForRemoteDocumentStateChange:(id)arg1 selectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 hasText:(bool)arg3 forceSync:(bool)arg4;
- (void)updateInputDelegateForRemoteTraitChange:(id)arg1 forceSync:(bool)arg2;
- (void)updateInputManagerAutocapitalizationType;
- (void)updateInputManagerMode;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1 preserveIfPossible:(bool)arg2;
- (void)updateInputModeLastChosenPreference;
- (void)updateInputOverlayForContainerFrameChange;
- (void)updateIsAttachedHardwareKeyboard;
- (id)updateKeyBehaviors:(id)arg1 withBehaviors:(id)arg2 forState:(id)arg3;
- (void)updateKeyboardConfigurations;
- (void)updateKeyboardEventsLagging:(id)arg1;
- (void)updateKeyboardOutput:(id)arg1 withInputForSmartPunctuation:(id)arg2 keyboardConfiguration:(id)arg3;
- (void)updateKeyboardStateForDeletion;
- (void)updateKeyboardStateForInsertion:(id)arg1;
- (void)updateKeyboardStateForReplacingText:(id)arg1 withText:(id)arg2;
- (void)updateLayout;
- (void)updateLayoutAndSetShift;
- (void)updateLayoutIfNecessary;
- (void)updateLayoutIfNeeded;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)updateLegacyAutocorrectPromptWithAutocorrection:(id)arg1 parentView:(id)arg2 correctionRects:(id)arg3;
- (void)updateNoContentViews;
- (void)updateObserverState;
- (void)updateReturnKey;
- (void)updateReturnKey:(bool)arg1;
- (id)updateSecureCandidateRenderTraits;
- (void)updateShiftState;
- (void)updateShowCandidateBar;
- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)arg1;
- (void)updateStylingTraitsIfNeeded;
- (void)updateTextCandidateView;
- (void)updateTextInputKeyboardSource;
- (void)updateTextInputKeyboardSource:(id)arg1;
- (id)updatedKeyBehaviors;
- (bool)updatingPreferences;
- (id)userInteractionDelegate;
- (bool)userSelectedCurrentCandidate;
- (bool)usesAutoDeleteWord;
- (bool)usesAutocorrectionLists;
- (bool)usesCandidateSelection;
- (bool)usesContinuousPath;
- (bool)usesContinuousPathProgressiveCandidates;
- (void)willDismissEditMenu;
- (bool)willDoubleSpacePeriodForInputString:(id)arg1 afterSpace:(bool)arg2 elapsedTime:(double)arg3;
- (void)willMoveToWindow:(id)arg1;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;
- (id /* block */)willSetupNewDelegate;
- (void)willSetupNewDelegate:(id /* block */)arg1;
- (id)window;

@end
