
@interface _UIDatePickerCalendarTimeLabel : UIView <UIIndirectScribbleInteractionDelegate, UIKeyInput, UITextInputTraits_Private> {
    bool  _allowsTextInput;
    <_UIDatePickerCalendarTimeLabelDelegate> * _delegate;
    UITextField * _hiddenField;
    NSNumberFormatter * _inputFormatter;
    long long  _inputScope;
    _UIDatePickerCalendarTimeValueStore * _inputValue;
    UIView * _inputView;
    unsigned long long  _insertedDigitCount;
    struct CGSize { 
        double width; 
        double height; 
    }  _lastSize;
    bool  _roundsToMinuteInterval;
    UIIndirectScribbleInteraction * _scribbleInteraction;
    _UIDatePickerCalendarTimeLabelStateMachineContext * _stateContext;
    _UIDatePickerCalendarTimeFormat * _timeFormat;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _timeOfDayRect;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) bool acceptsDictationSearchResults;
@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsInitialEmojiKeyboard;
@property (nonatomic) bool acceptsPayloads;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic) bool allowsTextInput;
@property (nonatomic, readonly) NSAttributedString *attributedText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) bool contentsIsSingleValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) long long decrementBehaviour;
@property (nonatomic) bool deferBecomingResponder;
@property (nonatomic) <_UIDatePickerCalendarTimeLabelDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry;
@property (nonatomic) bool disableHandwritingKeyboard;
@property (nonatomic) bool disableInputBars;
@property (nonatomic) bool disablePrediction;
@property (nonatomic) bool displaySecureEditsUsingPlainText;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets;
@property (nonatomic, copy) UIFont *font;
@property (nonatomic) bool forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) bool forceDisableDictation;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic) bool forceFloatingKeyboard;
@property (nonatomic) bool forceSpellingDictation;
@property (nonatomic) bool hasDefaultContents;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } hourRect;
@property (nonatomic, copy) NSString *hourText;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory;
@property (nonatomic, retain) NSNumberFormatter *inputFormatter;
@property (nonatomic, readonly) long long inputScope;
@property (nonatomic, readonly) _UIDatePickerCalendarTimeValueStore *inputValue;
@property (nonatomic) unsigned long long insertedDigitCount;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) bool isCarPlayIdiom;
@property (nonatomic) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic) bool loadKeyboardsForSiriLanguage;
@property (nonatomic) long long minuteInterval;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } minuteRect;
@property (nonatomic, copy) NSString *minuteText;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic) bool preferOnlineDictation;
@property (nonatomic) long long preferredKeyboardStyle;
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) bool roundsToMinuteInterval;
@property (nonatomic, readonly) bool scribbleInteractionIsActive;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } selectionEdgeInsets;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) bool showDictationButton;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic, readonly) _UIDatePickerCalendarTimeLabelStateMachineContext *stateContext;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UISupplementalLexicon *supplementalLexicon;
@property (nonatomic, retain) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, readonly) NSString *text;
@property (nonatomic, copy) NSString *textContentType;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic, readonly) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) long long textScriptType;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, retain) _UIDatePickerCalendarTimeFormat *timeFormat;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } timeOfDayRect;
@property (nonatomic, readonly) NSString *timeOfDayText;
@property (nonatomic, retain) UIColor *underlineColorForSpelling;
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useInterfaceLanguageForLocalization;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange;

+ (bool)supportsScribbleInteraction;

- (void).cxx_destruct;
- (bool)_canChangeFirstResponder:(id)arg1 toResponder:(id)arg2;
- (bool)_digits:(unsigned long long*)arg1 fromText:(id)arg2 count:(long long*)arg3;
- (bool)_pointIsInsideHourSide:(struct CGPoint { double x1; double x2; })arg1;
- (void)_resetTextInput;
- (void)_roundInputToClosestIntervalIfNeeded;
- (void)_stateMachineSendEvent:(unsigned long long)arg1;
- (bool)_suppressSoftwareKeyboard;
- (bool)_treatMinutesAsHoursForState:(unsigned long long)arg1;
- (void)_uiTest_becomeFirstResponder;
- (void)_uiTest_resignFirstResponder;
- (bool)allowsTextInput;
- (void)applyTextAttributesForState:(unsigned long long)arg1 inputScope:(long long)arg2 updater:(id /* block */)arg3;
- (id)attributedText;
- (id)attributedTextWithRanges:(struct { struct _NSRange { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct _NSRange { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; struct _NSRange { unsigned long long x_3_1_1; unsigned long long x_3_1_2; } x3; struct _NSRange { unsigned long long x_4_1_1; unsigned long long x_4_1_2; } x4; }*)arg1;
- (bool)becomeFirstResponder;
- (void)beginEditingWheels;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (long long)decrementBehaviour;
- (id)delegate;
- (void)deleteBackward;
- (void)didReceiveDownArrowKey:(id)arg1;
- (void)didReceiveLeftArrowKey:(id)arg1;
- (void)didReceiveRightArrowKey:(id)arg1;
- (void)didReceiveUpArrowKey:(id)arg1;
- (void)didTapInputLabel:(id)arg1;
- (bool)displaysTimeOfDayLabel;
- (long long)editingInteractionConfiguration;
- (void)endEditingWheels;
- (id)focusGroupIdentifier;
- (id)font;
- (bool)hasText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hourRect;
- (id)hourText;
- (void)indirectScribbleInteraction:(id)arg1 didFinishWritingInElement:(id)arg2;
- (void)indirectScribbleInteraction:(id)arg1 focusElementIfNeeded:(id)arg2 referencePoint:(struct CGPoint { double x1; double x2; })arg3 completion:(id /* block */)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })indirectScribbleInteraction:(id)arg1 frameForElement:(id)arg2;
- (bool)indirectScribbleInteraction:(id)arg1 isElementFocused:(id)arg2;
- (void)indirectScribbleInteraction:(id)arg1 requestElementsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completion:(id /* block */)arg3;
- (bool)indirectScribbleInteraction:(id)arg1 shouldDelayFocusForElement:(id)arg2;
- (void)indirectScribbleInteraction:(id)arg1 willBeginWritingInElement:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithTimeFormat:(id)arg1 minuteInterval:(long long)arg2;
- (id)inputFormatter;
- (long long)inputScope;
- (id)inputValue;
- (id)inputView;
- (void)insertText:(id)arg1;
- (unsigned long long)insertedDigitCount;
- (bool)isSingleLineDocument;
- (id)keyCommands;
- (long long)keyboardType;
- (void)layoutSubviews;
- (long long)minuteInterval;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })minuteRect;
- (id)minuteText;
- (bool)processTapOutside;
- (void)pushCurrentStateIntoUI;
- (void)pushCurrentStateIntoUIAndNotify;
- (bool)resignFirstResponder;
- (bool)roundsToMinuteInterval;
- (bool)scribbleInteractionIsActive;
- (void)setAllowsTextInput:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setHourText:(id)arg1;
- (void)setInputFormatter:(id)arg1;
- (void)setInputScope:(long long)arg1;
- (void)setInsertedDigitCount:(unsigned long long)arg1;
- (void)setMinuteInterval:(long long)arg1;
- (void)setMinuteText:(id)arg1;
- (void)setRoundsToMinuteInterval:(bool)arg1;
- (void)setTimeFormat:(id)arg1;
- (id)stateContext;
- (void)stateMachineUpdateFromState:(unsigned long long)arg1 toState:(unsigned long long)arg2;
- (void)takeTraitsFrom:(id)arg1;
- (id)text;
- (id)timeFormat;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })timeOfDayRect;
- (id)timeOfDayText;
- (void)tintColorDidChange;
- (void)wheelChanged;
- (void)willBeginWritingInScribbleInteraction;

@end
