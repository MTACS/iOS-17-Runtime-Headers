
@interface UIKBTree : NSObject <NSCopying> {
    bool  _isFloating;
    NSMutableDictionary * cache;
    NSString * effectiveLayoutTag;
    NSString * layoutTag;
    NSString * name;
    NSMutableDictionary * properties;
    NSMutableArray * subtrees;
    int  type;
}

@property (nonatomic, retain) NSMutableDictionary *cache;
@property (nonatomic, retain) NSString *effectiveLayoutTag;
@property (nonatomic) bool isFloating;
@property (nonatomic, retain) NSString *layoutTag;
@property (nonatomic, retain) NSString *name;
@property (nonatomic, retain) NSMutableDictionary *properties;
@property (nonatomic, retain) NSMutableArray *subtrees;
@property (nonatomic) int type;

+ (id)key;
+ (id)keyboard;
+ (id)mergeStringForKeyName:(id)arg1;
+ (id)shapesForControlKeyShapes:(id)arg1 options:(int)arg2;
+ (bool)shouldSkipCacheString:(id)arg1;
+ (id)stringForType:(int)arg1;
+ (id)treeOfType:(int)arg1;
+ (bool)typeIsPersistent:(int)arg1;
+ (id)uniqueName;

- (void).cxx_destruct;
- (void)_addKeylayoutKeys:(id)arg1;
- (id)_cacheRootNameForKey:(id)arg1;
- (id)_horizontallyCoincidentKeysWithKey:(id)arg1;
- (long long)_keyCountOnNamedRow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_keyplaneFrame;
- (id)_keysForDynamicRow;
- (id)_keysForDynamicRows:(id)arg1;
- (void)_mutateKeys:(id)arg1 scale:(double)arg2 withShapeOperation:(id /* block */)arg3;
- (bool)_needsScaling;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_originalKeyplaneFrame;
- (bool)_renderAsStringKey;
- (int)_variantType;
- (id)activeGeometriesList;
- (id)activeShapesFromOutputShapes:(id)arg1 inputShapes:(id)arg2 inRTL:(bool)arg3;
- (bool)addMessagesWriteboardKeyOrRomanSwitch:(bool)arg1;
- (bool)addMessagesWriteboardKeyOrRomanSwitchIfDismissKey:(bool)arg1;
- (bool)addMessagesWriteboardKeyOrRomanSwitchIfNoDismissKey:(bool)arg1;
- (void)addRomanSwitchToCachedKeyListWithShape:(id)arg1 rendering:(int)arg2;
- (void)addWriteboardKeyToCachedKeyListWithShape:(id)arg1 rendering:(int)arg2;
- (void)addkeyToCachedKeyList:(id)arg1;
- (bool)allowRetestAfterCommittingDownActions;
- (bool)allowsDelayedTapForContinuousPathDisambiguation;
- (bool)allowsStartingContinuousPath;
- (id)alternateKeyplaneName;
- (void)applyDynamicAttributes;
- (id)attributeSet:(bool)arg1;
- (id)autolocalizedKeyCacheIterator;
- (bool)avoidAutoDeactivation;
- (bool)avoidsLanguageIndicator;
- (bool)behavesAsShiftKey;
- (bool)boolForProperty:(id)arg1;
- (id)cache;
- (id)cacheDisplayString;
- (void)cacheKey:(id)arg1;
- (void)cacheNativeIdiomIfNecessaryForScreenTraits:(id)arg1;
- (id)cacheSecondaryDisplayString;
- (id)cachedGestureLayout;
- (id)cachedKeysByKeyName:(id)arg1;
- (void)centerHorizontallyWhilePreservingLayoutWithKeys:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scale:(double)arg3;
- (void)centerKeyplaneInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scale:(double)arg2;
- (void)centerKeys:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scale:(double)arg3;
- (void)centerVerticallyWhilePreservingLayoutWithKeys:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scale:(double)arg3;
- (void)centerWhilePreservingLayoutWithKeys:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scale:(double)arg3;
- (void)clearManualAddedKey;
- (void)clearTransientCaches;
- (unsigned long long)clipCorners;
- (id)componentName;
- (bool)containsDividerVariant;
- (bool)containsKeyThatIgnoresHandBias;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)currentKeyboardType;
- (id)description;
- (bool)diacriticForwardCompose;
- (bool)disabled;
- (bool)disablesEdgeSwipe;
- (int)displayRowHint;
- (id)displayString;
- (int)displayType;
- (int)displayTypeHint;
- (int)dragThreshold;
- (unsigned long long)dynamicDisplayCorner;
- (bool)dynamicDisplayTypeHint;
- (bool)dynamicLayout;
- (id)effectiveLayoutTag;
- (void)elaborateLayoutWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (void)elaborateLayoutWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 origin:(struct CGPoint { double x1; double x2; })arg3;
- (id)findLeftMoreKey;
- (id)firstCachedKeyWithName:(id)arg1;
- (id)firstKeyplaneSwitchKey;
- (long long)flickDirection;
- (bool)forceMultitap;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (id)fullRepresentedString;
- (id)geometries;
- (id)geometriesList;
- (id)geometriesOrderedByPosition;
- (id)geometry;
- (id)geometrySet:(bool)arg1;
- (id)gestureKey;
- (id)gestureKeyplaneName;
- (bool)ghost;
- (unsigned long long)groupNeighbor;
- (bool)hasLayoutTag:(id)arg1;
- (long long)highlightedVariantIndex;
- (id)highlightedVariantsList;
- (int)indexOfSubtree:(id)arg1;
- (id)initWithType:(int)arg1;
- (id)initWithType:(int)arg1 withName:(id)arg2 withProperties:(id)arg3 withSubtrees:(id)arg4 withCache:(id)arg5;
- (void)insertKey:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andShiftKeys:(id)arg3 scale:(double)arg4;
- (void)insetKeys:(id)arg1 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 scale:(double)arg3;
- (long long)intForProperty:(id)arg1;
- (int)interactionType;
- (bool)isAlphabeticPlane;
- (bool)isDuplicateOfTree:(id)arg1;
- (bool)isEqualToTree:(id)arg1;
- (bool)isExemptFromInputManagerHitTesting;
- (bool)isExemptFromInputManagerLayout;
- (bool)isFloating;
- (bool)isGenerated;
- (bool)isHashed;
- (bool)isKanaPlane;
- (bool)isLeafType;
- (bool)isLetters;
- (bool)isRightToLeftSensitive;
- (bool)isSameAsTree:(id)arg1;
- (bool)isShiftKeyPlaneChooser;
- (bool)isShiftKeyplane;
- (bool)isSplit;
- (id)keyAttributes;
- (id)keyByKeyName:(id)arg1;
- (id)keyForString:(id)arg1;
- (id)keySet;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })keyUnionFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })keyUnionFramePadded:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })keyUnionPaddedFrame;
- (id)keyplaneForKey:(id)arg1;
- (id)keyplaneSwitchKeys;
- (id)keyplaneSwitchKeysWithoutCurrentKeyplane:(id)arg1;
- (id)keys;
- (id)keysByKeyName:(id)arg1;
- (id)keysExcludingEmptyKeys;
- (id)keysForDisplayRowAtIndex:(unsigned long long)arg1;
- (id)keysForMergeConditions;
- (id)keysOrderedByPosition;
- (id)keysOrderedByPositionRTL;
- (id)keysOrderedByPositionWithoutZip;
- (id)keysWithInteractionTypes:(id)arg1;
- (id)keysWithString:(id)arg1;
- (id)keysetCanContainWriteboardKey;
- (id)layoutName;
- (id)layoutTag;
- (id)listShapes;
- (id)localizationKey;
- (bool)looksExactlyLikeShiftAlternate;
- (bool)looksLike:(id)arg1;
- (bool)looksLikeShiftAlternate;
- (bool)mergeAsMoreKey;
- (id)mergeKeyNames:(id)arg1 inRightToLeft:(bool)arg2;
- (void)mergeReturnKey:(id)arg1 withReturnKey:(id)arg2;
- (bool)modifiesKeyplane;
- (id)name;
- (id)nameFromAttributes;
- (long long)nativeIdiom;
- (struct CGPoint { double x1; double x2; })navigationPointOfKey;
- (bool)noLanguageIndicator;
- (bool)notUseCandidateSelection;
- (id)numberForProperty:(id)arg1;
- (unsigned long long)numberOfRows;
- (id)objectForProperty:(id)arg1;
- (void)orderVariantKeys:(bool)arg1;
- (id)orderedRowsForType:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })originalFrame;
- (id)overrideDisplayString;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })paddedFrame;
- (id)parentKey;
- (long long)popupDirection;
- (void)precacheLayoutName:(id)arg1;
- (bool)preventPaddle;
- (double)primaryKeylayoutOffset;
- (double)primaryKeylayoutWidthRatio;
- (id)properties;
- (id)recursiveDescription;
- (void)removeKey:(id)arg1;
- (void)removeKey:(id)arg1 andShiftKeys:(id)arg2 scale:(double)arg3;
- (void)removeKeyFromAllCachedLists:(id)arg1;
- (void)removeKeyFromCachedKeyList:(id)arg1;
- (bool)renderKeyInKeyplane:(id)arg1;
- (int)rendering;
- (void)replaceKey:(id)arg1 withKey:(id)arg2;
- (void)repositionKeys:(id)arg1 withOffset:(struct CGPoint { double x1; double x2; })arg2 scale:(double)arg3;
- (id)representedString;
- (void)resizeKeys:(id)arg1 withOffset:(struct CGPoint { double x1; double x2; })arg2 scale:(double)arg3;
- (double)resizingOffset;
- (id)rightSpaceKey;
- (id)rowSet;
- (id)rowSetOfType:(long long)arg1;
- (long long)rowSetType;
- (void)scaleKeys:(id)arg1 withFactor:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;
- (id)scriptSwitchKey;
- (id)secondaryDisplayStrings;
- (id)secondaryRepresentedStrings;
- (long long)selectedVariantIndex;
- (id)selectedVariantIndices;
- (void)setActiveGeometriesList:(id)arg1;
- (void)setAttributes:(id)arg1;
- (void)setCache:(id)arg1;
- (void)setCachedGestureLayout:(id)arg1;
- (void)setClipCorners:(unsigned long long)arg1;
- (void)setCurrentKeyboardType:(long long)arg1;
- (void)setDisabled:(bool)arg1;
- (void)setDisplayRowHint:(int)arg1;
- (void)setDisplayString:(id)arg1;
- (void)setDisplayType:(int)arg1;
- (void)setDisplayTypeHint:(int)arg1;
- (void)setDynamicDisplayCorner:(unsigned long long)arg1;
- (void)setDynamicLayout:(bool)arg1;
- (void)setEffectiveLayoutTag:(id)arg1;
- (void)setFlickDirection:(long long)arg1;
- (void)setForceMultitap:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGeometriesList:(id)arg1;
- (void)setGeometry:(id)arg1;
- (void)setGestureKey:(id)arg1;
- (void)setGhost:(bool)arg1;
- (void)setGroupNeighbor:(unsigned long long)arg1;
- (void)setHighlightedVariantsList:(id)arg1;
- (void)setInteractionType:(int)arg1;
- (void)setIsFloating:(bool)arg1;
- (void)setIsGenerated:(bool)arg1;
- (void)setLayoutTag:(id)arg1;
- (void)setLayoutTag:(id)arg1 passingKeyTest:(id /* block */)arg2;
- (void)setLocalizationKey:(id)arg1;
- (void)setMergeAsMoreKey:(bool)arg1;
- (void)setName:(id)arg1;
- (bool)setObject:(id)arg1 forProperty:(id)arg2;
- (void)setOverrideDisplayString:(id)arg1;
- (void)setPaddedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setParentKey:(id)arg1;
- (void)setPopupDirection:(long long)arg1;
- (void)setPreventPaddle:(bool)arg1;
- (void)setProperties:(id)arg1;
- (void)setRendering:(int)arg1;
- (void)setRepresentedString:(id)arg1;
- (void)setResizingOffset:(double)arg1;
- (void)setSecondaryDisplayStrings:(id)arg1;
- (void)setSecondaryRepresentedStrings:(id)arg1;
- (void)setSelectedVariantIndex:(long long)arg1;
- (void)setSelectedVariantIndices:(id)arg1;
- (void)setShape:(id)arg1;
- (void)setSplitMode:(int)arg1;
- (void)setState:(int)arg1;
- (void)setSubtrees:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setToggleKeys:(id)arg1 forKeyName:(id)arg2;
- (void)setType:(int)arg1;
- (void)setVariantPopupBias:(id)arg1;
- (void)setVariantType:(int)arg1;
- (void)setVisible:(bool)arg1;
- (void)setVisualStyle:(int)arg1;
- (void)setVisualStyling:(struct { unsigned int x1 : 6; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 8; unsigned int x5 : 8; unsigned int x6 : 8; })arg1;
- (id)shape;
- (id)shapeFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 leftPadding:(double)arg2 rightPadding:(double)arg3;
- (id)shapesForKeys:(id)arg1;
- (id)shiftAlternateKeyplaneName;
- (void)shiftRowAndResizeLeadingControlKey:(id)arg1 toSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;
- (bool)shouldCacheKey;
- (bool)shouldSkipCandidateSelection;
- (bool)shouldSkipCandidateSelectionForVariants;
- (bool)shouldSuppressDragRetest;
- (int)splitMode;
- (int)state;
- (id)stringForProperty:(id)arg1;
- (struct { unsigned int x1 : 6; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 8; unsigned int x5 : 8; unsigned int x6 : 8; })stylingFromVisualStyle;
- (void)subsumeDisappearingKeyName:(id)arg1 intoKeyName:(id)arg2 factors:(id)arg3 inRightToLeft:(bool)arg4;
- (id)subtreeWithName:(id)arg1;
- (id)subtreeWithName:(id)arg1 rows:(id)arg2;
- (id)subtreeWithType:(int)arg1;
- (id)subtrees;
- (bool)subtreesAreOrdered;
- (id)subtreesWithProperty:(id)arg1 value:(id)arg2;
- (id)supplementaryKeyList;
- (bool)supportsContinuousPath;
- (bool)supportsMultitap;
- (bool)supportsType:(long long)arg1;
- (void)swapToggleKeys:(id)arg1;
- (long long)textAlignment;
- (id)toggleKeysForKeyName:(id)arg1;
- (int)type;
- (id)unhashedName;
- (void)updateDictationKeyOnNumberPads:(bool)arg1;
- (void)updateFlickKeycapOnKeys;
- (void)updateKeysForType:(long long)arg1;
- (void)updateMoreAndInternationalKeysWithOptions:(int)arg1;
- (void)updateVariantTypeForActions:(unsigned int)arg1;
- (bool)usesAdaptiveKeys;
- (bool)usesAutoShift;
- (bool)usesKeyCharging;
- (id)variantDisplayString;
- (id)variantPopupBias;
- (int)variantType;
- (bool)visible;
- (int)visualStyle;
- (struct { unsigned int x1 : 6; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 8; unsigned int x5 : 8; unsigned int x6 : 8; })visualStyling;
- (struct { unsigned int x1 : 6; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 8; unsigned int x5 : 8; unsigned int x6 : 8; })visualStylingForScreenTraits:(id)arg1;
- (void)zipAttributes;
- (void)zipGeometries:(bool)arg1 attributes:(bool)arg2;
- (void)zipGeometrySet;
- (void)zipOnlyGeometrySet;

@end
