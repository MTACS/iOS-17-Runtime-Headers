
@interface UIKBKeyView : UIView <UIKBCacheableView> {
    struct CGColor { } * _activeBackgroundColor;
    id  _activeCompositingFilter;
    unsigned long long  _cachedAnchorCorner;
    double  _cachedBackgroundOpacity;
    bool  _cachedControlKeyRenderingPreference;
    long long  _cachedSelector;
    unsigned long long  _cachedShiftState;
    NSString * _cachedTraitsHashString;
    bool  _containedInDynamicKey;
    double  _endingTransitionDuration;
    NSMutableDictionary * _keyLayers;
    UIKeyboardMenuView * _popupMenu;
    bool  _renderAsMask;
    int  _renderedKeyState;
    UIKBScreenTraits * _screenTraits;
    bool  _singleRerender;
    struct __CFBoolean { } * m_allowsCaching;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_drawFrame;
    UIKBRenderFactory * m_factory;
    UIKBTree * m_key;
    UIKBTree * m_keyplane;
    UIKBRenderConfig * m_renderConfig;
}

@property (nonatomic, readonly) long long assetIdiom;
@property (nonatomic, readonly) long long cacheDeferPriority;
@property (nonatomic, readonly) bool cacheDeferable;
@property (nonatomic, readonly) NSString *cacheKey;
@property (nonatomic) unsigned long long cachedAnchorCorner;
@property (nonatomic) bool cachedControlKeyRenderingPreference;
@property (readonly) long long cachedRenderFlags;
@property (nonatomic) long long cachedSelector;
@property (nonatomic) unsigned long long cachedShiftState;
@property (nonatomic, retain) NSString *cachedTraitsHashString;
@property (nonatomic, readonly) double cachedWidth;
@property (nonatomic) bool containedInDynamicKey;
@property (nonatomic, readonly) UIKBKeyView *contentsKeyView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } displayInsets;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } drawFrame;
@property (nonatomic) double endingTransitionDuration;
@property (nonatomic, retain) UIKBRenderFactory *factory;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDynamicKey;
@property (nonatomic, readonly) bool keepNonPersistent;
@property (nonatomic, readonly) UIKBTree *key;
@property (nonatomic, readonly) UIKBTree *keyplane;
@property (nonatomic) UIKeyboardMenuView *popupMenu;
@property (nonatomic) bool renderAsMask;
@property (nonatomic, retain) UIKBRenderConfig *renderConfig;
@property (nonatomic, retain) UIKBScreenTraits *screenTraits;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } variantFrame;

+ (bool)wantsScreenTraits;

- (void).cxx_destruct;
- (void)_applyAppearanceInvocations;
- (bool)_canDrawContent;
- (id)_generateBackdropMaskImage;
- (bool)_isActivePopupKey;
- (void)_populateLayer:(id)arg1 withContents:(id)arg2;
- (bool)_shouldUpdateLayers;
- (bool)_viewShouldBeOpaque;
- (bool)allowBackgroundCachingForRenderFlags:(long long)arg1;
- (long long)assetIdiom;
- (bool)cacheDeferable;
- (id)cacheKey;
- (id)cacheKeysForRenderFlags:(id)arg1;
- (unsigned long long)cachedAnchorCorner;
- (bool)cachedControlKeyRenderingPreference;
- (long long)cachedRenderFlags;
- (long long)cachedSelector;
- (unsigned long long)cachedShiftState;
- (id)cachedTraitsHashString;
- (double)cachedWidth;
- (void)changeBackgroundToActiveIfNecessary;
- (void)changeBackgroundToEnabled;
- (void)configureBackdropView:(id)arg1 forRenderConfig:(id)arg2;
- (bool)containedInDynamicKey;
- (id)contentsKeyView;
- (void)dealloc;
- (long long)didInputSubTree:(id)arg1;
- (void)dimKeys:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })displayInsets;
- (void)displayLayer:(id)arg1;
- (void)drawContentsOfRenderers:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawFrame;
- (double)endingTransitionDuration;
- (id)factory;
- (unsigned long long)focusableVariantCount;
- (bool)hasRendered;
- (void)hideKeyCap:(bool)arg1;
- (long long)imageOrientationForLayer:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 keyplane:(id)arg2 key:(id)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 keyplane:(id)arg2 key:(id)arg3 screenTraits:(id)arg4;
- (bool)isDynamicKey;
- (bool)keepNonPersistent;
- (id)key;
- (id)keyplane;
- (id)layerForRenderFlags:(long long)arg1;
- (void)orientKeyCap:(long long)arg1;
- (id)popupMenu;
- (void)prepareForDisplay;
- (void)removeFromSuperview;
- (bool)renderAsMask;
- (id)renderConfig;
- (id)renderFlagsForTraits:(id)arg1;
- (bool)requiresSublayers;
- (void)resetRenderedKeyState;
- (id)screenTraits;
- (void)setCachedAnchorCorner:(unsigned long long)arg1;
- (void)setCachedControlKeyRenderingPreference:(bool)arg1;
- (void)setCachedSelector:(long long)arg1;
- (void)setCachedShiftState:(unsigned long long)arg1;
- (void)setCachedTraitsHashString:(id)arg1;
- (void)setContainedInDynamicKey:(bool)arg1;
- (void)setDrawFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEndingTransitionDuration:(double)arg1;
- (void)setFactory:(id)arg1;
- (void)setPopupMenu:(id)arg1;
- (void)setRenderAsMask:(bool)arg1;
- (void)setRenderConfig:(id)arg1;
- (void)setScreenTraits:(id)arg1;
- (id)subTreeHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (int)textEffectsVisibilityLevel;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)updateForKeyplane:(id)arg1 key:(id)arg2;
- (void)updateKeySelectedVariantIndex:(long long)arg1;
- (void)updateKeySubtrees:(id)arg1;
- (void)updateKeycapLayerOrientation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })variantFrame;
- (void)willDisplayModalActionView:(id)arg1 withSubTreeKeyView:(id)arg2 completion:(id /* block */)arg3;

@end
