
@interface _UISlideriOSVisualElement : UIView <UIPointerInteractionDelegate, _UISliderVisualElement> {
    UISliderDataModel * _data;
    double  _hitOffset;
    UIImageView * _innerThumbView;
    bool  _maxColorIsValid;
    UIView * _maxTrackClipView;
    UIImageView * _maxTrackView;
    UIImageView * _maxValueImageView;
    UIView * _minTrackClipView;
    UIImageView * _minTrackView;
    UIImageView * _minValueImageView;
    UISlider * _slider;
    struct { 
        unsigned int animating : 1; 
        unsigned int preparingToAnimate : 1; 
        unsigned int overridesModifiedTrackRect : 1; 
    }  _sliderFlags;
    bool  _thumbIsArtworkBased;
    UIImageView * _thumbView;
    UIView * _thumbViewNeue;
    NSArray * _trackColors;
    bool  _trackIsArtworkBased;
}

@property (nonatomic, retain) UISliderDataModel *data;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) UISlider *slider;
@property (readonly) Class superclass;

+ (id)_modernThumbImageWithTraitCollection:(id)arg1 tintColor:(id)arg2;
+ (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; })drawingMetricsForPlatform;

- (void).cxx_destruct;
- (void)_bounceMinMaxValueImageViewsIfNeeded;
- (void)_buildTrackArtwork;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)_contentSizeCategoryChanged:(id)arg1;
- (void)_controlTouchBegan:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchEnded:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchMoved:(id)arg1 withEvent:(id)arg2;
- (double)_cornerRadiusForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_initImages;
- (void)_initSubviews;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_layoutSubviewsForBoundsChange:(bool)arg1;
- (void)_listenForContentSizeCategoryChangesIfNecessary;
- (id)_maxTrackClipView;
- (id)_minTrackClipView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_modifiedTrackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_rebuildControlThumb:(bool)arg1 track:(bool)arg2;
- (void)_setSliderNeedsLayout;
- (void)_setValue:(float)arg1 andSendAction:(bool)arg2;
- (void)_setupFeedback;
- (bool)_shouldBeginTrackingAtPoint:(struct CGPoint { double x1; double x2; })arg1 pointInKnob:(struct CGPoint { double x1; double x2; }*)arg2 inKnob:(bool*)arg3;
- (void)_sliderAnimationDidStop:(bool)arg1;
- (void)_sliderAnimationWillStart;
- (void)_traitCollectionDidChangeInternal:(const struct _UITraitCollectionChangeDescription { id x1; id x2; id x3; bool x4; struct _UITraitCollectionTraitChanges { bool x_5_1_1; bool x_5_1_2; } x5; }*)arg1;
- (void)_updateAppearanceForEnabled:(bool)arg1;
- (void)_updateMaxTrackColorForInitialization:(bool)arg1;
- (void)_updateMinimumTrackTintColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)cancelMouseTracking;
- (bool)cancelTouchTracking;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)createThumbView;
- (id)createThumbViewNeue;
- (id)currentMaximumTrackImage;
- (id)currentMinimumTrackImage;
- (id)currentThumbImage;
- (id)data;
- (void)dealloc;
- (void)didChangeMinimumTrackVisibleWithDuration:(double)arg1;
- (void)didPerformLayout;
- (void)didSetContinuous;
- (void)didSetEnabled;
- (void)didSetHighlighted;
- (void)didSetMaximumTrackImageForState:(unsigned long long)arg1;
- (void)didSetMaximumTrackImageForStates;
- (void)didSetMaximumTrackTintColor;
- (void)didSetMaximumValueImage;
- (void)didSetMinimumTrackImageForState:(unsigned long long)arg1;
- (void)didSetMinimumTrackImageForStates;
- (void)didSetMinimumTrackTintColor;
- (void)didSetMinimumValueImage;
- (void)didSetSelected;
- (void)didSetShowValue;
- (void)didSetThumbEnabled;
- (void)didSetThumbImageForState:(unsigned long long)arg1;
- (void)didSetThumbImageForStates;
- (void)didSetThumbTintColor;
- (void)didSetValues;
- (void)didUpdateExpansionFactor;
- (void)didUpdateTraitCollection;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAnimatingValueChange;
- (id)maxTrackView;
- (id)maxValueImageView;
- (id)maximumValueImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)minTrackView;
- (id)minValueImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setData:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSlider:(id)arg1;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (void)showValueDidChange;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)slider;
- (unsigned long long)state;
- (double)thumbDimensionNeue;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })thumbHitEdgeInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)thumbTintColor;
- (id)thumbView;
- (id)thumbViewNeue;
- (void)tintColorDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
