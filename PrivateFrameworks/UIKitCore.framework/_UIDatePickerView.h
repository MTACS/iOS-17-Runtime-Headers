
@interface _UIDatePickerView : UIPickerView <UIGestureRecognizerDelegateInternal, UIPickerViewDataSource, UIPickerViewDelegate, UIPopoverPresentationControllerDelegate, _UIControlEventsGestureRecognizerDelegate, _UIDatePickerCalendarTimeLabelDelegate, _UIDatePickerWheelsTimeLabelDelegate, _UIDatePickerWheelsViewComponent, _UIPassthroughScrollInteractionDelegate> {
    bool  _allowsZeroTimeInterval;
    _UIControlEventsGestureRecognizer * _controlEventsGestureRecognizer;
    _UIDatePickerDataModel * _data;
    UIDatePicker * _datePicker;
    struct { 
        unsigned int staggerTimeIntervals : 1; 
        unsigned int loadingDateOrTime : 1; 
        unsigned int highlightsToday : 1; 
        unsigned int usesBlackChrome : 1; 
        unsigned int updatingWithKeyInput : 1; 
        unsigned int isPendingManualKeyboardPresentation : 1; 
        unsigned int isPresentingManualKeyboard : 1; 
        unsigned int selectionBarTableHidden : 1; 
        unsigned int receivedTextInputUpdate : 1; 
        unsigned int isPresentingOrDismissingKeyboard : 1; 
    }  _datePickerFlags;
    int  _expectedAMPM;
    UILabel * _hourLabel;
    long long  _loadingDate;
    UILabel * _minuteLabel;
    _UIDatePickerMode * _mode;
    _UIDatePickerNumericKeyboardViewController * _numericKeyboardViewController;
    _UIPassthroughScrollInteraction * _passthroughInteraction;
    _UIDatePickerWheelsTimeLabel * _timeInputLabel;
}

@property (getter=_allowsZeroCountDownDuration, setter=_setAllowsZeroCountDownDuration:, nonatomic) bool allowsZeroCountDownDuration;
@property (getter=_allowsZeroTimeInterval, setter=_setAllowsZeroTimeInterval:, nonatomic) bool allowsZeroTimeInterval;
@property (getter=_amPmValue, nonatomic, readonly) long long amPmValue;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } appliedInsetsToEdgeOfContent;
@property (nonatomic, readonly) NSCalendar *calendar;
@property (nonatomic, readonly) double contentWidth;
@property (nonatomic, readonly) _UIControlEventsGestureRecognizer *controlEventsGestureRecognizer;
@property (nonatomic, retain) _UIDatePickerDataModel *data;
@property (nonatomic) UIDatePicker *datePicker;
@property (nonatomic, readonly) long long datePickerStyle;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=_highlightColor, setter=_setHighlightColor:, nonatomic, retain) UIColor *highlightColor;
@property (nonatomic) bool highlightsToday;
@property (getter=_hrMinFont, nonatomic, readonly) UIFont *hrMinFont;
@property (getter=_isTimeIntervalMode, nonatomic, readonly) bool isTimeIntervalMode;
@property (nonatomic, readonly) NSLocale *locale;
@property (getter=_magnifierLineColor, setter=_setMagnifierLineColor:, nonatomic, retain) UIColor *magnifierLineColor;
@property (nonatomic, readonly) _UIDatePickerNumericKeyboardViewController *numericKeyboardViewController;
@property (nonatomic) bool passthroughInteractionEnabled;
@property (readonly) Class superclass;
@property (getter=_textColor, setter=_setTextColor:, nonatomic, retain) UIColor *textColor;
@property (getter=_textShadowColor, setter=_setTextShadowColor:, nonatomic, retain) UIColor *textShadowColor;
@property (nonatomic, readonly) _UIDatePickerWheelsTimeLabel *timeInputLabel;
@property (nonatomic) double timeInterval;
@property (getter=_usesBlackChrome, setter=_setUsesBlackChrome:, nonatomic) bool usesBlackChrome;

- (void).cxx_destruct;
- (void)_UIAppearance_setTextColor:(id)arg1;
- (bool)_allowsZeroCountDownDuration;
- (bool)_allowsZeroTimeInterval;
- (long long)_amPmValue;
- (id)_componentsSelectedAfterEnforcingValidityOfComponents:(id)arg1 withLastManipulatedComponent:(long long)arg2;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (id)_contentViewForSizingLabelForPositioningInComponent:(long long)arg1;
- (id)_currentTimeFormat;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentTimeInputLabelFrame;
- (void)_disableCustomKeyboardIfNecessary;
- (void)_dismissManualKeyboard;
- (void)_doneLoadingDateOrTime;
- (void)_enableCustomKeyboardIfNecessary;
- (id)_existingLabelForCalendarUnit:(unsigned long long)arg1;
- (void)_fadeLabelForCalendarUnit:(unsigned long long)arg1 toText:(id)arg2 animated:(bool)arg3;
- (void)_gestureRecognizerFailed:(id)arg1;
- (void)_hardwareKeyboardAvailabilityChanged:(id)arg1;
- (void)_hidePickerViewSelectionBarForTimeInputLabel:(bool)arg1;
- (id)_hoursStringForHour:(long long)arg1;
- (id)_hrMinFont;
- (void)_installTimeInputLabelIfNeeded;
- (bool)_isTimeIntervalMode;
- (id)_labelForCalendarUnit:(unsigned long long)arg1 createIfNecessary:(bool)arg2;
- (id)_labelTextForCalendarUnit:(unsigned long long)arg1;
- (void)_loadDateAnimated:(bool)arg1;
- (id)_makeNewCalendarUnitLabel;
- (id)_minutesStringForHour:(long long)arg1 minutes:(long long)arg2;
- (unsigned long long)_permittedArrowDirectionForKeyboardPopover;
- (void)_positionLabel:(id)arg1 forCalendarUnit:(unsigned long long)arg2 relativeTo:(id)arg3 order:(long long)arg4;
- (void)_removeUnitLabels;
- (void)_resetSelectionOfTables;
- (void)_selectRow:(long long)arg1 inComponent:(long long)arg2 animated:(bool)arg3 notify:(bool)arg4;
- (int)_selectedHourForColumn:(int)arg1;
- (int)_selectedMinuteForColumn:(int)arg1;
- (id)_selectedTextForCalendarUnit:(unsigned long long)arg1;
- (long long)_selectionBarRowInComponent:(long long)arg1;
- (void)_setAllowsZeroCountDownDuration:(bool)arg1;
- (void)_setAllowsZeroTimeInterval:(bool)arg1;
- (void)_setHidesLabels:(bool)arg1;
- (void)_setLabel:(id)arg1 forCalendarUnit:(unsigned long long)arg2 animated:(bool)arg3;
- (void)_setMode:(id)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setUsesBlackChrome:(bool)arg1;
- (bool)_shouldInstallTimeInputLabelForDatePickerMode:(long long)arg1;
- (bool)_showingDate;
- (double)_tableRowHeight;
- (void)_uninstallTimeInputLabelIfNeeded;
- (void)_updateDateForNewDateRange;
- (bool)_updateDateOrTime;
- (void)_updateEnabledCellsIncludingWMDCells:(bool)arg1;
- (void)_updateLabelColors;
- (void)_updateLabels:(bool)arg1;
- (void)_updateLocaleTimeZoneOrCalendar;
- (void)_updateTextColorForCalendarUnitLabel:(id)arg1;
- (void)_updateTimeInputLabelConfiguration;
- (void)_updateTimeInputLabelPosition;
- (void)_updateWheelsForUpdatedTextInputWithForcedUpdate:(bool)arg1;
- (void)_updateWheelsLabelForCurrentDateComponents;
- (bool)_updatedLastSelectedComponentsByValidatingSelectedDateWithLastManipulatedComponent:(long long)arg1;
- (bool)_usesBlackChrome;
- (id)_viewForSelectedRowInComponent:(long long)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })appliedInsetsToEdgeOfContent;
- (double)contentWidth;
- (id)controlEventsGestureRecognizer;
- (void)controlEventsGestureRecognizer:(id)arg1 recognizedControlEvent:(unsigned long long)arg2 withEvent:(id)arg3;
- (id)data;
- (id)datePicker;
- (long long)datePickerMode;
- (long long)datePickerStyle;
- (void)dealloc;
- (void)didChangeCalendar;
- (void)didChangeDateFrom:(id)arg1 animated:(bool)arg2;
- (void)didChangeLocale;
- (void)didChangeMaximumDate;
- (void)didChangeMinimumDate;
- (void)didChangeMinuteInterval;
- (void)didChangeMode;
- (void)didChangeRoundsToMinuteInterval;
- (void)didChangeTimeZone;
- (void)didChangeToday;
- (void)didReset;
- (void)displaySelectedDateAnimated:(bool)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (bool)hasDefaultSize;
- (bool)highlightsToday;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)keyboardTypeForTimeLabel:(id)arg1;
- (void)layoutSubviews;
- (long long)numberOfComponentsInPickerView:(id)arg1;
- (id)numericKeyboardViewController;
- (bool)passthroughInteractionEnabled;
- (bool)passthroughScrollInteraction:(id)arg1 shouldInteractAtLocation:(struct CGPoint { double x1; double x2; })arg2 withEvent:(id)arg3;
- (bool)passthroughScrollInteractionDidRecognize:(id)arg1;
- (void)pickerTableView:(id)arg1 didChangeSelectionBarRowFrom:(long long)arg2 to:(long long)arg3;
- (void)pickerView:(id)arg1 didSelectRow:(long long)arg2 inComponent:(long long)arg3;
- (long long)pickerView:(id)arg1 numberOfRowsInComponent:(long long)arg2;
- (double)pickerView:(id)arg1 rowHeightForComponent:(long long)arg2;
- (id)pickerView:(id)arg1 viewForRow:(long long)arg2 forComponent:(long long)arg3 reusingView:(id)arg4;
- (double)pickerView:(id)arg1 widthForComponent:(long long)arg2;
- (void)popoverPresentationController:(id)arg1 willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inView:(inout id*)arg3;
- (void)presentationControllerDidDismiss:(id)arg1;
- (void)presentationControllerWillDismiss:(id)arg1;
- (id)primaryFirstResponder;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setData:(id)arg1;
- (void)setDatePicker:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlightsToday:(bool)arg1;
- (void)setPassthroughInteractionEnabled:(bool)arg1;
- (void)setTimeInterval:(double)arg1;
- (id)shadowColor;
- (bool)staggerTimeIntervals;
- (id)timeInputLabel;
- (double)timeInterval;
- (bool)timeLabel:(id)arg1 didReceiveText:(id)arg2;
- (void)timeLabel:(id)arg1 didUpdateText:(id)arg2;
- (bool)timeLabelCanBecomeFirstResponder:(id)arg1;
- (void)timeLabelDidBecomeFirstResponder:(id)arg1;
- (void)timeLabelDidBeginEditing:(id)arg1;
- (void)timeLabelDidEndEditing:(id)arg1;
- (void)timeLabelDidFailToBecomeFirstResponder:(id)arg1;
- (void)timeLabelDidResignFirstResponder:(id)arg1;
- (bool)timeLabelShouldSuppressSoftwareKeyboard:(id)arg1;
- (void)timeLabelWillBecomeFirstResponder:(id)arg1;
- (void)wheelsTimeLabel:(id)arg1 didChangeVisibility:(bool)arg2;
- (bool)wheelsTimeLabelShouldReceiveInteraction:(id)arg1;
- (void)willMoveToSuperview:(id)arg1;
- (void)willMoveToWindow:(id)arg1;

@end
