
@interface _UISliderFluidVisualElement : UIView <UIGestureRecognizerDelegate, _UIFluidSliderDirectDrivingDelegate, _UISliderFluidStyleVisualElement> {
    void changeWithVolumeButtons;
    void clipView;
    void data;
    void defaultExpansionFactor;
    void defaultSliderHeight;
    void expansionGesture;
    void fluidInteraction;
    void fluidUpdateSource;
    void isInteractivelyChanging;
    void maximumTrackEffectView;
    void maximumTrackView;
    void maximumView;
    void minimumTrackEffectView;
    void minimumTrackView;
    void minimumView;
    void paddingAroundImage;
    void slider;
    void stretchLimit;
    void usingSliderStyling;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic) bool changeWithVolumeButtons;
@property (nonatomic, retain) UISliderDataModel *data;
@property (nonatomic) unsigned long long fluidUpdateSource;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic) UISlider *slider;

- (void).cxx_destruct;
- (void)_controlTouchBegan:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchEnded:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchMoved:(id)arg1 withEvent:(id)arg2;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)cancelMouseTracking;
- (bool)cancelTouchTracking;
- (bool)changeWithVolumeButtons;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)createThumbView;
- (id)currentMaximumTrackImage;
- (id)currentMinimumTrackImage;
- (id)currentThumbImage;
- (id)data;
- (void)didChangeMinimumTrackVisibleWithDuration:(double)arg1;
- (void)didPerformLayout;
- (void)didSetContinuous;
- (void)didSetEnabled;
- (void)didSetFluidTrackHidden;
- (void)didSetHighlighted;
- (void)didSetMaximumTrackImageForState:(unsigned long long)arg1;
- (void)didSetMaximumTrackImageForStates;
- (void)didSetMaximumTrackTintColor;
- (void)didSetMaximumValueImage;
- (void)didSetMinimumTrackImageForState:(unsigned long long)arg1;
- (void)didSetMinimumTrackImageForStates;
- (void)didSetMinimumTrackTintColor;
- (void)didSetMinimumValueImage;
- (void)didSetSelected;
- (void)didSetShowValue;
- (void)didSetThumbEnabled;
- (void)didSetThumbImageForState:(unsigned long long)arg1;
- (void)didSetThumbImageForStates;
- (void)didSetThumbTintColor;
- (void)didSetUserInteractionEnabled;
- (void)didSetValues;
- (void)didUpdateConfiguration;
- (void)didUpdateTraitCollection;
- (bool)driver:(id)arg1 shouldBeginAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (unsigned long long)fluidUpdateSource;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleExpansionGesture:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAnimatingValueChange;
- (id)maxTrackView;
- (id)maxValueImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)minTrackView;
- (id)minValueImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)overriddenTrackingState;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setChangeWithVolumeButtons:(bool)arg1;
- (void)setData:(id)arg1;
- (void)setFluidUpdateSource:(unsigned long long)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSlider:(id)arg1;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)slider;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })thumbHitEdgeInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)thumbView;
- (id)thumbViewNeue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
