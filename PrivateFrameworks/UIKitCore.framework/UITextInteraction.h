
@interface UITextInteraction : NSObject <UIGestureRecognizerDelegate, UIInteraction> {
    bool  _allowsSelectionCommands;
    <UITextInteraction_AssistantDelegate> * _assistantDelegate;
    NSMutableArray * _children;
    UILongPressGestureRecognizer * _customHighlighterGesture;
    <UITextInteractionDelegate> * _delegate;
    _UIStatesFeedbackGenerator * _feedbackBehaviour;
    NSMutableDictionary * _gestureMap;
    NSMutableArray * _gestures;
    bool  _inGesture;
    UITextInteractionInputDelegate * _interactionInputDelegate;
    UITextInteraction * _parent;
    UIResponder<UITextInput> * _textInput;
    long long  _textInteractionMode;
    UIView * _view;
    bool  _viewOverridesInteractivityState;
}

@property (setter=_setAllowsSelectionCommands:, nonatomic) bool _allowsSelectionCommands;
@property (nonatomic, readonly) UITextCursorAssertionController *_assertionController;
@property (nonatomic, retain) UILongPressGestureRecognizer *_customHighlighterGesture;
@property (nonatomic) <UITextInteraction_AssistantDelegate> *assistantDelegate;
@property (nonatomic, readonly) NSArray *children;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <UITextInteractionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) _UIStatesFeedbackGenerator *feedbackBehaviour;
@property (nonatomic, readonly) NSDictionary *gestureMap;
@property (nonatomic, readonly) UIView *gestureRecognizerHostView;
@property (nonatomic, readonly) NSArray *gestures;
@property (nonatomic, readonly) NSArray *gesturesForFailureRequirements;
@property (readonly) unsigned long long hash;
@property (setter=setInGesture:, nonatomic) bool inGesture;
@property (nonatomic, retain) UITextInteractionInputDelegate *interactionInputDelegate;
@property (readonly) UITextInteraction *parent;
@property (readonly) UITextInteraction *root;
@property (readonly) Class superclass;
@property (nonatomic) UIResponder<UITextInput> *textInput;
@property (nonatomic, readonly) long long textInteractionMode;
@property (nonatomic, readonly) long long textInteractionSet;
@property (nonatomic) UIView *view;

+ (double)_maximumBeamSnappingLength;
+ (id)textInteractionForMode:(long long)arg1;
+ (id)textInteractionsForSet:(long long)arg1;

- (void).cxx_destruct;
- (bool)_allowsSelectionCommands;
- (void)_applyTransientState:(id)arg1;
- (id)_assertionController;
- (void)_callDelegateWillMoveTextRangeExtentAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_cancelRecognizerWithName:(id)arg1;
- (void)_cleanUpFeedbackForGesture;
- (void)_createFeedbackIfNecessary;
- (id)_customHighlighterGesture;
- (void)_performGestureType:(long long)arg1 state:(long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3;
- (void)_performGestureType:(long long)arg1 state:(long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3 locationOfFirstTouch:(struct CGPoint { double x1; double x2; })arg4;
- (void)_performGestureType:(long long)arg1 state:(long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3 locationOfFirstTouch:(struct CGPoint { double x1; double x2; })arg4 forTouchType:(long long)arg5;
- (void)_performPreemtiveLayoutToEnsureNoMoreLayoutWhileSelecting:(id)arg1;
- (void)_playFeedbackForCursorMovement;
- (void)_prepareFeedbackForGesture;
- (void)_presentTextEditMenuWithOverrideMenu:(id)arg1;
- (void)_setAllowsSelectionCommands:(bool)arg1;
- (void)_setLinkInteractionSession:(id)arg1;
- (bool)_shouldAllowEnforcedTouchTypeForTouch:(id)arg1 forGestureRecognizer:(id)arg2;
- (bool)_shouldObscureTextInput;
- (id)_textInput;
- (bool)_textInputIsInteractive;
- (bool)_textInputLivesInKeyWindow;
- (id)_transientState;
- (id)_updatedAccessibilityTextMenuWithMenuElements:(id)arg1;
- (void)addChild:(id)arg1;
- (void)addGestureRecognizer:(id)arg1 withName:(id)arg2;
- (void)addIndirectChild:(id)arg1;
- (id)assistantDelegate;
- (void)cancelLinkInteractionSession;
- (id)children;
- (bool)containerChangesSelectionOnOneFingerTap;
- (bool)currentSelectionContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)defaultDoubleTapRecognizerWithAction:(SEL)arg1;
- (id)defaultTapRecognizerWithAction:(SEL)arg1;
- (id)defaultTripleTapRecognizerWithAction:(SEL)arg1;
- (id)delegate;
- (void)didMoveToView:(id)arg1;
- (void)disableClearsOnInsertion;
- (double)distanceBetweenPoint:(struct CGPoint { double x1; double x2; })arg1 andRects:(id)arg2;
- (bool)doesControlDelegate;
- (id)feedbackBehaviour;
- (void)finishSetup;
- (id)gestureMap;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)gestureRecognizerHostView;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestures;
- (id)gesturesForFailureRequirements;
- (bool)inGesture;
- (id)init;
- (id)interactionInputDelegate;
- (id)interactionWithClass:(Class)arg1;
- (id)interactionWithGestureForName:(id)arg1;
- (bool)interaction_gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)interaction_gestureRecognizerShouldBegin:(id)arg1;
- (id)linkInteractionSession;
- (id)parent;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (id)recognizerForName:(id)arg1;
- (void)removeChild:(id)arg1;
- (void)removeGestureRecognizerWithName:(id)arg1;
- (id)root;
- (bool)selection:(id)arg1 containsPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setAssistantDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFeedbackBehaviour:(id)arg1;
- (void)setInGesture:(bool)arg1;
- (void)setInteractionInputDelegate:(id)arg1;
- (void)setTextInput:(id)arg1;
- (void)setView:(id)arg1;
- (void)set_customHighlighterGesture:(id)arg1;
- (bool)shouldAllowWithTouchTypes:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toBegin:(bool)arg3;
- (bool)shouldHandleFormGestureAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)textInput;
- (long long)textInteractionMode;
- (long long)textInteractionSet;
- (void)updateTextInputSourceForScribbleGesture:(id)arg1;
- (id)view;
- (void)willMoveToView:(id)arg1;

@end
