
@interface UITextInputController : NSObject <UIResponderStandardEditActions, UITextInput, UITextInputAdditions, UITextInputPrivate, UITextInput_Internal> {
    NSSet * _allowedTypingAttributes;
    bool  _allowsEditingTextAttributes;
    bool  _continuousSpellCheckingEnabled;
    int  _currentUndoGroupType;
    <UITextInputControllerDelegate> * _delegate;
    unsigned long long  _dontRemoveAllActionsCount;
    NSDictionary * _emptyStringAttributes;
    UIView<UITextInput> * _firstTextView;
    <UITextInputDelegate> * _inputDelegate;
    bool  _inputDelegateRespondsToInlineCompletionAsMarkedText;
    NSLayoutManager * _layoutManager;
    _UITextServiceSession * _learnSession;
    _UITextServiceSession * _lookupSession;
    NSAttributedString * _markedText;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _markedTextRange;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _markedTextSelection;
    NSDictionary * _markedTextStyle;
    NSHashTable * _observedScrollViews;
    UITextRange * _previousSelectedTextRange;
    UITextRange * _selectedTextRange;
    _UITextServiceSession * _shareSession;
    bool  _shouldStartUndoGroup;
    UITextChecker * _textChecker;
    UITextCheckingController * _textCheckingController;
    UITextInputTraits * _textInputTraits;
    _UITextLayoutControllerBase<_UITextLayoutController> * _textLayoutController;
    UITextPlaceholder * _textPlaceholder;
    struct { 
        unsigned int delegateRespondsToTextInputShouldBeginEditing : 1; 
        unsigned int delegateRespondsToTextInputShouldChangeCharactersInRangeReplacementText : 1; 
        unsigned int delegateRespondsToTextInputDidChange : 1; 
        unsigned int delegateRespondsToTextInputDidChangeSelection : 1; 
        unsigned int delegateRespondsToTextInputWillChangeSelectionFromCharacterRangeToCharacterRange : 1; 
        unsigned int delegateRespondsToTextInputEditorDidChangeSelection : 1; 
        unsigned int delegateRespondsToTextInputPrepareAttributedTextForInsertion : 1; 
        unsigned int delegateRespondsToTextInputShouldExtendCaretHeight : 1; 
        unsigned int delegateRespondsToIsSingleLine : 1; 
        unsigned int textOrSelectionChangeOriginatesWithKeyboard : 1; 
        unsigned int undoRedoInProgress : 1; 
        unsigned int textOrSelectionChangeOriginatesWithMarkedText : 1; 
        unsigned int nextSelectionChangeMustUpdate : 1; 
        unsigned int hasTextAlternatives : 1; 
        unsigned int hasDictationResultMetadata : 1; 
        unsigned int suppressDelegateChangeNotifications : 1; 
    }  _tiFlags;
    _UITextInputControllerTokenizer * _tokenizer;
    _UITextServiceSession * _translateSession;
    NSDictionary * _typingAttributes;
    _UITextUndoManager * _undoManager;
    _UITextUndoOperationTyping * _undoOperationForCoalescing;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (getter=_proxyTextInput, nonatomic, readonly) UIResponder<UITextInput> *__content;
@property (getter=_allowedTypingAttributes, setter=_setAllowedTypingAttributes:, nonatomic, copy) NSSet *_allowedTypingAttributes;
@property (nonatomic, readonly) RTIInputSystemSourceSession *_rtiSourceSession;
@property (nonatomic) bool _systemCursorAccessoriesDisabled;
@property (nonatomic) long long _textInputSource;
@property (nonatomic, readonly) UIView<UITextInputPrivate> *_textSelectingContainer;
@property (nonatomic) bool acceptsDictationSearchResults;
@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsInitialEmojiKeyboard;
@property (nonatomic) bool acceptsPayloads;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic) bool allowsEditingTextAttributes;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (getter=_caretRect, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } caretRect;
@property (nonatomic) bool contentsIsSingleValue;
@property (nonatomic) bool continuousSpellCheckingEnabled;
@property (nonatomic) int currentUndoGroupType;
@property (nonatomic, readonly) long long cursorBehavior;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deferBecomingResponder;
@property (nonatomic) <UITextInputControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry;
@property (nonatomic) bool disableHandwritingKeyboard;
@property (nonatomic) bool disableInputBars;
@property (nonatomic) bool disablePrediction;
@property (nonatomic) bool displaySecureEditsUsingPlainText;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (getter=isEditable, nonatomic, readonly) bool editable;
@property (getter=isEditing, nonatomic, readonly) bool editing;
@property (nonatomic) int emptyContentReturnKeyType;
@property (getter=_emptyStringAttributes, setter=_setEmptyStringAttributes:, nonatomic, copy) NSDictionary *emptyStringAttributes;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic, readonly) NSAttributedString *filteredAttributedText;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets;
@property (nonatomic) bool forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) bool forceDisableDictation;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic) bool forceFloatingKeyboard;
@property (nonatomic) bool forceSpellingDictation;
@property (nonatomic) bool hasDefaultContents;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, readonly) id insertDictationResultPlaceholder;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) bool isCarPlayIdiom;
@property (nonatomic) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic) bool loadKeyboardsForSiriLanguage;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic) bool preferOnlineDictation;
@property (nonatomic) long long preferredKeyboardStyle;
@property (nonatomic, retain) UITextRange *previousSelectedTextRange;
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } selectedRange;
@property (copy) UITextRange *selectedTextRange;
@property (nonatomic) long long selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } selectionEdgeInsets;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) bool shouldStartUndoGroup;
@property (nonatomic) bool showDictationButton;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UISupplementalLexicon *supplementalLexicon;
@property (nonatomic, retain) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic, readonly) bool supportsImagePaste;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, copy) NSString *textContentType;
@property (nonatomic, readonly) <UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic, readonly) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) long long textScriptType;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (nonatomic, copy) NSDictionary *typingAttributes;
@property (nonatomic, retain) UIColor *underlineColorForSpelling;
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useInterfaceLanguageForLocalization;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange;

+ (bool)_shouldUseStandardTextScaling:(id)arg1;

- (void).cxx_destruct;
- (void)_addShortcut:(id)arg1;
- (void)_addToTypingAttributes:(id)arg1 value:(id)arg2;
- (void)_adjustSizeByIncreasing:(bool)arg1;
- (id)_allowedTypingAttributes;
- (id)_attributedStringForInsertionOfAttributedString:(id)arg1;
- (id)_attributesForInsertionOfText:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_attributesForReplacementInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_canHandleResponderAction:(SEL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_caretRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_caretRectForOffset:(unsigned long long)arg1;
- (void)_changeTextAlignment:(long long)arg1 undoString:(id)arg2;
- (unsigned int)_characterAfterCaretSelection;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;
- (id)_characterPositionForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;
- (void)_clearMarkedText;
- (void)_clearSelectionUI;
- (void)_coordinateSelectionChange:(id /* block */)arg1;
- (void)_copySelectionToClipboard;
- (void)_copySelectionToClipboard:(id)arg1;
- (void)_define:(id)arg1;
- (bool)_delegateShouldChangeTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 replacementText:(id)arg2;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (void)_deleteByWord;
- (void)_deleteForwardAndNotify:(bool)arg1;
- (void)_deleteForwardByWord;
- (void)_deleteTextRange:(id)arg1;
- (void)_deleteToEndOfLine;
- (void)_deleteToEndOfParagraph;
- (void)_deleteToStartOfLine;
- (void)_detachFromLayoutManager;
- (id)_emptyStringAttributes;
- (void)_ensureSelectionValid;
- (void)_ensureSelectionVisible;
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id*)arg1;
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;
- (void)_extendCurrentSelection:(int)arg1;
- (id)_fallbackFont;
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;
- (id)_findDocumentBoundaryFromPosition:(id)arg1;
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;
- (id)_firstTextView;
- (id)_fixupTypingAttributeForAttributes:(id)arg1;
- (id)_fontForCaretSelection;
- (void)_forceUnmarkTextDueToEditing;
- (id)_fullRange;
- (id)_fullText;
- (bool)_hasDictationPlaceholder;
- (bool)_hasMarkedText;
- (bool)_hasMarkedTextOrRangedSelection;
- (int)_indexForTextPosition:(id)arg1;
- (void)_insertAttributedText:(id)arg1 fromKeyboard:(bool)arg2;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)_insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2 replacingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 resultLength:(unsigned long long*)arg4;
- (void)_insertText:(id)arg1 fromKeyboard:(bool)arg2;
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;
- (void)_invalidateEmptyStringAttributes;
- (void)_invalidateTypingAttributes;
- (bool)_isDisplayingLookupViewController;
- (bool)_isDisplayingReferenceLibraryViewController;
- (bool)_isDisplayingShareViewController;
- (bool)_isDisplayingShortcutViewController;
- (bool)_isDisplayingTextService;
- (bool)_isEmptySelection;
- (bool)_isInlineCompletionPresentedAsMarkedText:(id)arg1;
- (bool)_isSecureTextEntry;
- (bool)_isSystemAttachment:(id)arg1;
- (id)_itemProviderForCopyingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_keyInput;
- (void)_layoutManagerDidCompleteLayout;
- (bool)_mightHaveSelection;
- (void)_moveCurrentSelection:(int)arg1;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (id)_newAttributedStringForInsertionOfAttributedText:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_newAttributedStringForInsertionOfText:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_normalizedStringForRangeComparison:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_nsrangeForTextRange:(id)arg1;
- (long long)_opposingDirectionFromDirection:(long long)arg1;
- (id)_parentScrollView;
- (void)_pasteAndMatchStyle:(bool)arg1;
- (void)_pasteAttributedString:(id)arg1 pasteAsRichText:(bool)arg2;
- (void)_pasteAttributedString:(id)arg1 toRange:(id)arg2 completion:(id /* block */)arg3;
- (id)_pasteController;
- (bool)_pasteFromPasteboard:(id)arg1 andMatchStyle:(bool)arg2;
- (void)_pasteRawAttributedString:(id)arg1 asRichText:(bool)arg2;
- (void)_performWhileSuppressingDelegateNotifications:(id /* block */)arg1;
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(bool)arg4;
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)_postfixTokensForDictationAttributedText:(id)arg1 currentDictationAttributedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 nextDictationAttributedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)_prefixTokensForDictationAttributedText:(id)arg1 lastDictationAttributedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 currentDictationAttributedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)_promptForReplace:(id)arg1;
- (id)_proxyTextInput;
- (bool)_range:(id)arg1 containsRange:(id)arg2;
- (bool)_range:(id)arg1 intersectsRange:(id)arg2;
- (bool)_range:(id)arg1 isEqualToRange:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeAfterCancelDictationIfNecessaryForChangeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeForBackwardsDelete;
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_rangeOfEnclosingWord:(id)arg1;
- (id)_rangeOfLineEnclosingPosition:(id)arg1;
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeToReplaceWhenInsertingText;
- (id)_rectsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_registerUndoOperationForReplacementWithActionName:(id)arg1 replacementText:(id)arg2;
- (void)_removeShareController;
- (void)_removeShortcutController;
- (void)_replaceCurrentWordWithText:(id)arg1;
- (void)_replaceDocumentWithText:(id)arg1;
- (void)_replaceRange:(id)arg1 withAttributedTextFromKeyboard:(id)arg2 addingUnderlinesForAlternatives:(bool)arg3;
- (long long)_resolveNaturalDirection:(long long)arg1;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)_selectAll;
- (id)_selectableText;
- (id)_selectedAttributedText;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedNSRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedRangeWithinMarkedText;
- (id)_selectedText;
- (long long)_selectionAffinity;
- (bool)_selectionAtDocumentEnd;
- (bool)_selectionAtDocumentStart;
- (bool)_selectionAtWordStart;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (void)_selectionDidScroll:(id)arg1;
- (void)_selectionGeometryChanged;
- (void)_sendDelegateChangeNotificationsForText:(bool)arg1 selection:(bool)arg2;
- (void)_sendDelegateWillChangeNotificationsForText:(bool)arg1 selection:(bool)arg2;
- (id)_senderForDelegateNotifications;
- (void)_setAllowedTypingAttributes:(id)arg1;
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 fromKeyboard:(bool)arg3 useTextStyle:(bool)arg4;
- (void)_setCaretSelectionAtEndOfSelection;
- (void)_setEmptyStringAttributes:(id)arg1;
- (void)_setGestureRecognizers;
- (id)_setHistory:(id)arg1 withExtending:(bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(bool)arg4;
- (void)_setInternalGestureRecognizers;
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_setSelectedRangeToEndIfNecessary;
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (id)_setSelectionRangeWithHistory:(id)arg1;
- (void)_setSelectionToPosition:(id)arg1;
- (void)_setUndoRedoInProgress:(bool)arg1;
- (void)_share:(id)arg1;
- (bool)_shouldConsiderTextViewForGeometry:(id)arg1;
- (bool)_shouldHandleResponderAction:(SEL)arg1;
- (bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(bool)arg3;
- (id)_textColorForCaretSelection;
- (void)_textContainerDidChangeView:(id)arg1;
- (long long)_textInputSource;
- (id)_textInputTraits;
- (id)_textRangeFromNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_textStorage;
- (void)_textStorageDidProcessEditing:(id)arg1;
- (void)_toggleFontTrait:(unsigned int)arg1;
- (void)_translate:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_transpose;
- (void)_undoManagerWillUndo:(id)arg1;
- (bool)_undoRedoInProgress;
- (void)_unmarkText;
- (void)_updateEmptyStringAttributes;
- (void)_updateFirstTextView;
- (void)_updateRangeForSmartDelete;
- (void)_updateRectsForPlaceholder;
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (id)_userEditedTextInfo;
- (bool)_usesAsynchronousProtocol;
- (unsigned long long)_validCaretPositionFromCharacterIndex:(unsigned long long)arg1 downstream:(bool)arg2;
- (void)_validateCommand:(id)arg1 forFont:(id)arg2 traits:(int)arg3;
- (id)_wordContainingCaretSelection;
- (void)addTextAlternatives:(id)arg1;
- (void)addTextAlternativesDisplayStyle:(long long)arg1 toRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)alignCenter:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignRight:(id)arg1;
- (bool)allowsEditingTextAttributes;
- (id)annotatedSubstringForRange:(id)arg1;
- (void)appendUndoOperation:(id)arg1 newGroup:(bool)arg2;
- (void)applyGrammarCheckingIndication;
- (id)attributedSubstringForMarkedRange;
- (id)attributedTextInRange:(id)arg1;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (void)captureTextFromCamera:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changeWillBeUndone:(id)arg1;
- (void)changingContextWithTrigger:(id)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)checkSmartPunctuationForWordInRange:(id)arg1;
- (void)checkSpellingForSelectionChangeIfNecessary;
- (void)checkSpellingForWordInRange:(id)arg1;
- (void)clearText;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (void)coalesceInTextView:(id)arg1 actionName:(id)arg2 affectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 replacementText:(id)arg5;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (bool)continuousSpellCheckingEnabled;
- (void)copy:(id)arg1;
- (void)correctedTypedText:(id)arg1 rangeOfReplacement:(id)arg2;
- (int)currentUndoGroupType;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)decreaseSize:(id)arg1;
- (id)delegate;
- (void)deleteBackward;
- (void)didEndEditing;
- (bool)dontRemoveAllActions;
- (id)endOfDocument;
- (void)endSelectionChange;
- (id)filteredAttributedText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForTextPlaceholder:(id)arg1;
- (bool)hasText;
- (void)increaseSize:(id)arg1;
- (id)initWithTextLayoutController:(id)arg1;
- (id)inputDelegate;
- (void)insertAttributedText:(id)arg1;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertText:(id)arg1;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x1; double x2; })arg1 embeddingType:(long long)arg2;
- (id)interactionAssistant;
- (bool)isCoalescing;
- (bool)isEditable;
- (bool)isEditing;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })markedRange;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)notifyTextCheckingControllerForSelectionChange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })nsRangeForTextRange:(id)arg1;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (void)pasteItemProviders:(id)arg1;
- (void)pasteItemProviders:(id)arg1 matchesStyle:(bool)arg2;
- (bool)performFinalGrammarChecking;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (void)preheatTextChecker;
- (id)previousSelectedTextRange;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (void)registerUndoOperationForType:(int)arg1 actionName:(id)arg2 affectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 replacementText:(id)arg4;
- (void)removeAllTextAlternatives;
- (void)removeAlternativesForCurrentWord;
- (void)removeAnnotation:(id)arg1 forRange:(id)arg2;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)removeEmojiAlternatives;
- (void)removeSpellingMarkersForCurrentWord;
- (void)removeSpellingMarkersFromWordInRange:(id)arg1;
- (void)removeTextPlaceholder:(id)arg1;
- (void)removeTextPlaceholder:(id)arg1 notifyInputDelegate:(bool)arg2;
- (void)removeTextStylingFromString:(id)arg1;
- (void)replace:(id)arg1;
- (void)replaceRange:(id)arg1 withAnnotatedString:(id)arg2 relativeReplacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)replaceRange:(id)arg1 withAttributedText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (bool)respondsToSelector:(SEL)arg1;
- (void)scheduleUndoOperationForType:(int)arg1 actionName:(id)arg2 previousSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 replacementText:(id)arg4;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (id)selectedTextRange;
- (long long)selectionAffinity;
- (id)selectionRectsForRange:(id)arg1;
- (void)setAllowsEditingTextAttributes:(bool)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setCurrentUndoGroupType:(int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setPreviousSelectedTextRange:(id)arg1;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShouldStartUndoGroup:(bool)arg1;
- (void)setTextLayoutController:(id)arg1;
- (void)setTypingAttributes:(id)arg1;
- (void)set_textInputSource:(long long)arg1;
- (bool)shouldStartNewUndoGroup:(id)arg1 textGranularity:(long long)arg2 operationType:(int)arg3;
- (bool)shouldStartUndoGroup;
- (void)signalDictationDeletionTip;
- (void)signalDictationInputEvent:(id)arg1 insertedText:(id)arg2;
- (void)signalDictationSelectionTip:(id)arg1;
- (void)stopCoalescing;
- (bool)supportLetterByLetterUndo;
- (id)textChecker;
- (id)textInRange:(id)arg1;
- (id)textInputSuggestionDelegate;
- (id)textLayoutController;
- (unsigned long long)textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (id)textRangeForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)typingAttributes;
- (void)undoDidChangeText;
- (id)undoManager;
- (void)undoWillChangeText;
- (void)unmarkText;
- (void)unmarkText:(bool)arg1;
- (void)updateSelection;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)arg1;
- (id)validAnnotations;
- (void)validateCommand:(id)arg1;
- (long long)writingDirectionAtPosition:(id)arg1;

@end
