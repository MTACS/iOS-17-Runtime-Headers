
@interface UITextField : UIControl <ABText, NSCoding, UIContentSizeCategoryAdjusting, UIGestureRecognizerDelegate, UIKeyInputPrivate, UIKeyboardInput, UILetterformAwareAdjusting, UIPopoverControllerDelegate, UITextDragSupporting, UITextDraggable, UITextDropSupporting, UITextDroppable, UITextDroppable_Private, UITextFieldContent, UITextInput, UITextInputPrivate, UITextInputTraits_Private, UITextPasteConfigurationSupporting, UITextPasteConfigurationSupporting_Internal, UIViewGhostedRangeSupporting, WFAlertTextField, WFInputViewMutable, _UIFieldEditorHostingViewRequirements, _UIFloatingContentViewDelegate, _UILayoutBaselineUpdating, _UITextFieldCanvasContext, _UITextFieldClearButtonImageProviding, _UITextFieldVisualStyleSubject, _UIViewBaselineSpacing, _UIViewLanguageAwareAdjusting> {
    bool  __handwritingEnabled;
    bool  _adjustsFontForContentSizeCategory;
    UIImage * _background;
    UIView * _backgroundCoverView;
    long long  _backgroundCoverViewMode;
    _UITextFieldBackgroundProvider * _backgroundProvider;
    NSMutableDictionary * _cachedDefaultClearButtonImages;
    _UITextFieldClearButton * _clearButton;
    long long  _clearButtonMode;
    struct CGSize { 
        double width; 
        double height; 
    }  _clearButtonOffset;
    UIVisualEffectView * _contentBackdropView;
    UIView * _contentCoverView;
    long long  _contentCoverViewMode;
    int  _controlSize;
    CUICatalog * _cuiCatalog;
    CUIStyleEffectConfiguration * _cuiStyleEffectConfiguration;
    bool  _deferringBecomeFirstResponder;
    id  _delegate;
    bool  _didInvalidateBaselineConstraintsOnHeightChange;
    bool  _disableTextColorUpdateOnTraitCollectionChange;
    UIImage * _disabledBackground;
    _UITextStorageDraggableGeometry * _draggableGeometry;
    UIFieldEditor * _fieldEditor;
    double  _firstBaselineOffsetFromTop;
    _UIFloatingContentView * _floatingContainerView;
    bool  _forceDisplayOverridePlaceholder;
    double  _foregroundViewsAlpha;
    _UIFullFontSize * _fullFontSize;
    UIImageView * _iconView;
    UIView * _inputAccessoryView;
    UITextInputAssistantItem * _inputAssistantItem;
    UIView * _inputView;
    UITextInteractionAssistant * _interactionAssistant;
    UILabel * _label;
    double  _labelOffset;
    double  _lastBaselineOffsetFromBottom;
    UIView * _leftView;
    long long  _leftViewMode;
    struct CGSize { 
        double width; 
        double height; 
    }  _leftViewOffset;
    NSDictionary * _linkTextAttributes;
    <_UITextFieldMetricsProvider> * _metricsProvider;
    double  _minimumFontSize;
    UITextInputTraits * _nonAtomTraits;
    NSAttributedString * _overriddenPlaceholder;
    long long  _overriddenPlaceholderAlignment;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    <UITextPasteDelegate> * _pasteDelegate;
    UITextFieldLabel * _placeholderLabel;
    double  _preferredBackgroundCornerRadius;
    long long  _preferredBorderStyle;
    UITextFieldLabel * _prefixLabel;
    UIView * _recentsAccessoryView;
    UIView * _rightView;
    long long  _rightViewMode;
    struct CGSize { 
        double width; 
        double height; 
    }  _rightViewOffset;
    UITapGestureRecognizer * _selectGestureRecognizer;
    _UITouchPassthroughView * _selectionContainerView;
    UITextFieldLabel * _suffixLabel;
    UIView<_UITextCanvas> * _textCanvasView;
    NSTextContainer * _textContainer;
    <UITextDragDelegate> * _textDragDelegate;
    <UITextDragDropSupport> * _textDragDropSupport;
    long long  _textDragOptions;
    <UITextDropDelegate> * _textDropDelegate;
    struct { 
        unsigned int verticallyCenterText : 1; 
        unsigned int isAnimating : 4; 
        unsigned int becomesFirstResponderOnClearButtonTap : 1; 
        unsigned int clearsPlaceholderOnBeginEditing : 1; 
        unsigned int adjustsFontSizeToFitWidth : 1; 
        unsigned int fieldEditorAttached : 1; 
        unsigned int canBecomeFirstResponder : 1; 
        unsigned int shouldSuppressShouldBeginEditing : 1; 
        unsigned int inResignFirstResponder : 1; 
        unsigned int undoDisabled : 1; 
        unsigned int explicitAlignment : 1; 
        unsigned int implementsCustomDrawing : 1; 
        unsigned int suppressContentChangedNotification : 1; 
        unsigned int allowsEditingTextAttributes : 1; 
        unsigned int usesAttributedText : 1; 
        unsigned int clearingBehavior : 2; 
        unsigned int overridePasscodeStyle : 1; 
        unsigned int shouldResignWithoutUpdate : 1; 
        unsigned int blurEnabled : 1; 
        unsigned int visualEffectViewEnabled : 1; 
        unsigned int disableFocus : 1; 
        unsigned int disableRemoteTextEditing : 1; 
        unsigned int allowsAttachments : 1; 
        unsigned int isReceivingDrop : 1; 
        unsigned int contentCoverUnsecuresText : 1; 
        unsigned int forcesClearButtonHighContrastAppearance : 1; 
        unsigned int contentInsetsFromFontsValid : 1; 
        unsigned int autolayoutWantsBaselines : 1; 
        unsigned int animateNextHighlightChange : 1; 
        unsigned int backgroundProviderDraws : 1; 
        unsigned int backgroundProviderHasBackgroundView : 1; 
        unsigned int isHandlingClearButton : 1; 
        unsigned int textLayoutManagerEnabled : 1; 
        unsigned int extremeSizingEnabled : 1; 
        unsigned int sizingRule : 1; 
        unsigned int shouldDisplayDictationPlaceholderMessage : 1; 
        unsigned int supportsKeyboardNavigationForSuggestions : 1; 
    }  _textFieldFlags;
    _UITextLayoutControllerBase<_UITextLayoutController> * _textLayoutController;
    _UICascadingTextStorage * _textStorage;
    UITextInputTraits * _traits;
    UIColor * _tvCustomFocusedTextColor;
    UIColor * _tvCustomTextColor;
    bool  _tvUseVibrancy;
    _UITextFieldVisualStyle * _visualStyle;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic, readonly) UIView *_backgroundView;
@property (nonatomic, readonly) long long _blurEffectStyleForAppearance;
@property (nonatomic, readonly) UIButton *_clearButton;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _clipRectForFadedEdges;
@property (nonatomic, readonly) UIView *_contentView;
@property (getter=_cuiCatalog, setter=_setCuiCatalog:, nonatomic, retain) CUICatalog *_cuiCatalog;
@property (getter=_cuiStyleEffectConfiguration, setter=_setCuiStyleEffectConfiguration:, nonatomic, retain) CUIStyleEffectConfiguration *_cuiStyleEffectConfiguration;
@property (nonatomic) bool _disableTextColorUpdateOnTraitCollectionChange;
@property (getter=_isExtremeSizingEnabled, setter=_setExtremeSizingEnabled:, nonatomic) bool _extremeSizingEnabled;
@property (nonatomic, readonly) UIFieldEditor *_fieldEditor;
@property (nonatomic, readonly) bool _fieldEditorAttached;
@property (getter=_handwritingEnabled, setter=_setHandwritingEnabled:, nonatomic) bool _handwritingEnabled;
@property (nonatomic, readonly) bool _hasContent;
@property (setter=_setInteractionState:, nonatomic, copy) id _interactionState;
@property (getter=_overridePasscodeStyle, setter=_setOverridePasscodeStyle:, nonatomic) bool _overridePasscodeStyle;
@property (setter=_setPadding:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _padding;
@property (getter=_passcodeStyleAlpha, setter=_setPasscodeStyleAlpha:, nonatomic) double _passcodeStyleAlpha;
@property (nonatomic, readonly) UILabel *_placeholderLabel;
@property (setter=_setRoundedRectBackgroundCornerRadius:, nonatomic) double _roundedRectBackgroundCornerRadius;
@property (nonatomic, readonly) RTIInputSystemSourceSession *_rtiSourceSession;
@property (setter=_setShouldDisplayDictationPlaceholderMessage:, nonatomic) bool _shouldDisplayDictationPlaceholderMessage;
@property (nonatomic) bool _systemCursorAccessoriesDisabled;
@property (nonatomic) long long _textInputSource;
@property (nonatomic, retain) UIColor *_tvCustomFocusedTextColor;
@property (nonatomic, retain) UIColor *_tvCustomTextColor;
@property (nonatomic) bool _tvUseVibrancy;
@property (nonatomic, copy) NSString *ab_text;
@property (nonatomic, copy) NSDictionary *ab_textAttributes;
@property (nonatomic) bool acceptsDictationSearchResults;
@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsInitialEmojiKeyboard;
@property (nonatomic) bool acceptsPayloads;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic) bool accessibilityValueChangesAreReplacements;
@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property (nonatomic) bool adjustsFontSizeToFitWidth;
@property (nonatomic) NSString *alertAutocapitalizationType;
@property (nonatomic) NSString *alertClearButtonMode;
@property (nonatomic) NSString *alertReturnKeyType;
@property (nonatomic) long long alertTextInputMode;
@property (nonatomic) bool allowsAttachments;
@property (nonatomic) bool allowsEditingTextAttributes;
@property (nonatomic, copy) NSAttributedString *attributedPlaceholder;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, retain) UIImage *background;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic) long long borderStyle;
@property (nonatomic) long long clearButtonMode;
@property (nonatomic) long long clearingBehavior;
@property (nonatomic) bool clearsOnBeginEditing;
@property (nonatomic) bool clearsOnInsertion;
@property bool clearsPlaceholderOnBeginEditing;
@property (nonatomic) struct CGPoint { double x1; double x2; } contentOffsetForSameViewDrops;
@property (nonatomic) bool contentsIsSingleValue;
@property (nonatomic) int controlSize;
@property (nonatomic, readonly) long long cursorBehavior;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSDictionary *defaultTextAttributes;
@property (nonatomic) bool deferBecomingResponder;
@property (nonatomic) <UITextFieldDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry;
@property (nonatomic) bool disableHandwritingKeyboard;
@property (nonatomic) bool disableInputBars;
@property (nonatomic) bool disablePrediction;
@property (nonatomic, retain) UIImage *disabledBackground;
@property (nonatomic) bool displaySecureEditsUsingPlainText;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } drawingScale;
@property (getter=isEditable, nonatomic, readonly) bool editable;
@property (getter=isEditing, nonatomic, readonly) bool editing;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UIScrollView *enclosingScrollView;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets;
@property (nonatomic, retain) UIFont *font;
@property (nonatomic) bool forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) bool forceDisableDictation;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic) bool forceFloatingKeyboard;
@property (nonatomic) bool forceSpellingDictation;
@property (getter=_forcesClearButtonHighContrastAppearance, setter=_setForcesClearButtonHighContrastAppearance:, nonatomic) bool forcesClearButtonHighContrastAppearance;
@property (nonatomic) bool hasDefaultContents;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic, retain) UIView *inputAccessoryView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic, retain) UITextInputAssistantItem *inputAssistantItem;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, retain) UIView *inputView;
@property (retain) UIView *inputView;
@property (nonatomic, readonly) id insertDictationResultPlaceholder;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, copy) id interactionState;
@property (nonatomic) bool isCarPlayIdiom;
@property (nonatomic) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, readonly) NSLayoutManager *layoutManager;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic, retain) UIView *leftView;
@property (nonatomic) long long leftViewMode;
@property (nonatomic, copy) NSDictionary *linkTextAttributes;
@property (nonatomic) bool loadKeyboardsForSiriLanguage;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic) double minimumFontSize;
@property (nonatomic) long long nonEditingLinebreakMode;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic, copy) UIPasteConfiguration *pasteConfiguration;
@property (nonatomic) <UITextPasteDelegate> *pasteDelegate;
@property (nonatomic, copy) NSString *placeholder;
@property (nonatomic) bool preferOnlineDictation;
@property (nonatomic) long long preferredKeyboardStyle;
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (retain) UIView *recentsAccessoryView;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (nonatomic, retain) UIView *rightView;
@property (nonatomic) long long rightViewMode;
@property (nonatomic) bool roundedFont;
@property (setter=sb_setMaxInputLength:, nonatomic) unsigned long long sb_maxInputLength;
@property (nonatomic, readonly) NSString *searchText;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (copy) UITextRange *selectedTextRange;
@property (nonatomic) long long selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } selectionEdgeInsets;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) double shadowBlur;
@property (nonatomic, retain) UIColor *shadowColor;
@property (nonatomic) struct CGSize { double x1; double x2; } shadowOffset;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) bool showDictationButton;
@property (nonatomic) long long sizingRule;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic, copy) NSArray *suggestions;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UISupplementalLexicon *supplementalLexicon;
@property (nonatomic, retain) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic, readonly) bool supportsImagePaste;
@property (getter=_supportsKeyboardNavigationForSuggestions, setter=_setSupportsKeyboardNavigationForSuggestions:, nonatomic) bool supportsKeyboardNavigationForSuggestions;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, readonly) NSTextContainer *textContainer;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } textContainerOrigin;
@property (nonatomic, copy) NSString *textContentType;
@property (getter=isTextDragActive, nonatomic, readonly) bool textDragActive;
@property (nonatomic) <UITextDragDelegate> *textDragDelegate;
@property (nonatomic, readonly) UIDragInteraction *textDragInteraction;
@property (nonatomic) long long textDragOptions;
@property (getter=isTextDropActive, nonatomic, readonly) bool textDropActive;
@property (nonatomic) <UITextDropDelegate> *textDropDelegate;
@property (nonatomic, readonly) UIDropInteraction *textDropInteraction;
@property (nonatomic, readonly) <UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic, readonly) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic, readonly) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) long long textScriptType;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic, readonly) NSTextStorage *textStorage;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (nonatomic, readonly) UITraitCollection *traitCollection;
@property (nonatomic, copy) NSDictionary *typingAttributes;
@property (nonatomic, retain) UIColor *underlineColorForSpelling;
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives;
@property (getter=isUndoEnabled, nonatomic) bool undoEnabled;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useInterfaceLanguageForLocalization;
@property (nonatomic) bool usesStandardTextScaling;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange;
@property (nonatomic, retain) _UITextFieldVisualStyle *visualStyle;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (Class)_fieldEditorClass;
+ (bool)_isTextLayoutManagerEnabled;
+ (Class)_textPasteItemClass;
+ (bool)_wantsFadedEdges;

- (void).cxx_destruct;
- (void)__resumeBecomeFirstResponder;
- (void)_activateSelectionView;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_addFieldEditorToView;
- (void)_addShortcut:(id)arg1;
- (void)_addTextCanvasViewAdjustingFrame:(bool)arg1;
- (void)_adjustFontForAccessibilityTraits:(bool)arg1;
- (bool)_allowAssistanceInSubtree;
- (bool)_allowsChangingFirstResponderForFocusUpdateWithContext:(id)arg1;
- (void)_animateNextHighlightChange;
- (void)_applicationResuming:(id)arg1;
- (void)_applyHighlightedAnimated:(bool)arg1;
- (void)_attachFieldEditor;
- (id)_attributedStringForInsertionOfAttributedString:(id)arg1;
- (id)_attributedText;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 inContainer:(id)arg3 isGuide:(bool)arg4;
- (double)_autolayoutSpacingAtEdge:(int)arg1 forAttribute:(long long)arg2 nextToNeighbor:(id)arg3 edge:(int)arg4 attribute:(long long)arg5 multiplier:(double)arg6;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_availableTextRectExcludingButtonsForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_availableTextRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forEditing:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_backgroundBounds;
- (void)_backgroundCoverStateDidChange;
- (id)_backgroundCoverView;
- (long long)_backgroundCoverViewMode;
- (id)_backgroundFillColor;
- (id)_backgroundProvider;
- (void)_backgroundProviderDidChange;
- (void)_backgroundProviderWillChange:(id)arg1;
- (id)_backgroundStrokeColor;
- (double)_backgroundStrokeWidth;
- (id)_backgroundView;
- (id)_baselineCalculatorSourceCoordinateSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_baselineLeftViewRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_baselineOffsetForLast:(bool)arg1 autolayoutOnly:(bool)arg2;
- (double)_baselineOffsetFromBottom;
- (struct { double x1; double x2; })_baselineOffsetsAtSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_becomeFirstResponder;
- (long long)_blurEffectStyle;
- (long long)_blurEffectStyleForAppearance;
- (bool)_blurEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingRectForRange:(id)arg1;
- (bool)_canDrawContent;
- (Class)_canvasViewClass;
- (id)_clearButton;
- (void)_clearButtonClicked:(id)arg1;
- (id)_clearButtonImageForState:(unsigned long long)arg1;
- (double)_clearButtonMarginX;
- (double)_clearButtonPadX;
- (struct CGSize { double x1; double x2; })_clearButtonSize;
- (void)_clearSelectionUI;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_clipRectForFadedEdges;
- (id)_contentBackdropView;
- (void)_contentCoverStateDidChange;
- (bool)_contentCoverUnsecuresText;
- (id)_contentCoverView;
- (long long)_contentCoverViewMode;
- (id)_contentFloatingContainerView;
- (id)_contentSnapshot;
- (id)_contentView;
- (unsigned long long)_controlEventsForActionTriggered;
- (id)_copyFont:(id)arg1 newSize:(float)arg2 maxSize:(float)arg3;
- (void)_createInteractionAssistant;
- (id)_cuiCatalog;
- (id)_cuiStyleEffectConfiguration;
- (long long)_currentTextAlignment;
- (id)_currentTextColor;
- (id)_defaultFocusEffect;
- (id)_defaultFont;
- (id)_defaultPromptString;
- (void)_define:(id)arg1;
- (bool)_delegateShouldBeginEditing;
- (bool)_delegateShouldChangeCharactersInTextStorageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 replacementString:(id)arg2 delegateCares:(bool*)arg3;
- (bool)_delegateShouldClear;
- (bool)_delegateShouldEndEditing;
- (bool)_delegateShouldScrollToVisibleWhenBecomingFirstResponder;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (void)_detachFieldEditor;
- (void)_detachFieldEditorDiscardingEdits:(bool)arg1 animated:(bool)arg2;
- (void)_detectCustomDrawing;
- (id)_dictationInterpretations;
- (void)_didAttachFieldEditor;
- (void)_didChangeSecureTextEntry;
- (void)_didDetachFieldEditor;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (void)_didSetFont:(id)arg1;
- (void)_didUpdateAfterDetachingFieldEditor;
- (bool)_disableTextColorUpdateOnTraitCollectionChange;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forLabel:(id)arg2;
- (id)_editingProcessor;
- (id)_effectivePasteConfiguration;
- (void)_enabledDidChangeAnimated:(bool)arg1;
- (id)_encodableSubviews;
- (void)_encodeBackgroundColorWithCoder:(id)arg1;
- (void)_ensureSelectionContainerViewSubviewOrdering;
- (id)_fieldEditor;
- (bool)_fieldEditorAttached;
- (double)_fieldEditorHeight;
- (id)_fieldEditorHost;
- (id)_fieldEditorHostAllowingCreation:(bool)arg1;
- (bool)_finishResignFirstResponder;
- (double)_firstBaselineOffsetFromTop;
- (id)_fontInfoForBaselineSpacing;
- (bool)_forceDisplayOverridePlaceholder;
- (void)_forceObscureAllText;
- (bool)_forcesClearButtonHighContrastAppearance;
- (double)_foregroundViewsAlpha;
- (double)_fullFontSize;
- (void)_gestureRecognizerFailed:(id)arg1;
- (bool)_handwritingEnabled;
- (bool)_hasBaseline;
- (bool)_hasContent;
- (bool)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long*)arg1;
- (bool)_hasCustomClearButtonImage;
- (bool)_hasFloatingFieldEditor;
- (bool)_hasFontInfoForVerticalBaselineSpacing;
- (bool)_hasSuffixField;
- (bool)_heightShouldBeMini;
- (void)_highlightedDidChangeAnimated:(bool)arg1;
- (bool)_implementsEditMenu;
- (id)_implicitPasteConfigurationClasses;
- (bool)_inPopover;
- (bool)_inVibrantContentView;
- (void)_increaseContrastSettingChanged:(id)arg1;
- (void)_initIncreasedContrastNotifications;
- (void)_initTextCanvasView;
- (void)_initTextLayoutController;
- (void)_initTextStorage;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textLayoutManagerEnabled:(bool)arg2;
- (void)_initialScrollDidFinish:(id)arg1;
- (id)_inputController;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)_installSelectGestureRecognizer;
- (id)_interactionState;
- (double)_internalFirstBaselineOffsetFromTop;
- (double)_internalLastBaselineOffsetFromBottom;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_invalidateAfterUpdatingEditingAttributes;
- (void)_invalidateAllGlyphsAndTextLayout;
- (void)_invalidateBackgroundProvider;
- (void)_invalidateBackgroundProviderForced:(bool)arg1;
- (void)_invalidateCachedDefaultClearButtonImages;
- (void)_invalidateDefaultFont;
- (void)_invalidateDefaultFullFontSize;
- (void)_invalidateMetricsProvider;
- (void)_invalidatePasscodeStyleFromStyle:(bool)arg1;
- (bool)_isDisplayingLookupViewController;
- (bool)_isDisplayingReferenceLibraryViewController;
- (bool)_isDisplayingShareViewController;
- (bool)_isDisplayingShortcutViewController;
- (bool)_isDisplayingTextService;
- (bool)_isExtremeSizingEnabled;
- (bool)_isFocused;
- (bool)_isPasscodeStyle;
- (bool)_isShowingPlaceholder;
- (bool)_isShowingPrefix;
- (bool)_isTextLayoutManagerEnabled;
- (long long)_keyboardAppearance;
- (void)_layoutContentAndExtras;
- (void)_layoutContentOnly;
- (void)_layoutFieldEditor;
- (void)_layoutLabels;
- (struct CGSize { double x1; double x2; })_leftViewOffset;
- (void)_logWarningForMenuControllerUsage;
- (float)_marginTop;
- (float)_marginTopForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_maximumAlphaForLeadingView;
- (id)_metricsProvider;
- (void)_metricsProviderDidChange;
- (void)_metricsProviderWillChange:(id)arg1;
- (float)_newFontSize:(float)arg1 maxSize:(float)arg2;
- (void)_nonDestructivelyResignFirstResponder;
- (void)_noteThatKeyboardAppearanceHasChanged;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (void)_notifySystemKeyboardOfAppearanceChange;
- (struct CGPoint { double x1; double x2; })_originForTextFieldLabel:(id)arg1;
- (bool)_overridePasscodeStyle;
- (bool)_ownsInputAccessoryView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_padding;
- (bool)_partsShouldBeMini;
- (double)_passcodeStyleAlpha;
- (void)_pasteSessionDidFinish:(id)arg1;
- (id)_placeholderColor;
- (id)_placeholderLabel;
- (double)_placeholderLabelAlphaForForegroundViewsAlpha:(double)arg1;
- (Class)_placeholderLabelClass;
- (id)_placeholderView;
- (id)_pointerInteractionDelegate;
- (void)_populateArchivedSubviews:(id)arg1;
- (double)_preferredBackgroundCornerRadius;
- (Class)_preferredBackgroundProviderClass;
- (id)_preferredConfigurationForFocusAnimation:(long long)arg1 inContext:(id)arg2;
- (id)_preferredMetricsProvider;
- (long long)_preferredRenderingModeForPlaceholder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_prefixFrame;
- (id)_previewRendererForRange:(id)arg1 unifyRects:(bool)arg2;
- (void)_promptForReplace:(id)arg1;
- (void)_propagateCuiProperties;
- (id)_proxyTextInput;
- (id)_rangeAdjustmentGestureView;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeForClearButton;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeForSetText;
- (id)_rangeForTextKitRanges:(id)arg1;
- (void)_receivedKeyboardDidShowNotification:(id)arg1;
- (void)_removeFieldEditorAndHost;
- (bool)_requiresKeyboardResetOnReload;
- (void)_resetSelectionUI;
- (void)_resignFirstResponder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderExternalTouchRectForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderSelectionRectForWindow:(id)arg1;
- (bool)_restoreFirstResponder;
- (struct CGSize { double x1; double x2; })_rightViewOffset;
- (double)_roundedRectBackgroundCornerRadius;
- (void)_sanitizeText:(id)arg1;
- (struct CGPoint { double x1; double x2; })_scrollOffset;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 animated:(bool)arg2;
- (void)_selectGestureChanged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (id)_selectionContainerViewAboveText;
- (void)_selectionMayChange:(id)arg1;
- (void)_setActualLeftView:(id)arg1;
- (void)_setActualLeftViewMode:(long long)arg1;
- (void)_setActualRightView:(id)arg1;
- (void)_setActualRightViewMode:(long long)arg1;
- (void)_setAttributedPlaceholder:(id)arg1;
- (void)_setAttributedText:(id)arg1 setCaretSelectionAfterText:(bool)arg2;
- (void)_setAttributedTextOnFieldEditor:(id)arg1 setCaretSelectionAfterText:(bool)arg2;
- (void)_setBackgroundCoverView:(id)arg1;
- (void)_setBackgroundCoverViewMode:(long long)arg1;
- (void)_setBackgroundFillColor:(id)arg1;
- (void)_setBackgroundProvider:(id)arg1;
- (void)_setBackgroundStrokeColor:(id)arg1;
- (void)_setBackgroundStrokeWidth:(double)arg1;
- (void)_setBlurEnabled:(bool)arg1;
- (void)_setContentCoverUnsecuresText:(bool)arg1;
- (void)_setContentCoverView:(id)arg1;
- (void)_setContentCoverViewMode:(long long)arg1;
- (void)_setCuiCatalog:(id)arg1;
- (void)_setCuiStyleEffectConfiguration:(id)arg1;
- (void)_setCursorAccessories:(id)arg1;
- (void)_setDisableFocus:(bool)arg1;
- (void)_setEnabled:(bool)arg1 animated:(bool)arg2;
- (void)_setExtremeSizingEnabled:(bool)arg1;
- (void)_setForceDisplayOverridePlaceholder:(bool)arg1;
- (void)_setForcesClearButtonHighContrastAppearance:(bool)arg1;
- (void)_setForegroundViewsAlpha:(double)arg1;
- (void)_setFullFontSize:(id)arg1;
- (void)_setHandwritingEnabled:(bool)arg1;
- (void)_setHighlighted:(bool)arg1 animated:(bool)arg2;
- (void)_setInteractionState:(id)arg1;
- (void)_setLeadingPadding:(double)arg1;
- (void)_setLeftViewOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMetricsProvider:(id)arg1;
- (void)_setNeedsStyleRecalc;
- (void)_setOverridePasscodeStyle:(bool)arg1;
- (void)_setOverridePlaceholder:(id)arg1 alignment:(long long)arg2;
- (void)_setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setPasscodeStyleAlpha:(double)arg1;
- (void)_setPlaceholder:(id)arg1;
- (void)_setPrefix:(id)arg1;
- (void)_setRightViewOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)_setRoundedRectBackgroundCornerRadius:(double)arg1;
- (void)_setShouldDisplayDictationPlaceholderMessage:(bool)arg1;
- (void)_setSuffix:(id)arg1 withColor:(id)arg2;
- (void)_setSupportsKeyboardNavigationForSuggestions:(bool)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 replacementText:(id)arg2;
- (void)_setTrailingPadding:(double)arg1;
- (void)_setVisualEffectViewEnabled:(bool)arg1 backgroundColor:(id)arg2;
- (void)_setVisualizesDebugRects:(bool)arg1;
- (void)_setupDefaultStyleEffectConfiguration;
- (void)_share:(id)arg1;
- (bool)_shouldAnimateTransitionForAccessoryView:(id)arg1;
- (bool)_shouldAppendTextInViewDescription;
- (bool)_shouldCollectAsKeyView;
- (bool)_shouldDetermineInterfaceStyleTextColor;
- (bool)_shouldDisplayDictationPlaceholderMessage;
- (bool)_shouldEndEditing;
- (bool)_shouldEndEditingOnReturn;
- (bool)_shouldForwardMovementToFocusEngine:(long long)arg1;
- (bool)_shouldIgnoreBaseWritingDirectionChanges;
- (bool)_shouldObscureInput;
- (bool)_shouldOverrideEditingFont;
- (bool)_shouldResignOnEditingDidEndOnExit;
- (bool)_shouldSendContentChangedNotificationsIfOnlyMarkedTextChanged;
- (bool)_shouldShrinkPlaceholderToFitForAccessibility;
- (bool)_shouldSuppressSelectionHandles;
- (bool)_shouldUnobscureTextWithContentCover;
- (bool)_showsBackgroundCoverView;
- (bool)_showsClearButton:(bool)arg1;
- (bool)_showsClearButtonWhenEmpty;
- (bool)_showsClearButtonWhenNonEmpty:(bool)arg1;
- (bool)_showsContentCoverView;
- (bool)_showsLeftView;
- (bool)_showsRightView;
- (void)_sizeChanged:(bool)arg1;
- (void)_stopObservingFieldEditorScroll;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_suffixFrame;
- (long long)_suffixLabelTextAlignment;
- (bool)_supportsKeyboardNavigationForSuggestions;
- (void)_syncTypingAttributesWithDefaultAttribute:(id)arg1;
- (id)_systemBackgroundView;
- (id)_systemDefaultFocusGroupIdentifier;
- (long long)_systemDefaultFocusGroupPriority;
- (id)_text;
- (id)_textCanvasView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_textCanvasViewFrameIncludingContentInsetsFromFontsWhenNotContainedByFieldEditor;
- (id)_textContainer;
- (id)_textGeometry;
- (id)_textInputViewForAddingGestureRecognizers;
- (id)_textLayoutController;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (bool)_textNeedsSanitizing:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_textRangeForTextStorageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_textShouldFillFieldEditorHeight;
- (bool)_textShouldUseVibrancy;
- (struct CGSize { double x1; double x2; })_textSize;
- (struct CGSize { double x1; double x2; })_textSizeUsingFullFontSize:(bool)arg1;
- (id)_textStorage;
- (id)_textStorageTextColor;
- (void)_transitionFromAccessoryView:(id)arg1 toView:(id)arg2;
- (void)_translate:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (id)_tvCustomFocusedTextColor;
- (id)_tvCustomTextColor;
- (bool)_tvHasFloatingFieldEditor;
- (id)_tvTypingAttributes;
- (void)_tvUpdateAppearanceForUserInterfaceStyle;
- (void)_tvUpdateContentBackdropView;
- (void)_tvUpdateTextColor;
- (bool)_tvUseVibrancy;
- (id)_uiktest_placeholderLabelColor;
- (bool)_uiktest_shouldDisableTextColorUpdateOnTraitCollectionChange;
- (id)_uiktest_tvCustomTextColor;
- (bool)_uiktest_tvUseVibrancy;
- (void)_uninstallSelectGestureRecognizer;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_unobscuredSecureRange;
- (void)_updateAutosizeStyleIfNeeded;
- (void)_updateBaselineInformationDependentOnBounds;
- (void)_updateBaselineInformationDependentOnBoundsAllowingInvalidation:(bool)arg1;
- (void)_updateButtons;
- (void)_updateForTintColor;
- (void)_updateHelpMessageOverrideWithMessage:(id)arg1;
- (void)_updateLabel;
- (void)_updateLabelAppearance;
- (void)_updatePlaceholderPosition;
- (void)_updateSelectionGestures;
- (void)_updateSuffix:(id)arg1;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (bool)_useGesturesForEditableContent;
- (long long)_userInterfaceStyle;
- (id)_viewForLoweringBaselineLayoutAttribute:(int)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_visibleRangeWithLayout:(bool)arg1;
- (bool)_visualEffectViewEnabled;
- (id)_visualSelectionRangeForExtent:(id)arg1 forPoint:(struct CGPoint { double x1; double x2; })arg2 fromPosition:(id)arg3 inDirection:(long long)arg4;
- (bool)_visualizesDebugRects;
- (bool)_wantsBaselineUpdatingFollowingConstraintsPass;
- (void)_willAttachFieldEditor;
- (void)_willUpdateAfterDetachingFieldEditor;
- (void)_windowBecameKey;
- (void)_windowResignedKey;
- (id)actualFont;
- (double)actualMinimumFontSize;
- (void)addGhostedRange:(id)arg1;
- (void)addInvisibleRange:(id)arg1;
- (void)addTextAlternatives:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustedCaretRectForCaretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)adjustsFontForContentSizeCategory;
- (bool)adjustsFontSizeToFitWidth;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)allowsAttachments;
- (bool)allowsDraggingAttachments;
- (bool)allowsEditingTextAttributes;
- (id)attributedPlaceholder;
- (id)attributedText;
- (id)attributedTextInRange:(id)arg1;
- (id)automaticallySelectedOverlay;
- (id)background;
- (id)backgroundColor;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (void)becomeDropResponder;
- (bool)becomeFirstResponder;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginSelectionChange;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)beginningOfDocument;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })borderRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)borderStyle;
- (bool)canBecomeDropResponder;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canResignFirstResponder;
- (void)cancelAutoscroll;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)captureTextFromCamera:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (id)clearButton;
- (long long)clearButtonMode;
- (struct CGSize { double x1; double x2; })clearButtonOffset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clearButtonRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clearButtonRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)clearText;
- (long long)clearingBehavior;
- (bool)clearsOnBeginEditing;
- (bool)clearsOnInsertion;
- (bool)clearsPlaceholderOnBeginEditing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (struct CGPoint { double x1; double x2; })constrainedPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })contentOffsetForSameViewDrops;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (int)controlSize;
- (void)copy:(id)arg1;
- (void)createPlaceholderIfNecessary;
- (id)createPlaceholderLabelWithFont:(id)arg1 andTextAlignment:(long long)arg2;
- (id)createTextLabelWithTextColor:(id)arg1;
- (id)customOverlayContainer;
- (void)cut:(id)arg1;
- (void)dealloc;
- (id)debugDescription;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (void)decodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)decreaseSize:(id)arg1;
- (id)defaultClearButtonImageForState:(unsigned long long)arg1;
- (id)defaultTextAttributes;
- (id)delegate;
- (void)deleteBackward;
- (id)description;
- (void)didAddTextAttachmentViews:(id)arg1;
- (void)didGenerateCancelPreview:(id)arg1;
- (void)didLayoutTextAttachmentView:(id)arg1 inFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)didMoveToWindow;
- (void)didRemoveTextAttachmentViews:(id)arg1;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (void)disableClearsOnInsertion;
- (id)disabledBackground;
- (id)documentFragmentForPasteboardItemAtIndex:(long long)arg1;
- (void)draggingFinished:(id)arg1;
- (void)draggingStarted;
- (void)drawPlaceholderInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawPrefixInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawSuffixInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)drawTextInRectIfNeeded:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })drawingScale;
- (void)droppingFinished;
- (void)droppingStarted;
- (id)editMenuForTextRange:(id)arg1 suggestedActions:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })editRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })editingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)enclosingScrollView;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1 includingSelectedTextAndDisplayedViewControllers:(bool)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)endFloatingCursor;
- (id)endOfDocument;
- (void)endSelectionChange;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)fieldEditor:(id)arg1 shouldInsertText:(id)arg2 replacingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })fieldEditor:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 toCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)fieldEditorDidChange:(id)arg1;
- (void)fieldEditorDidChangeSelection:(id)arg1;
- (bool)fieldEditorShouldExtendCaretHeight:(id)arg1;
- (void)finishedSettingPlaceholder;
- (void)finishedSettingTextOrAttributedText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (void)floatingContentView:(id)arg1 isTransitioningFromState:(unsigned long long)arg2 toState:(unsigned long long)arg3;
- (id)font;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hasMarkedText;
- (bool)hasSelection;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })iconRect;
- (void)increaseSize:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inputAccessoryView;
- (id)inputAssistantItem;
- (id)inputDelegate;
- (id)inputView;
- (void)insertAttributedText:(id)arg1;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })insertFilteredText:(id)arg1;
- (void)insertText:(id)arg1;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;
- (void)insertText:(id)arg1 style:(long long)arg2 alternatives:(id)arg3;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)interactionAssistant;
- (id)interactionState;
- (void)interactionTintColorDidChange;
- (void)invalidateDropCaret;
- (bool)isAccessibilityElementByDefault;
- (bool)isEditable;
- (bool)isEditing;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isTextDragActive;
- (bool)isTextDropActive;
- (bool)isUndoEnabled;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (bool)keyboardInput:(id)arg1 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (bool)keyboardInputChanged:(id)arg1;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (id)largeContentTitle;
- (id)layoutManager;
- (void)layoutSubviews;
- (void)layoutTilesNow;
- (id)leftView;
- (long long)leftViewMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })leftViewRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)linkTextAttributes;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (id)methodSignatureForSelector:(SEL)arg1;
- (double)minimumFontSize;
- (long long)nonEditingLinebreakMode;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (unsigned long long)offsetInMarkedTextForSelection:(id)arg1;
- (float)paddingBottom;
- (float)paddingLeft;
- (float)paddingRight;
- (float)paddingTop;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (id)pasteDelegate;
- (void)pasteItemProviders:(id)arg1;
- (void)performCancelAnimations;
- (id)placeholder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })placeholderRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (void)pointerInteraction:(id)arg1 willEnterRegion:(id)arg2 animator:(id)arg3;
- (void)pointerInteraction:(id)arg1 willExitRegion:(id)arg2 animator:(id)arg3;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesChanged:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (id)rangeWithTextAlternatives:(id*)arg1 atPosition:(id)arg2;
- (id)recentsAccessoryView;
- (void)removeAllGhostedRanges;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)removeEmojiAlternatives;
- (void)removeFromSuperview;
- (void)removeInvisibleRange:(id)arg1;
- (void)removeTextPlaceholder:(id)arg1;
- (void)replace:(id)arg1;
- (void)replaceRange:(id)arg1 withAttributedText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)resignDropResponderWithDropPerformed:(bool)arg1;
- (bool)resignFirstResponder;
- (bool)respondsToSelector:(SEL)arg1;
- (id)rightView;
- (long long)rightViewMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rightViewRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)sanitizeAttributedText:(id)arg1;
- (void)scrollTextFieldToVisibleIfNecessary;
- (id)searchText;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (id)selectedAttributedText;
- (id)selectedText;
- (id)selectedTextRange;
- (id)selectionContainerView;
- (id)selectionHighlightColor;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setAdjustsFontSizeToFitWidth:(bool)arg1;
- (void)setAllowsAttachments:(bool)arg1;
- (void)setAllowsEditingTextAttributes:(bool)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setAttributedPlaceholder:(id)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAttributes:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setAutoresizesTextToFit:(bool)arg1;
- (void)setBackground:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesFirstResponderOnClearButtonTap:(bool)arg1;
- (void)setBorderStyle:(long long)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClearButtonMode:(long long)arg1;
- (void)setClearButtonOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setClearButtonStyle:(long long)arg1;
- (void)setClearingBehavior:(long long)arg1;
- (void)setClearsOnBeginEditing:(bool)arg1;
- (void)setClearsOnInsertion:(bool)arg1;
- (void)setClearsPlaceholderOnBeginEditing:(bool)arg1;
- (void)setClipsToBounds:(bool)arg1;
- (void)setContentOffsetForSameViewDrops:(struct CGPoint { double x1; double x2; })arg1;
- (void)setContentVerticalAlignment:(long long)arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setControlSize:(int)arg1;
- (void)setDefaultTextAttributes:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDevicePasscodeEntry:(bool)arg1;
- (void)setDisabledBackground:(id)arg1;
- (void)setDisplaySecureEditsUsingPlainText:(bool)arg1;
- (void)setDisplaySecureTextUsingPlainText:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setFont:(id)arg1 fullFontSize:(id)arg2;
- (void)setFont:(id)arg1 fullFontSize:(id)arg2 ambientOnly:(bool)arg3;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setIcon:(id)arg1;
- (void)setInputAccessoryView:(id)arg1;
- (void)setInputAssistantItem:(id)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setInputView:(id)arg1;
- (void)setInteractionState:(id)arg1;
- (void)setKeyboardAppearance:(long long)arg1;
- (void)setLabel:(id)arg1;
- (void)setLabelOffset:(float)arg1;
- (void)setLeftView:(id)arg1;
- (void)setLeftViewMode:(long long)arg1;
- (void)setLinkTextAttributes:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setMinimumFontSize:(double)arg1;
- (void)setNeedsLayout;
- (void)setNonEditingLinebreakMode:(long long)arg1;
- (void)setPaddingLeft:(float)arg1;
- (void)setPaddingRight:(float)arg1;
- (void)setPaddingTop:(float)arg1 paddingLeft:(float)arg2;
- (void)setPasswordRules:(id)arg1;
- (void)setPasteDelegate:(id)arg1;
- (void)setPlaceholder:(id)arg1;
- (void)setProgress:(float)arg1;
- (void)setRecentsAccessoryView:(id)arg1;
- (void)setRightView:(id)arg1;
- (void)setRightViewMode:(long long)arg1;
- (void)setSecureTextEntry:(bool)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setShadowBlur:(double)arg1;
- (void)setShadowColor:(id)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setSizingRule:(long long)arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextCentersHorizontally:(bool)arg1;
- (void)setTextCentersVertically:(bool)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTextDragDelegate:(id)arg1;
- (void)setTextDragOptions:(long long)arg1;
- (void)setTextDropDelegate:(id)arg1;
- (void)setTextSelectionBehavior:(int)arg1;
- (void)setTypingAttributes:(id)arg1;
- (void)setUndoEnabled:(bool)arg1;
- (void)setVisualStyle:(id)arg1;
- (void)set_disableTextColorUpdateOnTraitCollectionChange:(bool)arg1;
- (void)set_tvCustomFocusedTextColor:(id)arg1;
- (void)set_tvCustomTextColor:(id)arg1;
- (void)set_tvUseVibrancy:(bool)arg1;
- (double)shadowBlur;
- (id)shadowColor;
- (struct CGSize { double x1; double x2; })shadowOffset;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)sizingRule;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)takeTraitsFrom:(id)arg1;
- (id)text;
- (long long)textAlignment;
- (id)textColor;
- (id)textContainer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInset;
- (struct CGPoint { double x1; double x2; })textContainerOrigin;
- (void)textContainerUsageDidChangeToSize:(struct CGSize { double x1; double x2; })arg1;
- (id)textDragDelegate;
- (id)textDragInteraction;
- (long long)textDragOptions;
- (id)textDropDelegate;
- (id)textDropInteraction;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (id)textInputView;
- (id)textLabel;
- (id)textLayoutController;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)textSelectionBehavior;
- (id)textStorage;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)tintColorDidChange;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (id)typingAttributes;
- (id)undoManager;
- (void)unmarkText;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)validateCommand:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (id)visualStyle;
- (id)webView;
- (void)willDismissEditMenuWithAnimator:(id)arg1;
- (id)willGenerateCancelPreview;
- (void)willMoveToWindow:(id)arg1;
- (void)willPresentEditMenuWithAnimator:(id)arg1;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (void)_cnui_applyContactStyle;
- (id)ab_text;
- (id)ab_textAttributes;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AppSupportUI.framework/AppSupportUI

- (long long)_nui_baselineViewType;

// Image: /System/Library/PrivateFrameworks/AuthKitUI.framework/AuthKitUI

- (id)ak_addActivityIndicator;
- (id)ak_addForgotButtonWithTarget:(id)arg1 action:(SEL)arg2;
- (void)ak_clearActivityIndicatorIfExist;

// Image: /System/Library/PrivateFrameworks/GameCenterUICore.framework/GameCenterUICore

- (bool)isReallyFirstResponder;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

- (void)pk_applyAppearance:(id)arg1;
- (id)pk_childrenForAppearance;
- (id)pk_placeholderColor;
- (void)pk_setPlaceholderColor:(id)arg1;

// Image: /System/Library/PrivateFrameworks/RemindersUICore.framework/RemindersUICore

- (bool)roundedFont;
- (void)setRoundedFont:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard

- (unsigned long long)sb_maxInputLength;
- (void)sb_setMaxInputLength:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/TouchML.framework/TouchML

+ (void)tmlLoadCategory;

- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)tmlSetValue:(id)arg1 forUndefinedKey:(id)arg2;

// Image: /System/Library/PrivateFrameworks/UIAccessibility.framework/UIAccessibility

- (bool)accessibilityValueChangesAreReplacements;
- (void)setAccessibilityValueChangesAreReplacements:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/WorkflowUICore.framework/WorkflowUICore

+ (bool)usesSuggestions;

- (id)alertAutocapitalizationType;
- (id)alertClearButtonMode;
- (id)alertReturnKeyType;
- (long long)alertTextInputMode;
- (void)setAlertAutocapitalizationType:(id)arg1;
- (void)setAlertClearButtonMode:(id)arg1;
- (void)setAlertReturnKeyType:(id)arg1;
- (void)setAlertTextInputMode:(long long)arg1;
- (void)setSuggestions:(id)arg1;
- (id)suggestions;

// Image: /System/Library/PrivateFrameworks/iTunesStoreUI.framework/iTunesStoreUI

- (void)configureFromScriptTextField:(id)arg1;

@end
