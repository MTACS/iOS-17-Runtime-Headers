
@interface AppleSpell : NSObject {
    NSMutableArray * _altBundleURLs;
    NSObject<OS_dispatch_queue> * _assetDataBundleSerialQueue;
    NSMutableDictionary * _assetDataBundleURLDictionary;
    bool  _automaticTextCompletionCollapsed;
    bool  _automaticTextCompletionEnabled;
    NSMutableDictionary * _characterLanguageModelDictionary;
    struct __CFDictionary { } * _databaseConnections;
    struct __CFDictionary { } * _databaseConnectionsByPathAndCode;
    NSMutableArray * _diagnosticInfo;
    struct __CFDictionary { } * _emojiPredictorDict;
    NSMutableSet * _foundNames;
    id  _foundNamesLexicon;
    bool  _foundNamesProhibited;
    id  _foundPhrasesLexicon;
    NSMutableSet * _foundShortcuts;
    NSMutableDictionary * _foundShortcutsDictionary;
    NSMutableArray * _globalDictionaryArray;
    NSMutableArray * _guessRequestTimestamps;
    bool  _hasUpdatedDataBundleLanguages;
    unsigned long long * _keyboardHistogram;
    NSMutableDictionary * _languageCounts;
    NSMutableDictionary * _languageModelDicts;
    unsigned long long  _languageModelWordCount;
    double  _lastAssetRequest;
    NSString * _lastCandidateLanguage;
    double  _lastDecayLanguageModels;
    double  _lastFindNames;
    double  _lastInputAnalytics;
    NSData * _lastKeyEventArray;
    double  _lastKeyboardHistogramRecording;
    NSString * _lastLanguage;
    double  _lastLanguageCounts;
    double  _lastMaintainLanguageModels;
    double  _lastReleaseLanguageModels;
    double  _lastResetLanguageModels;
    double  _lastWriteLanguageModels;
    NSMutableDictionary * _learnedResponses;
    NSMutableDictionary * _lexiconDict;
    NSMutableDictionary * _localDictionaryArrays;
    NSMutableDictionary * _phraseLexiconDict;
    NSString * _previousSingleCompletion;
    double  _probationaryInterval;
    NSMutableDictionary * _probationaryLearnedResponseTimes;
    NSMutableDictionary * _probationaryLearnedResponses;
    void * _proofReaderConnection;
    NSArray * _recipientNames;
    NSMutableArray * _recordedCorrections;
    NSMutableArray * _recordedTICorrections;
    double  _referenceResetTimer;
    NSMutableArray * _requestedAssets;
    NSMutableArray * _requestedByCheckerAssets;
    unsigned long long  _reserved1;
    double  _reserved2;
    NSMutableArray * _reserved3;
    NSMutableDictionary * _reserved4;
    double  _reserved5;
    NSMutableDictionary * _sentencePieceLanguageModelDictionary;
    NSObject<OS_dispatch_queue> * _serialQueue;
    bool  _shouldClearFoundNames;
    id  _supplementalLexicon;
    bool  _supplementalLexiconEnabled;
    NSArray * _supplementalWords;
    NSMutableDictionary * _transformerLanguageModelDictionary;
    NSURL * _updateBundleURL;
    NSMutableSet * _updatedDataBundleLanguages;
    NSMutableDictionary * _userAdaptationDictionary;
    NSArray * _userAdditionalEnglishLocalizations;
    NSArray * _userPreferredLanguages;
    NSArray * _userPreferredLatinLanguages;
    bool  _userPrefersUncheckedCyrillicLanguage;
    bool  _userPrefersUncheckedLatinLanguage;
    NSArray * _userTopLanguages;
    NSArray * _userTransliterationLocalizations;
}

+ (id)availableLanguages;
+ (void)resetSharedInstance;
+ (id)sharedInstance;

- (id)_NLPLanguageModelWithType:(long long)arg1 forLanguageObject:(id)arg2 waitForResult:(bool)arg3;
- (id)_accentCorrectionResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 onlyAtInsertionPoint:(bool)arg6 capitalize:(bool)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9;
- (bool)_acceptErrorWithRuleType:(unsigned long long)arg1 ruleNumber:(unsigned long long)arg2 grammarRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 inString:(id)arg5 corrections:(id)arg6 issueType:(unsigned long long*)arg7;
- (bool)_acceptWithoutAccentForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 languageObject:(id)arg4;
- (void)_addAdditionalGuessesForWord:(id)arg1 sender:(id)arg2 buffer:(char *)arg3 length:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6 accents:(const char *)arg7 isCapitalized:(bool)arg8 isAllCaps:(bool)arg9 isAllAlpha:(bool)arg10 hasLigature:(bool)arg11 suggestPossessive:(bool)arg12 checkUser:(bool)arg13 checkHyphens:(bool)arg14 candidateList:(id)arg15;
- (void)_addConnectionGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 candidateList:(id)arg6;
- (void)_addContextAlternativesForPinyinInputString:(id)arg1 modifications:(id)arg2 afterIndex:(unsigned long long)arg3 delta:(long long)arg4 toArray:(id)arg5;
- (void)_addContextAlternativesForZhuyinInputString:(id)arg1 modifications:(id)arg2 afterIndex:(unsigned long long)arg3 delta:(long long)arg4 toArray:(id)arg5;
- (void)_addGuessesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 minAutocorrectionLength:(unsigned long long)arg6 previousLetter:(unsigned short)arg7 nextLetter:(unsigned short)arg8 basicOnly:(bool)arg9 toGuesses:(id)arg10;
- (bool)_addLanguageModelCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 languageObject:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 waitForLanguageModel:(bool)arg7 allowTransformer:(bool)arg8 candidates:(id)arg9 scoreDictionary:(id)arg10 tryTransliteration:(bool*)arg11;
- (void)_addLanguageModelCompletionsForPrefix:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 capitalized:(bool)arg6 candidates:(id)arg7;
- (void)_addSpaceInsertionGuessesForWord:(id)arg1 sender:(id)arg2 buffer:(char *)arg3 length:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6 isCapitalized:(bool)arg7 checkUser:(bool)arg8 oneLetterWords:(const char *)arg9 twoLetterWords:(const char *)arg10 candidateList:(id)arg11;
- (void)_addTwoLetterWordGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 isCapitalized:(bool)arg5 isAllCaps:(bool)arg6 twoLetterWords:(const char *)arg7 candidateList:(id)arg8;
- (id)_capitalizationResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 onlyAtInsertionPoint:(bool)arg6 keyEventArray:(id)arg7 selectedRangeValue:(id)arg8;
- (void)_checkEnglishArticlesInSentence:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 mutableCorrections:(id)arg4;
- (bool)_checkEnglishGrammarInString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 indexIntoBuffer:(unsigned long long)arg3 bufferLength:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6 sender:(id)arg7 bufIO:(struct _PR_BUF_IO { char *x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; struct _PR_LIMITS {} *x8; struct _PR_PARA_INFO {} *x9; struct _PR_ERROR {} *x10; struct _PR_PARSE_INFO {} **x11; unsigned char x12; short x13; BOOL x14; BOOL x15; struct _PR_STATUS { unsigned int x_16_1_1; int x_16_1_2; unsigned short x_16_1_3; } x16; }*)arg8 retval:(int*)arg9 errorRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg10 details:(id*)arg11;
- (void)_checkEnglishPhrasesInSentence:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 mutableCorrections:(id)arg4;
- (bool)_checkGrammarInString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 bufIO:(struct _PR_BUF_IO { char *x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; struct _PR_LIMITS {} *x8; struct _PR_PARA_INFO {} *x9; struct _PR_ERROR {} *x10; struct _PR_PARSE_INFO {} **x11; unsigned char x12; short x13; BOOL x14; BOOL x15; struct _PR_STATUS { unsigned int x_16_1_1; int x_16_1_2; unsigned short x_16_1_3; } x16; }*)arg6 errorRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 details:(id*)arg8;
- (id)_checkSentence:(id)arg1 languageObject:(id)arg2;
- (void)_checkSentence:(id)arg1 languageObject:(id)arg2 mutableCorrections:(id)arg3;
- (id)_connectionCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 flags:(unsigned long long)arg6 isCapitalized:(bool)arg7 accentCorrectionOnly:(bool)arg8 isAbbreviation:(bool*)arg9 trySpaceInsertion:(bool*)arg10 hasAccentCorrections:(bool*)arg11 candidateList:(id)arg12 typologyCorrection:(id)arg13;
- (unsigned long long)_contextLengthForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 languageObject:(id)arg2 tagger:(id)arg3 languageModel:(id)arg4 maxContextLength:(unsigned long long)arg5 context:(unsigned int*)arg6 cleanOffset:(unsigned long long*)arg7 cleanContextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg8 lastTokenRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg9 lastTokenID:(unsigned int*)arg10;
- (id)_correctionResultForKoreanString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 dictionary:(id)arg7 keyEventArray:(id)arg8;
- (id)_correctionResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 dictionary:(id)arg7 languages:(id)arg8 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg9 flags:(unsigned long long)arg10 keyEventArray:(id)arg11 selectedRangeValue:(id)arg12 parameterBundles:(id)arg13 previousLetter:(unsigned short)arg14 nextLetter:(unsigned short)arg15 extraMisspellingCount:(unsigned long long)arg16 extraCorrectionCount:(unsigned long long*)arg17;
- (id)_correctionResultForWord:(id)arg1 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 capitalize:(bool)arg6 isCapitalized:(bool)arg7 isSecondCapitalized:(bool)arg8 hasCurlyApostrophe:(bool)arg9 appendCorrectionLanguage:(bool)arg10 capitalizationLocale:(id)arg11 proposedCorrection:(id)arg12;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 description:(id)arg2 corrections:(id)arg3;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 description:(id)arg2 corrections:(id)arg3 issueType:(unsigned long long)arg4;
- (bool)_findMatchingRangesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inString:(id)arg2 keyEventArray:(id)arg3 endingAtIndex:(unsigned long long)arg4 matchingStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 correctableStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 matchingKeyEventRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 firstMisspelledKeyEventIndex:(unsigned long long*)arg8 lastMisspelledKeyEventIndex:(unsigned long long*)arg9 previousBackspaceCount:(unsigned long long*)arg10;
- (unsigned long long)_getSplitIndexes:(unsigned long long*)arg1 maxCount:(unsigned long long)arg2 forPinyinInputString:(id)arg3;
- (bool)_getUnigramProbabilityForString:(id)arg1 languageModel:(id)arg2 probability:(double*)arg3;
- (id)_initialCorrectionForString:(id)arg1 lowercaseString:(id)arg2 isFirstSecondCapitalized:(bool)arg3 dictionary:(id)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6;
- (id)_languageModelStateScoresForCandidateList:(id)arg1 languageModel:(id)arg2 state:(id)arg3 language:(id)arg4 tagger:(id)arg5;
- (id)_lexiconPathForLanguageObject:(id)arg1 type:(id)arg2;
- (id)_lexiconPathForLocalization:(id)arg1 type:(id)arg2;
- (id)_lexiconsForLanguage:(id)arg1;
- (id)_lexiconsForLanguage:(id)arg1 waitForResult:(bool)arg2;
- (id)_lexiconsForLanguageObject:(id)arg1;
- (id)_loadLexiconsForLanguage:(id)arg1 localization:(id)arg2 onQueue:(id)arg3;
- (id)_loadNLPLanguageModelWithType:(long long)arg1 forLanguageObject:(id)arg2 onQueue:(id)arg3;
- (id)_loadPhraseLexiconsForLanguage:(id)arg1 localization:(id)arg2 onQueue:(id)arg3;
- (id)_loadWordLanguageModelForLanguage:(id)arg1 localization:(id)arg2 appIdentifier:(id)arg3 onQueue:(id)arg4;
- (id)_modifiedGrammarDescriptionForDescription:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_modifiedGrammarRangeForDoubledWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 sentenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 corrections:(id)arg4;
- (id)_orthographyByModifyingOrthography:(id)arg1 withLatinLanguage:(id)arg2;
- (bool)_permitCorrection:(id)arg1 languageObject:(id)arg2 flags:(unsigned long long)arg3 isCapitalized:(bool)arg4 typologyCorrection:(id)arg5;
- (id)_phraseCapitalizationResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 currentWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inString:(id)arg4 offset:(unsigned long long)arg5 languageObject:(id)arg6 onlyAtInsertionPoint:(bool)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9;
- (id)_phraseLexiconPathForLanguage:(id)arg1;
- (id)_phraseLexiconsForLanguage:(id)arg1;
- (id)_phraseLexiconsForLanguage:(id)arg1 waitForResult:(bool)arg2;
- (id)_pinyinStringByCombiningPinyinString:(id)arg1 withPinyinString:(id)arg2;
- (id)_primitiveRetainedAlternativesForPinyinInputString:(id)arg1;
- (bool)_prohibitCorrectionBasedOnCountsForString:(id)arg1 lowercaseString:(id)arg2 appIdentifier:(id)arg3 languageObject:(id)arg4 typologyCorrection:(id)arg5;
- (bool)_prohibitCorrectionForLanguageObject:(id)arg1 lastKeyboardLanguageObject:(id)arg2;
- (id)_rankedCandidatesForCandidateList:(id)arg1 languageObject:(id)arg2 tagger:(id)arg3 appIdentifier:(id)arg4 parameterBundles:(id)arg5;
- (id)_rankedCandidatesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 candidates:(id)arg2 languageObject:(id)arg3 tagger:(id)arg4 appIdentifier:(id)arg5 allowTransformer:(bool)arg6 scoreDictionary:(id)arg7;
- (void)_readLanguageModelParametersFromDefaults;
- (void)_readLanguageModelParametersFromDictionary:(id)arg1;
- (id)_recursiveRetainedAlternativesForPinyinInputString:(id)arg1 depth:(unsigned long long)arg2;
- (void)_releaseLanguageModels;
- (unsigned long long)_resetLanguageModels;
- (id)_retainedAlternativesByCombiningAlternatives:(id)arg1 withAlternatives:(id)arg2 andAddingAlternatives:(id)arg3;
- (id)_spaceInsertionCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 flags:(unsigned long long)arg6 isCapitalized:(bool)arg7 typologyCorrection:(id)arg8;
- (bool)_spellServer:(id)arg1 canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(bool)arg3 languageObject:(id)arg4;
- (id)_spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 languageObject:(id)arg4 options:(id)arg5;
- (id)_spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 languageObject:(id)arg4 options:(id)arg5 tagger:(id)arg6 errorModel:(id)arg7 guessesDictionaries:(id)arg8;
- (id)_standardizedLanguageModelStringForString:(id)arg1;
- (id)_stringForCompletion:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 prefix:(id)arg6 capitalized:(bool)arg7;
- (id)_stringForTokenIDs:(const unsigned int*)arg1 tokenCount:(unsigned long long)arg2 entryString:(id)arg3 languageModel:(id)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6 sender:(id)arg7 prefix:(id)arg8 capitalized:(bool)arg9;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 createIfAbsent:(bool)arg4 terminatorTokenID:(unsigned int)arg5;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 terminatorTokenID:(unsigned int)arg4;
- (id)_umlautCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 typologyCorrection:(id)arg6;
- (bool)_useAlternateLanguageForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 ofString:(id)arg2 languageObject:(id)arg3 tagger:(id)arg4 alternateLanguageObject:(id)arg5 alternateTagger:(id)arg6 appIdentifier:(id)arg7;
- (char *)_validatedGuessWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkUser:(bool)arg6 additionalBuffer:(char *)arg7;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 forPrediction:(bool)arg4 alreadyCapitalized:(bool)arg5;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 forPrediction:(bool)arg4 alreadyCapitalized:(bool)arg5 depth:(unsigned long long)arg6;
- (void)addAlternateDataBundleURL:(id)arg1;
- (void)addGuessesForKoreanWord:(id)arg1 includeAdditionalGuesses:(bool)arg2 toGuesses:(id)arg3;
- (void)addLexiconGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 minCorrectionLength:(unsigned long long)arg5 minExtendedCorrectionLength:(unsigned long long)arg6 isCapitalized:(bool)arg7 stopAfterFreeInsertions:(bool)arg8 toGuesses:(id)arg9;
- (void)addModifiedPartialPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 prePrevPrevIndex:(unsigned long long)arg6 startingModificationsAt:(unsigned long long)arg7 inBuffer:(char *)arg8 length:(unsigned long long)arg9 initialSyllableCount:(unsigned long long)arg10 initialScore:(unsigned long long)arg11 prevScore:(unsigned long long)arg12 prevPrevScore:(unsigned long long)arg13 lastSyllableScore:(unsigned long long)arg14;
- (void)addModifiedPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 startingModificationsAt:(unsigned long long)arg6 inBuffer:(char *)arg7 length:(unsigned long long)arg8 initialSyllableCount:(unsigned long long)arg9 initialScore:(unsigned long long)arg10 prevScore:(unsigned long long)arg11 prevPrevScore:(unsigned long long)arg12 lastSyllableScore:(unsigned long long)arg13 couldBeAbbreviatedPinyin:(bool)arg14;
- (void)addSpecialModifiedPinyinToArray:(id)arg1 inBuffer:(char *)arg2 length:(unsigned long long)arg3 atEnd:(bool)arg4;
- (id)assetDataBundleURLsForLanguageObject:(id)arg1;
- (id)autocorrectionDictionaryForLanguageObject:(id)arg1;
- (id)backgroundLoadingQueue;
- (id)backgroundMaintenanceQueue;
- (id)capitalizationDictionaryArrayForLanguageObject:(id)arg1;
- (id)characterLanguageModelForLanguageObject:(id)arg1 waitForResult:(bool)arg2;
- (bool)checkNameWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 globalOnly:(bool)arg4;
- (bool)checkNegativeWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3;
- (bool)checkNegativeWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 alreadyCapitalized:(bool)arg4;
- (bool)checkNoCapAbbreviationWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3;
- (bool)checkSpecialPrefixesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2;
- (bool)checkWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 index:(unsigned long long)arg4;
- (void)clearCaches;
- (id)contextAlternativeAnnotatedStringsForJyutpingInputString:(id)arg1;
- (id)contextAlternativeAnnotatedStringsForPinyinInputString:(id)arg1;
- (id)contextAlternativeAnnotatedStringsForZhuyinInputString:(id)arg1;
- (id)dataBundle;
- (id)dataBundlesForLanguageObject:(id)arg1;
- (void*)databaseConnectionForLanguageObject:(id)arg1;
- (id)databasePathForLanguageObject:(id)arg1;
- (id)dictionaryForLanguageObject:(id)arg1 index:(unsigned long long)arg2;
- (float)dynamicScoreForWord:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3;
- (float)dynamicScoreForWord:(id)arg1 languageObject:(id)arg2 appIdentifier:(id)arg3;
- (const void*)englishPhraseRoot;
- (id)englishStringFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (id)englishStringsFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (void)enumerateAssetDataItemsForLocale:(id)arg1 withBlock:(id /* block */)arg2;
- (void)enumerateCorrectionEntriesForWord:(id)arg1 maxCorrections:(unsigned long long)arg2 inLexiconForLanguage:(id)arg3 withBlock:(id /* block */)arg4;
- (void)enumerateCorrectionEntriesForWord:(id)arg1 maxCorrections:(unsigned long long)arg2 inLexiconForLanguageObject:(id)arg3 withBlock:(id /* block */)arg4;
- (void)enumerateEntriesForWord:(id)arg1 inLexiconForLanguage:(id)arg2 withBlock:(id /* block */)arg3;
- (void)enumerateEntriesForWord:(id)arg1 inLexiconForLanguageObject:(id)arg2 withBlock:(id /* block */)arg3;
- (id)externalStringForKoreanInternalString:(id)arg1;
- (bool)findMatchingRangesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inString:(id)arg2 keyEventArray:(id)arg3 selectedRangeValue:(id)arg4 matchingStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 correctableStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 matchingKeyEventRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 firstMisspelledKeyEventIndex:(unsigned long long*)arg8 lastMisspelledKeyEventIndex:(unsigned long long*)arg9 previousBackspaceCount:(unsigned long long*)arg10;
- (bool)getCharacterModelConditionalProbabilityForString:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double*)arg4;
- (bool)getConditionalProbabilityForWord:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double*)arg4;
- (bool)getMetaFlagsForWord:(id)arg1 inLexiconForLanguage:(id)arg2 metaFlags:(unsigned int*)arg3 otherMetaFlags:(unsigned int*)arg4;
- (bool)getMetaFlagsForWord:(id)arg1 inLexiconForLanguageObject:(id)arg2 metaFlags:(unsigned int*)arg3 otherMetaFlags:(unsigned int*)arg4;
- (void)getParameterValue:(double*)arg1 forName:(id)arg2 languageObject:(id)arg3 tagger:(id)arg4 appIdentifier:(id)arg5 parameterBundles:(id)arg6 defaultValue:(double)arg7;
- (bool)getTransformerModelConditionalProbabilityForString:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double*)arg4;
- (id)globalDictionaryArray;
- (id)guessesDictionaryForLanguageObject:(id)arg1;
- (id)init;
- (bool)inputStringIsFullOrAbbreviatedPinyin:(id)arg1;
- (bool)inputStringIsPinyin:(id)arg1 allowPartialLastSyllable:(bool)arg2;
- (id)internalStringForKoreanExternalString:(id)arg1;
- (id)languageModelCompletionsForPartialWord:(id)arg1 languageObject:(id)arg2 sender:(id)arg3 appIdentifier:(id)arg4;
- (id)languageModelLocalizationForLanguage:(id)arg1;
- (id)lexiconForLanguage:(id)arg1;
- (id)lexiconForLanguageObject:(id)arg1;
- (void)loadLexiconsAndLanguageModelsForLanguage:(id)arg1;
- (void)loadWordLanguageModelForLanguageObject:(id)arg1;
- (unsigned long long)loadedLexiconsCountForLanguageObject:(id)arg1;
- (id)localDictionaryArrayForLanguageObject:(id)arg1;
- (id)modelCreationQueue;
- (bool)noSuggestForCompletion:(id)arg1 languageObject:(id)arg2 appIdentifier:(id)arg3 alreadyCapitalized:(bool)arg4;
- (id)normalizedStringInString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)numberOfTurkishSuffixPointsInBuffer:(char *)arg1 length:(unsigned long long)arg2 maxSuffixPoints:(unsigned long long)arg3 suffixPoints:(struct { unsigned long long x1; int x2; }*)arg4;
- (id)parameterBundleForLanguageObject:(id)arg1;
- (void)personalizeEmojiArray:(id)arg1;
- (id)phraseCorrectionsDictionaryForLanguageObject:(id)arg1;
- (id)phraseMatching:(id)arg1 inLexiconForLanguage:(id)arg2;
- (id)phraseMatching:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (id)potentialSentenceCorrectionsForWord:(id)arg1 languageObject:(id)arg2;
- (void)releaseAllLanguageModels;
- (void)releaseAllLexicons;
- (void)releaseDatabaseConnections;
- (void)releaseLanguageModels;
- (void)resetAllLanguageModels;
- (void)resetDataBundlesForAllLanguages;
- (void)resetDataBundlesForLanguageObject:(id)arg1;
- (void)resetLanguageModels;
- (void)resetTimer;
- (id)sentenceCorrectionsDictionaryForLanguageObject:(id)arg1;
- (id)sentencePieceLanguageModelForLanguageObject:(id)arg1 waitForResult:(bool)arg2;
- (id)sentenceTerminatorCharacterSet;
- (void)setUpdateBundleURL:(id)arg1;
- (bool)shouldBlockWord:(id)arg1 languageObject:(id)arg2;
- (id)spellServer:(id)arg1 _retainedAlternativesForPinyinInputString:(id)arg2 extended:(bool)arg3;
- (id)spellServer:(id)arg1 _retainedCorrectionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedFinalModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 _retainedModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 _retainedPrefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (bool)spellServer:(id)arg1 canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(bool)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 candidatesForSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 checkGrammarInString:(id)arg2 language:(id)arg3 details:(id*)arg4;
- (id)spellServer:(id)arg1 checkGrammarInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 language:(id)arg4 offset:(unsigned long long)arg5 options:(id)arg6;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 checkGrammarInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 language:(id)arg4 orthography:(id)arg5 mutableResults:(id)arg6 offset:(unsigned long long)arg7 details:(id*)arg8;
- (void)spellServer:(id)arg1 checkSentenceCorrectionInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 languageObject:(id)arg4 offset:(unsigned long long)arg5 keyEventArray:(id)arg6 selectedRangeValue:(id)arg7 autocorrect:(bool)arg8 checkGrammar:(bool)arg9 ignoreTermination:(bool)arg10 mutableResults:(id)arg11;
- (void)spellServer:(id)arg1 checkSentenceCorrectionInString:(id)arg2 rangeInParagraph:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 languageObject:(id)arg4 locale:(id)arg5 tagger:(id)arg6 offset:(unsigned long long)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9 autocorrect:(bool)arg10 checkGrammar:(bool)arg11 ignoreTermination:(bool)arg12 mutableResults:(id)arg13;
- (id)spellServer:(id)arg1 checkString:(id)arg2 offset:(unsigned long long)arg3 types:(unsigned long long)arg4 options:(id)arg5 orthography:(id)arg6 wordCount:(long long*)arg7;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 finalModificationsForPinyinInputString:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5 correction:(id*)arg6;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 languages:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5 correction:(id*)arg6;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 languages:(id)arg4 topLanguages:(id)arg5 orthography:(id)arg6 checkOrthography:(bool)arg7 mutableResults:(id)arg8 offset:(unsigned long long)arg9 autocorrect:(bool)arg10 onlyAtInsertionPoint:(bool)arg11 initialCapitalize:(bool)arg12 autocapitalize:(bool)arg13 keyEventArray:(id)arg14 appIdentifier:(id)arg15 selectedRangeValue:(id)arg16 parameterBundles:(id)arg17 wordCount:(long long*)arg18 countOnly:(bool)arg19 appendCorrectionLanguage:(bool)arg20 correction:(id*)arg21;
- (id)spellServer:(id)arg1 generateCandidatesForSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 stringForInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5 errorModel:(id)arg6;
- (id)spellServer:(id)arg1 suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5 errorModel:(id)arg6;
- (id)spellServer:(id)arg1 suggestGuessesForKoreanWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 options:(id)arg4;
- (id)spellServer:(id)arg1 suggestGuessesForWord:(id)arg2 inLanguage:(id)arg3;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestWordWithLengthInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestWordWithMinimumLength:(unsigned long long)arg2 maximumLength:(unsigned long long)arg3 language:(id)arg4;
- (id)stringByReducingArabicAlefVariantsInString:(id)arg1;
- (id)stringByRemovingArabicDiacriticsFromString:(id)arg1;
- (id)stringByRemovingHebrewDiacriticsFromString:(id)arg1;
- (bool)supportSentenceCorrectionForLanguageObject:(id)arg1 appIdentifier:(id)arg2;
- (id)taggerForLanguageObject:(id)arg1 string:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (bool)testTurkishSuffixationPattern:(id)arg1;
- (void)timeout:(id)arg1;
- (id)transformerLanguageModelForLanguageObject:(id)arg1 waitForResult:(bool)arg2;
- (id)transformerParameterBundleForLanguageObject:(id)arg1;
- (void)updateAllLexicons;
- (void)updateLexiconsForLanguage:(id)arg1;
- (void)updateLexiconsForLanguageIfNecessary:(id)arg1;
- (void)updateLexiconsForLanguageObject:(id)arg1;
- (void)updateLexiconsForLanguageObjectIfNecessary:(id)arg1;
- (bool)useCharacterLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (bool)useSentencePieceLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (bool)useTransformerLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (bool)useUnigramProbabilityForLanguageObject:(id)arg1;
- (bool)useWordLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (bool)validateAbbreviationOrNumberWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5;
- (bool)validateAdditionalWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateAdditionalWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (bool)validateNoCapAbbreviation:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateNoCapAbbreviation:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (bool)validateUntilLearnedWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateUntilLearnedWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (bool)validateVariantWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateVariantWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (bool)validateWord:(id)arg1 inLexicon:(id)arg2;
- (bool)validateWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (bool)validateWord:(id)arg1 inLexicons:(id)arg2 forLanguage:(id)arg3 requiredMetaFlags:(unsigned int)arg4 alternativeRequiredMetaFlags:(unsigned int)arg5 prohibitedMetaFlags:(unsigned int)arg6 caseInsensitive:(bool)arg7;
- (bool)validateWord:(id)arg1 inLexiconsForLanguageObject:(id)arg2 requiredMetaFlags:(unsigned int)arg3 alternativeRequiredMetaFlags:(unsigned int)arg4 prohibitedMetaFlags:(unsigned int)arg5 caseInsensitive:(bool)arg6;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkNames:(bool)arg8 checkHyphens:(bool)arg9 checkIntercaps:(bool)arg10 checkOptions:(bool)arg11 depth:(unsigned long long)arg12;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkNames:(bool)arg9 checkHyphens:(bool)arg10 checkIntercaps:(bool)arg11 checkOptions:(bool)arg12 depth:(unsigned long long)arg13;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkUser:(bool)arg9 checkNames:(bool)arg10 checkHyphens:(bool)arg11 checkIntercaps:(bool)arg12 checkOptions:(bool)arg13 depth:(unsigned long long)arg14;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkUser:(bool)arg9 checkNames:(bool)arg10 checkHyphens:(bool)arg11 checkIntercaps:(bool)arg12 checkOptions:(bool)arg13 forCorrection:(bool)arg14 depth:(unsigned long long)arg15;
- (bool)validateWordPrefixBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (id)vietnameseModificationForWord:(id)arg1;
- (bool)wordIsAlreadyAccented:(id)arg1;
- (id)wordLanguageModelForLanguage:(id)arg1 appIdentifier:(id)arg2 waitForResult:(bool)arg3;
- (id)wordLanguageModelForLanguageObject:(id)arg1 appIdentifier:(id)arg2 waitForResult:(bool)arg3;

@end
