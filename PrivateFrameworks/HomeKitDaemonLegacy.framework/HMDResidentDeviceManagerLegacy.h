
@interface HMDResidentDeviceManagerLegacy : HMFObject <HMDPrimaryResidentElectionAddOnDelegate, HMDRemoteDeviceMonitorDeviceRegistrationClient, HMDResidentDeviceManager, HMDResidentDeviceManagerContext, NSSecureCoding> {
    HMFFuture * _cloudReady;
    HMFPromise * _cloudReadyPromise;
    <HMDResidentDeviceManagerLegacyDataSource> * _dataSource;
    NSHashTable * _devicePreferenceDataSources;
    bool  _firstHomeManagerZoneFetch;
    bool  _firstHomeZoneFetch;
    bool  _firstLegacyFetch;
    bool  _fixupRemoteResidentDevice;
    HMDHome * _home;
    HMDPrimaryElectionLegacyAddOn * _legacyElection;
    HMDPrimaryElectionCoordinationAddOn * _localNetworkElection;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSString * _logIdentifier;
    HMDMessageDispatcher * _messageDispatcher;
    NSNotificationCenter * _notificationCenter;
    HMDHomePrimaryResidentInitialReachabilityManager * _primaryResidentInitialReachabilityManager;
    NSUUID * _primaryResidentUUID;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _residentAvailable;
    NSMutableSet * _residentDevices;
    bool  _residentSupported;
    bool  _verifyCurrentResidentDevice;
    <HMDResidentDeviceManagerDelegate> * delegate;
}

@property (readonly) long long atHomeLevel;
@property (readonly, copy) NSArray *availableResidentDevices;
@property (readonly) HMFFuture *cloudReady;
@property (retain) HMFPromise *cloudReadyPromise;
@property (nonatomic, readonly) HMDDevice *confirmedPrimaryResidentDevice;
@property (getter=isCurrentDeviceAvailableResident, nonatomic, readonly) bool currentDeviceAvailableResident;
@property (getter=isCurrentDeviceConfirmedPrimaryResident, nonatomic, readonly) bool currentDeviceConfirmedPrimaryResident;
@property (getter=isCurrentDevicePrimaryResident, nonatomic, readonly) bool currentDevicePrimaryResident;
@property (readonly) HMDResidentDevice *currentResidentDevice;
@property (readonly) <HMDResidentDeviceManagerLegacyDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property <HMDResidentDeviceManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSHashTable *devicePreferenceDataSources;
@property (getter=hasFirstHomeManagerZoneFetch, nonatomic) bool firstHomeManagerZoneFetch;
@property (getter=hasFirstHomeZoneFetch, nonatomic) bool firstHomeZoneFetch;
@property (getter=hasFirstLegacyFetch, nonatomic) bool firstLegacyFetch;
@property (nonatomic, readonly) bool hasTrustZoneCapableResident;
@property (readonly) unsigned long long hash;
@property (readonly) HMDHome *home;
@property (readonly) bool isCurrentDeviceAvailableResident;
@property (readonly) bool isOwnerUser;
@property (nonatomic, readonly) bool isResidentElectionV2Enabled;
@property (readonly) bool isResidentEnabled;
@property (readonly) bool isResidentSupported;
@property (retain) HMDPrimaryElectionLegacyAddOn *legacyElection;
@property (retain) HMDPrimaryElectionCoordinationAddOn *localNetworkElection;
@property (readonly) NSString *logIdentifier;
@property (readonly) HMDMessageDispatcher *messageDispatcher;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (readonly, copy) NSSet *messageReceiverChildren;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly) HMDResidentDevice *primaryResidentDevice;
@property (retain) HMDHomePrimaryResidentInitialReachabilityManager *primaryResidentInitialReachabilityManager;
@property (readonly) NSUUID *primaryResidentUUID;
@property (readonly) NSObject<OS_dispatch_queue> *queue;
@property (getter=isResidentAvailable, nonatomic, readonly) bool residentAvailable;
@property (nonatomic, readonly, copy) NSArray *residentDevices;
@property (getter=isResidentSupported, nonatomic) bool residentSupported;
@property (readonly) Class superclass;

+ (bool)hasMessageReceiverChildren;
+ (id)logCategory;
+ (id)shortDescription;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)__currentDeviceUpdated:(id)arg1 completion:(id /* block */)arg2;
- (void)_addResidentDevice:(id)arg1;
- (bool)_createResidentDeviceWithModel:(id)arg1;
- (void)_electResidentDevice:(unsigned long long)arg1;
- (void)_fixUpRemoteResidentDevice:(id)arg1 existingResidentDevice:(id)arg2;
- (void)_handleCloudZoneReadyNotification:(id)arg1;
- (void)_handleResidentDeviceUpdateEnabled:(id)arg1;
- (void)_registerForMessages;
- (void)_removeResidentDevice:(id)arg1;
- (void)_removeResidentDevice:(id)arg1 reason:(id)arg2;
- (void)_removeResidentDeviceWithModel:(id)arg1 message:(id)arg2;
- (void)_run;
- (void)_sendResidentDeviceNotificationWithName:(id)arg1 forResidentDevice:(id)arg2;
- (void)_setupSessionWithPrimaryResidentDevice;
- (bool)_shouldEnableCoordinationElection;
- (void)_startElectionAddOn;
- (void)_stopCoordinationElectionWithReason:(id)arg1;
- (void)_stopLegacyElectionWithReason:(id)arg1;
- (void)_teardownSessionWithPrimaryResidentDevice;
- (void)_updateReachability:(bool)arg1 forResidentDevice:(id)arg2;
- (void)_updateResidentAvailability;
- (void)_verifyCurrentResidentDevice;
- (void)addDataSource:(id)arg1;
- (long long)atHomeLevel;
- (void)atHomeLevelChanged:(long long)arg1;
- (id)availableResidentDevices;
- (id)cloudReady;
- (id)cloudReadyPromise;
- (void)configureWithHome:(id)arg1 messageDispatcher:(id)arg2;
- (void)confirmAsResident;
- (void)confirmOnAvailability;
- (void)confirmWithCompletionHandler:(id /* block */)arg1;
- (id)confirmedPrimaryResidentDevice;
- (id)currentResidentDevice;
- (id)dataSource;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (id)description;
- (id)descriptionWithPointer:(bool)arg1;
- (id)devicePreferenceDataSources;
- (id)dumpState;
- (void)electResidentDevice:(unsigned long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)handleCurrentDeviceChanged:(id)arg1;
- (void)handleDeviceUpdated:(id)arg1;
- (void)handleHomeUpdatedAccessories:(id)arg1;
- (void)handleResidentDeviceIsNotReachable:(id)arg1;
- (void)handleResidentDeviceIsReachable:(id)arg1;
- (bool)hasFirstHomeManagerZoneFetch;
- (bool)hasFirstHomeZoneFetch;
- (bool)hasFirstLegacyFetch;
- (bool)hasTrustZoneCapableResident;
- (id)home;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithDataSource:(id)arg1;
- (void)invalidate;
- (bool)isCurrentDeviceAvailableResident;
- (bool)isCurrentDeviceConfirmedPrimaryResident;
- (bool)isCurrentDevicePrimaryResident;
- (bool)isOwnerUser;
- (bool)isResidentAvailable;
- (bool)isResidentElectionV2Enabled;
- (bool)isResidentEnabled;
- (bool)isResidentSupported;
- (id)legacyElection;
- (id)localNetworkElection;
- (id)logIdentifier;
- (id)messageDispatcher;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)notificationCenter;
- (void)notifyClientsOfUpdatedResidentDevice:(id)arg1;
- (void)notifyResidentAvailable:(bool)arg1;
- (void)notifyUpdatedPrimaryResident:(id)arg1;
- (id)ourSelf;
- (void)primaryElectionAddOn:(id)arg1 didElectPrimaryResident:(id)arg2 confirmed:(bool)arg3 electionLogEvent:(id)arg4;
- (void)primaryElectionAddOn:(id)arg1 didFailToElectWithError:(id)arg2;
- (void)primaryElectionAddOn:(id)arg1 didUpdateActiveNodes:(id)arg2;
- (void)primaryElectionAddOn:(id)arg1 didUpdateResidentDevice:(id)arg2;
- (id)primaryResidentDevice;
- (id)primaryResidentInitialReachabilityManager;
- (id)primaryResidentUUID;
- (id)queue;
- (void)removeResidentDevice:(id)arg1;
- (id)residentDeviceForDevice:(id)arg1;
- (id)residentDevices;
- (id)residentWithUUID:(id)arg1;
- (void)run;
- (void)setCloudReadyPromise:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFirstHomeManagerZoneFetch:(bool)arg1;
- (void)setFirstHomeZoneFetch:(bool)arg1;
- (void)setFirstLegacyFetch:(bool)arg1;
- (void)setHome:(id)arg1;
- (void)setLegacyElection:(id)arg1;
- (void)setLocalNetworkElection:(id)arg1;
- (void)setPrimaryResidentInitialReachabilityManager:(id)arg1;
- (void)setResidentAvailable:(bool)arg1;
- (void)setResidentSupported:(bool)arg1;
- (id)shortDescription;
- (void)transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (void)updatePrimaryResidentWithUUID:(id)arg1 actions:(id)arg2;
- (void)updateResidentAvailability;
- (bool)wasTheHomeFetchedFromCloud;

@end
