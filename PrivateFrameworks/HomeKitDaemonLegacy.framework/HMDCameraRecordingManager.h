
@interface HMDCameraRecordingManager : HMFObject <HMDCameraClipManagerDelegate, HMDCameraRecordingBulkSendSessionReaderDelegate, HMDCameraRecordingSessionDelegate, HMDCameraRecordingSessionNotificationTriggerDelegate, HMDCameraRecordingSettingsControlDelegate, HMDDevicePreferenceDataSource, HMFLogging, HMFMessageReceiver, HMFTimerDelegate> {
    HMDHAPAccessory * _accessory;
    NSMutableSet * _activeRecordingSessions;
    HMDCameraRecordingBulkSendSessionInitiator * _bulkSendSessionInitiator;
    HMDCameraProfile * _camera;
    HMDCameraRecordingLoadBalancer * _cameraLoadBalancer;
    NSUUID * _cameraUUID;
    HMDCameraRecordingBulkSendSessionReader * _currentBulkSendSessionReader;
    HMDCameraRecordingSession * _currentRecordingSession;
    <HMDCameraRecordingManagerDependencyFactory> * _dependencyFactory;
    bool  _didShutDown;
    <HMDFeaturesDataSource> * _featuresDataSource;
    <HMMLogEventSubmitting> * _logEventSubmitter;
    NSUUID * _messageTargetUUID;
    bool  _motionActive;
    HMFMessageDispatcher * _msgDispatcher;
    NSNotificationCenter * _notificationCenter;
    HMDCameraRecordingSessionNotificationTrigger * _notificationTrigger;
    HMDCameraRecordingSettingsControl * _recordingSettingsControl;
    HMDCameraRecordingSessionRetryContext * _sessionRetryContext;
    HMFTimer * _sessionRetryTimer;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property HMDHAPAccessory *accessory;
@property (readonly) NSMutableSet *activeRecordingSessions;
@property (readonly) HMDCameraRecordingBulkSendSessionInitiator *bulkSendSessionInitiator;
@property HMDCameraProfile *camera;
@property (readonly) HMDCameraRecordingLoadBalancer *cameraLoadBalancer;
@property (readonly, copy) NSUUID *cameraUUID;
@property (retain) HMDCameraRecordingBulkSendSessionReader *currentBulkSendSessionReader;
@property (retain) HMDCameraRecordingSession *currentRecordingSession;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) <HMDCameraRecordingManagerDependencyFactory> *dependencyFactory;
@property (readonly, copy) NSString *description;
@property bool didShutDown;
@property (readonly) <HMDFeaturesDataSource> *featuresDataSource;
@property (readonly) unsigned long long hash;
@property (readonly) <HMMLogEventSubmitting> *logEventSubmitter;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (getter=isMotionActive) bool motionActive;
@property (readonly) HMFMessageDispatcher *msgDispatcher;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly) HMDCameraRecordingSessionNotificationTrigger *notificationTrigger;
@property (readonly) HMDCameraRecordingSettingsControl *recordingSettingsControl;
@property (retain) HMDCameraRecordingSessionRetryContext *sessionRetryContext;
@property (retain) HMFTimer *sessionRetryTimer;
@property (readonly) Class superclass;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (bool)_isSessionAlreadyInProgressError:(id)arg1;
+ (id)logCategory;

- (void).cxx_destruct;
- (void)_clipManagerDidStartUpCloudZone;
- (void)_closeCurrentSessionsWithReason:(unsigned short)arg1;
- (void)_closeCurrentSessionsWithReason:(unsigned short)arg1 error:(id)arg2;
- (unsigned short)_closeEventReasonForRecordingSessionError:(id)arg1;
- (void)_configureRecordingSession:(id)arg1 withTrigger:(unsigned long long)arg2;
- (void)_coordinateRecordingSessionForTrigger:(unsigned long long)arg1;
- (id)_createRecordingSessionWithHomePresenceByPairingIdentity:(id)arg1 selectedConfiguration:(id)arg2;
- (void)_forwardRecordingSessionForTrigger:(unsigned long long)arg1 withLoadBalancerDecision:(id)arg2 deviceFilter:(id /* block */)arg3 sessionCoordinationLogEvent:(id)arg4 retryAttemptNumber:(long long)arg5;
- (void)_handleBulkSendSessionCreated:(id)arg1;
- (void)_loadBalanceRecordingSessionForTrigger:(unsigned long long)arg1;
- (void)_prepareRecordingSessionForTrigger:(unsigned long long)arg1 homePresenceByPairingIdentity:(id)arg2 reason:(id)arg3;
- (void)_prepareRecordingSessionForTrigger:(unsigned long long)arg1 homePresenceByPairingIdentity:(id)arg2 reason:(id)arg3 completionCallback:(id /* block */)arg4;
- (void)_resetCurrentRecordingSession:(id)arg1;
- (void)_resetRetryContextWithReason:(id)arg1;
- (void)_shutDown;
- (void)_start;
- (void)_startRecordingSessionForTrigger:(unsigned long long)arg1 homePresenceByPairingIdentity:(id)arg2 reason:(id)arg3 selectedConfiguration:(id)arg4 completionCallback:(id /* block */)arg5;
- (void)_startSessionRetryTimer;
- (void)_submitLoadBalancingEventWithDecision:(id)arg1 numberOfRetries:(unsigned long long)arg2;
- (id)accessory;
- (id)activeRecordingSessions;
- (id)bulkSendSessionInitiator;
- (void)bulkSendSessionReader:(id)arg1 didFinishWithReason:(unsigned short)arg2;
- (void)bulkSendSessionReader:(id)arg1 didReadFragment:(id)arg2;
- (id)camera;
- (id)cameraLoadBalancer;
- (id)cameraUUID;
- (void)clipManagerDidStartUpCloudZone:(id)arg1;
- (void)clipManagerDidStop:(id)arg1;
- (id)currentBulkSendSessionReader;
- (id)currentRecordingSession;
- (void)dealloc;
- (id)dependencyFactory;
- (bool)didShutDown;
- (id)featuresDataSource;
- (void)handleCameraSettingsDidChangeNotification:(id)arg1;
- (void)handleStartRecordingSessionRequest:(id)arg1;
- (id)homePresenceByPairingIdentity;
- (id)initWithCamera:(id)arg1 recordingManagementService:(id)arg2;
- (id)initWithCamera:(id)arg1 recordingManagementService:(id)arg2 workQueue:(id)arg3 dependencyFactory:(id)arg4 notificationCenter:(id)arg5;
- (bool)isMotionActive;
- (id)logEventSubmitter;
- (id)logIdentifier;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)msgDispatcher;
- (id)notificationCenter;
- (id)notificationTrigger;
- (void)notificationTrigger:(id)arg1 didObserveTriggerType:(unsigned long long)arg2 changeToActive:(bool)arg3;
- (id)recordingSettingsControl;
- (void)recordingSettingsControlDidConfigure:(id)arg1;
- (void)session:(id)arg1 didEndWithError:(id)arg2;
- (id)sessionRetryContext;
- (id)sessionRetryTimer;
- (void)setAccessory:(id)arg1;
- (void)setCamera:(id)arg1;
- (void)setCurrentBulkSendSessionReader:(id)arg1;
- (void)setCurrentRecordingSession:(id)arg1;
- (void)setDidShutDown:(bool)arg1;
- (void)setMotionActive:(bool)arg1;
- (void)setSessionRetryContext:(id)arg1;
- (void)setSessionRetryTimer:(id)arg1;
- (void)shutDown;
- (void)start;
- (bool)supportsDeviceWithCapabilities:(id)arg1;
- (void)timerDidFire:(id)arg1;
- (id)workQueue;

@end
