
@interface HMDHomeWalletKeyManager : HMFObject <HMDHomeWalletKeyAccessoryManagerDelegate, HMDWalletPassLibraryDelegate, HMFLogging, HMFMessageReceiver> {
    NAFuture * _addWalletKeyFuture;
    HMDApplicationRegistry * _applicationRegistry;
    HMDBulletinBoard * _bulletinBoard;
    NSUUID * _currentUserUUID;
    <HMDHomeWalletDataSource> * _dataSource;
    <HMDFileManager> * _fileManager;
    HMDHome * _home;
    bool  _isHomeBeingRemoved;
    bool  _isWalletKeyUpdateOperationInProgress;
    id /* block */  _isoCredentialFactory;
    <HAPKeyStore> * _keychainStore;
    HMDHomeKeySetupWalletLogEvent * _logEvent;
    HMDLostModeManager * _lostModeManager;
    HMFMessageDispatcher * _messageDispatcher;
    NSNotificationCenter * _notificationCenter;
    <HMDWalletPassLibrary> * _passLibrary;
    NSMutableArray * _pendingUpdateWalletKeyOperations;
    HMFSystemInfo * _systemInfo;
    NSUUID * _uuid;
    HMDWatchManager * _watchManager;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (retain) NAFuture *addWalletKeyFuture;
@property (readonly) HMDApplicationRegistry *applicationRegistry;
@property (readonly) HMDBulletinBoard *bulletinBoard;
@property (readonly) bool canSuspendWalletKey;
@property (retain) NSUUID *currentUserUUID;
@property (readonly) <HMDHomeWalletDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) <HMDFileManager> *fileManager;
@property (readonly) bool hasHomeKeyInWallet;
@property (readonly) unsigned long long hash;
@property HMDHome *home;
@property bool isHomeBeingRemoved;
@property bool isWalletKeyUpdateOperationInProgress;
@property (readonly) id /* block */ isoCredentialFactory;
@property (readonly) <HAPKeyStore> *keychainStore;
@property (retain) HMDHomeKeySetupWalletLogEvent *logEvent;
@property (readonly) HMDLostModeManager *lostModeManager;
@property (retain) HMFMessageDispatcher *messageDispatcher;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly) <HMDWalletPassLibrary> *passLibrary;
@property (readonly, copy) NSString *passSerialNumber;
@property (readonly) NSMutableArray *pendingUpdateWalletKeyOperations;
@property (readonly) Class superclass;
@property (readonly) HMFSystemInfo *systemInfo;
@property (readonly, copy) NSUUID *uuid;
@property (readonly) HMDWatchManager *watchManager;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)homekitErrorWithPassLibraryError:(id)arg1;
+ (id)logCategory;
+ (id)responsePayloadForPairedWatchesWithMessageName:(id)arg1 responsePayloadByDevice:(id)arg2 error:(id)arg3;

- (void).cxx_destruct;
- (void)_storeWalletKeyMigrationSettingsToDisk:(bool)arg1;
- (void)accessoryManager:(id)arg1 didUpdateWalletKeyColor:(long long)arg2;
- (void)addISOCredentialWithPassAtURL:(id)arg1 walletKey:(id)arg2 completion:(id /* block */)arg3;
- (void)addIssuerKeysToMatterAccessories;
- (void)addWalletKey:(id)arg1 withOptions:(long long)arg2 assertion:(id)arg3;
- (id)addWalletKeyFuture;
- (void)addWalletKeyWithOptions:(long long)arg1 completion:(id /* block */)arg2;
- (void)addWalletKeyWithOptions:(long long)arg1 nfcReaderKey:(id)arg2 completion:(id /* block */)arg3;
- (id)applicationRegistry;
- (void)autoAddWalletKey;
- (void)autoAddWalletKeyWithReason:(id)arg1 completion:(id /* block */)arg2;
- (id)bulletinBoard;
- (bool)canAutoAddWalletKeyWithError:(id*)arg1;
- (bool)canSuspendWalletKey;
- (void)configureWithHome:(id)arg1;
- (void)createExpressModeSetUpBulletin;
- (id)createPassDirectoryWithResourceFiles;
- (void)createPassDirectoryWithWalletKey:(id)arg1 options:(long long)arg2 shouldSkipResourceFiles:(bool)arg3 shouldCreateZipArchive:(bool)arg4 completion:(id /* block */)arg5;
- (id)createPassDirectoryWithoutResourceFiles;
- (id)currentUserUUID;
- (id)dataSource;
- (void)enableExpressWithOptions:(long long)arg1 completion:(id /* block */)arg2;
- (void)enqueueWalletKeyUpdateOperation:(id /* block */)arg1;
- (void)fetchExpressEnablementConflictingPassDescriptionWithCompletion:(id /* block */)arg1;
- (void)fetchHomeKeySupportedWithCompletion:(id /* block */)arg1;
- (void)fetchOrCreateReaderKeyWithCompletion:(id /* block */)arg1;
- (void)fetchPayloadForAddWalletKeyRemoteMessage:(id /* block */)arg1;
- (void)fetchShouldAutoEnableExpressWithCompletion:(id /* block */)arg1;
- (void)fetchShouldSuppressWalletNotificationWithCompletion:(id /* block */)arg1;
- (id)fetchWalletKeyColorOptionWithFlow:(id)arg1;
- (id)fileManager;
- (void)handleAccessCodeChanged;
- (void)handleAccessorySupportsAccessCodeDidChangeNotification:(id)arg1;
- (void)handleAccessorySupportsWalleyKeyDidChangeNotification:(id)arg1;
- (void)handleAddWalletKeyMessage:(id)arg1;
- (void)handleApplicationInstalled:(id)arg1;
- (void)handleApplicationUninstalled:(id)arg1;
- (void)handleEnableExpressForWalletKeyMessage:(id)arg1;
- (void)handleFetchAvailableWalletKeyEncodedPKPassMessage:(id)arg1;
- (void)handleFetchDeviceStateMessage:(id)arg1;
- (void)handleFetchMissingWalletKeysMessage:(id)arg1;
- (void)handleFetchWalletKeyColorMessage:(id)arg1;
- (void)handleHomeAccessoryRemovedNotification:(id)arg1;
- (void)handleHomeAddedAccessoryNotification:(id)arg1;
- (void)handleHomeDidFinishPairingAccessoryNotification:(id)arg1;
- (void)handleHomeDidUpdateNFCReaderKeyNotification:(id)arg1;
- (void)handleHomeHasOnboardedForWalletKeyChangeNotification:(id)arg1;
- (void)handleHomeNameChangedNotification:(id)arg1;
- (void)handleHomeUserRemovedNotification:(id)arg1;
- (void)handleHomeWillBeRemoved;
- (void)handleLostModeManagerDidExitLostModeWithAuthCompleteNotification;
- (void)handleLostModeUpdated;
- (void)handleMessageForPairedWatches:(id)arg1;
- (void)handleNFCReaderKeyUpdatedForWalletKey:(id)arg1;
- (void)handlePendingWalletKeyUpdateOperations;
- (void)handlePersistWalletKeyAddOptionsRemoteMessage:(id)arg1;
- (void)handleRestoreMissingWalletKeysMessage:(id)arg1;
- (void)handleSystemInfoMigrationUpdatedNotification:(id)arg1;
- (bool)hasHomeKeyInWallet;
- (id)home;
- (id)initWithUUID:(id)arg1 workQueue:(id)arg2;
- (id)initWithUUID:(id)arg1 workQueue:(id)arg2 fileManager:(id)arg3 passLibrary:(id)arg4 notificationCenter:(id)arg5 watchManager:(id)arg6 keychainStore:(id)arg7 lostModeManager:(id)arg8 dataSource:(id)arg9 bulletinBoard:(id)arg10 applicationRegistry:(id)arg11 systemInfo:(id)arg12 isoCredentialFactory:(id /* block */)arg13;
- (bool)isHomeBeingRemoved;
- (bool)isWalletKeyUpdateOperationInProgress;
- (id /* block */)isoCredentialFactory;
- (id)keychainStore;
- (id)logEvent;
- (id)logIdentifier;
- (id)lostModeManager;
- (id)messageDispatcher;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)notificationCenter;
- (id)passLibrary;
- (void)passLibrary:(id)arg1 didAddPassWithSerialNumber:(id)arg2 typeIdentifier:(id)arg3;
- (void)passLibrary:(id)arg1 didRemovePassWithSerialNumber:(id)arg2 typeIdentifier:(id)arg3;
- (id)passSerialNumber;
- (id)passSerialNumberWithUserUUID:(id)arg1;
- (id)pendingUpdateWalletKeyOperations;
- (void)recoverDueToUUIDChangeOfUser:(id)arg1 fromOldUUID:(id)arg2;
- (void)removeWalletKeyOnboardingBulletin;
- (void)sendMessageWithName:(id)arg1 payload:(id)arg2 toWatches:(id)arg3 completion:(id /* block */)arg4;
- (void)setAddWalletKeyFuture:(id)arg1;
- (void)setCurrentUserUUID:(id)arg1;
- (void)setHome:(id)arg1;
- (void)setIsHomeBeingRemoved:(bool)arg1;
- (void)setIsWalletKeyUpdateOperationInProgress:(bool)arg1;
- (void)setLogEvent:(id)arg1;
- (void)setMessageDispatcher:(id)arg1;
- (void)showExpressEnabledNotificationForWalletKey:(id)arg1;
- (void)storeWalletKeyMigrationSettingsToDisk;
- (void)syncDeviceCredentialKey:(id)arg1 flow:(id)arg2;
- (void)syncDeviceCredentialKeyForAccessory:(id)arg1 flow:(id)arg2;
- (id)systemInfo;
- (void)updateCurrentUserUUID:(id)arg1;
- (void)updateDeviceStateWithCanAddWalletKey:(id)arg1 completion:(id /* block */)arg2;
- (void)updateDeviceStateWithExpressEnablementConflictingPassDescription:(id)arg1 completion:(id /* block */)arg2;
- (void)updateDeviceStateWithWalletKey:(id)arg1 completion:(id /* block */)arg2;
- (bool)updatePassJSONAtURL:(id)arg1 withWalletKey:(id)arg2 options:(long long)arg3;
- (void)updateWalletKeyAccessCodeFieldWithReason:(id)arg1;
- (void)updateWalletKeyStateToState:(long long)arg1;
- (id)uuid;
- (id)walletKeyByAddingAccessCodeToWalletKey:(id)arg1;
- (id)walletKeySettingsFileURL;
- (id)watchManager;
- (id)workQueue;

@end
