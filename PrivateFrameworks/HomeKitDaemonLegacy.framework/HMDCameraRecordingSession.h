
@interface HMDCameraRecordingSession : HMFObject <HMDCameraClipUploaderDelegate, HMDCameraRecordingSessionVariantFragmentManagerDelegate, HMDCameraRecordingSessionVideoAnalyzerDelegate, HMFLogging> {
    bool  _active;
    NSData * _analysisTimelapseVideoInitData;
    NSData * _analysisVideoInitData;
    HMDCameraProfile * _camera;
    HMDDataStreamFragment * _cameraVideoInitFragment;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _clipStartTime;
    HMDCameraClipUploader * _clipUploader;
    double  _configuredFragmentDuration;
    unsigned long long  _currentFragmentNumber;
    <HMDCameraRecordingSessionDelegate> * _delegate;
    <HMDCameraRecordingSessionFactory> * _factory;
    NSDictionary * _homePresenceByPairingIdentity;
    NSUUID * _identifier;
    HMIVideoAnalyzerFragmentResult * _introAnalyzerResult;
    HMIVideoFragment * _introFragment;
    HMBLocalZone * _localZone;
    NSString * _logIdentifier;
    bool  _noMoreFragmentsAvailable;
    unsigned long long  _pendingFragmentsCount;
    NSNumber * _remainingRecordingExtensionDuration;
    HMFActivity * _sessionActivity;
    NSString * _sessionDirectoryPath;
    HMDCameraRecordingSessionSignificantEventManager * _significantEventManager;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _timelapseClipStartTime;
    HMDCameraClipUploader * _timelapseClipUploader;
    HMDCameraRecordingSessionVariantFragmentManager * _timelapseFragmentManager;
    HMDCameraRecordingSessionTimelineManager * _timelineManager;
    <HMDCameraRecordingSessionVideoAnalyzer> * _videoAnalyzer;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (getter=isActive) bool active;
@property (retain) NSData *analysisTimelapseVideoInitData;
@property (retain) NSData *analysisVideoInitData;
@property (readonly) HMDCameraProfile *camera;
@property (retain) HMDDataStreamFragment *cameraVideoInitFragment;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } clipStartTime;
@property (retain) HMDCameraClipUploader *clipUploader;
@property (readonly) double configuredFragmentDuration;
@property unsigned long long currentFragmentNumber;
@property (readonly, copy) NSString *debugDescription;
@property <HMDCameraRecordingSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) <HMDCameraRecordingSessionFactory> *factory;
@property (readonly) unsigned long long hash;
@property (readonly, copy) NSDictionary *homePresenceByPairingIdentity;
@property (readonly, copy) NSUUID *identifier;
@property (retain) HMIVideoAnalyzerFragmentResult *introAnalyzerResult;
@property (retain) HMIVideoFragment *introFragment;
@property (readonly) HMBLocalZone *localZone;
@property (readonly, copy) NSString *logIdentifier;
@property bool noMoreFragmentsAvailable;
@property unsigned long long pendingFragmentsCount;
@property (readonly) unsigned long long recordingEventTriggers;
@property (copy) NSNumber *remainingRecordingExtensionDuration;
@property (readonly) HMFActivity *sessionActivity;
@property (copy) NSString *sessionDirectoryPath;
@property (readonly) HMDCameraRecordingSessionSignificantEventManager *significantEventManager;
@property (readonly) Class superclass;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } timelapseClipStartTime;
@property (retain) HMDCameraClipUploader *timelapseClipUploader;
@property (readonly) HMDCameraRecordingSessionVariantFragmentManager *timelapseFragmentManager;
@property (readonly) HMDCameraRecordingSessionTimelineManager *timelineManager;
@property (readonly) <HMDCameraRecordingSessionVideoAnalyzer> *videoAnalyzer;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)logCategory;

- (void).cxx_destruct;
- (bool)_createSessionDirectory;
- (void)_endSessionWithError:(id)arg1;
- (void)_finishCurrentClipUploader;
- (void)_finishCurrentTimelapseClipUploader;
- (void)_handleDidFailAnalysisWithError:(id)arg1;
- (void)_handleFragmentResult:(id)arg1;
- (bool)_isValidFirstSessionFragment:(id)arg1;
- (bool)_isValidNonFirstSessionFragment:(id)arg1;
- (void)_notifyForAnalyzerResult:(id)arg1 fragment:(id)arg2 timeOffsetWithinClip:(double)arg3 recordingEventTriggers:(unsigned long long)arg4;
- (void)_notifyForSignificantEvent:(id)arg1 recordingEventTriggers:(unsigned long long)arg2 fragmentNumber:(unsigned long long)arg3;
- (bool)_shouldEndSessionAfterFragment:(id)arg1;
- (bool)_shouldRecordFragmentWithAnalyzerResult:(id)arg1 sequenceNumber:(unsigned long long)arg2 recordingEventTriggers:(unsigned long long)arg3 fragmentAnalyzedEvent:(id)arg4;
- (bool)_shouldWriteSessionLogToDisk;
- (void)_submitNotificationSuccessMetricWithRecordingEventTriggers:(unsigned long long)arg1 fragmentNumber:(unsigned long long)arg2;
- (void)_uploadFragment:(id)arg1 withDuration:(double)arg2 clipFinalizedBecauseMaxDurationExceeded:(bool)arg3;
- (void)_uploadTimelapseFragment:(id)arg1;
- (void)_writeEvent:(id)arg1;
- (void)_writeFragment:(id)arg1;
- (id)activityZones;
- (bool)activityZonesIncludedForSignificantEventDetection;
- (id)analysisTimelapseVideoInitData;
- (id)analysisVideoInitData;
- (void)analyzer:(id)arg1 didAnalyzeFragmentWithResult:(id)arg2;
- (void)analyzer:(id)arg1 didAnalyzeFrameWithResult:(id)arg2;
- (void)analyzer:(id)arg1 didCreateTimelapseFragment:(id)arg2;
- (void)analyzer:(id)arg1 didFailWithError:(id)arg2;
- (id)attributeDescriptions;
- (id)camera;
- (id)cameraVideoInitFragment;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })clipStartTime;
- (id)clipUploader;
- (void)configure;
- (double)configuredFragmentDuration;
- (unsigned long long)currentFragmentNumber;
- (void)dealloc;
- (id)delegate;
- (id)factory;
- (void)handleFragment:(id)arg1;
- (void)handleMotionActive:(bool)arg1;
- (void)handleNoMoreFragmentsAvailable;
- (id)homePresenceByPairingIdentity;
- (id)identifier;
- (id)initWithWorkQueue:(id)arg1 camera:(id)arg2 hapAccessory:(id)arg3 home:(id)arg4 localZone:(id)arg5 configuredFragmentDuration:(double)arg6 timelineManager:(id)arg7 homePresenceByPairingIdentity:(id)arg8;
- (id)initWithWorkQueue:(id)arg1 camera:(id)arg2 hapAccessory:(id)arg3 home:(id)arg4 localZone:(id)arg5 configuredFragmentDuration:(double)arg6 timelineManager:(id)arg7 homePresenceByPairingIdentity:(id)arg8 factory:(id)arg9;
- (id)introAnalyzerResult;
- (id)introFragment;
- (bool)isActive;
- (id)localZone;
- (id)logIdentifier;
- (bool)noMoreFragmentsAvailable;
- (unsigned long long)pendingFragmentsCount;
- (unsigned long long)recordingEventTriggers;
- (id)remainingRecordingExtensionDuration;
- (id)sessionActivity;
- (id)sessionDirectoryPath;
- (void)setActive:(bool)arg1;
- (void)setAnalysisTimelapseVideoInitData:(id)arg1;
- (void)setAnalysisVideoInitData:(id)arg1;
- (void)setCameraVideoInitFragment:(id)arg1;
- (void)setClipStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setClipUploader:(id)arg1;
- (void)setCurrentFragmentNumber:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIntroAnalyzerResult:(id)arg1;
- (void)setIntroFragment:(id)arg1;
- (void)setNoMoreFragmentsAvailable:(bool)arg1;
- (void)setPendingFragmentsCount:(unsigned long long)arg1;
- (void)setRemainingRecordingExtensionDuration:(id)arg1;
- (void)setSessionDirectoryPath:(id)arg1;
- (void)setTimelapseClipStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTimelapseClipUploader:(id)arg1;
- (id)significantEventManager;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timelapseClipStartTime;
- (id)timelapseClipUploader;
- (id)timelapseFragmentManager;
- (id)timelineManager;
- (void)uploaderDidFailUpload:(id)arg1;
- (void)variantFragmentManager:(id)arg1 didSelectVariantFragment:(id)arg2 overlapsFullFragment:(bool)arg3;
- (id)videoAnalyzer;
- (id)workQueue;

@end
