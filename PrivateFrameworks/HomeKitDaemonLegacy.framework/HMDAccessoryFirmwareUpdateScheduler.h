
@interface HMDAccessoryFirmwareUpdateScheduler : HMFObject <HMFLogging, HMFTimerDelegate> {
    HMDHAPAccessory * _accessory;
    id /* block */  _activityCompletion;
    NSBackgroundActivityScheduler * _backgroundScheduler;
    long long  _currentState;
    <HMDAccessoryFirmwareUpdateTask> * _currentTask;
    HMFTimer * _deferCheckTimer;
    HMFTimer * _initialDelayTimer;
    <HMDAccessoryFirmwareUpdatePolicy> * _updatePolicy;
    HMDAccessoryFirmwareUpdateSession * _updateSession;
    <HMDAccessoryFirmwareUpdateSchedulerWingman> * _wingman;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (readonly) HMDHAPAccessory *accessory;
@property (nonatomic, copy) id /* block */ activityCompletion;
@property (nonatomic, retain) NSBackgroundActivityScheduler *backgroundScheduler;
@property (nonatomic) long long currentState;
@property (nonatomic, retain) <HMDAccessoryFirmwareUpdateTask> *currentTask;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) HMFTimer *deferCheckTimer;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isIdle, nonatomic, readonly) bool idle;
@property (nonatomic, retain) HMFTimer *initialDelayTimer;
@property (nonatomic, readonly) bool needsToScheduleApply;
@property (nonatomic, readonly) bool needsToScheduleRegister;
@property (nonatomic, readonly) bool needsToScheduleStaging;
@property (nonatomic, readonly) bool needsToStop;
@property (getter=isStagingInProgress, nonatomic, readonly) bool stagingInProgress;
@property (nonatomic, readonly) long long state;
@property (readonly) Class superclass;
@property (nonatomic, retain) <HMDAccessoryFirmwareUpdatePolicy> *updatePolicy;
@property (nonatomic, readonly) HMDAccessoryFirmwareUpdateProfile *updateProfile;
@property (readonly) HMDAccessoryFirmwareUpdateSession *updateSession;
@property (readonly) <HMDAccessoryFirmwareUpdateSchedulerWingman> *wingman;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)_createUpdatePolicy;
- (void)_defer;
- (void)_handleSchedulingConditionChanged;
- (void)_invalidateExistingScheduling;
- (void)_logDebugStates:(const char *)arg1;
- (void)_registerForNotifications;
- (void)_removeUpdatePolicy;
- (void)_scheduleCurrentTask;
- (void)_scheduleCurrentTaskBackgroundRun;
- (void)_startDeferCheckTimer;
- (void)_startTaskInitialDelayTimer;
- (void)_stop;
- (void)_stopDeferCheckTimer;
- (void)_stopInitialDelayTimer;
- (void)_taskCanRunInCurrentDevice:(id /* block */)arg1;
- (id)accessory;
- (id /* block */)activityCompletion;
- (id)backgroundScheduler;
- (void)configure;
- (long long)currentState;
- (id)currentTask;
- (void)dealloc;
- (id)deferCheckTimer;
- (id)description;
- (void)handleAccessoryReachabilityChanged:(id)arg1;
- (void)handleApplyNotReadyReasonsChanged:(id)arg1;
- (void)handleBridgeUpdate:(id)arg1;
- (void)handlePolicyStatusChange:(id)arg1;
- (void)handlePrimaryResidentChanged:(id)arg1;
- (void)handleStagingNotReadyReasonsChanged:(id)arg1;
- (void)handleUpdateStateChanged:(id)arg1;
- (id)initWithAccessory:(id)arg1 firmwareUpdateSession:(id)arg2 wingman:(id)arg3 workQueue:(id)arg4;
- (id)initWithAccessory:(id)arg1 firmwareUpdateSession:(id)arg2 workQueue:(id)arg3;
- (id)initialDelayTimer;
- (bool)isIdle;
- (bool)isStagingInProgress;
- (id)logIdentifier;
- (bool)needsToScheduleApply;
- (bool)needsToScheduleRegister;
- (bool)needsToScheduleStaging;
- (bool)needsToStop;
- (id)privateDescription;
- (void)removeUpdatePolicy;
- (void)scheduleWithDelay:(bool)arg1;
- (void)setActivityCompletion:(id /* block */)arg1;
- (void)setBackgroundScheduler:(id)arg1;
- (void)setCurrentState:(long long)arg1;
- (void)setCurrentTask:(id)arg1;
- (void)setDeferCheckTimer:(id)arg1;
- (void)setInitialDelayTimer:(id)arg1;
- (void)setUpdatePolicy:(id)arg1;
- (long long)state;
- (void)timerDidFire:(id)arg1;
- (id)updatePolicy;
- (id)updateProfile;
- (id)updateSession;
- (id)wingman;
- (id)workQueue;

@end
