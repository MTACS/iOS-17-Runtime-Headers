
@interface NURenderJob : NSObject {
    NUComposition * _composition;
    long long  _currentStage;
    NSArray * _dependentJobs;
    <NUDevice> * _device;
    bool  _didRespond;
    NSError * _error;
    bool  _failed;
    NUImageGeometry * _fullSizeGeometry;
    bool  _isAborted;
    bool  _isCanceled;
    bool  _isExecuting;
    bool  _isFinished;
    NSDate * _jobCreationDate;
    unsigned long long  _jobNumber;
    NSString * _memoizationCacheKey;
    NSString * _nodeCacheAtStartOfJob;
    NUObservatory * _observatory;
    AVAudioMix * _outputAudioMix;
    NUImageGeometry * _outputGeometry;
    CIImage * _outputImage;
    AVComposition * _outputVideo;
    AVVideoComposition * _outputVideoComposition;
    NURenderNode * _prepareNode;
    NURenderNode * _renderNode;
    NURenderPipeline * _renderPipeline;
    struct { 
        long long numerator; 
        long long denominator; 
    }  _renderScale;
    int  _rendererType;
    NSObject<OS_dispatch_group> * _replyGroup;
    bool  _replySynchronous;
    NURenderRequest * _request;
    NUGeometrySpaceMap * _resolvedSpaceMap;
    bool  _shouldWriteJobDebugFile;
    NSObject<OS_dispatch_queue> * _stateQueue;
    NURenderJobStatistics * _stats;
}

@property (nonatomic, readonly) NSMutableString *additionalDebugInfo;
@property (nonatomic, retain) NUComposition *composition;
@property (readonly) long long currentStage;
@property (retain) NSArray *dependentJobs;
@property (nonatomic, readonly) <NUDevice> *device;
@property (readonly) NSError *error;
@property (readonly) <NUExtentPolicy> *extentPolicy;
@property (readonly) bool failed;
@property (nonatomic, retain) NUImageGeometry *fullSizeGeometry;
@property (readonly) struct { long long x1; long long x2; } imageSize;
@property (readonly) bool isAborted;
@property (readonly) bool isCanceled;
@property (readonly) bool isExecuting;
@property (readonly) bool isFinished;
@property (nonatomic, readonly) NSDate *jobCreationDate;
@property (readonly) unsigned long long jobNumber;
@property (nonatomic, retain) NSString *nodeCacheAtStartOfJob;
@property (nonatomic, retain) AVAudioMix *outputAudioMix;
@property (nonatomic, retain) NUImageGeometry *outputGeometry;
@property (nonatomic, retain) CIImage *outputImage;
@property (nonatomic, retain) AVComposition *outputVideo;
@property (nonatomic, retain) AVVideoComposition *outputVideoComposition;
@property (nonatomic, retain) NURenderNode *prepareNode;
@property (readonly) NUPriority *priority;
@property (nonatomic, retain) NURenderNode *renderNode;
@property (nonatomic, retain) NURenderPipeline *renderPipeline;
@property (nonatomic) struct { long long x1; long long x2; } renderScale;
@property (nonatomic, readonly) int rendererType;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *replyGroup;
@property (readonly) NURenderRequest *request;
@property (nonatomic, retain) NUGeometrySpaceMap *resolvedSpaceMap;
@property (readonly) <NUScalePolicy> *scalePolicy;
@property (nonatomic) bool shouldWriteJobDebugFile;
@property (nonatomic, readonly) <NURenderStatistics> *statistics;
@property (readonly) bool succeeded;
@property (nonatomic, readonly) bool wantsCompleteStage;
@property (nonatomic, readonly) bool wantsOutputGeometry;
@property (nonatomic, readonly) bool wantsOutputImage;
@property (nonatomic, readonly) bool wantsOutputVideo;
@property (nonatomic, readonly) bool wantsOutputVideoFrame;
@property (nonatomic, readonly) bool wantsPrepareNodeCached;
@property (nonatomic, readonly) bool wantsRenderNodeCached;
@property (nonatomic, readonly) bool wantsRenderScaleClampedToNativeScale;
@property (nonatomic, readonly) bool wantsRenderStage;

+ (void)flushCache;

- (void).cxx_destruct;
- (struct { bool x1; bool x2; bool x3; })_atomicCancel;
- (void)_cancel;
- (bool)_cancelCoalescedJob;
- (bool)_checkForMemoizedResult;
- (void)_didPrepare;
- (void)_emitSignpostEventType:(unsigned char)arg1 forStage:(long long)arg2 duration:(double)arg3;
- (void)_finish;
- (void)_memoizeResult:(id)arg1;
- (long long)_nextStageForStage:(long long)arg1;
- (void)_notifyCanceled:(long long)arg1;
- (void)_notifyStageTransition:(long long)arg1;
- (void)_pause;
- (void)_reply:(id)arg1;
- (void)_resume;
- (void)_run:(long long)arg1;
- (void)_setCurrentStage:(long long)arg1;
- (bool)_shouldCancelCoalescedJob;
- (bool)_shouldWaitForDependentJobs;
- (void)abortComplete;
- (void)abortPrepare;
- (void)abortRender;
- (void)abortStage:(long long)arg1;
- (void)addCancelObserver:(id)arg1 queue:(id)arg2 block:(id /* block */)arg3;
- (void)addStageObserver:(id)arg1 queue:(id)arg2 block:(id /* block */)arg3;
- (id)additionalDebugInfo;
- (id)cacheKey;
- (void)cancel;
- (bool)cancelCoalescedJob;
- (void)cleanUp;
- (bool)complete:(out id*)arg1;
- (id)composition;
- (long long)currentStage;
- (id)debugFilePath;
- (id)dependentJobs;
- (id)description;
- (id)device;
- (void)didRun;
- (id)error;
- (id)evaluateComposition:(id)arg1 pipeline:(id)arg2 pipelineState:(id)arg3 error:(out id*)arg4;
- (id)evaluateOutputGeometry:(out id*)arg1;
- (id)extentPolicy;
- (void)fail:(id)arg1;
- (bool)failed;
- (void)finalize:(bool)arg1;
- (void)finish;
- (id)fullSizeGeometry;
- (id)generateVideoComposition:(out id*)arg1;
- (struct { long long x1; long long x2; })imageSize;
- (id)init;
- (id)initWithRequest:(id)arg1;
- (bool)isAborted;
- (bool)isCanceled;
- (bool)isExecuting;
- (bool)isFinished;
- (id)jobCreationDate;
- (unsigned long long)jobNumber;
- (id)memoizationCacheKey;
- (id)newRenderPipelineStateForEvaluationMode:(long long)arg1;
- (id)nodeCacheAtStartOfJob;
- (id)outputAudioMix;
- (id)outputGeometry;
- (id)outputImage;
- (id)outputVideo;
- (id)outputVideoComposition;
- (void)pause;
- (id)pipelineForComposition:(id)arg1 error:(out id*)arg2;
- (bool)prepare:(out id*)arg1;
- (id)prepareNode;
- (id)prepareNodeWithPipelineState:(id)arg1 error:(out id*)arg2;
- (id)priority;
- (void)removeObserver:(id)arg1;
- (bool)render:(out id*)arg1;
- (id)renderImage:(id)arg1 into:(id)arg2 colorSpace:(id)arg3 roi:(id)arg4 imageSize:(struct { long long x1; long long x2; })arg5 alpha:(unsigned long long*)arg6 error:(out id*)arg7;
- (id)renderImage:(id)arg1 into:(id)arg2 colorSpace:(id)arg3 roi:(id)arg4 imageSize:(struct { long long x1; long long x2; })arg5 error:(out id*)arg6;
- (void)renderJobDebugCanceled;
- (void)renderJobDebugInit;
- (void)renderJobDebugResponded;
- (id)renderNode;
- (id)renderNodeWithPipelineState:(id)arg1 error:(out id*)arg2;
- (id)renderPipeline;
- (struct { long long x1; long long x2; })renderScale;
- (bool)renderVideoFrames:(id)arg1 videoMetadataSamples:(id)arg2 intoPixelBuffer:(struct __CVBuffer { }*)arg3 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 colorSpace:(id)arg5 error:(out id*)arg6;
- (id)renderer:(out id*)arg1;
- (int)rendererType;
- (void)reply:(id)arg1;
- (id)replyGroup;
- (id)request;
- (bool)requiresVideoComposition;
- (long long)resolvedSampleMode:(long long)arg1;
- (id)resolvedSpaceMap;
- (void)respond;
- (id)result;
- (void)resume;
- (void)run:(long long)arg1;
- (bool)runStage:(long long)arg1 error:(out id*)arg2;
- (void)runSynchronous;
- (void)runToPrepareSynchronous;
- (id)scalePolicy;
- (void)setComposition:(id)arg1;
- (void)setDependentJobs:(id)arg1;
- (void)setFullSizeGeometry:(id)arg1;
- (void)setNodeCacheAtStartOfJob:(id)arg1;
- (void)setOutputAudioMix:(id)arg1;
- (void)setOutputGeometry:(id)arg1;
- (void)setOutputImage:(id)arg1;
- (void)setOutputVideo:(id)arg1;
- (void)setOutputVideoComposition:(id)arg1;
- (void)setPrepareNode:(id)arg1;
- (void)setRenderNode:(id)arg1;
- (void)setRenderPipeline:(id)arg1;
- (void)setRenderScale:(struct { long long x1; long long x2; })arg1;
- (void)setReplyGroup:(id)arg1;
- (void)setResolvedSpaceMap:(id)arg1;
- (void)setShouldWriteJobDebugFile:(bool)arg1;
- (bool)shouldWriteCanceledJob;
- (bool)shouldWriteJobDebugFile;
- (bool)shouldWriteTombstone;
- (id)statistics;
- (bool)succeeded;
- (id)validateComposition:(out id*)arg1;
- (bool)wantsCompleteStage;
- (bool)wantsOutputGeometry;
- (bool)wantsOutputImage;
- (bool)wantsOutputVideo;
- (bool)wantsOutputVideoFrame;
- (bool)wantsPrepareNodeCached;
- (bool)wantsRenderNodeCached;
- (bool)wantsRenderScaleClampedToNativeScale;
- (bool)wantsRenderStage;
- (long long)willRun;
- (void)writeRenderDebugFileToDisk;
- (void)writeRenderJobDebugTombstone;

@end
