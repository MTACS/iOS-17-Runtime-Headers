
@interface NUGlobalSettings : NSObject {
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _settings;
}

+ (double)HLGOpticalScale;
+ (bool)allAssetsCanUseHDRPipeline;
+ (bool)alwaysRequireHardwareVideoEncoder;
+ (bool)bufferStorageFactoryUsePool;
+ (long long)cacheNodeCacheSizeLimit;
+ (id)cacheNodeDirectoryURL;
+ (long long)cacheNodeFilePermissions;
+ (double)cacheNodeImageCompression;
+ (id)debugRenderBlue;
+ (id)debugRenderPurple;
+ (id)debugRenderYellow;
+ (long long)deviceDefaultSampleMode;
+ (bool)deviceDisableMetal;
+ (bool)devicePrintRenderer;
+ (bool)disableAuxiliaryImageCacheFromSource;
+ (bool)disableIOSurfacePortaitExport;
+ (bool)disableMeteorGainMapGeneration;
+ (bool)disablePacked10BitPixelFormats;
+ (bool)displayDisableColorMatching;
+ (bool)displayDisableDeepColor;
+ (bool)displayForceDeepColor;
+ (bool)enableDash5;
+ (bool)enableHDRSupport;
+ (bool)enforceMinimumBitRateForCinematicVideos;
+ (bool)enforceMinimumBitRateForExportedVideos;
+ (bool)forceMeteorGainMapGeneration;
+ (bool)forceMeteorPlusLinear;
+ (bool)forceMeteorPlusPlus;
+ (bool)forceSoftwareVideoEncoder;
+ (id)globalSettings;
+ (bool)imageLayerDebug;
+ (bool)imageRenderJobUseSurfaceRenderer;
+ (bool)imageRenderJobUseTextureRenderer;
+ (bool)imageSourceDisableCacheImmediately;
+ (bool)imageSourceDisableRAW;
+ (long long)imageTileBorder;
+ (long long)imageTileSize;
+ (bool)isViewDebugEnabled;
+ (bool)logPeakRenderCIUsuage;
+ (double)mediaViewRenderCoalescingInterval;
+ (id)meteorGainMapExposureCompensationMode;
+ (double)overrideDisplayHeadroom;
+ (id)pipelineSourceURL;
+ (bool)platformHasWideColor;
+ (bool)renderEDRAsPQ;
+ (double)renderJSPipelineTimeout;
+ (bool)renderJobDebug;
+ (bool)renderJobDebugCapture5PercentOfJobs;
+ (bool)renderJobDebugCaptureCanceledJobs;
+ (bool)renderJobDebugCaptureNodeCache;
+ (bool)renderJobDebugCaptureNodeGraphs;
+ (bool)renderJobDebugCaptureOnlyPerfStats;
+ (bool)renderJobDebugCapturePerfStatHistory;
+ (bool)renderJobDisableResultCache;
+ (bool)renderMeteorPlusAsHDR;
+ (bool)renderTransparencyOpaque;
+ (bool)renderTransparencyOverBlack;
+ (bool)renderVideoLive;
+ (bool)rendererClampToAlpha;
+ (long long)rendererContextLargeMemoryTarget;
+ (long long)rendererContextLowMemoryTarget;
+ (bool)rendererUseHalfFloat;
+ (bool)rendererUseP3Linear;
+ (void)reset;
+ (bool)runNeutrinoSynchronously;
+ (void)setAllAssetsCanUseHDRPipeline:(bool)arg1;
+ (void)setAlwaysRequireHardwareVideoEncoder:(bool)arg1;
+ (void)setBufferStorageFactoryUsePool:(bool)arg1;
+ (void)setCacheNodeCacheSizeLimit:(long long)arg1;
+ (void)setCacheNodeDirectoryURL:(id)arg1;
+ (void)setCacheNodeFilePermissions:(long long)arg1;
+ (void)setCacheNodeImageCompression:(double)arg1;
+ (void)setDebugRenderBlue:(id)arg1;
+ (void)setDebugRenderPurple:(id)arg1;
+ (void)setDebugRenderYellow:(id)arg1;
+ (void)setDeviceDefaultSampleMode:(long long)arg1;
+ (void)setDevicePrintRenderer:(bool)arg1;
+ (void)setDisableAuxiliaryImageCacheFromSource:(bool)arg1;
+ (void)setDisableIOSurfacePortaitExport:(bool)arg1;
+ (void)setDisableMeteorGainMapGeneration:(bool)arg1;
+ (void)setDisablePacked10BitPixelFormats:(bool)arg1;
+ (void)setDisplayDisableColorMatching:(bool)arg1;
+ (void)setDisplayDisableDeepColor:(bool)arg1;
+ (void)setDisplayForceDeepColor:(bool)arg1;
+ (void)setEnableDash5:(bool)arg1;
+ (void)setEnableHDRSupport:(bool)arg1;
+ (void)setEnforceMinimumBitRateForCinematicVideos:(bool)arg1;
+ (void)setEnforceMinimumBitRateForExportedVideos:(bool)arg1;
+ (void)setForceMeteorGainMapGeneration:(bool)arg1;
+ (void)setForceMeteorPlusLinear:(bool)arg1;
+ (void)setForceMeteorPlusPlus:(bool)arg1;
+ (void)setForceSoftwareVideoEncoder:(bool)arg1;
+ (void)setImageLayerDebug:(bool)arg1;
+ (void)setImageRenderJobUseSurfaceRenderer:(bool)arg1;
+ (void)setImageRenderJobUseTextureRenderer:(bool)arg1;
+ (void)setImageSourceDisableCacheImmediately:(bool)arg1;
+ (void)setImageSourceDisableRAW:(bool)arg1;
+ (void)setImageTileBorder:(long long)arg1;
+ (void)setImageTileSize:(long long)arg1;
+ (void)setLogPeakRenderCIUsuage:(bool)arg1;
+ (void)setMediaViewRenderCoalescingInterval:(double)arg1;
+ (void)setMeteorGainMapExposureCompensationMode:(id)arg1;
+ (void)setOverrideDisplayHeadroom:(double)arg1;
+ (void)setPipelineSourceURL:(id)arg1;
+ (void)setPlatformHasWideColor:(bool)arg1;
+ (void)setRenderEDRAsPQ:(bool)arg1;
+ (void)setRenderJSPipelineTimeout:(double)arg1;
+ (void)setRenderJobDebug:(bool)arg1;
+ (void)setRenderJobDebugCapture5PercentOfJobs:(bool)arg1;
+ (void)setRenderJobDebugCaptureCanceledJobs:(bool)arg1;
+ (void)setRenderJobDebugCaptureNodeCache:(bool)arg1;
+ (void)setRenderJobDebugCaptureNodeGraphs:(bool)arg1;
+ (void)setRenderJobDebugCaptureOnlyPerfStats:(bool)arg1;
+ (void)setRenderJobDebugCapturePerfStatHistory:(bool)arg1;
+ (void)setRenderJobDisableResultCache:(bool)arg1;
+ (void)setRenderMeteorPlusAsHDR:(bool)arg1;
+ (void)setRenderTransparencyOpaque:(bool)arg1;
+ (void)setRenderTransparencyOverBlack:(bool)arg1;
+ (void)setRenderVideoLive:(bool)arg1;
+ (void)setRendererClampToAlpha:(bool)arg1;
+ (void)setRendererContextLargeMemoryTarget:(long long)arg1;
+ (void)setRendererContextLowMemoryTarget:(long long)arg1;
+ (void)setRendererUseHalfFloat:(bool)arg1;
+ (void)setRendererUseP3Linear:(bool)arg1;
+ (void)setRunNeutrinoSynchronously:(bool)arg1;
+ (void)setStoragePoolMigrationDelay:(double)arg1;
+ (void)setStoragePoolNonPurgeableLimit:(long long)arg1;
+ (void)setStoragePoolPurgeableLimit:(long long)arg1;
+ (void)setSurfaceStorageFactoryUsePool:(bool)arg1;
+ (void)setTempDir:(id)arg1;
+ (void)setThresholdDisplayHeadroom:(double)arg1;
+ (void)setUpCacheNodeDirectoryWithComponent:(id)arg1;
+ (void)setVideoCompositorDebugMode:(unsigned long long)arg1;
+ (void)setViewDebugEnabled:(bool)arg1;
+ (double)storagePoolMigrationDelay;
+ (long long)storagePoolNonPurgeableLimit;
+ (long long)storagePoolPurgeableLimit;
+ (bool)surfaceStorageFactoryUsePool;
+ (id)tempDir;
+ (double)thresholdDisplayHeadroom;
+ (unsigned long long)videoCompositorDebugMode;

- (void).cxx_destruct;
- (id)_settingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (bool)boolSettingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (double)doubleSettingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (id)init;
- (long long)integerSettingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (void)reset;
- (void)setSetting:(id)arg1 forKey:(id)arg2;
- (id)settingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (id)stringSettingForKey:(id)arg1 defaultValue:(id /* block */)arg2;
- (id)urlSettingForKey:(id)arg1 defaultValue:(id /* block */)arg2;

@end
