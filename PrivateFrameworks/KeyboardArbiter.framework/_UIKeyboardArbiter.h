
@interface _UIKeyboardArbiter : NSObject <NSXPCListenerDelegate, _UIKeyboardArbiterAdvisor> {
    _UIKeyboardArbiterClientHandle * _activeInputDestinationHandle;
    NSMutableArray * _clients;
    int  _currentFocusPID;
    FBSSceneIdentityToken * _currentFocusSceneIdentity;
    _UIKeyboardArbiterClientHandle * _disablingHandle;
    _UIKeyboardArbiterClientHandle * _focusRequestedHandle;
    unsigned long long  _keyboardScenePresentationMode;
    _UIKeyboardArbiterClientHandle * _keyboardUIHandle;
    _UIKeyboardArbiterClientHandle * _lastActivatedHandle;
    long long  _lastEventSource;
    _UIKeyboardUIInformation * _lastUIInformation;
    _UIKeyboardChangedInformation * _lastUpdate;
    NSXPCListener * _listener;
    _UIKeyboardArbiterClientHandle * _newlyConnectedActiveHandle;
    <_UIKeyboardArbiterOmniscientDelegate> * _omniscientDelegate;
    NSString * _pendingBundleIdentifier;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _pendingFocusLock;
    int  _pendingFocusLock_PID;
    unsigned long long  _pendingFocusLock_generation;
    FBSSceneIdentityToken * _pendingFocusLock_sceneIdentity;
    id /* block */  _pendingNotifyKeyboardChanged;
    _UIKeyboardArbiterClientHandle * _previouslyActiveHandle;
    RBSProcessMonitor * _processMonitor;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableOrderedSet * _recentlyActiveSceneIdentities;
    FBSScene * _scene;
    <_UIKeyboardArbiterSceneDelegate> * _sceneDelegate;
    FBSSceneLayer * _sceneLayer;
    <_UIKeyboardArbiterLink> * _sceneLink;
    int  _updateCounter;
    FBSWorkspace * _workspace;
}

@property (readonly) _UIKeyboardArbiterClientHandle *activeInputDestinationHandle;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) _UIKeyboardArbiterClientHandle *focusRequestedHandle;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long keyboardScenePresentationMode;
@property (nonatomic) _UIKeyboardArbiterClientHandle *keyboardUIHandle;
@property (nonatomic, retain) _UIKeyboardChangedInformation *lastUpdate;
@property (nonatomic) <_UIKeyboardArbiterOmniscientDelegate> *omniscientDelegate;
@property (nonatomic, readonly) int presentingKeyboardProcessIdentifier;
@property (nonatomic) <_UIKeyboardArbiterSceneDelegate> *sceneDelegate;
@property (readonly) FBSSceneLayer *sceneLayer;
@property (nonatomic, readonly) <_UIKeyboardArbiterLink> *sceneLink;
@property (readonly) Class superclass;

+ (void)configureEncodedClassesForXPCConnection:(id)arg1;
+ (bool)unitTestEnvironment;

- (void).cxx_destruct;
- (id)_activeHandleForFocusEvaluation;
- (void)_applyPendingSceneFocusUpdateFromOmniscientDelegateForGeneration:(unsigned long long)arg1;
- (void)_arbiterQueue_keyboardFocusDidChangeWithoutAdvisorInputForGeneration:(unsigned long long)arg1 pid:(int)arg2 sceneIdentity:(id)arg3;
- (void)_cullRecentlyActiveSceneIdentities;
- (id)_currentFocusedHandle;
- (id)_descriptionWithScene:(bool)arg1;
- (void)_findForHandle:(id)arg1 deepestHandleHandler:(id /* block */)arg2;
- (void)_findForHandle:(id)arg1 deepestHandleHandler:(id /* block */)arg2 checklist:(id)arg3;
- (void)_trackRecentlyActiveArbiterHandle:(id)arg1;
- (void)_updateCurrentKeyboardFocusToPID:(int)arg1 sceneIdentity:(id)arg2;
- (void)activateClients;
- (bool)activateHandle:(id)arg1;
- (id)activeInputDestinationHandle;
- (void)attemptConnection;
- (void)captureStateForDebug;
- (void)checkHostingState;
- (void)completeKeyboardStatusChangedFromHandler:(id)arg1;
- (bool)deactivateHandle:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)focusContext;
- (id)focusRequestedHandle;
- (void)handleUnexpectedDeallocForHandler:(id)arg1;
- (id)handlerForBundleID:(id)arg1;
- (id)handlerForPID:(int)arg1;
- (id)handlerForToken:(id)arg1;
- (void)handlerRequestedFocus:(id)arg1 shouldStealKeyboard:(bool)arg2;
- (void)handlerRequestedForcedClientSceneIdentityUpdate:(id)arg1;
- (id)hostBundleIdentifierForHandle:(id)arg1 hosts:(id)arg2;
- (id)hostForHandle:(id)arg1 hosts:(id)arg2;
- (id)initWithLink:(id)arg1;
- (void)keyboardFocusDidChangeWithoutAdvisorInputToPid:(int)arg1 sceneIdentity:(id)arg2;
- (unsigned long long)keyboardScenePresentationMode;
- (id)keyboardUIHandle;
- (id)lastActivatedHandle;
- (id)lastUpdate;
- (bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)newClientConnected:(id)arg1 withExpectedState:(id)arg2 onConnected:(id /* block */)arg3;
- (void)notifyHeightUpdated:(id)arg1;
- (id)omniscientDelegate;
- (id)preferredSceneIdentityForKeyboardFocusWithChangeInformation:(id)arg1;
- (int)presentingKeyboardProcessIdentifier;
- (void)prewarmFocusContext;
- (void)processWithPID:(int)arg1 foreground:(bool)arg2 suspended:(bool)arg3;
- (void)reevaluateFocusedSceneIdentityForKeyboardFocusWithChangeInformation:(id)arg1 stealingKeyboardOnSuccess:(bool)arg2;
- (void)reevaluateHardwareKeyboardClientStealingKeyboardOnSuccess:(bool)arg1;
- (void)reevaluateSceneClientSettings;
- (id)remoteFocusContext;
- (void)resume;
- (void)retrieveClientDebugInformationWithCompletion:(id /* block */)arg1;
- (void)retrieveDebugInformationWithCompletion:(id /* block */)arg1;
- (void)runOperations:(id /* block */)arg1 onHandler:(id)arg2 fromFunction:(const char *)arg3;
- (id)sceneDelegate;
- (id)sceneLayer;
- (id)sceneLink;
- (void)scheduleWindowTimeout;
- (void)setKeyboardScenePresentationMode:(unsigned long long)arg1;
- (void)setKeyboardTotalDisable:(bool)arg1 withFence:(id)arg2 fromHandler:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)setKeyboardUIHandle:(id)arg1;
- (void)setLastUpdate:(id)arg1;
- (void)setOmniscientDelegate:(id)arg1;
- (void)setSceneDelegate:(id)arg1;
- (void)setSuppressionCount:(int)arg1 ofPIDs:(id)arg2;
- (void)signalEventSourceChanged:(long long)arg1 fromHandler:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)transition:(id)arg1 eventStage:(unsigned long long)arg2 withInfo:(id)arg3 fromHandler:(id)arg4;
- (void)updateInterestedBundleIDs;
- (void)updateKeyboardSceneSettings;
- (void)updateKeyboardStatus:(id)arg1 fromHandler:(id)arg2;
- (void)updateKeyboardUIStatus:(id)arg1 fromHandler:(id)arg2;
- (void)updateSceneClientSettings:(id)arg1;
- (void)updateSuppression:(bool)arg1 ofPID:(id)arg2 active:(bool)arg3;
- (void)updateSuppression:(bool)arg1 ofPIDs:(id)arg2 active:(bool)arg3;

@end
