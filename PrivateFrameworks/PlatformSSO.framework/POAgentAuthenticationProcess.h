
@interface POAgentAuthenticationProcess : NSObject <POExtensionDelegate, UNUserNotificationCenterDelegate> {
    POAuthenticationProcess * _authenticationProcess;
    NSTimer * _authenticationTimer;
    SOConfigurationHost * _configurationHost;
    POConfigurationManager * _configurationManager;
    PODirectoryServices * _directoryServices;
    NSDistributedNotificationCenter * _distributedNotificationCenter;
    bool  _enableNetworkChanges;
    SOExtensionManager * _extensionManager;
    <POAgentAuthenticationProcessKerberosDelegate> * _kerberosDelegate;
    POKerberosHelper * _kerberosHelper;
    POKeyBag * _keyBag;
    POKeyWrap * _keyWrap;
    POKeychainHelper * _keychainHelper;
    NSDate * _lastAuthenticationAttempt;
    bool  _localAccount;
    NSObject<OS_dispatch_queue> * _loginQueue;
    NSNotificationCenter * _notificationCenter;
    bool  _platformSSOActive;
    PORegistrationContext * _registrationContext;
    bool  _registrationFailed;
    id /* block */  _screenUnlockHandler;
    bool  _shouldRunConfigurationChangeWhenUnlocked;
    POTokenHelper * _tokenHelper;
    NSString * _userName;
    UNUserNotificationCenter * _userNotificationCenter;
}

@property (retain) POAuthenticationProcess *authenticationProcess;
@property (retain) NSTimer *authenticationTimer;
@property (retain) SOConfigurationHost *configurationHost;
@property (retain) POConfigurationManager *configurationManager;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) PODirectoryServices *directoryServices;
@property (retain) NSDistributedNotificationCenter *distributedNotificationCenter;
@property bool enableNetworkChanges;
@property (retain) SOExtensionManager *extensionManager;
@property (readonly) unsigned long long hash;
@property <POAgentAuthenticationProcessKerberosDelegate> *kerberosDelegate;
@property (retain) POKerberosHelper *kerberosHelper;
@property (retain) POKeyBag *keyBag;
@property (retain) POKeyWrap *keyWrap;
@property (retain) POKeychainHelper *keychainHelper;
@property (retain) NSDate *lastAuthenticationAttempt;
@property bool localAccount;
@property (retain) NSObject<OS_dispatch_queue> *loginQueue;
@property (retain) NSNotificationCenter *notificationCenter;
@property bool platformSSOActive;
@property (retain) PORegistrationContext *registrationContext;
@property bool registrationFailed;
@property (readonly) long long registrationState;
@property (nonatomic, copy) id /* block */ screenUnlockHandler;
@property bool shouldRunConfigurationChangeWhenUnlocked;
@property (readonly) Class superclass;
@property (retain) POTokenHelper *tokenHelper;
@property (retain) NSString *userName;
@property (retain) UNUserNotificationCenter *userNotificationCenter;

- (void).cxx_destruct;
- (bool)_doLoginWithPasswordContext:(id)arg1 tokenId:(id)arg2;
- (bool)_doRefreshWithPasswordContext:(id)arg1 tokenId:(id)arg2;
- (void)_handleLoginResult:(unsigned long long)arg1 authenticationContext:(id)arg2 tokens:(id)arg3 passwordContext:(id)arg4 tokenId:(id)arg5;
- (void)_startDeviceRegistration;
- (void)_startUserRegistration;
- (id)authenticationProcess;
- (id)authenticationTimer;
- (void)checkIfPlatformSSOIsActive;
- (void)configurationChanged:(id)arg1;
- (id)configurationHost;
- (id)configurationManager;
- (id)createPasswordChangedNotificationWithAccountName:(id)arg1 extensionIdentifier:(id)arg2;
- (id)createRegistrationNotificationWithAccountName:(id)arg1;
- (id)createRegistrationUpdateNotificationWithAccountName:(id)arg1;
- (id)createSignInNotificationWithAccountName:(id)arg1 extensionIdentifier:(id)arg2;
- (void)dealloc;
- (id)directoryServices;
- (id)distributedNotificationCenter;
- (void)doUnlockForPasswordWithCredentialContext:(id)arg1;
- (void)doUnlockForSmartCardWithCredentialContext:(id)arg1 tokenId:(id)arg2;
- (void)doUnlockForTokenUnlockWithCredentialContext:(id)arg1;
- (void)doUnlockForTokenWithCredentialContext:(id)arg1;
- (void)doUnlockWithEmptyCredentialContext:(id)arg1;
- (bool)enableNetworkChanges;
- (void)exchangeTGTForStatus:(id)arg1;
- (id)extensionManager;
- (void)finishRegistrationWithRetry;
- (void)finishRegistrationWithStatus:(bool)arg1;
- (void)finishRegistrationWithStatus:(bool)arg1 message:(id)arg2;
- (void)handleAgentStartup;
- (void)handleConfigurationChanged:(bool)arg1;
- (void)handleDeviceAndUserRegistrationForRepair:(bool)arg1;
- (void)handleDeviceAndUserRegistrationForRepair:(bool)arg1 newUser:(bool)arg2 notified:(bool)arg3 profile:(id)arg4;
- (void)handleDeviceRegistrationNotification;
- (void)handleKerberosMappingForTokens:(id)arg1 extensionIdentifier:(id)arg2 userConfiguration:(id)arg3;
- (void)handleKerberosMappingForTokens:(id)arg1 loginConfiguration:(id)arg2 userConfiguration:(id)arg3;
- (void)handleKeyRequestWithCompletion:(id /* block */)arg1;
- (void)handleNetworkChange;
- (void)handlePendingSSOTokensWithSharedData:(id)arg1;
- (void)handleRegistrationViewControllerForExtensionIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)handleRemovingRegistrationForExtension:(id)arg1;
- (void)handleScreenLock;
- (void)handleScreenUnlock;
- (void)handleScreenUnlockWithCredentialContext:(id)arg1 tokenId:(id)arg2 atLogin:(bool)arg3 tokenUnlock:(bool)arg4;
- (unsigned long long)handleTokenBindingWithPasswordContext:(id)arg1;
- (void)handleUnfinishedTGTExchanges;
- (bool)handleUserAuthorizationNeededForAccountDisplayName:(id)arg1 bundleIdentifier:(id)arg2;
- (void)handleUserAuthorizationUsing:(id)arg1 userName:(id)arg2 tokens:(id)arg3 configurationManager:(id)arg4;
- (void)handleUserCredentialNeededAtLogin:(bool)arg1 smartCard:(bool)arg2 accountDisplayName:(id)arg3 bundleIdentifier:(id)arg4 returningContext:(id*)arg5;
- (bool)handleUserNeedsReauthenticationAfterDelay:(double)arg1;
- (void)handleUserRegistrationForUser:(id)arg1 repair:(bool)arg2;
- (void)handleUserRegistrationForUser:(id)arg1 repair:(bool)arg2 newUser:(bool)arg3 notified:(bool)arg4 profile:(id)arg5;
- (void)handleUserRegistrationNotification;
- (id)initWithDelegate:(id)arg1;
- (bool)isCurrentSSOExtension:(id)arg1;
- (id)kerberosDelegate;
- (id)kerberosHelper;
- (id)keyBag;
- (id)keyWrap;
- (id)keychainHelper;
- (id)lastAuthenticationAttempt;
- (id)loadSSOExtensionWithExtensionBundleIdentifier:(id)arg1;
- (bool)localAccount;
- (id)loginQueue;
- (id)notificationCenter;
- (void)notifyKerberosDelegateTGTDidBegin;
- (void)notifyKerberosDelegateTGTDidComplete;
- (bool)performLoginForCurrentUserWithPasswordContext:(id)arg1;
- (bool)performLoginForCurrentUserWithPasswordContext:(id)arg1 tokenId:(id)arg2;
- (bool)platformSSOActive;
- (void)postAuthenticationNotification:(unsigned long long)arg1;
- (void)promptUserForRegistration;
- (id)registrationContext;
- (bool)registrationFailed;
- (long long)registrationState;
- (void)requestDidCompleteWithError:(id)arg1;
- (unsigned long long)requestSmartCardForBinding:(bool)arg1 tokenId:(id*)arg2 tokenHash:(id*)arg3 wrapTokenHash:(id*)arg4;
- (void)requestUserAuthenticationWithCompletion:(id /* block */)arg1;
- (void)requestUserAuthenticationWithUserInfo:(id)arg1;
- (void)requestUserAuthenticationWithWindow:(id)arg1 completion:(id /* block */)arg2;
- (void)resetRegistrationWithCompletion:(id /* block */)arg1;
- (id /* block */)screenUnlockHandler;
- (void)sendPasswordChangedNotification;
- (void)setAuthenticationProcess:(id)arg1;
- (void)setAuthenticationTimer:(id)arg1;
- (void)setConfigurationHost:(id)arg1;
- (void)setConfigurationManager:(id)arg1;
- (void)setDirectoryServices:(id)arg1;
- (void)setDistributedNotificationCenter:(id)arg1;
- (void)setEnableNetworkChanges:(bool)arg1;
- (void)setExtensionManager:(id)arg1;
- (void)setKerberosDelegate:(id)arg1;
- (void)setKerberosHelper:(id)arg1;
- (void)setKeyBag:(id)arg1;
- (void)setKeyWrap:(id)arg1;
- (void)setKeychainHelper:(id)arg1;
- (void)setLastAuthenticationAttempt:(id)arg1;
- (void)setLocalAccount:(bool)arg1;
- (void)setLoginQueue:(id)arg1;
- (void)setNotificationCenter:(id)arg1;
- (void)setPlatformSSOActive:(bool)arg1;
- (void)setRegistrationContext:(id)arg1;
- (void)setRegistrationFailed:(bool)arg1;
- (void)setScreenUnlockHandler:(id /* block */)arg1;
- (void)setShouldRunConfigurationChangeWhenUnlocked:(bool)arg1;
- (void)setTokenHelper:(id)arg1;
- (void)setUserName:(id)arg1;
- (void)setUserNotificationCenter:(id)arg1;
- (void)setupNotificationCategories;
- (void)setupTimerForAuthentication;
- (bool)shouldRunConfigurationChangeWhenUnlocked;
- (void)showAlertMessage:(id)arg1 completion:(id /* block */)arg2;
- (int)ssoMethodToUse:(id)arg1 profile:(id)arg2;
- (id)tokenHelper;
- (id)userName;
- (id)userNotificationCenter;
- (void)userNotificationCenter:(id)arg1 didReceiveNotificationResponse:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)windowDidClose;

@end
