
@interface AXOrator : NSObject <AVSpeechSynthesizerDelegate> {
    NSMutableArray * _additionalContentToProcess;
    double  _audioSessionInactiveTimeout;
    AXDispatchTimer * _audioSessionTimer;
    bool  _contentIsSpeakable;
    NSString * _currentLanguageCode;
    <AXOratorDelegate> * _delegate;
    bool  _isFetchingAdditionalContent;
    bool  _isProcessingContentForSpeech;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _lastSpokenSubstringRange;
    AVSpeechUtterance * _lastUtterance;
    NSString * _lastUtteranceLanguageCode;
    AXLanguageTag * _lastUtteranceLanguageTag;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _lastUtteranceSubstringRange;
    unsigned long long  _numberOfTokensToSkip;
    bool  _preferredLanguageWasSpecified;
    AXLanguageTaggedContent * _selectedContent;
    bool  _shouldSpeakNextItemOnResume;
    bool  _skipLuthorRules;
    AXLanguageTaggedContent * _speakingContent;
    NSArray * _speakingContentTokenRanges;
    long long  _speakingContext;
    NSMutableArray * _speechSequenceItems;
    AVSpeechSynthesizer * _speechSynthesizer;
    bool  _spellOutContent;
    AVSpeechUtterance * _statusUtterance;
    bool  _supportsAccurateWordCallbacks;
}

@property (nonatomic, retain) NSMutableArray *additionalContentToProcess;
@property (nonatomic) double audioSessionInactiveTimeout;
@property (nonatomic, copy) NSString *content;
@property (nonatomic, retain) NSString *currentLanguageCode;
@property (nonatomic, readonly) NSString *currentVoiceIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AXOratorDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isFetchingAdditionalContent;
@property (nonatomic) bool isProcessingContentForSpeech;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } lastSpokenSubstringRange;
@property (nonatomic, retain) AVSpeechUtterance *lastUtterance;
@property (nonatomic, retain) NSString *lastUtteranceLanguageCode;
@property (nonatomic, retain) AXLanguageTag *lastUtteranceLanguageTag;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } lastUtteranceSubstringRange;
@property (nonatomic) unsigned long long numberOfTokensToSkip;
@property (nonatomic) bool preferredLanguageWasSpecified;
@property (nonatomic, retain) AXLanguageTaggedContent *selectedContent;
@property (nonatomic) bool shouldSpeakNextItemOnResume;
@property (nonatomic) bool skipLuthorRules;
@property (nonatomic, retain) AXLanguageTaggedContent *speakingContent;
@property (nonatomic, retain) NSArray *speakingContentTokenRanges;
@property (nonatomic) long long speakingContext;
@property (nonatomic, retain) NSMutableArray *speechSequenceItems;
@property (nonatomic, retain) AVSpeechSynthesizer *speechSynthesizer;
@property (nonatomic) bool spellOutContent;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsAccurateWordCallbacks;

- (void).cxx_destruct;
- (bool)_canSpeakTaggedContent:(id)arg1;
- (bool)_changeSpeakingSpeed:(double)arg1 usingLanugageSpecificRate:(bool)arg2;
- (void)_clearAllContentState;
- (long long)_currentTokenIndex:(bool)arg1;
- (id)_getLangCodeForItem:(id)arg1;
- (void)_processAdditionalContentInPreparationForSpeech;
- (void)_respeakUtteranceIfNeeded;
- (bool)_skipByUnit:(bool)arg1 boundary:(unsigned long long)arg2;
- (void)_speakNextItemInSequence;
- (void)_speakNextTokenFromCurrentTokenIndex:(long long)arg1 forward:(bool)arg2 boundary:(unsigned long long)arg3;
- (id)_speechSequenceItemsStartingAtContentLocation:(unsigned long long)arg1;
- (void)_startSpeakingSequence;
- (bool)_successWithCode:(long long)arg1 error:(id*)arg2;
- (void)_tokenizeContentIfNeeded;
- (void)_updateAudioSessionCategory;
- (void)_updateSequenceForSpellOutBehavior;
- (bool)_useLanguageSpecificSpeakingRate;
- (void)addAdditionalContentToSpeechQueue:(id)arg1;
- (id)additionalContentToProcess;
- (double)audioSessionInactiveTimeout;
- (bool)canResumeWithContent:(id)arg1;
- (void)clearSelectedContent;
- (id)content;
- (bool)contentIsSpeakable;
- (id)currentLanguageCode;
- (double)currentSpeechRateForAdjustment;
- (id)currentVoiceIdentifier;
- (id)delegate;
- (bool)fastForwardWithBoundary:(unsigned long long)arg1;
- (id)init;
- (bool)isFetchingAdditionalContent;
- (bool)isPaused;
- (bool)isProcessingContentForSpeech;
- (bool)isSpeaking;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })lastSpokenSubstringRange;
- (id)lastUtterance;
- (id)lastUtteranceLanguageCode;
- (id)lastUtteranceLanguageTag;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })lastUtteranceSubstringRange;
- (unsigned long long)numberOfTokensToSkip;
- (bool)pauseSpeaking:(id*)arg1;
- (bool)preferredLanguageWasSpecified;
- (bool)resumeSpeaking:(id*)arg1;
- (bool)resumeSpeakingAfterDelay:(double)arg1 error:(id*)arg2;
- (bool)rewindWithBoundary:(unsigned long long)arg1;
- (id)selectedContent;
- (void)setAdditionalContentToProcess:(id)arg1;
- (void)setAudioSessionInactiveTimeout:(double)arg1;
- (void)setContent:(id)arg1;
- (void)setCurrentLanguageCode:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsFetchingAdditionalContent:(bool)arg1;
- (void)setIsProcessingContentForSpeech:(bool)arg1;
- (void)setLastSpokenSubstringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setLastUtterance:(id)arg1;
- (void)setLastUtteranceLanguageCode:(id)arg1;
- (void)setLastUtteranceLanguageTag:(id)arg1;
- (void)setLastUtteranceSubstringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setNumberOfTokensToSkip:(unsigned long long)arg1;
- (void)setPreferredLanguageWasSpecified:(bool)arg1;
- (void)setSelectedContent:(id)arg1;
- (void)setShouldSpeakNextItemOnResume:(bool)arg1;
- (void)setSkipLuthorRules:(bool)arg1;
- (void)setSpeakingContent:(id)arg1;
- (void)setSpeakingContentTokenRanges:(id)arg1;
- (void)setSpeakingContext:(long long)arg1;
- (bool)setSpeakingRate:(double)arg1;
- (void)setSpeechSequenceItems:(id)arg1;
- (void)setSpeechSynthesizer:(id)arg1;
- (void)setSpellOutContent:(bool)arg1;
- (void)setSupportsAccurateWordCallbacks:(bool)arg1;
- (bool)shouldSpeakNextItemOnResume;
- (bool)skipLuthorRules;
- (bool)speakFaster;
- (bool)speakSlower;
- (void)speakStatusWithLanguage:(id)arg1 rate:(id)arg2;
- (id)speakingContent;
- (id)speakingContentTokenRanges;
- (long long)speakingContext;
- (float)speechRate;
- (id)speechSequenceItems;
- (id)speechSynthesizer;
- (void)speechSynthesizer:(id)arg1 didCancelSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didContinueSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didFinishSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didPauseSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didStartSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 willSpeakRangeOfSpeechString:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 utterance:(id)arg3;
- (bool)spellOutContent;
- (bool)startSpeakingWithPreferredLanguage:(id)arg1 delayBeforeStart:(double)arg2 error:(id*)arg3;
- (bool)startSpeakingWithPreferredLanguage:(id)arg1 error:(id*)arg2;
- (bool)stopSpeaking:(id*)arg1;
- (bool)supportsAccurateWordCallbacks;

@end
