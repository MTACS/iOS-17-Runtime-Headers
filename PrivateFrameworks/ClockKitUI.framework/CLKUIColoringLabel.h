
@interface CLKUIColoringLabel : CLKUILegibilityLabel <CLKUIColoringView, CLKUILabel, CLKUITimeTravelState> {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _cachedOpticalEdgeInsets;
    bool  _cachedOpticalEdgeInsetsIsValid;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSingleLineSize;
    bool  _cachedSizeIsValid;
    _CLKUIColorManager * _colorManager;
    CLKDevice * _device;
    <CLKMonochromeFilterProvider> * _filterProvider;
    CLKFont * _font;
    bool  _inTimeTravel;
    bool  _isTextTruncated;
    double  _maxWidth;
    bool  _monochromeSnapshot;
    CLKFont * _monospacedDigitsFont;
    id /* block */  _needsResizeHandler;
    id /* block */  _nowProvider;
    unsigned long long  _options;
    NSAttributedString * _originalString;
    UIColor * _overrideColor;
    NSParagraphStyle * _paragraphStyle;
    CLKFont * _preTimeTravelFont;
    double  _previousFraction;
    CLKFont * _smallCapsBaseFont;
    UIView * _snapshot;
    bool  _textDefinesTruncation;
    CLKTextProvider * _textProvider;
    bool  _textSetExternally;
    double  _tracking;
    long long  _twoToneStyleInMonochrome;
    NSNumber * _updateToken;
    bool  _updatedAfterTimeTravelStateChange;
    bool  _uppercase;
    bool  _usesTextProviderSize;
    bool  _usesTextProviderTintColoring;
}

@property (nonatomic, readonly) double _lastLineBaseline;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cachedOpticalEdgeInsets;
@property (nonatomic) bool cachedOpticalEdgeInsetsIsValid;
@property (nonatomic) struct CGSize { double x1; double x2; } cachedSingleLineSize;
@property (nonatomic) bool cachedSizeIsValid;
@property (nonatomic, retain) UIColor *color;
@property (nonatomic, readonly) UIColor *contentColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) <CLKMonochromeFilterProvider> *filterProvider;
@property (nonatomic, retain) CLKFont *font;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inTimeTravel;
@property (nonatomic, readonly) bool isTextTruncated;
@property (nonatomic) double maxWidth;
@property (nonatomic, retain) CLKFont *monospacedDigitsFont;
@property (nonatomic, copy) id /* block */ needsResizeHandler;
@property (nonatomic, copy) id /* block */ nowProvider;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } opticalInsets;
@property (nonatomic, readonly) unsigned long long options;
@property (nonatomic, retain) UIColor *overrideColor;
@property (nonatomic, copy) NSParagraphStyle *paragraphStyle;
@property (nonatomic, retain) CLKFont *smallCapsBaseFont;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, readonly) bool textDefinesTruncation;
@property (nonatomic, retain) CLKTextProvider *textProvider;
@property (nonatomic, retain) CLKFont *textProviderFont;
@property (nonatomic, retain) CLKFont *textProviderSmallCapsBaseFont;
@property (nonatomic) double tracking;
@property (nonatomic) long long twoToneStyleInMonochrome;
@property (nonatomic) bool uppercase;
@property (nonatomic) bool usesLegibility;
@property (nonatomic) bool usesTextProviderSize;
@property (nonatomic) bool usesTextProviderTintColoring;

+ (id)labelWithOptions:(unsigned long long)arg1;

- (void).cxx_destruct;
- (double)_firstLineBaseline;
- (id)_fontWithMonospaceNumbers:(id)arg1;
- (double)_lastLineBaseline;
- (void)_requeryTextProviderAndNotify:(bool)arg1;
- (void)_setAnimationAlpha:(double)arg1;
- (void)_setUpSnapshot;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (void)_transitionTwoToneLabelToMonochromeWithFraction:(double)arg1;
- (void)_updateDynamicTracking;
- (void)_updateTwoToneLabelMonochromeColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cachedOpticalEdgeInsets;
- (bool)cachedOpticalEdgeInsetsIsValid;
- (struct CGSize { double x1; double x2; })cachedSingleLineSize;
- (bool)cachedSizeIsValid;
- (id)color;
- (void)editingDidEnd;
- (id)filterProvider;
- (id)font;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (bool)inTimeTravel;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (void)invalidateCachedSize;
- (bool)isTextTruncated;
- (double)maxWidth;
- (double)minimumWidth;
- (double)minimumWithFont:(id)arg1;
- (double)minimumWithFont:(id)arg1 smallCapsBaseFont:(id)arg2;
- (id)monospacedDigitsFont;
- (id /* block */)needsResizeHandler;
- (id /* block */)nowProvider;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })opticalInsets;
- (unsigned long long)options;
- (id)overrideColor;
- (id)paragraphStyle;
- (void)setAttributedText:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCachedOpticalEdgeInsetsIsValid:(bool)arg1;
- (void)setCachedSingleLineSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCachedSizeIsValid:(bool)arg1;
- (void)setColor:(id)arg1;
- (void)setFilterProvider:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setInTimeTravel:(bool)arg1;
- (void)setMaxWidth:(double)arg1;
- (void)setMonospacedDigitsFont:(id)arg1;
- (void)setNeedsResizeHandler:(id /* block */)arg1;
- (void)setNowProvider:(id /* block */)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)setOverrideColor:(id)arg1;
- (void)setParagraphStyle:(id)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setSmallCapsBaseFont:(id)arg1;
- (void)setText:(id)arg1;
- (void)setTextProvider:(id)arg1;
- (void)setTextProviderFont:(id)arg1;
- (void)setTextProviderSmallCapsBaseFont:(id)arg1;
- (void)setTracking:(double)arg1;
- (void)setTwoToneStyleInMonochrome:(long long)arg1;
- (void)setUppercase:(bool)arg1;
- (void)setUsesLegibility:(bool)arg1;
- (void)setUsesTextProviderSize:(bool)arg1;
- (void)setUsesTextProviderTintColoring:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)sizeToFit;
- (id)smallCapsBaseFont;
- (bool)textDefinesTruncation;
- (id)textProvider;
- (id)textProviderFont;
- (id)textProviderSmallCapsBaseFont;
- (double)tracking;
- (void)traitCollectionDidChange:(id)arg1;
- (void)transitionToMonochromeWithFraction:(double)arg1 style:(long long)arg2;
- (long long)twoToneStyleInMonochrome;
- (void)updateMonochromeColorWithStyle:(long long)arg1;
- (bool)uppercase;
- (bool)usesLegibility:(bool)arg1;
- (bool)usesTextProviderSize;
- (bool)usesTextProviderTintColoring;
- (double)widthForMaxWidth:(double)arg1;
- (double)widthForMaxWidth:(double)arg1 withFont:(id)arg2;
- (double)widthForMaxWidth:(double)arg1 withFont:(id)arg2 smallCapsBaseFont:(id)arg3;

@end
