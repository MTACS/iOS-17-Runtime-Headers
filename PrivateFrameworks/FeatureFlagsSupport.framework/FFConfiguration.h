
@interface FFConfiguration : NSObject {
    NSMutableSet * _domains;
    <FFFileReader> * _filereader;
    <FFFileWriter> * _filewriter;
    <FFParseErrorReporter> * _parseerrorreporter;
    FFPlistParser * _plistparser;
    NSMutableArray * _profilePayloads;
    <FFSafeModeChecker> * _safemodechecker;
    NSMutableDictionary * configByLevelIndex;
    NSMutableDictionary * definedFeatureGroups;
    NSMutableDictionary * definedFeatureSets;
    NSMutableSet * disclosuresByLevelIndex;
    NSMutableDictionary * enabledFeatureSetsAtLevelIndexByGroup;
    NSMutableSet * enabledFeatureSetsByLevelIndex;
    NSMutableDictionary * featureSetsMetaByLevelIndex;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  lock;
    NSMutableDictionary * metaByLevelIndex;
    NSArray * searchPaths;
    NSMutableArray * subscriptionsByLevelIndex;
    NSMutableDictionary * subscriptionsMetaByLevelIndex;
}

@property (nonatomic, readonly) NSSet *domains;
@property (nonatomic, retain) <FFFileReader> *filereader;
@property (nonatomic, retain) <FFFileWriter> *filewriter;
@property (nonatomic, retain) <FFParseErrorReporter> *parseerrorreporter;
@property (nonatomic, retain) FFPlistParser *plistparser;
@property (nonatomic, retain) NSMutableArray *profilePayloads;
@property (nonatomic, retain) <FFSafeModeChecker> *safemodechecker;

+ (id)_configurationForTestingWithFileReader:(id)arg1 fileWriter:(id)arg2 parseErrorReporter:(id)arg3 safeModeChecker:(id)arg4;
+ (id)configurationForProfileManagement;
+ (id)configurationForTestingWithFileReader:(id)arg1;
+ (id)configurationForTestingWithFileReader:(id)arg1 fileWriter:(id)arg2;
+ (id)configurationForTestingWithFileReader:(id)arg1 parseErrorReporter:(id)arg2;
+ (id)configurationForTestingWithFileReader:(id)arg1 parseErrorReporter:(id)arg2 safeModeChecker:(id)arg3;
+ (id)configurationForTestingWithFileWriter:(id)arg1;
+ (bool)isValidDisclosureName:(id)arg1;
+ (bool)isValidName:(id)arg1;
+ (id)shared;

- (void).cxx_destruct;
- (void)_enableFeatureSetAlreadyLocked:(id)arg1 atLevelIndex:(unsigned long long)arg2;
- (long long)_resolvedValueForFeatureSet:(id)arg1;
- (void)_unsetFeatureSetAlreadyLocked:(id)arg1 atLevelIndex:(unsigned long long)arg2;
- (long long)_valueForFeatureSet:(id)arg1 atLevel:(long long)arg2;
- (void)addDisclosure:(id)arg1 atLevel:(long long)arg2;
- (void)addDisclosureAlreadyLocked:(id)arg1 atLevelIndex:(unsigned long long)arg2;
- (void)addFeaturesForDomain:(id)arg1 pathIndex:(int)arg2 fromURL:(id)arg3;
- (bool)addProfilePayload:(id)arg1 error:(id*)arg2;
- (void)addSubscription:(id)arg1 atLevel:(long long)arg2;
- (void)addSubscriptionAlreadyLocked:(id)arg1 atLevelIndex:(unsigned long long)arg2;
- (id)allFeatureGroups;
- (id)allSubscriptionsAtLevel:(long long)arg1;
- (id)attributesForFeatureGroup:(id)arg1;
- (void)clearCachedData;
- (bool)commitProfilePayloadsAndReturnError:(id*)arg1;
- (bool)commitUpdates:(id*)arg1;
- (void)createMutableDomainConfig:(id)arg1 levelIndex:(unsigned long long)arg2;
- (id)currentDisclosures;
- (id)currentDisclosuresAtLevel:(long long)arg1;
- (id)currentDisclosuresAtLevelIndex:(unsigned long long)arg1;
- (id)defaultStateForFeature:(id)arg1 domain:(id)arg2;
- (id)definedFeatureGroupsFilteredByCurrentDisclosures;
- (id)definedFeatureSetsFilteredByCurrentDisclosures;
- (void)disableFeature:(id)arg1 domain:(id)arg2 level:(long long)arg3;
- (void)disableFeature:(id)arg1 domain:(id)arg2 levelIndex:(unsigned long long)arg3;
- (void)disableFeaturesMatchingAttribute:(id)arg1 level:(long long)arg2;
- (id)disclosureFileURLForLevelIndex:(unsigned long long)arg1 pathIndex:(int)arg2;
- (id)disclosureForFeature:(id)arg1 domain:(id)arg2;
- (id)disclosureForFeatureGroup:(id)arg1;
- (id)domains;
- (id)effectiveStateForFeature:(id)arg1 domain:(id)arg2 levelIndex:(unsigned long long)arg3;
- (void)enableFeature:(id)arg1 domain:(id)arg2 level:(long long)arg3;
- (void)enableFeature:(id)arg1 domain:(id)arg2 levelIndex:(unsigned long long)arg3;
- (void)enableFeatureSet:(id)arg1 inGroup:(id)arg2 atLevel:(long long)arg3;
- (void)enableFeaturesMatchingAttribute:(id)arg1 level:(long long)arg2;
- (id)featureFlagsInSet:(id)arg1 inGroup:(id)arg2;
- (id)featureSetsFileURLForLevelIndex:(unsigned long long)arg1;
- (id)featureSetsInGroup:(id)arg1;
- (id)featuresForDomain:(id)arg1;
- (id)featuresForDomainAlreadyLocked:(id)arg1;
- (id)fileURLForDomain:(id)arg1 pathIndex:(int)arg2;
- (id)fileURLForLevelIndex:(unsigned long long)arg1 pathIndex:(int)arg2;
- (id)filereader;
- (id)filewriter;
- (id)initPrivate;
- (id)initPrivateForBootTask;
- (id)internalDisclosureFileURLForLevelIndex:(unsigned long long)arg1;
- (void)invalidateCache;
- (bool)isFeatureHidden:(id)arg1 domain:(id)arg2;
- (bool)isSafeMode;
- (bool)isValidDisclosureName:(id)arg1;
- (bool)isValidName:(id)arg1;
- (void)loadAllData;
- (void)loadAllLevelsForDomain:(id)arg1;
- (void)loadCombinedDataForLevelIndex:(unsigned long long)arg1;
- (void)loadDomain:(id)arg1 levelIndex:(unsigned long long)arg2;
- (void)loadFeatureSetDataForLevelIndex:(unsigned long long)arg1;
- (void)loadFeatureSetDefinitions;
- (void)loadFeatureSetDefinitionsNamed:(id)arg1 fromURL:(id)arg2;
- (void)loadSubscriptionDataForLevelIndex:(unsigned long long)arg1;
- (id)makeFeatureDictionaryFrom:(id)arg1 forDomain:(id)arg2 atDomainLevel:(bool)arg3 reportableFilename:(id)arg4;
- (id)mutableDisclosureSetAtLevelIndex:(unsigned long long)arg1;
- (id)parseSubscriptionsDictionary:(id)arg1;
- (id)parseerrorreporter;
- (bool)phaseShouldBeEnabledByDefault:(id)arg1;
- (id)plistparser;
- (void)populateDictionary:(id)arg1 withFeatures:(id)arg2;
- (void)prepareToAddProfilePayloads;
- (id)profilePayloads;
- (void)recalculateFeatureSetEffectsAt:(unsigned long long)arg1;
- (void)recalculateSubscriptionEffectsAt:(unsigned long long)arg1;
- (void)removeAllDisclosuresAtLevelIndex:(unsigned long long)arg1;
- (void)removeAllFeatureSetDataAtLevelIndex:(unsigned long long)arg1;
- (void)removeAllSubscriptionsAtLevelIndex:(unsigned long long)arg1;
- (void)removeDisclosure:(id)arg1 atLevel:(long long)arg2;
- (void)removeDisclosure:(id)arg1 atLevelIndex:(unsigned long long)arg2;
- (void)removeSubscription:(id)arg1 atLevel:(long long)arg2;
- (void)reportParseError:(id)arg1 severity:(id)arg2 whileParsingKey:(id)arg3 inContext:(id)arg4 inFile:(id)arg5;
- (bool)reset:(id*)arg1;
- (bool)resetDomain:(id)arg1 error:(id*)arg2;
- (bool)resolvedStateForDisclosure:(id)arg1;
- (id)resolvedStateForFeature:(id)arg1 domain:(id)arg2;
- (long long)resolvedValueForFeatureSet:(id)arg1 inGroup:(id)arg2;
- (id)safemodechecker;
- (void)setFeaturesMatchingAttribute:(id)arg1 levelIndex:(unsigned long long)arg2 value:(long long)arg3;
- (void)setFilereader:(id)arg1;
- (void)setFilewriter:(id)arg1;
- (void)setParseerrorreporter:(id)arg1;
- (void)setPlistparser:(id)arg1;
- (void)setProfilePayloads:(id)arg1;
- (void)setSafemodechecker:(id)arg1;
- (void)setValue:(long long)arg1 feature:(id)arg2 domain:(id)arg3 levelIndex:(unsigned long long)arg4;
- (unsigned int)sortValueForPhase:(id)arg1;
- (id)stateForFeature:(id)arg1 domain:(id)arg2;
- (id)stateForFeature:(id)arg1 domain:(id)arg2 level:(long long)arg3;
- (id)subscriptionsFileURLForLevelIndex:(unsigned long long)arg1;
- (void)unsetFeature:(id)arg1 domain:(id)arg2 level:(long long)arg3;
- (void)unsetFeature:(id)arg1 domain:(id)arg2 levelIndex:(unsigned long long)arg3;
- (void)unsetFeatureSet:(id)arg1 inGroup:(id)arg2 atLevel:(long long)arg3;
- (void)unsetFeaturesMatchingAttribute:(id)arg1 level:(long long)arg2;
- (void)validateName:(id)arg1;
- (long long)valueForFeatureSet:(id)arg1 inGroup:(id)arg2 atLevel:(long long)arg3;
- (bool)writeCombinedUpdates:(id*)arg1;
- (bool)writeCombinedUpdatesAtLevelIndex:(unsigned long long)arg1 error:(id*)arg2;
- (bool)writeDisclosureUpdates:(id*)arg1;
- (bool)writeDisclosureUpdatesAtlevelIndex:(unsigned long long)arg1 error:(id*)arg2;
- (bool)writeDomainUpdates:(id*)arg1;
- (bool)writeFeatureSetUpdates:(id*)arg1;
- (bool)writeFeatureSetUpdatesAtLevelIndex:(unsigned long long)arg1 withError:(id*)arg2;
- (bool)writeSubscriptionUpdates:(id*)arg1;
- (bool)writeSubscriptionUpdatesAtLevelIndex:(unsigned long long)arg1 withError:(id*)arg2;

@end
