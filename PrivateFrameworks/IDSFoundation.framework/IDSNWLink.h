
@interface IDSNWLink : NSObject <IDSLink> {
    <IDSLinkDelegate> * _alternateDelegate;
    NSString * _cbuuid;
    NSIndexSet * _cellularInterfaceIndices;
    NSObject<OS_nw_listener> * _cellularListener;
    unsigned short  _cellularPort;
    NSMutableArray * _cellularPortList;
    unsigned char  _clientUUID;
    bool  _connectedToQR;
    <IDSLinkDelegate> * _delegate;
    NSString * _deviceUniqueID;
    bool  _disableP2P;
    bool  _disallowQUICPodForCellular;
    NSMutableDictionary * _interfaceIndexToNAT64LocalAddress;
    bool  _isDefaultPairedDevice;
    bool  _isInvalidated;
    NSObject<OS_nw_listener> * _listener;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    struct _opaque_pthread_t { long long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[8176]; } * _nwtid;
    unsigned short  _port;
    NSMutableDictionary * _portToExtraListener;
    NSMutableDictionary * _queuedPeelOffs;
    NSMutableArray * _recentQRServerList;
    NSMutableSet * _rootConnections;
    bool  _shouldFailConnectionsRandomly;
    unsigned long long  _state;
    NSMutableDictionary * _tokenToChildConnectionEvaluator;
    NSMutableDictionary * _tokenToNWLinkConnection;
    NSMutableArray * _tokensForUDPConnectionInProgress;
    bool  _transactionIDMismatchReported;
    bool  _useDefaultInterfaceOnly;
    bool  _wantsCellular;
    bool  _wantsWiFi;
    bool  _wifiAssistEnabled;
}

@property <IDSLinkDelegate> *alternateDelegate;
@property (retain) NSString *cbuuid;
@property (nonatomic, retain) NSIndexSet *cellularInterfaceIndices;
@property (nonatomic) unsigned short cellularPort;
@property (nonatomic) bool connectedToQR;
@property (readonly, copy) NSString *debugDescription;
@property <IDSLinkDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (retain) NSString *deviceUniqueID;
@property (nonatomic) bool disableP2P;
@property (nonatomic) bool disallowQUICPodForCellular;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long headerOverhead;
@property (getter=linkTypeString, readonly) NSString *linkTypeString;
@property (nonatomic) unsigned short port;
@property (readonly) unsigned long long state;
@property (readonly) Class superclass;
@property (nonatomic) bool useDefaultInterfaceOnly;
@property (nonatomic) bool wifiAssistEnabled;

+ (id)derivePSKFromSessionKey:(id)arg1 salt:(id)arg2;
+ (bool)isSkywalkDemuxSupported;

- (void).cxx_destruct;
- (unsigned int)_NAT64LocalAddressForInterfaceIndex:(unsigned int)arg1;
- (id)_NWLinkConnectionForToken:(id)arg1;
- (void)_addChildConnectionEvaluator:(id)arg1 token:(id)arg2;
- (void)_addExtraListener:(id)arg1 port:(unsigned short)arg2 isCellular:(bool)arg3;
- (void)_addInterfaceIndex:(unsigned int)arg1 NAT64LocalAddress:(unsigned int)arg2;
- (void)_addNWLinkConnection:(id)arg1 token:(id)arg2;
- (void)_addToRecentQRServerList:(id)arg1;
- (void)_addUDPConnectionInProgress:(id)arg1;
- (void)_cancelNWLinkConnection:(id)arg1 remove:(bool)arg2;
- (void)_cancelNWLinkConnectionWithToken:(id)arg1 removeNWLinkConnectionNow:(bool)arg2;
- (id)_childConnectionEvaluatorForToken:(id)arg1;
- (void)_cleanup:(bool)arg1;
- (id)_copyChildConnectionIDFor:(id)arg1 clientUniquePID:(unsigned long long)arg2 sessionID:(id)arg3 isRelay:(bool)arg4 isCellular:(bool)arg5 isQUICPod:(bool)arg6;
- (bool)_createChannelDataConnection:(id)arg1;
- (bool)_createChannelDataConnection:(id)arg1 retryIndex:(unsigned char)arg2;
- (void)_createChannelDataConnectionForH2:(id)arg1;
- (void)_createChannelDataConnectionForH2:(id)arg1 retryIndex:(unsigned char)arg2;
- (void)_createIndicationConnection:(id)arg1;
- (void)_createIndicationConnection:(id)arg1 retryIndex:(unsigned char)arg2;
- (id)_createNetworkInterfaceArrayWithIPVersion:(unsigned long long)arg1 wantsWiFi:(bool)arg2 wantsCellular:(bool)arg3;
- (id)_createNewListenerWithLocalPort:(unsigned short*)arg1;
- (id)_createP2PQUICPodConnectionWithType:(unsigned int)arg1 udpNWLinkConnection:(id)arg2 clientQUICConnectionID:(id)arg3 serverQUICConnectionID:(id)arg4 clientQUICConnectionIDNumber:(unsigned int)arg5 clientSecret:(id)arg6 serverSecret:(id)arg7 isServer:(bool)arg8 completionHandler:(id /* block */)arg9;
- (id)_createQUICPodConnectionWithType:(unsigned int)arg1 quicNWLinkConnection:(id)arg2 clientQUICConnectionID:(id)arg3 clientQUICConnectionIDAsNumber:(unsigned int)arg4 serverQUICConnectionID:(id)arg5;
- (bool)_createReliableUnicastConnection:(id)arg1 localQUICConnectionID:(id)arg2;
- (void)_createUDPConnectionForNWLinkConnection:(id)arg1 readyHandler:(id /* block */)arg2;
- (id)_dictionaryFromPSKParameters:(id)arg1;
- (bool)_doesUDPConnectionInProgressExist:(id)arg1;
- (id)_extraListenerForPort:(unsigned short)arg1;
- (void)_failConnectionsRandomly;
- (void)_failNWLinkConnection:(id)arg1;
- (bool)_findExistingCollidingQRConnection:(id)arg1 remoteEndpoint:(id)arg2 sessionID:(id)arg3 localEndpointToUse:(id*)arg4;
- (id)_findListenerWithLocalEndpoint:(id)arg1;
- (id)_findNewLocalEndpointForQRConnection:(id)arg1;
- (void)_handleIncomingIndicationMessage:(id)arg1;
- (void)_handleIncomingMessage:(id)arg1 keepWaiting:(bool)arg2;
- (bool)_isLocalEndpointCellular:(id)arg1;
- (void)_peelOffQUICConnection:(id)arg1 type:(unsigned long long)arg2 readyHandler:(id /* block */)arg3;
- (void)_peelOffQUICConnection:(id)arg1 type:(unsigned long long)arg2 readyHandler:(id /* block */)arg3 cancelHandler:(id /* block */)arg4;
- (void)_removeExtraListener:(unsigned short)arg1;
- (void)_removeNWLinkConnection:(id)arg1 token:(id)arg2;
- (void)_removeUDPConnectionInProgress:(id)arg1;
- (void)_scheduleRetryConnectionIfNeeded:(id)arg1 baseConnection:(id)arg2 kind:(const char *)arg3 retryIndex:(unsigned char)arg4 retryBlock:(id /* block */)arg5;
- (unsigned long long)_sendData:(id)arg1 withPacketBuffer:(struct { char *x1; unsigned long long x2; long long x3; long long x4; unsigned int x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; bool x14; bool x15; bool x16; unsigned int x17; struct sockaddr_storage { unsigned char x_18_1_1; unsigned char x_18_1_2; BOOL x_18_1_3[6]; long long x_18_1_4; BOOL x_18_1_5[112]; } x18; struct sockaddr_storage { unsigned char x_19_1_1; unsigned char x_19_1_2; BOOL x_19_1_3[6]; long long x_19_1_4; BOOL x_19_1_5[112]; } x19; struct sockaddr_storage { unsigned char x_20_1_1; unsigned char x_20_1_2; BOOL x_20_1_3[6]; long long x_20_1_4; BOOL x_20_1_5[112]; } x20; unsigned short x21; unsigned char x22; int x23; struct { char *x_24_1_1; unsigned short x_24_1_2; int x_24_1_3; unsigned short x_24_1_4[12]; unsigned long long x_24_1_5; unsigned char x_24_1_6; unsigned short x_24_1_7; unsigned char x_24_1_8; bool x_24_1_9; bool x_24_1_10; unsigned short x_24_1_11; struct { unsigned short x_12_2_1; unsigned short x_12_2_2; unsigned short x_12_2_3; unsigned short x_12_2_4; unsigned short x_12_2_5; } x_24_1_12; bool x_24_1_13; bool x_24_1_14; int x_24_1_15; unsigned short x_24_1_16[4]; unsigned char x_24_1_17; bool x_24_1_18; bool x_24_1_19; bool x_24_1_20; unsigned int x_24_1_21; } x24[8]; }*)arg2 NWLinkConnection:(id)arg3;
- (bool)_setParameters:(id)arg1 NWLinkConnection:(id)arg2 sharePortWithListener:(bool)arg3 isTCP:(bool)arg4;
- (void)_setWiFiAssistStateForCellularLink:(id)arg1 isEnabled:(bool)arg2;
- (bool)_shouldAllowP2PConnectionTo:(id)arg1 anotherRemoteEndpoint:(id)arg2;
- (bool)_shouldFail;
- (void)_tryReadH2Header:(id)arg1;
- (id)alternateDelegate;
- (id)cbuuid;
- (id)cellularInterfaceIndices;
- (unsigned short)cellularPort;
- (void)cleanup;
- (bool)connect:(int)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 clientUUID:(unsigned char)arg4 sessionID:(id)arg5 relaySessionToken:(id)arg6 relaySessionKey:(id)arg7 randomSaltBlock:(id /* block */)arg8 pskTransportParameters:(id)arg9 pskH3Settings:(id)arg10 newLocalPort:(unsigned short*)arg11 disconnectAfterUse:(bool)arg12 holdUntilFirstPacketReady:(bool)arg13 readyHandler:(id /* block */)arg14;
- (bool)connectTCP:(int)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 clientUUID:(unsigned char)arg4 sessionID:(id)arg5 relaySessionToken:(id)arg6 relaySessionKey:(id)arg7 randomSaltBlock:(id /* block */)arg8 newLocalPort:(unsigned short*)arg9 disconnectAfterUse:(bool)arg10 readyHandler:(id /* block */)arg11;
- (bool)connectedToQR;
- (id)connectionInfoForLocalAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg1 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 clientUniquePID:(unsigned long long)arg3 sessionID:(id)arg4 type:(unsigned long long)arg5 isRelay:(bool)arg6 isCellular:(bool)arg7;
- (id)copyCurrentNetworkInterfaces;
- (id)copyLinkStatsDict;
- (bool)createQUICPodP2PConnectionsForSession:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 quicConnectionIDs:(id)arg4 negotiatedKeys:(id)arg5 channelNumber:(unsigned short)arg6 completionHandler:(id /* block */)arg7;
- (bool)createQUICPodQRConnectionsForSession:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 quicConnectionIDs:(id)arg4 channelNumber:(unsigned short)arg5;
- (void)dealloc;
- (id)delegate;
- (struct { unsigned char x1[5]; unsigned char x2[5]; })demuxPatternForQPodConnectionWithID:(unsigned int)arg1 forNWLinkConnection:(id)arg2;
- (id)deviceUniqueID;
- (bool)disableP2P;
- (bool)disallowQUICPodForCellular;
- (void)disconnectP2PWithSessionID:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3;
- (void)disconnectWithSessionID:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 waitTime:(double)arg4 final:(bool)arg5;
- (id)generateLinkReport:(double)arg1 isCurrentLink:(bool)arg2;
- (bool)getEffectiveSourceAddress:(struct sockaddr_storage { unsigned char x1; unsigned char x2; BOOL x3[6]; long long x4; BOOL x5[112]; }*)arg1 fromSourceAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 effectiveDestinationAddress:(struct sockaddr_storage { unsigned char x1; unsigned char x2; BOOL x3[6]; long long x4; BOOL x5[112]; }*)arg3 fromDestinationAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg4 sessionID:(id)arg5 isQRConnection:(bool)arg6;
- (bool)hasListener;
- (unsigned long long)headerOverhead;
- (id)initWithDeviceUniqueID:(id)arg1 cbuuid:(id)arg2;
- (void)invalidate;
- (id)linkTypeString;
- (void)logConnectionSubtree:(id)arg1 indentation:(id)arg2;
- (void)logConnectionTree;
- (id)newListenerWithClientUUID:(unsigned char)arg1 wantsWiFi:(bool)arg2 wantsCellular:(bool)arg3;
- (void)peelOffReliableUnicastConnectionforLocalAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg1 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 sessionID:(id)arg3 localQUICConnectionID:(id)arg4;
- (unsigned short)port;
- (id)protocolStackDescriptionFor:(id)arg1;
- (void)removeChildConnectionEvaluatorForSessionID:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 isRelay:(bool)arg4;
- (unsigned long long)sendPacketBuffer:(struct { char *x1; unsigned long long x2; long long x3; long long x4; unsigned int x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; bool x14; bool x15; bool x16; unsigned int x17; struct sockaddr_storage { unsigned char x_18_1_1; unsigned char x_18_1_2; BOOL x_18_1_3[6]; long long x_18_1_4; BOOL x_18_1_5[112]; } x18; struct sockaddr_storage { unsigned char x_19_1_1; unsigned char x_19_1_2; BOOL x_19_1_3[6]; long long x_19_1_4; BOOL x_19_1_5[112]; } x19; struct sockaddr_storage { unsigned char x_20_1_1; unsigned char x_20_1_2; BOOL x_20_1_3[6]; long long x_20_1_4; BOOL x_20_1_5[112]; } x20; unsigned short x21; unsigned char x22; int x23; struct { char *x_24_1_1; unsigned short x_24_1_2; int x_24_1_3; unsigned short x_24_1_4[12]; unsigned long long x_24_1_5; unsigned char x_24_1_6; unsigned short x_24_1_7; unsigned char x_24_1_8; bool x_24_1_9; bool x_24_1_10; unsigned short x_24_1_11; struct { unsigned short x_12_2_1; unsigned short x_12_2_2; unsigned short x_12_2_3; unsigned short x_12_2_4; unsigned short x_12_2_5; } x_24_1_12; bool x_24_1_13; bool x_24_1_14; int x_24_1_15; unsigned short x_24_1_16[4]; unsigned char x_24_1_17; bool x_24_1_18; bool x_24_1_19; bool x_24_1_20; unsigned int x_24_1_21; } x24[8]; }*)arg1 toDeviceUniqueID:(id)arg2 cbuuid:(id)arg3;
- (unsigned long long)sendPacketBufferArray:(struct { /* ? */ }**)arg1 arraySize:(int)arg2 toDeviceUniqueID:(id)arg3 cbuuid:(id)arg4;
- (void)setAlternateDelegate:(id)arg1;
- (void)setCbuuid:(id)arg1;
- (void)setCellularInterfaceIndices:(id)arg1;
- (void)setCellularPort:(unsigned short)arg1;
- (void)setConnectedToQR:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceUniqueID:(id)arg1;
- (void)setDisableP2P:(bool)arg1;
- (void)setDisallowQUICPodForCellular:(bool)arg1;
- (void)setPort:(unsigned short)arg1;
- (void)setUseDefaultInterfaceOnly:(bool)arg1;
- (void)setWiFiAssistState:(bool)arg1;
- (void)setWifiAssistEnabled:(bool)arg1;
- (unsigned long long)state;
- (bool)useDefaultInterfaceOnly;
- (bool)wifiAssistEnabled;

@end
