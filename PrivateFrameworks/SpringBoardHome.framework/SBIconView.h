
@interface SBIconView : UIView <SBCloseBoxViewDelegate, SBHFocusProxyable, SBHIconViewConfigurationInteractionDelegate, SBIconAccessoryInfoProvider, SBIconObserver, SBIconViewCustomImageViewControllerObserving, SBReusableView, SBSHardwareButtonEventConsuming, UIContextMenuInteractionDelegate, UIDragInteractionDelegate, UIDropInteractionDelegate, UIGestureRecognizerDelegate, UIPointerInteractionDelegate, _UISettingsKeyObserver> {
    UIColor * _accessibilityTintColor;
    UIView<SBIconAccessoryView> * _accessoryView;
    UIViewPropertyAnimator * _accessoryViewAnimator;
    UIPointerInteraction * _accessoryViewCursorInteraction;
    NSCountedSet * _activePointerRegions;
    unsigned int  _allIconElementsButLabelHidden;
    unsigned int  _allowCloseBox;
    unsigned int  _allowJitter;
    unsigned int  _allowsAccessoryView;
    unsigned int  _allowsLabelArea;
    unsigned int  _allowsPassthroughHitTesting;
    unsigned int  _allowsProgressState;
    NSArray * _applicationShortcutItems;
    struct SBIconApproximateLayoutPosition { 
        unsigned long long horizontal; 
        unsigned long long vertical; 
    }  _approximateLayoutPosition;
    SBCloseBoxView * _closeBox;
    UIViewPropertyAnimator * _closeBoxAnimator;
    UIPointerInteraction * _closeBoxCursorInteraction;
    UIContextMenuInteraction * _contextMenuInteraction;
    NSHashTable * _contextMenuInteractionConfigurations;
    <SBIconContinuityInfo> * _continuityInfo;
    SBIconImageCrossfadeView * _crossfadeView;
    <SBHIconViewConfigurationInteraction> * _currentConfigurationInteraction;
    <SBHIconViewConfigurationInteraction> * _currentStackConfigurationInteraction;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _cursorHitTestPadding;
    UIViewController<SBIconViewCustomImageViewControlling> * _customIconImageViewController;
    unsigned long long  _customIconImageViewControllerPriority;
    unsigned int  _customIconImageViewHitTestingDisabled;
    unsigned long long  _debugIconIndex;
    <SBIconViewDelegate> * _delegate;
    unsigned int  _disableContextMenuInteraction;
    unsigned int  _disallowCursorInteraction;
    unsigned int  _disallowsBlockedForScreenTimeExpiration;
    unsigned int  _discardClose;
    NSHashTable * _dismissingContextMenuInteractionConfigurations;
    long long  _displayedLabelAccessoryType;
    unsigned int  _displaysIconStatusInLabel;
    UIDragInteraction * _dragInteraction;
    unsigned int  _drawsLabel;
    UIView * _dropGlow;
    UIDropInteraction * _dropInteraction;
    NSHashTable * _droppingAssertions;
    NSArray * _droppingURLs;
    double  _editingAnimationStrength;
    UILongPressGestureRecognizer * _editingModeGestureRecognizer;
    bool  _enabled;
    NSArray * _fetchedApplicationShortcutItems;
    SBIconFocusEffectPlatterView * _focusEffectPlatterView;
    UIView<UIFocusItem> * _focusProxyView;
    SBFolderIcon * _folderIcon;
    UIView * _folderIconBackgroundView;
    unsigned int  _folderIconFrozen;
    SBFolderIconImageCache * _folderIconImageCache;
    NSHashTable * _forbidAccessoryUpdatesAssertions;
    NSCountedSet * _forbidEditingModeReasons;
    unsigned int  _forcingIconContentScalingEnabled;
    unsigned int  _hasSetIconImageInfo;
    unsigned int  _hideLabel;
    unsigned int  _hideLabelAccessoryView;
    unsigned int  _highlighted;
    <BSInvalidatable> * _homeButtonPressConsumingAssertion;
    SBIcon * _icon;
    double  _iconAccessoryAlpha;
    double  _iconContentScale;
    unsigned int  _iconContentScalingEnabled;
    NSObject<OS_os_activity> * _iconContextMenuActivity;
    struct os_activity_scope_state_s { 
        unsigned long long opaque[2]; 
    }  _iconContextMenuActivityState;
    SBHIconEditingSettings * _iconEditingSettings;
    double  _iconImageAlpha;
    SBHIconImageCache * _iconImageCache;
    struct SBIconImageInfo { 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
        double scale; 
        double continuousCornerRadius; 
    }  _iconImageInfo;
    bool  _iconImageSizeMatchesBoundsSize;
    SBIconImageView * _iconImageView;
    UILabel * _iconIndexLabel;
    double  _iconLabelAlpha;
    <SBIconLabelViewFactory> * _iconLabelViewFactory;
    NSString * _iconLocation;
    UIPointerInteraction * _iconViewCursorInteraction;
    unsigned int  _iconWasTappedWhenDisabled;
    unsigned int  _imageLoadingBehavior;
    unsigned int  _isDragLifted;
    unsigned int  _isDragging;
    unsigned int  _isEditing;
    unsigned int  _isFocused;
    unsigned int  _isGrabbed;
    unsigned int  _isJittering;
    unsigned int  _isOverlapping;
    UIView<SBIconLabelAccessoryView> * _labelAccessoryView;
    UIFont * _labelFont;
    unsigned int  _labelStyle;
    UIView<SBIconLabelView> * _labelView;
    bool  _lastContextMenuInteractionFailedToLoad;
    NSDate * _lastTouchDownDate;
    unsigned int  _launchDisabled;
    _UILegibilitySettings * _legibilitySettings;
    <UIDragSession> * _liftingDragSession;
    <SBIconListLayoutProvider> * _listLayoutProvider;
    NSHashTable * _observers;
    <SBIconViewActionDelegate> * _overrideActionDelegate;
    <NSCopying> * _overrideBadgeNumberOrString;
    unsigned int  _pauseReasons;
    bool  _paused;
    NSMutableArray * _performAfterContextMenuBlocks;
    unsigned int  _reallyHasPopover;
    SBHRecentsDocumentExtensionProvider * _recentsDocumentExtensionProvider;
    unsigned int  _refusesRecipientStatus;
    UIView * _scalingContainer;
    unsigned int  _showingAccessoryView;
    unsigned int  _showingCloseBox;
    unsigned int  _showsDropGlow;
    bool  _showsImageAndLabelDuringDrop;
    unsigned int  _showsSquareCorners;
    UIView * _snapshotContainerView;
    <SBIconViewSnapshotProviding> * _snapshotProvider;
    unsigned int  _startsDragMoreQuickly;
    unsigned int  _suppressesDisabledPresentation;
    UITapGestureRecognizer * _tapGestureRecognizer;
    UIView * _temporarySnapshotContainerViewForDragPreview;
    unsigned int  _touchDownInIcon;
    unsigned int  _userVisibilityStatus;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleImageRect;
    unsigned int  _wantsFocusProxyView;
}

@property (nonatomic, retain) UIColor *accessibilityTintColor;
@property (nonatomic, retain) UIViewPropertyAnimator *accessoryViewAnimator;
@property (nonatomic, readonly) UIPointerInteraction *accessoryViewCursorInteraction;
@property (nonatomic) bool allIconElementsButLabelHidden;
@property (nonatomic) bool allowsAccessoryView;
@property (nonatomic) bool allowsBlockedForScreenTimeExpiration;
@property (nonatomic) bool allowsCloseBox;
@property (nonatomic) bool allowsEditingAnimation;
@property (nonatomic, readonly) bool allowsLabelAccessoryView;
@property (nonatomic) bool allowsLabelArea;
@property (nonatomic) bool allowsPassthroughHitTesting;
@property (nonatomic) bool allowsProgressState;
@property (nonatomic, readonly) bool allowsTapWhileEditing;
@property (getter=isAnimatingScrolling, nonatomic, readonly) bool animatingScrolling;
@property (nonatomic, readonly, copy) NSString *applicationBundleIdentifierForShortcuts;
@property (nonatomic, readonly, copy) NSURL *applicationBundleURLForShortcuts;
@property (nonatomic, copy) NSArray *applicationShortcutItems;
@property (nonatomic) struct SBIconApproximateLayoutPosition { unsigned long long x1; unsigned long long x2; } approximateLayoutPosition;
@property (nonatomic, readonly, copy) NSString *backgroundViewGroupNameBase;
@property (nonatomic, readonly) double baselineOffsetFromBottom;
@property (nonatomic, readonly) bool canBecomeFocused;
@property (nonatomic, readonly) bool canBeginDrags;
@property (nonatomic, readonly) bool canShowAccessoryView;
@property (nonatomic, readonly) bool canShowCloseBox;
@property (nonatomic, readonly) unsigned long long centerVisibleMiniIconIndex;
@property (nonatomic, retain) UIViewPropertyAnimator *closeBoxAnimator;
@property (nonatomic, readonly) UIPointerInteraction *closeBoxCursorInteraction;
@property (nonatomic) unsigned long long configurationOptions;
@property (nonatomic, readonly) UIView *contentContainerView;
@property (nonatomic, readonly) UIContextMenuInteraction *contextMenuInteraction;
@property (nonatomic, retain) <SBIconContinuityInfo> *continuityInfo;
@property (nonatomic, readonly) SBIconContinuityItem *continuityItem;
@property (getter=isCrossfadingImageWithView, readonly) bool crossfadingImageWithView;
@property (nonatomic, readonly) long long currentAccessoryType;
@property (nonatomic, retain) <SBHIconViewConfigurationInteraction> *currentConfigurationInteraction;
@property (nonatomic, readonly) long long currentLabelAccessoryType;
@property (nonatomic, retain) <SBHIconViewConfigurationInteraction> *currentStackConfigurationInteraction;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cursorHitTestPadding;
@property (nonatomic, readonly) UIViewController<SBIconViewCustomImageViewControlling> *customIconImageViewController;
@property (nonatomic) unsigned long long customIconImageViewControllerPriority;
@property (getter=isCustomIconImageViewHitTestingDisabled, nonatomic) bool customIconImageViewHitTestingDisabled;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long debugIconIndex;
@property (nonatomic) <SBIconViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long displayedLabelAccessoryType;
@property (nonatomic) bool displaysIconStatusInLabel;
@property (nonatomic, readonly) UIDragInteraction *dragInteraction;
@property (nonatomic, readonly) double dragInteractionLiftDelay;
@property (nonatomic, readonly) bool dragsSupportSystemDragsByDefault;
@property (nonatomic, readonly) UIView *dropContainerView;
@property (nonatomic, readonly) UIDropInteraction *dropInteraction;
@property (getter=isDropping, nonatomic, readonly) bool dropping;
@property (getter=isEditing, nonatomic) bool editing;
@property (nonatomic) double editingAnimationStrength;
@property (nonatomic, readonly) UILongPressGestureRecognizer *editingModeGestureRecognizer;
@property (nonatomic, readonly, copy) NSArray *effectiveApplicationShortcutItems;
@property (nonatomic, readonly) double effectiveIconImageAlpha;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, readonly) Class expectedIconImageViewClass;
@property (nonatomic, copy) NSArray *fetchedApplicationShortcutItems;
@property (nonatomic, readonly) double firstLineBaseline;
@property (nonatomic, readonly) unsigned long long firstVisibleMiniIconIndex;
@property (nonatomic, readonly, copy) UIFocusEffect *focusEffect;
@property (nonatomic, readonly, copy) NSString *focusGroupIdentifier;
@property (nonatomic, readonly) long long focusGroupPriority;
@property (nonatomic, readonly) <UIFocusItemContainer> *focusItemContainer;
@property (nonatomic, readonly) UIView *focusProxyView;
@property (nonatomic) unsigned long long folderBackgroundStyle;
@property (nonatomic, retain) SBFolderIcon *folderIcon;
@property (nonatomic, retain) UIView *folderIconBackgroundView;
@property (getter=isFolderIconFrozen, nonatomic) bool folderIconFrozen;
@property (nonatomic, retain) SBFolderIconImageCache *folderIconImageCache;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (getter=isGrabbed, nonatomic) bool grabbed;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, retain) <BSInvalidatable> *homeButtonPressConsumingAssertion;
@property (nonatomic, retain) SBIcon *icon;
@property (nonatomic) double iconAccessoryAlpha;
@property (nonatomic) double iconContentScale;
@property (getter=isIconContentScalingEnabled, nonatomic) bool iconContentScalingEnabled;
@property (nonatomic) double iconImageAlpha;
@property (nonatomic, retain) SBHIconImageCache *iconImageCache;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } iconImageCenter;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } iconImageFrame;
@property (nonatomic) struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; } iconImageInfo;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconImageSize;
@property (nonatomic) bool iconImageSizeMatchesBoundsSize;
@property (nonatomic, readonly) UIImage *iconImageSnapshot;
@property (nonatomic, readonly) UIView *iconImageSnapshotView;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconImageVisibleSize;
@property (nonatomic) double iconLabelAlpha;
@property (nonatomic, retain) <SBIconLabelViewFactory> *iconLabelViewFactory;
@property (nonatomic, readonly) UIPointerInteraction *iconViewCursorInteraction;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconViewSize;
@property (nonatomic) unsigned long long imageLoadingBehavior;
@property (nonatomic, readonly) bool isCursorActive;
@property (nonatomic, readonly) bool isTransparentFocusItem;
@property (getter=isLabelAccessoryHidden, nonatomic) bool labelAccessoryHidden;
@property (nonatomic, readonly) double labelAccessoryTotalWidth;
@property (nonatomic, readonly) UIView *labelAccessoryView;
@property (nonatomic, retain) UIFont *labelFont;
@property (getter=isLabelHidden, nonatomic) bool labelHidden;
@property (nonatomic) long long labelStyle;
@property (nonatomic, readonly) UIView<SBIconLabelView> *labelView;
@property (nonatomic) bool lastContextMenuInteractionFailedToLoad;
@property (nonatomic, readonly) double lastLineBaseline;
@property (nonatomic, copy) NSDate *lastTouchDownDate;
@property (nonatomic, readonly) unsigned long long lastVisibleMiniIconIndex;
@property (nonatomic, retain) _UILegibilitySettings *legibilitySettings;
@property (nonatomic) <UIDragSession> *liftingDragSession;
@property (nonatomic, readonly) <SBIconListLayout> *listLayout;
@property (nonatomic, retain) <SBIconListLayoutProvider> *listLayoutProvider;
@property (nonatomic, copy) NSString *location;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maxLabelSize;
@property (getter=isOverlapping, nonatomic) bool overlapping;
@property (nonatomic) <SBIconViewActionDelegate> *overrideActionDelegate;
@property (nonatomic, copy) <NSCopying> *overrideBadgeNumberOrString;
@property (nonatomic, readonly) <UIFocusEnvironment> *parentFocusEnvironment;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic, readonly, copy) NSArray *preferredFocusEnvironments;
@property (nonatomic, readonly) UIView *preferredFocusedView;
@property (nonatomic, readonly) long long progressState;
@property (nonatomic) bool refusesRecipientStatus;
@property (nonatomic, readonly, copy) NSString *representedFolderIconLocation;
@property (nonatomic, readonly) bool shouldShowAccessoryView;
@property (nonatomic, readonly) bool shouldShowCloseBox;
@property (nonatomic, readonly) bool shouldShowLabelAccessoryView;
@property (nonatomic, readonly) bool shouldTapGestureRecognizeAlongsideDragInteractionGestures;
@property (getter=isShowingConfigurationCard, nonatomic, readonly) bool showingConfigurationCard;
@property (getter=isShowingContextMenu, nonatomic, readonly) bool showingContextMenu;
@property (getter=isShowingStackConfigurationCard, nonatomic, readonly) bool showingStackConfigurationCard;
@property (nonatomic, readonly) bool showsDropGlow;
@property (nonatomic) bool showsImageAndLabelDuringDrop;
@property (nonatomic) bool showsSquareCorners;
@property (nonatomic) bool startsDragMoreQuickly;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsConfigurationCard;
@property (nonatomic, readonly) bool supportsStackConfigurationCard;
@property (nonatomic, readonly) UITapGestureRecognizer *tapGestureRecognizer;
@property (getter=isTouchDownInIcon, nonatomic, readonly) bool touchDownInIcon;
@property (nonatomic) unsigned long long userVisibilityStatus;
@property (nonatomic, readonly) unsigned long long visibleMiniIconCount;
@property (nonatomic, readonly) unsigned long long visibleMiniIconListIndex;
@property (nonatomic) bool wantsFocusProxyView;

+ (bool)_alwaysShowsAccessoryOfType:(long long)arg1;
+ (Class)_closeBoxClassForType:(long long)arg1;
+ (double)_defaultDragInteractionLiftDelay;
+ (id)_jitterRotationAnimationWithAmount:(double)arg1;
+ (id)_jitterRotationAnimationWithStrength:(double)arg1;
+ (id)_jitterXTranslationAnimationWithAmount:(double)arg1;
+ (id)_jitterXTranslationAnimationWithStrength:(double)arg1;
+ (id)_jitterYTranslationAnimationWithAmount:(double)arg1;
+ (id)_jitterYTranslationAnimationWithStrength:(double)arg1;
+ (double)_labelHeight;
+ (bool)_shouldAlwaysHaveContentContainerView;
+ (void)activateShortcut:(id)arg1 withBundleIdentifier:(id)arg2 forIconView:(id)arg3;
+ (bool)allowsLabelAccessoryView;
+ (id)applicationIconMultitaskingMenu;
+ (id)applicationIconMultitaskingMenus;
+ (id)applicationIconSplitViewMenu;
+ (id)applicationIconStageManagerMenu;
+ (id)applicationShortcutService;
+ (long long)closeBoxTypeForView:(id)arg1;
+ (id)componentBackgroundView;
+ (id)componentBackgroundViewOfType:(long long)arg1;
+ (id)componentBackgroundViewOfType:(long long)arg1 compatibleWithTraitCollection:(id)arg2 initialWeighting:(double)arg3;
+ (void)configureLabelImageParametersBuilder:(id)arg1 forIcon:(id)arg2 location:(id)arg3;
+ (Class)contentContainerViewClass;
+ (id)debugContinuityItem;
+ (struct CGPoint { double x1; double x2; })defaultIconImageCenterForIconImageSize:(struct CGSize { double x1; double x2; })arg1;
+ (double)defaultIconImageCornerRadius;
+ (double)defaultIconImageScale;
+ (struct CGSize { double x1; double x2; })defaultIconImageSize;
+ (id)defaultIconLocation;
+ (struct CGSize { double x1; double x2; })defaultIconViewSize;
+ (struct CGSize { double x1; double x2; })defaultIconViewSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1 configurationOptions:(unsigned long long)arg2;
+ (unsigned long long)defaultImageLoadingBehavior;
+ (id)defaultLegibilitySettings;
+ (double)defaultMaxLabelHeight;
+ (double)defaultMaxLabelWidthDeltaForContentSizeCategory:(id)arg1;
+ (Class)defaultViewClassForAccessoryType:(long long)arg1;
+ (Class)defaultViewClassForLabelAccessoryType:(long long)arg1;
+ (long long)defaultWidgetBackgroundRecipe;
+ (id)dragContextForDragItem:(id)arg1;
+ (id)draggedItemBundleIdentifiersInDrag:(id)arg1;
+ (id)groupNameBaseForComponentBackgroundViewOfType:(long long)arg1;
+ (id)homeScreenService;
+ (double)iconLiftAlpha;
+ (bool)isIconTapGestureRecognizer:(id)arg1;
+ (double)labelAccessoryViewAdditionalRightMarginForType:(long long)arg1;
+ (double)labelAccessoryViewBaseRightMargin;
+ (id)labelConfigurationForListLayout:(id)arg1 contentSizeCategory:(id)arg2 options:(unsigned long long)arg3;
+ (double)labelMaximumHeightForContentSizeCategory:(id)arg1;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1 contentSizeCategory:(id)arg2 options:(unsigned long long)arg3;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForListLayout:(id)arg1 contentSizeCategory:(id)arg2 options:(unsigned long long)arg3;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForListLayout:(id)arg1 iconImageSize:(struct CGSize { double x1; double x2; })arg2 contentSizeCategory:(id)arg3 options:(unsigned long long)arg4;
+ (void)setDebugContinuityItem:(id)arg1;
+ (bool)showsPopovers;
+ (bool)supportsCursorInteraction;
+ (bool)supportsDragInteraction;
+ (bool)supportsPreviewInteraction;
+ (bool)supportsTapGesture;

- (void).cxx_destruct;
- (id)URLsForDropSession:(id)arg1;
- (void)_accessoryViewTapGestureChanged:(id)arg1;
- (void)_acquireHomeButtonPressConsumingAssertionIfNecessary;
- (void)_addJitter;
- (double)_additionalLiftScale;
- (void)_animateCloseBoxWithAnimation:(long long)arg1 animationBlock:(id /* block */)arg2;
- (void)_applyEditingStateAnimated:(bool)arg1;
- (void)_applyIconAccessoryAlpha:(double)arg1;
- (void)_applyIconContentScale:(double)arg1;
- (void)_applyIconEditingSettings;
- (void)_applyIconImageAlpha:(double)arg1;
- (void)_applyIconLabelAlpha:(double)arg1;
- (void)_applyOverallAlpha:(double)arg1;
- (id)_automationID;
- (void)_backgroundContrastDidChange:(id)arg1;
- (void)_boldTextStatusDidChange:(id)arg1;
- (struct CGPoint { double x1; double x2; })_centerForAccessoryView;
- (struct CGPoint { double x1; double x2; })_centerForCloseBox;
- (void)_checkAndRemoveCloseBoxAfterAnimation;
- (void)_closeBoxTapGestureChanged:(id)arg1;
- (long long)_closeBoxType;
- (void)_configureIconImageView:(id)arg1;
- (void)_configureLabelAccessoryViewForType:(long long)arg1;
- (void)_configureViewAsFolderIconImageView:(id)arg1;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (void)_contextMenuConfigurationDidDismiss:(id)arg1;
- (void)_contextMenuConfigurationDidPresent:(id)arg1;
- (void)_contextMenuConfigurationWillDismiss:(id)arg1;
- (void)_contextMenuConfigurationWillPresent:(id)arg1 forInteraction:(id)arg2;
- (id)_contextMenuInteraction:(id)arg1 overrideSuggestedActionsForConfiguration:(id)arg2;
- (id)_contextMenuInteraction:(id)arg1 previewForIconWithConfigurationOptions:(unsigned long long)arg2 highlighted:(bool)arg3;
- (id)_contextMenuInteraction:(id)arg1 styleForMenuWithConfiguration:(id)arg2;
- (bool)_contextMenuInteractionShouldAllowDragAfterDismiss:(id)arg1;
- (double)_continuousCornerRadius;
- (void)_createAccessoryViewIfNecessary;
- (void)_createCloseBoxIfNecessary;
- (bool)_debugContinuity;
- (bool)_delegateTapAllowed;
- (void)_delegateTouchEnded:(bool)arg1;
- (void)_destroyAccessoryView;
- (void)_destroyAccessoryView:(id)arg1;
- (void)_destroyIconImageView;
- (void)_disableContentContainerView;
- (bool)_dragInteraction:(id)arg1 canExcludeCompetingGestureRecognizer:(id)arg2;
- (bool)_dragInteraction:(id)arg1 competingGestureRecognizerShouldDelayLift:(id)arg2;
- (void)_dragInteraction:(id)arg1 liftAnimationDidChangeDirection:(long long)arg2;
- (id)_dragInteraction:(id)arg1 sessionPropertiesForSession:(id)arg2;
- (bool)_dragInteraction:(id)arg1 shouldDelayCompetingGestureRecognizer:(id)arg2;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_enableContentContainerView;
- (void)_fetchApplicationShortcutItemsIfAppropriate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusEffectBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusEffectBoundsForFocused:(bool)arg1 withFocusOutset:(double)arg2;
- (struct CGPoint { double x1; double x2; })_focusEffectCenter;
- (id)_folderIconImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForLabel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForLabelAccessoryViewWithLabelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 labelImage:(id)arg2 labelImageParameters:(id)arg3 imageFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForLabelHighlight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForVisibleImage;
- (void)_handleActivateAppExposeKeyShortcut:(id)arg1;
- (void)_handleAddWidgetRequest:(id)arg1;
- (void)_handleAddWindowToSetCommand:(id)arg1;
- (void)_handleMakeFullscreenKeyShortcut:(id)arg1;
- (void)_handleMakeSplitLeftKeyShortcut:(id)arg1;
- (void)_handleMakeSplitRightKeyShortcut:(id)arg1;
- (void)_handleTap;
- (void)_handleTapWithModifierFlags:(long long)arg1;
- (bool)_hasPopover;
- (bool)_hideIconLabelForContextMenu;
- (bool)_hideIconLabelForCustomIconImageViewController;
- (id)_iconImageView;
- (void)_insertIconImageView:(id)arg1;
- (void)_invalidateHomeButtonPressConsumingAssertion;
- (bool)_isCursorInteractionEnabled;
- (bool)_isFolderIconFreezingSupported;
- (bool)_isForcingIconContentScalingEnabled;
- (bool)_isShowingAccessoryView;
- (bool)_isShowingCloseBox;
- (double)_labelBaselineOffsetFromImage;
- (id)_labelImage;
- (id)_labelImageParameters;
- (double)_labelVerticalOffset;
- (id)_legibilitySettingsWithParameters:(id)arg1;
- (id)_legibilitySettingsWithPrimaryColor:(id)arg1;
- (id)_legibilitySettingsWithStyle:(long long)arg1 primaryColor:(id)arg2;
- (id)_makeIconImageView;
- (id)_multitaskingAppShortcutService;
- (void)_notifyObserversSizeDidChange;
- (id)_pointerStyleForAppIcon;
- (id)_pointerStyleForLibraryAdditionalItemsIndicatorIcon;
- (id)_pointerStyleForWidgetIcon;
- (void)_recursiveNotifyInteractionTintColorDidChangeForReasons:(unsigned long long)arg1;
- (void)_recursivelyUpdateBackdropMaskFrames;
- (void)_refreshAccessoryViewNotification:(id)arg1;
- (void)_registerForAddWidgetRequestsIfNecessary;
- (void)_removeJitter;
- (void)_removeUnknownSubviews;
- (bool)_selfOrCustomViewCanBecomeFocused;
- (void)_setForcingIconContentScalingEnabled:(bool)arg1;
- (void)_setShowingAccessoryView:(bool)arg1;
- (void)_setShowingCloseBox:(bool)arg1;
- (void)_setTemporarySnapshotViewForDragPreview:(id)arg1;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (bool)_shouldEnableGroupBlending;
- (bool)_shouldHaveContentContainerView;
- (bool)_shouldShowLabel;
- (void)_startTrackingSupportedMultitaskingShortcutActionsIfAppropriateWithOldIcon:(id)arg1;
- (void)_toggleContentContainerViewIfNecessary;
- (void)_toggleGroupBlendingIfNecessary;
- (void)_unregisterForAddWidgetRequests;
- (void)_updateAccessoryViewAnimated:(bool)arg1;
- (void)_updateAfterManualIconImageInfoChangeInvalidatingLayout:(bool)arg1;
- (void)_updateAllComponentAlphas;
- (void)_updateAllComponentAlphasAnimated:(bool)arg1;
- (void)_updateBrightness;
- (void)_updateCloseBoxAnimated:(bool)arg1;
- (void)_updateCloseBoxWithAnimation:(long long)arg1;
- (void)_updateConfigurationForIconImageView:(id)arg1;
- (void)_updateCursorInteractionsEnabled;
- (void)_updateCustomIconImageViewController:(bool)arg1;
- (void)_updateCustomIconImageViewControllerHitTesting;
- (void)_updateDragInteractionLiftDelay;
- (void)_updateFrameToIconViewSize;
- (void)_updateIconContentScale;
- (void)_updateIconImageViewAnimated:(bool)arg1;
- (void)_updateJitter;
- (void)_updateLabel;
- (void)_updateLabelAccessoryView;
- (void)_updateLabelArea;
- (void)_updateLaunchDisabled;
- (void)_updateProgressAnimated:(bool)arg1;
- (id)_visiblyActiveDataSource;
- (long long)_widgetBackgroundMaterialForDataSource:(id)arg1;
- (id)accessibilityTintColor;
- (struct CGSize { double x1; double x2; })accessorySize;
- (id)accessoryViewAnimator;
- (id)accessoryViewCursorInteraction;
- (id)actionDelegate;
- (void)addGesturesAndInteractionsIfNecessary;
- (void)addObserver:(id)arg1;
- (bool)allIconElementsButLabelHidden;
- (bool)allowsAccessoryView;
- (bool)allowsBlockedForScreenTimeExpiration;
- (bool)allowsCloseBox;
- (bool)allowsEditingAnimation;
- (bool)allowsLabelAccessoryView;
- (bool)allowsLabelArea;
- (bool)allowsPassthroughHitTesting;
- (bool)allowsProgressState;
- (bool)allowsTapWhileEditing;
- (id)applicationBundleIdentifierForShortcuts;
- (id)applicationBundleURLForShortcuts;
- (id)applicationShortcutItems;
- (struct SBIconApproximateLayoutPosition { unsigned long long x1; unsigned long long x2; })approximateLayoutPosition;
- (id)backgroundViewGroupNameBase;
- (id)badgeParallaxSettings;
- (id)badgeString;
- (double)baselineOffsetFromBottom;
- (id)behaviorDelegate;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFocused;
- (bool)canBeginDrags;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canReceiveGrabbedIcon:(id)arg1;
- (bool)canShowAccessoryView;
- (bool)canShowCloseBox;
- (void)cancelDrag;
- (void)cancelDragLift;
- (unsigned long long)centerVisibleMiniIconIndex;
- (id)claimBindingsForDropSession:(id)arg1;
- (void)cleanUpAfterDropAnimation;
- (void)cleanupAfterCrossfade;
- (void)cleanupAfterFloatyFolderCrossfade;
- (void)clearIconImageInfo;
- (id)closeBoxAnimator;
- (id)closeBoxCursorInteraction;
- (bool)closeBoxShouldTrack:(id)arg1;
- (void)configurationInteractionDidBegin:(id)arg1;
- (void)configurationInteractionDidCommit:(id)arg1;
- (void)configurationInteractionDidEnd:(id)arg1;
- (void)configurationInteractionWillBegin:(id)arg1;
- (void)configurationInteractionWillEnd:(id)arg1;
- (unsigned long long)configurationOptions;
- (id)configurationUIDelegate;
- (void)configureCustomIconImageViewController:(id)arg1;
- (void)configureForLabelAllowed:(bool)arg1;
- (void)configureLabelImageParametersBuilder:(id)arg1;
- (void)configureMatchingIconView:(id)arg1;
- (void)consumeSinglePressUpForButtonKind:(long long)arg1;
- (id)containerViewControllerForConfigurationInteraction:(id)arg1;
- (id)containerViewForConfigurationInteraction:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentBoundingRectForConfigurationInteraction:(id)arg1;
- (id)contentContainerView;
- (id)contentSizeCategory;
- (id)contextMenuInteraction;
- (id)contextMenuInteraction:(id)arg1 configuration:(id)arg2 dismissalPreviewForItemWithIdentifier:(id)arg3;
- (id)contextMenuInteraction:(id)arg1 configuration:(id)arg2 highlightPreviewForItemWithIdentifier:(id)arg3;
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)contextMenuInteraction:(id)arg1 willDisplayMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willEndForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (id)continuityInfo;
- (id)continuityItem;
- (id)createNewIconLabelViewFactory;
- (long long)currentAccessoryType;
- (id)currentConfigurationInteraction;
- (id)currentImageView;
- (long long)currentLabelAccessoryType;
- (id)currentStackConfigurationInteraction;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cursorHitTestPadding;
- (id)customIconImageViewController;
- (unsigned long long)customIconImageViewControllerPriority;
- (void)customImageViewControllerWantsLabelHiddenDidChange:(id)arg1;
- (void)dealloc;
- (unsigned long long)debugIconIndex;
- (id)defaultDragPreview;
- (id)defaultDragPreviewWithParameters:(id)arg1;
- (id)delegate;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)didMoveToWindow;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (bool)disallowCursorInteraction;
- (void)dismissConfigurationCard;
- (void)dismissConfigurationCardImmediately;
- (void)dismissContextMenuWithCompletion:(id /* block */)arg1;
- (void)dismissStackConfigurationCard;
- (void)dismissStackConfigurationCardImmediately;
- (long long)displayedLabelAccessoryType;
- (id)displayedLabelFont;
- (bool)displaysIconStatusInLabel;
- (id)dragDelegate;
- (id)dragInteraction;
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willAddItems:(id)arg3 forInteraction:(id)arg4;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willEndWithOperation:(unsigned long long)arg3;
- (id)dragInteraction:(id)arg1 sessionForAddingItems:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)dragInteraction:(id)arg1 sessionIsRestrictedToDraggingApplication:(id)arg2;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;
- (double)dragInteractionLiftDelay;
- (id)dragItems;
- (id)dragPreviewForItem:(id)arg1 session:(id)arg2;
- (void)dragSession:(id)arg1 didEndWithOperation:(unsigned long long)arg2;
- (void)dragSession:(id)arg1 willEndWithOperation:(unsigned long long)arg2;
- (void)dragSessionWillBegin:(id)arg1;
- (id)draggingLaunchActions;
- (id)draggingLaunchURL;
- (long long)draggingStartLocation;
- (bool)dragsSupportSystemDragsByDefault;
- (id)dropContainerView;
- (id)dropDelegate;
- (id)dropInteraction;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidEnd:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)earlyTerminateContextMenuDismissAnimation;
- (double)editingAnimationStrength;
- (id)editingModeGestureRecognizer;
- (void)editingModeGestureRecognizerDidFire:(id)arg1;
- (id)effectiveApplicationShortcutItems;
- (double)effectiveBrightness;
- (double)effectiveIconAccessoryAlpha;
- (double)effectiveIconContentScale;
- (double)effectiveIconImageAlpha;
- (double)effectiveIconLabelAlpha;
- (id)effectiveListLayoutProvider;
- (double)effectiveOverallAlpha;
- (void)endForbiddingEditingModeWithReason:(id)arg1;
- (Class)expectedIconImageViewClass;
- (id)fetchedApplicationShortcutItems;
- (double)firstLineBaseline;
- (unsigned long long)firstVisibleMiniIconIndex;
- (bool)focusProxyCanBecomeFocused;
- (id)focusProxyView;
- (id)folder;
- (unsigned long long)folderBackgroundStyle;
- (id)folderIcon;
- (id)folderIconBackgroundView;
- (id)folderIconImageCache;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForMiniIconAtIndex:(unsigned long long)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)homeButtonPressConsumingAssertion;
- (id)homeScreenContentViewForConfigurationInteraction:(id)arg1;
- (id)icon;
- (void)iconAccessoriesDidUpdate:(id)arg1;
- (double)iconAccessoryAlpha;
- (double)iconContentScale;
- (double)iconImageAlpha;
- (id)iconImageCache;
- (struct CGPoint { double x1; double x2; })iconImageCenter;
- (double)iconImageCornerRadius;
- (void)iconImageDidUpdate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })iconImageFrame;
- (struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; })iconImageInfo;
- (struct CGSize { double x1; double x2; })iconImageSize;
- (bool)iconImageSizeMatchesBoundsSize;
- (id)iconImageSnapshot;
- (id)iconImageSnapshotView;
- (void)iconImageViewDidEndAsynchronousImageLoadForIcon:(id)arg1;
- (void)iconImageViewWillBeginAsynchronousImageLoadForIcon:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })iconImageVisibleFrame;
- (struct CGSize { double x1; double x2; })iconImageVisibleSize;
- (void)iconInteractedWhenDisabled;
- (double)iconLabelAlpha;
- (id)iconLabelViewFactory;
- (void)iconLaunchEnabledDidChange:(id)arg1;
- (id)iconViewCursorInteraction;
- (struct CGSize { double x1; double x2; })iconViewSize;
- (struct CGSize { double x1; double x2; })iconViewSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1;
- (unsigned long long)imageLoadingBehavior;
- (id)initWithConfigurationOptions:(unsigned long long)arg1;
- (id)initWithConfigurationOptions:(unsigned long long)arg1 listLayoutProvider:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isAnimatingScrolling;
- (bool)isContextMenuInteractionActive;
- (bool)isCrossfadingImageWithView;
- (bool)isCursorActive;
- (bool)isCustomIconImageViewHitTestingDisabled;
- (bool)isDragLifted;
- (bool)isDragging;
- (bool)isDropping;
- (bool)isEditing;
- (bool)isEnabled;
- (bool)isFolderIcon;
- (bool)isFolderIconFrozen;
- (bool)isGrabbed;
- (bool)isHighlighted;
- (bool)isIconContentScalingEnabled;
- (bool)isLabelAccessoryHidden;
- (bool)isLabelHidden;
- (bool)isLabelTextBold;
- (bool)isOverlapping;
- (bool)isPaused;
- (bool)isShowingConfigurationCard;
- (bool)isShowingContextMenu;
- (bool)isShowingStackConfigurationCard;
- (bool)isTimedOut;
- (bool)isTouchDownInIcon;
- (double)labelAccessoryTotalWidth;
- (id)labelAccessoryView;
- (id)labelConfiguration;
- (id)labelFont;
- (id)labelImageWithParameters:(id)arg1;
- (long long)labelStyle;
- (id)labelView;
- (bool)lastContextMenuInteractionFailedToLoad;
- (double)lastLineBaseline;
- (id)lastTouchDownDate;
- (unsigned long long)lastVisibleMiniIconIndex;
- (void)layoutSubviews;
- (id)legibilitySettings;
- (id)liftingDragSession;
- (id)listLayout;
- (id)listLayoutProvider;
- (id)location;
- (id)markAsDropping;
- (id)matchingIconViewByAddingConfigurationOptions:(unsigned long long)arg1 removingConfigurationOptions:(unsigned long long)arg2;
- (id)matchingIconViewWithConfigurationOptions:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })maxLabelSize;
- (id)newCaptureOnlyBackgroundView;
- (id)newComponentBackgroundViewOfType:(long long)arg1;
- (id)overrideActionDelegate;
- (id)overrideBadgeNumberOrString;
- (id)pauseReasonsDescriptions;
- (void)performAfterContextMenusDismissUsingBlock:(id /* block */)arg1;
- (void)performTap;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (bool)pointMostlyInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (void)pointerInteraction:(id)arg1 willEnterRegion:(id)arg2 animator:(id)arg3;
- (void)pointerInteraction:(id)arg1 willExitRegion:(id)arg2 animator:(id)arg3;
- (void)popConfigurationCard;
- (void)popStackConfigurationCard;
- (id)prepareForIconDrop;
- (void)prepareForReuse;
- (void)prepareToCrossfadeImageWithView:(id)arg1 anchorPoint:(struct CGPoint { double x1; double x2; })arg2 options:(unsigned long long)arg3;
- (void)prepareToCrossfadeImageWithView:(id)arg1 options:(unsigned long long)arg2;
- (void)prepareToCrossfadeWithFloatyFolderView:(id)arg1 allowFolderInteraction:(bool)arg2;
- (void)presentConfigurationCard;
- (void)presentStackConfigurationCard;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesChanged:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (long long)progressState;
- (void)purgeCachedEditingViewData;
- (id)recentsDocumentExtensionProvider;
- (id)referenceIconViewForConfigurationInteraction:(id)arg1;
- (bool)refusesRecipientStatus;
- (void)removeAllIconAnimations;
- (void)removeAssertion:(id)arg1;
- (void)removeDroppingAssertion:(id)arg1;
- (void)removeForbidAccessoryUpdatesAssertion:(id)arg1;
- (void)removeObserver:(id)arg1;
- (id)representativeIconViewForModalInteractions;
- (id)representedFolderIconLocation;
- (id)reuseDelegate;
- (void)scrollToFirstGapAnimated:(bool)arg1;
- (void)scrollToGapOrTopIfFullOfPage:(unsigned long long)arg1 animated:(bool)arg2;
- (void)scrollToTopOfFirstPageAnimated:(bool)arg1;
- (void)scrollToTopOfPage:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setAccessibilityTintColor:(id)arg1;
- (void)setAccessoryViewAnimator:(id)arg1;
- (void)setAllIconElementsButLabelHidden:(bool)arg1;
- (void)setAllowsAccessoryView:(bool)arg1;
- (void)setAllowsBlockedForScreenTimeExpiration:(bool)arg1;
- (void)setAllowsCloseBox:(bool)arg1;
- (void)setAllowsCloseBox:(bool)arg1 withAnimation:(long long)arg2;
- (void)setAllowsEditingAnimation:(bool)arg1;
- (void)setAllowsLabelArea:(bool)arg1;
- (void)setAllowsPassthroughHitTesting:(bool)arg1;
- (void)setAllowsProgressState:(bool)arg1;
- (void)setApplicationShortcutItems:(id)arg1;
- (void)setApproximateLayoutPosition:(struct SBIconApproximateLayoutPosition { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setBackgroundAndIconGridImageAlpha:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBoundsSizeFromIconImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCloseBoxAnimator:(id)arg1;
- (void)setConfigurationOptions:(unsigned long long)arg1;
- (void)setContinuityInfo:(id)arg1;
- (void)setContinuityInfo:(id)arg1 animated:(bool)arg2;
- (void)setCrossfadeCornerRadius:(double)arg1;
- (void)setCrossfadeFraction:(double)arg1;
- (void)setCrossfadeViewFadeFraction:(double)arg1;
- (void)setCurrentConfigurationInteraction:(id)arg1;
- (void)setCurrentStackConfigurationInteraction:(id)arg1;
- (void)setCursorHitTestPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setCustomIconImageViewController:(id)arg1;
- (void)setCustomIconImageViewControllerPriority:(unsigned long long)arg1;
- (void)setCustomIconImageViewHitTestingDisabled:(bool)arg1;
- (void)setDebugIconIndex:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisallowCursorInteraction:(bool)arg1;
- (void)setDisplaysIconStatusInLabel:(bool)arg1;
- (void)setDragLifted:(bool)arg1;
- (void)setDragging:(bool)arg1;
- (void)setDragging:(bool)arg1 updateImmediately:(bool)arg2;
- (void)setEditing:(bool)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEditingAnimationStrength:(double)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFetchedApplicationShortcutItems:(id)arg1;
- (void)setFloatyFolderCrossfadeFraction:(double)arg1;
- (void)setFolderBackgroundStyle:(unsigned long long)arg1;
- (void)setFolderIcon:(id)arg1;
- (void)setFolderIconBackgroundView:(id)arg1;
- (void)setFolderIconFrozen:(bool)arg1;
- (void)setFolderIconImageCache:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGrabbed:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setHomeButtonPressConsumingAssertion:(id)arg1;
- (void)setIcon:(id)arg1;
- (void)setIcon:(id)arg1 animated:(bool)arg2;
- (void)setIconAccessoryAlpha:(double)arg1;
- (void)setIconContentScale:(double)arg1;
- (void)setIconContentScalingEnabled:(bool)arg1;
- (void)setIconFadeFraction:(double)arg1;
- (void)setIconGridImageAlpha:(double)arg1;
- (void)setIconImageAlpha:(double)arg1;
- (void)setIconImageAndAccessoryAlpha:(double)arg1;
- (void)setIconImageCache:(id)arg1;
- (void)setIconImageInfo:(struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; })arg1;
- (void)setIconImageSizeMatchesBoundsSize:(bool)arg1;
- (void)setIconLabelAlpha:(double)arg1;
- (void)setIconLabelViewFactory:(id)arg1;
- (void)setImageLoadingBehavior:(unsigned long long)arg1;
- (void)setLabelAccessoryHidden:(bool)arg1;
- (void)setLabelFont:(id)arg1;
- (void)setLabelHidden:(bool)arg1;
- (void)setLabelStyle:(long long)arg1;
- (void)setLastContextMenuInteractionFailedToLoad:(bool)arg1;
- (void)setLastTouchDownDate:(id)arg1;
- (void)setLegibilitySettings:(id)arg1;
- (void)setLiftingDragSession:(id)arg1;
- (void)setListLayoutProvider:(id)arg1;
- (void)setLocation:(id)arg1;
- (void)setLocation:(id)arg1 animated:(bool)arg2;
- (void)setMorphFraction:(double)arg1;
- (void)setOverlapping:(bool)arg1;
- (void)setOverrideActionDelegate:(id)arg1;
- (void)setOverrideBadgeNumberOrString:(id)arg1;
- (void)setOverrideBadgeNumberOrString:(id)arg1 animated:(bool)arg2;
- (void)setPaused:(bool)arg1;
- (void)setPaused:(bool)arg1 forReason:(unsigned long long)arg2;
- (void)setRefusesRecipientStatus:(bool)arg1;
- (void)setShowsDropGlow:(bool)arg1 animator:(id)arg2;
- (void)setShowsFocusEffect:(bool)arg1;
- (void)setShowsImageAndLabelDuringDrop:(bool)arg1;
- (void)setShowsSquareCorners:(bool)arg1;
- (void)setStartsDragMoreQuickly:(bool)arg1;
- (void)setTouchDownInIcon:(bool)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setUserVisibilityStatus:(unsigned long long)arg1;
- (void)setWantsFocusProxyView:(bool)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (void)setupFocusEffectPlatterView;
- (id)shortcutsDelegate;
- (bool)shouldActivateApplicationShortcutItem:(id)arg1 atIndex:(unsigned long long)arg2;
- (bool)shouldShowAccessoryView;
- (bool)shouldShowCloseBox;
- (bool)shouldShowLabelAccessoryView;
- (bool)shouldTapGestureRecognizeAlongsideDragInteractionGestures;
- (bool)showsDropGlow;
- (bool)showsImageAndLabelDuringDrop;
- (bool)showsSquareCorners;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)sourceIconViewForConfigurationInteraction:(id)arg1;
- (id)startForbiddingAccessoryUpdatesWithReason:(id)arg1 animated:(bool)arg2;
- (void)startForbiddingEditingModeWithReason:(id)arg1;
- (bool)startsDragMoreQuickly;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (unsigned long long)supportedIconGridSizeClasses;
- (bool)supportsConfigurationCard;
- (bool)supportsStackConfigurationCard;
- (void)tapGestureDidChange:(id)arg1;
- (id)tapGestureRecognizer;
- (id)tintColor;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)updateCustomIconImageViewController;
- (void)updateParallaxSettings;
- (unsigned long long)userVisibilityStatus;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleImageRelativeFrameForMiniIconAtIndex:(unsigned long long)arg1;
- (unsigned long long)visibleMiniIconCount;
- (unsigned long long)visibleMiniIconListIndex;
- (bool)wantsFocusProxyView;

@end
