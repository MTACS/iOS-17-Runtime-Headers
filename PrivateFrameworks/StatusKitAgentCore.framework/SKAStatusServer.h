
@interface SKAStatusServer : NSObject <NSXPCListenerDelegate, SKAChannelManagingDelegate, SKADatabaseManagingDelegate, SKADatabaseProvidingDelegate, SKAIDSDeviceProviding, SKAInvitationManagingDelegate, SKAMessagingProvidingDelegate, SKAPresenceClientDelegate, SKAPresenceManagingDelegate, SKAStatusPublishingServiceClientDelegate, SKAStatusReceivingManagingDelegate, SKAStatusSubscriptionServiceClientDelegate> {
    <SKAChannelManaging> * _channelManager;
    <SKADatabaseManaging> * _databaseManager;
    <SKADatabaseProviding> * _databaseProvider;
    <SKAStatusEncryptionManaging> * _encryptionManager;
    <SKAInvitationManaging> * _invitationManager;
    NSObject<OS_dispatch_queue> * _invitationManagerMessagingQueue;
    <SKAMessagingProviding> * _invitationMessagingProvider;
    NSMutableArray * _presenceConnectedClients;
    NSObject<OS_dispatch_queue> * _presenceConnectionQueue;
    NSXPCListener * _presenceListener;
    <SKAPresenceManaging> * _presenceManager;
    <SKAStatusPublishingManaging> * _publishingManager;
    NSMutableArray * _publishingServiceConnectedClients;
    NSObject<OS_dispatch_queue> * _publishingServiceConnectionQueue;
    NSXPCListener * _publishingServiceListener;
    <SKAStatusReceivingManaging> * _statusReceivingManager;
    <SKAStatusSubscriptionManaging> * _subscriptionManager;
    NSMutableArray * _subscriptionServiceConnectedClients;
    NSObject<OS_dispatch_queue> * _subscriptionServiceConnectionQueue;
    NSXPCListener * _subscriptionServiceListener;
    bool  _trafficModeEnabled;
}

@property (nonatomic, retain) <SKAChannelManaging> *channelManager;
@property (nonatomic, retain) <SKADatabaseManaging> *databaseManager;
@property (nonatomic, retain) <SKADatabaseProviding> *databaseProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <SKAStatusEncryptionManaging> *encryptionManager;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *idsDevices;
@property (nonatomic, retain) <SKAInvitationManaging> *invitationManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *invitationManagerMessagingQueue;
@property (nonatomic, retain) <SKAMessagingProviding> *invitationMessagingProvider;
@property (nonatomic, retain) NSMutableArray *presenceConnectedClients;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *presenceConnectionQueue;
@property (nonatomic, retain) NSXPCListener *presenceListener;
@property (nonatomic, retain) <SKAPresenceManaging> *presenceManager;
@property (nonatomic, retain) <SKAStatusPublishingManaging> *publishingManager;
@property (nonatomic, retain) NSMutableArray *publishingServiceConnectedClients;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *publishingServiceConnectionQueue;
@property (nonatomic, retain) NSXPCListener *publishingServiceListener;
@property (nonatomic, retain) <SKAStatusReceivingManaging> *statusReceivingManager;
@property (nonatomic, retain) <SKAStatusSubscriptionManaging> *subscriptionManager;
@property (nonatomic, retain) NSMutableArray *subscriptionServiceConnectedClients;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *subscriptionServiceConnectionQueue;
@property (nonatomic, retain) NSXPCListener *subscriptionServiceListener;
@property (readonly) Class superclass;
@property (nonatomic) bool trafficModeEnabled;

+ (id)logger;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (bool)_inTextTrafficMode;
- (bool)_kettleFeatureEnabled;
- (void)_notifyPresenceClientsIfNeededOfChannelChangeForChannel:(id)arg1;
- (bool)_presenceServiceListener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (bool)_publishingServiceListener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)_senderHandlesForChannel:(id)arg1;
- (void)_setupMaintenanceActivity;
- (bool)_shouldDonateToBiomeForStatusTypeIdentifier:(id)arg1;
- (bool)_subscriptionServiceListener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)channelManager;
- (void)channelManager:(id)arg1 didReceiveData:(id)arg2 onChannel:(id)arg3 dateReceived:(id)arg4 dateExpired:(id)arg5;
- (void)channelManager:(id)arg1 failedToSubscribeToChannel:(id)arg2 withError:(id)arg3;
- (void)databaseDidReceiveRemoteChangesForChannels:(id)arg1;
- (id)databaseManager;
- (void)databaseManager:(id)arg1 didCreateChannel:(id)arg2;
- (id)databaseProvider;
- (void)donateReceivedStatusToBiomeOnChannel:(id)arg1;
- (id)encryptionManager;
- (id)idsDevices;
- (id)init;
- (id)invitationManager;
- (void)invitationManager:(id)arg1 didReceiveInvitation:(id)arg2 forChannel:(id)arg3;
- (void)invitationManager:(id)arg1 didRevokeInvitationOnChannel:(id)arg2;
- (id)invitationManagerMessagingQueue;
- (id)invitationMessagingProvider;
- (bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)logState;
- (void)networkBecameReachable;
- (void)presenceClientWasInvalidated:(id)arg1;
- (id)presenceConnectedClients;
- (id)presenceConnectionQueue;
- (id)presenceListener;
- (id)presenceManager;
- (void)presenceManager:(id)arg1 didCreateChannel:(id)arg2;
- (void)presenceManager:(id)arg1 didReceivePresentDevicesUpdateForPresenceIdentifier:(id)arg2;
- (void)presenceManager:(id)arg1 didRequestToRollChannel:(id)arg2;
- (id)publishingManager;
- (void)publishingServiceClientWasInvalidated:(id)arg1;
- (id)publishingServiceConnectedClients;
- (id)publishingServiceConnectionQueue;
- (id)publishingServiceListener;
- (id)registerIDSDeviceChangedObserver:(id /* block */)arg1;
- (void)service:(id)arg1 didReceiveIncomingMessage:(id)arg2 fromID:(id)arg3 toID:(id)arg4 messageGuid:(id)arg5;
- (void)service:(id)arg1 outgoingMessageWithIdentifier:(id)arg2 fromID:(id)arg3 toID:(id)arg4 didSendWithSuccess:(bool)arg5;
- (void)setChannelManager:(id)arg1;
- (void)setDatabaseManager:(id)arg1;
- (void)setDatabaseProvider:(id)arg1;
- (void)setEncryptionManager:(id)arg1;
- (void)setInvitationManager:(id)arg1;
- (void)setInvitationManagerMessagingQueue:(id)arg1;
- (void)setInvitationMessagingProvider:(id)arg1;
- (void)setPresenceConnectedClients:(id)arg1;
- (void)setPresenceConnectionQueue:(id)arg1;
- (void)setPresenceListener:(id)arg1;
- (void)setPresenceManager:(id)arg1;
- (void)setPublishingManager:(id)arg1;
- (void)setPublishingServiceConnectedClients:(id)arg1;
- (void)setPublishingServiceConnectionQueue:(id)arg1;
- (void)setPublishingServiceListener:(id)arg1;
- (void)setStatusReceivingManager:(id)arg1;
- (void)setSubscriptionManager:(id)arg1;
- (void)setSubscriptionServiceConnectedClients:(id)arg1;
- (void)setSubscriptionServiceConnectionQueue:(id)arg1;
- (void)setSubscriptionServiceListener:(id)arg1;
- (void)setTrafficModeEnabled:(bool)arg1;
- (void)shutdown;
- (id)statusReceivingManager;
- (void)statusReceivingManager:(id)arg1 didReceiveStatusUpdate:(id)arg2 onChannel:(id)arg3;
- (id)subscriptionManager;
- (void)subscriptionServiceClientWasInvalidated:(id)arg1;
- (id)subscriptionServiceConnectedClients;
- (id)subscriptionServiceConnectionQueue;
- (id)subscriptionServiceListener;
- (bool)trafficModeEnabled;
- (void)unregisterIDSDeviceChangedObserver:(id)arg1;

@end
