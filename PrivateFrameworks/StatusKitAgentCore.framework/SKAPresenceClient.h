
@interface SKAPresenceClient : NSObject <SKAClientConnectionRepresentable, SKAPresenceClientConnectionLifecycleDelegate, SKPresenceDaemonProtocol> {
    bool  _accountCheckCompleted;
    bool  _accountIsPresenceCapable;
    bool  _activeAssertion;
    bool  _activeSubscription;
    NSString * _activeSubscriptionIdentifier;
    SKAPresenceClientConnection * _clientConnection;
    SKPresencePayload * _currentPayload;
    <SKADatabaseManaging> * _databaseManager;
    <SKAPresenceClientDelegate> * _delegate;
    <SKAInvitationManaging> * _invitationManager;
    NSSet * _lastSeenPresentDevices;
    SKPresenceOptions * _options;
    NSString * _presenceIdenfifier;
    <SKAPresenceManaging> * _presenceManager;
    NSObject<OS_dispatch_queue> * _queue;
    <SKAStatusSubscriptionManaging> * _subscriptionManager;
}

@property (nonatomic) bool accountCheckCompleted;
@property (nonatomic) bool accountIsPresenceCapable;
@property (nonatomic) bool activeAssertion;
@property (nonatomic) bool activeSubscription;
@property (nonatomic, retain) NSString *activeSubscriptionIdentifier;
@property (nonatomic, retain) SKAPresenceClientConnection *clientConnection;
@property (nonatomic, retain) SKPresencePayload *currentPayload;
@property (nonatomic, retain) <SKADatabaseManaging> *databaseManager;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SKAPresenceClientDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <SKAInvitationManaging> *invitationManager;
@property (nonatomic, retain) NSSet *lastSeenPresentDevices;
@property (nonatomic, retain) SKPresenceOptions *options;
@property (nonatomic, copy) NSString *presenceIdenfifier;
@property (nonatomic, retain) <SKAPresenceManaging> *presenceManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) <SKAStatusSubscriptionManaging> *subscriptionManager;
@property (readonly) Class superclass;

+ (id)_accountNotCapableError;
+ (id)_crossAccountError;
+ (id)_noChannelCreatedError;
+ (id)_noChannelError;
+ (id)_noClientIDError;
+ (id)_unableToResolveSenderHandleError;
+ (id)logger;
+ (id)oversizeLogger;

- (void).cxx_destruct;
- (id)_shortHashOfClientID:(id)arg1;
- (bool)accountCheckCompleted;
- (bool)accountIsPresenceCapable;
- (void)accountIsPresenceCapableWithCompletion:(id /* block */)arg1;
- (bool)activeAssertion;
- (bool)activeSubscription;
- (id)activeSubscriptionIdentifier;
- (void)assertPresenceForIdentifier:(id)arg1 withPresencePayload:(id)arg2 completion:(id /* block */)arg3;
- (id)clientConnection;
- (id)clientPrefixedPresenceIdentifierForPresenceIdentifier:(id)arg1;
- (id)currentPayload;
- (id)databaseManager;
- (id)delegate;
- (void)fetchHandleInvitability:(id)arg1 fromHandle:(id)arg2 forPresenceIdentifier:(id)arg3 completion:(id /* block */)arg4;
- (void)fetchPresenceCapability:(id /* block */)arg1;
- (void)handleReceivedInvitationForPresenceIdentifier:(id)arg1;
- (void)handleReceivedPresentDevicesUpdateForPresenceIdentifier:(id)arg1;
- (id)initWithXPCConnection:(id)arg1 queue:(id)arg2 delegate:(id)arg3 subscriptionManager:(id)arg4 presenceManager:(id)arg5 invitationManager:(id)arg6 databaseManager:(id)arg7;
- (id)invitationManager;
- (void)inviteHandles:(id)arg1 fromSenderHandle:(id)arg2 presenceIdentifier:(id)arg3 completion:(id /* block */)arg4;
- (void)invitedHandlesForPresenceIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)isHandleInvited:(id)arg1 fromSenderHandle:(id)arg2 forPresenceIdentifier:(id)arg3 completion:(id /* block */)arg4;
- (id)lastSeenPresentDevices;
- (id)options;
- (void)presenceClientConnectionWasInterrupted:(id)arg1;
- (void)presenceClientConnectionWasInvalidated:(id)arg1;
- (id)presenceIdenfifier;
- (bool)presenceIdentifierMatchesClient:(id)arg1;
- (id)presenceManager;
- (void)presentDevicesForPresenceIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (id)queue;
- (id)rawPresenceIdentifierForPrefixedPresenceIdentifier:(id)arg1;
- (void)refreshAssertionsForPresenceIdentifier:(id)arg1;
- (void)registerForDelegateCallbacksWithPresenceIdentifier:(id)arg1 options:(id)arg2 completion:(id /* block */)arg3;
- (void)releasePresenceForIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)releaseTransientSubscriptionAssertionForPresenceIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)removeInvitedHandles:(id)arg1 presenceIdentifier:(id)arg2 completion:(id /* block */)arg3;
- (void)retainTransientSubscriptionAssertionForPresenceIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)setAccountCheckCompleted:(bool)arg1;
- (void)setAccountIsPresenceCapable:(bool)arg1;
- (void)setActiveAssertion:(bool)arg1;
- (void)setActiveSubscription:(bool)arg1;
- (void)setActiveSubscriptionIdentifier:(id)arg1;
- (void)setClientConnection:(id)arg1;
- (void)setCurrentPayload:(id)arg1;
- (void)setDatabaseManager:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInvitationManager:(id)arg1;
- (void)setLastSeenPresentDevices:(id)arg1;
- (void)setOptions:(id)arg1;
- (void)setPresenceIdenfifier:(id)arg1;
- (void)setPresenceManager:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setSubscriptionManager:(id)arg1;
- (id)subscriptionManager;

@end
