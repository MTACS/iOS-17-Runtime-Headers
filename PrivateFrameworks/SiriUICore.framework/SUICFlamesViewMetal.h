
@interface SUICFlamesViewMetal : MTKView <SUICFlamesViewProviding> {
    bool  _accelerateTransitions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _activeFrame;
    float  _auraMaxSubdivisionLevel;
    float  _auraMinSubdivisionLevel;
    int  _auraProgramHandle;
    unsigned int  _auraVertexCircles;
    <MTLCommandQueue> * _commandQueue;
    long long  _currentContextCount;
    SUICFlameGroup * _currentFlameGroup;
    double  _dictationBlueColor;
    UIColor * _dictationColor;
    double  _dictationGreenColor;
    double  _dictationRedColor;
    float  _dictationUnitSize;
    CADisplayLink * _displayLink;
    unsigned int  _elementArrayHandle;
    int  _fShadID;
    long long  _fidelity;
    NSMutableArray * _flameGroups;
    int  _flameProgramHandle;
    <SUICFlamesViewProvidingDelegate> * _flamesDelegate;
    bool  _flamesPaused;
    double  _frameRateScalingFactor;
    unsigned int  _framebufferHandle;
    bool  _freezesAura;
    bool  _hasCustomActiveFrame;
    double  _horizontalScaleFactor;
    <MTLBuffer> * _indexBuffer;
    bool  _isInitialized;
    SUICAudioLevelSmoother * _levelSmoother;
    float  _maxSubdivisionLevel;
    unsigned int  _maxVertexCircles;
    long long  _mode;
    unsigned int  _numAuraIndices;
    unsigned int  _numAuraIndicesCulled;
    unsigned long long  _numIndices;
    unsigned long long  _numVertices;
    unsigned int  _numWaveIndices;
    UIImage * _overlayImage;
    UIImageView * _overlayImageView;
    <MTLRenderPipelineState> * _pipelineState;
    bool  _reduceFrameRate;
    bool  _reduceMotionEnabled;
    bool  _reduceThinkingFramerate;
    bool  _renderInBackground;
    unsigned int  _renderbufferHandle;
    NSMutableSet * _renderingDisabledReasons;
    UIScreen * _screen;
    bool  _shadersAreCompiled;
    bool  _showAura;
    double  _startTime;
    long long  _state;
    bool  _transitionFinished;
    int  _vShadID;
    unsigned int  _vertexArrayObjectHandle;
    <MTLBuffer> * _vertexBuffer;
    unsigned int  _vertexBufferHandle;
    float  _viewHeight;
    float  _viewWidth;
    void _viewportSize;
}

@property (nonatomic) bool accelerateTransitions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } activeFrame;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIColor *dictationColor;
@property (nonatomic) <SUICFlamesViewProvidingDelegate> *flamesDelegate;
@property (nonatomic) bool flamesPaused;
@property (nonatomic) bool freezesAura;
@property (readonly) unsigned long long hash;
@property (nonatomic) double horizontalScaleFactor;
@property (nonatomic, readonly) bool isRenderingEnabled;
@property (nonatomic) long long mode;
@property (nonatomic, retain) UIImage *overlayImage;
@property (nonatomic) bool reduceFrameRate;
@property (nonatomic) bool reduceThinkingFramerate;
@property (nonatomic) bool renderInBackground;
@property (nonatomic) bool showAura;
@property (nonatomic) long long state;
@property (readonly) Class superclass;

+ (id)_indexCache;
+ (bool)_supportsAdaptiveFramerate;
+ (Class)layerClass;
+ (void)prewarmShadersForScreen:(id)arg1 activeFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fidelity:(long long)arg3;
+ (void)prewarmShadersForScreen:(id)arg1 initialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 activeFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 fidelity:(long long)arg4 prewarmInBackground:(bool)arg5;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 fidelity:(long long)arg3;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 fidelity:(long long)arg3 prewarmInBackground:(bool)arg4;
+ (void)setIndexCacheSize:(unsigned long long)arg1;

- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (double)_currentDisplayScale;
- (float)_currentMicPowerLevel;
- (bool)_deviceNeeds2xFlamesWithCurrentScale:(double)arg1;
- (void)_didFinishTransition;
- (void)_didSkipFrameUpdateWithReason:(id)arg1 andCount:(unsigned long long)arg2;
- (id)_from:(id)arg1 getRenderPipeline:(id)arg2 err:(id*)arg3;
- (int)_generateIndicesForNumCircleShapes:(int)arg1 withMaxSubdivisionLevel:(float)arg2 startingWithNumSubdivisionLevel:(float)arg3 forIndices:(unsigned int**)arg4 atStartIndex:(int)arg5 withFill:(bool)arg6 withCullingForAura:(bool)arg7 forVertices:(struct { }*)arg8;
- (bool)_initMetalAndSetupDisplayLink:(bool)arg1;
- (bool)_isOriginatingProcessInBackground;
- (id)_lazy_commandQueue;
- (bool)_loadPipelineLibraries;
- (id)_metalLayer;
- (unsigned int)_numVerticesPerCircle;
- (void)_predeterminedVertexPositionForAuraWithPolarVertex;
- (long long)_preferredFramesPerSecond;
- (void)_prewarmShaders;
- (void)_reduceMotionStatusChanged:(id)arg1;
- (bool)_resizeFromLayer:(id)arg1;
- (void)_setPreferredFramesPerSecond;
- (void)_setValuesForFidelity:(long long)arg1;
- (void)_setupDisplayLink;
- (bool)_setupVertexBuffer;
- (void)_tearDownDisplayLink;
- (void)_updateCurveLayer:(id)arg1;
- (void)_updateDisplayLinkPausedState;
- (void)_updateOrthoProjection;
- (bool)accelerateTransitions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })activeFrame;
- (void)dealloc;
- (id)dictationColor;
- (void)didMoveToSuperview;
- (void)fadeOutCurrentAura;
- (id)flamesDelegate;
- (bool)flamesPaused;
- (bool)freezesAura;
- (double)horizontalScaleFactor;
- (bool)inDictationMode;
- (bool)inSiriMode;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 screen:(id)arg2 fidelity:(long long)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 screenScale:(double)arg2 fidelity:(long long)arg3;
- (bool)isRenderingEnabled;
- (void)layoutSubviews;
- (long long)mode;
- (id)overlayImage;
- (void)prewarmShadersForCurrentMode;
- (bool)reduceFrameRate;
- (bool)reduceThinkingFramerate;
- (bool)renderInBackground;
- (void)resetAndReinitialize:(bool)arg1;
- (void)setAccelerateTransitions:(bool)arg1;
- (void)setActiveFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDictationColor:(id)arg1;
- (void)setFlamesDelegate:(id)arg1;
- (void)setFlamesPaused:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFreezesAura:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHorizontalScaleFactor:(double)arg1;
- (void)setMode:(long long)arg1;
- (void)setOverlayImage:(id)arg1;
- (void)setReduceFrameRate:(bool)arg1;
- (void)setReduceThinkingFramerate:(bool)arg1;
- (void)setRenderInBackground:(bool)arg1;
- (void)setRenderingEnabled:(bool)arg1 forReason:(id)arg2;
- (void)setShowAura:(bool)arg1;
- (void)setState:(long long)arg1;
- (bool)showAura;
- (long long)state;
- (void)traitCollectionDidChange:(id)arg1;

@end
