
@interface FCUIActivityControl : UIControl <FCUIActivityDisplaying, FCUIAnimatedTransitionParticipating, FCUIContentSizeCategoryAdjusting, FCUIExpandingContracting, UIPointerInteractionDelegate> {
    <FCActivityDescribing> * _activityDescription;
    UIImageView * _activityIconImageView;
    FCUICAPackageView * _activityIconPackageView;
    UILabel * _activityTitleLabel;
    bool  _adjustsFontForContentSizeCategory;
    UIView * _backgroundView;
    UIView * _contentView;
    long long  _controlSize;
    long long  _controlStyle;
    UILabel * _detailLabel;
    NSStringDrawingContext * _drawingContext;
    bool  _drawingSelectedAppearance;
    MTVisualStylingProvider * _glyphVisualStylingProvider;
    FCUIActivityControlMenuView * _menuView;
    FCUIOptionsControl * _optionsButton;
    NSString * _preferredContentSizeCategory;
    bool  _selectionHidden;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _targetContainerBounds;
    bool  _textLayoutDisabled;
    MTVisualStylingProvider * _textVisualStylingProvider;
}

@property (nonatomic, readonly, copy) NSString *activityColorName;
@property (nonatomic, readonly, copy) NSDate *activityCreationDate;
@property (nonatomic, copy) <FCActivityDescribing> *activityDescription;
@property (nonatomic, readonly, copy) NSString *activityDetailText;
@property (nonatomic, readonly, copy) NSString *activityDisplayName;
@property (nonatomic, copy) UIImage *activityIcon;
@property (nonatomic, readonly, copy) NSString *activityIdentifier;
@property (nonatomic, readonly, copy) NSArray *activityLifetimeDescriptions;
@property (nonatomic, readonly, copy) NSString *activityLifetimesAlternativeDescription;
@property (nonatomic, readonly) long long activitySemanticType;
@property (nonatomic, readonly, copy) NSURL *activitySettingsURL;
@property (nonatomic, readonly, copy) NSURL *activitySetupURL;
@property (nonatomic, readonly, copy) NSString *activitySymbolImageName;
@property (nonatomic, readonly, copy) NSUUID *activityUniqueIdentifier;
@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property (getter=isContracted, nonatomic) bool contracted;
@property (nonatomic, readonly) long long controlStyle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) UIAction *defaultAction;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSString *detailText;
@property (getter=isExpanded, nonatomic) bool expanded;
@property (nonatomic, copy) UIAction *footerAction;
@property (nonatomic, readonly) UIGestureRecognizer *gestureRecognizerForExclusionRelationships;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, copy) NSString *menuAlternativeDescription;
@property (nonatomic, copy) NSArray *menuItemActions;
@property (nonatomic, readonly, copy) NSArray *menuItemElements;
@property (nonatomic, copy) UIAction *optionsAction;
@property (getter=isPlaceholder, nonatomic, readonly) bool placeholder;
@property (nonatomic, copy) NSString *preferredContentSizeCategory;
@property (getter=isSelected, nonatomic) bool selected;
@property (getter=isSelectionHidden, nonatomic) bool selectionHidden;
@property (readonly) Class superclass;

+ (id)_preferredFont:(bool)arg1 textStyle:(id)arg2 weight:(double)arg3 additionalTraits:(unsigned int)arg4;

- (void).cxx_destruct;
- (id)_activityDetailText;
- (id)_activityIconTintColorForSelectedAppearance:(bool)arg1;
- (void)_configureActivityIconImageViewIfNecessaryForReference:(bool)arg1;
- (void)_configureActivityTitleLabelIfNecessary;
- (void)_configureBackgroundViewIfNecesssary;
- (void)_configureContentViewIfNecessary;
- (void)_configureDetailLabelIfNecessary;
- (void)_configureGlyphVisualStylingProviderIfNecessary;
- (void)_configureMenuViewIfNecessary;
- (void)_configureOptionsButtonIfNecessary;
- (void)_configureTextVisualStylingProviderIfNecessary;
- (double)_cornerRadiusForControlFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_detailLabelVisualStyleForHighlightState:(bool)arg1;
- (double)_effectiveGlyphPointSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_glyphFrameForLayoutFrame:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 sizeThatFits:(struct CGSize { double x1; double x2; })arg2;
- (id)_highlightingBackgroundView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_iconLayoutFrameForControlFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isRTL:(bool)arg2 controlSize:(long long)arg3;
- (bool)_isBackgroundViewHighlighted;
- (bool)_isDrawingSelectedAppearance;
- (bool)_needsTextAttributesUpdate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_optionsButtonLayoutFrameForControlFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isRTL:(bool)arg2;
- (long long)_optionsControlTypeForControlStyle:(long long)arg1;
- (long long)_recipe;
- (double)_scaledValueForValue:(double)arg1;
- (void)_setActivityIcon:(id)arg1 forReference:(bool)arg2;
- (void)_setActivityIconPackageView:(id)arg1;
- (void)_setBackgroundViewHighlighted:(bool)arg1;
- (void)_setDrawingSelectedAppearance:(bool)arg1;
- (void)_setNeedsTextAttributesUpdate;
- (void)_setTextLayoutDisabled:(bool)arg1;
- (struct CGSize { double x1; double x2; })_sizeThatFits:(struct CGSize { double x1; double x2; })arg1 withControlSize:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_textFrameForControlFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 iconLayoutFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isRTL:(bool)arg3 controlSize:(long long)arg4;
- (long long)_titleLabelVisualStyleForHighlightState:(bool)arg1;
- (void)_updateAccessibilityIdentifier;
- (void)_updateActivityDetail;
- (void)_updateActivityIcon;
- (void)_updateActivityTitle;
- (void)_updateDrawingSelectedAppearance;
- (void)_updateTextAttributes;
- (void)_updateTextAttributesForActivityItemImageView;
- (void)_updateTextAttributesForActivityTitleLabel;
- (void)_updateTextAttributesForDetailLabel;
- (void)_updateTextAttributesIfNecessary;
- (void)_updateVisualStylingOfView:(id)arg1 style:(long long)arg2 visualStylingProvider:(id)arg3 outgoingProvider:(id)arg4;
- (long long)_userInterfaceStyleForSelectedAppearance:(bool)arg1;
- (void)_visualStylingProviderDidChange:(id)arg1 forCategory:(long long)arg2 outgoingProvider:(id)arg3;
- (id)activityColorName;
- (id)activityCreationDate;
- (id)activityDescription;
- (id)activityDetailText;
- (id)activityDisplayName;
- (id)activityIcon;
- (id)activityIdentifier;
- (id)activityLifetimeDescriptions;
- (id)activityLifetimesAlternativeDescription;
- (long long)activitySemanticType;
- (id)activitySettingsURL;
- (id)activitySetupURL;
- (id)activitySymbolImageName;
- (id)activityUniqueIdentifier;
- (void)addAction:(id)arg1 forControlEvents:(unsigned long long)arg2;
- (bool)adjustForContentSizeCategoryChange;
- (bool)adjustsFontForContentSizeCategory;
- (long long)controlStyle;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)defaultAction;
- (id)description;
- (id)detailText;
- (id)footerAction;
- (id)gestureRecognizerForExclusionRelationships;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)initWithActivityDescription:(id)arg1;
- (id)initWithActivityDescription:(id)arg1 style:(long long)arg2;
- (bool)isContracted;
- (bool)isExpanded;
- (bool)isPlaceholder;
- (bool)isSelectionHidden;
- (void)layoutSubviews;
- (id)menuAlternativeDescription;
- (id)menuItemActions;
- (id)menuItemElements;
- (id)optionsAction;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;
- (id)preferredContentSizeCategory;
- (void)setActivityDescription:(id)arg1;
- (void)setActivityIcon:(id)arg1;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setContracted:(bool)arg1;
- (void)setDefaultAction:(id)arg1;
- (void)setDetailText:(id)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setExpanded:(bool)arg1 withTransitionCoordinator:(id)arg2;
- (void)setFooterAction:(id)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setMenuAlternativeDescription:(id)arg1;
- (void)setMenuItemActions:(id)arg1;
- (void)setOptionsAction:(id)arg1;
- (void)setPreferredContentSizeCategory:(id)arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelectionHidden:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)visualStylingProviderForCategory:(long long)arg1;
- (void)willPresent:(bool)arg1 withTargetContainerBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 transitionCoordinator:(id)arg3;

@end
