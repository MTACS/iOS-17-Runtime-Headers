
@interface WPDClient : NSObject <WPDClientProtocol, WPXPCDaemonProtocol> {
    double  _advTimeout;
    NSMutableDictionary * _advertTimerState;
    NSMutableDictionary * _advertTimers;
    NSObject<OS_voucher> * _advertVoucher;
    WPDAdvertisingManager * _advertisingManager;
    NSString * _bundleID;
    bool  _canDisableScans;
    NSString * _clientTypeString;
    NSUUID * _clientUUID;
    NSXPCConnection * _conn;
    NSMutableDictionary * _connectionTimer;
    NSMutableDictionary * _connections;
    <WPDClientDelegate> * _delegate;
    NSMutableSet * _endpointsSet;
    bool  _entitledForObjectDiscovery;
    bool  _entitledForRanging;
    bool  _entitledForZones;
    long long  _holdVouchers;
    NSUUID * _identifier;
    bool  _isObjectDiscovery;
    bool  _isTestModeClient;
    NSMutableSet * _lePipePeersSet;
    NSString * _machName;
    NSObject<OS_dispatch_queue> * _messageQueue;
    WPDObjectDiscoveryManager * _objectDiscoveryManager;
    bool  _pendingSent;
    WPDPipeManager * _pipeManager;
    bool  _portTickled;
    int  _processID;
    NSString * _processName;
    bool  _registered;
    bool  _scanDenylisted;
    WPDScanManager * _scanManager;
    double  _scanTimeout;
    NSMutableDictionary * _scanTimers;
    NSObject<OS_voucher> * _scanVoucher;
    bool  _scansOff;
    WPDaemonServer * _server;
    NSObject<OS_dispatch_queue> * _serverQueue;
    bool  _supportsObjectDiscovery;
    bool  _supportsRanging;
    unsigned long long  _wpDClientSignPostID;
    WPDZoneManager * _zoneManager;
}

@property double advTimeout;
@property (retain) NSMutableDictionary *advertTimerState;
@property (retain) NSMutableDictionary *advertTimers;
@property (nonatomic, retain) NSObject<OS_voucher> *advertVoucher;
@property WPDAdvertisingManager *advertisingManager;
@property (retain) NSString *bundleID;
@property bool canDisableScans;
@property (retain) NSString *clientTypeString;
@property (retain) NSUUID *clientUUID;
@property (retain) NSXPCConnection *conn;
@property (retain) NSMutableDictionary *connectionTimer;
@property (retain) NSMutableDictionary *connections;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) <WPDClientDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (retain) NSMutableSet *endpointsSet;
@property bool entitledForObjectDiscovery;
@property bool entitledForRanging;
@property bool entitledForZones;
@property (readonly) unsigned long long hash;
@property long long holdVouchers;
@property (retain) NSUUID *identifier;
@property bool isObjectDiscovery;
@property bool isTestModeClient;
@property (retain) NSMutableSet *lePipePeersSet;
@property (retain) NSString *machName;
@property (retain) NSObject<OS_dispatch_queue> *messageQueue;
@property WPDObjectDiscoveryManager *objectDiscoveryManager;
@property bool pendingSent;
@property WPDPipeManager *pipeManager;
@property bool portTickled;
@property int processID;
@property (retain) NSString *processName;
@property bool registered;
@property bool scanDenylisted;
@property WPDScanManager *scanManager;
@property double scanTimeout;
@property (retain) NSMutableDictionary *scanTimers;
@property (nonatomic, retain) NSObject<OS_voucher> *scanVoucher;
@property bool scansOff;
@property (readonly) WPDaemonServer *server;
@property (readonly) NSObject<OS_dispatch_queue> *serverQueue;
@property (readonly) Class superclass;
@property (readonly) bool supportsObjectDiscovery;
@property (readonly) bool supportsRanging;
@property WPDZoneManager *zoneManager;

+ (id)approvedBundleIDs;
+ (id)approvedProcesses;
+ (bool)enableScanAdvertVouchers;
+ (void)generateStateDump;
+ (void)initialize;
+ (id)unknownUseCases;

- (void).cxx_destruct;
- (void)_signpostBegin;
- (void)_signpostEnd;
- (void)addCharacteristic:(id)arg1 forService:(id)arg2;
- (double)advTimeout;
- (id)advertTimerState;
- (id)advertTimers;
- (id)advertVoucher;
- (void)advertisingFailedToStart:(id)arg1 ofType:(unsigned char)arg2;
- (id)advertisingManager;
- (void)advertisingPendingOfType:(unsigned char)arg1;
- (void)advertisingStartedOfType:(unsigned char)arg1;
- (void)advertisingStartedOfTypeAt:(unsigned char)arg1;
- (void)advertisingStoppedOfType:(unsigned char)arg1 withError:(id)arg2;
- (void)anyDiscoveredDevice:(id)arg1;
- (void)bandwidthStateUpdated:(id)arg1;
- (id)bundleID;
- (bool)canDisableScans;
- (void)cancelConnectionTimer:(id)arg1;
- (void)central:(id)arg1 subscribed:(bool)arg2 toCharacteristic:(id)arg3 inService:(id)arg4;
- (void)checkAllowDuplicates:(id /* block */)arg1;
- (void)checkEntitlements;
- (void)clearDuplicateFilterCache:(id)arg1;
- (void)clearDuplicateFilterCache_async:(id)arg1;
- (id)clientTypeString;
- (id)clientUUID;
- (id)conn;
- (void)connectToPeer:(id)arg1 withOptions:(id)arg2;
- (void)connectedDevice:(id)arg1 withError:(id)arg2 shouldDiscover:(bool)arg3;
- (void)connectedDeviceOverLEPipe:(id)arg1;
- (id)connectionForUUID:(id)arg1;
- (id)connectionTimer;
- (id)connections;
- (void)createdConnection:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)destroy;
- (void)destroy_async;
- (void)disableScanning;
- (void)disconnectFromPeer:(id)arg1;
- (void)disconnectedDeviceOverLEPipe:(id)arg1 withError:(id)arg2;
- (void)disconnectedPeer:(id)arg1 error:(id)arg2;
- (void)discoverCharacteristicsAndServices:(id)arg1 forPeripheral:(id)arg2;
- (void)discoveredCharacteristicsAndServices:(id)arg1 forPeripheral:(id)arg2;
- (void)discoveredDevice:(id)arg1;
- (void)discoveredDevices:(id)arg1;
- (void)dumpDaemonState;
- (void)enableRanging:(bool)arg1 reply:(id /* block */)arg2;
- (void)enableTestMode;
- (void)endTestMode;
- (id)endpointsSet;
- (void)enteredZone:(id)arg1 manufacturerData:(id)arg2;
- (bool)entitledForObjectDiscovery;
- (bool)entitledForRanging;
- (bool)entitledForZones;
- (void)exitedZone:(id)arg1;
- (void)foundPeer:(id)arg1 ofType:(unsigned char)arg2;
- (void)generateStateDump;
- (void)getAllTrackedZones;
- (id)getManager;
- (void)getPowerLogStats:(id /* block */)arg1;
- (long long)holdVouchers;
- (id)identifier;
- (id)initWithXPCConnection:(id)arg1 server:(id)arg2;
- (bool)isObjectDiscovery;
- (void)isRangingEnabledReply:(id /* block */)arg1;
- (bool)isTestModeClient;
- (id)lePipePeersSet;
- (void)listenToBandwidthNotifications;
- (void)lostPeer:(id)arg1 ofType:(unsigned char)arg2;
- (id)machName;
- (id)messageQueue;
- (void)notifyClientStateChange:(long long)arg1 Restricted:(bool)arg2;
- (id)objectDiscoveryManager;
- (void)overrideAdvTimeout:(double)arg1;
- (void)overrideScanTimeout:(double)arg1;
- (void)peerTrackingAvailable;
- (void)peerTrackingFull;
- (bool)pendingSent;
- (id)pipeManager;
- (bool)portTickled;
- (int)processID;
- (id)processName;
- (void)queueBlock:(id /* block */)arg1;
- (void)rangingEnabled:(bool)arg1 withError:(id)arg2;
- (void)readyForDataTransfer;
- (void)receivedData:(id)arg1 fromCharacteristic:(id)arg2 inService:(id)arg3 forPeripheral:(id)arg4;
- (void)receivedData:(id)arg1 fromEndpoint:(id)arg2 forPeripheral:(id)arg3;
- (void)receivedTestResponse:(id)arg1;
- (void)registerEndpoint:(id)arg1 requireAck:(bool)arg2 requireEncryption:(bool)arg3;
- (void)registerForAnyScanResults:(bool)arg1;
- (void)registerWithDaemon:(id)arg1 forProcess:(id)arg2 machName:(id)arg3 holdVouchers:(long long)arg4;
- (bool)registered;
- (void)resetConnection;
- (void)resumeCommunicationWithConnection:(id)arg1 andProcessID:(int)arg2;
- (bool)scanDenylisted;
- (id)scanManager;
- (double)scanTimeout;
- (id)scanTimers;
- (id)scanVoucher;
- (bool)scansOff;
- (void)sendDataToCharacteristic:(id)arg1 inService:(id)arg2 forPeer:(id)arg3;
- (void)sendDatatoLePipe:(id)arg1 forPeer:(id)arg2;
- (void)sendRegisteredWithDaemonAndContinuingSession:(bool)arg1;
- (void)sendTestRequest:(id)arg1;
- (void)sentData:(id)arg1 forCharacteristic:(id)arg2 inService:(id)arg3 forPeripheral:(id)arg4 withError:(id)arg5;
- (void)sentData:(id)arg1 toEndpoint:(id)arg2 forPeripheral:(id)arg3 withError:(id)arg4;
- (id)server;
- (id)serverQueue;
- (void)setAdvTimeout:(double)arg1;
- (void)setAdvertTimerState:(id)arg1;
- (void)setAdvertTimers:(id)arg1;
- (void)setAdvertVoucher:(id)arg1;
- (void)setAdvertisingManager:(id)arg1;
- (void)setBundleID:(id)arg1;
- (void)setCanDisableScans:(bool)arg1;
- (void)setClientTypeString:(id)arg1;
- (void)setClientUUID:(id)arg1;
- (void)setConn:(id)arg1;
- (void)setConnectionTimer:(id)arg1;
- (void)setConnections:(id)arg1;
- (void)setEndpointsSet:(id)arg1;
- (void)setEntitledForObjectDiscovery:(bool)arg1;
- (void)setEntitledForRanging:(bool)arg1;
- (void)setEntitledForZones:(bool)arg1;
- (void)setHoldVouchers:(long long)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIsObjectDiscovery:(bool)arg1;
- (void)setIsTestModeClient:(bool)arg1;
- (void)setLePipePeersSet:(id)arg1;
- (void)setMachName:(id)arg1;
- (void)setMessageQueue:(id)arg1;
- (void)setObjectDiscoveryManager:(id)arg1;
- (void)setPendingSent:(bool)arg1;
- (void)setPipeManager:(id)arg1;
- (void)setPortTickled:(bool)arg1;
- (void)setProcessID:(int)arg1;
- (void)setProcessName:(id)arg1;
- (void)setRegistered:(bool)arg1;
- (void)setScanDenylisted:(bool)arg1;
- (void)setScanManager:(id)arg1;
- (void)setScanTimeout:(double)arg1;
- (void)setScanTimers:(id)arg1;
- (void)setScanVoucher:(id)arg1;
- (void)setScansOff:(bool)arg1;
- (void)setZoneManager:(id)arg1;
- (void)setupConnection;
- (void)shouldSubscribe:(bool)arg1 toPeer:(id)arg2 withCharacteristic:(id)arg3 inService:(id)arg4;
- (void)startAdvertising:(id)arg1;
- (void)startAdvertising:(id)arg1 reply:(id /* block */)arg2;
- (void)startAdvertising_async:(id)arg1;
- (void)startScanning:(id)arg1;
- (void)startScanning_async:(id)arg1;
- (void)startTrackingPeerWithRequest:(id)arg1;
- (void)startTrackingZone:(id)arg1;
- (void)stopAdvertising:(id)arg1;
- (void)stopAdvertising_async:(id)arg1;
- (void)stopScanning:(id)arg1;
- (void)stopScanning_async:(id)arg1;
- (void)stopScans;
- (void)stopTrackingAllZones;
- (void)stopTrackingPeerWithRequest:(id)arg1;
- (void)stopTrackingZones:(id)arg1;
- (void)stoppedTrackingPeer:(id)arg1 ofType:(unsigned char)arg2;
- (bool)supportsObjectDiscovery;
- (bool)supportsRanging;
- (void)tickleMachPort;
- (void)unregisterEndpoint:(id)arg1;
- (void)updatedNotificationState:(bool)arg1 forCharacteristic:(id)arg2 inService:(id)arg3 withPeripheral:(id)arg4;
- (void)verifyApprovedUseCase;
- (id)xpcConnectionForClient;
- (id)zoneManager;

@end
