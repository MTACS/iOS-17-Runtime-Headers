
@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent> {
    bool  _applyingChangeSessionUpdate;
    bool  _batchedTransactionDequeueIsScheduled;
    NSMutableArray * _batchedTransactions;
    NSObject<OS_dispatch_queue> * _batchedTransactionsQueue;
    CPLEngineScopeCleanupTasks * _cleanupTasks;
    CPLEngineCloudCache * _cloudCache;
    CPLEngineDerivativesCache * _derivativesCache;
    NSArray * _disabledFeatures;
    bool  _discardUnacknowledgedBatchOnTransactionFail;
    bool  _dontDelayChangeSessionUpdate;
    CPLEngineResourceDownloadQueue * _downloadQueue;
    CPLEngineLibrary * _engineLibrary;
    bool  _hasUpdatedDisabledFeatures;
    CPLEngineIDMapping * _idMapping;
    CPLEngineIgnoredRecords * _ignoredRecords;
    bool  _isUpdatingDisabledFeatures;
    NSSet * _lastInvalidRecordScopedIdentifiers;
    NSDate * _lastInvalidRecordsDate;
    CPLEngineOutgoingResources * _outgoingResources;
    CPLEnginePendingRecordChecks * _pendingRecordChecks;
    CPLResetTracker * _pendingTracker;
    double  _pendingUpdateInterval;
    NSObject<OS_dispatch_queue> * _pendingUpdateQueue;
    NSObject<OS_dispatch_source> * _pendingUpdateTimer;
    CPLPlatformObject * _platformObject;
    CPLSyncSessionPredictor * _predictor;
    CPLEngineChangePipe * _pullQueue;
    CPLEnginePushRepository * _pushRepository;
    CPLEngineQuarantinedRecords * _quarantinedRecords;
    CPLEngineRemappedRecords * _remappedRecords;
    NSMutableArray * _resetEvents;
    NSURL * _resetEventsURL;
    CPLEngineResourceStorage * _resourceStorage;
    CPLEngineRevertRecords * _revertRecords;
    bool  _scheduleDisabledFeatureUpdateOnWriteSuccess;
    bool  _schedulePendingUpdateApplyOnWriteSuccess;
    bool  _schedulePullFromClient;
    bool  _scheduleSetupOnWriteSuccess;
    CPLEngineScopeStorage * _scopes;
    NSString * _sharingScopeIdentifier;
    bool  _shouldEnableScopeListSyncOnWriteSuccess;
    bool  _shouldSyncScopeList;
    NSObject<OS_dispatch_queue> * _shouldSyncScopeListQueue;
    bool  _shouldTriggerCompleteResetSyncAfterDisabledFeaturesUpdate;
    bool  _shouldTriggerResetSyncAfterDisabledFeaturesUpdate;
    unsigned long long  _state;
    CPLEngineStatusCenter * _statusCenter;
    NSHashTable * _storages;
    CPLRecordStorageView * _transactionClientCacheView;
    bool  _transactionClientCacheViewHasPushRepository;
    NSMutableDictionary * _transactionNewPredictions;
    CPLTransportScopeMapping * _transactionTransportScopeMapping;
    CPLEngineTransientRepository * _transientPullRepository;
    CPLChangeBatch * _unacknowledgedBatch;
    bool  _unschedulePendingUpdateApplyOnWriteSuccess;
}

@property (nonatomic, readonly) CPLEngineScopeCleanupTasks *cleanupTasks;
@property (nonatomic, readonly) CPLEngineCloudCache *cloudCache;
@property (nonatomic, readonly) id corruptionInfo;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) CPLEngineDerivativesCache *derivativesCache;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSArray *disabledFeatures;
@property (nonatomic, readonly) CPLEngineResourceDownloadQueue *downloadQueue;
@property (nonatomic, readonly) CPLEngineLibrary *engineLibrary;
@property (nonatomic, readonly) bool hasPendingResetSync;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLEngineIDMapping *idMapping;
@property (nonatomic, readonly) CPLEngineIgnoredRecords *ignoredRecords;
@property (readonly) NSDate *libraryCreationDate;
@property (nonatomic, readonly) CPLEngineOutgoingResources *outgoingResources;
@property (nonatomic, readonly) CPLEnginePendingRecordChecks *pendingRecordChecks;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (nonatomic, readonly) CPLSyncSessionPredictor *predictor;
@property (nonatomic, readonly) CPLEngineChangePipe *pullQueue;
@property (nonatomic, readonly) NSArray *pushPullGatekeepers;
@property (nonatomic, readonly) CPLEnginePushRepository *pushRepository;
@property (nonatomic, readonly) bool pushRepositoryIsFull;
@property (nonatomic, readonly) CPLEngineQuarantinedRecords *quarantinedRecords;
@property (nonatomic, readonly) CPLEngineRemappedRecords *remappedRecords;
@property (nonatomic, readonly) CPLEngineResourceStorage *resourceStorage;
@property (nonatomic, readonly) CPLEngineRevertRecords *revertRecords;
@property (nonatomic, readonly) CPLEngineScopeStorage *scopes;
@property (nonatomic, readonly) NSString *sharingScopeIdentifier;
@property (nonatomic, readonly) bool shouldGenerateDerivatives;
@property (readonly) bool shouldSyncScopeList;
@property (nonatomic, readonly) bool shouldUpdateDisabledFeatures;
@property (nonatomic) unsigned long long state;
@property (nonatomic, readonly) CPLEngineStatusCenter *statusCenter;
@property (nonatomic, readonly) NSArray *storages;
@property (readonly) Class superclass;
@property (nonatomic, readonly) CPLRecordStorageView *transactionClientCacheView;
@property (nonatomic, readonly) CPLTransportScopeMapping *transactionTransportScopeMapping;
@property (nonatomic, readonly) CPLEngineTransientRepository *transientPullRepository;

+ (bool)dontBatchTransactions;
+ (id)platformImplementationProtocol;
+ (void)setDontBatchTransactions:(bool)arg1;
+ (id)stateDescriptionForState:(unsigned long long)arg1;
+ (id)storageNames;

- (void).cxx_destruct;
- (void)_addCleanupBlock:(id /* block */)arg1;
- (bool)_applyAndDiscardPendingUpdate:(id)arg1 error:(id*)arg2;
- (bool)_applyPendingUpdate:(id)arg1 error:(id*)arg2;
- (bool)_canHaveActivatedScope:(id)arg1 libraryOptions:(unsigned long long)arg2 error:(id*)arg3;
- (bool)_canRead;
- (bool)_canWrite;
- (void)_commitWriteTransaction:(id)arg1 commitError:(id)arg2;
- (id)_currentTransaction;
- (void)_dropTransactionClientCacheView;
- (void)_finishTransaction;
- (bool)_handleException:(id)arg1;
- (void)_loadResetEvents;
- (void)_performBarrierTransaction:(id)arg1 withBlock:(id /* block */)arg2;
- (void)_performTransaction:(id)arg1 withBlock:(id /* block */)arg2;
- (id)_performWriteTransactionByPassBlocker:(id)arg1 WithBlock:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)_reallySchedulePendingUpdateApply;
- (void)_reallyUnschedulePendingUpdateApply;
- (void)_removeTransactionOnCurrentThread:(id)arg1;
- (bool)_resetCompleteSyncStateIncludingIDMappingWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (bool)_resetCompleteSyncStateWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (id)_resetEventsDescriptions;
- (id)_resetEventsJSON;
- (bool)_resetGlobalStateWithError:(id*)arg1;
- (bool)_resetLocalSyncStateWithCause:(id)arg1 scope:(id)arg2 date:(id)arg3 error:(id*)arg4;
- (bool)_resetSyncAnchorWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (void)_scheduleBatchedTransactionsLocked;
- (void)_schedulePendingUpdateApply;
- (void)_setSharingScopeIdentifier:(id)arg1;
- (void)_setTransactionOnCurrentThread:(id)arg1;
- (bool)_shouldSyncScopeListWithOptions:(unsigned long long)arg1;
- (bool)_storeChangeSessionUpdate:(id)arg1 error:(id*)arg2;
- (void)_storeResetEvent:(id)arg1 scopeIdentifier:(id)arg2 date:(id)arg3 cause:(id)arg4;
- (void)_storeResetEvent:(id)arg1 scopeIdentifier:(id)arg2 date:(id)arg3 pending:(bool)arg4 cause:(id)arg5;
- (id)_storedDisabledFeatures;
- (void)_unschedulePendingUpdateApply;
- (void)_updateShouldSyncScopeList:(bool)arg1;
- (bool)addPushPullGatekeeper:(id)arg1 error:(id*)arg2;
- (bool)applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:(id)arg1 error:(id*)arg2;
- (void)assertCanRead;
- (void)assertCanWrite;
- (void)assertNoUnacknowledgedChanges;
- (bool)beginChangeSession:(id)arg1 withLibraryVersion:(id)arg2 resetTracker:(id)arg3 error:(id*)arg4;
- (void)blockWriteTransactionsWithCompletionHandler:(id /* block */)arg1;
- (bool)canActivateScope:(id)arg1 error:(id*)arg2;
- (bool)checkExpectedLibraryVersion:(id)arg1 error:(id*)arg2;
- (id)cleanupTasks;
- (bool)clearAllPushPullGatekeepersWithError:(id*)arg1;
- (id)clientCacheIdentifier;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)cloudCache;
- (id)componentName;
- (id)corruptionInfo;
- (id)createNewLibraryVersion;
- (bool)createStoragesDynamically:(id)arg1 error:(id*)arg2;
- (void)dealloc;
- (bool)deleteDynamicallyCreatedStorages:(id)arg1 error:(id*)arg2;
- (id)derivativesCache;
- (id)derivativesFilter;
- (id)description;
- (id)disabledFeatures;
- (id)downloadQueue;
- (void)dropSharingScopeIdentifier:(id)arg1;
- (void)dropUnacknowledgedBatch;
- (void)emergencyClose;
- (id)engineLibrary;
- (bool)forceApplyPendingChangeSessionUpdateWithError:(id*)arg1;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusWithCompletionHandler:(id /* block */)arg1;
- (bool)hasPendingChangeSessionUpdate;
- (bool)hasPendingResetSync;
- (bool)hasUnacknowledgedChanges;
- (id)idMapping;
- (id)ignoredRecords;
- (id)initWithEngineLibrary:(id)arg1;
- (bool)isClientInSyncWithClientCache;
- (bool)isFeatureDisabled:(id)arg1;
- (void)keepUnacknowledgedBatch:(id)arg1;
- (id)lastQuarantineCountReportDate;
- (id)libraryCreationDate;
- (unsigned long long)libraryOptions;
- (id)libraryVersion;
- (id)localResourceForCloudResource:(id)arg1 recordClass:(Class*)arg2;
- (void)markAsCorrupted;
- (id)newClientCacheViewUsesPushRepository:(bool*)arg1;
- (void)noteInvalidRecordScopedIdentifiersInPushSession:(id)arg1;
- (void)noteOtherResetEvent:(id)arg1 cause:(id)arg2;
- (void)notePushRepositoryStoredSomeChanges;
- (void)noteResetSyncFinished;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)outgoingResources;
- (id)pendingRecordChecks;
- (void)performBarrier;
- (void)performBatchedWriteTransactionBarrier;
- (void)performBatchedWriteTransactionBarrierWithCompletionBlock:(id /* block */)arg1;
- (void)performBatchedWriteTransactionWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (id)performReadTransactionWithBlock:(id /* block */)arg1;
- (id)performWriteTransactionByPassBlocker:(id)arg1 withBlock:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)performWriteTransactionWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (id)platformObject;
- (void)predictSyncSessionValue:(id)arg1 ofType:(id)arg2;
- (id)predictor;
- (id)pullQueue;
- (id)pushPullGatekeepers;
- (id)pushRepository;
- (bool)pushRepositoryIsFull;
- (id)quarantinedRecords;
- (void)registerStorage:(id)arg1;
- (id)remappedRecords;
- (bool)resetCompleteSyncStateIncludingIDMappingWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetLocalSyncStateWithCause:(id)arg1 date:(id)arg2 error:(id*)arg3;
- (bool)resetLocalSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetSyncAnchorWithCause:(id)arg1 error:(id*)arg2;
- (id)resourceStorage;
- (id)revertRecords;
- (id)scopes;
- (bool)setShouldUpdateDisabledFeaturesWithError:(id*)arg1;
- (void)setState:(unsigned long long)arg1;
- (id)sharingScopeIdentifier;
- (bool)shouldGenerateDerivatives;
- (bool)shouldSyncScopeList;
- (bool)shouldUpdateDisabledFeatures;
- (void)startVacuum;
- (unsigned long long)state;
- (id)statusCenter;
- (void)stopVacuum;
- (id)storages;
- (bool)storeChangeSessionUpdate:(id)arg1 error:(id*)arg2;
- (bool)storeClientIsInSyncWithClientCacheWithError:(id*)arg1;
- (bool)storeDerivativesFilter:(id)arg1 error:(id*)arg2;
- (bool)storeLastQuarantineCountReportDate:(id)arg1 error:(id*)arg2;
- (bool)storeLibraryVersion:(id)arg1 withError:(id*)arg2;
- (void)storeSharingScopeIdentifier:(id)arg1;
- (bool)storeUserIdentifier:(id)arg1 error:(id*)arg2;
- (void)testKey:(id)arg1 value:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)transactionClientCacheView;
- (void)transactionDidFinish;
- (id)transactionTransportScopeMapping;
- (id)transientPullRepository;
- (id)unacknowledgedChangeWithLocalScopedIdentifier:(id)arg1;
- (bool)updateDisabledFeatures:(id)arg1 didReset:(bool*)arg2 error:(id*)arg3;
- (bool)updateLibraryOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)userIdentifier;
- (void)wipeStoreAtNextOpeningWithReason:(id)arg1 completionBlock:(id /* block */)arg2;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end
