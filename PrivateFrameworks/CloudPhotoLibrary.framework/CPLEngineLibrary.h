
@interface CPLEngineLibrary : NSObject <CPLAbstractObject, CPLStatusDelegate> {
    NSHashTable * _attachedObjects;
    NSMutableDictionary * _blocksToDispatchWhenLibraryAttaches;
    NSDate * _cachedLastQuarantineCountReportDate;
    NSURL * _clientLibraryBaseURL;
    bool  _closed;
    NSObject<OS_dispatch_queue> * _closingQueue;
    NSURL * _cloudLibraryResourceStorageURL;
    NSURL * _cloudLibraryStateStorageURL;
    NSArray * _components;
    CPLConfiguration * _configuration;
    NSString * _currentClosingComponentName;
    CPLEngineFeedbackManager * _feedback;
    NSCountedSet * _holdTestAssertions;
    NSHashTable * _invalidAttachedObjects;
    bool  _isSystemLibrary;
    NSString * _libraryIdentifier;
    bool  _libraryIsCorrupted;
    unsigned long long  _libraryOptions;
    NSDate * _mostRecentScopeStatusCountsDidChangeNotificationDate;
    NSError * _openingError;
    <CPLEngineLibraryOwner> * _owner;
    id /* block */  _pingRequestToPushAllChanges;
    CPLPlatformObject * _platformObject;
    NSObject<OS_dispatch_queue> * _queue;
    CPLEngineScheduler * _scheduler;
    CPLStatus * _status;
    CPLEngineStore * _store;
    <CPLEngineLibrarySupervisor> * _supervisor;
    CPLEngineSyncManager * _syncManager;
    CPLEngineSystemMonitor * _systemMonitor;
    NSObject<OS_dispatch_source> * _timerForPushRepositoryFlagsCountsHaveChanged;
    unsigned long long  _totalAssetCount;
    bool  _totalAssetCountHasBeenCalculated;
    CPLEngineTransport * _transport;
}

@property (nonatomic) long long busyState;
@property (nonatomic, readonly, copy) NSURL *clientLibraryBaseURL;
@property (nonatomic, readonly, copy) NSURL *cloudLibraryResourceStorageURL;
@property (nonatomic, readonly, copy) NSURL *cloudLibraryStateStorageURL;
@property (nonatomic, readonly) CPLConfiguration *configuration;
@property (nonatomic) bool containerHasBeenWiped;
@property (readonly) NSString *currentClosingComponentName;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long estimatedCountOfRemainingRecordsDuringSharedLibraryExit;
@property (nonatomic, copy) NSDate *exitDeleteTime;
@property (nonatomic, readonly) CPLEngineFeedbackManager *feedback;
@property (nonatomic) bool hasChangesToProcess;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool iCloudLibraryClientIsNotAuthenticated;
@property (nonatomic) bool iCloudLibraryClientVersionTooOld;
@property (nonatomic) bool iCloudLibraryExists;
@property (nonatomic) bool iCloudLibraryHasBeenWiped;
@property (nonatomic, readonly) NSDate *initialSyncDate;
@property (nonatomic) bool isExceedingQuota;
@property (nonatomic) bool isExceedingSharedLibraryQuota;
@property (nonatomic) bool isStuckInExitForSharedLibrary;
@property (nonatomic, readonly) bool isSystemLibrary;
@property (nonatomic, readonly, copy) NSString *libraryIdentifier;
@property (nonatomic, readonly) bool libraryIsCorrupted;
@property (nonatomic, readonly) unsigned long long libraryOptions;
@property (nonatomic) <CPLEngineLibraryOwner> *owner;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (nonatomic, readonly) CPLEngineScheduler *scheduler;
@property (nonatomic) long long serverFeatureCompatibleVersion;
@property (nonatomic, readonly) CPLEngineStore *store;
@property (readonly) Class superclass;
@property (nonatomic, retain) <CPLEngineLibrarySupervisor> *supervisor;
@property (nonatomic, readonly) CPLEngineSyncManager *syncManager;
@property (nonatomic, readonly) CPLEngineSystemMonitor *systemMonitor;
@property (nonatomic, readonly) CPLEngineTransport *transport;
@property (getter=isUpgradeSuggestedToAccessAllPhotos, nonatomic) bool upgradeSuggestedToAccessAllPhotos;
@property (getter=isWalrusEnabled, nonatomic) bool walrusEnabled;

+ (id)platformImplementationProtocol;

- (void).cxx_destruct;
- (id)_allComponentsIncludingPlatformObjects:(bool)arg1 respondingToSelector:(SEL)arg2;
- (void)_cancelBlockWhenLibraryAttaches:(id)arg1;
- (void)_closeNextComponent:(id)arg1 deactivate:(bool)arg2 lastError:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_fillStatus:(id)arg1 forComponents:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_fillStatusArray:(id)arg1 forComponents:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_libraryObject;
- (void)_notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged;
- (void)_openNextComponent:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_performBlockWhenLibraryAttaches:(id /* block */)arg1;
- (void)_performBlockWithLibrary:(bool)arg1 enumerateAttachedObjects:(id /* block */)arg2;
- (void)_performPendingBlockForWhenLibraryAttaches;
- (void)_reportQuarantineCountIfNecessaryWithLastReportDate:(id)arg1;
- (void)_setCurrentClosingComponentName:(id)arg1;
- (void)_testKey:(id)arg1 value:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_updateTotalAssetCountWithAssetCounts:(id)arg1;
- (void)attachObject:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)blockEngineWithReason:(id)arg1 onlyIfBlocked:(bool)arg2 block:(id /* block */)arg3;
- (long long)busyState;
- (void)clientIsPushingChanges;
- (id)clientLibraryBaseURL;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)cloudLibraryResourceStorageURL;
- (id)cloudLibraryStateStorageURL;
- (id)componentName;
- (id)configuration;
- (bool)containerHasBeenWiped;
- (id)corruptionInfo;
- (id)currentClosingComponentName;
- (id)description;
- (void)detachObject:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)emergencyClose;
- (unsigned long long)estimatedCountOfRemainingRecordsDuringSharedLibraryExit;
- (id)exitDeleteTime;
- (id)feedback;
- (void)forceBackupWithActivity:(id)arg1 forceClientPush:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)forceFetchAccountFlags;
- (void)getListOfComponentsWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusArrayForComponents:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getStatusForComponents:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)hasAccountFlagsData;
- (bool)hasAssetCountOnServer;
- (bool)hasChangesToProcess;
- (bool)iCloudLibraryClientIsNotAuthenticated;
- (bool)iCloudLibraryClientVersionTooOld;
- (bool)iCloudLibraryExists;
- (bool)iCloudLibraryHasBeenWiped;
- (id)initWithClientLibraryBaseURL:(id)arg1 cloudLibraryStateStorageURL:(id)arg2 cloudLibraryResourceStorageURL:(id)arg3 libraryIdentifier:(id)arg4 options:(unsigned long long)arg5;
- (id)initialSyncDate;
- (bool)isExceedingQuota;
- (bool)isExceedingSharedLibraryQuota;
- (bool)isStuckInExitForSharedLibrary;
- (bool)isSystemLibrary;
- (bool)isUpgradeSuggestedToAccessAllPhotos;
- (bool)isWalrusEnabled;
- (id)libraryIdentifier;
- (bool)libraryIsCorrupted;
- (unsigned long long)libraryOptions;
- (void)markAttachedObjectAsInvalid:(id)arg1;
- (void)notifyAttachedObjectsHasStatusChanges;
- (void)notifyAttachedObjectsPullQueueIsFull;
- (void)notifyAttachedObjectsResourceDidDownloadInBackground:(id)arg1;
- (void)notifyAttachedObjectsResourceDidFailBackgroundDownloadOfResource:(id)arg1;
- (void)notifyAttachedObjectsSizeOfResourcesToUploadDidChangeToSize:(unsigned long long)arg1 sizeOfOriginalResourcesToUpload:(unsigned long long)arg2 numberOfImages:(unsigned long long)arg3 numberOfVideos:(unsigned long long)arg4 numberOfOtherItems:(unsigned long long)arg5;
- (void)notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged;
- (void)notifyAttachedObjectsUploadTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)notifyAttachedObjectsUploadTask:(id)arg1 didProgress:(float)arg2;
- (void)notifyAttachedObjectsUploadTaskDidStart:(id)arg1;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)owner;
- (void)performBlockOnLibrary:(id /* block */)arg1;
- (void)performMaintenanceCleanupWithCompletionHandler:(id /* block */)arg1;
- (id)platformObject;
- (void)provideCloudResource:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)provideRecordWithCloudScopeIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)provideScopeChangeForScopeWithIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)redactedDescription;
- (void)reportLibraryCorrupted;
- (void)reportQuarantineCountIfNecessary;
- (void)reportRadar:(unsigned long long)arg1;
- (void)reportUnsuccessfulSync;
- (void)requestAttachedLibrary;
- (void)requestClientToPushAllChangesWithCompletionHandler:(id /* block */)arg1;
- (id)scheduler;
- (long long)serverFeatureCompatibleVersion;
- (void)setBusyState:(long long)arg1;
- (void)setConnectedToNetwork:(bool)arg1 cellularIsRestricted:(bool)arg2 inAirplaneMode:(bool)arg3;
- (void)setContainerHasBeenWiped:(bool)arg1;
- (void)setEstimatedCountOfRemainingRecordsDuringSharedLibraryExit:(unsigned long long)arg1;
- (void)setExitDeleteTime:(id)arg1;
- (void)setHasCellularBudget:(bool)arg1 hasBatteryBudget:(bool)arg2 hasLowBatteryLevel:(bool)arg3 isConstrainedNetwork:(bool)arg4 isBlockedByLowPowerMode:(bool)arg5 hasHeavyResourceUsage:(bool)arg6 hasPoorNetworkQuality:(bool)arg7 hasModerateThermalPressure:(bool)arg8 hasThermalPressure:(bool)arg9 hasPoorSystemConditions:(bool)arg10 isBudgetValid:(bool)arg11 blockedReason:(long long)arg12 unBlockedReason:(long long)arg13;
- (void)setHasChangesToProcess:(bool)arg1;
- (void)setICloudLibraryClientIsNotAuthenticated:(bool)arg1;
- (void)setICloudLibraryClientVersionTooOld:(bool)arg1;
- (void)setICloudLibraryExists:(bool)arg1;
- (void)setICloudLibraryHasBeenWiped:(bool)arg1;
- (void)setIsExceedingQuota:(bool)arg1;
- (void)setIsExceedingSharedLibraryQuota:(bool)arg1;
- (void)setIsStuckInExitForSharedLibrary:(bool)arg1;
- (void)setLowDiskSpace:(bool)arg1 veryLowDiskSpace:(bool)arg2;
- (void)setOwner:(id)arg1;
- (void)setServerFeatureCompatibleVersion:(long long)arg1;
- (void)setSupervisor:(id)arg1;
- (void)setUpgradeSuggestedToAccessAllPhotos:(bool)arg1;
- (void)setWalrusEnabled:(bool)arg1;
- (void)startSyncSession;
- (void)statusDidChange:(id)arg1;
- (id)store;
- (id)supervisor;
- (id)syncManager;
- (id)systemMonitor;
- (void)testKey:(id)arg1 value:(id)arg2 completionHandler:(id /* block */)arg3;
- (unsigned long long)totalAssetCountOnServer;
- (id)transport;
- (void)updateAccountFlagsData:(id)arg1;
- (void)updateAssetCountsFromServer:(id)arg1;
- (void)updateBlockedMetrics:(bool)arg1 syncRequested:(bool)arg2;
- (void)updateDisabledFeatures:(id)arg1;
- (void)updateInitialSyncDate:(id)arg1;
- (void)updateLastSuccessfullSyncDate:(id)arg1;

@end
