
@interface CPLUploadPushedChangesTask : CPLEngineScopedTask <CPLBeforeUploadCheckItemsProvider> {
    <CPLBatchExtractionStrategyStorage> * _batchStorage;
    CPLChangeBatch * _batchToCommit;
    CPLBeforeUploadCheckItems * _checkItems;
    NSMutableDictionary * _cloudScopedIdentifiersToUploadResourceTaskErrors;
    unsigned long long  _countOfPushedChanges;
    CPLBatchExtractionStrategy * _currentStrategy;
    NSString * _currentTaskKey;
    bool  _deferredCancel;
    CPLDerivativesFilter * _derivativesFilter;
    bool  _didExtractOneBatch;
    CPLChangeBatch * _diffedBatch;
    <CPLEngineTransportFetchRecordsTask> * _fetchRecordsTask;
    bool  _hasCachedShouldCheckResourcesAhead;
    bool  _hasPushedSomeChanges;
    bool  _hasUploadedOneBatch;
    bool  _highPriority;
    NSMutableDictionary * _invalidTransportScopes;
    bool  _isUsingOverQuotaStrategy;
    unsigned long long  _lastReportedProgress;
    double  _latestApproximativeUploadRate;
    NSObject<OS_dispatch_queue> * _lock;
    unsigned long long  _maxBatchSize;
    bool  _mustConsiderOtherPriorities;
    NSMutableArray * _preparedUploadResourceTasks;
    CPLEnginePushRepository * _pushRepository;
    unsigned long long  _pushRepositoryPriority;
    unsigned long long  _recordCount;
    bool  _resetStrategy;
    long long  _ruleGroup;
    CPLEngineScheduler * _scheduler;
    NSString * _scopeIdentifier;
    CPLEngineScopeStorage * _scopes;
    CPLEngineScope * _sharedScope;
    bool  _shouldCheckResourcesAhead;
    bool  _shouldSetupEstimatedSize;
    double  _startOfDerivativesGeneration;
    double  _startOfIteration;
    <CPLEngineTransportGroup> * _storedTransportGroup;
    CPLRecordTargetMapping * _targetMapping;
    long long  _taskItem;
    NSDate * _taskStartDate;
    CPLEngineStoreTransaction * _transactionDuringItemsPreparation;
    CPLEngineTransport * _transport;
    <CPLEngineTransportGroup> * _transportGroup;
    CPLTransportScopeMapping * _transportScopeMapping;
    NSArray * _uploadResourceTasks;
    <CPLEngineTransportUploadBatchTask> * _uploadTask;
    bool  _wasBusy;
}

@property (readonly, copy) NSString *debugDescription;
@property (retain) <CPLUploadPushedChangesTaskDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool didUseOverQuotaStrategy;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool highPriority;
@property (nonatomic, readonly) unsigned long long maxBatchSize;
@property (nonatomic, readonly) CPLEnginePushRepository *pushRepository;
@property (nonatomic, readonly) unsigned long long pushRepositoryPriority;
@property (nonatomic, readonly) long long ruleGroup;
@property (nonatomic, readonly) CPLEngineScope *sharedScope;
@property (nonatomic, readonly) <CPLEngineTransportGroup> *storedTransportGroup;
@property (readonly) Class superclass;
@property (nonatomic, readonly) CPLTransportScopeMapping *transportScopeMapping;

+ (bool)disableOverQuotaRule;
+ (void)resetDisabledOverQuotaRule;
+ (void)setDisableOverQuotaRule:(bool)arg1;

- (void).cxx_destruct;
- (bool)_canUseOverQuotaRule;
- (void)_checkForRecordExistence;
- (void)_checkPrioritiesWithFetchCache:(id)arg1;
- (void)_clearUploadBatch;
- (void)_deleteGeneratedResourcesAfterError:(id)arg1;
- (void)_didFinishTaskWithKey:(id)arg1 error:(bool)arg2 cancelled:(bool)arg3;
- (void)_didStartTaskWithKey:(id)arg1 recordCount:(unsigned long long)arg2;
- (bool)_discardUploadedExtractedBatch:(id)arg1 error:(id*)arg2;
- (void)_excludeScopeFromMingling;
- (void)_extractAndUploadOneBatch;
- (void)_extractBatchWithTransaction:(id)arg1 andStore:(id)arg2;
- (void)_generateDerivativesForNextRecord:(id)arg1 usingDerivativesCache:(id)arg2 fetchCache:(id)arg3;
- (void)_generateNeededDerivativesWithFetchCache:(id)arg1;
- (bool)_markUploadedTasksDidFinishWithError:(id)arg1 transaction:(id)arg2 error:(id*)arg3;
- (void)_noteSuccessfulUpdateInTransaction:(id)arg1;
- (void)_popNextBatchAndContinue;
- (void)_prepareTransportGroupForOneBatch;
- (void)_prepareUploadBatch;
- (bool)_reenqueueExtractedBatchWithRejectedRecords:(id)arg1 extractedBatch:(id)arg2 error:(id*)arg3;
- (bool)_shouldNotTrustCloudCacheAfterError:(id)arg1;
- (bool)_shouldUploadBatchesWithDropReason:(id*)arg1 shouldQuarantineRecords:(bool*)arg2 inTransaction:(id)arg3;
- (void)_updateQuotaStrategyAfterSuccessInTransaction:(id)arg1;
- (void)_uploadBatchWithFetchCache:(id)arg1;
- (void)_uploadTaskDidFinishWithError:(id)arg1;
- (bool)_willNeedToAccessScopeWithIdentifier:(id)arg1 primaryScope:(bool)arg2 error:(id*)arg3;
- (id)availableResourceTypesToUploadForChange:(id)arg1;
- (void)cancel;
- (void)cancel:(bool)arg1;
- (bool)checkScopeIsValidInTransaction:(id)arg1;
- (bool)didUseOverQuotaStrategy;
- (bool)highPriority;
- (id)initWithEngineLibrary:(id)arg1 session:(id)arg2 clientCacheIdentifier:(id)arg3 scope:(id)arg4 transportScope:(id)arg5 storedTransportGroup:(id)arg6 sharedScope:(id)arg7 transportScopeMapping:(id)arg8 ruleGroup:(long long)arg9 highPriority:(bool)arg10 maxBatchSize:(unsigned long long)arg11 pushRepositoryPriority:(unsigned long long)arg12 pushRepository:(id)arg13;
- (bool)isCloudRecordWithScopedIdentifierShared:(id)arg1;
- (bool)isResourceDynamic:(id)arg1;
- (id)knownCloudRecordWithScopedIdentifier:(id)arg1;
- (void)launch;
- (unsigned long long)maxBatchSize;
- (id)pushRepository;
- (unsigned long long)pushRepositoryPriority;
- (long long)ruleGroup;
- (id)sharedScope;
- (id)storedTransportGroup;
- (id)taskIdentifier;
- (id)transportScopeMapping;
- (bool)willNeedToAccessRecordWithScopedIdentifier:(id)arg1 error:(id*)arg2;
- (id)willUploadCloudResource:(id)arg1 localResource:(id)arg2 error:(id*)arg3;

@end
