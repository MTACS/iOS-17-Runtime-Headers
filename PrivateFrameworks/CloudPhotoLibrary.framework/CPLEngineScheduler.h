
@interface CPLEngineScheduler : NSObject <CPLAbstractObject, CPLEngineComponent> {
    NSMutableSet * _blockWaiters;
    NSMutableDictionary * _blockedElements;
    NSCountedSet * _blockingElements;
    NSObject<OS_dispatch_queue> * _blockingLock;
    unsigned long long  _currentRequestGeneration;
    CPLSyncSession * _currentSession;
    unsigned long long  _currentSyncState;
    NSDate * _deferDate;
    bool  _delayedFirstSyncBecauseOfRapidLaunch;
    bool  _didWriteFirstSyncMarker;
    unsigned long long  _disablingMinglingCount;
    NSCountedSet * _disablingReasons;
    CPLEngineLibrary * _engineLibrary;
    unsigned long long  _foregroundCalls;
    double  _intervalForRetry;
    bool  _isOverridingForeground;
    unsigned long long  _lastRequestGeneration;
    NSArray * _lastScopeIdentifiersExcludedFromPushToTransport;
    NSArray * _lastScopeIdentifiersExludedFromMingling;
    NSArray * _lastSessionInformation;
    NSDate * _lastSuccessfulSyncSessionDate;
    NSDate * _lastSyncSessionDateCausedByForeground;
    bool  _needsToUpdateLastSyncDate;
    CPLSyncSession * _nextSession;
    bool  _opened;
    unsigned long long  _pendingRequiredFirstState;
    CPLPlatformObject * _platformObject;
    NSDate * _preparingFirstSessionStartDate;
    NSDate * _proposedScheduleDate;
    bool  _protectAgainstFastRelaunch;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _requiredFirstState;
    id /* block */  _requiredStateObserverBlock;
    id /* block */  _shouldBackOffOnErrorBlock;
    bool  _shouldNoteServerHasChanges;
    unsigned long long  _significantWorkCalls;
    id  _syncObserver;
    NSDate * _unavailabilityLimitDate;
    NSString * _unavailabilityReason;
    NSCountedSet * _unblockOnceElements;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) CPLEngineLibrary *engineLibrary;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (nonatomic, readonly) unsigned long long requiredState;
@property (nonatomic, copy) id /* block */ requiredStateObserverBlock;
@property (nonatomic, copy) id /* block */ shouldBackOffOnErrorBlock;
@property (readonly) Class superclass;

+ (id)platformImplementationProtocol;
+ (id)validElements;

- (void).cxx_destruct;
- (void)_backOff;
- (void)_disableFastRelaunchProtection;
- (void)_disableRetryAfterLocked;
- (void)_disableSynchronizationBecauseContainerHasBeenWipedLocked;
- (void)_disableSynchronizationWithReasonLocked:(id)arg1;
- (void)_enableSynchronizationWithReasonLocked:(id)arg1;
- (void)_handleResetAnchorWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetClientCacheWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetCloudCacheWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetGlobalAnchorWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_keepSessionInformation:(id)arg1;
- (id)_minimalDateForFirstSync;
- (void)_noteServerIsUnavailableWithErrorLocked:(id)arg1 reason:(id)arg2;
- (void)_noteSyncSessionNeededFromState:(unsigned long long)arg1 proposedScheduleDate:(id)arg2;
- (void)_noteSyncSessionNeededFromStateDontRewindImmediately:(unsigned long long)arg1;
- (id)_pathToFirstSynchronizationMarker;
- (void)_prepareFirstSession;
- (void)_reallyNoteServerHasChangesLocked;
- (void)_reallyStartSyncSession:(id)arg1;
- (void)_reallyUnscheduleSession;
- (void)_resetFirstSynchronizationMarker;
- (void)_scheduleNextSyncSession;
- (void)_setRequiredFirstState:(unsigned long long)arg1;
- (void)_startRequiredSyncSession:(id)arg1;
- (void)_startSyncSession:(id)arg1 withMinimalPhase:(unsigned long long)arg2 rewind:(bool)arg3;
- (void)_stopPreparingFirstSession;
- (bool)_syncSessionIsPossible;
- (void)_unscheduleNextSyncSession;
- (void)_updateLastSyncDateIfNecessaryLocked;
- (void)_updateOverridingForeground;
- (void)_writeFirstSynchronizationMarker;
- (void)blockAllSyncSessionsWithReason:(id)arg1 onlyIfBlocked:(bool)arg2 block:(id /* block */)arg3;
- (void)blockEngineElement:(id)arg1;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)componentName;
- (void)disableMingling;
- (void)disableSynchronizationIfBlockedWithReason:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)enableMingling;
- (void)enableSynchronizationWithReason:(id)arg1;
- (id)engineLibrary;
- (void)forceStartSyncSession:(id)arg1 withMinimalPhase:(unsigned long long)arg2;
- (void)getCurrentRequiredStateWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusWithCompletionHandler:(id /* block */)arg1;
- (id)initWithEngineLibrary:(id)arg1;
- (bool)isClientInForeground;
- (bool)isMinglingEnabled;
- (bool)isSynchronizationDisabledWithReasonError:(id*)arg1;
- (void)kickOffSyncSession;
- (void)noteClientIsBeginningSignificantWork;
- (void)noteClientIsEndingSignificantWork;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForegroundQuietly:(bool)arg1;
- (void)noteClientIsInSyncWithClientCache;
- (void)noteClientIsNotInSyncWithClientCache;
- (void)noteClientNeedsToPull;
- (void)noteContainerHasBeenWiped;
- (void)noteNetworkStateDidChange;
- (void)noteQuotaHasChanged;
- (void)noteResourceDownloadQueueIsFull;
- (void)noteScopeListNeedsUpdate;
- (void)noteScopeNeedsToPullFromTransport;
- (void)noteScopeNeedsToPushHighPriorityToTransport;
- (void)noteScopeNeedsToPushToTransport;
- (void)noteScopeNeedsUpdate;
- (void)noteServerHasChanges;
- (void)noteServerIsUnavailableWithError:(id)arg1;
- (void)noteServerMightBeAvailableNow;
- (void)noteStoreNeedsCleanup;
- (void)noteStoreNeedsSetup;
- (void)noteStoreNeedsToUpdateDisabledFeatures;
- (void)noteSyncSession:(id)arg1 failedDuringPhase:(unsigned long long)arg2 withError:(id)arg3;
- (void)noteSyncSession:(id)arg1 stateWillBeAttempted:(unsigned long long)arg2;
- (void)noteSyncSessionSucceeded:(id)arg1;
- (void)noteTransportNeedsUpdate;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)platformObject;
- (unsigned long long)requiredState;
- (id /* block */)requiredStateObserverBlock;
- (void)resetBackoffInterval;
- (void)setRequiredStateObserverBlock:(id /* block */)arg1;
- (void)setShouldBackOffOnErrorBlock:(id /* block */)arg1;
- (id /* block */)shouldBackOffOnErrorBlock;
- (void)startRequiredSyncSessionNow:(id)arg1;
- (void)testKey:(id)arg1 value:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)unblockEngineElement:(id)arg1;
- (void)unblockEngineElementOnce:(id)arg1;
- (bool)waitForEngineElementToBeBlocked:(id)arg1 timeout:(double)arg2;
- (void)willRunEngineElement:(id)arg1;

@end
