
@interface WBSWebExtensionData : WBSSafariExtension <NSCopying, NSSecureCoding, WBSWebExtensionDataForwarding, WKNavigationDelegate, WKUIDelegate> {
    NSMutableArray * _actionsToPerformAfterBackgroundPageLoads;
    WBSWebExtensionAlarmState * _alarmState;
    bool  _allowedInPrivateBrowsing;
    NSCountedSet * _backgroundPageEventListeners;
    bool  _backgroundPageIsPersistent;
    NSString * _backgroundPagePath;
    bool  _backgroundPageUsesModules;
    NSArray * _backgroundScriptPaths;
    NSString * _backgroundServiceWorkerPath;
    WKWebView * _backgroundWebView;
    NSUUID * _baseURIHost;
    NSMutableDictionary * _cachedPermissionStates;
    NSMutableOrderedSet * _cachedPermissionURLs;
    NSArray * _commands;
    NSString * _composedIdentifier;
    NSString * _containingAppBundleIdentifier;
    WBSWebExtensionContextMenuItemManager * _contextMenuItemManager;
    NSDate * _dateOfLastMessageSentFromAnyPortInBackgroundPage;
    NSArray * _declarativeNetRequestRulesets;
    bool  _didPopulatePermissionsAndOriginsPropertiesFromManifest;
    bool  _displayBlockedResourceCountInBadge;
    NSString * _displayDescription;
    NSString * _displayName;
    NSString * _displayShortName;
    NSString * _displayVersion;
    WBSWebExtensionDeclarativeNetRequestSQLiteStore * _dynamicRulesStorage;
    NSExtension * _extension;
    NSString * _extensionBundleIdentifier;
    WKContentWorld * _extensionWorldForInjectedContent;
    NSSet * _externallyConnectableMatchPatterns;
    NSString * _generatedBackgroundPageContent;
    NSMutableDictionary * _grantedPermissionOrigins;
    NSMutableDictionary * _grantedPermissions;
    bool  _hasCachedIcon;
    bool  _hasCachedPreferencesIcon;
    bool  _hasCachedToolbarImage;
    bool  _hasFirstNativeMessagePort;
    bool  _hasLoadedPermissionsFromStorage;
    UIImage * _icon;
    NSArray * _injectedContentData;
    NSMutableDictionary * _injectedScriptsPerOriginPattern;
    NSMutableDictionary * _injectedStyleSheetsPerOriginPattern;
    bool  _isAllowedInPrivateBrowsingValuePopulated;
    bool  _isExtensionBeingLoadedAsPartOfSafariLaunch;
    NSDate * _lastBackgroundPageLoadDate;
    WBSWebExtensionStorageAPISQLiteStore * _localStorage;
    WBSWebExtensionLocalization * _localization;
    NSDictionary * _manifestDictionary;
    NSMutableOrderedSet * _manifestErrors;
    NSSet * _manifestOptionalPermissionOrigins;
    NSSet * _manifestOptionalPermissions;
    NSSet * _manifestPermissionOrigins;
    NSSet * _manifestPermissions;
    NSArray * _manifestV3WebAccessibleResources;
    NSMutableArray * _matchedDeclarativeNetRequestRules;
    NSDate * _nextGrantedPermissionsExpirationDate;
    NSDate * _nextRevokedPermissionsExpirationDate;
    double  _numberOfDynamicRules;
    double  _numberOfSessionRules;
    bool  _parsedBackgroundManifest;
    bool  _parsedContentScriptsManifest;
    bool  _parsedDeclarativeNetRequestProperties;
    bool  _parsedExternallyConnectableManifest;
    bool  _parsedManifestDictionary;
    bool  _parsedManifestDisplayStrings;
    bool  _parsedWebAccessibleResources;
    bool  _permissionsAreBeingUpdatedDueToAnExternalChange;
    UIImage * _preferencesIcon;
    NSDictionary * _queuedInstallEventDetails;
    NSMutableArray * _queuedNativeMessages;
    NSDictionary * _registeredContentData;
    WBSWebExtensionRegisteredContentScriptsSQLiteStore * _registeredContentScriptsStorage;
    NSPointerArray * _relatedWebViewPool;
    bool  _requestedOptionalAccessToAllHosts;
    NSURL * _resourcesDirectoryURL;
    NSMutableDictionary * _revokedPermissionOrigins;
    NSMutableDictionary * _revokedPermissions;
    bool  _serviceWorkerFailedToLoad;
    WBSWebExtensionDeclarativeNetRequestSQLiteStore * _sessionRulesStorage;
    WBSWebExtensionStorageAPISQLiteStore * _sessionStorage;
    bool  _shouldFireStartupEvent;
    WBSWebExtensionStorageAPISQLiteStore * _syncedStorage;
    NSMapTable * _temporaryTabPermissionOrigins;
    WBSDispatchSourceTimer * _timerToUnloadBackgroundPage;
    UIImage * _toolbarImage;
    WBSWebExtensionToolbarItem * _toolbarItem;
    NSUUID * _uniqueIdentifier;
    NSString * _version;
    NSArray * _webAccessibleResources;
    NSMutableArray * _websiteRequestsPendingApproval;
}

@property (nonatomic, readonly) WBSWebExtensionAlarmState *alarmState;
@property (nonatomic, readonly) NSArray *allRelatedWebViews;
@property (nonatomic) bool allowedInPrivateBrowsing;
@property (nonatomic, readonly) NSSet *apiNamesPendingApproval;
@property (nonatomic, copy) NSCountedSet *backgroundPageEventListeners;
@property (nonatomic, readonly) bool backgroundPageIsPersistent;
@property (nonatomic, readonly) bool backgroundPageIsServiceWorker;
@property (nonatomic, readonly) NSURL *backgroundPageURL;
@property (nonatomic, readonly) bool backgroundPageUsesModules;
@property (nonatomic, readonly) WKWebView *backgroundWebView;
@property (nonatomic, readonly) NSArray *commands;
@property (nonatomic, readonly) NSString *composedIdentifier;
@property (nonatomic, readonly) NSDictionary *configuredPermissionOrigins;
@property (nonatomic, readonly) NSDictionary *configuredPermissions;
@property (nonatomic, readonly) NSString *containingAppBundleIdentifier;
@property (nonatomic, readonly) NSString *contentSecurityPolicy;
@property (nonatomic, readonly) WBSWebExtensionContextMenuItemManager *contextMenuItemManager;
@property (nonatomic, readonly, copy) NSArray *corsDisablingPatterns;
@property (nonatomic, readonly) NSSet *currentAccessibleOrigins;
@property (nonatomic, readonly) NSSet *currentPermissionOrigins;
@property (nonatomic, readonly) NSSet *currentPermissions;
@property (nonatomic, retain) NSDate *dateOfLastMessageSentFromAnyPortInBackgroundPage;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSArray *declarativeNetRequestRulesets;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool displayBlockedResourceCountInBadge;
@property (nonatomic, readonly) NSString *displayDescription;
@property (nonatomic, readonly) NSString *displayName;
@property (nonatomic, readonly) NSString *displayShortName;
@property (nonatomic, readonly) NSString *displayVersion;
@property (nonatomic, readonly) NSExtension *extension;
@property (nonatomic, retain) WKContentWorld *extensionWorldForInjectedContent;
@property (nonatomic) WBSWebExtensionsController *extensionsController;
@property (nonatomic, readonly) NSArray *externallyConnectableMatchPatternStrings;
@property (nonatomic, readonly) NSSet *externallyConnectableMatchPatterns;
@property (nonatomic, readonly) NSString *generatedBackgroundPageContent;
@property (nonatomic, copy) NSDictionary *grantedPermissionOrigins;
@property (nonatomic, copy) NSDictionary *grantedPermissions;
@property (nonatomic, readonly) bool hasAbilityToInjectContentIntoWebpages;
@property (nonatomic, readonly) bool hasAction;
@property (nonatomic, readonly) bool hasBrowserAction;
@property (nonatomic, readonly) bool hasCommands;
@property (nonatomic, readonly) bool hasDeclarativeNetRequestHostAccessPermission;
@property (nonatomic, readonly) bool hasDeclarativeNetRequestPermission;
@property (nonatomic, readonly) bool hasDynamicOrSessionDeclarativeNetRequestRules;
@property (nonatomic) bool hasLoadedPermissionsFromStorage;
@property (nonatomic, readonly) bool hasPageAction;
@property (nonatomic, readonly) bool hasStorage;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIImage *icon;
@property (nonatomic, readonly) NSUUID *identifier;
@property (nonatomic, readonly) NSArray *injectedContentData;
@property (nonatomic, readonly) WBSWebExtensionStorageAPISQLiteStore *localStorage;
@property (nonatomic, readonly) WBSWebExtensionLocalization *localization;
@property (nonatomic, readonly, copy) NSDictionary *manifest;
@property (nonatomic, readonly) NSSet *manifestAccessibleOrigins;
@property (nonatomic, readonly) NSArray *manifestErrors;
@property (nonatomic, readonly) NSSet *manifestOptionalPermissionOrigins;
@property (nonatomic, readonly) NSSet *manifestOptionalPermissions;
@property (nonatomic, readonly) bool manifestParsedSuccessfully;
@property (nonatomic, readonly) NSSet *manifestPermissionOrigins;
@property (nonatomic, readonly) NSSet *manifestPermissions;
@property (nonatomic, readonly) long long manifestVersion;
@property (nonatomic, readonly, copy) NSArray *matchedDeclarativeNetRequestRules;
@property (nonatomic, readonly) NSURL *newTabOverridePageURL;
@property (nonatomic) double numberOfDynamicRules;
@property (nonatomic) double numberOfSessionRules;
@property (nonatomic, readonly) NSURL *optionsPageURL;
@property (nonatomic, readonly) UIImage *preferencesIcon;
@property (nonatomic, readonly) NSString *processDisplayName;
@property (nonatomic, readonly, copy) NSDictionary *registeredContentData;
@property (nonatomic, readonly) WKWebView *relatedWebView;
@property (nonatomic) bool requestedOptionalAccessToAllHosts;
@property (nonatomic, readonly) NSSet *requestedPermissionOriginsNotAlreadyConfigured;
@property (nonatomic, readonly) NSSet *requestedPermissionsNotAlreadyConfigured;
@property (nonatomic, readonly) bool requestsAccessToAllHosts;
@property (nonatomic, readonly) NSURL *resourcesDirectoryURL;
@property (nonatomic, copy) NSDictionary *revokedPermissionOrigins;
@property (nonatomic, copy) NSDictionary *revokedPermissions;
@property (nonatomic, readonly) bool serviceWorkerFailedToLoad;
@property (nonatomic, readonly) WBSWebExtensionStorageAPISQLiteStore *sessionStorage;
@property (nonatomic, readonly) bool shouldShowInWebsitePreferences;
@property (readonly) Class superclass;
@property (nonatomic, readonly) WBSWebExtensionStorageAPISQLiteStore *syncedStorage;
@property (nonatomic, readonly) UIImage *toolbarImage;
@property (nonatomic, retain) WBSWebExtensionToolbarItem *toolbarItem;
@property (nonatomic, readonly, copy) NSString *toolbarLabel;
@property (nonatomic, readonly, copy) NSString *toolbarPopupPath;
@property (nonatomic, readonly) NSUUID *uniqueIdentifier;
@property (nonatomic, readonly) NSSet *urlsPendingApproval;
@property (nonatomic, readonly) NSDictionary *userVisiblePermissions;
@property (nonatomic, readonly) bool usesDeclarativeNetRequest;
@property (nonatomic, readonly) bool usesManifestVersion3;
@property (nonatomic, readonly) NSString *version;
@property (nonatomic, readonly) NSArray *webAccessibleResources;

+ (bool)_isShortVersion:(id)arg1 supportedInSafariVersion:(id)arg2;
+ (id)_manifestKeySupportForDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (void)_mergeKeySupportDictionary:(id)arg1 intoDictionary:(id)arg2;
+ (id /* block */)_originPatternMatchesAnyPatternInAllowedPatterns:(id)arg1;
+ (id)_unsupportedKeysFromKeySupportDictionary:(id)arg1;
+ (id)_unsupportedValuesInArray:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (id)createWebExtensionError:(long long)arg1;
+ (id)createWebExtensionError:(long long)arg1 customLocalizedDescription:(id)arg2;
+ (id)createWebExtensionError:(long long)arg1 underlyingError:(id)arg2;
+ (id)generatedBackgroundPageFilename;
+ (id)supportedPermissions;
+ (id)supportedWebExtensionFeaturesForManifestVersion:(unsigned long long)arg1;
+ (id)supportedWebExtensionPatternSchemes;
+ (bool)supportsSecureCoding;
+ (id)unlocalizedManifestDictionaryFromData:(id)arg1 withExtensionIdentifier:(id)arg2 error:(id*)arg3;
+ (id)unsupportedManifestKeysInDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;

- (void).cxx_destruct;
- (id)_actionDictionary;
- (void)_addInjectedContent:(id)arg1 forGrantedOriginPattern:(id)arg2;
- (void)_addInjectedContentForAllGrantedOriginForInjectedContent:(id)arg1;
- (void)_addInjectedContentInPrivateBrowsing;
- (bool)_applicationIsActive;
- (void)_applyModificationsToDeclarativeNetRequestRulesetsFromUpdateEnabledRulesets;
- (id)_backgroundWebViewConfiguration;
- (void)_clearCachedPermissions;
- (void)_compileDeclarativeNetRequestRules:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_configuredDictionaryWithRequested:(id)arg1 granted:(id)arg2 revoked:(id)arg3;
- (id)_containingAppIcon;
- (id)_createDeclarativeNetRequestErrors:(id)arg1;
- (double)_delayForNonPersistentBackgroundPageBeforeUnloading;
- (void)_fireStartupAndInstallEventsIfNecessaryForWebView:(id)arg1;
- (void)_getDeclarativeNetRequestRulesFromStorage:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_hasScriptingPermission;
- (void)_hidePermissionBanner;
- (void)_loadBackgroundPageWithURL:(id)arg1;
- (void)_loadBackgroundWebView;
- (void)_loadBackgroundWebViewDuringExtensionLoad:(bool)arg1;
- (void)_loadDeclarativeNetRequestRulesInPrivateBrowsing;
- (void)_loadInPrivateBrowsing;
- (void)_loadToolbarItem;
- (void)_loadToolbarItemInPrivateBrowsing;
- (id)_maximumSafariVersionString;
- (id)_minimumSafariVersionString;
- (id)_nextExpirationDateWithPermissions:(id)arg1 origins:(id)arg2;
- (void)_parseContentScriptsAndStyleSheetsForInjectedContent:(id)arg1;
- (void)_performTasksAfterBackgroundPageLoads;
- (void)_populateBackgroundPropertiesIfNeeded;
- (void)_populateContentScriptPropertiesIfNeeded;
- (void)_populateDeclarativeNetRequestPropertiesIfNeeded;
- (void)_populateDisplayStringsIfNeeded;
- (void)_populateExternallyConnectablePropertiesIfNeeded;
- (void)_populatePermissionsAndOriginsPropertiesIfNeeded;
- (void)_populateWebAccessibleResources;
- (void)_queueEventToFireAfterBackgroundPageLoads:(id /* block */)arg1;
- (void)_recordManifestErrorIfNecessary:(id)arg1;
- (id)_remoteInspectionMenuTitle;
- (void)_removeExpiredGrantedPermissionsAndPostNotification:(bool)arg1;
- (void)_removeExpiredPermissions:(id)arg1 origins:(id)arg2 notificationName:(id)arg3;
- (void)_removeExpiredRevokedPermissionsAndPostNotification:(bool)arg1;
- (void)_removeInjectedContentForOriginPattern:(id)arg1;
- (void)_removeInjectedContentInPrivateBrowsing;
- (void)_removePermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3 fromPermissions:(id)arg4 fromOrigins:(id)arg5 notificationName:(id)arg6;
- (bool)_requestsAccessToAllHostsThroughImplicitPermission;
- (id)_serviceWorkerErrorsFromErrorStrings:(id)arg1;
- (bool)_shouldAutomaticallyEnableInPrivateBrowsing;
- (id)_storageTypeForRulesStorage:(id)arg1;
- (void)_unloadBackgroundWebView;
- (void)_unloadInPrivateBrowsing;
- (void)_unloadRegisteredContentScripts;
- (void)_unloadToolbarItem;
- (void)_unloadToolbarItemInPrivateBrowsing;
- (void)_updateDeclarativeNetRequestRulesInStorage:(id)arg1 byRemovingRules:(id)arg2 addRules:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_updateInjectedContentForRevokedOriginPattern:(id)arg1;
- (id)_userInfoDictionaryForPermissionsNotificationWithPermissions:(id)arg1 origins:(id)arg2;
- (id /* block */)_validateAndReadResourceBlock;
- (void)_validateToolbarItemInAllWindows;
- (void)addInjectedContent:(id)arg1 forGrantedOriginPatterns:(id)arg2;
- (void)addListener:(unsigned long long)arg1;
- (void)addWebViewToRelatedWebViewPool:(id)arg1;
- (id)alarmState;
- (id)allRelatedWebViews;
- (bool)allowedInPrivateBrowsing;
- (id)apiNamesPendingApproval;
- (id)backgroundPageEventListeners;
- (bool)backgroundPageIsPersistent;
- (bool)backgroundPageIsServiceWorker;
- (id)backgroundPageURL;
- (bool)backgroundPageUsesModules;
- (id)backgroundWebView;
- (id)baseURIHost;
- (id)bestIconSizeKeyInIconsDictionary:(id)arg1 idealPixelSize:(long long)arg2;
- (bool)canLoad;
- (bool)canLoadWithErrorString:(id*)arg1;
- (void)checkPermissionAndPromptIfNecessaryToAccessURL:(id)arg1 inTab:(id)arg2 callingAPIName:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)checkPermissionAndPromptIfNecessaryToAccessURL:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3 callingAPIName:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)checkPermissionAndPromptIfNecessaryToAccessURLs:(id)arg1 inTab:(id)arg2 callingAPIName:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)checkPermissionAndPromptIfNecessaryToAccessURLs:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3 callingAPIName:(id)arg4 completionHandler:(id /* block */)arg5;
- (id)commands;
- (id)composedIdentifier;
- (id)configuredPermissionOrigins;
- (id)configuredPermissions;
- (id)containingAppBundleIdentifier;
- (id)contentSecurityPolicy;
- (id)contextMenuItemManager;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)corsDisablingPatterns;
- (id)currentAccessibleOrigins;
- (id)currentPermissionOrigins;
- (id)currentPermissions;
- (id)dateOfLastMessageSentFromAnyPortInBackgroundPage;
- (id)declarativeNetRequestRulesets;
- (id)description;
- (void)dispatchAllPendingWebsiteRequests;
- (void)dispatchExpiredPendingWebsiteRequests;
- (void)dispatchPendingWebsiteRequestsMatchingOriginPatterns:(id)arg1;
- (bool)displayBlockedResourceCountInBadge;
- (id)displayDescription;
- (id)displayName;
- (id)displayShortName;
- (id)displayVersion;
- (id)dynamicRulesStorage;
- (void)encodeWithCoder:(id)arg1;
- (id)extension;
- (id)extensionIconWithBaseURI:(id)arg1 idealPointSize:(long long)arg2 validateAndReadResourceHandler:(id /* block */)arg3;
- (id)extensionStateWithPreviousState:(id)arg1;
- (long long)extensionSupportsCurrentSafariVersion;
- (long long)extensionSupportsSafariShortVersion:(id)arg1;
- (id)extensionWorldForInjectedContent;
- (id)externallyConnectableMatchPatternStrings;
- (id)externallyConnectableMatchPatterns;
- (void)fireEvents:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)generatedBackgroundPageContent;
- (void)getDeclarativeNetRequestDynamicRulesWithCompletionHandler:(id /* block */)arg1;
- (void)getDeclarativeNetRequestSessionRulesWithCompletionHandler:(id /* block */)arg1;
- (void)grantPermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (id)grantedPermissionOrigins;
- (id)grantedPermissions;
- (bool)hasAbilityToInjectContentIntoWebpages;
- (bool)hasAction;
- (bool)hasActiveUserGestureInTab:(id)arg1;
- (bool)hasBrowserAction;
- (bool)hasCommands;
- (bool)hasDeclarativeNetRequestHostAccessPermission;
- (bool)hasDeclarativeNetRequestPermission;
- (bool)hasDynamicOrSessionDeclarativeNetRequestRules;
- (bool)hasInjectedContentDataForURL:(id)arg1;
- (bool)hasLoadedPermissionsFromStorage;
- (bool)hasMoreThanOneRequestedOriginNotAlreadyConfigured;
- (bool)hasPageAction;
- (bool)hasPendingWebsiteRequests;
- (bool)hasPermission:(id)arg1;
- (bool)hasPermission:(id)arg1 inTab:(id)arg2;
- (bool)hasPermissionToAccessAllHosts;
- (bool)hasPermissionToAccessAllURLs;
- (bool)hasPermissionToAccessURL:(id)arg1;
- (bool)hasPermissionToAccessURL:(id)arg1 inTab:(id)arg2;
- (bool)hasPermissions:(id)arg1 origins:(id)arg2;
- (bool)hasStorage;
- (id)icon;
- (id)identifier;
- (id)imageForBestIconInIconsDictionary:(id)arg1 idealPointSize:(long long)arg2;
- (id)imageForBestIconInIconsDictionary:(id)arg1 idealPointSize:(long long)arg2 withBaseURI:(id)arg3 validateAndReadResourceHandler:(id /* block */)arg4;
- (id)imageForPath:(id)arg1 validateAndReadResourceHandler:(id /* block */)arg2;
- (void)increaseBlockedResourcesCountByAmount:(id)arg1 forTabWithIdentifier:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithExtension:(id)arg1 extensionsController:(id)arg2;
- (id)initWithExtension:(id)arg1 extensionsController:(id)arg2 extensionBundleIdentifier:(id)arg3 extensionIdentifier:(id)arg4 uniqueIdentifier:(id)arg5 baseURIHost:(id)arg6;
- (id)initWithManifestDictionary:(id)arg1 extensionIdentifier:(id)arg2 uniqueIdentifier:(id)arg3;
- (id)injectedContentData;
- (void)invalidateStorage;
- (bool)isAccessibleResourceURL:(id)arg1 fromWebPageWithURL:(id)arg2;
- (void)load;
- (void)loadBackgroundPageIfNecessaryWithCompletionHandler:(id /* block */)arg1;
- (void)loadDeclarativeNetRequestRulesetsIfNeededWithCompletionHandler:(id /* block */)arg1;
- (void)loadRegisteredContentScriptsAndStyleSheets:(id)arg1;
- (void)loadRegisteredContentScriptsFromStorageWithCompletionHandler:(id /* block */)arg1;
- (id)localStorage;
- (id)localization;
- (id)manifest;
- (id)manifestAccessibleOrigins;
- (id)manifestDictionary;
- (id)manifestErrors;
- (id)manifestOptionalPermissionOrigins;
- (id)manifestOptionalPermissions;
- (bool)manifestParsedSuccessfully;
- (id)manifestPermissionOrigins;
- (id)manifestPermissions;
- (long long)manifestVersion;
- (id)matchedDeclarativeNetRequestRules;
- (void)messageReceivedFromContainingAppWithName:(id)arg1 userInfo:(id)arg2;
- (void)modifyInjectedContentScriptsByAddingScripts:(id)arg1 removingScripts:(id)arg2;
- (void)nativePortConnectionOpened;
- (id)newTabOverridePageURL;
- (double)numberOfDynamicRules;
- (double)numberOfSessionRules;
- (id)optionsPageURL;
- (id)pathForBestIconInIconsDictionary:(id)arg1 idealPixelSize:(long long)arg2;
- (long long)permissionStateForURL:(id)arg1;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3;
- (long long)permissionStateForURL:(id)arg1 options:(unsigned long long)arg2;
- (void)populateAllPropertiesIfNeededToRecordManifestErrors;
- (id)preferencesIcon;
- (void)prepareToFireEvent:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)previouslyGrantedPermissionOriginsMayHaveBeenChangedExternally:(id)arg1 previouslyRevokedPermissionOrigins:(id)arg2;
- (id)processDisplayName;
- (bool)purgeMatchedRulesOlderThan:(id)arg1;
- (void)queueStartupEvent;
- (bool)readAllowedInPrivateBrowsingValueFromDisk;
- (void)recordContentRuleListAction:(id)arg1 forURL:(id)arg2 inTab:(id)arg3;
- (id)registeredContentData;
- (id)registeredContentScriptsStorage;
- (id)relatedWebView;
- (void)removeGrantedAndRevokedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3;
- (void)removeGrantedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3;
- (void)removeInjectedContentForRemovedOriginPatterns:(id)arg1;
- (void)removeListener:(unsigned long long)arg1;
- (void)removeRevokedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(bool)arg3;
- (void)removeTemporaryPermissionsForTab:(id)arg1;
- (bool)requestedOptionalAccessToAllHosts;
- (id)requestedPermissionOriginsNotAlreadyConfigured;
- (id)requestedPermissionsNotAlreadyConfigured;
- (bool)requestsAccessToAllHosts;
- (id)resourcesDirectoryURL;
- (void)revokePermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (id)revokedPermissionOrigins;
- (id)revokedPermissions;
- (void)scheduleBackgroundPageToUnload;
- (bool)serviceWorkerFailedToLoad;
- (id)sessionRulesStorage;
- (id)sessionStorage;
- (void)setAllowedInPrivateBrowsing:(bool)arg1;
- (void)setBackgroundPageEventListeners:(id)arg1;
- (void)setDateOfLastMessageSentFromAnyPortInBackgroundPage:(id)arg1;
- (void)setDisplayBlockedResourceCountInBadge:(bool)arg1;
- (void)setExtensionWorldForInjectedContent:(id)arg1;
- (void)setGrantedPermissionOrigins:(id)arg1;
- (void)setGrantedPermissions:(id)arg1;
- (void)setHasLoadedPermissionsFromStorage:(bool)arg1;
- (void)setNumberOfDynamicRules:(double)arg1;
- (void)setNumberOfSessionRules:(double)arg1;
- (void)setQueuedInstallEventDetails:(id)arg1;
- (void)setRequestedOptionalAccessToAllHosts:(bool)arg1;
- (void)setRevokedPermissionOrigins:(id)arg1;
- (void)setRevokedPermissions:(id)arg1;
- (void)setToolbarItem:(id)arg1;
- (bool)shouldShowInWebsitePreferences;
- (bool)shouldShowToolbarItemForTab:(id)arg1;
- (id)syncedStorage;
- (id)toolbarImage;
- (id)toolbarImageWithBaseURI:(id)arg1 idealPointSize:(long long)arg2 validateAndReadResourceHandler:(id /* block */)arg3;
- (id)toolbarItem;
- (id)toolbarLabel;
- (id)toolbarPopupPath;
- (id)uniqueIdentifier;
- (void)unload;
- (void)updateBackgroundPageClipboardPermission;
- (void)updateDeclarativeNetRequestDynamicRulesByRemovingRules:(id)arg1 addRules:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)updateDeclarativeNetRequestSessionRulesByRemovingRules:(id)arg1 addRules:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)updateInjectedContentForChangedRevokedOriginPatterns:(id)arg1;
- (void)updateRegisteredContentScriptsByRemovingScripts:(id)arg1 addScripts:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)urlForBackgroundPageWithBaseURI:(id)arg1;
- (id)urlForOptionsPageWithBaseURI:(id)arg1;
- (id)urlsPendingApproval;
- (void)userGesturePerformedInTab:(id)arg1;
- (id)userVisiblePermissions;
- (bool)usesDeclarativeNetRequest;
- (bool)usesManifestVersion3;
- (bool)verifyRequestedPermissions:(id)arg1 origins:(id)arg2 errorMessage:(id*)arg3;
- (id)version;
- (id)webAccessibleResources;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 decisionHandler:(id /* block */)arg3;
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;
- (bool)webViewIsDisplayingFullPageExtensionContent:(id)arg1;
- (void)webViewWebContentProcessDidTerminate:(id)arg1;

@end
