
@interface PKPrinterDescription : NSObject <NSSecureCoding, PKPropertyVisitable> {
    NSSet * _attrs_document_format_supported;
    NSArray * _attrs_media_source_supported;
    NSSet * _attrs_printer_native_formats;
    NSString * _deviceID;
    NSDictionary * _dids;
    int  _documentPasswordSupported;
    NSString * _driverformat;
    NSArray * _finishingTemplates;
    NSArray * _finishings;
    NSArray * _formats;
    int  _identifyActions;
    NSArray * _inputSlots;
    unsigned long long  _jobAccountIDSupport;
    NSArray * _jobPresets;
    NSSet * _jpegFeatures;
    NSSet * _mandatoryJobAttributes;
    int  _max_jpeg;
    int  _max_jpeg_x;
    int  _max_jpeg_y;
    int  _max_pdf;
    NSArray * _mediaColSupportedArray;
    NSArray * _mediaTypes;
    NSArray * _orientations;
    NSArray * _outputBins;
    NSArray * _outputModes;
    PKPaperList * _paperList;
    bool  _pin_required;
    int  _preferred_landscape;
    bool  _print_scaling_supported;
    NSURL * _printerInfoURL;
    unsigned long long  _printer_type_from_cups_scalar;
    NSArray * _quality;
    NSURL * _quotaManagementURL;
    NSArray * _sides;
    NSDictionary * _specialFeedOrientation;
    NSURL * _suppliesInfoURL;
    bool  _supportsPrintColorMode;
    NSDictionary * _translations;
    NSArray * _trays;
    NSDictionary * _txtRecord;
    bool  _type_has_color;
    bool  _type_has_duplex;
}

@property (readonly) NSSet *attrs_document_format_supported;
@property (readonly) NSArray *attrs_media_source_supported;
@property (readonly) NSSet *attrs_printer_native_formats;
@property (readonly) NSString *deviceID;
@property (readonly) NSDictionary *dids;
@property (readonly) int documentPasswordSupported;
@property (readonly) NSString *driverformat;
@property (readonly) NSArray *finishingTemplates;
@property (readonly) NSArray *finishings;
@property (readonly) NSArray *formats;
@property (readonly) int identifyActions;
@property (readonly) NSArray *inputSlots;
@property (readonly) unsigned long long jobAccountIDSupport;
@property (readonly) NSArray *jobPresets;
@property (readonly) NSSet *jpegFeatures;
@property (readonly) NSSet *mandatoryJobAttributes;
@property (readonly) int max_jpeg;
@property (readonly) int max_jpeg_x;
@property (readonly) int max_jpeg_y;
@property (readonly) int max_pdf;
@property (readonly) NSArray *mediaColSupportedArray;
@property (readonly) NSArray *mediaTypes;
@property (readonly) NSArray *orientations;
@property (readonly) NSArray *outputBins;
@property (readonly) NSArray *outputModes;
@property (readonly) PKPaperList *paperList;
@property (readonly) bool pin_required;
@property (readonly) int preferred_landscape;
@property (readonly) bool print_scaling_supported;
@property (readonly) NSURL *printerInfoURL;
@property (readonly) unsigned long long printer_type_from_cups_scalar;
@property (readonly) NSArray *quality;
@property (readonly) NSURL *quotaManagementURL;
@property (readonly) NSArray *sides;
@property (readonly) NSDictionary *specialFeedOrientation;
@property (readonly) NSURL *suppliesInfoURL;
@property (readonly) bool supportsPrintColorMode;
@property (readonly) NSDictionary *translations;
@property (readonly) NSArray *trays;
@property (readonly) bool type_has_color;
@property (readonly) bool type_has_duplex;

+ (id)_classesForCoding;
+ (id)standardRequestedAttributes;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_calcDeviceID:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcFininishingTemplates:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (unsigned long long)_calcIdentifyActions:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcInputSlots:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (long long)_calcJobAccountIDSupport:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcJobPresets:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcMediaTypes:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcOutputBins:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (bool)_calcPrintScalingSupported:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (void)_calcPrinterDriverInfo:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calcSpecialFeedOrientation:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculateFormats:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculateMediaColSupportedArray:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculateOutputModes:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculatePaperList:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculateQuality:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (id)_calculateSides:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (void)_ingestAttrs:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1;
- (void)_ingestTxtRecord:(id)arg1;
- (id)_makePrinterDeviceIDFromTxt;
- (id)attrs_document_format_supported;
- (id)attrs_media_source_supported;
- (id)attrs_printer_native_formats;
- (id)debugDescription;
- (id)description;
- (id)deviceID;
- (id)dids;
- (int)documentPasswordSupported;
- (id)driverformat;
- (void)encodeWithCoder:(id)arg1;
- (id)finishingTemplates;
- (id)finishings;
- (id)formats;
- (int)identifyActions;
- (id)initWithAttributes:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1 translations:(id)arg2;
- (id)initWithAttributes:(const struct GET_PRINTER_ATTRIBUTES_Response { int (**x1)(); id x2; }*)arg1 txtRecord:(id)arg2 translations:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithTXT:(id)arg1;
- (id)inputSlots;
- (bool)isEqual:(id)arg1;
- (unsigned long long)jobAccountIDSupport;
- (id)jobPresets;
- (id)jpegFeatures;
- (id)mandatoryJobAttributes;
- (int)max_jpeg;
- (int)max_jpeg_x;
- (int)max_jpeg_y;
- (int)max_pdf;
- (id)mediaColSupportedArray;
- (id)mediaTypes;
- (id)orientations;
- (id)outputBins;
- (id)outputModes;
- (id)paperList;
- (bool)pin_required;
- (int)preferred_landscape;
- (id)printInfoSupportedDictionary;
- (bool)print_scaling_supported;
- (id)printerInfoURL;
- (unsigned long long)printer_type_from_cups_scalar;
- (id)quality;
- (id)quotaManagementURL;
- (id)sides;
- (id)specialFeedOrientation;
- (id)suppliesInfoURL;
- (bool)supportsPrintColorMode;
- (id)translations;
- (id)trays;
- (id)txtRecordObjectForKey:(id)arg1;
- (bool)type_has_color;
- (bool)type_has_duplex;
- (void)visitProperties:(struct Visitor { int (**x1)(); }*)arg1;

@end
