
@interface MRUNowPlayingLabelView : UIControl <MRUVisualStylingProviderObserver> {
    bool  _adjustsLabelsWhenHighlighted;
    UIView * _contentView;
    UILabel * _heightSizingLabel;
    long long  _layout;
    bool  _marqueeEnabled;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _marqueeFadeEdgeInsets;
    NSString * _placeholder;
    MRUMarqueeLabel * _placeholderMarqueeView;
    MPAVRoute * _route;
    MPRouteLabel * _routeLabel;
    bool  _showPlaceholder;
    bool  _showRoute;
    bool  _showSubtitle;
    MRUVisualStylingProvider * _stylingProvider;
    NSString * _subtitle;
    MRUMarqueeLabel * _subtitleMarqueeView;
    long long  _textAlignment;
    NSString * _title;
    MRUMarqueeLabel * _titleMarqueeView;
}

@property (nonatomic) bool adjustsLabelsWhenHighlighted;
@property (nonatomic, retain) UIView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UILabel *heightSizingLabel;
@property (nonatomic) long long layout;
@property (getter=isMarqueeEnabled, nonatomic) bool marqueeEnabled;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } marqueeFadeEdgeInsets;
@property (nonatomic, copy) NSString *placeholder;
@property (nonatomic, retain) MRUMarqueeLabel *placeholderMarqueeView;
@property (nonatomic, retain) MPAVRoute *route;
@property (nonatomic, retain) MPRouteLabel *routeLabel;
@property (nonatomic) bool showPlaceholder;
@property (nonatomic) bool showRoute;
@property (nonatomic) bool showSubtitle;
@property (nonatomic, retain) MRUVisualStylingProvider *stylingProvider;
@property (nonatomic, copy) NSString *subtitle;
@property (nonatomic, retain) MRUMarqueeLabel *subtitleMarqueeView;
@property (readonly) Class superclass;
@property (nonatomic) long long textAlignment;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, retain) MRUMarqueeLabel *titleMarqueeView;

- (void).cxx_destruct;
- (bool)acuis_wantsPriorityOverTargetOfGestureRecognizer:(id)arg1;
- (bool)adjustsLabelsWhenHighlighted;
- (id)contentView;
- (void)didMoveToWindow;
- (double)heightForTextInLabel:(id)arg1;
- (id)heightSizingLabel;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isMarqueeEnabled;
- (long long)layout;
- (void)layoutSubviews;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })marqueeFadeEdgeInsets;
- (id)placeholder;
- (id)placeholderMarqueeView;
- (id)route;
- (id)routeLabel;
- (void)setAdjustsLabelsWhenHighlighted:(bool)arg1;
- (void)setContentView:(id)arg1;
- (void)setHeightSizingLabel:(id)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setLayout:(long long)arg1;
- (void)setMarqueeEnabled:(bool)arg1;
- (void)setMarqueeFadeEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPlaceholder:(id)arg1;
- (void)setPlaceholderMarqueeView:(id)arg1;
- (void)setRoute:(id)arg1;
- (void)setRouteLabel:(id)arg1;
- (void)setShowPlaceholder:(bool)arg1;
- (void)setShowRoute:(bool)arg1;
- (void)setShowSubtitle:(bool)arg1;
- (void)setStylingProvider:(id)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setSubtitleMarqueeView:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleMarqueeView:(id)arg1;
- (bool)showPlaceholder;
- (bool)showRoute;
- (bool)showSubtitle;
- (struct CGSize { double x1; double x2; })sizeForTextInLabel:(id)arg1 availableSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)stylingProvider;
- (id)subtitle;
- (id)subtitleMarqueeView;
- (long long)textAlignment;
- (id)title;
- (id)titleMarqueeView;
- (void)updateContentSizeCategory;
- (void)updateMarquee;
- (void)updatePlaceholderTextAlignment;
- (void)updateVisibility;
- (void)updateVisualStyling;
- (id)viewForFirstBaselineLayout;
- (void)visualStylingProviderDidChange:(id)arg1;

@end
