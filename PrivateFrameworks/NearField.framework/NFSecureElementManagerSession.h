
@interface NFSecureElementManagerSession : NFSession <NFAppletCollection, NFSecureElementManagerSessionCallbacks> {
    NSMutableDictionary * _appletsById;
    <NFSecureElementManagerSessionDelegate> * _delegate;
    bool  _hasApplets;
}

@property (readonly, copy) NSString *debugDescription;
@property <NFSecureElementManagerSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_appletsById;
- (void)_setApplets:(id)arg1;
- (id)allApplets;
- (id)appletWithIdentifier:(id)arg1;
- (id)delegate;
- (bool)deleteAllApplets:(bool)arg1;
- (bool)deleteAllApplets:(bool)arg1 error:(id*)arg2;
- (bool)deleteApplets:(id)arg1 queueServerConnection:(bool)arg2;
- (bool)deleteApplets:(id)arg1 queueServerConnection:(bool)arg2 error:(id*)arg3;
- (void)didEndUnexpectedly;
- (void)didExitRestrictedMode:(id)arg1;
- (bool)didExitRestrictedMode:(id)arg1 error:(id*)arg2;
- (bool)disableAuthorizationForApplet:(id)arg1 andKey:(id)arg2 authorization:(id)arg3 error:(id*)arg4;
- (bool)disableAuthorizationForApplet:(id)arg1 andKeys:(id)arg2 authorization:(id)arg3 error:(id*)arg4;
- (bool)disableAuthorizationForApplet:(id)arg1 authorization:(id)arg2;
- (bool)disableAuthorizationForApplet:(id)arg1 authorization:(id)arg2 error:(id*)arg3;
- (bool)disableAuthorizationForApplets:(id)arg1 andKey:(id)arg2 authorization:(id)arg3 error:(id*)arg4;
- (bool)disableAuthorizationForApplets:(id)arg1 authorization:(id)arg2 error:(id*)arg3;
- (id)disableAuthorizationForPasses:(id)arg1 authorization:(id)arg2;
- (id)dumpDomain:(unsigned char)arg1 forSEID:(id)arg2;
- (id)dumpDomain:(unsigned char)arg1 forSEID:(id)arg2 error:(id*)arg3;
- (id)expressAppletIdentifiers;
- (id)expressAppletIdentifiersWithError:(id*)arg1;
- (long long)expressModeControlState;
- (long long)expressModeControlState:(id*)arg1;
- (bool)expressModesEnabled;
- (bool)expressModesEnabledWithError:(id*)arg1;
- (id)felicaAppletState:(id)arg1;
- (id)felicaAppletState:(id)arg1 error:(id*)arg2;
- (long long)getAndResetLPEMCounter:(id*)arg1;
- (id)getAttackCounterLogForSEID:(id)arg1;
- (id)getAttackCounterLogForSEID:(id)arg1 acknowledgeLogs:(bool)arg2 error:(id*)arg3;
- (id)getAttackCounterLogForSEID:(id)arg1 error:(id*)arg2;
- (bool)getAttackLogPresence:(id)arg1 error:(id*)arg2;
- (bool)getCryptogram:(id*)arg1 challengeResponse:(id*)arg2;
- (bool)getCryptogram:(id*)arg1 challengeResponse:(id*)arg2 error:(id*)arg3;
- (id)getExpressPassConfigWithError:(id*)arg1;
- (id)getOSUpdateLog;
- (id)getServiceProviderDataForApplet:(id)arg1 error:(id*)arg2;
- (id)getServiceProviderDataForApplet:(id)arg1 publicKey:(id)arg2 scheme:(id)arg3 error:(id*)arg4;
- (id)getSignedPlatformDataForSeid:(id)arg1 error:(id*)arg2;
- (id)init;
- (id)performPeerPaymentEnrollment:(id)arg1 error:(id*)arg2;
- (bool)powerCycleSEID:(id)arg1 error:(id*)arg2;
- (bool)refreshSecureElement:(id)arg1;
- (bool)refreshSecureElement:(id)arg1 error:(id*)arg2;
- (bool)restoreAuthorizarionForKeys:(id)arg1 onApplet:(id)arg2 error:(id*)arg3;
- (bool)restoreAuthorizationForAllAppletsExcept:(id)arg1;
- (bool)restoreAuthorizationForAllAppletsExcept:(id)arg1 error:(id*)arg2;
- (unsigned int)runScript:(id)arg1 forSEID:(id)arg2 results:(id*)arg3 lastStatus:(unsigned long long*)arg4;
- (unsigned int)runScript:(id)arg1 parameters:(id)arg2 outputResults:(id*)arg3;
- (void)setDelegate:(id)arg1;
- (id)setExpressModesControlState:(long long)arg1;
- (bool)setExpressModesEnabled:(bool)arg1;
- (bool)setExpressModesEnabled:(bool)arg1 error:(id*)arg2;
- (id)setExpressPassConfig:(id)arg1 restoreAuthorization:(bool)arg2;
- (id)signChallenge:(id)arg1 certs:(id*)arg2;
- (id)signChallenge:(id)arg1 certs:(id*)arg2 error:(id*)arg3;
- (id)signChallenge:(id)arg1 forAID:(id)arg2 certs:(id*)arg3;
- (id)signChallenge:(id)arg1 forAID:(id)arg2 certs:(id*)arg3 error:(id*)arg4;
- (id)signChallenge:(id)arg1 forAID:(id)arg2 sigInfo:(id*)arg3 error:(id*)arg4;
- (id)signChallenge:(id)arg1 useOSVersion:(bool)arg2 signatureInfo:(id*)arg3;
- (id)signChallenge:(id)arg1 useOSVersion:(bool)arg2 signatureInfo:(id*)arg3 error:(id*)arg4;
- (id)stateInformation;
- (id)stateInformationWithError:(id*)arg1;
- (id)stateInformationWithRedirectInfo:(id)arg1 error:(id*)arg2;
- (id)stateInformationWithoutFilteringWithError:(id*)arg1;
- (id)transceive:(id)arg1 forSEID:(id)arg2;
- (id)transceive:(id)arg1 forSEID:(id)arg2 error:(id*)arg3;
- (id)transceive:(id)arg1 forSEID:(id)arg2 toOS:(long long)arg3 error:(id*)arg4;
- (id)transceiveMultiple:(id)arg1 forSEID:(id)arg2 error:(id*)arg3;
- (id)transceiveMultiple:(id)arg1 forSEID:(id)arg2 toOS:(long long)arg3 error:(id*)arg4;
- (id)transitAppletState:(id)arg1 error:(id*)arg2;
- (unsigned int)validateSEPairings:(id*)arg1;
- (unsigned int)validateSEPairings:(id*)arg1 outSEPairingVersion:(unsigned long long*)arg2;

@end
