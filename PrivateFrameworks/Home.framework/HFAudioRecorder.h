
@interface HFAudioRecorder : NSObject <AVAudioRecorderDelegate> {
    AVAudioRecorder * _audioRecorder;
    <HFAudioRecorderDelegate> * _audioRecorderDelegate;
    bool  _audioSessionIsActive;
    NSDateFormatter * _dateFormatter;
    NSObject<OS_dispatch_source> * _powerMeteringTimer;
    bool  _recording;
    struct OpaqueAudioFileID { } * _recordingAudiofileID;
    NSURL * _recordingAudiofileURL;
    double  _recordingDurationLimit;
    double  _recordingStartTimeInterval;
    unsigned long long  _recordingStopSource;
    double  _recordingStopTimeInterval;
    NSNumber * _routeChangeReason;
    unsigned int  _soundIDForRecordBegin;
    unsigned int  _soundIDForRecordEnd;
    long long  _totalPacketsCount;
}

@property (nonatomic, retain) AVAudioRecorder *audioRecorder;
@property (nonatomic) <HFAudioRecorderDelegate> *audioRecorderDelegate;
@property (getter=isAudioSessionActive, nonatomic) bool audioSessionIsActive;
@property (nonatomic, retain) NSDateFormatter *dateFormatter;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *powerMeteringTimer;
@property (getter=isRecording, nonatomic) bool recording;
@property (nonatomic) struct OpaqueAudioFileID { }*recordingAudiofileID;
@property (nonatomic, retain) NSURL *recordingAudiofileURL;
@property (nonatomic) double recordingDurationLimit;
@property (nonatomic) double recordingStartTimeInterval;
@property (nonatomic) unsigned long long recordingStopSource;
@property (nonatomic) double recordingStopTimeInterval;
@property (nonatomic, retain) NSNumber *routeChangeReason;
@property (nonatomic) unsigned int soundIDForRecordBegin;
@property (nonatomic) unsigned int soundIDForRecordEnd;
@property (readonly) Class superclass;
@property (nonatomic) long long totalPacketsCount;

- (void).cxx_destruct;
- (void)_activateRecordingAudioSession;
- (id)_audioRecorderSettings;
- (void)_cleanup;
- (void)_createSystemSounds;
- (void)_deactivateRecordingAudioSession;
- (void)_deregisterAudioSessionObservers;
- (bool)_isPowerMeteringTimerValid;
- (void)_playStartRecordingToneWithCompletion:(id /* block */)arg1;
- (void)_playStopRecordingToneWithCompletion:(id /* block */)arg1;
- (void)_registerAudioSessionObservers;
- (void)_setupAudioFileForRecording;
- (void)_startPowerMeteringTimer;
- (void)_stopPowerMeteringTimer;
- (id)audioRecorder;
- (id)audioRecorderDelegate;
- (void)audioRecorderDidFinishRecording:(id)arg1 successfully:(bool)arg2;
- (void)audioSessionDidInterrupt:(id)arg1;
- (void)audioSessionMediaServicesWereLost:(id)arg1;
- (void)audioSessionMediaServicesWereReset:(id)arg1;
- (void)audioSessionRouteChanged:(id)arg1;
- (double)currentRecordedDuration;
- (id)dateFormatter;
- (void)dealloc;
- (id)initWithActivationMode:(long long)arg1 delegate:(id)arg2;
- (id)initWithAudioRecorderDelegate:(id)arg1;
- (bool)isAudioSessionActive;
- (bool)isRecording;
- (void)playAlertSoundForType:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
- (id)powerMeteringTimer;
- (void)prepareRecording;
- (struct OpaqueAudioFileID { }*)recordingAudiofileID;
- (id)recordingAudiofileURL;
- (double)recordingDurationLimit;
- (double)recordingStartTimeInterval;
- (unsigned long long)recordingStopSource;
- (double)recordingStopTimeInterval;
- (id)routeChangeReason;
- (void)setAudioRecorder:(id)arg1;
- (void)setAudioRecorderDelegate:(id)arg1;
- (void)setAudioSessionIsActive:(bool)arg1;
- (void)setDateFormatter:(id)arg1;
- (void)setPowerMeteringTimer:(id)arg1;
- (void)setRecording:(bool)arg1;
- (void)setRecordingAudiofileID:(struct OpaqueAudioFileID { }*)arg1;
- (void)setRecordingAudiofileURL:(id)arg1;
- (void)setRecordingDurationLimit:(double)arg1;
- (void)setRecordingStartTimeInterval:(double)arg1;
- (void)setRecordingStopSource:(unsigned long long)arg1;
- (void)setRecordingStopTimeInterval:(double)arg1;
- (void)setRouteChangeReason:(id)arg1;
- (void)setSoundIDForRecordBegin:(unsigned int)arg1;
- (void)setSoundIDForRecordEnd:(unsigned int)arg1;
- (void)setTotalPacketsCount:(long long)arg1;
- (unsigned int)soundIDForRecordBegin;
- (unsigned int)soundIDForRecordEnd;
- (void)startRecording;
- (void)stopRecording;
- (long long)totalPacketsCount;

@end
