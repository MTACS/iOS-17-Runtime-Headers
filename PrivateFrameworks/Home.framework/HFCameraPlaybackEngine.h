
@interface HFCameraPlaybackEngine : NSObject <HFCameraClipPlayerDelegate, HFCameraLiveStreamControllerDelegate, HMCameraRecordingEventManagerObserver> {
    HMCameraProfile * _cameraProfile;
    HMCameraClipManager * _clipManager;
    <HFCameraClipPlaying> * _clipPlayer;
    <HFCameraClipScrubbing> * _clipScrubber;
    unsigned long long  _engineMode;
    HFCameraPlaybackEngineEventCache * _eventCache;
    HMHome * _home;
    long long  _lastPlayerTimeControlStatus;
    NSDate * _lastRequestedClipPlaybackDate;
    HMCameraSource * _liveCameraSource;
    <HFCameraLiveStreamControlling> * _liveStreamController;
    bool  _microphoneEnabled;
    NSUUID * _notificationCenterClipUUID;
    NADelegateDispatcher * _observerDispatcher;
    NSMapTable * _observerStates;
    bool  _pictureInPictureModeActive;
    unsigned long long  _playbackContentType;
    NSError * _playbackError;
    unsigned long long  _playbackRetryAttempts;
    HFCameraAnalyticsCameraClipPlaybackSessionEvent * _playbackSessionEvent;
    bool  _prefersAudioEnabled;
    bool  _scrubbing;
    unsigned long long  _scrubbingInProgressCount;
    unsigned long long  _scrubbingSpeed;
    bool  _shouldBypassHighQualityScrubbing;
    bool  _shouldBypassVideoFetchRequest;
    bool  _streamAudioEnabled;
    float  _streamAudioVolume;
    unsigned long long  _timeControlStatus;
    unsigned long long  _timelineState;
    bool  _userScrubbing;
    bool  _wantsToPlay;
}

@property (nonatomic, readonly, copy) NSArray *cameraClips;
@property (nonatomic, readonly, copy) NSArray *cameraEvents;
@property (nonatomic, retain) HMCameraProfile *cameraProfile;
@property (nonatomic) HMCameraClipManager *clipManager;
@property (nonatomic, readonly) <HFCameraClipPlaying> *clipPlayer;
@property (nonatomic, readonly) <HFCameraClipScrubbing> *clipScrubber;
@property (nonatomic, readonly) HMCameraClip *currentClip;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long engineMode;
@property (nonatomic, retain) HFCameraPlaybackEngineEventCache *eventCache;
@property (nonatomic, readonly) bool hasRecordingEvents;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) HMHome *home;
@property (nonatomic, readonly) bool isCameraPortraitMode;
@property (nonatomic) long long lastPlayerTimeControlStatus;
@property (nonatomic, copy) NSDate *lastRequestedClipPlaybackDate;
@property (nonatomic, retain) HMCameraSource *liveCameraSource;
@property (nonatomic, readonly) <HFCameraLiveStreamControlling> *liveStreamController;
@property (getter=isMicrophoneEnabled, nonatomic) bool microphoneEnabled;
@property (nonatomic, retain) NSUUID *notificationCenterClipUUID;
@property (nonatomic, readonly) NADelegateDispatcher *observerDispatcher;
@property (nonatomic, readonly) NSMapTable *observerStates;
@property (nonatomic, readonly, copy) NSArray *observers;
@property (getter=isPictureInPictureModeActive, nonatomic) bool pictureInPictureModeActive;
@property (nonatomic) unsigned long long playbackContentType;
@property (nonatomic, retain) NSError *playbackError;
@property (nonatomic, retain) HFCameraPlaybackPosition *playbackPosition;
@property (nonatomic) unsigned long long playbackRetryAttempts;
@property (nonatomic, retain) HFCameraAnalyticsCameraClipPlaybackSessionEvent *playbackSessionEvent;
@property (nonatomic, readonly) AVPlayer *player;
@property (nonatomic) bool prefersAudioEnabled;
@property (getter=isScrubbing, nonatomic) bool scrubbing;
@property (nonatomic) unsigned long long scrubbingInProgressCount;
@property (nonatomic) unsigned long long scrubbingSpeed;
@property (nonatomic) bool shouldBypassHighQualityScrubbing;
@property (nonatomic) bool shouldBypassVideoFetchRequest;
@property (nonatomic, readonly) bool shouldDisplayVolumeControls;
@property (getter=isStreamAudioEnabled, nonatomic) bool streamAudioEnabled;
@property (nonatomic) float streamAudioVolume;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long timeControlStatus;
@property (nonatomic) unsigned long long timelineState;
@property (getter=isUserScrubbing, nonatomic) bool userScrubbing;
@property (nonatomic) bool wantsToPlay;

+ (id)findClipPositionForDate:(id)arg1 inEvents:(id)arg2 options:(unsigned long long)arg3;
+ (unsigned long long)hf_indexOfClipForDate:(id)arg1 inEvents:(id)arg2 enumerationOptions:(unsigned long long)arg3 searchOptions:(unsigned long long)arg4;

- (void).cxx_destruct;
- (id)_derivedPlaybackError;
- (unsigned long long)_derivedTimeControlStatus;
- (void)_setMicrophoneEnabled:(bool)arg1 notifyObservers:(bool)arg2;
- (void)_setPlayerVolume:(float)arg1 notifyObservers:(bool)arg2;
- (void)_setStreamAudioEnabled:(bool)arg1 notifyObservers:(bool)arg2;
- (void)_setupClipPlayerWithClipManager:(id)arg1;
- (void)_setupLiveStreamController:(id)arg1;
- (void)_setupTimeObservationForObserver:(id)arg1;
- (void)_updatePlaybackStateNotifyingObservers:(bool)arg1;
- (void)_updatePlaybackStateNotifyingObservers:(bool)arg1 rebuildClipPlayerIfNeeded:(bool)arg2;
- (void)_updateStateForRequestedPlaybackPosition:(id)arg1 notifyObservers:(bool)arg2;
- (void)addObserver:(id)arg1 withOptions:(id)arg2;
- (void)beginScrubbing;
- (id)cameraClips;
- (id)cameraEvents;
- (id)cameraProfile;
- (id)clipManager;
- (id)clipPlayer;
- (void)clipPlayer:(id)arg1 didUpdateError:(id)arg2 isFatal:(bool)arg3;
- (void)clipPlayer:(id)arg1 didUpdateMuted:(bool)arg2;
- (void)clipPlayer:(id)arg1 didUpdateTimeControlStatus:(long long)arg2;
- (void)clipPlayerDidPlayToEndTime:(id)arg1;
- (id)clipScrubber;
- (id)currentClip;
- (void)dealloc;
- (void)endScrubbing;
- (unsigned long long)engineMode;
- (id)engineModeDescription;
- (id)eventCache;
- (void)fetchCameraClipForNotificationUUID:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)fetchCameraClipForUUID:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)fetchCameraEventsWithCompletion:(id /* block */)arg1;
- (id)findClipPositionForDate:(id)arg1;
- (id)findClipPositionForDate:(id)arg1 options:(unsigned long long)arg2;
- (id)firstOfTheDayClipForDate:(id)arg1;
- (bool)hasRecordingEvents;
- (id)home;
- (id)init;
- (id)initWithConfiguration:(id)arg1;
- (bool)isCameraPortraitMode;
- (bool)isFirstEventOfTheDay:(id)arg1;
- (bool)isLiveStreamPlaying;
- (bool)isLiveStreaming;
- (bool)isMicrophoneEnabled;
- (bool)isPictureInPictureModeActive;
- (bool)isScrubbing;
- (bool)isStreamAudioEnabled;
- (bool)isUserScrubbing;
- (long long)lastPlayerTimeControlStatus;
- (id)lastRequestedClipPlaybackDate;
- (id)liveCameraSource;
- (id)liveStreamController;
- (void)modifyPlaybackFromSender:(id)arg1 usingBlock:(id /* block */)arg2;
- (id)notificationCenterClipUUID;
- (id)observerDispatcher;
- (id)observerStates;
- (id)observers;
- (void)pause;
- (void)play;
- (unsigned long long)playbackContentType;
- (id)playbackError;
- (id)playbackPosition;
- (unsigned long long)playbackRetryAttempts;
- (id)playbackSessionEvent;
- (id)player;
- (bool)prefersAudioEnabled;
- (void)recordingEventManager:(id)arg1 didRemoveRecordingEventsWithUUIDs:(id)arg2;
- (void)recordingEventManager:(id)arg1 didUpdateRecordingEvents:(id)arg2;
- (void)removeObserver:(id)arg1;
- (unsigned long long)scrubbingInProgressCount;
- (unsigned long long)scrubbingSpeed;
- (void)setCameraProfile:(id)arg1;
- (void)setClipManager:(id)arg1;
- (void)setEngineMode:(unsigned long long)arg1;
- (void)setEventCache:(id)arg1;
- (void)setHome:(id)arg1;
- (void)setLastPlayerTimeControlStatus:(long long)arg1;
- (void)setLastRequestedClipPlaybackDate:(id)arg1;
- (void)setLiveCameraSource:(id)arg1;
- (void)setMicrophoneEnabled:(bool)arg1;
- (void)setNotificationCenterClipUUID:(id)arg1;
- (void)setPictureInPictureModeActive:(bool)arg1;
- (void)setPlaybackContentType:(unsigned long long)arg1;
- (void)setPlaybackError:(id)arg1;
- (void)setPlaybackPosition:(id)arg1;
- (void)setPlaybackRetryAttempts:(unsigned long long)arg1;
- (void)setPlaybackSessionEvent:(id)arg1;
- (void)setPrefersAudioEnabled:(bool)arg1;
- (void)setScrubbing:(bool)arg1;
- (void)setScrubbingInProgressCount:(unsigned long long)arg1;
- (void)setScrubbingSpeed:(unsigned long long)arg1;
- (void)setShouldBypassHighQualityScrubbing:(bool)arg1;
- (void)setShouldBypassVideoFetchRequest:(bool)arg1;
- (void)setStreamAudioEnabled:(bool)arg1;
- (void)setStreamAudioVolume:(float)arg1;
- (void)setTimeControlStatus:(unsigned long long)arg1;
- (void)setTimelineState:(unsigned long long)arg1;
- (void)setUserScrubbing:(bool)arg1;
- (void)setWantsToPlay:(bool)arg1;
- (id)shortDebugDescription;
- (bool)shouldBypassHighQualityScrubbing;
- (bool)shouldBypassVideoFetchRequest;
- (bool)shouldDisplayVolumeControls;
- (void)startPlaybackAtDate:(id)arg1 withClip:(id)arg2;
- (void)startPlaybackForCurrentClip;
- (float)streamAudioVolume;
- (void)streamControllerStateDidUpdate:(id)arg1;
- (unsigned long long)timeControlStatus;
- (id)timeControlStatusDescription;
- (unsigned long long)timelineState;
- (id)timelineStateDescription;
- (void)updateConfiguration:(id)arg1;
- (void)updateLiveStreamForCameraProfile:(id)arg1;
- (void)updatePlaybackPositionToDate:(id)arg1 usingClip:(id)arg2;
- (bool)wantsToPlay;

@end
