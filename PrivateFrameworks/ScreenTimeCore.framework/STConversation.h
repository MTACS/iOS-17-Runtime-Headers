
@interface STConversation : NSObject {
    NSString * _bundleIdentifier;
    DMFCommunicationPolicyMonitor * _communicationPolicyMonitor;
    CNContactStore * _contactStore;
    NSMapTable * _contextByHandles;
    id /* block */  _conversationCompletionHandler;
    unsigned long long  _currentApplicationState;
    long long  _currentThirdPartyApplicationState;
    bool  _didFetchInitialApplicationState;
    bool  _didFetchInitialEmergencyModeState;
    bool  _didFetchInitialScreenTimePolicyState;
    NSObject * _didFetchInitialStateLock;
    bool  _didFetchInitialThirdPartyApplicationState;
    bool  _emergencyModeEnabled;
    DMFEmergencyModeMonitor * _emergencyModeMonitor;
    int  _emergencyModeNotifyToken;
    long long  _generalScreenTimePolicy;
    bool  _isThirdPartyBundleIdentifier;
    STManagementState * _managementState;
    STConversation * _me;
    int  _policyNotifyToken;
    NSString * _processName;
    NSObject<OS_dispatch_queue> * _stateChangeQueue;
    DMFApplicationPolicyMonitor * _thirdPartyApplicationPolicyMonitor;
    long long  _whileLimitedPolicy;
    CNDowntimeWhitelist * _whitelist;
}

@property (readonly, copy) NSString *bundleIdentifier;
@property (retain) DMFCommunicationPolicyMonitor *communicationPolicyMonitor;
@property (readonly) CNContactStore *contactStore;
@property (copy) id /* block */ conversationCompletionHandler;
@property unsigned long long currentApplicationState;
@property long long currentThirdPartyApplicationState;
@property bool didFetchInitialApplicationState;
@property bool didFetchInitialEmergencyModeState;
@property bool didFetchInitialScreenTimePolicyState;
@property bool didFetchInitialThirdPartyApplicationState;
@property bool emergencyModeEnabled;
@property (retain) DMFEmergencyModeMonitor *emergencyModeMonitor;
@property (readonly) int emergencyModeNotifyToken;
@property long long generalScreenTimePolicy;
@property (readonly) bool isThirdPartyBundleIdentifier;
@property (retain) STManagementState *managementState;
@property (retain) STConversation *me;
@property (readonly) int policyNotifyToken;
@property (readonly, copy) NSString *processName;
@property (retain) DMFApplicationPolicyMonitor *thirdPartyApplicationPolicyMonitor;
@property long long whileLimitedPolicy;
@property (readonly) CNDowntimeWhitelist *whitelist;

+ (void)requestConversationWithBundleIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;

- (void).cxx_destruct;
- (void)_contactStoreDidChange;
- (id)_contactsByHandle:(id)arg1 error:(id*)arg2;
- (void)_currentApplicationStateDidChange;
- (void)_currentThirdPartyApplicationStateDidChange;
- (bool)_doesContainAtLeastOneContactInHandles:(id)arg1 contactsByHandle:(id)arg2;
- (void)_emergencyModeDidChange;
- (id)_filteredArrayForKnownHandlesInArray:(id)arg1;
- (void)_populateAllowedContactsByHandlesForContactHandles:(id)arg1 context:(id)arg2;
- (void)_populateThirdPartyAllowedContactsByHandlesForContactHandles:(id)arg1 context:(id)arg2;
- (void)_screenTimePolicyDidChange;
- (bool)_shouldGeneralScreenTimeAllowHandles:(id)arg1 context:(id)arg2;
- (bool)_shouldWhileLimitedAllowHandles:(id)arg1 context:(id)arg2;
- (void)_stConversationCommonInitSetupObservationOfStateChanges;
- (void)_stConversationCommonInitWithBundleIdentifier:(id)arg1 contactStore:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_stConversationCommonInitWithThirdPartyBundleIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_updateAllContextsForNewWhileLimitedPolicyOrWhitelist;
- (void)_updateAllContextsUpdateGeneral:(bool)arg1 updateLimited:(bool)arg2 updateCurrentApplicationState:(bool)arg3 updateAllowedByContactsHandle:(bool)arg4 refreshContacts:(bool)arg5 refreshWhitelist:(bool)arg6 updateEmergencyMode:(bool)arg7;
- (void)_updateAllThirdPartyContexts;
- (void)_updateContext:(id)arg1 forHandles:(id)arg2 updateGeneral:(bool)arg3 updateLimited:(bool)arg4 updateCurrentApplicationState:(bool)arg5 updateAllowedByContactsHandle:(bool)arg6 refreshContacts:(bool)arg7 refreshWhitelist:(bool)arg8 updateEmergencyMode:(bool)arg9;
- (void)_updateThirdPartyContext:(id)arg1 forHandles:(id)arg2;
- (id)allowableByContactsHandles:(id)arg1;
- (id)bundleIdentifier;
- (void)callCompletionHandlerIfNeededWithConversation:(id)arg1 error:(id)arg2;
- (void)callCompletionHandlerIfNeededWithThirdPartyConversation:(id)arg1 error:(id)arg2;
- (id)communicationPolicyMonitor;
- (id)contactStore;
- (id /* block */)conversationCompletionHandler;
- (unsigned long long)currentApplicationState;
- (long long)currentThirdPartyApplicationState;
- (void)dealloc;
- (bool)didFetchInitialApplicationState;
- (bool)didFetchInitialEmergencyModeState;
- (bool)didFetchInitialScreenTimePolicyState;
- (bool)didFetchInitialThirdPartyApplicationState;
- (bool)emergencyModeEnabled;
- (id)emergencyModeMonitor;
- (int)emergencyModeNotifyToken;
- (long long)generalScreenTimePolicy;
- (id)initSynchronouslyWithBundleIdentifier:(id)arg1;
- (id)initSynchronouslyWithThirdPartyBundleIdentifier:(id)arg1;
- (id)initWithBundleIdentifier:(id)arg1;
- (id)initWithBundleIdentifier:(id)arg1 contactStore:(id)arg2;
- (id)initWithBundleIdentifier:(id)arg1 contactStore:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)initWithThirdPartyBundleIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)isThirdPartyBundleIdentifier;
- (id)managementState;
- (id)me;
- (int)policyNotifyToken;
- (id)processName;
- (void)setCommunicationPolicyMonitor:(id)arg1;
- (void)setConversationCompletionHandler:(id /* block */)arg1;
- (void)setCurrentApplicationState:(unsigned long long)arg1;
- (void)setCurrentThirdPartyApplicationState:(long long)arg1;
- (void)setDidFetchInitialApplicationState:(bool)arg1;
- (void)setDidFetchInitialEmergencyModeState:(bool)arg1;
- (void)setDidFetchInitialScreenTimePolicyState:(bool)arg1;
- (void)setDidFetchInitialThirdPartyApplicationState:(bool)arg1;
- (void)setEmergencyModeEnabled:(bool)arg1;
- (void)setEmergencyModeMonitor:(id)arg1;
- (void)setGeneralScreenTimePolicy:(long long)arg1;
- (void)setManagementState:(id)arg1;
- (void)setMe:(id)arg1;
- (void)setThirdPartyApplicationPolicyMonitor:(id)arg1;
- (void)setWhileLimitedPolicy:(long long)arg1;
- (id)thirdPartyApplicationPolicyMonitor;
- (long long)whileLimitedPolicy;
- (id)whitelist;

@end
