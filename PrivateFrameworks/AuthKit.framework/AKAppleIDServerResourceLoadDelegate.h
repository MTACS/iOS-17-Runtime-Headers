
@interface AKAppleIDServerResourceLoadDelegate : NSObject <NSSecureCoding> {
    NSString * _altDSID;
    <AKAnisetteServiceProtocol> * _anisetteDataProvider;
    NSString * _appProvidedContext;
    NSString * _bagUrlKey;
    bool  _cliMode;
    NSString * _clientAppName;
    NSString * _clientBundleID;
    AKAppleIDAuthenticationContext * _context;
    NSDictionary * _continuationHeaders;
    NSString * _continuationToken;
    NSString * _continuityIDMSData;
    NSString * _custodianRecoveryToken;
    NSString * _dataCenterIdentifier;
    NSString * _followupItems;
    NSNumber * _hasEmptyPasswordOverride;
    NSString * _heartbeatToken;
    NSString * _identityToken;
    NSString * _initialURLRequestKey;
    NSArray * _loggedInServices;
    NSString * _passwordResetToken;
    NSArray * _phoneInformation;
    NSString * _phoneNumberCertificate;
    NSString * _privateEmailBundleId;
    NSString * _privateEmailDomain;
    NSString * _proxiedAltDSID;
    AKDevice * _proxiedDevice;
    AKAnisetteData * _proxiedDeviceAnisetteData;
    AKAttestationData * _proxiedDeviceAttestationData;
    NSString * _proxiedIdentityToken;
    AKAnisetteProvisioningController * _proxiedProvisioningController;
    NSString * _proxyAppName;
    NSString * _securityUpgradeContext;
    NSString * _serviceToken;
    NSString * _serviceTokenIdentifier;
    long long  _serviceType;
    bool  _shouldOfferSecurityUpgrade;
    bool  _shouldSendEphemeralAuthHeader;
    bool  _shouldSendICSCIntentHeader;
    bool  _shouldSendLocalUserHasAppleIDLoginHeader;
    bool  _shouldSendPhoneNumber;
    bool  _shouldSendSigningHeaders;
    NSString * _telemetryDeviceSessionID;
    NSString * _telemetryFlowID;
}

@property (nonatomic, copy) NSString *altDSID;
@property (nonatomic, retain) <AKAnisetteServiceProtocol> *anisetteDataProvider;
@property (nonatomic, copy) NSString *appProvidedContext;
@property (nonatomic, copy) NSString *bagUrlKey;
@property (nonatomic) bool cliMode;
@property (nonatomic, copy) NSString *clientAppName;
@property (nonatomic, copy) NSString *clientBundleID;
@property (nonatomic, copy) NSString *continuationToken;
@property (nonatomic, copy) NSString *continuityIDMSData;
@property (nonatomic, copy) NSString *custodianRecoveryToken;
@property (nonatomic, copy) NSString *dataCenterIdentifier;
@property (nonatomic, copy) NSString *followupItems;
@property (nonatomic, retain) NSNumber *hasEmptyPasswordOverride;
@property (nonatomic, copy) NSString *heartbeatToken;
@property (nonatomic, copy) NSString *identityToken;
@property (nonatomic, copy) NSString *initialURLRequestKey;
@property (nonatomic, copy) NSArray *loggedInServices;
@property (nonatomic, copy) NSString *passwordResetToken;
@property (nonatomic, copy) NSArray *phoneInformation;
@property (nonatomic, copy) NSString *phoneNumberCertificate;
@property (nonatomic, copy) NSString *privateEmailBundleId;
@property (nonatomic, copy) NSString *privateEmailDomain;
@property (nonatomic, retain) NSString *proxiedAltDSID;
@property (nonatomic, retain) AKDevice *proxiedDevice;
@property (nonatomic, retain) AKAnisetteData *proxiedDeviceAnisetteData;
@property (nonatomic, retain) AKAttestationData *proxiedDeviceAttestationData;
@property (nonatomic, retain) NSString *proxiedIdentityToken;
@property (nonatomic, copy) NSString *proxyAppName;
@property (nonatomic, copy) NSString *securityUpgradeContext;
@property (nonatomic, copy) NSString *serviceToken;
@property (nonatomic, copy) NSString *serviceTokenIdentifier;
@property (nonatomic) long long serviceType;
@property (nonatomic) bool shouldOfferSecurityUpgrade;
@property (nonatomic) bool shouldSendAbsintheHeader;
@property (nonatomic) bool shouldSendEphemeralAuthHeader;
@property (nonatomic) bool shouldSendICSCIntentHeader;
@property (nonatomic) bool shouldSendLocalUserHasAppleIDLoginHeader;
@property (nonatomic) bool shouldSendPhoneNumber;
@property (nonatomic) bool shouldSendSigningHeaders;
@property (nonatomic, copy) NSString *telemetryDeviceSessionID;
@property (nonatomic, copy) NSString *telemetryFlowID;

+ (id)sharedController;
+ (unsigned long long)signalFromServerResponse:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_accountDSID;
- (id)_fetchApplicationNameForBundleId:(id)arg1;
- (void)_harvestContinuationHeadersFromHeaders:(id)arg1;
- (bool)_isOTCliqueStatusIn;
- (bool)_isResponseSuccessful:(id)arg1;
- (id)_proxiedProvisioningController;
- (id)_retrieveAndResetContinuationHeaders;
- (void)_signRequest:(id)arg1;
- (void)_signRequestWithBAAHeaders:(id)arg1;
- (void)_signWithFeatureOptInHeaders:(id)arg1;
- (void)_signWithProxiedDeviceHeaders:(id)arg1;
- (id)altDSID;
- (id)anisetteDataProvider;
- (id)appProvidedContext;
- (id)bagUrlKey;
- (bool)cliMode;
- (id)clientAppName;
- (id)clientBundleID;
- (id)continuationToken;
- (id)continuityIDMSData;
- (id)custodianRecoveryToken;
- (id)dataCenterIdentifier;
- (void)decorateWithCircleRequestContext:(id)arg1;
- (void)decorateWithContext:(id)arg1;
- (void)decorateWithPrivateEmailContext:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)followupItems;
- (id)hasEmptyPasswordOverride;
- (id)heartbeatToken;
- (id)identityToken;
- (id)initWithAltDSID:(id)arg1 identityToken:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initialURLRequestKey;
- (bool)isAuthenticationRequired:(id)arg1;
- (bool)isResponseActionable:(id)arg1;
- (bool)isResponseCompleteAndConflict:(id)arg1;
- (bool)isResponseFinal:(id)arg1;
- (bool)isResponseFinalForHSA2ServerFlow:(id)arg1;
- (id)loggedInServices;
- (id)passwordResetToken;
- (id)phoneInformation;
- (id)phoneNumberCertificate;
- (id)privateEmailBundleId;
- (id)privateEmailDomain;
- (void)processResponse:(id)arg1;
- (id)proxiedAltDSID;
- (id)proxiedDevice;
- (id)proxiedDeviceAnisetteData;
- (id)proxiedDeviceAttestationData;
- (id)proxiedIdentityToken;
- (id)proxyAppName;
- (id)securityUpgradeContext;
- (id)serviceToken;
- (id)serviceTokenIdentifier;
- (long long)serviceType;
- (void)setAltDSID:(id)arg1;
- (void)setAnisetteDataProvider:(id)arg1;
- (void)setAppProvidedContext:(id)arg1;
- (void)setBagUrlKey:(id)arg1;
- (void)setCliMode:(bool)arg1;
- (void)setClientAppName:(id)arg1;
- (void)setClientBundleID:(id)arg1;
- (void)setContinuationToken:(id)arg1;
- (void)setContinuityIDMSData:(id)arg1;
- (void)setCustodianRecoveryToken:(id)arg1;
- (void)setDataCenterIdentifier:(id)arg1;
- (void)setFollowupItems:(id)arg1;
- (void)setHasEmptyPasswordOverride:(id)arg1;
- (void)setHeartbeatToken:(id)arg1;
- (void)setIdentityToken:(id)arg1;
- (void)setInitialURLRequestKey:(id)arg1;
- (void)setLoggedInServices:(id)arg1;
- (void)setPasswordResetToken:(id)arg1;
- (void)setPhoneInformation:(id)arg1;
- (void)setPhoneNumberCertificate:(id)arg1;
- (void)setPrivateEmailBundleId:(id)arg1;
- (void)setPrivateEmailDomain:(id)arg1;
- (void)setProxiedAltDSID:(id)arg1;
- (void)setProxiedDevice:(id)arg1;
- (void)setProxiedDeviceAnisetteData:(id)arg1;
- (void)setProxiedDeviceAttestationData:(id)arg1;
- (void)setProxiedIdentityToken:(id)arg1;
- (void)setProxyAppName:(id)arg1;
- (void)setSecurityUpgradeContext:(id)arg1;
- (void)setServiceToken:(id)arg1;
- (void)setServiceTokenIdentifier:(id)arg1;
- (void)setServiceType:(long long)arg1;
- (void)setShouldOfferSecurityUpgrade:(bool)arg1;
- (void)setShouldSendAbsintheHeader:(bool)arg1;
- (void)setShouldSendEphemeralAuthHeader:(bool)arg1;
- (void)setShouldSendICSCIntentHeader:(bool)arg1;
- (void)setShouldSendLocalUserHasAppleIDLoginHeader:(bool)arg1;
- (void)setShouldSendPhoneNumber:(bool)arg1;
- (void)setShouldSendSigningHeaders:(bool)arg1;
- (void)setTelemetryDeviceSessionID:(id)arg1;
- (void)setTelemetryFlowID:(id)arg1;
- (bool)shouldOfferSecurityUpgrade;
- (bool)shouldSendAbsintheHeader;
- (bool)shouldSendEphemeralAuthHeader;
- (bool)shouldSendICSCIntentHeader;
- (bool)shouldSendLocalUserHasAppleIDLoginHeader;
- (bool)shouldSendPhoneNumber;
- (bool)shouldSendSigningHeaders;
- (void)signRequest:(id)arg1;
- (void)signRequest:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)signRequestWithBasicHeaders:(id)arg1;
- (void)signRequestWithCommonHeaders:(id)arg1;
- (id)signingController;
- (id)telemetryDeviceSessionID;
- (id)telemetryFlowID;
- (void)updateWithAuthResults:(id)arg1;

@end
