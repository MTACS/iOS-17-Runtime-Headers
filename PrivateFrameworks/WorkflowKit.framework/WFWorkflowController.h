
@interface WFWorkflowController : NSObject <WFActionParameterInputProvider, WFActionRunningDelegate, WFDialogTransformerDelegate, WFVariableDataSource, WFWorkflowNoInputBehaviorDelegate> {
    bool  _acquiresAssertionWhileRunning;
    bool  _actionDidRunRemotely;
    NSMutableDictionary * _actionOutputsByWorkflowIndex;
    NSString * _automationTrialID;
    NSString * _automationType;
    WFContentCollection * _capturedFiles;
    WFContentItemCache * _contentItemCache;
    NSProgress * _currentActionProgress;
    unsigned long long  _currentIndex;
    <WFWorkflowControllerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    bool  _donateInteraction;
    NSMapTable * _environmentValueTable;
    NSObject<OS_dispatch_queue> * _executionQueue;
    NSObject<OS_voucher> * _executionVoucher;
    WFSmartPromptsExfiltrationLogger * _exfiltrationLogger;
    WFControlFlowAttributionTracker * _flowTracker;
    WFContentCollection * _input;
    bool  _isAutomationSuggestion;
    NSDictionary * _listenerEndpoints;
    WFOutOfProcessWorkflowController * _outOfProcessController;
    WFContentCollection * _output;
    unsigned long long  _outputBehavior;
    WFContentCollection * _pendingActionInput;
    NSDictionary * _pendingProcessedParameters;
    WFWorkflowControllerState * _pendingState;
    NSProgress * _progress;
    bool  _resumed;
    NSString * _runSource;
    WFWorkflowRunViewSource * _runViewSource;
    bool  _running;
    WFWorkflowRunningContext * _runningContext;
    bool  _shouldDisablePrivacyPrompts;
    NSDate * _startDate;
    bool  _stepping;
    WFWorkflowController * _strongSelf;
    NSMapTable * _variableTable;
    WFWorkflow * _workflow;
    RBSAssertion * _workflowRunAssertion;
}

@property (nonatomic) bool acquiresAssertionWhileRunning;
@property (nonatomic) bool actionDidRunRemotely;
@property (nonatomic, retain) NSMutableDictionary *actionOutputsByWorkflowIndex;
@property (nonatomic, copy) NSString *automationTrialID;
@property (nonatomic, copy) NSString *automationType;
@property (nonatomic, retain) WFContentCollection *capturedFiles;
@property (nonatomic, retain) WFContentItemCache *contentItemCache;
@property (nonatomic, readonly) WFAction *currentAction;
@property (nonatomic, retain) NSProgress *currentActionProgress;
@property (nonatomic) unsigned long long currentIndex;
@property (nonatomic, retain) WFWorkflowControllerState *currentState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <WFWorkflowControllerDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool donateInteraction;
@property (nonatomic, retain) NSMapTable *environmentValueTable;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *executionQueue;
@property (nonatomic, retain) NSObject<OS_voucher> *executionVoucher;
@property (nonatomic, retain) WFSmartPromptsExfiltrationLogger *exfiltrationLogger;
@property (nonatomic, retain) WFControlFlowAttributionTracker *flowTracker;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) WFContentCollection *input;
@property (nonatomic) bool isAutomationSuggestion;
@property (nonatomic, copy) NSDictionary *listenerEndpoints;
@property (nonatomic, retain) WFOutOfProcessWorkflowController *outOfProcessController;
@property (nonatomic, retain) WFContentCollection *output;
@property (nonatomic) unsigned long long outputBehavior;
@property (nonatomic, retain) WFContentCollection *pendingActionInput;
@property (nonatomic, retain) NSDictionary *pendingProcessedParameters;
@property (nonatomic, retain) WFWorkflowControllerState *pendingState;
@property (nonatomic, retain) NSProgress *progress;
@property (nonatomic) bool resumed;
@property (nonatomic, copy) NSString *runSource;
@property (nonatomic, copy) WFWorkflowRunViewSource *runViewSource;
@property (getter=isRunning, nonatomic) bool running;
@property (nonatomic, retain) WFWorkflowRunningContext *runningContext;
@property (nonatomic) bool shouldDisablePrivacyPrompts;
@property (nonatomic, retain) NSDate *startDate;
@property (getter=isStepping, nonatomic) bool stepping;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMapTable *variableTable;
@property (nonatomic, retain) WFWorkflow *workflow;
@property (nonatomic, retain) RBSAssertion *workflowRunAssertion;

+ (void)initialize;

- (void).cxx_destruct;
- (void)_finishStepWithError:(id)arg1;
- (void)_run;
- (void)_step;
- (void)acquireAssertionIfNeeded;
- (bool)acquiresAssertionWhileRunning;
- (bool)action:(id)arg1 canProvideInputForParameter:(id)arg2;
- (void)action:(id)arg1 didDecideRunningProgressIsAllowed:(bool)arg2;
- (void)action:(id)arg1 didGenerateReversalState:(id)arg2;
- (void)action:(id)arg1 handleTestingEvent:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)action:(id)arg1 provideInputForParameters:(id)arg2 withDefaultStates:(id)arg3 prompts:(id)arg4 completionHandler:(id /* block */)arg5;
- (bool)actionDidRunRemotely;
- (id)actionOutputs;
- (id)actionOutputsByWorkflowIndex;
- (id)actionReversalStateForAction:(id)arg1;
- (id)automationTrialID;
- (id)automationType;
- (void)autoreleaseSelf;
- (bool)canRun;
- (void)captureFileRepresentation:(id)arg1;
- (id)capturedFiles;
- (id)contentForPrivateVariableKey:(id)arg1;
- (id)contentForVariableWithName:(id)arg1;
- (id)contentItemCache;
- (id)currentAction;
- (id)currentActionProgress;
- (unsigned long long)currentIndex;
- (id)currentRunningContextForAction:(id)arg1;
- (id)currentState;
- (id)currentStateWithContext:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)dialogTransformer:(id)arg1 stopRunningWithError:(id)arg2;
- (void)dialogTransformerDidDisplayDialog:(id)arg1;
- (void)dialogTransformerWillDisplayDialog:(id)arg1;
- (void)didFinishRunningWithError:(id)arg1 cancelled:(bool)arg2;
- (void)didRunAction:(id)arg1 withCompletion:(id /* block */)arg2;
- (bool)donateInteraction;
- (id)environmentValueForKey:(id)arg1;
- (id)environmentValueTable;
- (id)errorByAddingActionIndex:(long long)arg1 toError:(id)arg2;
- (id)executionQueue;
- (id)executionVoucher;
- (id)exfiltrationLogger;
- (id)flowTracker;
- (void)handleControlFlowActionCompletion:(id)arg1 actionGroupSkipped:(bool)arg2;
- (void)handleError:(id)arg1 fromAction:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)init;
- (id)input;
- (void)invalidateAssertionIfNeeded;
- (bool)isAutomationSuggestion;
- (bool)isRunning;
- (bool)isStepping;
- (bool)isTesting;
- (id)listenerEndpoints;
- (void)logFinishActionEventWithAction:(id)arg1 completed:(bool)arg2 error:(id)arg3;
- (void)logFinishRunEvent:(bool)arg1;
- (void)logStartActionEventWithAction:(id)arg1;
- (void)logStartEvent;
- (void)noInputBehavior:(id)arg1 wantsToRunAction:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)outOfProcessController;
- (id)output;
- (unsigned long long)outputBehavior;
- (id)parameterInputProviderForAction:(id)arg1;
- (id)pendingActionInput;
- (id)pendingProcessedParameters;
- (id)pendingState;
- (void)prepareToRunAction:(id)arg1 withInput:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)progress;
- (void)publishActionProgress;
- (void)publishRunningState:(long long)arg1;
- (void)queue_reset;
- (void)queue_setWorkflow:(id)arg1;
- (void)queue_stopWithError:(id)arg1;
- (id)remoteDialogPresenterEndpointForRunWorkflowAction:(id)arg1;
- (void)requestAccessToFileAtLocations:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestAccessToFileAtURLs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)reset;
- (void)resetEvaluationCriteriaForControlFlowActions;
- (void)resolveWorkflowInputWithCompletion:(id /* block */)arg1;
- (void)restorePendingStateIfNecessary;
- (bool)resumed;
- (void)retainSelf;
- (void)run;
- (void)runAction:(id)arg1 withInput:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)runSource;
- (id)runViewSource;
- (id)runningContext;
- (void)setAcquiresAssertionWhileRunning:(bool)arg1;
- (void)setActionDidRunRemotely:(bool)arg1;
- (void)setActionOutputsByWorkflowIndex:(id)arg1;
- (void)setAutomationTrialID:(id)arg1;
- (void)setAutomationType:(id)arg1;
- (void)setCapturedFiles:(id)arg1;
- (void)setContent:(id)arg1 forPrivateVariableKey:(id)arg2;
- (bool)setContent:(id)arg1 forVariableWithName:(id)arg2;
- (void)setContentItemCache:(id)arg1;
- (void)setCurrentActionProgress:(id)arg1;
- (void)setCurrentIndex:(unsigned long long)arg1;
- (void)setCurrentState:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDonateInteraction:(bool)arg1;
- (void)setEnvironmentValue:(id)arg1 forKey:(id)arg2;
- (void)setEnvironmentValueTable:(id)arg1;
- (void)setExecutionVoucher:(id)arg1;
- (void)setExfiltrationLogger:(id)arg1;
- (void)setFinishedRunningWithSuccess:(bool)arg1;
- (void)setFlowTracker:(id)arg1;
- (void)setInput:(id)arg1;
- (void)setIsAutomationSuggestion:(bool)arg1;
- (void)setListenerEndpoints:(id)arg1;
- (void)setOutOfProcessController:(id)arg1;
- (void)setOutput:(id)arg1;
- (void)setOutputBehavior:(unsigned long long)arg1;
- (void)setPendingActionInput:(id)arg1;
- (void)setPendingProcessedParameters:(id)arg1;
- (void)setPendingState:(id)arg1;
- (void)setProgress:(id)arg1;
- (void)setResumed:(bool)arg1;
- (void)setRunSource:(id)arg1;
- (void)setRunViewSource:(id)arg1;
- (void)setRunning:(bool)arg1;
- (void)setRunningContext:(id)arg1;
- (void)setShouldDisablePrivacyPrompts:(bool)arg1;
- (void)setStartDate:(id)arg1;
- (void)setStepping:(bool)arg1;
- (void)setUpProgress;
- (void)setUpRunState;
- (void)setVariableTable:(id)arg1;
- (void)setWorkflow:(id)arg1;
- (void)setWorkflowRunAssertion:(id)arg1;
- (bool)shouldDisablePrivacyPrompts;
- (id)startDate;
- (id)stateWithActionIndex:(unsigned long long)arg1 input:(id)arg2 processedParameters:(id)arg3;
- (void)stop;
- (void)stopWithError:(id)arg1;
- (void)trackRunActionEventWithKey:(id)arg1 action:(id)arg2 completed:(bool)arg3 error:(id)arg4;
- (void)trackRunShortcutEventWithKey:(id)arg1 completed:(bool)arg2;
- (id)userInterface;
- (id)variableTable;
- (id)workflow;
- (void)workflowControllerWillRun:(id)arg1;
- (id)workflowInput;
- (id)workflowRunAssertion;
- (id)workflowStartDate;

@end
