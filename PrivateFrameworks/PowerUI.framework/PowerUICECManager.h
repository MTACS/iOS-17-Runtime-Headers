
@interface PowerUICECManager : NSObject <PowerUINotificationManagerClient, PowerUISignalMonitor> {
    PowerUIAnalyticsManager * _analyticsManager;
    PowerUIBDCDataManager * _bdcDataManager;
    NSDate * _cecTemporarilyDisabledDate;
    PowerUIChargingController * _chargingController;
    <_CDLocalContext> * _context;
    unsigned long long  _currentPhase;
    unsigned long long  _currentState;
    NSString * _debugStatus;
    NSUserDefaults * _defaults;
    bool  _displayedFirstTimeNotification;
    bool  _firstChargingEvaluation;
    bool  _isCECEnabled;
    bool  _isCECTemporarilyDisabled;
    bool  _isChargingPaused;
    bool  _isInternal;
    <_DKKnowledgeQuerying> * _knowledgeStore;
    NSObject<OS_os_log> * _log;
    NSDate * _pauseChargingCheckDate;
    NSNumber * _pausedMaxBatteryLevel;
    NSDictionary * _phaseDescriptions;
    long long  _pluggedInBatteryLevel;
    NSDate * _pluggedInDate;
    PowerUICECPredictedTimeManager * _pluggedInTimeManager;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _shouldSupportCEC;
    bool  _tOverrideActiveCheck;
    double  _tPluggedInWaitInterval;
    NSObject<OS_dispatch_source> * _timer;
    NSDate * _userDeadline;
}

@property (nonatomic, retain) PowerUIAnalyticsManager *analyticsManager;
@property (nonatomic, retain) PowerUIBDCDataManager *bdcDataManager;
@property (nonatomic, retain) NSDate *cecTemporarilyDisabledDate;
@property (nonatomic, retain) PowerUIChargingController *chargingController;
@property (nonatomic, retain) <_CDLocalContext> *context;
@property (nonatomic) unsigned long long currentPhase;
@property (nonatomic) unsigned long long currentState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugStatus;
@property (nonatomic, retain) NSUserDefaults *defaults;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool displayedFirstTimeNotification;
@property (nonatomic) bool firstChargingEvaluation;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isCECEnabled;
@property (nonatomic) bool isCECTemporarilyDisabled;
@property (nonatomic) bool isChargingPaused;
@property (nonatomic) bool isInternal;
@property (nonatomic, retain) <_DKKnowledgeQuerying> *knowledgeStore;
@property (nonatomic, retain) NSObject<OS_os_log> *log;
@property (nonatomic, retain) NSDate *pauseChargingCheckDate;
@property (nonatomic, retain) NSNumber *pausedMaxBatteryLevel;
@property (nonatomic, retain) NSDictionary *phaseDescriptions;
@property (nonatomic) long long pluggedInBatteryLevel;
@property (nonatomic, retain) NSDate *pluggedInDate;
@property (nonatomic, retain) PowerUICECPredictedTimeManager *pluggedInTimeManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) bool shouldSupportCEC;
@property (readonly) Class superclass;
@property (nonatomic) bool tOverrideActiveCheck;
@property (nonatomic) double tPluggedInWaitInterval;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *timer;
@property (nonatomic, retain) NSDate *userDeadline;

+ (id)fetchEstimatedCountryCode;
+ (bool)isCECSupported;
+ (id)manager;
+ (id)monitorWithDelegate:(id)arg1;

- (void).cxx_destruct;
- (void)analyticsCECEngagementEvaluation:(bool)arg1 byPredictedTime:(bool)arg2 byGridMix:(bool)arg3;
- (void)analyticsCECSessionChargingState:(bool)arg1;
- (id)analyticsManager;
- (id)bdcDataManager;
- (unsigned long long)cecState;
- (id)cecTemporarilyDisabledDate;
- (id)chargingController;
- (void)clearAnalyticsDate;
- (id)context;
- (unsigned long long)currentPhase;
- (unsigned long long)currentState;
- (id)dateFormatter;
- (id)debugStatus;
- (id)defaultDateToDisableUntilGivenDate:(id)arg1;
- (id)defaults;
- (bool)didDischargeWithBatteryLevel:(long long)arg1;
- (bool)displayedFirstTimeNotification;
- (bool)evaluateEngagementAndSetup;
- (void)evaluatePausingNow;
- (bool)firstChargingEvaluation;
- (void)handleCallback:(id)arg1;
- (void)handleChargeUp;
- (void)handleDisengagement;
- (void)handleNewDebugState:(id)arg1;
- (void)handleNotificationResponse:(id)arg1;
- (void)handlePowerUICECStateChange:(unsigned long long)arg1 withHandler:(id /* block */)arg2;
- (bool)hasInfluencedCharging;
- (id)init;
- (bool)isActiveRegion;
- (bool)isCECEnabled;
- (bool)isCECTemporarilyDisabled;
- (bool)isChargingPaused;
- (bool)isEnabled;
- (bool)isEngaged;
- (bool)isInternal;
- (bool)isPluggedIntoEligiblePowerSource;
- (id)knowledgeStore;
- (void)loadState;
- (id)log;
- (void)monitorBatteryNotifications;
- (id)pauseChargingCheckDate;
- (id)pausedMaxBatteryLevel;
- (id)phaseDescriptions;
- (long long)pluggedInBatteryLevel;
- (id)pluggedInDate;
- (id)pluggedInTimeManager;
- (void)promptBDCToQueryCurrentState;
- (id)queue;
- (void)recordAnalytics;
- (void)recordPowerLogCECState:(unsigned long long)arg1;
- (void)recordPowerLogEvent;
- (void)refreshShouldSupportCEC;
- (void)registerTimer;
- (id)requiredFullChargeDate;
- (void)resetState;
- (id)sessionEndCECAnalytics;
- (void)setAnalyticsManager:(id)arg1;
- (void)setBdcDataManager:(id)arg1;
- (void)setCecTemporarilyDisabledDate:(id)arg1;
- (void)setChargingController:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setCurrentPhase:(unsigned long long)arg1;
- (void)setCurrentState:(unsigned long long)arg1;
- (void)setDefaults:(id)arg1;
- (void)setDisplayedFirstTimeNotification:(bool)arg1;
- (void)setFirstChargingEvaluation:(bool)arg1;
- (void)setIsCECEnabled:(bool)arg1;
- (void)setIsCECTemporarilyDisabled:(bool)arg1;
- (void)setIsChargingPaused:(bool)arg1;
- (void)setIsInternal:(bool)arg1;
- (void)setKnowledgeStore:(id)arg1;
- (void)setLog:(id)arg1;
- (void)setPauseChargingCheckDate:(id)arg1;
- (void)setPausedMaxBatteryLevel:(id)arg1;
- (void)setPhaseDescriptions:(id)arg1;
- (void)setPluggedInBatteryLevel:(long long)arg1;
- (void)setPluggedInDate:(id)arg1;
- (void)setPluggedInTimeManager:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setShouldSupportCEC:(bool)arg1;
- (void)setTOverrideActiveCheck:(bool)arg1;
- (void)setTPluggedInWaitInterval:(double)arg1;
- (void)setTemporarilyDisabled:(bool)arg1 from:(id)arg2;
- (void)setTimer:(id)arg1;
- (void)setUserDeadline:(id)arg1;
- (void)setupTempDisabledCheckAfterInterval:(double)arg1;
- (bool)shouldEngageCEC;
- (bool)shouldSupportCEC;
- (unsigned long long)signalID;
- (void)startMonitoring;
- (id)status;
- (void)stopMonitoring;
- (bool)tOverrideActiveCheck;
- (double)tPluggedInWaitInterval;
- (id)timer;
- (void)unregisterTimer;
- (void)updatePhaseFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (id)userDeadline;

@end
