
@interface WFDetailsContext : NSObject <WFContextPresenting, WFDetailsProviderContext> {
    id /* block */  _WiFiModeChangedHandler;
    bool  _WiFiOutranked;
    bool  _WiFiOutrankedDev;
    id /* block */  _actionHandler;
    unsigned long long  _autoJoinConfigurable;
    bool  _autoJoinEnabled;
    id /* block */  _autoJoinHandler;
    bool  _autoLoginEnabled;
    id /* block */  _autoLoginHandler;
    bool  _connectedWithHardwareAddress;
    id /* block */  _credentialsTappedHandler;
    bool  _credentialsVisible;
    bool  _current;
    bool  _demoModeEnabled;
    bool  _diagnosable;
    WFDiagnosticsContext * _diagnosticsContext;
    long long  _entryContext;
    struct ct_green_tea_logger_s { } * _greenTeaLogger;
    NSString * _hardwareMACAddress;
    WFInterface * _interface;
    WFIPMonitor * _ipMonitor;
    bool  _isInSaveDataMode;
    bool  _isPrivacyProxyEnabled;
    bool  _joinable;
    bool  _knownNetwork;
    id /* block */  _lowDataModeHandler;
    WFNetworkScanRecord * _network;
    NetworkQualityAssessment * _networkQualityAssessment;
    id /* block */  _networkQualityHandler;
    NSString * _password;
    WFPortalContext * _portalContext;
    bool  _privacyProxyConfigurable;
    id /* block */  _privacyProxyHandler;
    long long  _privacyProxyTierStatus;
    id /* block */  _privateMACHandler;
    CWFNetworkProfile * _profile;
    UIViewController<WFNetworkView> * _provider;
    NSString * _randomMACAddress;
    bool  _randomMACAddressConfigurable;
    bool  _randomMACAddressDisabled;
    bool  _randomMACFeatureEnabled;
    bool  _randomMACSwitchOn;
    NSArray * _recommendations;
    long long  _requestedFields;
    NSString * _staticPrivateMACFooterText;
    bool  _supportsAirportManagement;
    NSString * _turnOFFPrivateMACFooterText;
    NSString * _turnONPrivateMACFooterText;
    NSString * _username;
    long long  _wifiMode;
    bool  _wifiModeConfigurable;
}

@property (nonatomic, copy) id /* block */ WiFiModeChangedHandler;
@property (getter=isWiFiOutranked, nonatomic) bool WiFiOutranked;
@property (getter=isWiFiOutrankedDev, nonatomic) bool WiFiOutrankedDev;
@property (nonatomic, copy) id /* block */ actionHandler;
@property (nonatomic) unsigned long long autoJoinConfigurable;
@property (nonatomic) bool autoJoinEnabled;
@property (nonatomic, copy) id /* block */ autoJoinHandler;
@property (nonatomic) bool autoLoginEnabled;
@property (nonatomic, copy) id /* block */ autoLoginHandler;
@property (getter=isConnectedWithHardwareAddress, nonatomic) bool connectedWithHardwareAddress;
@property (nonatomic, copy) id /* block */ credentialsTappedHandler;
@property (getter=isCredentialsVisible, nonatomic) bool credentialsVisible;
@property (getter=isCurrent, nonatomic) bool current;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool demoModeEnabled;
@property (readonly, copy) NSString *description;
@property bool diagnosable;
@property (nonatomic, retain) WFDiagnosticsContext *diagnosticsContext;
@property (nonatomic) long long entryContext;
@property (nonatomic) struct ct_green_tea_logger_s { }*greenTeaLogger;
@property (nonatomic, copy) NSString *hardwareMACAddress;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) WFInterface *interface;
@property (nonatomic, retain) WFIPMonitor *ipMonitor;
@property (nonatomic) bool isInSaveDataMode;
@property (nonatomic) bool isPrivacyProxyEnabled;
@property (getter=isJoinable, nonatomic) bool joinable;
@property (getter=isKnownNetwork, nonatomic) bool knownNetwork;
@property (nonatomic, copy) id /* block */ lowDataModeHandler;
@property (nonatomic, readonly) bool needsDismissal;
@property (nonatomic, retain) WFNetworkScanRecord *network;
@property (nonatomic, retain) NetworkQualityAssessment *networkQualityAssessment;
@property (nonatomic, copy) id /* block */ networkQualityHandler;
@property (nonatomic, copy) NSString *password;
@property (nonatomic, copy) WFPortalContext *portalContext;
@property (nonatomic, readonly, copy) NSString *portalURL;
@property (getter=isPrivacyProxyConfigurable, nonatomic) bool privacyProxyConfigurable;
@property (nonatomic, copy) id /* block */ privacyProxyHandler;
@property (nonatomic) long long privacyProxyTierStatus;
@property (nonatomic, copy) id /* block */ privateMACHandler;
@property (nonatomic, retain) CWFNetworkProfile *profile;
@property (nonatomic) UIViewController<WFNetworkView> *provider;
@property (nonatomic, readonly, copy) NSString *randomMACAddress;
@property (getter=isRandomMACAddressConfigurable, nonatomic, readonly) bool randomMACAddressConfigurable;
@property (getter=isRandomMACAddressDisabled, nonatomic) bool randomMACAddressDisabled;
@property (getter=isRandomMACFeatureEnabled, nonatomic, readonly) bool randomMACFeatureEnabled;
@property (getter=isRandomMACSwitchOn, nonatomic) bool randomMACSwitchOn;
@property (nonatomic, retain) NSArray *recommendations;
@property (nonatomic) long long requestedFields;
@property (nonatomic, copy) NSString *staticPrivateMACFooterText;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsAirportManagement;
@property (nonatomic, copy) NSString *turnOFFPrivateMACFooterText;
@property (nonatomic, copy) NSString *turnONPrivateMACFooterText;
@property (nonatomic, copy) NSString *username;
@property (nonatomic) long long wifiMode;
@property (getter=isWifiModeConfigurable, nonatomic) bool wifiModeConfigurable;

- (void).cxx_destruct;
- (id /* block */)WiFiModeChangedHandler;
- (id /* block */)actionHandler;
- (unsigned long long)autoJoinConfigurable;
- (bool)autoJoinEnabled;
- (id /* block */)autoJoinHandler;
- (bool)autoLoginEnabled;
- (id /* block */)autoLoginHandler;
- (void)cancel;
- (void)cancelNetworkQualityRun;
- (id /* block */)credentialsTappedHandler;
- (void)dealloc;
- (bool)demoModeEnabled;
- (id)description;
- (bool)diagnosable;
- (id)diagnosticsContext;
- (void)disableRandomMAC;
- (void)enableRandomMAC;
- (long long)entryContext;
- (void)forget;
- (struct ct_green_tea_logger_s { }*)greenTeaLogger;
- (id)hardwareMACAddress;
- (id)initWithNetwork:(id)arg1 profile:(id)arg2 ipMonitor:(id)arg3 interface:(id)arg4 privateMACConfig:(id)arg5 wifiModeConfig:(id)arg6;
- (id)interface;
- (id)ipMonitor;
- (bool)isConnectedWithHardwareAddress;
- (bool)isCredentialsVisible;
- (bool)isCurrent;
- (bool)isInSaveDataMode;
- (bool)isJoinable;
- (bool)isKnownNetwork;
- (bool)isPrivacyProxyConfigurable;
- (bool)isPrivacyProxyEnabled;
- (bool)isRandomMACAddressConfigurable;
- (bool)isRandomMACAddressDisabled;
- (bool)isRandomMACFeatureEnabled;
- (bool)isRandomMACSwitchOn;
- (bool)isWiFiOutranked;
- (bool)isWiFiOutrankedDev;
- (bool)isWifiModeConfigurable;
- (void)join;
- (id /* block */)lowDataModeHandler;
- (void)manage;
- (bool)needsDismissal;
- (id)network;
- (unsigned long long)networkOrigin;
- (id)networkQualityAssessment;
- (id /* block */)networkQualityHandler;
- (void)openPortalURL;
- (void)openRecommendationLink;
- (void)overrideWiFiOutrank;
- (id)password;
- (id)portalContext;
- (id)portalURL;
- (id /* block */)privacyProxyHandler;
- (long long)privacyProxyTierStatus;
- (id /* block */)privateMACHandler;
- (id)profile;
- (id)provider;
- (id)randomMACAddress;
- (id)recommendations;
- (void)renewLease;
- (long long)requestedFields;
- (void)runNetworkQualityWithCompletionHandler:(id /* block */)arg1;
- (void)setActionHandler:(id /* block */)arg1;
- (void)setAutoJoinConfigurable:(unsigned long long)arg1;
- (void)setAutoJoinEnabled:(bool)arg1;
- (void)setAutoJoinHandler:(id /* block */)arg1;
- (void)setAutoLoginEnabled:(bool)arg1;
- (void)setAutoLoginHandler:(id /* block */)arg1;
- (void)setConnectedWithHardwareAddress:(bool)arg1;
- (void)setCredentialsTappedHandler:(id /* block */)arg1;
- (void)setCredentialsVisible:(bool)arg1;
- (void)setCurrent:(bool)arg1;
- (void)setDemoModeEnabled:(bool)arg1;
- (void)setDiagnosable:(bool)arg1;
- (void)setDiagnosticsContext:(id)arg1;
- (void)setEntryContext:(long long)arg1;
- (void)setGreenTeaLogger:(struct ct_green_tea_logger_s { }*)arg1;
- (void)setHardwareMACAddress:(id)arg1;
- (void)setInterface:(id)arg1;
- (void)setIpMonitor:(id)arg1;
- (void)setIsInSaveDataMode:(bool)arg1;
- (void)setIsPrivacyProxyEnabled:(bool)arg1;
- (void)setJoinable:(bool)arg1;
- (void)setKnownNetwork:(bool)arg1;
- (void)setLowDataModeHandler:(id /* block */)arg1;
- (void)setNetwork:(id)arg1;
- (void)setNetworkQualityAssessment:(id)arg1;
- (void)setNetworkQualityHandler:(id /* block */)arg1;
- (void)setPassword:(id)arg1;
- (void)setPortalContext:(id)arg1;
- (void)setPrivacyProxyConfigurable:(bool)arg1;
- (void)setPrivacyProxyHandler:(id /* block */)arg1;
- (void)setPrivacyProxyTierStatus:(long long)arg1;
- (void)setPrivateMACHandler:(id /* block */)arg1;
- (void)setProfile:(id)arg1;
- (void)setProvider:(id)arg1;
- (void)setRandomMACAddressDisabled:(bool)arg1;
- (void)setRandomMACSwitchOn:(bool)arg1;
- (void)setRecommendations:(id)arg1;
- (void)setRequestedFields:(long long)arg1;
- (void)setStaticPrivateMACFooterText:(id)arg1;
- (void)setSupportsAirportManagement:(bool)arg1;
- (void)setTurnOFFPrivateMACFooterText:(id)arg1;
- (void)setTurnONPrivateMACFooterText:(id)arg1;
- (void)setUsername:(id)arg1;
- (void)setWiFiModeChangedHandler:(id /* block */)arg1;
- (void)setWiFiOutranked:(bool)arg1;
- (void)setWiFiOutranked:(bool)arg1 privateCellular:(bool)arg2;
- (void)setWiFiOutrankedDev:(bool)arg1;
- (void)setWifiMode:(long long)arg1;
- (void)setWifiModeConfig:(id)arg1;
- (void)setWifiModeConfigurable:(bool)arg1;
- (bool)shouldHideCredentials;
- (id)staticPrivateMACFooterText;
- (bool)supportsAirportManagement;
- (id)turnOFFPrivateMACFooterText;
- (id)turnONPrivateMACFooterText;
- (id)username;
- (long long)wifiMode;

@end
