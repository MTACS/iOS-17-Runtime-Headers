
@interface CRCameraReader : UIViewController <AVCaptureMetadataOutputObjectsDelegate, AVCaptureVideoDataOutputSampleBufferDelegate, CALayerDelegate> {
    UIActivityIndicatorView * _activityIndicator;
    CRAlignmentLayer * _alignmentLayer;
    float  _borderPaddingIDCard;
    CRBoxLayer * _boxLayer;
    CRPollingTimer * _boxLayerHideTimer;
    <CRCameraReaderDelegate> * _callbackDelegate;
    NSString * _cameraMode;
    long long  _cameraPosition;
    NSPointerArray * _captureBuffer;
    unsigned long long  _captureCount;
    bool  _captureMode;
    UIColor * _capturedTextColor;
    NSMutableArray * _cardBlurValues;
    NSMutableDictionary * _cardNumberCounts;
    NSMutableDictionary * _cardholderCounts;
    bool  _codeInverted;
    NSDate * _codePresented;
    double  _configDemoSpeed;
    bool  _configPresentCentered;
    bool  _configUseFastScanning;
    bool  _configUseJPEGForColor;
    NSDictionary * _contactsCache;
    bool  _continousMode;
    struct __CVBuffer { } * _correctedCardBuffer;
    NSMutableArray * _dateCutRects;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    DiagnosticHUDLayer * _diagnosticHUDLayer;
    bool  _didSendEndOrCancel;
    bool  _didSendFindBox;
    CRMLCCModel * _embossedCardholderModel;
    CRMLCCModel * _embossedExpirationModel;
    CRMLCCModel * _embossedNumberModel;
    bool  _enableAltIDCardScan;
    NSMutableDictionary * _expirationDateCounts;
    long long  _exposureMode;
    CRMLCCModel * _flatPrintedModel;
    long long  _focusMode;
    NSString * _foundCode;
    NSArray * _foundPoints;
    bool  _hidePlacementText;
    unsigned long long  _imagesToCapture;
    bool  _isQRCode;
    struct opaqueCMSampleBuffer { } * _lastBuffer;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastFieldFoundTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastSendFindBox;
    UIColor * _maskColor;
    UIColor * _maskOutlineColor;
    NSMutableArray * _nameCutRects;
    CRImageReader * _ocrImageReader;
    float  _ocrOverlayBackgroundOpacity;
    NSString * _ocrOverlayFontName;
    NSMutableDictionary * _optionsDictionary;
    NSArray * _outputObjectTypes;
    CATextLayer * _overlayTextLayer;
    NSMutableDictionary * _pinnedFoundInfo;
    UIColor * _placementTextColor;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _pointsFound;
    NSString * _previousCode;
    NSCache * _previousContactMatches;
    bool  _previousIdleState;
    NSObject<OS_dispatch_semaphore> * _processingImage;
    NSObject<OS_dispatch_queue> * _processingQueue;
    bool  _sessionIsStopping;
    <CRCaptureSessionManager> * _sessionManager;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _sessionStarted;
    double  _sessionTimeout;
    bool  _showDiagnosticHUD;
    UITapGestureRecognizer * _tapGestureRecognizer;
    NSMutableArray * _textDetectorRTFeedback;
    long long  _torchMode;
    long long  _whiteBalanceMode;
}

@property (retain) UIActivityIndicatorView *activityIndicator;
@property (retain) CRAlignmentLayer *alignmentLayer;
@property float borderPaddingIDCard;
@property (retain) CRBoxLayer *boxLayer;
@property (retain) CRPollingTimer *boxLayerHideTimer;
@property <CRCameraReaderDelegate> *callbackDelegate;
@property (copy) NSString *cameraMode;
@property long long cameraPosition;
@property (retain) NSPointerArray *captureBuffer;
@property unsigned long long captureCount;
@property (getter=isCaptureMode) bool captureMode;
@property (nonatomic, copy) UIColor *capturedTextColor;
@property (retain) NSMutableArray *cardBlurValues;
@property (retain) NSMutableDictionary *cardNumberCounts;
@property (retain) NSMutableDictionary *cardholderCounts;
@property bool codeInverted;
@property (retain) NSDate *codePresented;
@property double configDemoSpeed;
@property bool configPresentCentered;
@property bool configUseFastScanning;
@property bool configUseJPEGForColor;
@property (retain) NSDictionary *contactsCache;
@property bool continousMode;
@property struct __CVBuffer { }*correctedCardBuffer;
@property (readonly) long long currentCameraIdentifier;
@property (retain) NSMutableArray *dateCutRects;
@property (readonly, copy) NSString *debugDescription;
@property (retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (retain) DiagnosticHUDLayer *diagnosticHUDLayer;
@property bool didSendEndOrCancel;
@property bool didSendFindBox;
@property (retain) CRMLCCModel *embossedCardholderModel;
@property (retain) CRMLCCModel *embossedExpirationModel;
@property (retain) CRMLCCModel *embossedNumberModel;
@property bool enableAltIDCardScan;
@property (retain) NSMutableDictionary *expirationDateCounts;
@property long long exposureMode;
@property (retain) CRMLCCModel *flatPrintedModel;
@property long long focusMode;
@property (retain) NSString *foundCode;
@property (retain) NSArray *foundPoints;
@property (readonly) unsigned long long hash;
@property bool hidePlacementText;
@property unsigned long long imagesToCapture;
@property bool isQRCode;
@property struct opaqueCMSampleBuffer { }*lastBuffer;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } lastFieldFoundTime;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } lastSendFindBox;
@property (nonatomic, copy) UIColor *maskColor;
@property (nonatomic, copy) UIColor *maskOutlineColor;
@property (retain) NSMutableArray *nameCutRects;
@property (nonatomic, retain) CRImageReader *ocrImageReader;
@property float ocrOverlayBackgroundOpacity;
@property (retain) NSString *ocrOverlayFontName;
@property (nonatomic, retain) NSMutableDictionary *optionsDictionary;
@property (copy) NSArray *outputObjectTypes;
@property (nonatomic, retain) CATextLayer *overlayTextLayer;
@property (retain) NSMutableDictionary *pinnedFoundInfo;
@property (nonatomic, copy) UIColor *placementTextColor;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } pointsFound;
@property (retain) NSString *previousCode;
@property (retain) NSCache *previousContactMatches;
@property bool previousIdleState;
@property (retain) NSObject<OS_dispatch_semaphore> *processingImage;
@property (retain) NSObject<OS_dispatch_queue> *processingQueue;
@property bool sessionIsStopping;
@property (retain) <CRCaptureSessionManager> *sessionManager;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } sessionStarted;
@property double sessionTimeout;
@property bool showDiagnosticHUD;
@property (readonly) Class superclass;
@property (retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic, retain) NSMutableArray *textDetectorRTFeedback;
@property long long torchMode;
@property long long whiteBalanceMode;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })aspectRatioPaddedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 expectedWidth:(double)arg2 height:(double)arg3 orientation:(unsigned int)arg4;
+ (id)extractCardImage:(id)arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2 withCardBuffer:(struct __CVBuffer { }*)arg3 cameraIntrinsicData:(id)arg4;
+ (id)extractCardImage:(id)arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2 withCardBuffer:(struct __CVBuffer { }*)arg3 withPoints:(id)arg4 cameraIntrinsicData:(id)arg5;
+ (id)extractCardImage:(id)arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2 withCardBuffer:(struct __CVBuffer { }*)arg3 withPoints:(id)arg4 cameraIntrinsicData:(id)arg5 padding:(float)arg6 inputOrientation:(int)arg7;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 maxStage:(unsigned long long)arg2;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 maxStage:(unsigned long long)arg2 outputObjectTypes:(id)arg3;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 maxStage:(unsigned long long)arg2 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (id)findCodeInImage:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 maxStage:(unsigned long long)arg2 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 outputObjectTypes:(id)arg4;
+ (void)loadFonts;
+ (unsigned long long)supportedCameraCount;
+ (unsigned long long)supportedCameraCountForTypes:(id)arg1;
+ (id)targetRectsForImage:(id)arg1;
+ (id)textFeatureWithVNTextObservation:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })uniformPadRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 widthPadding:(float)arg2 heightPadding:(float)arg3 width:(double)arg4 height:(double)arg5;

- (void).cxx_destruct;
- (id)activityIndicator;
- (void)aetPlacementTextColor:(id)arg1;
- (id)alignmentLayer;
- (void)animatePresentCodeAtFrameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)attributedStringWithFrame:(struct CGSize { double x1; double x2; })arg1 withFont:(id)arg2 withString:(id)arg3 color:(struct CGColor { }*)arg4;
- (float)borderPaddingIDCard;
- (id)boxLayer;
- (id)boxLayerHideTimer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boxLayerPresentationFrame;
- (id)callbackDelegate;
- (id)cameraIntrinsicDataForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3;
- (id)cameraMode;
- (long long)cameraPosition;
- (void)cancel;
- (id)captureBuffer;
- (unsigned long long)captureCount;
- (void)captureImage;
- (void)captureImageFromSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)captureOutput:(id)arg1 didOutputMetadataObjects:(id)arg2 fromConnection:(id)arg3;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (id)capturedTextColor;
- (id)cardBlurValues;
- (id)cardNumberCounts;
- (id)cardholderCounts;
- (bool)codeInverted;
- (id)codePresented;
- (double)configDemoSpeed;
- (bool)configPresentCentered;
- (bool)configUseFastScanning;
- (bool)configUseJPEGForColor;
- (id)contactsCache;
- (bool)continousMode;
- (struct __CVBuffer { }*)correctedCardBuffer;
- (void)createCorrectedCardBuffer;
- (struct __CVBuffer { }*)createFastAccessPixelBufferWithSize:(struct CGSize { double x1; double x2; })arg1 videoFormat:(int)arg2;
- (id)createTextLayerForRecognizedObject:(id)arg1;
- (long long)currentCameraIdentifier;
- (id)currentDeviceID;
- (id)dateCutRects;
- (void)dealloc;
- (id)delegateQueue;
- (id)diagnosticHUDLayer;
- (void)didReceiveMemoryWarning;
- (bool)didSendEndOrCancel;
- (bool)didSendFindBox;
- (id)embossedCardholderModel;
- (id)embossedExpirationModel;
- (id)embossedNumberModel;
- (bool)enableAltIDCardScan;
- (id)expirationDateCounts;
- (long long)exposureMode;
- (id)extractFinalDigitStringFromNumbers:(id)arg1;
- (id)findCCExpDateInImageEmbossed:(id)arg1;
- (id)findCCNameInImageEmbossed:(id)arg1;
- (id)findCCNumberInImageEmbossed:(id)arg1;
- (id)findCCNumberInImageEmbossed:(id)arg1 withFinalDigit:(id)arg2;
- (id)findCCObjectEmbossed:(id)arg1 inImage:(id)arg2 forRect:(id)arg3;
- (id)findCCObjectsEmbossed:(id)arg1 inImage:(id)arg2 numberRects:(id)arg3 nameRects:(id)arg4 dateRects:(id)arg5;
- (id)findCCResultsInImageFlat:(id)arg1 usingTextFeatures:(id)arg2 invert:(bool)arg3;
- (void)findCodeInSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)findIDObjects:(id)arg1 inPixelBuffer:(struct __CVBuffer { }*)arg2 cameraIntrinsicData:(id)arg3 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (void)findOCRTextObjects:(id)arg1 inPixelBuffer:(struct __CVBuffer { }*)arg2 attachments:(id)arg3 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (id)findObjects:(id)arg1 inImage:(id)arg2 properties:(id)arg3;
- (void)findObjects:(id)arg1 inPixelBuffer:(struct __CVBuffer { }*)arg2 cameraIntrinsicData:(id)arg3 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (id)findObjectsEmbossed:(id)arg1 inImage:(id)arg2;
- (id)findObjectsFlat:(id)arg1 inImage:(id)arg2 numberRects:(id)arg3 invert:(bool)arg4;
- (void)flashScreenAndPlayCaptureSound;
- (id)flatPrintedModel;
- (long long)focusMode;
- (id)foundCode;
- (id)foundPoints;
- (id)generateStringFromDate:(id)arg1;
- (id)getCorrectedIDImageFromAuxiliaryPoints:(id)arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2 orientation:(unsigned int)arg3;
- (unsigned long long)getFirstTimeFrameIndexForPinnedField:(id)arg1;
- (void)handleTapFrom:(id)arg1;
- (void)hideBoxLayer;
- (bool)hidePlacementText;
- (unsigned long long)imagesToCapture;
- (id)init;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2 options:(id)arg3;
- (id)initWithOptions:(id)arg1;
- (bool)isCaptureMode;
- (bool)isQRCode;
- (struct opaqueCMSampleBuffer { }*)lastBuffer;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })lastFieldFoundTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })lastSendFindBox;
- (void)loadModels;
- (void)loadView;
- (id)maskColor;
- (id)maskOutlineColor;
- (void)mergeInfo:(id)arg1 intoFindInfo:(id)arg2;
- (id)nameCutRects;
- (id)ocrImageReader;
- (float)ocrOverlayBackgroundOpacity;
- (id)ocrOverlayFontName;
- (id)optionsDictionary;
- (void)orientationDidChange:(id)arg1;
- (id)outputObjectTypes;
- (id)overlayTextLayer;
- (void)pauseBoxLayerHideTimer;
- (id)pinnedFoundInfo;
- (id)placementTextColor;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })pointsFound;
- (id)previousCode;
- (id)previousContactMatches;
- (bool)previousIdleState;
- (void)primeBoxLayerHideTimerWithFrameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)processingImage;
- (id)processingQueue;
- (void)releaseCorrectedCardBuffer;
- (void)removeLayerTree;
- (void)reportAcceptedString:(id)arg1 forOutput:(id)arg2 withClientID:(id)arg3;
- (void)sendDidCancel;
- (void)sendDidDisplayMessageStyle:(long long)arg1;
- (void)sendDidEndAnimation;
- (void)sendDidEndWithError:(id)arg1;
- (void)sendDidEndWithErrorDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3;
- (void)sendDidEndWithInfo:(id)arg1;
- (void)sendDidFindTarget:(id)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)sendDidRecognizeNewObjects:(id)arg1;
- (void)sendProvideOverlayObjects:(id)arg1;
- (bool)sessionIsStopping;
- (id)sessionManager;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })sessionStarted;
- (double)sessionTimeout;
- (void)setActivityIndicator:(id)arg1;
- (void)setAlignmentLayer:(id)arg1;
- (void)setBorderPaddingIDCard:(float)arg1;
- (void)setBoxLayer:(id)arg1;
- (void)setBoxLayerHideTimer:(id)arg1;
- (void)setCallbackDelegate:(id)arg1;
- (void)setCameraMode:(id)arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setCaptureBuffer:(id)arg1;
- (void)setCaptureCount:(unsigned long long)arg1;
- (void)setCaptureMode:(bool)arg1;
- (void)setCapturedTextColor:(id)arg1;
- (void)setCardBlurValues:(id)arg1;
- (void)setCardNumberCounts:(id)arg1;
- (void)setCardholderCounts:(id)arg1;
- (void)setCodeInverted:(bool)arg1;
- (void)setCodePresented:(id)arg1;
- (void)setConfigDemoSpeed:(double)arg1;
- (void)setConfigPresentCentered:(bool)arg1;
- (void)setConfigUseFastScanning:(bool)arg1;
- (void)setConfigUseJPEGForColor:(bool)arg1;
- (void)setContactsCache:(id)arg1;
- (void)setContinousMode:(bool)arg1;
- (void)setCorrectedCardBuffer:(struct __CVBuffer { }*)arg1;
- (void)setDateCutRects:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDiagnosticHUDLayer:(id)arg1;
- (void)setDidSendEndOrCancel:(bool)arg1;
- (void)setDidSendFindBox:(bool)arg1;
- (void)setEmbossedCardholderModel:(id)arg1;
- (void)setEmbossedExpirationModel:(id)arg1;
- (void)setEmbossedNumberModel:(id)arg1;
- (void)setEnableAltIDCardScan:(bool)arg1;
- (void)setExpirationDateCounts:(id)arg1;
- (void)setExposureMode:(long long)arg1;
- (void)setFirstTimeFrameIndexForPinnedField:(id)arg1;
- (void)setFlatPrintedModel:(id)arg1;
- (void)setFocusMode:(long long)arg1;
- (void)setFoundCode:(id)arg1;
- (void)setFoundPoints:(id)arg1;
- (void)setHidePlacementText:(bool)arg1;
- (void)setImagesToCapture:(unsigned long long)arg1;
- (void)setIsQRCode:(bool)arg1;
- (void)setLastBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)setLastFieldFoundTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setLastSendFindBox:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMaskColor:(id)arg1;
- (void)setMaskOutlineColor:(id)arg1;
- (void)setNameCutRects:(id)arg1;
- (void)setOcrImageReader:(id)arg1;
- (void)setOcrOverlayBackgroundOpacity:(float)arg1;
- (void)setOcrOverlayFontName:(id)arg1;
- (void)setOptionsDictionary:(id)arg1;
- (void)setOutputObjectTypes:(id)arg1;
- (void)setOverlayTextLayer:(id)arg1;
- (void)setPinnedFoundInfo:(id)arg1;
- (void)setPlacementTextColor:(id)arg1;
- (void)setPointsFound:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreviousCode:(id)arg1;
- (void)setPreviousContactMatches:(id)arg1;
- (void)setPreviousIdleState:(bool)arg1;
- (void)setProcessingImage:(id)arg1;
- (void)setProcessingQueue:(id)arg1;
- (void)setSessionIsStopping:(bool)arg1;
- (void)setSessionManager:(id)arg1;
- (void)setSessionStarted:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setSessionTimeout:(double)arg1;
- (void)setShowDiagnosticHUD:(bool)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setTextDetectorRTFeedback:(id)arg1;
- (void)setTorchMode:(long long)arg1;
- (void)setWhiteBalanceMode:(long long)arg1;
- (void)setupInitialLayerConfiguration;
- (bool)showDiagnosticHUD;
- (void)showMessage:(id)arg1 color:(id)arg2 style:(long long)arg3 duration:(double)arg4;
- (void)showTextDetectorObjects:(id)arg1;
- (void)start;
- (void)startSession;
- (void)stopSession;
- (void)switchToCamera:(long long)arg1;
- (void)switchToCameraWithDeviceID:(id)arg1;
- (id)tapGestureRecognizer;
- (id)textDetectorRTFeedback;
- (void)toggleCamera;
- (long long)torchMode;
- (void)updateContactsCache:(id)arg1;
- (void)updatePinnedInfoFrameIndex;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (long long)whiteBalanceMode;

@end
