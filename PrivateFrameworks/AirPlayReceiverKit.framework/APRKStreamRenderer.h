
@interface APRKStreamRenderer : NSObject <APRKMediaPlayerMessagingDelegate> {
    <AirPlayReceiverUIDelegate> * _airPlayReceiverUIDelegate;
    AVSampleBufferAudioRenderer * _audioRenderer;
    unsigned int  _audioSessionCount;
    bool  _autoRotateLayerFollowingClientRotation;
    struct OpaqueFigCFWeakReferenceHolder { } * _backingUIControllerWeakRef;
    bool  _canRecord;
    NSURL * _currentRecordingURL;
    unsigned long long  _currentVideoPlaybackVersion;
    unsigned int  _currentVideoSessionID;
    CALayer * _debugLayer;
    bool  _deferLayerRendering;
    <APRKStreamRendererDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSDictionary * _demoDeviceInfo;
    NSData * _ensembleInfo;
    struct OpaqueFigVideoQueue { } * _figVideoQueue;
    struct opaqueCMFormatDescription { } * _formatDesc;
    bool  _isAudioActive;
    bool  _isMirroringAudioStreamPaused;
    bool  _isMirroringVideoStreamPaused;
    bool  _isP2PWiFiSession;
    bool  _isStopping;
    bool  _isWiredLink;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastPTS;
    struct { 
        int width; 
        int height; 
    }  _lastVideoSampleBufferSize;
    NSString * _managedClientName;
    CALayer * _mirroringLayer;
    bool  _mirroringNeedsKeyFrame;
    APRKMediaPlayer * _player;
    struct CGSize { 
        double width; 
        double height; 
    }  _presentationVideoSize;
    struct OpaqueAPSNetworkClock { } * _receiverNetworkClock;
    APRKStreamRecorder * _recorder;
    NSObject<OS_dispatch_source> * _recorderKeyFrameTimer;
    bool  _recorderNeedsKeyFrame;
    NSObject<OS_dispatch_queue> * _rendererAudioBufferQueue;
    NSObject<OS_dispatch_queue> * _rendererStateUpdateQueue;
    NSObject<OS_dispatch_queue> * _rendererVideoBufferQueue;
    <APRKStreamRendererSampleBufferDelegate> * _sampleBufferDelegate;
    unsigned int  _screenSessionCount;
    struct OpaqueAPSNetworkAddress { } * _sessionReceiverAddr;
    bool  _shouldRecordFrames;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceRect;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _startTime;
    unsigned long long  _streamRendererMode;
    AVSampleBufferRenderSynchronizer * _synchronizer;
    unsigned int  _transform;
    NSUUID * _uniqueID;
    bool  _useCALayerForMirroring;
    unsigned int  _videoSessionCount;
}

@property (nonatomic) bool autoRotateLayerFollowingClientRotation;
@property (nonatomic, readonly) bool canRecord;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <APRKStreamRendererDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isMirroringAudioStreamPaused;
@property (nonatomic) bool isMirroringVideoStreamPaused;
@property (nonatomic) bool isPaused;
@property (nonatomic, readonly) bool isRecording;
@property (nonatomic, readonly, copy) NSString *managedClientName;
@property (nonatomic, readonly) unsigned long long streamRendererMode;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSUUID *uniqueID;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } videoFrameSize;

- (void).cxx_destruct;
- (id)HUDLayer;
- (void)_cleanupInternalPlayer;
- (void)_cleanupPreviousRecordingIfExisting;
- (int)_enqueueSampleBufferForRecording:(struct opaqueCMSampleBuffer { }*)arg1 isAudioSBuf:(bool)arg2;
- (int)_enqueueVideoFrameForRendering:(struct opaqueCMSampleBuffer { }*)arg1;
- (short)_ensureFigVideoQueue;
- (void)_ensureInternalPlayer;
- (bool)_isRotatedTransform:(unsigned long long)arg1;
- (bool)_performStartRecordingWithOutputURL:(id)arg1;
- (bool)_performStopRecording;
- (void)_performUIControllerActionWithBlock:(id /* block */)arg1;
- (bool)_receiverSupportsMirroring;
- (bool)_sampleBufferRepresentsKeyFrame:(struct opaqueCMSampleBuffer { }*)arg1;
- (bool)_shouldFlip:(unsigned int)arg1;
- (void)_updateStreamingMode;
- (unsigned int)audioSessionCount;
- (bool)autoRotateLayerFollowingClientRotation;
- (id)backingMediaPlayer;
- (bool)canRecord;
- (unsigned long long)currentVideoPlaybackVersion;
- (unsigned int)currentVideoSessionID;
- (void)dealloc;
- (id)delegate;
- (id)demoDeviceInfo;
- (id)ensembleInfo;
- (id)initWithUniqueID:(id)arg1 clientName:(id)arg2 UIController:(struct OpaqueAPReceiverUIController { }*)arg3 useCALayerForMirroring:(bool)arg4;
- (bool)isActive;
- (bool)isMirroringAudioStreamPaused;
- (bool)isMirroringVideoStreamPaused;
- (bool)isP2PWiFi;
- (bool)isPaused;
- (bool)isRecording;
- (bool)isWiredLink;
- (void)makeNowPlayingRenderer;
- (id)managedClientName;
- (id)mediaPlayer;
- (void)mediaPlayer:(id)arg1 didGenerateFPSSecureStopRecordPayload:(id)arg2;
- (void)mediaPlayer:(id)arg1 wantsToPostNotification:(id)arg2 withPayload:(id)arg3;
- (void)mediaPlayer:(id)arg1 wantsToSendUpstreamMessageWithDictionary:(id)arg2;
- (void)mediaPlayerNeedsTLSInfo:(id)arg1;
- (id)mirroringLayer;
- (float)mirroringVolume;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)player;
- (void)postVideoV1EventWithType:(const char *)arg1 params:(struct __CFDictionary { }*)arg2;
- (bool)processAudioSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)processHidePasscodePromptRequest;
- (void)processSenderUIEvent:(id)arg1;
- (void)processShowPasscodePromptRequest:(id)arg1;
- (void)processStartAudioSessionRequestWithSessionID:(unsigned int)arg1 isScreenAudio:(bool)arg2;
- (void)processStartScreenPresentationWithSessionID:(unsigned int)arg1;
- (void)processStartVideoPlaybackRequestWithWithSessionID:(unsigned int)arg1 version:(unsigned long long)arg2;
- (void)processStopAudioSessionRequestWithSessionID:(unsigned int)arg1;
- (void)processStopScreenPresentationWithSessionID:(unsigned int)arg1;
- (void)processStopVideoPlaybackRequestWithSessionID:(unsigned int)arg1;
- (bool)processVideoSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id)sampleBufferDelegate;
- (unsigned int)screenSessionCount;
- (void)setAutoRotateLayerFollowingClientRotation:(bool)arg1;
- (void)setCanRecord:(bool)arg1;
- (void)setDeferLayerRendering:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDemoDeviceInfo:(id)arg1;
- (void)setEnsembleInfo:(id)arg1;
- (void)setIsMirroringAudioStreamPaused:(bool)arg1;
- (void)setIsMirroringVideoStreamPaused:(bool)arg1;
- (void)setIsP2PWiFi:(bool)arg1;
- (void)setIsPaused:(bool)arg1;
- (void)setIsWiredLink:(bool)arg1;
- (void)setMirroringVolume:(float)arg1;
- (void)setReceiverNetworkClock:(struct OpaqueAPSNetworkClock { }*)arg1;
- (void)setSampleBufferDelegate:(id)arg1;
- (void)setSessionReceiverAddress:(struct OpaqueAPSNetworkAddress { }*)arg1;
- (void)setVideoV1Delegate:(id)arg1 withDelegateQueue:(id)arg2;
- (bool)startRecordingWithOutputURL:(id)arg1;
- (void)stop;
- (bool)stopRecording;
- (unsigned long long)streamRendererMode;
- (id)uniqueID;
- (void)updateDisplayInfo;
- (struct CGSize { double x1; double x2; })videoFrameSize;
- (id)videoQueuePerformanceDictionary;
- (unsigned int)videoSessionCount;

@end
