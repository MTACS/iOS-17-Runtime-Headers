
@interface APRKStreamRenderingManager : NSObject {
    unsigned long long  _airPlayVideoVersionSupport;
    bool  _altAdvertisingEnabled;
    bool  _assistedModeEnabled;
    AWDLActivator * _awdlActivator;
    unsigned long long  _concurrentPlaybackPolicy;
    struct CGSize { 
        double width; 
        double height; 
    }  _customDisplaySize;
    struct CGSize { 
        double width; 
        double height; 
    }  _customDisplaySizeMax;
    <APRKStreamRenderingManagerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    unsigned long long  _displayHDRMode;
    bool  _enableMixingMediaAudio;
    NSObject<OS_dispatch_queue> * _isolationQueue;
    unsigned long long  _maxNumberOfConcurrentSessions;
    bool  _optimizeAudioRenderingLatency;
    NSString * _passwordString;
    bool  _permissionEnabled;
    long long  _permissionGrantPeriod;
    NSObject<OS_dispatch_source> * _permissionGrantTimer;
    long long  _permissionTimeout;
    NSMutableDictionary * _permittedClients;
    NSObject<OS_dispatch_queue> * _permittedClientsQueue;
    unsigned long long  _preemptionPolicy;
    NSMutableArray * _renderersArray;
    struct AirPlayReceiverServerPrivate { } * _server;
    bool  _shouldForwardLayers;
    bool  _supportRemoteControl;
    unsigned long long  _supportedModesMask;
    bool  _useCALayerForMirroring;
    bool  _usesHomeKitIntegration;
}

@property (nonatomic) unsigned long long concurrentPlaybackPolicy;
@property (nonatomic) <APRKStreamRenderingManagerDelegate> *delegate;
@property (nonatomic) unsigned long long maxNumberOfConcurrentSessions;
@property (nonatomic) unsigned long long preemptionPolicy;
@property (nonatomic) bool supportRemoteControl;
@property (nonatomic, readonly) unsigned long long supportedModesMask;

+ (unsigned long long)getAdvertisingAccessMode;
+ (bool)getAppHasSetAdvertisingAccessModeEntitlement;
+ (bool)listeningForAlternateBonjourBrowsing;
+ (bool)setAdvertisingAccessMode:(unsigned long long)arg1 withError:(id*)arg2;
+ (void)setListeningForAlternateBonjourBrowsing:(bool)arg1;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_addPermittedClient:(id)arg1;
- (unsigned long long)_customDisplayHDRModeFromPrefsWithDefault:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })_customDisplaySizeFromPrefsWithDefault:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_customDisplaySizeMaxFromPrefsWithDefault:(struct CGSize { double x1; double x2; })arg1;
- (struct __CFString { }*)_getHDRModeString:(unsigned long long)arg1;
- (void)_initPermittedClients;
- (bool)_isPermittedClient:(id)arg1;
- (id)_rendererForUniqueIDInternal:(id)arg1;
- (void)_setAirPlayVideoVersionSupport:(unsigned long long)arg1;
- (void)_setPTPClockEnabled:(bool)arg1;
- (void)_setRandomPassword;
- (int)_startReceiverServerWithSupportedModesMask:(unsigned long long)arg1;
- (id)activeRenderers;
- (unsigned long long)activeRenderersCount;
- (unsigned long long)airPlayVideoVersionSupport;
- (id)allClientNames;
- (id)allRenderers;
- (bool)altAdvertisingEnabled;
- (id)assistedInfoForAWDL;
- (id)assistedInfoForIPAddress:(id)arg1;
- (bool)assistedModeEnabled;
- (unsigned long long)concurrentPlaybackPolicy;
- (id)createStreamRendererWithUniqueID:(id)arg1 clientName:(id)arg2 UIController:(struct OpaqueAPReceiverUIController { }*)arg3;
- (id)delegate;
- (id)delegateQueue;
- (bool)demoModeEnabled;
- (unsigned long long)displayHDRMode;
- (bool)enableMixingMediaAudio;
- (int)forcePINRefresh;
- (id)init;
- (bool)isAirPlayReceiverSupported;
- (bool)isAllowedToProceedForClientWithName:(id)arg1 clientID:(id)arg2;
- (unsigned long long)maxNumberOfConcurrentSessions;
- (bool)optimizeAudioRenderingLatency;
- (long long)permissionTimeout;
- (unsigned long long)preemptionPolicy;
- (void)processHideGlobalPasscodePromptRequest;
- (void)processShowGlobalPasscodePromptRequest:(id)arg1 withClientName:(id)arg2;
- (void)removeRendererWithUniqueID:(id)arg1;
- (id)rendererForUniqueID:(id)arg1;
- (void)setAirPlayVideoVersionSupport:(unsigned long long)arg1;
- (void)setAltAdvertisingEnabled:(bool)arg1;
- (void)setAssistedModeEnabled:(bool)arg1;
- (void)setConcurrentPlaybackPolicy:(unsigned long long)arg1;
- (void)setCustomDisplaySizeMax:(struct CGSize { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDemoModeEnabled:(bool)arg1;
- (void)setDisplayHDRMode:(unsigned long long)arg1;
- (void)setEnableMixingMediaAudio:(bool)arg1;
- (void)setMaxNumberOfConcurrentSessions:(unsigned long long)arg1;
- (void)setOptimizeAudioRenderingLatency:(bool)arg1;
- (void)setPermissionTimeout:(long long)arg1;
- (void)setPreemptionPolicy:(unsigned long long)arg1;
- (void)setShouldForwardLayers:(bool)arg1;
- (void)setSupportRemoteControl:(bool)arg1;
- (void)setSupportsSenderUIEvents:(bool)arg1;
- (void)setUseCALayerForMirroring:(bool)arg1;
- (void)setUsesHomeKitIntegration:(bool)arg1;
- (bool)shouldForwardLayers;
- (int)startReceiverServer;
- (int)startReceiverServerWithSupportedRenderingModes:(unsigned long long)arg1;
- (int)stopReceiverServer;
- (bool)supportRemoteControl;
- (unsigned long long)supportedModesMask;
- (bool)supportsSenderUIEvents;
- (bool)systemSupportsWiFiUDM;
- (bool)useCALayerForMirroring;
- (bool)usesHomeKitIntegration;

@end
