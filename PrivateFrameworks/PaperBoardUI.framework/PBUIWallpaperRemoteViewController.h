
@interface PBUIWallpaperRemoteViewController : UIViewController <BSDescriptionProviding, FBSceneDelegate, FBSceneLayerManagerObserver, PBUIFakeBlurImageProviding, PBUIFakeBlurViewRegistering, PBUIRemoteIrisWallpaperPlayerDelegate, PBUIWallpaperConfigurationManagerDelegate, PBUIWallpaperLegibilityProviding, PBUIWallpaperPresenting, PBUIWallpaperViewDelegate> {
    long long  _activeVariant;
    NSString * _cachingIdentifier;
    NSMutableSet * _disallowRasterizationReasonsHomeVariant;
    NSMutableSet * _disallowRasterizationReasonsLockVariant;
    BSEventQueue * _eventQueue;
    NSMutableSet * _externalSceneModeAssertionActions;
    NSMutableDictionary * _fakeBlurCache;
    NSMutableSet * _hideWallpaperReasonsHomeVariant;
    NSMutableSet * _hideWallpaperReasonsLockVariant;
    NSHashTable * _homescreenBlurViews;
    NSMutableSet * _homescreenChangesDelayedReasons;
    NSHashTable * _homescreenObservers;
    NSHashTable * _lockscreenBlurViews;
    NSHashTable * _lockscreenObservers;
    bool  _missingEffectViewImages;
    NSMutableSet * _pendingEffectViewImageSlots;
    <PBUIWallpaperReachabilityCoordinating> * _reachabilityCoordinator;
    <PBUISessionReconnectPolicy> * _reconnectPolicy;
    PBUIRemoteIrisWallpaperPlayer * _remoteIrisWallpaperPlayer;
    FBScene * _scene;
    NSTimer * _sceneDeactivationTimer;
    <BSInvalidatable> * _sceneModeAssertionForViewAppeared;
    NSHashTable * _sceneModeAssertions;
    UIView<UIScenePresentation> * _scenePresentationView;
    <UIScenePresenter> * _scenePresenter;
    NSMutableSet * _stateCaptureHandles;
    NSMutableSet * _wallpaperAnimationSuspendedReasons;
    PBUIWallpaperConfigurationManager * _wallpaperConfigurationManager;
    <PBUIWallpaperPresentingDelegate> * _wallpaperPresentingDelegate;
    NSMutableSet * _wallpaperRequiredReasons;
    NSHashTable * _wallpaperScaleAssertions;
}

@property (nonatomic) long long activeVariant;
@property (nonatomic, copy) NSString *cachingIdentifier;
@property (nonatomic, readonly) struct { long long x1; long long x2; double x3; } currentHomescreenStyleTransitionState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double homescreenWallpaperScale;
@property (nonatomic, readonly) double lockscreenWallpaperScale;
@property (nonatomic, readonly) double minimumHomescreenWallpaperScale;
@property (nonatomic, readonly) double minimumLockscreenWallpaperScale;
@property (nonatomic, retain) <PBUIWallpaperReachabilityCoordinating> *reachabilityCoordinator;
@property (nonatomic, readonly) unsigned long long significantEventsCounter;
@property (readonly) Class superclass;
@property (nonatomic) long long variant;
@property (nonatomic, retain) PBUIWallpaperConfigurationManager *wallpaperConfigurationManager;
@property (nonatomic) <PBUIWallpaperPresentingDelegate> *wallpaperPresentingDelegate;

- (void).cxx_destruct;
- (id)_acquireSceneModeAssertionForReason:(id)arg1 sceneMode:(long long)arg2;
- (id)_acquireSceneModeAssertionForReason:(id)arg1 sceneMode:(long long)arg2 completion:(id /* block */)arg3;
- (void)_addStateCaptureHandlers;
- (id)_blurImageFromURL:(id)arg1;
- (id)_blurViewsForVariant:(long long)arg1;
- (void)_cacheBlurImageForVariant:(long long)arg1 requestedStyle:(long long)arg2 actualStyle:(long long)arg3 traitCollection:(id)arg4 image:(id)arg5 imageURL:(id)arg6;
- (id)_cachedBlurAssetForVariant:(long long)arg1 requestedStyle:(long long)arg2 traitCollection:(id)arg3;
- (bool)_canShowWhileLocked;
- (void)_cancelSceneDeactivation;
- (id)_disallowRasterizationReasonsForVariant:(long long)arg1;
- (long long)_effectiveSceneMode;
- (id)_hideWallpaperReasonsForVariant:(long long)arg1;
- (void)_invalidateBlurCacheForVariant:(long long)arg1;
- (void)_modifySceneSettings:(id)arg1 forSceneMode:(long long)arg2;
- (void)_notifyAllObserversOfNewWallpaperScene;
- (id)_observersForVariant:(long long)arg1;
- (void)_performWithLiveScene:(id /* block */)arg1;
- (void)_reconfigureBlurViewsForVariant:(long long)arg1;
- (void)_registerFakeBlurView:(id)arg1;
- (id)_sceneClientSettings;
- (id)_sceneSettings;
- (void)_scheduleSceneDeactivation;
- (void)_setupScene;
- (void)_setupSceneWithCompletion:(id /* block */)arg1;
- (id)_simpleAssertionWithReasonsSet:(id)arg1 identifier:(id)arg2 reason:(id)arg3 updater:(id /* block */)arg4;
- (void)_unregisterFakeBlurView:(id)arg1;
- (void)_updateBlurViewsForVariant:(long long)arg1;
- (void)_updateFallbackView;
- (void)_updateSceneMode;
- (void)_updateSceneModeWithCompletion:(id /* block */)arg1;
- (void)_updateWallpaperScaleWithAnimationFactory:(id)arg1;
- (void)_updateWallpaperSceneSettingsWithBlock:(id /* block */)arg1;
- (void)_updateWallpaperSceneSettingsWithBlock:(id /* block */)arg1 postUpdateBlock:(id /* block */)arg2;
- (void)_updateWallpaperSceneSettingsWithTransitionBlock:(id /* block */)arg1;
- (id)_wallpaperScaleAssertionForVariant:(long long)arg1 scale:(double)arg2;
- (double)_wallpaperScaleForVariant:(long long)arg1;
- (long long)activeVariant;
- (void)addObserver:(id)arg1 forVariant:(long long)arg2;
- (id)averageColorForVariant:(long long)arg1;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2 withSmudgeRadius:(double)arg3;
- (void)beginDelayingHomescreenStyleChangesForReason:(id)arg1;
- (id)beginRequiringWithReason:(id)arg1;
- (id)cachingIdentifier;
- (void)cancelInProcessAnimations;
- (double)contrastForVariant:(long long)arg1;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2;
- (struct { long long x1; long long x2; double x3; })currentHomescreenStyleTransitionState;
- (void)dealloc;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)endDelayingHomescreenStyleChangesForReason:(id)arg1 animationFactory:(id)arg2;
- (double)homescreenWallpaperScale;
- (id)imageForWallpaperStyle:(inout long long*)arg1 variant:(long long)arg2 traitCollection:(id)arg3;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)irisWallpaperPlayer;
- (id)legibilitySettingsForVariant:(long long)arg1;
- (double)lockscreenWallpaperScale;
- (double)minimumHomescreenWallpaperScale;
- (double)minimumLockscreenWallpaperScale;
- (id)newFakeBlurViewForVariant:(long long)arg1 style:(long long)arg2 transformOptions:(unsigned long long)arg3;
- (id)newImageProviderView;
- (void)noteDidRotateFromInterfaceOrientation:(long long)arg1;
- (void)noteWillAnimateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (bool)parallaxEnabledForVariant:(long long)arg1;
- (double)parallaxFactorForVariant:(long long)arg1;
- (void)preheatWallpaperForVariant:(long long)arg1;
- (id)reachabilityCoordinator;
- (void)remoteIrisWallpaperPlayer:(id)arg1 touchActiveChanged:(bool)arg2;
- (void)removeObserver:(id)arg1 forVariant:(long long)arg2;
- (bool)removeWallpaperStyleForPriority:(long long)arg1 forVariant:(long long)arg2 withAnimationFactory:(id)arg3;
- (id)requireWallpaperRasterizationWithReason:(id)arg1;
- (id)requireWallpaperWithReason:(id)arg1;
- (void)scene:(id)arg1 didReceiveActions:(id)arg2;
- (void)scene:(id)arg1 didUpdateClientSettingsWithDiff:(id)arg2 oldClientSettings:(id)arg3 transitionContext:(id)arg4;
- (void)sceneDidDeactivate:(id)arg1 withError:(id)arg2;
- (void)setActiveVariant:(long long)arg1;
- (void)setActiveVariant:(long long)arg1 withOutAnimationFactory:(id)arg2 inAnimationFactory:(id)arg3 completion:(id /* block */)arg4;
- (void)setAlpha:(double)arg1 forWallpaperVariant:(long long)arg2;
- (void)setCachingIdentifier:(id)arg1;
- (void)setDisallowsRasterization:(bool)arg1 forVariant:(long long)arg2 withReason:(id)arg3;
- (id)setHomescreenWallpaperScale:(double)arg1 withAnimationFactory:(id)arg2;
- (void)setLockscreenOnlyWallpaperAlpha:(double)arg1;
- (void)setLockscreenWallpaperContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLockscreenWallpaperScale:(double)arg1;
- (id)setLockscreenWallpaperScale:(double)arg1 withAnimationFactory:(id)arg2;
- (void)setReachabilityCoordinator:(id)arg1;
- (void)setVariant:(long long)arg1;
- (void)setWallpaperConfigurationManager:(id)arg1;
- (void)setWallpaperHidden:(bool)arg1 variant:(long long)arg2 reason:(id)arg3;
- (void)setWallpaperPresentingDelegate:(id)arg1;
- (bool)setWallpaperStyle:(long long)arg1 forPriority:(long long)arg2 forVariant:(long long)arg3 withAnimationFactory:(id)arg4;
- (bool)setWallpaperStyleTransitionState:(struct { long long x1; long long x2; double x3; })arg1 forPriority:(long long)arg2 forVariant:(long long)arg3 withAnimationFactory:(id)arg4;
- (bool)shouldAutorotate;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (unsigned long long)supportedInterfaceOrientations;
- (id)suspendWallpaperAnimationForReason:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)updateImageProviderView:(id)arg1 withImage:(id)arg2;
- (void)updateIrisWallpaperForInteractiveMode;
- (bool)updateIrisWallpaperForStaticMode;
- (void)updateWallpaperForLocations:(long long)arg1 wallpaperMode:(long long)arg2 withCompletion:(id /* block */)arg3;
- (void)updateWallpaperForLocations:(long long)arg1 withCompletion:(id /* block */)arg2;
- (long long)variant;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)wallpaperConfigurationManager;
- (void)wallpaperConfigurationManager:(id)arg1 didChangeWallpaperConfigurationForVariants:(long long)arg2;
- (id)wallpaperPresentingDelegate;
- (id)wallpaperView:(id)arg1 wallpaperConfigurationIncludingValueTypes:(unsigned long long)arg2;
- (double)zoomFactorForVariant:(long long)arg1;

@end
