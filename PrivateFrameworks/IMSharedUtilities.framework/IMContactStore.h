
@interface IMContactStore : NSObject <IMStateLoggable> {
    NSMutableDictionary * _CNIDToHandleIDsMap;
    NSArray * _CNIDsForBatchFetch;
    NSMutableDictionary * _IDToCNContactMap;
    bool  _batchFetchingForLaunchCompleted;
    NSObject<OS_dispatch_queue> * _changeHistoryFetchQueue;
    CNContactStore * _contactStore;
    NSData * _currentHistoryToken;
    NSDictionary * _handleIDToCNIDMap;
    double  _lastContactStoreSync;
    double  _lastMeContactStoreSync;
    CNContact * _meContact;
    IMStateCaptureAssistant * _stateCaptureAssistant;
}

@property (nonatomic, retain) NSMutableDictionary *CNIDToHandleIDsMap;
@property (nonatomic, retain) NSArray *CNIDsForBatchFetch;
@property (nonatomic, retain) NSMutableDictionary *IDToCNContactMap;
@property (nonatomic) bool batchFetchingForLaunchCompleted;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *changeHistoryFetchQueue;
@property (nonatomic, retain) CNContactStore *contactStore;
@property (nonatomic, retain) NSData *currentHistoryToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSDictionary *handleIDToCNIDMap;
@property (readonly) unsigned long long hash;
@property (nonatomic) double lastContactStoreSync;
@property (nonatomic) double lastMeContactStoreSync;
@property (nonatomic, retain) CNContact *meContact;
@property (nonatomic, retain) IMStateCaptureAssistant *stateCaptureAssistant;
@property (readonly) Class superclass;

+ (id)IDWithCurrentLocaleITUCode:(id)arg1;
+ (id)IDsFromCNContact:(id)arg1;
+ (Class)IMCNChangeHistoryFetchRequestClass;
+ (Class)IMCNContactFetchRequestClass;
+ (Class)IMCNContactFormatterClass;
+ (Class)IMCNGeminiManagerClass;
+ (Class)IMCNLabeledValueClass;
+ (Class)IMCNMeCardSharingPickerViewControllerClass;
+ (Class)IMCNMutableContactClass;
+ (Class)IMCNPhoneNumberClass;
+ (id)IMContactStoreQueue;
+ (void)_logArray:(id)arg1 inBatchesOfSize:(long long)arg2;
+ (void)_logDictionaryInformation:(id)arg1 withSortedKeys:(id)arg2 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
+ (bool)_shouldAllowContactStoreLookup;
+ (id)_sortContactsFor:(id)arg1;
+ (id)_stringFromContact:(id)arg1 withStyle:(long long)arg2;
+ (id)abbreviatedNameForCNContact:(id)arg1;
+ (id)companyNameForCNContact:(id)arg1;
+ (id)createMutableContactWithID:(id)arg1;
+ (id)createMutableContactWithMapURL:(id)arg1 andLocalizedLocationString:(id)arg2;
+ (id)descriptionForCNContact:(id)arg1;
+ (id)dialingCodeForID:(id)arg1;
+ (id)dialingForCurrentLocale;
+ (id)displayNameForContact:(id)arg1;
+ (id)displayNameWithCNNickNameOrFullNameOrCompanyNameOrAbbreviatedForContact:(id)arg1;
+ (id)displayNameWithPhoneNumberOrEmailForContact:(id)arg1;
+ (id)emailsForCNContact:(id)arg1;
+ (id)firstNameForCNContact:(id)arg1;
+ (id)fullNameForCNContact:(id)arg1;
+ (bool)isCNContactAKnownContact:(id)arg1;
+ (id)kIMCNContactCropRectKey;
+ (id)kIMCNContactEmailAddressesKey;
+ (id)kIMCNContactIdentifierKey;
+ (id)kIMCNContactImageBackgroundColorsDataKey;
+ (id)kIMCNContactImageDataAvailableKey;
+ (id)kIMCNContactImageDataKey;
+ (id)kIMCNContactLinkIdentifierKey;
+ (id)kIMCNContactPhoneNumbersKey;
+ (id)kIMCNContactThumbnailImageDataKey;
+ (id)kIMCNContactWallpaperKey;
+ (id)kIMCNContactWatchWallpaperImageDataKey;
+ (id)keysForCNContact;
+ (id)keysForMeContact;
+ (id)keysForNicknameHandling;
+ (id)lastNameForCNContact:(id)arg1;
+ (void)logCNContact:(id)arg1;
+ (void)logCNContact:(id)arg1 andID:(id)arg2;
+ (void)logContactFetchRequestResults:(id)arg1;
+ (void)logDictionary:(id)arg1;
+ (void)logDictionary:(id)arg1 checkAdditionalLoggingEnabled:(bool)arg2;
+ (void)logDictionary:(id)arg1 inBatchesOfSize:(long long)arg2;
+ (void)logHandleID:(id)arg1;
+ (void)logHandleIDs:(id)arg1 checkAdditionalLoggingEnabled:(bool)arg2;
+ (void)logHistoryToken:(id)arg1;
+ (id)mePredicate;
+ (id)nickNameForCNContact:(id)arg1;
+ (id)phoneNumbersForCNContact:(id)arg1;
+ (id)phoneticFirstNameForCNContact:(id)arg1;
+ (id)phoneticFullNameForCNContact:(id)arg1;
+ (id)phoneticLastNameForCNContact:(id)arg1;
+ (id)predicateForID:(id)arg1;
+ (id)sharedInstance;
+ (bool)shouldShowAbbreviatedNames;
+ (bool)shouldShowNickNames;
+ (id)validateAndCleanupID:(id)arg1;
+ (id)validateAndFilterIDsForContactsBatchFetch:(id)arg1;

- (void).cxx_destruct;
- (id)CNIDToHandleIDsMap;
- (id)CNIDsForBatchFetch;
- (id)IDToCNContactMap;
- (void)addContact:(id)arg1 withID:(id)arg2;
- (void)addEntriesToIDToCNContactMap:(id)arg1;
- (void)addIDToCNIDToHandleIDsMap:(id)arg1 withCNID:(id)arg2;
- (bool)batchFetchingForLaunchCompleted;
- (void)cacheBatchFetchResults:(id)arg1 handleIDsWithoutCNID:(id)arg2;
- (id)changeHistoryFetchQueue;
- (void)checkForContactStoreChanges;
- (id)completedContact:(id)arg1 withKeys:(id)arg2;
- (id)contactStore;
- (void)contactStoreChanged:(id)arg1;
- (id)currentHistoryToken;
- (void)dealloc;
- (id)fetchCNContactForHandleID:(id)arg1 withKeys:(id)arg2;
- (id)fetchCNContactForHandleWithID:(id)arg1;
- (id)fetchCNContactWithIdentifier:(id)arg1;
- (void)fetchCNContactsForHandlesWithIDs:(id)arg1 isFinalBatch:(bool)arg2;
- (id)fetchMeContactWithKeys:(id)arg1;
- (id)fetchMeContactWithKeys:(id)arg1 withError:(id*)arg2;
- (void)generateCNIDToHandleIDMap;
- (id)getAllKeysFromIDToCNContactMap;
- (id)getCNIDToHandleIDsMap;
- (id)getContactForID:(id)arg1;
- (id)getContactStore;
- (id)getHandleIDToCNIDMap;
- (id)getIDToCNContactMap;
- (void)handleDropEverythingEvent;
- (id)handleIDToCNIDMap;
- (id)handleIDsForCNID:(id)arg1;
- (id)init;
- (id)initWithContactStore:(id)arg1;
- (bool)isBatchFetchingForLaunchCompleted;
- (bool)isContactWithIDAlreadyFetched:(id)arg1;
- (bool)isIDAKnownContact:(id)arg1;
- (double)lastContactStoreSync;
- (double)lastMeContactStoreSync;
- (void)meCardChanged:(id)arg1;
- (id)meContact;
- (void)removeContactWithID:(id)arg1;
- (void)removeIDFromCNIDToHandleIDsMap:(id)arg1 withCNID:(id)arg2;
- (void)replaceContact:(id)arg1 withID:(id)arg2;
- (void)replaceWithMutableContactForID:(id)arg1;
- (void)resetMeCard;
- (void)setBatchFetchingCompleted;
- (void)setBatchFetchingForLaunchCompleted:(bool)arg1;
- (void)setBatchFetchingIsCompleted:(bool)arg1;
- (void)setCNIDToHandleIDsMap:(id)arg1;
- (void)setCNIDsForBatchFetch:(id)arg1;
- (void)setChangeHistoryFetchQueue:(id)arg1;
- (void)setContactStore:(id)arg1;
- (void)setCurrentHistoryToken:(id)arg1;
- (void)setHandleIDToCNIDMap:(id)arg1;
- (void)setIDToCNContactMap:(id)arg1;
- (void)setLastContactStoreSync:(double)arg1;
- (void)setLastMeContactStoreSync:(double)arg1;
- (void)setMeContact:(id)arg1;
- (void)setStateCaptureAssistant:(id)arg1;
- (id)stateCaptureAssistant;
- (id)stateDictionaryForDiagnosticsRequest;

@end
