
@interface BWMultiStreamCameraSourceNode : BWSourceNode <BWFigVideoCaptureDeviceZoomFactorChangedDelegate> {
    bool  _RGBIRStereoFusionFixedDepthThresholdSupported;
    bool  _RGBIRStereoFusionMaxDepthThresholdSupported;
    bool  _RGBIRStereoFusionMinDepthThresholdSupported;
    bool  _adaptiveOverscanEnabled;
    bool  _adjustOpticalCenterMetadataForSuperWideFullFOV;
    bool  _bravoShiftConsumesAllAvailableOverscan;
    bool  _bravoShiftConsumesAvailableOverscan;
    double  _bravoShiftNormalizedConsumptionLimitOfVISOverscan;
    bool  _bravoShiftRestrictedToHighestNondisruptiveZoomRange;
    unsigned int  _bufferHeightForRaw;
    struct { 
        double centerx; 
        double centery; 
        bool lensCoefficientsValid; 
        float lensCoefficients[5]; 
        float gravityFactor; 
        float pixelsPerMicron; 
        bool isFrontCamera; 
    }  _cameraData;
    BWFigVideoCaptureDevice * _captureDevice;
    int  _captureDeviceType;
    BWFigVideoCaptureStream * _captureStream;
    int  _colorSpaceProperties;
    BWMultiStreamCameraSourceNodeConfiguration * _configuration;
    int  _currentFirmwareStillImageOutputRetainedBufferCount;
    NSDictionary * _defaultVISOverscanOutputConfigurations;
    bool  _deferMetadataCreation;
    BWDeferredMetadataCache * _deferredMetadataCache;
    NSString * _depthEnginePrimaryOutputID;
    BWNodeOutput * _depthOutput;
    struct opaqueCMFormatDescription { } * _depthOutputFormatDescription;
    <BWDetectedFacesFilterDelegate> * _detectedFacesFilterDelegate;
    BWDetectedFacesRingBuffer * _detectedFacesRingBuffer;
    BWDetectedObjectsInfoRingBuffer * _detectedObjectsInfoRingBuffer;
    BWNodeOutput * _detectedObjectsOutput;
    int  _devicePosition;
    int  _deviceType;
    bool  _discardOutputSampleBuffers;
    CMIDistortionModel * _distortionModel;
    NSMutableDictionary * _dutyCycleMetadataCache;
    bool  _enforceFinalCropRectBasedOnGDC;
    struct { 
        int width; 
        int height; 
    }  _firmwareStillImageDimensionsAfterOverscanCropping;
    int  _firmwareStillImageOutputRetainedBufferCountOverride;
    struct opaqueCMFormatDescription { } * _focusPixelDataFormatDescription;
    float  _geometricDistortionCorrectionStrengthOnStreamingOutputs;
    bool  _hardwareDepthFilteringSupported;
    struct OpaqueVTHDRMetadataGenerationSession { } * _hdrMetadataSession;
    unsigned long long  _infraredProjectorUptimeInUsForHighPowerSparse;
    unsigned long long  _infraredProjectorUptimeInUsForLowPowerSparse;
    BWStats * _ioSurfaceCompressionRatioStatsForRaw;
    bool  _isInfraredSourceNode;
    bool  _keepISPStreamingWhenStopping;
    BWNodeOutput * _keypointDescriptorDataOutput;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastFramePTS;
    BWNodeOutput * _lightSourceMaskOutput;
    int  _mainFormatSIFRBinningFactor;
    float  _maxISPAppliedZoomFactorForPreviewOutput;
    BWMotionDataPreserver * _motionDataPreserver;
    struct CGSize { 
        double width; 
        double height; 
    }  _onDemandStillOverscan;
    struct CGSize { 
        double width; 
        double height; 
    }  _onDemandStillSensorRawOverscan;
    struct CGPoint { 
        double x; 
        double y; 
    }  _opticalCenterAdjustmentForSuperWideFullFOV;
    struct BWStreamOutputStorage { 
        int type; 
        unsigned int flags; 
        bool ready; 
        bool enabled; 
        BWNodeOutput *nodeOutput; 
        struct opaqueCMSimpleQueue {} *simpleQueue; 
        NSObject<OS_dispatch_queue> *bufferServicingQueue; 
        int (*bufferServicingQueueCallback)(); 
        struct opaqueCMFormatDescription {} *cachedFormatDescription; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } lastEmittedPTS; 
        int retainedBufferCount; 
        int streamRetainedBufferCount; 
        BWPixelBufferPool *internalPixelBufferPool; 
        bool bufferPoolOwnedByAnotherNode; 
        int bytesPerRowAlignmentRequirement; 
        int planeAlignmentRequirement; 
        unsigned int sensorInterfaceRawPixelFormat; 
        unsigned int sashimiRawPixelFormat; 
        unsigned int sushiRawPixelFormat; 
        struct { 
            int width; 
            int height; 
        } outputDimensions; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cropRect; 
        float lastISPAppliedZoomFactor; 
        BWStats *ioSurfaceCompressionRatioStats; 
        int pixelBufferCompressionType; 
        unsigned long long totalCompressedDataSize; 
        unsigned long long totalUncompressedDataSize; 
        unsigned long long lumaCompressionHistogram[16]; 
        unsigned long long chromaCompressionHistogram[16]; 
        unsigned int universalCompressionNumberOfSamples; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } lastUniversalCompressionSamplePTS; 
        bool pixelFormatIsTenBit; 
        bool pixelFormatIs420; 
        bool pixelFormatIsLossyCompression; 
        bool prefetchEnabled; 
    }  _outputsStorage;
    float  _overscanReservedInISPZoom;
    float  _pixelsPerMicron;
    BWNodeOutput * _pointCloudOutput;
    NSString * _portType;
    NSDictionary * _powerOptimizedVISOverscanOutputConfigurations;
    bool  _powerOptimizedVISOverscanOutputConfigurationsEnabled;
    NSObject<OS_dispatch_queue> * _preAllocationQueue;
    unsigned int  _previewFrameRate;
    BWNodeOutput * _previewOutput;
    NSDictionary * _previewOutputColorInfo;
    struct CGSize { 
        double width; 
        double height; 
    }  _previewOutputOverscan;
    float  _previewScaleFactor;
    struct CGPoint { 
        double x; 
        double y; 
    }  _previewShift;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _previewShiftLock;
    NSString * _previewStreamOutputID;
    int  _previousInfraredCaptureID;
    bool  _provideStillImageSensorRawOutputBuffers;
    bool  _rawCompressionEnabled;
    int  _resolvedFormatIndex;
    BWNodeOutput * _semanticMasksOutput;
    bool  _shareStreamingBufferPools;
    BWNodeOutput * _stillImageOutput;
    NSDictionary * _stillImageOutputColorInfo;
    bool  _stillImageOutputSushiRawAttachmentOptionEnabled;
    BWNodeOutput * _stillImageSensorRawOutput;
    NSString * _stillImageSensorRawStreamOutputID;
    NSString * _stillImageStreamOutputID;
    struct opaqueCMFormatDescription { } * _stillReflectionFormatDescription;
    struct opaqueCMFormatDescription { } * _stillReflectionSecondaryFormatDescription;
    struct OpaqueVTPixelTransferSession { } * _stillReflectionSecondaryTransferSession;
    struct OpaqueVTPixelTransferSession { } * _stillReflectionTransferSession;
    bool  _stopStreamConfigurationUpdates;
    BWFigCaptureStream * _stream;
    NSObject<OS_dispatch_queue> * _streamConfigurationQueue;
    bool  _streamingOutputsEnabled;
    bool  _strictDepthModeSupported;
    NSArray * _supportedDepthPixelFormats;
    NSArray * _supportedFormats;
    bool  _supportsDecouplingPrimaryScalerOnly;
    bool  _systemPressured;
    float  _telePixelsPerMicron;
    unsigned long long  _totalCompressedDataSizeForRaw;
    unsigned long long  _totalUncompressedDataSizeForRaw;
    struct { 
        int width; 
        int height; 
    }  _ultraHighResSensorRawStillImageOutputDimensions;
    bool  _usePinholeCameraFocalLengthInIntrinsicMatrixCalculation;
    BWNodeOutput * _videoCaptureOutput;
    NSDictionary * _videoCaptureOutputColorInfo;
    NSString * _videoCaptureStreamOutputID;
    struct opaqueCMFormatDescription { } * _visionDataFormatDescription;
}

@property (readonly) BWFigVideoCaptureStream *captureStream;
@property (nonatomic, readonly) int colorSpaceProperties;
@property (readonly) BWMultiStreamCameraSourceNodeConfiguration *configuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) BWNodeOutput *depthOutput;
@property (readonly, copy) NSString *description;
@property (nonatomic) <BWDetectedFacesFilterDelegate> *detectedFacesFilterDelegate;
@property (readonly) BWNodeOutput *detectedObjectsOutput;
@property (nonatomic, readonly) struct { int x1; int x2; } firmwareStillImageDimensionsAfterOverscanCropping;
@property (nonatomic, readonly) float geometricDistortionCorrectionStrengthOnStreamingOutputs;
@property (nonatomic, readonly) bool hardwareDepthFilteringEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long infraredProjectorUptimeInUsForHighPowerSparse;
@property (nonatomic, readonly) unsigned long long infraredProjectorUptimeInUsForLowPowerSparse;
@property (nonatomic) bool keepISPStreamingWhenStopping;
@property (readonly) BWNodeOutput *keypointDescriptorDataOutput;
@property (readonly) BWNodeOutput *lightSourceMaskOutput;
@property (readonly) BWNodeOutput *pointCloudOutput;
@property (readonly) NSString *portType;
@property (readonly) BWNodeOutput *previewOutput;
@property (readonly) BWNodeOutput *semanticMasksOutput;
@property (readonly) BWNodeOutput *stillImageOutput;
@property (readonly) BWNodeOutput *stillImageSensorRawOutput;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct { int x1; int x2; } ultraHighResSensorRawStillImageOutputDimensions;
@property (readonly) BWNodeOutput *videoCaptureOutput;

+ (void)initialize;

- (int)allocateOrReuseBufferPoolsFromSourceNode:(id)arg1;
- (id)captureStream;
- (struct OpaqueCMClock { }*)clock;
- (id)colorInfoForOutput:(id)arg1;
- (int)colorSpaceProperties;
- (id)configuration;
- (int)configure:(id)arg1;
- (void)dealloc;
- (id)depthOutput;
- (id)detectedFacesFilterDelegate;
- (id)detectedObjectsOutput;
- (void)didSelectFormat:(id)arg1 forOutput:(id)arg2;
- (struct { int x1; int x2; })firmwareStillImageDimensionsAfterOverscanCropping;
- (float)geometricDistortionCorrectionStrengthOnStreamingOutputs;
- (bool)hardwareDepthFilteringEnabled;
- (unsigned long long)infraredProjectorUptimeInUsForHighPowerSparse;
- (unsigned long long)infraredProjectorUptimeInUsForLowPowerSparse;
- (id)initWithCaptureDevice:(id)arg1 captureStream:(id)arg2;
- (bool)keepISPStreamingWhenStopping;
- (id)keypointDescriptorDataOutput;
- (id)lightSourceMaskOutput;
- (void)makeOutputsLiveIfNeeded;
- (id)nodeSubType;
- (id)pointCloudOutput;
- (id)portType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (int)prepareForStillImageCaptureWithFirmwareStillImageOutputRetainedBufferCountOverride:(int)arg1 clientBracketCount:(int)arg2 enableSushiRawAttachmentOption:(bool)arg3;
- (id)previewOutput;
- (void)requestedZoomFactorChanged:(float)arg1;
- (id)semanticMasksOutput;
- (void)setDetectedFacesFilterDelegate:(id)arg1;
- (void)setKeepISPStreamingWhenStopping:(bool)arg1;
- (void)setPowerOptimizedVISOverscanEnabled:(bool)arg1;
- (void)setPreviewShift:(struct CGPoint { double x1; double x2; })arg1 previewScaleFactor:(float)arg2 quadraBinningFactor:(int)arg3;
- (bool)start:(id*)arg1;
- (id)stillImageOutput;
- (id)stillImageSensorRawOutput;
- (bool)stop:(id*)arg1;
- (struct { int x1; int x2; })ultraHighResSensorRawStillImageOutputDimensions;
- (void)updateFormatRequirementsFromSourceNode:(id)arg1;
- (void)updateZoomFactorsToNondisruptiveSwitchingFormatIndexMapping;
- (id)videoCaptureOutput;

@end
