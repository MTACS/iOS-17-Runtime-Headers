
@interface SFUnifiedTabBarItemView : SFUnifiedBarItemView <PKScribbleInteractionDelegate, PKScribbleInteractionElementSource, _SFFluidProgressViewDelegate> {
    SFUnifiedTabBarItemAccessoryButtonArrangement * _accessoryButtonArrangement;
    long long  _accessoryButtonLayout;
    NSTimer * _accessoryButtonUpdateTimer;
    bool  _active;
    NSMutableDictionary * _availabilityButtonTimers;
    NSMutableDictionary * _availabilityButtons;
    NSTimer * _availabilityLabelTimer;
    SFUnifiedTabBarItemViewCloseButton * _closeButton;
    SFUnifiedTabBarItemViewCloseButton * _closeButtonForHover;
    SFUnifiedTabBarItemAvailabilityAction * _currentAvailabilityLabelAction;
    <SFUnifiedTabBarItemViewDelegate> * _delegate;
    SFMoreMenuButton * _downloadProgressView;
    SFWebExtensionButtonConfiguration * _extensionButtonConfiguration;
    UIButton * _firstExtensionButton;
    SFBadgeContainerView * _firstExtensionButtonContainer;
    WBSFluidProgressController * _fluidProgressController;
    SFNavigationBarToggleButton * _formatMenuButton;
    <SFMenuConfiguring> * _formatMenuButtonConfigurator;
    NSDate * _lastReloadDate;
    double  _leadingButtonsWidth;
    unsigned long long  _mediaStateIcon;
    UIButton * _mediaStateMuteButton;
    SFMoreMenuButton * _menuButton;
    unsigned long long  _menuButtonBadges;
    SFMoreMenuButton * _moreMenuButton;
    SFBadgeContainerView * _moreMenuButtonContainer;
    UIButton * _multipleExtensionsButton;
    SFBadgeContainerView * _multipleExtensionsButtonContainer;
    bool  _needsAnimatedAccessoryButtonUpdate;
    bool  _needsVoiceSearchAvailabilityUpdate;
    SFAvatarStackView * _participantsView;
    NSMutableArray * _pendingAvailabilityLabelActions;
    UIButton * _pinnedIndicator;
    _SFFluidProgressView * _progressView;
    UIButton * _reloadButton;
    NSTimer * _reloadButtonExpirationTimer;
    UIButton * _secondExtensionButton;
    SFBadgeContainerView * _secondExtensionButtonContainer;
    bool  _showingProgress;
    bool  _showsBadgeOnExtensionsButton;
    bool  _showsCloseButton;
    bool  _showsPinnedIndicator;
    bool  _showsSiriReaderPlayingIcon;
    bool  _showsSquishedAccessoryViews;
    bool  _showsStopReloadButton;
    bool  _showsTranslationIcon;
    bool  _showsVoiceSearchButton;
    SFUnifiedTabBarItemTitleContainerView * _squishedTitleContainer;
    UIButton * _stopButton;
    bool  _stopReloadButtonShowsStop;
    SFUnifiedTabBarItemTitleContainerView * _titleContainer;
    bool  _titleContainerMasked;
    bool  _trailingButtonsHidden;
    double  _trailingButtonsWidth;
    bool  _unread;
    SFUnreadIndicator * _unreadIndicator;
    NSMutableSet * _visibleAvailabilityButtonTypes;
    UIButton * _voiceSearchButton;
}

@property (nonatomic) long long accessoryButtonLayout;
@property (getter=isActive, nonatomic) bool active;
@property (nonatomic) long long contentAlignment;
@property (readonly, copy) NSString *debugDescription;
@property <SFUnifiedTabBarItemViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SFWebExtensionButtonConfiguration *extensionButtonConfiguration;
@property (nonatomic) <SFMenuConfiguring> *formatMenuButtonConfigurator;
@property (nonatomic) bool hasFocusedSensitiveInputField;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIImage *icon;
@property (nonatomic, retain) NSDate *lastReloadDate;
@property (nonatomic) long long lockIconEdge;
@property (nonatomic) unsigned long long mediaStateIcon;
@property (nonatomic) unsigned long long menuButtonBadges;
@property (nonatomic) bool menuButtonSelected;
@property (nonatomic, readonly) UIView *menuPopoverSourceView;
@property (nonatomic, retain) UITextField *searchField;
@property (nonatomic) long long securityAnnotation;
@property (nonatomic, copy) NSArray *shareParticipants;
@property (nonatomic) bool showsBadgeOnExtensionsButton;
@property (nonatomic) bool showsCloseButton;
@property (nonatomic) bool showsLockIcon;
@property (nonatomic, readonly) bool showsPersistentStopReloadButton;
@property (nonatomic) bool showsPinnedIndicator;
@property (nonatomic) bool showsSearchField;
@property (nonatomic) bool showsSearchIcon;
@property (nonatomic, readonly) bool showsSecurityAnnotation;
@property (nonatomic) bool showsSiriReaderPlayingIcon;
@property (nonatomic) bool showsSquishedAccessoryViews;
@property (nonatomic) bool showsStopReloadButton;
@property (nonatomic) bool showsTranslationIcon;
@property (nonatomic) bool showsVoiceSearchButton;
@property (nonatomic) SFUnifiedTabBarItemTitleContainerView *squishedTitleContainer;
@property (nonatomic) unsigned long long startIndexOfTitleInTextWhenExpanded;
@property (nonatomic) bool stopReloadButtonShowsStop;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *textWhenExpanded;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, retain) NSString *titleTextStyle;
@property (nonatomic, copy) NSString *titleWhenActive;
@property (getter=isUnread, nonatomic) bool unread;

- (void).cxx_destruct;
- (id)_accessoryButtonConfigurationWithImage:(id)arg1 scale:(long long)arg2;
- (id)_accessoryButtonTintColor;
- (void)_addPendingAvailabilityLabelAction:(id)arg1;
- (bool)_availabilityButtonsReplaceFormatMenuButton;
- (void)_cancelAvailabilityLabelsAnimated:(bool)arg1;
- (double)_closeButtonAlphaForSquishedInset;
- (void)_closeButtonTapped;
- (bool)_coalescingAccessoryButtonUpdates;
- (bool)_commandPressed;
- (id)_controlsTintColor;
- (void)_dismissAvailabilityButtonOfType:(long long)arg1 animated:(bool)arg2;
- (void)_dismissAvailabilityButtons:(id)arg1 animated:(bool)arg2;
- (void)_dismissAvailabilityButtonsAnimated:(bool)arg1;
- (void)_dismissAvailabilityLabelAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_dismissExpiredAvailabilityButtons;
- (void)_extensionButtonTapped:(id)arg1;
- (bool)_hasRoomForIconAndCloseButton;
- (void)_hover:(id)arg1;
- (long long)_iconVisibility;
- (unsigned long long)_individualExtensionButtonLimit;
- (double)_insetForAccessoryButtonOfType:(long long)arg1;
- (void)_layOutAccessoryButtons;
- (double)_layOutIndexes:(id)arg1 ofAccessoryButtonTypes:(id)arg2 alongEdge:(long long)arg3 usingPresentationSize:(bool)arg4;
- (void)_layOutTitleContainer;
- (void)_layOutTitleContainerMask;
- (id)_makeAccessoryButtonWithImage:(id)arg1 action:(SEL)arg2;
- (id)_makeAccessoryButtonWithImage:(id)arg1 scale:(long long)arg2 action:(SEL)arg3;
- (void)_mediaStateMuteButtonTapped;
- (void)_menuButtonClicked;
- (void)_menuButtonReceivedTouchDown;
- (void)_menuButtonTapped;
- (void)_presentAvailabilityButtonWithAction:(id)arg1;
- (void)_presentAvailabilityLabel;
- (id)_progressBarTintColor;
- (void)_readerButtonTapped;
- (void)_reloadButtonTapped;
- (void)_requestAvailabilityLabelWithAction:(id)arg1;
- (void)_requestAvailabilityOverlayWithAction:(id)arg1;
- (double)_scaleForTransitioningAccessoryButtonOfType:(long long)arg1;
- (void)_scribbleInteraction:(id)arg1 didFinishWritingInElement:(id)arg2;
- (void)_scribbleInteraction:(id)arg1 focusElement:(id)arg2 initialFocusSelectionReferencePoint:(struct CGPoint { double x1; double x2; })arg3 completion:(id /* block */)arg4;
- (bool)_scribbleInteraction:(id)arg1 focusWillTransformElement:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scribbleInteraction:(id)arg1 frameForElement:(id)arg2;
- (void)_scribbleInteraction:(id)arg1 requestElementsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completion:(id /* block */)arg3;
- (bool)_scribbleInteraction:(id)arg1 shouldBeginAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_scribbleInteraction:(id)arg1 willBeginWritingInElement:(id)arg2;
- (bool)_scribbleInteractionIsEnabled:(id)arg1;
- (void)_searchFieldDidChange:(id)arg1;
- (id)_searchFieldTintColor;
- (id)_secondaryAccessoryButtonTintColor;
- (void)_setIndexes:(id)arg1 ofAccessoryButtonTypes:(id)arg2 visible:(bool)arg3 animated:(bool)arg4;
- (void)_setNeedsAnimatedAccessoryButtonUpdate;
- (void)_setTitleContainerMasked:(bool)arg1;
- (void)_setTrailingButtonsHidden:(bool)arg1;
- (bool)_shouldUseActiveTheme;
- (void)_showNextAvailabilityLabel;
- (bool)_showsAccessoryButtonOfType:(long long)arg1;
- (bool)_showsCloseButtonOnHover;
- (bool)_showsFormatMenuButtonAccessories;
- (double)_spacingBetweenAccessoryButtonOfType:(long long)arg1 andButtonOfType:(long long)arg2;
- (double)_squishedInsetToHideCloseButton;
- (double)_squishedInsetToHideTrailingButtons;
- (void)_startAvailabilityLabelTimerWithDuration:(double)arg1;
- (void)_startReloadButtonExpirationTimer;
- (void)_startTimerForAvailabilityButtonOfType:(long long)arg1;
- (void)_stopAccessoryButtonUpdateTimer;
- (void)_stopAvailabilityLabelTimer;
- (void)_stopButtonTapped;
- (void)_stopReloadButtonExpirationTimer;
- (void)_temporarilyCoalesceAccessoryButtonUpdates;
- (id)_titleTheme;
- (void)_translationButtonTapped;
- (void)_updateAccessoryButtons;
- (void)_updateAccessoryButtonsAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)_updateBadges;
- (void)_updateCloseButtonForHoverPosition;
- (void)_updateExtensionButtonConfigurationShowingOverflow:(bool)arg1 activeExtensionCount:(unsigned long long)arg2;
- (void)_updateFormatMenuButtonAccessories;
- (void)_updateFormatMenuButtonImage;
- (void)_updateFormatMenuButtonStyle;
- (void)_updateMediaStateMuteButtonColor;
- (void)_updateMenuButtonColor;
- (void)_updateProgressViewColor;
- (void)_updateShowsProgressView;
- (id)_viewForAccessoryButtonOfType:(long long)arg1;
- (void)_voiceSearchAvailabilityDidChange:(id)arg1;
- (void)_voiceSearchButtonTapped;
- (double)_widthForAccessoryButtonOfType:(long long)arg1;
- (long long)accessoryButtonLayout;
- (void)applyTheme;
- (void)beginTransitioningSearchField;
- (bool)canBecomeFocused;
- (long long)contentAlignment;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToWindow;
- (void)dismissAvailabilityOverlays;
- (void)dismissReaderAvailabilityButton;
- (void)dismissTranslationAvailabilityButton;
- (void)endTransitioningSearchField;
- (id)extensionButtonConfiguration;
- (void)fluidProgressViewDidShowProgress:(id)arg1;
- (void)fluidProgressViewWillShowProgress:(id)arg1;
- (id)formatMenuButtonConfigurator;
- (bool)hasFocusedSensitiveInputField;
- (id)icon;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isActive;
- (bool)isUnread;
- (id)lastReloadDate;
- (void)layoutSubviews;
- (long long)lockIconEdge;
- (unsigned long long)mediaStateIcon;
- (unsigned long long)menuButtonBadges;
- (bool)menuButtonSelected;
- (id)menuPopoverSourceView;
- (id)pointerRegionIdentifierForInteractionLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)prepareForReuse;
- (id)searchField;
- (long long)securityAnnotation;
- (void)setAccessoryButtonLayout:(long long)arg1;
- (void)setActive:(bool)arg1;
- (void)setContentAlignment:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDownloadProgress:(double)arg1 animated:(bool)arg2;
- (void)setExtensionButtonConfiguration:(id)arg1;
- (void)setFluidProgressController:(id)arg1 withCurrentState:(id)arg2;
- (void)setFormatMenuButtonConfigurator:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasFocusedSensitiveInputField:(bool)arg1;
- (void)setHovering:(bool)arg1;
- (void)setIcon:(id)arg1;
- (void)setLastReloadDate:(id)arg1;
- (void)setLockIconEdge:(long long)arg1;
- (void)setMediaStateIcon:(unsigned long long)arg1;
- (void)setMenuButtonBadges:(unsigned long long)arg1;
- (void)setMenuButtonSelected:(bool)arg1;
- (void)setPlatterStyle:(long long)arg1;
- (void)setSearchField:(id)arg1;
- (void)setSecurityAnnotation:(long long)arg1;
- (void)setShareParticipants:(id)arg1;
- (void)setShowsBadgeOnExtensionsButton:(bool)arg1;
- (void)setShowsCloseButton:(bool)arg1;
- (void)setShowsLockIcon:(bool)arg1;
- (void)setShowsPinnedIndicator:(bool)arg1;
- (void)setShowsSearchField:(bool)arg1;
- (void)setShowsSearchIcon:(bool)arg1;
- (void)setShowsSiriReaderPlayingIcon:(bool)arg1;
- (void)setShowsSquishedAccessoryViews:(bool)arg1;
- (void)setShowsStopReloadButton:(bool)arg1;
- (void)setShowsTranslationIcon:(bool)arg1;
- (void)setShowsVoiceSearchButton:(bool)arg1;
- (void)setSquishedInset:(double)arg1;
- (void)setSquishedTitleContainer:(id)arg1;
- (void)setStartIndexOfTitleInTextWhenExpanded:(unsigned long long)arg1;
- (void)setStopReloadButtonShowsStop:(bool)arg1;
- (void)setTextWhenExpanded:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleTextStyle:(id)arg1;
- (void)setTitleWhenActive:(id)arg1;
- (void)setUnread:(bool)arg1;
- (id)shareParticipants;
- (void)showReaderAvailabilityOverlay;
- (void)showTranslationAvailabilityOverlay;
- (bool)showsBadgeOnExtensionsButton;
- (bool)showsCloseButton;
- (bool)showsLockIcon;
- (bool)showsPersistentStopReloadButton;
- (bool)showsPinnedIndicator;
- (bool)showsSearchField;
- (bool)showsSearchIcon;
- (bool)showsSecurityAnnotation;
- (bool)showsSiriReaderPlayingIcon;
- (bool)showsSquishedAccessoryViews;
- (bool)showsStopReloadButton;
- (bool)showsTranslationIcon;
- (bool)showsVoiceSearchButton;
- (id)squishedTitleContainer;
- (unsigned long long)startIndexOfTitleInTextWhenExpanded;
- (bool)stopReloadButtonShowsStop;
- (id)test_reloadButtonExpirationTimer;
- (id)textWhenExpanded;
- (void)tintColorDidChange;
- (id)title;
- (id)titleTextStyle;
- (id)titleWhenActive;
- (void)updateAccessibilityIdentifier;
- (void)updateCornerRadius;

@end
