
@interface SFCapsuleNavigationBar : UIControl <PKScribbleInteractionDelegate, SFCapsuleContentView, SFNavigationBarItemObserver, _SFBarRegistrationObserving, _SFFluidProgressViewDelegate, _SFNavigationBarCommon> {
    id /* block */  _buttonPointerStyleProvider;
    NSArray * _buttonSpacingGuides;
    NSMutableDictionary * _buttons;
    UIAction * _currentAction;
    <WBSUserDefaultObservation> * _debugObservation;
    bool  _deferButtonAlphaUpdatesDuringLayout;
    <_SFNavigationBarDelegateCommon> * _delegate;
    NSArray * _externalLeadingButtons;
    NSMutableSet * _hiddenLabelTypes;
    bool  _hidesTitle;
    id /* block */  _highlightObserver;
    NSArray * _iconLayoutInfos;
    NSArray * _iconTypes;
    NSIndexSet * _indexesOfIconsAfterTitle;
    bool  _isForSizing;
    bool  _isMinimized;
    bool  _isSelected;
    SFNavigationBarItem * _item;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _keyContentTransform;
    NSArray * _labelLayoutInfos;
    NSArray * _labelTypes;
    double  _lastTitleContainerWidth;
    long long  _layoutStyle;
    NSArray * _leadingButtonConstraints;
    NSArray * _leadingButtons;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _microphoneContentTransform;
    double  _minimizationPercent;
    double  _nonKeyContentAlpha;
    _SFFluidProgressView * _progressView;
    NSArray * _progressViewConstraints;
    <_SFBarRegistrationToken> * _registration;
    PKScribbleInteraction * _scribbleInteraction;
    UIView * _searchIndicatorView;
    bool  _showingTransientLabel;
    <SFCapsuleContentViewSizeUpdating> * _sizeUpdater;
    NSTimer * _subtitleTimer;
    NSArray * _textVerticalAlignmentConstraints;
    UILayoutGuide * _textVerticalAlignmentGuide;
    _SFBarTheme * _theme;
    SFUnifiedTabBarItemTitleContainerView * _titleContainer;
    NSArray * _trailingButtonConstraints;
    NSArray * _trailingButtons;
    UIView * _unclippedContainer;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } URLOutlineFrameInNavigationBarSpace;
@property (nonatomic, readonly) <_SFPopoverSourceInfo> *URLOutlinePopoverSourceInfo;
@property (nonatomic, copy) id /* block */ buttonPointerStyleProvider;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_SFNavigationBarDelegateCommon> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <_SFPopoverSourceInfo> *formatMenuButtonPopoverSourceInfo;
@property (readonly) unsigned long long hash;
@property (getter=_hidesTitle, setter=_setHidesTitle:, nonatomic) bool hidesTitle;
@property (nonatomic, copy) id /* block */ highlightObserver;
@property (getter=_iconTypes, nonatomic, readonly, copy) NSArray *iconTypes;
@property (setter=setHighlighted:, nonatomic) bool isHighlighted;
@property (nonatomic) bool isMinimized;
@property (nonatomic) bool isSelected;
@property (nonatomic, retain) SFNavigationBarItem *item;
@property (nonatomic, readonly) double keyContentBaselineBottomInset;
@property (nonatomic, readonly) double keyContentCapHeightTopInset;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } keyContentRect;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } keyContentTransform;
@property (getter=_labelTypes, nonatomic, readonly, copy) NSArray *labelTypes;
@property (nonatomic) long long layoutStyle;
@property (nonatomic, copy) NSArray *leadingButtons;
@property (nonatomic, readonly) NSNumber *microphoneContentOriginX;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } microphoneContentTransform;
@property (nonatomic) double minimizationPercent;
@property (nonatomic) double nonKeyContentAlpha;
@property (nonatomic, readonly, copy) NSArray *popoverPassthroughViews;
@property (nonatomic, readonly) PKScribbleInteraction *scribbleInteraction;
@property (nonatomic, readonly) bool showingTransientLabel;
@property (nonatomic) <SFCapsuleContentViewSizeUpdating> *sizeUpdater;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UITextField *textField;
@property (nonatomic, retain) _SFBarTheme *theme;
@property (nonatomic, copy) NSArray *trailingButtons;
@property (nonatomic) UIView *unclippedContainer;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } urlSize;

+ (bool)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })URLOutlineFrameInNavigationBarSpace;
- (id)URLOutlinePopoverSourceInfo;
- (void)_createLeadingButtonConstraints;
- (void)_createTrailingButtonConstraints;
- (bool)_hidesTitle;
- (id)_horizontalAlignmentConstraintForLabel:(id)arg1;
- (id)_iconForLabelType:(long long)arg1;
- (id)_iconTypes;
- (double)_interButtonSpacing;
- (void)_invalidateHeight;
- (bool)_isTemporaryLabel:(long long)arg1;
- (id)_labelTypes;
- (struct CGPoint { double x1; double x2; })_minimumEdgeMargin;
- (void)_scribbleInteraction:(id)arg1 didFinishWritingInElement:(id)arg2;
- (bool)_scribbleInteraction:(id)arg1 focusWillTransformElement:(id)arg2;
- (bool)_scribbleInteraction:(id)arg1 shouldBeginAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_scribbleInteraction:(id)arg1 willBeginWritingInElement:(id)arg2;
- (bool)_scribbleInteractionIsEnabled:(id)arg1;
- (void)_setHidesTitle:(bool)arg1;
- (void)_setLabelTypes:(id)arg1 iconTypes:(id)arg2 animated:(bool)arg3;
- (bool)_shouldCenterButtonsBetweenEdgeAndTitle:(id)arg1;
- (bool)_shouldCenterLabels;
- (bool)_shouldHideButtons;
- (bool)_shouldHideButtonsForMinimized:(bool)arg1;
- (bool)_showsReaderAvailabilityText;
- (bool)_showsSearchIconInTitleContainer;
- (bool)_showsTranslationAvailabilityText;
- (void)_startTemporaryLabelTimerIfNeeded;
- (void)_subtitleMarqueeStarted:(id)arg1;
- (void)_subtitleTimerFired:(id)arg1;
- (id)_textColorForLabelType:(long long)arg1;
- (id)_textForSubtitleType:(long long)arg1;
- (id)_textStyleForLabelType:(long long)arg1 withLabelTypes:(id)arg2;
- (double)_titleToButtonSpacing;
- (struct CGPoint { double x1; double x2; })_titleToEdgeMargin;
- (bool)_transitionFromButtons:(id)arg1 toButtons:(id)arg2 withConstraintsToDeactivate:(id)arg3;
- (void)_updateButtonAlphaForMinimizedPercent:(double)arg1;
- (void)_updateButtonsTransform;
- (void)_updateLabelContents;
- (void)_updateLabelContentsAtIndexes:(id)arg1 iconsAtIndexes:(id)arg2;
- (void)_updateLabelTypesAnimated:(bool)arg1;
- (void)_updatePageFormatButtonForNavigationBarItem:(id)arg1 shouldResetDiscovery:(bool)arg2;
- (void)_updatePlaceholderText;
- (void)_updateProgressViewFillColor;
- (void)_updateSecurityAnnotation;
- (void)_updateShowsPrivateAnnotation;
- (void)_updateShowsProgressView;
- (void)_updateTitleContainerAlpha;
- (void)animateLinkImage:(struct CGImage { }*)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3 toBarItem:(long long)arg4 afterImageDisappearsBlock:(id /* block */)arg5 afterDestinationLayerBouncesBlock:(id /* block */)arg6;
- (void)animateSafariIconLinkFromPoint:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (id /* block */)buttonPointerStyleProvider;
- (void)cancelTrackingWithEvent:(id)arg1;
- (id)delegate;
- (void)didCompleteBarRegistrationWithToken:(id)arg1;
- (void)fluidProgressViewDidShowProgress:(id)arg1;
- (void)fluidProgressViewWillShowProgress:(id)arg1;
- (id)formatMenuButtonPopoverSourceInfo;
- (id /* block */)highlightObserver;
- (double)horizontalPointerPaddingForButton:(id)arg1;
- (id)initForSizingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initForSizingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layoutStyle:(long long)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layoutStyle:(long long)arg2;
- (bool)isMinimized;
- (bool)isSelected;
- (id)item;
- (double)keyContentBaselineBottomInset;
- (double)keyContentCapHeightTopInset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })keyContentRect;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })keyContentTransform;
- (long long)layoutStyle;
- (void)layoutSubviews;
- (id)leadingButtons;
- (id)microphoneContentOriginX;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })microphoneContentTransform;
- (double)minimizationPercent;
- (void)navigationBarItemDidUpdateFormatButtonSelected:(id)arg1;
- (void)navigationBarItemDidUpdateMediaStateIcon:(id)arg1;
- (void)navigationBarItemDidUpdateNeedsExtensionBadge:(id)arg1;
- (void)navigationBarItemDidUpdateSecurityAnnotation:(id)arg1;
- (void)navigationBarItemDidUpdateShowsExtensionsAvailability:(id)arg1;
- (void)navigationBarItemDidUpdateShowsLockIcon:(id)arg1;
- (void)navigationBarItemDidUpdateShowsReaderButton:(id)arg1;
- (void)navigationBarItemDidUpdateShowsSearchIndicator:(id)arg1;
- (void)navigationBarItemDidUpdateShowsSiriReaderPlayingIcon:(id)arg1;
- (void)navigationBarItemDidUpdateShowsStopReloadButtons:(id)arg1;
- (void)navigationBarItemDidUpdateShowsTranslationButton:(id)arg1;
- (void)navigationBarItemDidUpdateShowsTranslationIcon:(id)arg1;
- (void)navigationBarItemDidUpdateStopReloadButtonShowsStop:(id)arg1;
- (void)navigationBarItemDidUpdateText:(id)arg1;
- (double)nonKeyContentAlpha;
- (id)popoverPassthroughViews;
- (id)popoverSourceInfoForBarItem:(long long)arg1;
- (void)prepareForReuse;
- (void)prepareForSizingNavigationBar:(id)arg1;
- (id)scribbleInteraction;
- (void)setButtonPointerStyleProvider:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHighlightObserver:(id /* block */)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setIsMinimized:(bool)arg1;
- (void)setIsSelected:(bool)arg1;
- (void)setItem:(id)arg1;
- (void)setKeyContentTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setLayoutStyle:(long long)arg1;
- (void)setLeadingButtons:(id)arg1;
- (void)setMicrophoneContentTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setMinimizationPercent:(double)arg1;
- (void)setMinimized:(bool)arg1;
- (void)setNonKeyContentAlpha:(double)arg1;
- (void)setSelected:(bool)arg1;
- (void)setSizeUpdater:(id)arg1;
- (void)setTheme:(id)arg1;
- (void)setTrailingButtons:(id)arg1;
- (void)setUnclippedContainer:(id)arg1;
- (bool)showingTransientLabel;
- (id)sizeUpdater;
- (id)textField;
- (id)theme;
- (id)trailingButtons;
- (void)traitCollectionDidChange:(id)arg1;
- (id)unclippedContainer;
- (void)updateAccessibilityIdentifier;
- (void)updateConstraints;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })urlOutlineFrameRelativeToView:(id)arg1;
- (struct CGSize { double x1; double x2; })urlSize;
- (void)willChangeToMinimized:(bool)arg1 coordinator:(id)arg2;

@end
