
@interface SFCapsuleView : UIView {
    UIView * _accessoryView;
    bool  _allowsHighlight;
    UIVisualEffectView * _background;
    double  _backgroundCornerRadius;
    double  _backgroundHeight;
    UIView * _cachedContentView;
    UIView * _contentContainer;
    double  _contentHeight;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _contentTransform;
    id /* block */  _contentViewUpdateHandler;
    unsigned long long  _directionalCollapsedContentEdge;
    bool  _forceMinimizedTheme;
    bool  _isSelected;
    long long  _layoutStyle;
    double  _minimizationPercent;
    _SFBarTheme * _minimizedTheme;
    bool  _reloadingWithCoordinator;
    NSString * _reusableContentViewIdentifier;
    SFShadowView * _shadowView;
    long long  _state;
    _SFBarTheme * _theme;
    bool  _usesPlatterEffect;
    NSTimer * _waitToHighlight;
}

@property (nonatomic, retain) UIView *accessoryView;
@property (nonatomic) bool allowsHighlight;
@property (nonatomic) double backgroundCornerRadius;
@property (nonatomic) double backgroundHeight;
@property (nonatomic, readonly) UIVisualEffectView *backgroundView;
@property (nonatomic, readonly) UIView *contentContainer;
@property (nonatomic) double contentHeight;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } contentTransform;
@property (nonatomic, retain) UIView *contentView;
@property (nonatomic, copy) id /* block */ contentViewUpdateHandler;
@property (nonatomic) unsigned long long directionalCollapsedContentEdge;
@property (nonatomic) bool forceMinimizedTheme;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameForShadowView;
@property (nonatomic, readonly) bool isMinimized;
@property (setter=setSelected:, nonatomic) bool isSelected;
@property (nonatomic) long long layoutStyle;
@property (nonatomic) double minimizationPercent;
@property (nonatomic, retain) _SFBarTheme *minimizedTheme;
@property (nonatomic, copy) NSString *reusableContentViewIdentifier;
@property (nonatomic, readonly) UIView *shadowView;
@property (nonatomic) long long state;
@property (nonatomic, retain) _SFBarTheme *theme;
@property (nonatomic) bool usesPlatterEffect;
@property (nonatomic, copy) NSString *visualEffectGroupName;

+ (id)maximumContentSizeCategory;

- (void).cxx_destruct;
- (unsigned long long)_accessoryEdge;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_backgroundFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsForContent;
- (unsigned long long)_collapsedContentInsetEdge;
- (void)_performHighlightAnimation;
- (bool)_shouldFadeNonKeyContentForContentView:(id)arg1 withPreviousContentView:(id)arg2;
- (void)_updateAccessoryTheme;
- (void)_updateContentViewState;
- (void)_updateShadowViewTransform;
- (void)_updateStateWithContentView:(id)arg1;
- (bool)_usesMinimizedTheme;
- (id)accessoryView;
- (bool)allowsHighlight;
- (void)allowsHighlight:(bool)arg1;
- (void)applyTheme;
- (double)backgroundCornerRadius;
- (double)backgroundHeight;
- (id)backgroundView;
- (id)contentContainer;
- (double)contentHeight;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })contentTransform;
- (id)contentView;
- (id /* block */)contentViewUpdateHandler;
- (unsigned long long)directionalCollapsedContentEdge;
- (bool)forceMinimizedTheme;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForShadowView;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isMinimized;
- (bool)isSelected;
- (long long)layoutStyle;
- (void)layoutSubviews;
- (double)minimizationPercent;
- (id)minimizedTheme;
- (id)reusableContentViewIdentifier;
- (void)safeAreaInsetsDidChange;
- (void)setAccessoryView:(id)arg1;
- (void)setAccessoryView:(id)arg1 coordinator:(id)arg2;
- (void)setAllowsHighlight:(bool)arg1;
- (void)setBackgroundCornerRadius:(double)arg1;
- (void)setBackgroundHeight:(double)arg1;
- (void)setContentHeight:(double)arg1;
- (void)setContentTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setContentView:(id)arg1;
- (void)setContentViewUpdateHandler:(id /* block */)arg1;
- (void)setDirectionalCollapsedContentEdge:(unsigned long long)arg1;
- (void)setForceMinimizedTheme:(bool)arg1;
- (void)setLayoutStyle:(long long)arg1;
- (void)setMinimizationPercent:(double)arg1;
- (void)setMinimizedTheme:(id)arg1;
- (void)setReusableContentViewIdentifier:(id)arg1;
- (void)setSelected:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setTheme:(id)arg1;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setUsesPlatterEffect:(bool)arg1;
- (void)setVisualEffectGroupName:(id)arg1;
- (id)shadowView;
- (long long)state;
- (id)theme;
- (bool)usesPlatterEffect;
- (id)visualEffectGroupName;
- (void)willChangeToMinimized:(bool)arg1 coordinator:(id)arg2;
- (void)willReloadWithCoordinator:(id)arg1;

@end
