
@interface NTPBTodayResultOperationInfo : PBCodable <NSCopying> {
    bool  _allowOnlyWatchEligibleSections;
    bool  _allowSectionTitles;
    NSString * _assetsDirectoryFileURLString;
    unsigned int  _dynamicThumbnailSizePresetMinimumHeightInPixels;
    unsigned int  _dynamicThumbnailSizePresetMinimumWidthInPixels;
    long long  _embedsLimit;
    bool  _fetchWidgetConfig;
    struct { 
        unsigned int embedsLimit : 1; 
        unsigned int leadingCellThumbnailSizePreset : 1; 
        unsigned int maxHeadlineScale : 1; 
        unsigned int minHeadlineScale : 1; 
        unsigned int qualityOfService : 1; 
        unsigned int scale : 1; 
        unsigned int slotsLimit : 1; 
        unsigned int sourceNameImageSizePreset : 1; 
        unsigned int thumbnailSizePreset : 1; 
        unsigned int dynamicThumbnailSizePresetMinimumHeightInPixels : 1; 
        unsigned int dynamicThumbnailSizePresetMinimumWidthInPixels : 1; 
        unsigned int widgetSize : 1; 
        unsigned int allowOnlyWatchEligibleSections : 1; 
        unsigned int allowSectionTitles : 1; 
        unsigned int fetchWidgetConfig : 1; 
        unsigned int preferCompactSectionName : 1; 
        unsigned int preferCompactSourceName : 1; 
        unsigned int respectsWidgetSlotsLimit : 1; 
        unsigned int respectsWidgetVisibleSectionsPerQueueLimit : 1; 
    }  _has;
    NSString * _keyboardInputMode;
    long long  _leadingCellThumbnailSizePreset;
    double  _maxHeadlineScale;
    double  _minHeadlineScale;
    bool  _preferCompactSectionName;
    bool  _preferCompactSourceName;
    long long  _qualityOfService;
    NTPBTodayModuleContentRequest * _request;
    bool  _respectsWidgetSlotsLimit;
    bool  _respectsWidgetVisibleSectionsPerQueueLimit;
    double  _scale;
    NTPBSectionSlotCostInfo * _sectionSlotCostInfo;
    double  _slotsLimit;
    long long  _sourceNameImageSizePreset;
    long long  _thumbnailSizePreset;
    int  _widgetSize;
}

@property (nonatomic) bool allowOnlyWatchEligibleSections;
@property (nonatomic) bool allowSectionTitles;
@property (nonatomic, retain) NSString *assetsDirectoryFileURLString;
@property (nonatomic) unsigned int dynamicThumbnailSizePresetMinimumHeightInPixels;
@property (nonatomic) unsigned int dynamicThumbnailSizePresetMinimumWidthInPixels;
@property (nonatomic) long long embedsLimit;
@property (nonatomic) bool fetchWidgetConfig;
@property (nonatomic) bool hasAllowOnlyWatchEligibleSections;
@property (nonatomic) bool hasAllowSectionTitles;
@property (nonatomic, readonly) bool hasAssetsDirectoryFileURLString;
@property (nonatomic) bool hasDynamicThumbnailSizePresetMinimumHeightInPixels;
@property (nonatomic) bool hasDynamicThumbnailSizePresetMinimumWidthInPixels;
@property (nonatomic) bool hasEmbedsLimit;
@property (nonatomic) bool hasFetchWidgetConfig;
@property (nonatomic, readonly) bool hasKeyboardInputMode;
@property (nonatomic) bool hasLeadingCellThumbnailSizePreset;
@property (nonatomic) bool hasMaxHeadlineScale;
@property (nonatomic) bool hasMinHeadlineScale;
@property (nonatomic) bool hasPreferCompactSectionName;
@property (nonatomic) bool hasPreferCompactSourceName;
@property (nonatomic) bool hasQualityOfService;
@property (nonatomic, readonly) bool hasRequest;
@property (nonatomic) bool hasRespectsWidgetSlotsLimit;
@property (nonatomic) bool hasRespectsWidgetVisibleSectionsPerQueueLimit;
@property (nonatomic) bool hasScale;
@property (nonatomic, readonly) bool hasSectionSlotCostInfo;
@property (nonatomic) bool hasSlotsLimit;
@property (nonatomic) bool hasSourceNameImageSizePreset;
@property (nonatomic) bool hasThumbnailSizePreset;
@property (nonatomic) bool hasWidgetSize;
@property (nonatomic, retain) NSString *keyboardInputMode;
@property (nonatomic) long long leadingCellThumbnailSizePreset;
@property (nonatomic) double maxHeadlineScale;
@property (nonatomic) double minHeadlineScale;
@property (nonatomic) bool preferCompactSectionName;
@property (nonatomic) bool preferCompactSourceName;
@property (nonatomic) long long qualityOfService;
@property (nonatomic, retain) NTPBTodayModuleContentRequest *request;
@property (nonatomic) bool respectsWidgetSlotsLimit;
@property (nonatomic) bool respectsWidgetVisibleSectionsPerQueueLimit;
@property (nonatomic) double scale;
@property (nonatomic, retain) NTPBSectionSlotCostInfo *sectionSlotCostInfo;
@property (nonatomic) double slotsLimit;
@property (nonatomic) long long sourceNameImageSizePreset;
@property (nonatomic) long long thumbnailSizePreset;
@property (nonatomic) int widgetSize;

// Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport

- (void).cxx_destruct;
- (bool)allowOnlyWatchEligibleSections;
- (bool)allowSectionTitles;
- (id)assetsDirectoryFileURLString;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned int)dynamicThumbnailSizePresetMinimumHeightInPixels;
- (unsigned int)dynamicThumbnailSizePresetMinimumWidthInPixels;
- (long long)embedsLimit;
- (bool)fetchWidgetConfig;
- (bool)hasAllowOnlyWatchEligibleSections;
- (bool)hasAllowSectionTitles;
- (bool)hasAssetsDirectoryFileURLString;
- (bool)hasDynamicThumbnailSizePresetMinimumHeightInPixels;
- (bool)hasDynamicThumbnailSizePresetMinimumWidthInPixels;
- (bool)hasEmbedsLimit;
- (bool)hasFetchWidgetConfig;
- (bool)hasKeyboardInputMode;
- (bool)hasLeadingCellThumbnailSizePreset;
- (bool)hasMaxHeadlineScale;
- (bool)hasMinHeadlineScale;
- (bool)hasPreferCompactSectionName;
- (bool)hasPreferCompactSourceName;
- (bool)hasQualityOfService;
- (bool)hasRequest;
- (bool)hasRespectsWidgetSlotsLimit;
- (bool)hasRespectsWidgetVisibleSectionsPerQueueLimit;
- (bool)hasScale;
- (bool)hasSectionSlotCostInfo;
- (bool)hasSlotsLimit;
- (bool)hasSourceNameImageSizePreset;
- (bool)hasThumbnailSizePreset;
- (bool)hasWidgetSize;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (id)keyboardInputMode;
- (long long)leadingCellThumbnailSizePreset;
- (double)maxHeadlineScale;
- (void)mergeFrom:(id)arg1;
- (double)minHeadlineScale;
- (bool)preferCompactSectionName;
- (bool)preferCompactSourceName;
- (long long)qualityOfService;
- (bool)readFrom:(id)arg1;
- (id)request;
- (bool)respectsWidgetSlotsLimit;
- (bool)respectsWidgetVisibleSectionsPerQueueLimit;
- (double)scale;
- (id)sectionSlotCostInfo;
- (void)setAllowOnlyWatchEligibleSections:(bool)arg1;
- (void)setAllowSectionTitles:(bool)arg1;
- (void)setAssetsDirectoryFileURLString:(id)arg1;
- (void)setDynamicThumbnailSizePresetMinimumHeightInPixels:(unsigned int)arg1;
- (void)setDynamicThumbnailSizePresetMinimumWidthInPixels:(unsigned int)arg1;
- (void)setEmbedsLimit:(long long)arg1;
- (void)setFetchWidgetConfig:(bool)arg1;
- (void)setHasAllowOnlyWatchEligibleSections:(bool)arg1;
- (void)setHasAllowSectionTitles:(bool)arg1;
- (void)setHasDynamicThumbnailSizePresetMinimumHeightInPixels:(bool)arg1;
- (void)setHasDynamicThumbnailSizePresetMinimumWidthInPixels:(bool)arg1;
- (void)setHasEmbedsLimit:(bool)arg1;
- (void)setHasFetchWidgetConfig:(bool)arg1;
- (void)setHasLeadingCellThumbnailSizePreset:(bool)arg1;
- (void)setHasMaxHeadlineScale:(bool)arg1;
- (void)setHasMinHeadlineScale:(bool)arg1;
- (void)setHasPreferCompactSectionName:(bool)arg1;
- (void)setHasPreferCompactSourceName:(bool)arg1;
- (void)setHasQualityOfService:(bool)arg1;
- (void)setHasRespectsWidgetSlotsLimit:(bool)arg1;
- (void)setHasRespectsWidgetVisibleSectionsPerQueueLimit:(bool)arg1;
- (void)setHasScale:(bool)arg1;
- (void)setHasSlotsLimit:(bool)arg1;
- (void)setHasSourceNameImageSizePreset:(bool)arg1;
- (void)setHasThumbnailSizePreset:(bool)arg1;
- (void)setHasWidgetSize:(bool)arg1;
- (void)setKeyboardInputMode:(id)arg1;
- (void)setLeadingCellThumbnailSizePreset:(long long)arg1;
- (void)setMaxHeadlineScale:(double)arg1;
- (void)setMinHeadlineScale:(double)arg1;
- (void)setPreferCompactSectionName:(bool)arg1;
- (void)setPreferCompactSourceName:(bool)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setRequest:(id)arg1;
- (void)setRespectsWidgetSlotsLimit:(bool)arg1;
- (void)setRespectsWidgetVisibleSectionsPerQueueLimit:(bool)arg1;
- (void)setScale:(double)arg1;
- (void)setSectionSlotCostInfo:(id)arg1;
- (void)setSlotsLimit:(double)arg1;
- (void)setSourceNameImageSizePreset:(long long)arg1;
- (void)setThumbnailSizePreset:(long long)arg1;
- (void)setWidgetSize:(int)arg1;
- (double)slotsLimit;
- (long long)sourceNameImageSizePreset;
- (long long)thumbnailSizePreset;
- (int)widgetSize;
- (void)writeTo:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NewsToday.framework/NewsToday

- (id)assetsDirectoryFileURL;
- (struct CGSize { double x1; double x2; })dynamicThumbnailSizeMinimumSizeInPixels;
- (void)setAssetsDirectoryFileURL:(id)arg1;
- (void)setDynamicThumbnailSizeMinimumSizeInPixels:(struct CGSize { double x1; double x2; })arg1;

@end
