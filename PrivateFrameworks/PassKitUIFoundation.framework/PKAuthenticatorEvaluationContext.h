
@interface PKAuthenticatorEvaluationContext : NSObject <LAUIDelegate> {
    LAContext * _LAContext;
    NSMutableArray * _accessHandlers;
    bool  _acquireSecondaryUserIntent;
    bool  _acquireUserIntent;
    unsigned long long  _activeMechanisms;
    PKAuthenticator * _authenticator;
    bool  _automaticallyPresentPasscodeOnce;
    PKBannerHandle * _banner;
    long long  _coachingState;
    long long  _coachingStatus;
    unsigned long long  _completedMechanisms;
    id /* block */  _completionHandler;
    <PKAuthenticatorDelegate> * _delegate;
    struct { 
        unsigned int didTransitionToEvaluationStateWithEvent : 1; 
        unsigned int didTransitionToCoachingState : 1; 
    }  _delegateResponderCache;
    unsigned long long  _evaluationFlags;
    long long  _evaluationState;
    unsigned long long  _externalContextInvalidationPolicy;
    unsigned long long  _externalContextOptions;
    bool  _forceApplePayCheck;
    bool  _forceSkipUserIntent;
    bool  _invalidated;
    long long  _lastAnnotation;
    NSObject<OS_dispatch_source> * _liftFingerTimeout;
    NSObject<OS_dispatch_source> * _matchingDelayTimeout;
    NSDictionary * _passcodePresentationParameters;
    bool  _passcodePresentationRequested;
    long long  _policy;
    bool  _policySupported;
    unsigned long long  _presentationFlags;
    PKAuthenticatorEvaluationRequest * _request;
    bool  _supported;
    double  _touchIDBeginTime;
    bool  _usingExternalContext;
}

@property (nonatomic, readonly) bool biometricMatch;
@property (nonatomic, readonly) long long coachingState;
@property (nonatomic) <PKAuthenticatorDelegate> *delegate;
@property (nonatomic, readonly) long long evaluationState;
@property (nonatomic, readonly) bool fingerPresent;
@property (nonatomic, readonly) bool forceApplePayCheck;
@property (nonatomic, readonly) bool forceSkipUserIntent;
@property (getter=isInvalidated, nonatomic, readonly) bool invalidated;
@property (nonatomic, readonly) bool passcodeActive;
@property (nonatomic, readonly) bool passphraseActive;
@property (nonatomic, readonly) long long policy;
@property (getter=isPolicySupported, nonatomic, readonly) bool policySupported;
@property (nonatomic, readonly) unsigned long long presentationFlags;
@property (nonatomic, readonly) PKAuthenticatorEvaluationRequest *request;
@property (getter=isSupported, nonatomic, readonly) bool supported;

- (void).cxx_destruct;
- (void)_clearFingerOnTimer;
- (void)_clearLiftFingerTimer;
- (void)_createContextWithExternalizedContext:(id)arg1;
- (bool)_delegateSupportsPasscodeDismissal;
- (bool)_delegateSupportsPasscodePresentation;
- (bool)_delegateSupportsPassphraseDismissal;
- (bool)_delegateSupportsPassphrasePresentation;
- (void)_dismissAuthenticatorViewOfType:(long long)arg1;
- (void)_handleLiftFinger;
- (void)_presentAuthenticatorViewOfType:(long long)arg1 withParams:(id)arg2;
- (bool)_presentPasscodeIfNecessary;
- (void)_requestRemoteAuthenticatorViewControllerOfType:(long long)arg1 withClassName:(id)arg2 bundleIdentifier:(id)arg3 completion:(id /* block */)arg4;
- (void)_setCoachingState:(long long)arg1;
- (void)_setEvaluationStateWithEvent:(struct { long long x1; long long x2; })arg1;
- (void)_setFingerOnTimer;
- (void)_setLiftFingerTimer;
- (void)_updateActiveState:(bool)arg1 forEvent:(long long)arg2 withParameters:(id)arg3;
- (void)_updateCoachingState;
- (void)_updateEvaluationState;
- (void)accessLAContext:(id /* block */)arg1;
- (bool)biometricMatch;
- (long long)coachingState;
- (void)dealloc;
- (id)delegate;
- (void)evaluateWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (long long)evaluationState;
- (void)event:(long long)arg1 params:(id)arg2 reply:(id /* block */)arg3;
- (void)fallbackToPasscode;
- (bool)fingerPresent;
- (bool)forceApplePayCheck;
- (bool)forceSkipUserIntent;
- (void)handlePasscodeEventWithParameters:(id)arg1;
- (void)handlePearlEventWithParameters:(id)arg1;
- (void)handlePushButtonEventWithParameters:(id)arg1;
- (void)handlePushButtonSecondaryEventWithParameters:(id)arg1;
- (void)handleTouchIDEventWithParameters:(id)arg1;
- (id /* block */)hoistCompletionHandler;
- (id)init;
- (id)initWithRequest:(id)arg1 completionHandler:(id /* block */)arg2 forAuthenticator:(id)arg3;
- (void)invalidate;
- (void)invalidateWithIntent:(long long)arg1;
- (bool)isInvalidated;
- (bool)isPolicySupported;
- (bool)isSupported;
- (bool)passcodeActive;
- (bool)passphraseActive;
- (long long)policy;
- (unsigned long long)presentationFlags;
- (id)request;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 resetPriorDelegate:(bool)arg2;
- (bool)updateCompletedMechanismsForPushButtonEventParams:(id)arg1;

@end
