
@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate, NSSecureCoding, _MSVAccountInformationProviding> {
    ML3AccountCacheDatabase * _accountCacheDatabase;
    NSString * _accountDSID;
    ML3DatabaseConnectionPool * _connectionPool;
    NSString * _databasePath;
    <ML3MusicLibraryDelegate> * _delegate;
    bool  _isHomeSharingLibrary;
    bool  _isHomeSharingLibraryLoaded;
    bool  _isUnitTesting;
    NSArray * _libraryContainerFilterPredicates;
    NSArray * _libraryEntityFilterPredicates;
    NSArray * _libraryPublicContainerFilterPredicates;
    NSArray * _libraryPublicEntityFilterPredicates;
    NSString * _libraryUID;
    NSLock * _libraryUIDLock;
    ML3LibraryNotificationManager * _notificationManager;
    NSMapTable * _optimizedLibraryContainerFilterPredicatesByContainerClass;
    NSMapTable * _optimizedLibraryEntityFilterPredicatesByEntityClass;
    NSMapTable * _optimizedLibraryPublicContainerFilterPredicatesByContainerClass;
    NSMapTable * _optimizedLibraryPublicEntityFilterPredicatesByEntityClass;
    ML3DatabasePrivacyContext * _privacyContext;
    bool  _readOnly;
    ML3MusicLibraryResourcesManager * _resourcesManager;
    NSObject<OS_dispatch_queue> * _serialQueue;
    struct iPhoneSortKeyBuilder { } * _sortKeyBuilder;
    NSString * _syncLibraryUID;
    bool  _usingSharedLibraryPath;
}

@property (nonatomic, readonly, copy) NSString *accountDSID;
@property (nonatomic, readonly, copy) NSString *artworkDirectory;
@property (nonatomic, readonly) long long autoFilledTracksTotalSize;
@property (nonatomic, readonly) ML3DatabaseConnectionPool *connectionPool;
@property (nonatomic, readonly) long long currentContentRevision;
@property (nonatomic, readonly) ML3Container *currentDevicePhotosMemoriesPlaylist;
@property (nonatomic, readonly) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property (nonatomic, readonly) ML3Container *currentDevicePurchasesPlaylist;
@property (nonatomic, readonly) long long currentRevision;
@property (nonatomic, readonly) ML3DatabaseMetadata *databaseInfo;
@property (nonatomic, readonly) NSString *databasePath;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ML3MusicLibraryDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool downloadOnAddToLibrary;
@property (nonatomic, readonly) bool hasAddedToLibraryAppleMusicContent;
@property (nonatomic, readonly) bool hasUserPlaylists;
@property (nonatomic, readonly) bool hasUserPlaylistsContainingAppleMusicContent;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isHomeSharingLibrary;
@property (nonatomic) bool isUnitTesting;
@property (nonatomic, copy) NSNumber *jaliscoAccountID;
@property (nonatomic) bool jaliscoHasCloudGeniusData;
@property (nonatomic) bool jaliscoIsMusicGeniusUserEnabled;
@property (nonatomic, readonly) NSArray *jaliscoLastExcludedMediaKinds;
@property (nonatomic, copy) NSDate *jaliscoLastGeniusUpdateDate;
@property (nonatomic, copy) NSDate *jaliscoLastLibraryUpdateTime;
@property (nonatomic, copy) NSString *jaliscoLastSupportedMediaKinds;
@property (nonatomic) bool jaliscoNeedsUpdateForTokens;
@property (nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property (nonatomic, retain) NSArray *libraryContainerFilterPredicates;
@property (getter=isLibraryEmpty, nonatomic, readonly) bool libraryEmpty;
@property (nonatomic, retain) NSArray *libraryEntityFilterPredicates;
@property (nonatomic, retain) NSArray *libraryPublicContainerFilterPredicates;
@property (nonatomic, retain) NSArray *libraryPublicEntityFilterPredicates;
@property (nonatomic, readonly) NSString *libraryUID;
@property (nonatomic, readonly) NSArray *localizedSectionIndexTitles;
@property (nonatomic, readonly) bool mediaRestrictionEnabled;
@property (nonatomic, retain) ML3LibraryNotificationManager *notificationManager;
@property (nonatomic, readonly, copy) NSString *originalArtworkDirectory;
@property (nonatomic, readonly) NSArray *preferredAudioTracks;
@property (nonatomic, readonly) NSArray *preferredSubtitleTracks;
@property (nonatomic) long long preferredVideoQuality;
@property (nonatomic, readonly) ML3DatabasePrivacyContext *privacyContext;
@property (getter=isReadOnly, nonatomic) bool readOnly;
@property (nonatomic, readonly) ML3MusicLibraryResourcesManager *resourcesManager;
@property (nonatomic, readonly, copy) NSString *rootArtworkCacheDirectory;
@property (nonatomic, copy) NSNumber *sagaAccountID;
@property (nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property (nonatomic, copy) NSString *sagaCloudLibraryCUID;
@property (nonatomic, copy) NSString *sagaCloudLibraryTroveID;
@property (nonatomic) long long sagaDatabaseUserVersion;
@property (nonatomic, copy) NSDate *sagaLastGeniusUpdateDate;
@property (nonatomic, copy) NSDate *sagaLastItemPlayDataUploadDate;
@property (nonatomic, copy) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property (nonatomic, copy) NSDate *sagaLastLibraryUpdateTime;
@property (nonatomic, copy) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property (nonatomic, copy) NSDate *sagaLastSubscribedContainersUpdateTime;
@property (nonatomic) bool sagaNeedsFullUpdateAfterNextUpdate;
@property (nonatomic) long long sagaOnDiskDatabaseRevision;
@property (nonatomic) bool sagaPrefersToMergeWithCloudLibrary;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (nonatomic, readonly) struct iPhoneSortKeyBuilder { }*sortKeyBuilder;
@property (nonatomic, copy) NSString *storefrontIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsUbiquitousPlaybackPositions;
@property (nonatomic) long long syncGenerationID;
@property (nonatomic) NSString *syncLibraryID;
@property (getter=isUsingSharedLibraryPath, nonatomic) bool usingSharedLibraryPath;

// Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary

+ (id)_onGlobalQueue_shareableMusicLibraryWithResourcesManager:(id)arg1;
+ (id)allLibraries;
+ (id)allLibraryContainerPaths;
+ (id)allPragmaSQL;
+ (id)allSchemaSQL;
+ (id)allTables;
+ (id)allTriggersSQL;
+ (id)artworkRelativePathFromToken:(id)arg1;
+ (long long)artworkSourceTypeForTrackSource:(int)arg1;
+ (id)artworkTokenForArtistHeroURL:(id)arg1;
+ (id)artworkTokenForChapterWithItemPID:(long long)arg1 retrievalTime:(double)arg2;
+ (id)assistantSyncDataChangedNotificationName;
+ (bool)autoFilledTracksArePurgeable;
+ (id)autoupdatingSharedLibrary;
+ (id)autoupdatingSharedLibraryPath;
+ (void)clearCloudAssetSharedCache;
+ (id)cloudAssetsSharedCacheFolderPath;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
+ (long long)devicePreferredImageFormat;
+ (bool)deviceSupportsASTC;
+ (bool)deviceSupportsMultipleLibraries;
+ (void)disableAutomaticDatabaseValidation;
+ (void)disableSharedLibrary;
+ (id)distributedToLocalNotificationMapping;
+ (bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (void)enableAutomaticDatabaseValidation;
+ (void)enumerateSortMapTablesUsingBlock:(id /* block */)arg1;
+ (id)globalSerialQueue;
+ (id)indexSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (id)itemNewSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)jaliscoGetSortedMediaKinds:(id)arg1;
+ (id)libraryContainerPath;
+ (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
+ (id)libraryContainerRelativePath:(id)arg1;
+ (id)libraryPathForContainerPath:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)mediaFolderPath;
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
+ (long long)minimumPurgeableStorage;
+ (id)musicLibraryForUserAccount:(id)arg1;
+ (id)musicLibraryPerUserDSID;
+ (bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (id)pathForBaseLocationPath:(long long)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(bool)arg3 createParentFolderIfNecessary:(bool)arg4;
+ (id)registeredLibraries;
+ (void)removeOrphanedTracks;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitles;
+ (void)setAutoFilledTracksArePurgeable:(bool)arg1;
+ (void)setAutoupdatingSharedLibraryPath:(id)arg1;
+ (void)setGlobalPrivacyContextWithAuditToken:(struct { unsigned int x1[8]; })arg1;
+ (void)setMinimumPurgeableStorage:(long long)arg1;
+ (void)setSharedLibraryDatabasePath:(id)arg1;
+ (void)setShouldOptimizeStorage:(bool)arg1;
+ (id)sharedLibrary;
+ (id)sharedLibraryDatabasePath;
+ (bool)shouldOptimizeStorage;
+ (id)sortMapNewSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (bool)supportsSecureCoding;
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (bool)updateTrackIntegrityOnConnection:(id)arg1;
+ (bool)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (int)userVersionUsingConnection:(id)arg1;
+ (id)widthLimitedSetValuesQueue;

- (void).cxx_destruct;
- (id)_allArtworkVariantDirectories;
- (id)_allKeepLocalPlaylistTracks;
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(id /* block */)arg4;
- (bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;
- (long long)_clearAllCloudAssets;
- (bool)_clearAllRowsFromTables:(id)arg1;
- (long long)_clearDatabaseFileFreeSpace;
- (long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (unsigned long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(bool)arg3;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeCloudAssets:(bool)arg3 includeAutoFilledTracks:(bool)arg4;
- (void)_closeAndLockCurrentDatabaseConnections;
- (long long)_cloudAssetsTotalSize;
- (bool)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2;
- (void)_completeAccountChangeWithPath:(id)arg1;
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)arg1 toDestinationURL:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_createColorAnalysisForRelativePath:(id)arg1 artworkType:(long long)arg2 artworkToken:(id)arg3 preferredImageSize:(struct CGSize { double x1; double x2; })arg4 completionHandler:(id /* block */)arg5;
- (long long)_databaseFileFreeSpace;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;
- (bool)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(bool)arg5 usingConnection:(id)arg6;
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(bool)arg2 includeCloudAssets:(bool)arg3 usingBlock:(id /* block */)arg4;
- (id)_getPlaylistContentTasteChangesSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;
- (bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4 usingConnection:(id)arg5;
- (void)_libraryPathDidChangeNotification:(id)arg1;
- (void)_logDatabaseAccess;
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)arg1 urgency:(unsigned long long)arg2;
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (unsigned long long)_minimumPurgeableStorageForUrgency:(unsigned long long)arg1;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (id)_notInKeepLocalCollectionPredicate;
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;
- (bool)_prepareForAccountChange:(id*)arg1;
- (unsigned long long)_purgeAllArtwork;
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (unsigned long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)arg1;
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)arg1;
- (id)_purgeableNonCachedItemsPredicateSQL;
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(bool)arg2 includeCloudAssets:(bool)arg3;
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(bool)arg2;
- (bool)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1;
- (bool)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1;
- (bool)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1;
- (bool)_removeOrphanedArtworkTokensUsingConnection:(id)arg1;
- (void)_setupNotificationManager;
- (bool)_shouldProcessAccountChanges;
- (bool)_shouldPurgeAllArtworkAtUrgency:(unsigned long long)arg1;
- (bool)_shouldPurgeManagedAlbumsTracksForUrgency:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })_sizeForColorAnalysisForMediaType:(unsigned int)arg1 artworkType:(long long)arg2;
- (id)_systemUnicodeVersionData;
- (void)_tearDownNotificationManager;
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;
- (unsigned long long)_totalSizeForTracksPredicate:(id)arg1;
- (bool)_unmanagedPurgeShouldPurgeKeepLocalTracksForUrgency:(unsigned long long)arg1;
- (bool)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 preserveExistingAvailableToken:(bool)arg4 usingConnection:(id)arg5;
- (void)_updateSystemPlaylist:(id)arg1 withName:(id)arg2 usingConnection:(id)arg3;
- (bool)_validateDatabaseUsingConnection:(id)arg1 error:(id*)arg2;
- (void)accessSortKeyBuilder:(id /* block */)arg1;
- (id)accountCacheDatabase;
- (id)accountDSID;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(bool)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artworkCacheDirectoryForEffect:(id)arg1;
- (id)artworkCacheDirectoryForSize:(struct CGSize { double x1; double x2; })arg1;
- (id)artworkDirectory;
- (long long)autoFilledTracksTotalSize;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)automaticDatabaseValidationDisabled;
- (void)checkInDatabaseConnection:(id)arg1;
- (id)checkoutReaderConnection;
- (id)checkoutWriterConnection;
- (bool)cleanupArtworkWithOptions:(unsigned long long)arg1;
- (bool)cleanupArtworkWithOptions:(unsigned long long)arg1 usingConnection:(id)arg2;
- (bool)clearAllCloudKVSData;
- (bool)clearAllGeniusData;
- (long long)clearAllRemovedTracks;
- (void)clearJaliscoAccountID;
- (void)clearJaliscoLastExcludedMediaKinds;
- (void)clearJaliscoLastGeniusUpdateDate;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(bool)arg3;
- (void)clearSagaCloudAccountID;
- (void)clearSagaCloudAddToPlaylistBehavior;
- (void)clearSagaCloudLibraryCUID;
- (void)clearSagaCloudLibraryTroveID;
- (void)clearSagaLastGeniusUpdateDate;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (void)clearSagaPrefersToMergeWithCloudLibrary;
- (bool)coalesceMismatchedCollectionsUsingConnection:(id)arg1;
- (bool)coerceValidDatabaseWithError:(id*)arg1;
- (id)composerForComposerName:(id)arg1;
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(bool)arg2;
- (void)connectionDidAccessDatabase:(id)arg1;
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (id)connectionPool;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionWillOpenDatabase:(id)arg1;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;
- (bool)createIndexes;
- (long long)currentContentRevision;
- (int)currentDatabaseVersion;
- (id)currentDevicePhotosMemoriesPlaylist;
- (id)currentDevicePlaybackHistoryPlaylist;
- (id)currentDevicePurchasesPlaylist;
- (long long)currentRevision;
- (void)databaseConnectionAllowingWrites:(bool)arg1 withBlock:(id /* block */)arg2;
- (id)databaseInfo;
- (id)databasePath;
- (void)dealloc;
- (id)delegate;
- (bool)deleteArtworkToken:(id)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(bool)arg3;
- (bool)deleteDatabaseProperty:(id)arg1;
- (void)deletePresignedValidity;
- (bool)downloadOnAddToLibrary;
- (void)emergencyDisconnectWithCompletion:(id /* block */)arg1;
- (bool)emptyAllTables;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateAlbumArtistPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateAlbumPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 usingBlock:(id /* block */)arg4;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(bool)arg5 usingBlock:(id /* block */)arg6;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(id /* block */)arg4;
- (void)enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (id)genreForGenre:(id)arg1;
- (id)getAlbumArtistChanges;
- (id)getAlbumArtistChangesSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (id)getAlbumChanges;
- (id)getAlbumChangesSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(id /* block */)arg4;
- (id)groupingKeyForString:(id)arg1;
- (id)groupingKeysForStrings:(id)arg1;
- (bool)hasAddedToLibraryAppleMusicContent;
- (bool)hasOriginalArtworkForRelativePath:(id)arg1;
- (bool)hasPresignedValidity;
- (bool)hasUserPlaylists;
- (bool)hasUserPlaylistsContainingAppleMusicContent;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 usingConnection:(id)arg6;
- (bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;
- (bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;
- (bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceRebuild:(bool)arg2 forceUpdateOriginals:(bool)arg3;
- (bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(bool)arg2;
- (id)initWithClientIdentity:(id)arg1 forUserAccount:(id)arg2;
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2;
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2 readOnly:(bool)arg3 populateUnitTestTablesBlock:(id /* block */)arg4;
- (id)initWithCoder:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithPath:(id)arg1 isUnitTesting:(bool)arg2;
- (id)initWithPath:(id)arg1 readOnly:(bool)arg2 populateUnitTestTablesBlock:(id /* block */)arg3;
- (id)initWithResourcesManager:(id)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(bool*)arg2;
- (bool)isArtworkFetchableForPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;
- (bool)isArtworkTokenAvailable:(id)arg1;
- (bool)isCurrentThreadInTransaction;
- (bool)isHomeSharingLibrary;
- (bool)isLibraryEmpty;
- (bool)isReadOnly;
- (bool)isUnitTesting;
- (bool)isUsingSharedLibraryPath;
- (id)jaliscoAccountID;
- (bool)jaliscoHasCloudGeniusData;
- (bool)jaliscoIsMusicGeniusUserEnabled;
- (id)jaliscoLastExcludedMediaKinds;
- (id)jaliscoLastGeniusUpdateDate;
- (id)jaliscoLastLibraryUpdateTime;
- (id)jaliscoLastSupportedMediaKinds;
- (bool)jaliscoNeedsUpdateForTokens;
- (long long)jaliscoOnDiskDatabaseRevision;
- (id)libraryContainerFilterPredicates;
- (id)libraryContainerPath;
- (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
- (id)libraryContainerRelativePath:(id)arg1;
- (id)libraryEntityFilterPredicates;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;
- (id)libraryPublicContainerFilterPredicates;
- (id)libraryPublicEntityFilterPredicates;
- (id)libraryUID;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (id)localizedSectionIndexTitles;
- (id)mediaFolderPath;
- (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
- (id)mediaFolderRelativePath:(id)arg1;
- (bool)mediaRestrictionEnabled;
- (void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(long long)arg3;
- (void)migratePresignedValidity;
- (struct { long long x1; long long x2; })nameOrderForString:(id)arg1;
- (id)notificationManager;
- (void)notifyAssistantContentsDidChange;
- (void)notifyCloudLibraryAvailabilityDidChange;
- (void)notifyContentsDidChange;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifyEntitiesAddedOrRemoved;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyKeepLocalStateDidChange;
- (void)notifyLibraryImportDidFinish;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifySectionsDidChange;
- (id)originalArtworkDirectory;
- (id)pathForBaseLocationPath:(long long)arg1;
- (id)pathForResourceFileOrFolder:(int)arg1;
- (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(bool)arg3 createParentFolderIfNecessary:(bool)arg4;
- (void)performAsyncDatabaseWriteTransactionWithBlock:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (void)performColorAnalysisForArtworkWithConnection:(id)arg1 shouldRegenerateColorAnalysis:(bool)arg2;
- (void)performDatabasePathChange:(id)arg1 completion:(id /* block */)arg2;
- (void)performDatabaseTransactionWithBlock:(id /* block */)arg1;
- (void)performReadOnlyDatabaseTransactionWithBlock:(id /* block */)arg1;
- (bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;
- (id)preferredAudioTracks;
- (id)preferredSubtitleTracks;
- (long long)preferredVideoQuality;
- (bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id*)arg2;
- (id)privacyContext;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(bool)arg2;
- (void)reconnectToDatabase;
- (bool)removeArtworkAssetWithToken:(id)arg1;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 usingConnection:(id)arg5;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;
- (void)removeOrphanedTracksOnlyInCaches:(bool)arg1;
- (void)removePlaylistsWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(id /* block */)arg4;
- (void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)removeSource:(int)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)removeTombstonesForDeletedItems;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(id /* block */)arg4;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(id /* block */)arg3;
- (bool)repairAlbumArtistRelationshipsWithConnection:(id)arg1;
- (bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (id)resourcesManager;
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 completionHandler:(id /* block */)arg5;
- (id)rootArtworkCacheDirectory;
- (id)sagaAccountID;
- (long long)sagaCloudAddToPlaylistBehavior;
- (id)sagaCloudLibraryCUID;
- (id)sagaCloudLibraryTroveID;
- (long long)sagaDatabaseUserVersion;
- (id)sagaLastGeniusUpdateDate;
- (id)sagaLastItemPlayDataUploadDate;
- (id)sagaLastKnownActiveLockerAccountDSID;
- (id)sagaLastLibraryUpdateTime;
- (id)sagaLastPlaylistPlayDataUploadDate;
- (id)sagaLastSubscribedContainersUpdateTime;
- (bool)sagaNeedsFullUpdateAfterNextUpdate;
- (long long)sagaOnDiskDatabaseRevision;
- (bool)sagaPrefersToMergeWithCloudLibrary;
- (void)savePlaylists;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadata;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;
- (id)serialQueue;
- (void)setClientIdentity:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsHomeSharingLibrary:(bool)arg1;
- (void)setIsUnitTesting:(bool)arg1;
- (void)setJaliscoAccountID:(id)arg1;
- (void)setJaliscoHasCloudGeniusData:(bool)arg1;
- (void)setJaliscoIsMusicGeniusUserEnabled:(bool)arg1;
- (void)setJaliscoLastGeniusUpdateDate:(id)arg1;
- (void)setJaliscoLastLibraryUpdateTime:(id)arg1;
- (void)setJaliscoLastSupportedMediaKinds:(id)arg1;
- (void)setJaliscoNeedsUpdateForTokens:(bool)arg1;
- (void)setJaliscoOnDiskDatabaseRevision:(long long)arg1;
- (void)setLibraryContainerFilterPredicates:(id)arg1;
- (void)setLibraryEntityFilterPredicates:(id)arg1;
- (void)setLibraryPublicContainerFilterPredicates:(id)arg1;
- (void)setLibraryPublicEntityFilterPredicates:(id)arg1;
- (void)setLibraryUID:(id)arg1;
- (void)setNotificationManager:(id)arg1;
- (void)setPreferredVideoQuality:(long long)arg1;
- (void)setReadOnly:(bool)arg1;
- (void)setSagaAccountID:(id)arg1;
- (void)setSagaCloudAddToPlaylistBehavior:(long long)arg1;
- (void)setSagaCloudLibraryCUID:(id)arg1;
- (void)setSagaCloudLibraryTroveID:(id)arg1;
- (void)setSagaDatabaseUserVersion:(long long)arg1;
- (void)setSagaLastGeniusUpdateDate:(id)arg1;
- (void)setSagaLastItemPlayDataUploadDate:(id)arg1;
- (void)setSagaLastKnownActiveLockerAccountDSID:(id)arg1;
- (void)setSagaLastLibraryUpdateTime:(id)arg1;
- (void)setSagaLastPlaylistPlayDataUploadDate:(id)arg1;
- (void)setSagaLastSubscribedContainersUpdateTime:(id)arg1;
- (void)setSagaNeedsFullUpdateAfterNextUpdate:(bool)arg1;
- (void)setSagaOnDiskDatabaseRevision:(long long)arg1;
- (void)setSagaPrefersToMergeWithCloudLibrary:(bool)arg1;
- (void)setStorefrontIdentifier:(id)arg1;
- (void)setSyncGenerationID:(long long)arg1;
- (void)setSyncLibraryID:(id)arg1;
- (void)setUsingSharedLibraryPath:(bool)arg1;
- (bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (void)sortJaliscoLastSupportedMediaKinds;
- (struct iPhoneSortKeyBuilder { }*)sortKeyBuilder;
- (id)storefrontIdentifier;
- (bool)supportsUbiquitousPlaybackPositions;
- (long long)syncGenerationID;
- (long long)syncIdFromMultiverseId:(id)arg1;
- (id)syncLibraryID;
- (void)terminateForFailureToPerformDatabasePathChange;
- (unsigned long long)totalSizeForAllNonCacheTracks;
- (unsigned long long)totalSizeForAllNonRedownloadableTracks;
- (unsigned long long)totalSizeForAllRedownloadableNonCacheTracks;
- (unsigned long long)totalSizeForAllSyncedTracks;
- (unsigned long long)totalSizeForArtwork;
- (unsigned long long)unknownSectionIndex;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(bool)arg5 usingConnection:(id)arg6;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5;
- (void)updateJaliscoExcludedMediaKindsWith:(id)arg1 excludingMediaKindsInSet:(bool)arg2;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (bool)updateSortMap;
- (bool)updateSortMapOnConnection:(id)arg1;
- (bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(bool)arg2;
- (bool)updateSystemPlaylistNamesForCurrentLanguageUsingConnection:(id)arg1;
- (void)updateTrackIntegrity;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;
- (id)uppService;
- (bool)validateDatabase;
- (bool)validateSortMapUnicodeVersionOnConnection:(id)arg1;
- (id)valueForDatabaseProperty:(id)arg1;
- (bool)verifyPresignedValidity;

// Image: /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing

+ (void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(id /* block */)arg3;
+ (void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(id /* block */)arg3 progressHandler:(id /* block */)arg4;

- (void)_performImport:(id)arg1 progressHandler:(id /* block */)arg2 completion:(id /* block */)arg3;
- (void)checkForChangesInHomeSharingLibrary:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)executeUpdateSQL:(id)arg1;
- (void)fillContainerForHomeSharingLibrary:(id)arg1 containerID:(long long)arg2 completionHandler:(id /* block */)arg3;

@end
