
@interface TIInputManagerHandwriting : TIKeyboardInputManager <TIKeyboardActivityObserving> {
    CIMCandidateData * _candidateData;
    NSMutableDictionary * _candidateRefsDictionary;
    NSArray * _candidates;
    NSMutableArray * _committedCandidates;
    id /* block */  _contactObserver;
    id  _dictionaryUpdateObserver;
    NSArray * _facemarkCandidates;
    bool  _isInCompletionMode;
    NSArray * _proactiveTriggers;
    RecognizerProvider * _recognizerProvider;
    bool  _shouldLearnAcceptedCandidate;
    bool  _showingCompletionCandidates;
    bool  _showingFacemarks;
    id  _userDictionaryObserver;
    TIHandwritingStrokes * _userDrawing;
    TIWordSearchHandwriting * _wordSearch;
}

@property (nonatomic, readonly) CIMCandidateData *candidateData;
@property (nonatomic, retain) NSMutableDictionary *candidateRefsDictionary;
@property (nonatomic, retain) NSArray *candidates;
@property (nonatomic, retain) NSMutableArray *committedCandidates;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSArray *facemarkCandidates;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isInCompletionMode;
@property (nonatomic, retain) NSArray *proactiveTriggers;
@property (nonatomic, readonly) NSLocale *recognitionLanguage;
@property (readonly) CHRecognizer *recognizer;
@property (nonatomic, readonly) RecognizerProvider *recognizerProvider;
@property (nonatomic) bool shouldLearnAcceptedCandidate;
@property (nonatomic) bool showingFacemarks;
@property (readonly) Class superclass;
@property (nonatomic, retain) TIHandwritingStrokes *userDrawing;
@property (nonatomic, readonly) TIWordSearchHandwriting *wordSearch;

+ (Class)wordSearchClass;

- (void).cxx_destruct;
- (void)addInput:(id)arg1 withContext:(id)arg2;
- (id)addInputObject:(id)arg1;
- (unsigned long long)autoquoteType;
- (void)cancelRecognition;
- (id)candidateData;
- (id)candidateRefsDictionary;
- (id)candidateResultSet;
- (id)candidates;
- (void)clearCandidateRefsDictionary;
- (void)clearInput;
- (void)clearObservers;
- (id)committedCandidates;
- (void)dealloc;
- (id)defaultCandidate;
- (void)deleteFromInputWithContext:(id)arg1;
- (id)didAcceptCandidate:(id)arg1;
- (id)facemarkCandidates;
- (id)historyForRecognition;
- (void*)initImplementation;
- (id)initWithConfig:(id)arg1 keyboardState:(id)arg2;
- (unsigned long long)initialSelectedIndex;
- (void)inputLocationChanged;
- (bool)isDummyCandidate:(id)arg1;
- (bool)isInCompletionMode;
- (void)keyboardActivityDidTransition:(id)arg1;
- (id)keyboardCandidateResultSetFromResults;
- (id)keyboardConfigurationLayoutTag;
- (void)loadDictionaries;
- (void)mainThreadUpdateCandidates:(id)arg1;
- (id)markedTextForDefaultCandidate;
- (int)mecabraLanguage;
- (unsigned long long)predictionOptions:(bool)arg1;
- (id)proactiveTriggers;
- (id)processCandidates:(id)arg1;
- (id)recognitionLanguage;
- (int)recognitionMode;
- (id)recognizer;
- (id)recognizerProvider;
- (void)resetCompletionStates;
- (id)searchStringForMarkedText;
- (void)setCandidateRefsDictionary:(id)arg1;
- (void)setCandidates:(id)arg1;
- (void)setCommittedCandidates:(id)arg1;
- (void)setIsInCompletionMode:(bool)arg1;
- (void)setLearnsCorrection:(bool)arg1;
- (void)setProactiveTriggers:(id)arg1;
- (void)setShouldLearnAcceptedCandidate:(bool)arg1;
- (void)setShowingFacemarks:(bool)arg1;
- (void)setUserDrawing:(id)arg1;
- (bool)shouldCommitInputString;
- (bool)shouldEnableHalfWidthPunctuationForCurrentInputContext;
- (bool)shouldLearnAcceptedCandidate;
- (bool)shouldLookForCompletionCandidates;
- (bool)shouldUpdateDictionaryPaths;
- (bool)showingFacemarks;
- (bool)suppliesCompletions;
- (bool)suppressPlaceholderCandidate;
- (void)suspend;
- (void)syncMarkedTextForKeyboardState:(id)arg1 afterContextChange:(bool)arg2;
- (void)updateAddressBook;
- (bool)updateCandidates;
- (bool)updateCompletionCandidatesIfAppropriate;
- (void)updateDictionaryPaths;
- (void)updateUserWordEntries;
- (id)userDrawing;
- (bool)usesAutoDeleteWord;
- (bool)usesCandidateSelection;
- (id)wordSearch;

@end
