
@interface USOObjCGraphRedactionUtils : NSObject

+ (id)allowedHomeKitEntityTypes;
+ (id)catiNamespacesForIdentifierValues;
+ (id)commonAppBundleIds;
+ (id)contactEntities;
+ (id)firstPartyAppBundleIds;
+ (struct unique_ptr<siri::ontology::UsoEntitySpan, std::default_delete<siri::ontology::UsoEntitySpan>> { struct __compressed_pair<siri::ontology::UsoEntitySpan *, std::default_delete<siri::ontology::UsoEntitySpan>> { struct UsoEntitySpan {} *x_1_1_1; } x1; })getRedactedEntitySpan:(struct UsoEntitySpan { struct optional<std::string> { union { BOOL x_1_2_1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_7_1; unsigned long long x_1_7_2; unsigned int x_1_7_3 : 63; unsigned int x_1_7_4 : 1; } x_1_6_1; struct __short { BOOL x_2_7_1[23]; unsigned char x_2_7_2[0]; unsigned int x_2_7_3 : 7; unsigned int x_2_7_4 : 1; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_1_2_2; } x_1_1_1; bool x_1_1_2; } x1; struct optional<siri::ontology::UsoEntitySpan::SpanSource> { union { BOOL x_1_2_1; int x_1_2_2; } x_2_1_1; bool x_2_1_2; } x2; struct optional<std::string> { union { BOOL x_1_2_1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_7_1; unsigned long long x_1_7_2; unsigned int x_1_7_3 : 63; unsigned int x_1_7_4 : 1; } x_1_6_1; struct __short { BOOL x_2_7_1[23]; unsigned char x_2_7_2[0]; unsigned int x_2_7_3 : 7; unsigned int x_2_7_4 : 1; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_1_2_2; } x_3_1_1; bool x_3_1_2; } x3; })arg1 isContactRelatedEntityNode:(bool)arg2;
+ (id)getRedactedGraph:(void*)arg1;
+ (struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> { struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> { struct UsoIdentifier {} *x_1_1_1; } x1; })getRedactedIdentifier:(struct UsoIdentifier { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned int x_1_5_3 : 63; unsigned int x_1_5_4 : 1; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; unsigned char x_2_5_2[0]; unsigned int x_2_5_3 : 7; unsigned int x_2_5_4 : 1; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned int x_1_5_3 : 63; unsigned int x_1_5_4 : 1; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; unsigned char x_2_5_2[0]; unsigned int x_2_5_3 : 7; unsigned int x_2_5_4 : 1; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; })arg1 isContactRelatedEntityNode:(bool)arg2;
+ (struct unique_ptr<siri::ontology::UsoEntitySpan, std::default_delete<siri::ontology::UsoEntitySpan>> { struct __compressed_pair<siri::ontology::UsoEntitySpan *, std::default_delete<siri::ontology::UsoEntitySpan>> { struct UsoEntitySpan {} *x_1_1_1; } x1; })getRedactionEntitySpan;
+ (struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> { struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> { struct UsoIdentifier {} *x_1_1_1; } x1; })getRedactionIdentifier;
+ (bool)isAllowedCatiEntitySpan:(const void*)arg1 key:(const void*)arg2;
+ (bool)isAllowedCatiIdentifier:(const void*)arg1;
+ (bool)isContactIDNamespace:(const void*)arg1;
+ (bool)isContactIDNamespaceString:(const void*)arg1;
+ (bool)isContactRelatedEntityNode:(struct UsoGraphNode { int (**x1)(); struct UsoGraph {} *x2; unsigned long long x3; }*)arg1;
+ (bool)isHomeKitEntityTypeEntitySpan:(const void*)arg1 key:(const void*)arg2 value:(const void*)arg3;
+ (bool)isHomeKitEntityTypeIdentifier:(const void*)arg1;
+ (id)obfuscateAppBundleId:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned int x_1_4_3 : 63; unsigned int x_1_4_4 : 1; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; unsigned char x_2_4_2[0]; unsigned int x_2_4_3 : 7; unsigned int x_2_4_4 : 1; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })arg1;
+ (void)redactedGraphHelperWithRedactedGraph:(void*)arg1 redactedList:(id)arg2 visitedNodes:(id)arg3 fromNode:(struct UsoGraphNode { int (**x1)(); struct UsoGraph {} *x2; unsigned long long x3; }*)arg4 successors:(struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> { void *x1; void *x2; struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>> *, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> { void *x_3_1_1; } x3; })arg5 vocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager {} *x1; struct __shared_weak_count {} *x2; })arg6;
+ (bool)shouldRetainEntitySpanValue:(const void*)arg1 key:(const void*)arg2 entitySpan:(const void*)arg3 isContactRelatedEntityNode:(bool)arg4;
+ (bool)shouldRetainIdentifierValue:(const void*)arg1 isContactRelatedEntityNode:(bool)arg2;

@end
