
@interface DEDDevice : NSObject <DEDDeviceFBKSupport, DEDDeviceUISupport, DEDSecureArchiving, NSCopying, NSSecureCoding> {
    NSString * __hashingKey;
    NSString * _address;
    NSSet * _bugSessions;
    NSString * _build;
    NSSet * _capabilities;
    NSString * _color;
    NSString * _companionDeviceIdentifier;
    NSString * _deviceClass;
    NSString * _enclosureColor;
    NSString * _hardwareCodename;
    long long  _homeButtonType;
    NSString * _homeKitIdentifier;
    NSString * _homeTheaterSystemIdentifier;
    NSString * _homeTheaterSystemName;
    NSString * _identifier;
    NSString * _idsIdentifier;
    bool  _isHomeKitResident;
    NSString * _mediaRemoteIdentifier;
    NSString * _mediaSystemIdentifier;
    NSString * _mediaSystemName;
    long long  _mediaSystemRole;
    NSString * _model;
    NSString * _name;
    NSString * _platform;
    NSString * _productType;
    long long  _remoteTransport;
    NSString * _serialNumber;
    SFDevice * _sfDevice;
    long long  _status;
    long long  _transport;
    NSString * _uniformTypeIdentifier;
}

@property (nonatomic, retain) NSString *_hashingKey;
@property (retain) NSString *address;
@property (nonatomic, retain) NSSet *bugSessions;
@property (retain) NSString *build;
@property (retain) NSSet *capabilities;
@property (retain) NSString *color;
@property (retain) NSString *companionDeviceIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) NSString *deviceClass;
@property (retain) NSString *enclosureColor;
@property (retain) NSString *hardwareCodename;
@property (readonly) unsigned long long hash;
@property long long homeButtonType;
@property (retain) NSString *homeKitIdentifier;
@property (retain) NSString *homeTheaterSystemIdentifier;
@property (retain) NSString *homeTheaterSystemName;
@property (retain) NSString *identifier;
@property (retain) NSString *idsIdentifier;
@property bool isHomeKitResident;
@property (nonatomic, readonly) bool isRemote;
@property (retain) NSString *mediaRemoteIdentifier;
@property (retain) NSString *mediaSystemIdentifier;
@property (retain) NSString *mediaSystemName;
@property long long mediaSystemRole;
@property (retain) NSString *model;
@property (retain) NSString *name;
@property (retain) NSString *platform;
@property (retain) NSString *productType;
@property long long remoteTransport;
@property (retain) NSString *serialNumber;
@property (retain) SFDevice *sfDevice;
@property long long status;
@property (readonly) Class superclass;
@property long long transport;
@property (retain) NSString *uniformTypeIdentifier;

// Image: /System/Library/PrivateFrameworks/DiagnosticExtensionsDaemon.framework/DiagnosticExtensionsDaemon

+ (id)_currentDeviceId;
+ (id)archivedClasses;
+ (id)currentDevice;
+ (id)currentDeviceWithDaemonInfo;
+ (id)deviceForSFDevice:(id)arg1 andStatus:(long long)arg2;
+ (id)deviceForSFDevice:(id)arg1 systemInfo:(id)arg2 andStatus:(long long)arg3;
+ (id)deviceWithDictionary:(id)arg1;
+ (id)idsDeviceWithDevice:(id)arg1 address:(id)arg2;
+ (id)nilSafeDevice;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_hashingKey;
- (id)address;
- (id)bugSessions;
- (id)build;
- (id)capabilities;
- (id)color;
- (id)companionDeviceIdentifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)deviceClass;
- (id)enclosureColor;
- (void)encodeWithCoder:(id)arg1;
- (void)fetchIconImageDataForScale:(float)arg1 completionCompletion:(id /* block */)arg2;
- (id)hardwareCodename;
- (bool)hasCapabilities:(id)arg1;
- (id)hashingKey;
- (id)hashingKeyForTempDevice;
- (long long)homeButtonType;
- (id)homeKitIdentifier;
- (id)homeTheaterSystemIdentifier;
- (id)homeTheaterSystemName;
- (id)identifier;
- (id)idsIdentifier;
- (id)imageData;
- (id)imageURLForDeviceClass:(id)arg1 deviceModel:(id)arg2 deviceColor:(id)arg3 size:(long long)arg4 variant:(long long)arg5 scale:(float)arg6;
- (id)imageURLForScale:(float)arg1;
- (id)initWithCoder:(id)arg1;
- (bool)isCurrentDevice;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToDevice:(id)arg1;
- (bool)isHomeKitResident;
- (bool)isLikeDevice:(id)arg1;
- (bool)isMoreCompleteThan:(id)arg1;
- (bool)isRemote;
- (bool)isTemporaryDevice;
- (id)mediaRemoteIdentifier;
- (id)mediaSystemIdentifier;
- (id)mediaSystemName;
- (long long)mediaSystemRole;
- (id)model;
- (id)name;
- (id)platform;
- (id)productType;
- (id)publicLogDescription;
- (long long)remoteTransport;
- (id)serialNumber;
- (id)serialize;
- (void)setAddress:(id)arg1;
- (void)setBugSessions:(id)arg1;
- (void)setBuild:(id)arg1;
- (void)setCapabilities:(id)arg1;
- (void)setColor:(id)arg1;
- (void)setCompanionDeviceIdentifier:(id)arg1;
- (void)setDeviceClass:(id)arg1;
- (void)setEnclosureColor:(id)arg1;
- (void)setHardwareCodename:(id)arg1;
- (void)setHomeButtonType:(long long)arg1;
- (void)setHomeKitIdentifier:(id)arg1;
- (void)setHomeTheaterSystemIdentifier:(id)arg1;
- (void)setHomeTheaterSystemName:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIdsIdentifier:(id)arg1;
- (void)setIsHomeKitResident:(bool)arg1;
- (void)setMediaRemoteIdentifier:(id)arg1;
- (void)setMediaSystemIdentifier:(id)arg1;
- (void)setMediaSystemName:(id)arg1;
- (void)setMediaSystemRole:(long long)arg1;
- (void)setModel:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPlatform:(id)arg1;
- (void)setProductType:(id)arg1;
- (void)setRemoteTransport:(long long)arg1;
- (void)setSerialNumber:(id)arg1;
- (void)setSfDevice:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setTransport:(long long)arg1;
- (void)setUniformTypeIdentifier:(id)arg1;
- (void)set_hashingKey:(id)arg1;
- (id)sfDevice;
- (id)shortDescription;
- (long long)status;
- (long long)transport;
- (id)uniformTypeIdentifier;

// Image: /System/Library/PrivateFrameworks/FeedbackCore.framework/FeedbackCore

+ (id)FBKKnownDevices;
+ (id)deviceDefaults;
+ (id)devicesData;
+ (id)inspectFBKPairing;
+ (id)jsonWithObject:(id)arg1;

- (id)FBKKey;
- (id)addressFBKKey;
- (id)debugDetails;
- (id)deviceDefaults;
- (id)displayName;
- (id)displayType;
- (bool)isFBKPaired;
- (bool)isVisibleToDED;
- (void)pairToFBK;
- (void)removeFBKPairing;
- (void)updateStoredCopyIfNeeded;

@end
