
@interface PUBrowsingVideoPlayer : PUViewModel <ISChangeObserver, PXActivityCoordinatorItem, PXChangeObserver, PXVideoSessionDelegate> {
    bool  __isUpdatingAudioSession;
    NSMutableSet * __playerLoadingDisablingReasons;
    NSMutableSet * __playingDisablingReasons;
    unsigned long long  _activityCoordinatorQueuePosition;
    <PUDisplayAsset> * _asset;
    long long  _audioStatus;
    long long  _desiredPlayState;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _desiredSeekTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _duration;
    NSError * _error;
    bool  _isActivated;
    bool  _isMuted;
    bool  _isPlayerLoadingAllowed;
    bool  _isPlayingAllowed;
    PUMediaProvider * _mediaProvider;
    unsigned long long  _nextPlayerLoadingEnabledUpdateID;
    id /* block */  _pendingSeekCompletionHandler;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _pendingSeekTime;
    PXActivityCoordinator * _playbackCoordinator;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _playbackStartTime;
    AVPlayerItem * _playerItem;
    bool  _shouldFadeNextVolumeChange;
    bool  _shouldLoadVideoSession;
    bool  _shouldPreloadVideoContent;
    bool  _shouldRegisterForPlayback;
    bool  _shouldRequestNewRender;
    struct CGSize { 
        double width; 
        double height; 
    }  _targetSize;
    NSHashTable * _timeObservers;
    PFSlowMotionTimeRangeMapper * _timeRangeMapper;
    PXUpdater * _updater;
    NSHashTable * _videoOutputs;
    PXVideoSession * _videoSession;
    void * _videoSessionPresenter;
    float  _volume;
}

@property (setter=_setUpdatingAudioSession:, nonatomic) bool _isUpdatingAudioSession;
@property (setter=_setPlayerLoadingDisablingReasons:, nonatomic, retain) NSMutableSet *_playerLoadingDisablingReasons;
@property (setter=_setPlayingDisablingReasons:, nonatomic, retain) NSMutableSet *_playingDisablingReasons;
@property (nonatomic) unsigned long long activityCoordinatorQueuePosition;
@property (nonatomic, retain) <PUDisplayAsset> *asset;
@property (setter=_setAudioStatus:, nonatomic) long long audioStatus;
@property (nonatomic, readonly) ISWrappedAVPlayer *avPlayer;
@property (nonatomic, readonly) PUBrowsingVideoPlayerChange *currentChange;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long desiredPlayState;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } desiredSeekTime;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } duration;
@property (setter=_setError:, nonatomic, retain) NSError *error;
@property (readonly) unsigned long long hash;
@property (setter=setActivated:, nonatomic) bool isActivated;
@property (nonatomic, readonly) bool isAtBeginning;
@property (nonatomic, readonly) bool isAtEnd;
@property (setter=setMuted:, nonatomic) bool isMuted;
@property (nonatomic, readonly) bool isPlayable;
@property (nonatomic, readonly) bool isPlaybackDesired;
@property (setter=_setPlayerLoadingAllowed:, nonatomic) bool isPlayerLoadingAllowed;
@property (setter=_setPlayingAllowed:, nonatomic) bool isPlayingAllowed;
@property (nonatomic, readonly) bool isStalled;
@property (nonatomic, readonly) PUMediaProvider *mediaProvider;
@property (nonatomic) unsigned long long nextPlayerLoadingEnabledUpdateID;
@property (nonatomic, readonly) long long playState;
@property (nonatomic, readonly) PXActivityCoordinator *playbackCoordinator;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } playbackStartTime;
@property (nonatomic, readonly) AVPlayerItem *playerItem;
@property (nonatomic) bool shouldFadeNextVolumeChange;
@property (nonatomic) bool shouldLoadVideoSession;
@property (nonatomic) bool shouldPreloadVideoContent;
@property (nonatomic) bool shouldRegisterForPlayback;
@property (nonatomic) bool shouldRequestNewRender;
@property (readonly) Class superclass;
@property (setter=_setTargetSize:, nonatomic) struct CGSize { double x1; double x2; } targetSize;
@property (nonatomic, readonly) NSHashTable *timeObservers;
@property (nonatomic, readonly) PFSlowMotionTimeRangeMapper *timeRangeMapper;
@property (nonatomic, readonly) NSHashTable *videoOutputs;
@property (nonatomic, retain) PXVideoSession *videoSession;
@property (nonatomic) float volume;

- (void).cxx_destruct;
- (void)_handleShouldReloadAssetMediaNotification:(id)arg1;
- (bool)_isUpdatingAudioSession;
- (void)_performPendingSeekIfNeeded;
- (id)_playerLoadingDisablingReasons;
- (id)_playingDisablingReasons;
- (void)_requestNewRenderIfNeeded;
- (void)_setAudioStatus:(long long)arg1;
- (void)_setError:(id)arg1;
- (void)_setPlayerItem:(id)arg1 timeRangeMapper:(id)arg2;
- (void)_setPlayerLoadingAllowed:(bool)arg1;
- (void)_setPlayerLoadingDisablingReasons:(id)arg1;
- (void)_setPlayingAllowed:(bool)arg1;
- (void)_setPlayingDisablingReasons:(id)arg1;
- (void)_setTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setUpdatingAudioSession:(bool)arg1;
- (void)_setVideoSessionVolume:(id)arg1;
- (void)_updatePlayerItem;
- (void)_updatePlayerLoadingAllowedWithUpdateID:(unsigned long long)arg1;
- (void)_updatePlayerVolume;
- (void)_updateShouldRegisterForPlayback;
- (void)_updateVideoDuration;
- (void)_updateVideoSession;
- (void)_updateVideoSessionDesiredPlayState;
- (long long)_videoSessionDesiredPlayState;
- (unsigned long long)activityCoordinatorQueuePosition;
- (id)asset;
- (void)assetContentDidChange;
- (long long)audioStatus;
- (id)avPlayer;
- (id)currentChange;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (id)description;
- (long long)desiredPlayState;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })desiredSeekTime;
- (void)didPerformChanges;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })duration;
- (id)error;
- (id)init;
- (id)initWithAsset:(id)arg1 mediaProvider:(id)arg2;
- (void)invalidateExistingPlayer;
- (bool)isActivated;
- (bool)isAtBeginning;
- (bool)isAtEnd;
- (bool)isMuted;
- (bool)isPlayable;
- (bool)isPlaybackDesired;
- (bool)isPlayerLoadingAllowed;
- (bool)isPlayingAllowed;
- (bool)isStalled;
- (id)mediaProvider;
- (id)newViewModelChange;
- (unsigned long long)nextPlayerLoadingEnabledUpdateID;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (long long)playState;
- (id)playbackCoordinator;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })playbackStartTime;
- (id)playerItem;
- (void)registerChangeObserver:(id)arg1;
- (void)registerTimeObserver:(id)arg1;
- (void)registerVideoOutput:(id)arg1;
- (void)rewindExistingPlayer;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completionHandler:(id /* block */)arg2;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id /* block */)arg4;
- (void)setActivated:(bool)arg1;
- (void)setActivityCoordinatorQueuePosition:(unsigned long long)arg1;
- (void)setAsset:(id)arg1;
- (void)setDesiredPlayState:(long long)arg1;
- (void)setDesiredSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDesiredTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMuted:(bool)arg1;
- (void)setNextPlayerLoadingEnabledUpdateID:(unsigned long long)arg1;
- (void)setPlaybackStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPlayerLoadingDisabled:(bool)arg1 forReason:(id)arg2;
- (void)setPlayingDisabled:(bool)arg1 forReason:(id)arg2;
- (void)setShouldFadeNextVolumeChange:(bool)arg1;
- (void)setShouldLoadVideoSession:(bool)arg1;
- (void)setShouldPreloadVideoContent:(bool)arg1;
- (void)setShouldRegisterForPlayback:(bool)arg1;
- (void)setShouldRequestNewRender:(bool)arg1;
- (void)setVideoSession:(id)arg1;
- (void)setVolume:(float)arg1;
- (bool)shouldFadeNextVolumeChange;
- (bool)shouldLoadVideoSession;
- (bool)shouldPreloadVideoContent;
- (bool)shouldRegisterForPlayback;
- (bool)shouldRequestNewRender;
- (struct CGSize { double x1; double x2; })targetSize;
- (id)timeObservers;
- (id)timeRangeMapper;
- (void)unregisterChangeObserver:(id)arg1;
- (void)unregisterTimeObserver:(id)arg1;
- (void)unregisterVideoOutput:(id)arg1;
- (id)videoOutputs;
- (id)videoSession;
- (void)videoSessionAudioSessionOutputVolumeDidChange:(id)arg1 fromVolume:(float)arg2 toVolume:(float)arg3;
- (void)videoSessionDidPlayToEnd:(id)arg1;
- (float)volume;

@end
