
@interface PUParallaxLayerStackViewModel : PXObservable <NSCopying, PUParallaxLayerStackMutableViewModel> {
    bool  _appliesDepthToAllOrientations;
    long long  _backlightLuminance;
    bool  _clockAppearsAboveForeground;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _containerFrame;
    PFParallaxLayerStack * _currentLayerStack;
    unsigned long long  _currentLayerStackPropertiesChange;
    PFPosterOrientedLayout * _currentLayout;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentNormalizedVisibleFrame;
    NSDictionary * _debugHUDRepresentation;
    double  _desiredHeadroomVisibilityAmount;
    long long  _deviceOrientation;
    bool  _didSetContainerFrame;
    double  _headroomVisibilityAmount;
    PFPosterOrientedLayout * _initialPortraitLayout;
    PFParallaxLayerStack * _landscapeLayerStack;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _landscapeVisibleFrame;
    PFWallpaperCompoundDeviceConfiguration * _layoutConfiguration;
    long long  _layoutOrder;
    bool  _needsToAdjustVisibleFrame;
    long long  _orientation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _parallaxVector;
    PFParallaxLayerStack * _portraitLayerStack;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _portraitVisibleFrame;
    <PISegmentationItem> * _segmentationItem;
    bool  _shouldLoopSettlingEffectForGallery;
    bool  _showsDebugHUD;
    PIParallaxStyle * _style;
    unsigned long long  _stylePropertiesChange;
    PXUpdater * _updater;
    PUParallaxLayerStackViewManager * _viewManager;
    double  _visibilityAmount;
    bool  _visibleFrameCrossesHeadroomBoundary;
}

@property (nonatomic, readonly) bool appliesDepthToAllOrientations;
@property (nonatomic, readonly) long long backlightLuminance;
@property (nonatomic, readonly) bool canApplyParallax;
@property (nonatomic, readonly) bool canCreateSettlingEffectLayerView;
@property (nonatomic, readonly) bool canEnableDepthEffect;
@property (nonatomic, readonly) bool canEnableSettlingEffect;
@property (nonatomic) bool clockAppearsAboveForeground;
@property (nonatomic, readonly) unsigned long long clockIntersection;
@property (nonatomic, retain) NSString *clockLayerOrder;
@property (nonatomic, readonly) PFWallpaperCompoundLayerStack *compoundLayerStack;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } containerFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (nonatomic, readonly) PFParallaxLayerStack *currentLayerStack;
@property (nonatomic) unsigned long long currentLayerStackPropertiesChange;
@property (nonatomic, readonly) PFPosterOrientedLayout *currentLayout;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentNormalizedVisibleFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSDictionary *debugHUDRepresentation;
@property (nonatomic, readonly) bool depthEnabled;
@property (readonly, copy) NSString *description;
@property (nonatomic) double desiredHeadroomVisibilityAmount;
@property (nonatomic, readonly) long long deviceOrientation;
@property (nonatomic) bool didSetContainerFrame;
@property (nonatomic, readonly) long long environment;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } extendedImageRect;
@property (nonatomic, readonly) bool hasEnoughRoomForParallax;
@property (nonatomic, readonly) bool hasMatte;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double headroomVisibilityAmount;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } imageSize;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inactiveFrame;
@property (nonatomic, retain) PFPosterOrientedLayout *initialPortraitLayout;
@property (nonatomic, retain) PFParallaxLayerStack *landscapeLayerStack;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } landscapeVisibleFrame;
@property (nonatomic, retain) PFWallpaperCompoundDeviceConfiguration *layoutConfiguration;
@property (nonatomic, readonly) long long layoutOrder;
@property (nonatomic, readonly) bool mainLayersArePruned;
@property (nonatomic) bool needsToAdjustVisibleFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } normalizedVisibleFrame;
@property (nonatomic) long long orientation;
@property (nonatomic, readonly) bool parallaxDisabled;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } parallaxVector;
@property (nonatomic, retain) PFParallaxLayerStack *portraitLayerStack;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } portraitVisibleFrame;
@property (nonatomic, retain) <PISegmentationItem> *segmentationItem;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } settlingEffectBounds;
@property (nonatomic, readonly) bool settlingEffectEnabled;
@property (nonatomic, readonly) bool shouldLoopSettlingEffectForGallery;
@property (nonatomic, readonly) bool showsDebugHUD;
@property (nonatomic, readonly) PIParallaxStyle *style;
@property (nonatomic) unsigned long long stylePropertiesChange;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PXUpdater *updater;
@property (nonatomic, readonly) PUParallaxLayerStackViewManager *viewManager;
@property (nonatomic, readonly) double visibilityAmount;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleFrame;
@property (nonatomic) bool visibleFrameCrossesHeadroomBoundary;

+ (unsigned long long)_changeDescriptorBetweenOldStyle:(id)arg1 newStyle:(id)arg2;

- (void).cxx_destruct;
- (void)_invalidateClockAppearsAboveForeground;
- (void)_invalidateCurrentLayerStack;
- (void)_invalidateCurrentLayout;
- (void)_invalidateCurrentNormalizedVisibleRect;
- (void)_invalidateDebugHUDRepresentation;
- (void)_invalidateDesiredHeadroomVisibilityAmount;
- (void)_invalidateHeadroomVisibilityAmount;
- (void)_invalidateInitialPortraitLayout;
- (void)_invalidateLayoutConfiguration;
- (void)_invalidateOrientation;
- (void)_invalidateVisibleFrameCrossesHeadroomBoundary;
- (void)_invalidateVisibleFrameWithContainerFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_layoutRectForViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setNeedsUpdate;
- (void)_signalLayerStackPropertiesChange:(unsigned long long)arg1;
- (void)_signalStylePropertiesChange:(unsigned long long)arg1;
- (void)_updateClockAppearsAboveForeground;
- (void)_updateCurrentLayerStack;
- (void)_updateCurrentLayerStackProperties:(id /* block */)arg1 changeDescriptor:(unsigned long long)arg2;
- (void)_updateCurrentLayout;
- (void)_updateCurrentNormalizedVisibleRect;
- (void)_updateDebugHUDRepresentation;
- (void)_updateDesiredHeadroomVisibilityAmount;
- (void)_updateHeadroomVisibilityAmount;
- (void)_updateInitialPortraitLayout;
- (void)_updateLayerStackPropertiesForAllOrientations:(id /* block */)arg1 changeDescriptor:(unsigned long long)arg2;
- (void)_updateLayoutConfiguration;
- (void)_updateOrientation;
- (void)_updateVisibleFrameCrossesHeadroomBoundary;
- (void)_updateVisibleFrameWithContainerFrame;
- (void)_updateVisibleFrameWithContainerFrameSetFirstTime:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_viewRectForLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)appliesDepthToAllOrientations;
- (long long)backlightLuminance;
- (bool)canApplyParallax;
- (bool)canCreateSettlingEffectLayerView;
- (bool)canEnableDepthEffect;
- (bool)canEnableSettlingEffect;
- (bool)clockAppearsAboveForeground;
- (unsigned long long)clockIntersection;
- (id)clockLayerOrder;
- (id)compoundLayerStack;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })containerFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentLayerStack;
- (unsigned long long)currentLayerStackPropertiesChange;
- (id)currentLayout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentNormalizedVisibleFrame;
- (id)debugDescription;
- (id)debugHUDRepresentation;
- (bool)depthEnabled;
- (double)desiredHeadroomVisibilityAmount;
- (long long)deviceOrientation;
- (void)didEndChangeHandling;
- (void)didPerformChanges;
- (bool)didSetContainerFrame;
- (long long)environment;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendedImageRect;
- (bool)hasEnoughRoomForParallax;
- (bool)hasMatte;
- (double)headroomVisibilityAmount;
- (struct CGSize { double x1; double x2; })imageSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inactiveFrame;
- (id)init;
- (id)initWithCompoundLayerStack:(id)arg1 style:(id)arg2;
- (id)initWithSegmentationItem:(id)arg1 compoundLayerStack:(id)arg2 style:(id)arg3;
- (id)initWithSegmentationItem:(id)arg1 initialStyle:(id)arg2 compoundLayerStack:(id)arg3;
- (id)initialPortraitLayout;
- (id)landscapeLayerStack;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })landscapeVisibleFrame;
- (id)layoutConfiguration;
- (long long)layoutOrder;
- (bool)mainLayersArePruned;
- (bool)needsToAdjustVisibleFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedVisibleFrame;
- (long long)orientation;
- (bool)parallaxDisabled;
- (struct CGPoint { double x1; double x2; })parallaxVector;
- (void)performChanges:(id /* block */)arg1;
- (id)portraitLayerStack;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })portraitVisibleFrame;
- (void)pruneMainLayers;
- (bool)representsPureStyle;
- (id)segmentationItem;
- (void)setAppliesDepthToAllOrientations:(bool)arg1;
- (void)setBacklightLuminance:(long long)arg1;
- (void)setClockAppearsAboveForeground:(bool)arg1;
- (void)setClockAreaLuminance:(double)arg1;
- (void)setClockIntersection:(unsigned long long)arg1;
- (void)setClockLayerOrder:(id)arg1;
- (void)setContainerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentLayerStack:(id)arg1;
- (void)setCurrentLayerStackPropertiesChange:(unsigned long long)arg1;
- (void)setCurrentLayout:(id)arg1;
- (void)setCurrentNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDebugHUDRepresentation:(id)arg1;
- (void)setDepthEnabled:(bool)arg1;
- (void)setDesiredHeadroomVisibilityAmount:(double)arg1;
- (void)setDeviceOrientation:(long long)arg1;
- (void)setDidSetContainerFrame:(bool)arg1;
- (void)setHeadroomVisibilityAmount:(double)arg1;
- (void)setInitialPortraitLayout:(id)arg1;
- (void)setLandscapeLayerStack:(id)arg1;
- (void)setLandscapeVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLayoutConfiguration:(id)arg1;
- (void)setLayoutOrder:(long long)arg1;
- (void)setNeedsToAdjustVisibleFrame:(bool)arg1;
- (void)setNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)setNormalizedVisibleFrameForInactiveOrientation:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setOrientation:(long long)arg1;
- (void)setParallaxDisabled:(bool)arg1;
- (void)setParallaxVector:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPortraitLayerStack:(id)arg1;
- (void)setPortraitVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSegmentationItem:(id)arg1;
- (void)setSettlingEffectEnabled:(bool)arg1;
- (void)setShouldLoopSettlingEffectForGallery:(bool)arg1;
- (void)setShowsDebugHUD:(bool)arg1;
- (void)setStyle:(id)arg1;
- (void)setStylePropertiesChange:(unsigned long long)arg1;
- (void)setVisibilityAmount:(double)arg1;
- (void)setVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisibleFrameCrossesHeadroomBoundary:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })settlingEffectBounds;
- (bool)settlingEffectEnabled;
- (bool)shouldLoopSettlingEffectForGallery;
- (bool)showsDebugHUD;
- (id)style;
- (unsigned long long)stylePropertiesChange;
- (void)updateBackfillLayersFromLayerStack:(id)arg1;
- (void)updateHeadroomLayerFromLayerStack:(id)arg1;
- (void)updateLayerStack:(id)arg1;
- (void)updateSettlingEffectWithSegmentationItem:(id)arg1 layerStack:(id)arg2;
- (id)updater;
- (id)viewManager;
- (double)visibilityAmount;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleFrame;
- (bool)visibleFrameCrossesHeadroomBoundary;

@end
