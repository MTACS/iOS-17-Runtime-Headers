
@interface PUCropToolController : PUPhotoEditToolController <PUAdjustmentViewControllerDelegate, PUCropAspectViewControllerDelegate, PUCropPerspectiveAdjustmentsDataSourceDelegate, PUCropTransformedImageViewDelegate, PUVideoScrubberViewDelegate, UIGestureRecognizerDelegate, UIPopoverPresentationControllerDelegate> {
    UILongPressGestureRecognizer * _accessibilityLongPressGestureRecognizer;
    bool  _activeTool;
    UIView * _adjustmentPickerView;
    PUAdjustmentsViewController * _adjustmentsViewController;
    NSMutableDictionary * _animationTargetsByKeyPath;
    NSMutableDictionary * _animationsByKeyPath;
    PUPhotoEditToolbarButton * _aspectButton;
    UIButton * _aspectRatioLockButton;
    PUPhotoEditToolActivationButton * _autoButton;
    long long  _autoButtonMode;
    NSTimer * _badgeShowingExpirationTimer;
    CEKBadgeTextView * _badgeView;
    UIView * _containerView;
    bool  _contentViewsHidden;
    unsigned long long  _contentViewsHiddenAnimationCount;
    PUCropAspect * _cropAspect;
    PUCropAspectFlipperView * _cropAspectFlipperView;
    PUCropAspectViewController * _cropAspectViewController;
    UIView * _cropCanvasView;
    NSDictionary * _cropHandleViewsByHandle;
    NUCropModel * _cropModel;
    PUCropOverlayView * _cropOverlayView;
    PUCropPerspectiveView * _cropView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropViewFrameForLastModelLoad;
    PUCropPerspectiveAdjustmentsDataSource * _dataSource;
    bool  _editValuesCalculatorDidFinishComputingGeometricValues;
    PUPhotoEditToolbarButton * _flipButton;
    struct CGImage { } * _gainMapImage;
    float  _gainMapValue;
    PLImageGeometry * _geometry;
    bool  _gridVisible;
    bool  _hasAppliedCropSuggestion;
    bool  _hasAppliedPerspectiveSuggestion;
    bool  _hasAutoAppliedCropSuggestion;
    bool  _hasAutoAppliedPerspectiveSuggestion;
    bool  _hasRequestedCropSuggestion;
    bool  _hasRequestedPerspectiveSuggestion;
    bool  _ignoreTrackingUpdates;
    UIImage * _image;
    bool  _imageLoadingInProgress;
    NSObject<OS_dispatch_queue> * _imageLoadingQueue;
    NSMutableArray * _imageLoadingQueueCompletionBlocks;
    long long  _initialAction;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _initialHandlePanCropRect;
    bool  _initialImageLoaded;
    NSMutableDictionary * _initialLocationsInHandlesByHandle;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputExtent;
    NUComposition * _lastKnownComposition;
    bool  _loadingStateFromModel;
    bool  _mediaViewLoadingInProgress;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumViewCropRectSizeForHandleGesture;
    bool  _modelChangeLocal;
    bool  _modelLoadingSuspended;
    bool  _needsImageLoad;
    bool  _needsMediaLoad;
    bool  _needsModelLoad;
    double  _pitchAngle;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _previewViewInsets;
    PLPhotoEditRenderer * _renderer;
    PUPhotoEditToolbarButton * _rotateButton;
    UIView * _rotateSnapshotView;
    unsigned long long  _rotatingAnimationCount;
    double  _screenScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _screenSize;
    PUCropHandleView * _selectedCropHandleView;
    double  _straightenAngle;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _suggestedCrop;
    double  _suggestedPitchAngle;
    double  _suggestedStraightenAngle;
    double  _suggestedYawAngle;
    bool  _toolBadgeDoesHide;
    NSArray * _toolKeyCommands;
    bool  _trackingAdjustmentControl;
    bool  _videoScrubberIsInteracting;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _videoScrubberSeekTime;
    PUVideoScrubberView * _videoScrubberView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewCropRect;
    bool  _wantsPreviewViewHidden;
    bool  _wasLoadingStateFromModelWhenTrackingBegan;
    double  _yawAngle;
}

@property (nonatomic, retain) UILongPressGestureRecognizer *accessibilityLongPressGestureRecognizer;
@property (getter=isActiveTool, nonatomic) bool activeTool;
@property (nonatomic, retain) UIView *adjustmentPickerView;
@property (nonatomic, retain) PUAdjustmentsViewController *adjustmentsViewController;
@property (nonatomic, retain) NSMutableDictionary *animationTargetsByKeyPath;
@property (nonatomic, retain) NSMutableDictionary *animationsByKeyPath;
@property (nonatomic, retain) PUPhotoEditToolbarButton *aspectButton;
@property (nonatomic, retain) UIButton *aspectRatioLockButton;
@property (nonatomic, retain) PUPhotoEditToolActivationButton *autoButton;
@property (nonatomic) long long autoButtonMode;
@property (nonatomic, retain) NSTimer *badgeShowingExpirationTimer;
@property (nonatomic, retain) CEKBadgeTextView *badgeView;
@property (nonatomic, retain) UIView *containerView;
@property (nonatomic) bool contentViewsHidden;
@property (nonatomic) unsigned long long contentViewsHiddenAnimationCount;
@property (nonatomic, retain) PUCropAspect *cropAspect;
@property (nonatomic, retain) PUCropAspectFlipperView *cropAspectFlipperView;
@property (nonatomic, retain) PUCropAspectViewController *cropAspectViewController;
@property (nonatomic, retain) UIView *cropCanvasView;
@property (nonatomic, retain) NSDictionary *cropHandleViewsByHandle;
@property (nonatomic, retain) NUCropModel *cropModel;
@property (nonatomic, retain) PUCropOverlayView *cropOverlayView;
@property (nonatomic, retain) PUCropPerspectiveView *cropView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropViewFrameForLastModelLoad;
@property (nonatomic, retain) PUCropPerspectiveAdjustmentsDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool editValuesCalculatorDidFinishComputingGeometricValues;
@property (nonatomic, retain) PUPhotoEditToolbarButton *flipButton;
@property (nonatomic, retain) struct CGImage { }*gainMapImage;
@property (nonatomic) float gainMapValue;
@property (nonatomic, retain) PLImageGeometry *geometry;
@property (nonatomic) bool gridVisible;
@property (nonatomic) bool hasAppliedCropSuggestion;
@property (nonatomic) bool hasAppliedPerspectiveSuggestion;
@property (nonatomic) bool hasAutoAppliedCropSuggestion;
@property (nonatomic) bool hasAutoAppliedPerspectiveSuggestion;
@property (nonatomic) bool hasRequestedCropSuggestion;
@property (nonatomic) bool hasRequestedPerspectiveSuggestion;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreTrackingUpdates;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic) bool imageLoadingInProgress;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *imageLoadingQueue;
@property (nonatomic, retain) NSMutableArray *imageLoadingQueueCompletionBlocks;
@property (nonatomic) long long initialAction;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } initialHandlePanCropRect;
@property (nonatomic) bool initialImageLoaded;
@property (nonatomic, retain) NSMutableDictionary *initialLocationsInHandlesByHandle;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputExtent;
@property (nonatomic, retain) NUComposition *lastKnownComposition;
@property (nonatomic) bool loadingStateFromModel;
@property (nonatomic) bool mediaViewLoadingInProgress;
@property (nonatomic) struct CGSize { double x1; double x2; } minimumViewCropRectSizeForHandleGesture;
@property (getter=isModelChangeLocal, nonatomic) bool modelChangeLocal;
@property (nonatomic) bool modelLoadingSuspended;
@property (nonatomic) bool needsImageLoad;
@property (nonatomic) bool needsMediaLoad;
@property (nonatomic) bool needsModelLoad;
@property (nonatomic) double pitchAngle;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } previewViewInsets;
@property (nonatomic, retain) PLPhotoEditRenderer *renderer;
@property (nonatomic, retain) PUPhotoEditToolbarButton *rotateButton;
@property (nonatomic, retain) UIView *rotateSnapshotView;
@property (nonatomic) unsigned long long rotatingAnimationCount;
@property (nonatomic) double screenScale;
@property (nonatomic) struct CGSize { double x1; double x2; } screenSize;
@property (nonatomic, retain) PUCropHandleView *selectedCropHandleView;
@property (nonatomic) double straightenAngle;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } suggestedCrop;
@property (nonatomic) double suggestedPitchAngle;
@property (nonatomic) double suggestedStraightenAngle;
@property (nonatomic) double suggestedYawAngle;
@property (readonly) Class superclass;
@property (nonatomic) bool toolBadgeDoesHide;
@property (nonatomic, readonly) PUCropToolControllerSpec *toolControllerSpec;
@property (nonatomic, readonly) NSArray *toolKeyCommands;
@property (getter=isTrackingAdjustmentControl, nonatomic) bool trackingAdjustmentControl;
@property (nonatomic) bool videoScrubberIsInteracting;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } videoScrubberSeekTime;
@property (nonatomic, retain) PUVideoScrubberView *videoScrubberView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } viewCropRect;
@property (nonatomic) bool wantsPreviewViewHidden;
@property (nonatomic) bool wasLoadingStateFromModelWhenTrackingBegan;
@property (nonatomic) double yawAngle;

- (void).cxx_destruct;
- (void)_accessibilityLongPressChanged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_addHeight:(double)arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 anchorTop:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_addWidth:(double)arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 anchorLeft:(bool)arg3;
- (id)_animateValueFromValue:(double)arg1 toValue:(double)arg2 interpolation:(id /* block */)arg3 completion:(id /* block */)arg4;
- (id)_animationForKeyPath:(id)arg1;
- (id)_animationTargetForKeyPath:(id)arg1;
- (struct CGVector { double x1; double x2; })_applyAspectOfCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toHandleMovement:(struct CGVector { double x1; double x2; })arg2;
- (void)_applyCropAndPerspectiveSuggestion;
- (void)_applyCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 straightenAngle:(double)arg2 pitchAngle:(double)arg3 yawAngle:(double)arg4 isAutoCrop:(bool)arg5;
- (void)_aspectButtonTapped:(id)arg1;
- (void)_aspectLockButtonTapped;
- (void)_autoApplyCropAndPerspectiveSuggestionIfNeeded;
- (void)_autoRecomposeCropRect;
- (void)_cancelAnimationForKeyPath:(id)arg1;
- (void)_cancelDelayedRecomposeCropRect;
- (void)_closeAspectRatioPicker;
- (struct CGVector { double x1; double x2; })_correctInputVector:(struct CGVector { double x1; double x2; })arg1 forHandle:(unsigned long long)arg2 onCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 lockDirection:(bool)arg4;
- (void)_createRendererIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_cropCanvasFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_cropRectFromPanningHandle:(unsigned long long)arg1 byAmount:(struct CGVector { double x1; double x2; })arg2;
- (void)_cropToggleTapped:(id)arg1;
- (double)_currentEDRHeadroomForScreen:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_defaultImageCropRect;
- (long long)_defaultOrientation;
- (double)_defaultPitchAngle;
- (double)_defaultStraightenAngle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_defaultViewCropRect;
- (double)_defaultYawAngle;
- (struct CGVector { double x1; double x2; })_deltaMaskForHandle:(unsigned long long)arg1;
- (void)_flipButtonTapped:(id)arg1;
- (void)_gridButtonTapped:(id)arg1;
- (void)_handleCropHandlePan:(id)arg1;
- (void)_handleDidCreateEditedImage:(id)arg1 inputExtent:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_handleRenderedVideoWithURL:(id)arg1 originalLivePhoto:(id)arg2 success:(bool)arg3 error:(id)arg4;
- (void)_handleTouchingGesture:(id)arg1;
- (bool)_hasConstraintsForKey:(id)arg1;
- (bool)_hasCropSuggestion;
- (bool)_hasPerspectiveSuggestion;
- (void)_hideGrid;
- (void)_hideGridDelayed;
- (void)_hideMaskedContent;
- (void)_hideMaskedContentDelayed;
- (void)_installRenderedImageAndDisplayIfNeeded;
- (void)_invalidateConstraintsForKey:(id)arg1;
- (void)_layoutAdjustmentTools;
- (void)_loadCropSuggestionIfNeeded;
- (void)_loadImageIfNeededWithCompletion:(id /* block */)arg1;
- (void)_loadMediaIfNeeded;
- (void)_loadPerspectiveSuggestionIfNeeded;
- (void)_loadStateFromModelAnimated:(bool)arg1;
- (double)_maximumEDRHeadroomForScreen:(id)arg1;
- (bool)_needsRecomposeCropRect;
- (void)_performGeometryChange:(id /* block */)arg1 animated:(bool)arg2;
- (void)_performInitialAction;
- (void)_performLocalCropModelChanges:(id /* block */)arg1;
- (void)_performLocalModelChanges:(id /* block */)arg1;
- (struct CGPoint { double x1; double x2; })_pointForHandle:(unsigned long long)arg1;
- (struct CGPoint { double x1; double x2; })_pointForHandle:(unsigned long long)arg1 onCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_preferredContentSizeCategoryChanged;
- (void)_recomposeCropRectAnimated:(bool)arg1;
- (void)_recomposeCropRectDelayed;
- (void)_removeSnapshotView:(id)arg1;
- (void)_resetAllValuesAnimated:(bool)arg1;
- (void)_resetAllValuesAnimated:(bool)arg1 skipLayerTransformUpdate:(bool)arg2;
- (void)_rotateButtonTapped:(id)arg1;
- (void)_rotateByApplyingOrientation:(long long)arg1;
- (void)_setAnimation:(id)arg1 forKeyPath:(id)arg2;
- (void)_setAnimationTarget:(id)arg1 forKeyPath:(id)arg2;
- (void)_setContentViewsHidden:(bool)arg1 animated:(bool)arg2;
- (void)_setContentViewsHidden:(bool)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)_setCropAspect:(id)arg1 animated:(bool)arg2;
- (void)_setPitchAngle:(double)arg1 animated:(bool)arg2;
- (void)_setStraightenAngle:(double)arg1 animated:(bool)arg2;
- (void)_setViewCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)_setYawAngle:(double)arg1 animated:(bool)arg2;
- (void)_setupCropModelFromCompositionController:(id)arg1;
- (void)_showGridAndCancelDelayedHide;
- (void)_showMaskedContentAndCancelDelayedHide;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_suggestedCropRectForImageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_toggleCropAndPerspective;
- (void)_updateAspectRatioControls;
- (void)_updateBadgeTextWithInfo:(id)arg1;
- (void)_updateCropActionButtons;
- (void)_updateCropCanvasConstraintsIfNeeded;
- (void)_updateCropToggleButton;
- (void)_updateCropToggleButtonMode;
- (void)_updateCropToggleConstraintsIfNeeded;
- (void)_updateCropViewsForInteraction;
- (void)_updatePreviewViewInsets;
- (id)accessibilityLongPressGestureRecognizer;
- (id)adjustmentPickerView;
- (void)adjustmentsDataChanged:(id)arg1;
- (id)adjustmentsRenderer:(id)arg1;
- (id)adjustmentsViewController;
- (void)adjustmentsViewControllerDidUpdateSelectedControl:(id)arg1;
- (void)adjustmentsViewControllerSliderDidEndScrubbing:(id)arg1;
- (void)adjustmentsViewControllerSliderWillBeginScrubbing:(id)arg1;
- (void)adjustmentsViewControllerToolDidEndScrubbing:(id)arg1;
- (void)adjustmentsViewControllerToolWillBeginScrubbing:(id)arg1;
- (id)animationTargetsByKeyPath;
- (id)animationsByKeyPath;
- (id)aspectButton;
- (id)aspectRatioLockButton;
- (void)aspectRatioLockChanged;
- (id)autoButton;
- (long long)autoButtonMode;
- (id)badgeShowingExpirationTimer;
- (id)badgeView;
- (void)baseMediaInvalidated;
- (void)basePhotoInvalidated;
- (bool)canBecomeActiveTool;
- (bool)canResetToDefaultValue;
- (id)centerToolbarView;
- (void)compositionControllerDidChangeForAdjustments:(id)arg1;
- (id)containerView;
- (bool)contentViewsHidden;
- (unsigned long long)contentViewsHiddenAnimationCount;
- (void)createVideoScrubber;
- (id)cropAspect;
- (void)cropAspectController:(id)arg1 cropAspectSelected:(id)arg2;
- (id)cropAspectFlipperView;
- (void)cropAspectFlipperView:(id)arg1 cropOrientationSelected:(long long)arg2;
- (id)cropAspectViewController;
- (id)cropCanvasView;
- (id)cropHandleViewsByHandle;
- (id)cropModel;
- (id)cropOverlayView;
- (void)cropTransformedImageViewDidEndTracking:(id)arg1;
- (void)cropTransformedImageViewDidTrack:(id)arg1;
- (void)cropTransformedImageViewWillBeginTracking:(id)arg1;
- (id)cropView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropViewFrameForLastModelLoad;
- (id)dataSource;
- (void)dealloc;
- (void)decreaseSliderValue:(bool)arg1;
- (void)didBecomeActiveTool;
- (void)didResignActiveTool;
- (bool)editValuesCalculatorDidFinishComputingGeometricValues;
- (void)editValuesCalculatorDidFinishComputingGeometricValues:(id)arg1;
- (void)editValuesCalculatorHasChangedGeometricValues:(id)arg1;
- (id)filter;
- (id)flipButton;
- (struct CGImage { }*)gainMapImage;
- (float)gainMapValue;
- (id)geometry;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gridVisible;
- (void)handleResigningCropTool;
- (bool)handlesMediaViewInsets;
- (bool)handlesVideoPlaying;
- (bool)hasAppliedCropSuggestion;
- (bool)hasAppliedPerspectiveSuggestion;
- (bool)hasAutoAppliedCropSuggestion;
- (bool)hasAutoAppliedPerspectiveSuggestion;
- (bool)hasRequestedCropSuggestion;
- (bool)hasRequestedPerspectiveSuggestion;
- (bool)ignoreTrackingUpdates;
- (id)image;
- (bool)imageLoadingInProgress;
- (id)imageLoadingQueue;
- (id)imageLoadingQueueCompletionBlocks;
- (void)increaseSliderValue:(bool)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (long long)initialAction;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialHandlePanCropRect;
- (bool)initialImageLoaded;
- (id)initialLocationsInHandlesByHandle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputExtent;
- (bool)installGestureRecognizer:(id)arg1 type:(unsigned long long)arg2;
- (bool)isActiveTool;
- (bool)isHDREnabled;
- (bool)isModelChangeLocal;
- (bool)isTrackingAdjustmentControl;
- (id)lastKnownComposition;
- (id)leadingToolbarViews;
- (bool)loadingStateFromModel;
- (id)localizedName;
- (id)localizedResetToolActionTitle;
- (bool)mediaViewLoadingInProgress;
- (struct CGSize { double x1; double x2; })minimumViewCropRectSizeForHandleGesture;
- (bool)modelLoadingSuspended;
- (bool)needsImageLoad;
- (bool)needsMediaLoad;
- (bool)needsModelLoad;
- (id)offlineKeyCommands;
- (double)pitchAngle;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })preferredPreviewViewInsets;
- (void)prepareForSave:(bool)arg1;
- (void)prepareForToolTransitionWithCompletion:(id /* block */)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })previewViewInsets;
- (id)renderer;
- (void)resetToDefaultValueAnimated:(bool)arg1;
- (void)resetToolLabelHidingTimer;
- (void)rotateAssetsClockwise:(id)arg1;
- (void)rotateAssetsCounterclockwise:(id)arg1;
- (id)rotateButton;
- (id)rotateSnapshotView;
- (unsigned long long)rotatingAnimationCount;
- (double)screenScale;
- (struct CGSize { double x1; double x2; })screenSize;
- (id)selectedCropHandleView;
- (id)selectedToolbarIconGlyphName;
- (void)setAccessibilityLongPressGestureRecognizer:(id)arg1;
- (void)setActiveTool:(bool)arg1;
- (void)setAdjustmentPickerView:(id)arg1;
- (void)setAdjustmentsViewController:(id)arg1;
- (void)setAnimationTargetsByKeyPath:(id)arg1;
- (void)setAnimationsByKeyPath:(id)arg1;
- (void)setAspectButton:(id)arg1;
- (void)setAspectRatioLockButton:(id)arg1;
- (void)setAspectRatioLocked:(bool)arg1;
- (void)setAutoButton:(id)arg1;
- (void)setAutoButtonMode:(long long)arg1;
- (void)setBadgeShowingExpirationTimer:(id)arg1;
- (void)setBadgeView:(id)arg1;
- (void)setContainerView:(id)arg1;
- (void)setContentViewsHidden:(bool)arg1;
- (void)setContentViewsHiddenAnimationCount:(unsigned long long)arg1;
- (void)setCropAspect:(id)arg1;
- (void)setCropAspectFlipperView:(id)arg1;
- (void)setCropAspectViewController:(id)arg1;
- (void)setCropCanvasView:(id)arg1;
- (void)setCropHandleViewsByHandle:(id)arg1;
- (void)setCropModel:(id)arg1;
- (void)setCropOverlayView:(id)arg1;
- (void)setCropView:(id)arg1;
- (void)setCropViewFrameForLastModelLoad:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditValuesCalculatorDidFinishComputingGeometricValues:(bool)arg1;
- (void)setFlipButton:(id)arg1;
- (void)setGainMapImage:(struct CGImage { }*)arg1;
- (void)setGainMapValue:(float)arg1;
- (void)setGeometry:(id)arg1;
- (void)setGridVisible:(bool)arg1;
- (void)setHasAppliedCropSuggestion:(bool)arg1;
- (void)setHasAppliedPerspectiveSuggestion:(bool)arg1;
- (void)setHasAutoAppliedCropSuggestion:(bool)arg1;
- (void)setHasAutoAppliedPerspectiveSuggestion:(bool)arg1;
- (void)setHasRequestedCropSuggestion:(bool)arg1;
- (void)setHasRequestedPerspectiveSuggestion:(bool)arg1;
- (void)setIgnoreTrackingUpdates:(bool)arg1;
- (void)setImage:(id)arg1;
- (void)setImageLoadingInProgress:(bool)arg1;
- (void)setImageLoadingQueue:(id)arg1;
- (void)setImageLoadingQueueCompletionBlocks:(id)arg1;
- (void)setInitialAction:(long long)arg1;
- (void)setInitialHandlePanCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInitialImageLoaded:(bool)arg1;
- (void)setInitialLocationsInHandlesByHandle:(id)arg1;
- (void)setInputExtent:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLastKnownComposition:(id)arg1;
- (void)setLayoutOrientation:(long long)arg1 withTransitionCoordinator:(id)arg2;
- (void)setLoadingStateFromModel:(bool)arg1;
- (bool)setLockedCropAspectIfNeededIgnoringCurrentLock:(bool)arg1;
- (void)setMediaViewLoadingInProgress:(bool)arg1;
- (void)setMinimumViewCropRectSizeForHandleGesture:(struct CGSize { double x1; double x2; })arg1;
- (void)setModelChangeLocal:(bool)arg1;
- (void)setModelLoadingSuspended:(bool)arg1;
- (void)setNeedsImageLoad:(bool)arg1;
- (void)setNeedsMediaLoad:(bool)arg1;
- (void)setNeedsModelLoad:(bool)arg1;
- (void)setPitchAngle:(double)arg1;
- (void)setPreviewViewInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setRenderer:(id)arg1;
- (void)setRotateButton:(id)arg1;
- (void)setRotateSnapshotView:(id)arg1;
- (void)setRotatingAnimationCount:(unsigned long long)arg1;
- (void)setScreenScale:(double)arg1;
- (void)setScreenSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSelectedCropHandleView:(id)arg1;
- (void)setStraightenAngle:(double)arg1;
- (void)setSuggestedCrop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSuggestedPitchAngle:(double)arg1;
- (void)setSuggestedStraightenAngle:(double)arg1;
- (void)setSuggestedYawAngle:(double)arg1;
- (void)setToolBadgeDoesHide:(bool)arg1;
- (void)setTrackingAdjustmentControl:(bool)arg1;
- (void)setVideoScrubberIsInteracting:(bool)arg1;
- (void)setVideoScrubberSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoScrubberView:(id)arg1;
- (void)setViewCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWantsPreviewViewHidden:(bool)arg1;
- (void)setWasLoadingStateFromModelWhenTrackingBegan:(bool)arg1;
- (void)setYawAngle:(double)arg1;
- (void)setupWithAsset:(id)arg1 compositionController:(id)arg2 editSource:(id)arg3 valuesCalculator:(id)arg4;
- (void)showBadgeView:(bool)arg1 animated:(bool)arg2;
- (void)showToolLabel;
- (void)showVideoScrubber:(bool)arg1;
- (double)straightenAngle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedCrop;
- (double)suggestedPitchAngle;
- (double)suggestedStraightenAngle;
- (double)suggestedYawAngle;
- (bool)supportsPreviewingOriginal;
- (bool)suppressesEditUpdates;
- (bool)toolBadgeDoesHide;
- (long long)toolControllerTag;
- (id)toolKeyCommands;
- (id)toolbarIcon;
- (id)toolbarIconGlyphName;
- (id)trailingToolbarViews;
- (void)updateAspectRatioLockButton;
- (void)updateCropAspectRatioOrientation:(long long)arg1;
- (void)updateVideoFrameWithScrubber;
- (void)updateViewConstraints;
- (void)updateViewOrdering;
- (bool)videoScrubberIsInteracting;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoScrubberSeekTime;
- (id)videoScrubberView;
- (void)videoScrubberViewDidScrubTo:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)videoScrubberViewInteractionDone;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewCropRect;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (bool)wantsDefaultPreviewView;
- (bool)wantsPreviewViewHidden;
- (bool)wantsSecondaryToolbarVisible;
- (bool)wantsSliderKeyControl;
- (bool)wasLoadingStateFromModelWhenTrackingBegan;
- (void)willBecomeActiveTool;
- (void)willResignActiveTool;
- (double)yawAngle;

@end
