
@interface FCCloudContext : NSObject <FCAssetKeyManagerDelegate, FCBundleSubscriptionChangeObserver, FCCKDatabaseEncryptionDelegate, FCCacheFlushing, FCContentContext, FCPrivateDataContext, FCTestingContext> {
    <FCAppActivityMonitor> * _appActivityMonitor;
    FCAccessChecker * _articleAccessChecker;
    <FCBackgroundTaskable> * _backgroundTaskable;
    <FCBundleSubscriptionManagerType> * _bundleSubscriptionManager;
    <FCContentContext> * _contentContext;
    <FCCurrentIssuesChecker> * _currentIssuesChecker;
    bool  _deviceIsiPad;
    FCCommandQueue * _endpointCommandQueue;
    FCClientEndpointConnection * _endpointConnection;
    FCEntitlementService * _entitlementService;
    <FCESLInventoryType> * _eslInventory;
    <FCFeedDatabaseProtocol> * _feedDatabase;
    <FCFeedPersonalizing> * _feedPersonalizer;
    FCAccessChecker * _issueAccessChecker;
    FCLocalAreasManager * _localAreasManager;
    <FCLocalChannelsProvider> * _localChannelsProvider;
    <FCLocalRegionManager> * _localRegionProvider;
    FCNetworkBehaviorMonitor * _networkBehaviorMonitor;
    FCCommandQueue * _newsletterEndpointCommandQueue;
    FCNewsletterEndpointConnection * _newsletterEndpointConnection;
    <FCNewsletterManager> * _newsletterManager;
    FCNotificationController * _notificationController;
    FCCommandQueue * _notificationsEndpointCommandQueue;
    FCNotificationsEndpointConnection * _notificationsEndpointConnection;
    <FCOfflineArticleManagerType> * _offlineArticleManager;
    id /* block */  _offlineArticleManagerProvider;
    long long  _options;
    <FCPaidAccessCheckerType> * _paidAccessChecker;
    <FCPPTContext> * _pptContext;
    <FCPrivateDataContext> * _privateDataContext;
    FCPurchaseController * _purchaseController;
    <FCPurchaseManagerType> * _purchaseManager;
    <FCPurchaseProviderType> * _purchaseProvider;
    FCSubscriptionController * _subscriptionController;
    FCTranslationManager * _translationManager;
    FCUserVectorManager * _userVectorManager;
    <FCWebURLResolutionEndpointConnection> * _webURLResolutionEndpointConnection;
}

@property (nonatomic, retain) <FCAppActivityMonitor> *appActivityMonitor;
@property (nonatomic, readonly) <FCNewsAppConfigurationManager> *appConfigurationManager;
@property (nonatomic, retain) FCAccessChecker *articleAccessChecker;
@property (nonatomic, readonly) FCArticleController *articleController;
@property (nonatomic, readonly) NSURL *assetCacheDirectoryURL;
@property (nonatomic, readonly) FCAssetManager *assetManager;
@property (nonatomic, readonly) FCAudioPlaylist *audioPlaylist;
@property (nonatomic, readonly) <FCAVAssetFactoryType> *avAssetFactory;
@property (nonatomic, readonly) <FCAVAssetPrewarming> *avAssetPrewarmer;
@property (nonatomic) <FCBackgroundTaskable> *backgroundTaskable;
@property (nonatomic, readonly) <FCBundleSubscriptionManagerType> *bundleSubscriptionManager;
@property (nonatomic, readonly) <FCCoreConfigurationManager> *configurationManager;
@property (nonatomic, retain) <FCContentContext> *contentContext;
@property (nonatomic, readonly, copy) NSString *contentDirectory;
@property (nonatomic, readonly, copy) NSString *contentEnvironment;
@property (nonatomic, readonly, copy) NSString *contentEnvironmentToken;
@property (nonatomic, readonly, copy) NSString *contentStoreFrontID;
@property (nonatomic, retain) <FCCurrentIssuesChecker> *currentIssuesChecker;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool deviceIsiPad;
@property (nonatomic, readonly) FCCommandQueue *endpointCommandQueue;
@property (nonatomic, readonly) FCClientEndpointConnection *endpointConnection;
@property (nonatomic, retain) FCEntitlementService *entitlementService;
@property (nonatomic, readonly) <FCESLInventoryType> *eslInventory;
@property (nonatomic, readonly) <FCFeedDatabaseProtocol> *feedDatabase;
@property (nonatomic, readonly) <FCFeedPersonalizing> *feedPersonalizer;
@property (nonatomic, readonly) FCFlintResourceManager *flintResourceManager;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <FCContentContextInternal> *internalContentContext;
@property (nonatomic, readonly) <FCPrivateDataContextInternal> *internalPrivateDataContext;
@property (nonatomic, readonly) bool isPrivateDataEncryptionEnabled;
@property (nonatomic, readonly) bool isPrivateDatabaseOnline;
@property (nonatomic, readonly) bool isPrivateDatabaseStartingUp;
@property (nonatomic, readonly) bool isPrivateDatabaseTemporarilySuspended;
@property (nonatomic, retain) FCAccessChecker *issueAccessChecker;
@property (nonatomic, readonly) FCIssueReadingHistory *issueReadingHistory;
@property (nonatomic, retain) FCLocalAreasManager *localAreasManager;
@property (nonatomic, retain) <FCLocalChannelsProvider> *localChannelsProvider;
@property (nonatomic, retain) <FCLocalRegionManager> *localRegionProvider;
@property (nonatomic, readonly) FCNetworkBehaviorMonitor *networkBehaviorMonitor;
@property (nonatomic, readonly) FCCommandQueue *newsletterEndpointCommandQueue;
@property (nonatomic, readonly) FCNewsletterEndpointConnection *newsletterEndpointConnection;
@property (nonatomic, readonly) <FCNewsletterManager> *newsletterManager;
@property (nonatomic, readonly) FCNotificationController *notificationController;
@property (nonatomic, readonly) FCCommandQueue *notificationsEndpointCommandQueue;
@property (nonatomic, readonly) FCNotificationsEndpointConnection *notificationsEndpointConnection;
@property (nonatomic, readonly) <FCOfflineArticleManagerType> *offlineArticleManager;
@property (nonatomic, copy) id /* block */ offlineArticleManagerProvider;
@property (nonatomic) long long options;
@property (nonatomic, retain) <FCPaidAccessCheckerType> *paidAccessChecker;
@property (nonatomic, readonly) FCPersonalizationData *personalizationData;
@property (nonatomic, readonly) <FCPPTContext> *pptContext;
@property (nonatomic, readonly) FCPrivateChannelMembershipController *privateChannelMembershipController;
@property (nonatomic, retain) <FCPrivateDataContext> *privateDataContext;
@property (nonatomic, readonly, copy) NSString *privateDataDirectory;
@property (getter=isPrivateDataSyncingEnabled, nonatomic, readonly) bool privateDataSyncingEnabled;
@property (nonatomic, readonly) <FCPushNotificationHandling> *privatePushNotificationHandler;
@property (nonatomic, readonly) FCPurchaseController *purchaseController;
@property (nonatomic, readonly) <FCPurchaseManagerType> *purchaseManager;
@property (nonatomic, readonly) <FCPurchaseProviderType> *purchaseProvider;
@property (nonatomic, readonly) FCPuzzleController *puzzleController;
@property (nonatomic, readonly) FCPuzzleHistory *puzzleHistory;
@property (nonatomic, readonly) FCPuzzleTypeController *puzzleTypeController;
@property (nonatomic, readonly) FCPuzzleTypeSettings *puzzleTypeSettings;
@property (nonatomic, readonly) FCReadingHistory *readingHistory;
@property (nonatomic, readonly) FCReadingList *readingList;
@property (nonatomic, readonly) FCShortcutList *shortcutList;
@property (nonatomic, readonly) FCSportsEventController *sportsEventController;
@property (nonatomic, readonly) FCSubscriptionController *subscriptionController;
@property (nonatomic, readonly) FCSubscriptionList *subscriptionList;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *supportedContentStoreFrontID;
@property (nonatomic, readonly, copy) NSString *tabiModelsContentDirectory;
@property (nonatomic, readonly, copy) NSString *tabiResourcesContentDirectory;
@property (nonatomic, readonly) FCTagController *tagController;
@property (nonatomic, readonly) FCTagSettings *tagSettings;
@property (nonatomic, retain) FCTranslationManager *translationManager;
@property (nonatomic, readonly) FCUserEventHistory *userEventHistory;
@property (nonatomic, readonly) FCUserInfo *userInfo;
@property (nonatomic, retain) FCUserVectorManager *userVectorManager;
@property (nonatomic, readonly) <FCWebURLResolutionEndpointConnection> *webURLResolutionEndpointConnection;

+ (void)initialize;
+ (id)testingContext;
+ (id)testingContextWithDesiredHeadlineFieldOptions:(unsigned long long)arg1;

- (void).cxx_destruct;
- (void)_purchaseControllerDidAddALaCarteSubscription;
- (id)appActivityMonitor;
- (id)appConfigurationManager;
- (id)articleAccessChecker;
- (id)articleController;
- (id)assetCacheDirectoryURL;
- (id)assetManager;
- (id)audioPlaylist;
- (id)avAssetFactory;
- (id)avAssetPrewarmer;
- (id)backgroundTaskable;
- (void)bundleSubscriptionDidSubscribe:(id)arg1;
- (id)bundleSubscriptionManager;
- (id)configurationManager;
- (id)contentContext;
- (id)contentDirectory;
- (id)contentEnvironment;
- (id)contentEnvironmentToken;
- (id)contentStoreFrontID;
- (id)convertRecords:(id)arg1;
- (id)currentIssuesChecker;
- (bool)deviceIsiPad;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1 exceptForFlusher:(id)arg2;
- (id)endpointCommandQueue;
- (id)endpointConnection;
- (id)entitlementService;
- (id)eslInventory;
- (id)feedDatabase;
- (id)feedPersonalizer;
- (void)fetchOriginalDataShouldBeDeletedAfterMigrationForDatabase:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchPrivateDataEncryptionIsAllowedForDatabase:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchPrivateDataEncryptionIsRequiredForDatabase:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchPrivateDataEncryptionMigrationIsDesiredForDatabase:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchShouldSecureSubscriptionsForDatabase:(id)arg1 completion:(id /* block */)arg2;
- (id)flintResourceManager;
- (id)init;
- (id)initForTesting;
- (id)initForTestingWithDesiredHeadlineFieldOptions:(unsigned long long)arg1;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 privateDataHostDirectory:(id)arg4 privateDataActionProvider:(id)arg5 networkBehaviorMonitor:(id)arg6 appActivityMonitor:(id)arg7 desiredHeadlineFieldOptions:(unsigned long long)arg8 feedUsage:(long long)arg9 deviceIsiPad:(bool)arg10 backgroundTaskable:(id)arg11 privateDataSyncAvailability:(id)arg12 pptContext:(id)arg13 options:(long long)arg14;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 privateDataHostDirectory:(id)arg4 privateDataActionProvider:(id)arg5 networkBehaviorMonitor:(id)arg6 appActivityMonitor:(id)arg7 desiredHeadlineFieldOptions:(unsigned long long)arg8 feedUsage:(long long)arg9 lockStoreFrontIfNeeded:(bool)arg10 deviceIsiPad:(bool)arg11 backgroundTaskable:(id)arg12 privateDataSyncAvailability:(id)arg13 pptContext:(id)arg14;
- (id)initWithContentContext:(id)arg1 privateDataContext:(id)arg2 networkBehaviorMonitor:(id)arg3 options:(long long)arg4;
- (id)insertTestArticle;
- (id)insertTestArticlesWithCount:(unsigned long long)arg1;
- (id)interestTokenForContentManifest:(id)arg1;
- (id)internalContentContext;
- (id)internalPrivateDataContext;
- (bool)isPrivateDataEncryptionEnabled;
- (bool)isPrivateDataSyncingEnabled;
- (bool)isPrivateDatabaseOnline;
- (bool)isPrivateDatabaseStartingUp;
- (bool)isPrivateDatabaseTemporarilySuspended;
- (id)issueAccessChecker;
- (id)issueReadingHistory;
- (id)localAreasManager;
- (id)localChannelsProvider;
- (id)localRegionProvider;
- (id)magazinesConfigurationManager;
- (id)networkBehaviorMonitor;
- (id)news_core_ConfigurationManager;
- (id)newsletterEndpointCommandQueue;
- (id)newsletterEndpointConnection;
- (id)newsletterManager;
- (id)notificationController;
- (id)notificationsController;
- (id)notificationsEndpointCommandQueue;
- (id)notificationsEndpointConnection;
- (id)offlineArticleManager;
- (id /* block */)offlineArticleManagerProvider;
- (long long)options;
- (id)paidAccessChecker;
- (id)personalizationData;
- (id)pptContext;
- (void)ppt_overrideFeedEndpoint:(long long)arg1;
- (void)ppt_prewarmFeedDatabase;
- (id)privateChannelMembershipController;
- (id)privateDataContext;
- (id)privateDataDirectory;
- (id)privatePushNotificationHandler;
- (id)privateStoreWithName:(id)arg1 version:(unsigned long long)arg2 options:(unsigned long long)arg3;
- (id)purchaseController;
- (id)purchaseManager;
- (id)purchaseProvider;
- (id)puzzleController;
- (id)puzzleHistory;
- (id)puzzleTypeController;
- (id)puzzleTypeSettings;
- (id)readingHistory;
- (id)readingList;
- (id)recordSourceWithSchema:(id)arg1;
- (id)recordTreeSourceWithRecordSources:(id)arg1;
- (void)setAggregateStoreProvider:(id)arg1;
- (void)setAppActivityMonitor:(id)arg1;
- (void)setArticleAccessChecker:(id)arg1;
- (void)setBackgroundTaskable:(id)arg1;
- (void)setContentContext:(id)arg1;
- (void)setCurrentIssuesChecker:(id)arg1;
- (void)setEntitlementService:(id)arg1;
- (void)setFeedPersonalizer:(id)arg1;
- (void)setIssueAccessChecker:(id)arg1;
- (void)setLocalAreasManager:(id)arg1;
- (void)setLocalChannelsProvider:(id)arg1;
- (void)setLocalRegionProvider:(id)arg1;
- (void)setOfflineArticleManagerProvider:(id /* block */)arg1;
- (void)setOptions:(long long)arg1;
- (void)setPaidAccessChecker:(id)arg1;
- (void)setPrivateDataContext:(id)arg1;
- (void)setTranslationManager:(id)arg1;
- (void)setUserVectorManager:(id)arg1;
- (id)shortcutList;
- (bool)shouldAssetKeyManagerSimulateUnauthorizedAssetKeys:(id)arg1;
- (id)sportsEventController;
- (id)subscriptionController;
- (id)subscriptionList;
- (id)supportedContentStoreFrontID;
- (id)tabiModelsContentDirectory;
- (id)tabiResourcesContentDirectory;
- (id)tagController;
- (id)tagSettings;
- (id)translationManager;
- (id)userEventHistory;
- (id)userInfo;
- (id)userVectorManager;
- (id)webURLResolutionEndpointConnection;

@end
