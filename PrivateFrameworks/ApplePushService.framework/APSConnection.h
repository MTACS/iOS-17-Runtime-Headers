
@interface APSConnection : NSObject <HMBAPSConnection, HMDAPSConnection> {
    NSMutableArray * _accumulatedTopicMoves;
    NSObject<OS_xpc_object> * _connection;
    unsigned int  _connectionPort;
    NSString * _connectionPortName;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    CUTWeakReference * _delegateReference;
    bool  _enableCriticalReliability;
    bool  _enableStatusNotifications;
    NSArray * _enabledTopics;
    NSString * _environmentName;
    bool  _everHadDelegate;
    NSMutableDictionary * _idsToOutgoingMessages;
    NSArray * _ignoredTopics;
    bool  _isConnected;
    bool  _isDeallocing;
    bool  _isDisconnected;
    bool  _isReconnectScheduled;
    bool  _isShutdown;
    NSObject<OS_dispatch_queue> * _ivarQueue;
    unsigned long long  _largeMessageSize;
    NSObject<OS_dispatch_queue> * _machQueue;
    NSObject<OS_dispatch_source> * _mach_source;
    unsigned long long  _messageSize;
    unsigned long long  _nextOutgoingMessageID;
    NSArray * _nonWakingTopics;
    NSArray * _opportunisticTopics;
    NSMutableDictionary * _pendingURLTokenBlocks;
    NSString * _processName;
    NSData * _publicToken;
    NSArray * _pushWakeTopics;
    NSMutableArray * _queuedDelegateBlocks;
    double  _reconnectDelay;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _topicMoveLock;
    bool  _trackActivityPresence;
    bool  _usesAppLaunchStats;
}

@property (nonatomic, retain) NSMutableArray *accumulatedTopicMoves;
@property (readonly, copy) NSString *debugDescription;
@property <HMDAPSConnectionDelegate> *delegate;
@property <HMBAPSConnectionDelegate> *delegate;
@property (nonatomic) <APSConnectionDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (copy) NSArray *enabledTopics;
@property (setter=_setEnabledTopics:, nonatomic, retain) NSArray *enabledTopics;
@property (readonly) unsigned long long hash;
@property (setter=_setIgnoredTopics:, nonatomic, retain) NSArray *ignoredTopics;
@property (nonatomic, readonly) bool isShutdown;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *ivarQueue;
@property (nonatomic) unsigned long long largeMessageSize;
@property (nonatomic) unsigned long long messageSize;
@property (setter=_setNonWakingTopics:, nonatomic, retain) NSArray *nonWakingTopics;
@property (setter=_setOpportunisticTopics:, nonatomic, retain) NSArray *opportunisticTopics;
@property (nonatomic, readonly, retain) NSData *publicToken;
@property (readonly) Class superclass;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } topicMoveLock;
@property (nonatomic) bool trackActivityPresence;
@property (nonatomic) bool usesAppLaunchStats;

// Image: /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService

+ (void)_blockingXPCCallWithArgumentBlock:(id /* block */)arg1 resultHandler:(id /* block */)arg2;
+ (id)_createXPCConnectionWithQueueName:(const char *)arg1;
+ (void)_flushIdentityCache;
+ (void)_safelyCancelAndReleaseConnection:(id)arg1;
+ (void)_setTokenState;
+ (id)connectionsDebuggingStateOfStyle:(unsigned long long)arg1;
+ (struct __SecIdentity { }*)copyIdentity;
+ (id)geoRegion;
+ (void)invalidateDeviceIdentity;
+ (bool)isValidEnvironment:(id)arg1;
+ (double)keepAliveIntervalForEnvironmentName:(id)arg1;
+ (void)notifySafeToSendFilter;
+ (void)requestCourierConnection;
+ (double)serverTime;
+ (unsigned long long)serverTimeInNanoSeconds;

- (void).cxx_destruct;
- (void)_addEnableCriticalReliabilityToXPCMessage:(id)arg1;
- (void)_addEnableStatusNotificationsToXPCMessage:(id)arg1;
- (void)_addPushWakeTopicsToXPCMessage:(id)arg1;
- (void)_addTrackActivityPresenceToXPCMessage:(id)arg1;
- (void)_asyncOnDelegateQueueWithBlock:(id /* block */)arg1;
- (void)_asyncOnDelegateQueueWithBlock:(id /* block */)arg1 requiresDelegate:(bool)arg2;
- (void)_cancelConnection;
- (void)_cancelConnectionOnIvarQueue;
- (void)_connectIfNecessary;
- (void)_connectIfNecessaryOnIvarQueue;
- (void)_deliverConnectionStatusChange:(bool)arg1;
- (void)_deliverConnectionStatusFromDealloc:(bool)arg1;
- (void)_deliverDidReconnectOnIvarQueue;
- (void)_deliverFailedChannelSubscriptions:(id)arg1 onTopic:(id)arg2;
- (void)_deliverMessage:(id)arg1;
- (void)_deliverOutgoingMessageResultWithID:(unsigned long long)arg1 error:(id)arg2 sendRTT:(unsigned long long)arg3;
- (void)_deliverOutgoingMessageResultWithID:(unsigned long long)arg1 error:(id)arg2 sendRTT:(unsigned long long)arg3 ackTimestamp:(unsigned long long)arg4;
- (void)_deliverPublicToken:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (void)_deliverPublicTokenOnIvarQueue:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (void)_deliverToken:(id)arg1 forInfo:(id)arg2;
- (void)_deliverToken:(id)arg1 forTopic:(id)arg2 identifier:(id)arg3;
- (void)_deliverURLToken:(id)arg1 forInfo:(id)arg2;
- (void)_deliverURLTokenError:(id)arg1 forInfo:(id)arg2;
- (void)_disconnect;
- (void)_disconnectFromDealloc;
- (void)_disconnectOnIvarQueue;
- (void)_dispatch_async_to_ivarQueue:(id /* block */)arg1;
- (void)_dispatch_async_to_ivarQueue:(id /* block */)arg1 shutdownBlock:(id /* block */)arg2;
- (void)_dispatch_sync_to_ivarQueue:(id /* block */)arg1 shutdownBlock:(id /* block */)arg2;
- (void)_handleEvent:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_handleEvent:(id)arg1 withHandler:(id /* block */)arg2 errorHandler:(id /* block */)arg3;
- (id)_initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2 enablePushDuringSleep:(bool)arg3 personaUniqueString:(id)arg4 queue:(id)arg5;
- (void)_insertURLTokenBlock:(id /* block */)arg1 forInfo:(id)arg2;
- (void)_noteDisconnectedFromDaemonOnIvarQueue;
- (void)_onIvarQueue_setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 nonWakingTopics:(id)arg4 sendToDaemon:(bool)arg5 completion:(id /* block */)arg6;
- (void)_processQueuedTopicMovesOnIvarQueue;
- (void)_reconnectIfNecessaryOnIvarQueueAfterDelay;
- (id)_removeURLTokenBlocksForInfo:(id)arg1;
- (void)_sendOutgoingMessage:(id)arg1 fake:(bool)arg2;
- (void)_setEnableCriticalReliability:(bool)arg1 sendToDaemon:(bool)arg2;
- (void)_setEnableStatusNotifications:(bool)arg1 sendToDaemon:(bool)arg2;
- (void)_setEnabledTopics:(id)arg1;
- (void)_setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 nonWakingTopics:(id)arg4 sendToDaemon:(bool)arg5 completion:(id /* block */)arg6;
- (void)_setIgnoredTopics:(id)arg1;
- (void)_setNonWakingTopics:(id)arg1;
- (void)_setOpportunisticTopics:(id)arg1;
- (void)_setPushWakeTopics:(id)arg1;
- (void)_setTrackActivityPresence:(bool)arg1 sendToDaemon:(bool)arg2;
- (void)_shutdownFromDealloc;
- (void)_shutdownOnIvarQueue;
- (id)_topicListNameForLogging:(unsigned long long)arg1;
- (id)accumulatedTopicMoves;
- (void)calloutToDelegatesForURLTokenError:(id)arg1 forInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)calloutToInvalidateCompletion:(id /* block */)arg1 withSuccess:(bool)arg2 error:(id)arg3;
- (void)cancelOutgoingMessage:(id)arg1;
- (void)confirmReceiptForMessage:(id)arg1;
- (void)currentTokenForInfo:(id)arg1;
- (void)currentURLTokenForInfo:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)enabledTopics;
- (void)getRegisteredChannelsForTopic:(id)arg1 completion:(id /* block */)arg2;
- (void)getRegisteredChannelsForTopic:(id)arg1 withCompletion:(id /* block */)arg2;
- (bool)hasIdentity;
- (id)ignoredTopics;
- (id)initWithEnvironmentName:(id)arg1;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2 personaUniqueString:(id)arg3 queue:(id)arg4;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2 queue:(id)arg3;
- (id)initWithEnvironmentName:(id)arg1 queue:(id)arg2;
- (void)invalidateTokenForInfo:(id)arg1;
- (void)invalidateTokenForTopic:(id)arg1 identifier:(id)arg2;
- (void)invalidateURLTokenForInfo:(id)arg1;
- (void)invalidateURLTokenForInfo:(id)arg1 completion:(id /* block */)arg2;
- (bool)isConnected;
- (bool)isShutdown;
- (id)ivarQueue;
- (unsigned long long)largeMessageSize;
- (unsigned long long)messageSize;
- (void)moveTopic:(id)arg1 fromList:(unsigned long long)arg2 toList:(unsigned long long)arg3;
- (void)moveTopics:(id)arg1 fromList:(unsigned long long)arg2 toList:(unsigned long long)arg3;
- (id)nonWakingTopics;
- (id)opportunisticTopics;
- (id)publicToken;
- (id)registeredChannelsForTopic:(id)arg1 error:(id*)arg2;
- (void)removeFromRunLoop;
- (void)requestKeepAlive;
- (void)requestTokenForInfo:(id)arg1;
- (void)requestTokenForTopic:(id)arg1 identifier:(id)arg2;
- (void)requestURLTokenForInfo:(id)arg1;
- (void)requestURLTokenForInfo:(id)arg1 completion:(id /* block */)arg2;
- (void)scheduleInRunLoop:(id)arg1;
- (void)sendFakeMessage:(id)arg1;
- (void)sendOutgoingMessage:(id)arg1;
- (void)setAccumulatedTopicMoves:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnableCriticalReliability:(bool)arg1;
- (void)setEnableStatusNotifications:(bool)arg1;
- (void)setEnabledTopics:(id)arg1;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 nonWakingTopics:(id)arg4;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 nonWakingTopics:(id)arg4 completion:(id /* block */)arg5;
- (void)setIgnoredTopics:(id)arg1;
- (void)setLargeMessageSize:(unsigned long long)arg1;
- (void)setMessageSize:(unsigned long long)arg1;
- (void)setNonWakingTopics:(id)arg1;
- (void)setOpportunisticTopics:(id)arg1;
- (void)setPushWakeTopics:(id)arg1;
- (void)setTopicMoveLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setTrackActivityPresence:(bool)arg1;
- (void)setUsesAppLaunchStats:(bool)arg1;
- (void)shutdown;
- (void)subscribeToChannel:(id)arg1 forTopic:(id)arg2;
- (void)subscribeToChannels:(id)arg1 forTopic:(id)arg2;
- (struct os_unfair_lock_s { unsigned int x1; })topicMoveLock;
- (bool)trackActivityPresence;
- (void)unsubscribeFromChannel:(id)arg1 forTopic:(id)arg2;
- (void)unsubscribeFromChannels:(id)arg1 forTopic:(id)arg2;
- (bool)usesAppLaunchStats;

// Image: /System/Library/Frameworks/CloudKit.framework/CloudKit

+ (id)ck_singletonConnectionForEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2;

@end
