
@interface WFRemoteAppSettings : NSObject <WFSettings> {
    unsigned long long  _apiConfigMaxRange;
    unsigned long long  _apiConfigMinRange;
    unsigned long long  _apiConfigModdedHash;
    NSString * _apiVersion;
    NSString * _apiVersionFallback;
    NSURL * _appAnalyticsEndpointUrl;
    long long  _appConfigRefreshRate;
    NSSet * _aqiEnabledCountryCodes;
    NSString * _bundleID;
    double  _cachedGeocodeLocationExpirationTimeInterval;
    NSDictionary * _config;
    NSString * _countryCode;
    float  _dataSamplingRate;
    bool  _disableForecastRequestCancelation;
    bool  _disableLimitReverseGeocoding;
    bool  _disablePriorityForecastRequestQueue;
    NSDate * _lastModificationDate;
    bool  _loadSavedCitiesFromKVSOnly;
    float  _locationGeocodingSamplingRate;
    unsigned long long  _locationNumDecimalsOfPrecision;
    double  _locationUpdateMinDistance;
    double  _locationUpdateMinTimeInterval;
    unsigned long long  _networkFailedAttemptsLimit;
    unsigned long long  _networkSwitchExpirationTimeInSeconds;
    double  _privateUserIdentifierResetTimeInterval;
    float  _telemetrySamplingRate;
    double  _userIdentifierResetTimeInterval;
    WFWeatherEventsConfig * _weatherEventsConfig;
    NSDictionary * _widgetRefreshPolicy;
}

@property (nonatomic, readonly) unsigned long long apiConfigMaxRange;
@property (nonatomic, readonly) unsigned long long apiConfigMinRange;
@property (nonatomic, readonly) unsigned long long apiConfigModdedHash;
@property (nonatomic, readonly) NSString *apiVersion;
@property (nonatomic, readonly) NSString *apiVersionFallback;
@property (nonatomic, readonly) NSURL *appAnalyticsEndpointUrl;
@property (nonatomic, readonly) long long appConfigRefreshRate;
@property (nonatomic, readonly) NSSet *aqiEnabledCountryCodes;
@property (nonatomic, readonly) NSString *bundleID;
@property (nonatomic, readonly) double cachedGeocodeLocationExpirationTimeInterval;
@property (nonatomic, readonly) NSDictionary *config;
@property (nonatomic, readonly) NSString *countryCode;
@property (nonatomic, readonly) float dataSamplingRate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool disableForecastRequestCancelation;
@property (nonatomic, readonly) bool disableLimitReverseGeocoding;
@property (nonatomic, readonly) bool disablePriorityForecastRequestQueue;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isExpired;
@property (nonatomic, readonly) NSDate *lastModificationDate;
@property (nonatomic, readonly) bool loadSavedCitiesFromKVSOnly;
@property (nonatomic, readonly) float locationGeocodingSamplingRate;
@property (nonatomic, readonly) unsigned long long locationNumDecimalsOfPrecision;
@property (nonatomic, readonly) double locationUpdateMinDistance;
@property (nonatomic, readonly) double locationUpdateMinTimeInterval;
@property (nonatomic, readonly) unsigned long long networkFailedAttemptsLimit;
@property (nonatomic, readonly) unsigned long long networkSwitchExpirationTimeInSeconds;
@property (nonatomic, readonly) double privateUserIdentifierResetTimeInterval;
@property (readonly) Class superclass;
@property (nonatomic, readonly) float telemetrySamplingRate;
@property (nonatomic, readonly) double userIdentifierResetTimeInterval;
@property (nonatomic, readonly) WFWeatherEventsConfig *weatherEventsConfig;
@property (nonatomic, readonly) NSDictionary *widgetRefreshPolicy;

+ (id)bundleIDsListFor:(id)arg1 useInternalBundleID:(bool)arg2 useSeedBundleID:(bool)arg3;
+ (id)configurationWithData:(id)arg1 bundleIDs:(id)arg2 country:(id)arg3 userID:(id)arg4 error:(id*)arg5;
+ (id)configurationWithData:(id)arg1 userID:(id)arg2 error:(id*)arg3;
+ (id)defaultSettings;
+ (bool)useInternalBundleID;
+ (bool)wfInternalBuild;
+ (bool)wfSeedBuild;

- (void).cxx_destruct;
- (unsigned long long)apiConfigMaxRange;
- (unsigned long long)apiConfigMinRange;
- (unsigned long long)apiConfigModdedHash;
- (id)apiVersion;
- (id)apiVersionFallback;
- (id)appAnalyticsEndpointUrl;
- (long long)appConfigRefreshRate;
- (id)aqiEnabledCountryCodes;
- (bool)aqiEnabledForCountryCode:(id)arg1;
- (id)bundleID;
- (double)cachedGeocodeLocationExpirationTimeInterval;
- (id)config;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)countryCode;
- (float)dataSamplingRate;
- (id)description;
- (bool)disableForecastRequestCancelation;
- (bool)disableLimitReverseGeocoding;
- (bool)disablePriorityForecastRequestQueue;
- (id)getAPIVersionFromDictionary:(id)arg1 userID:(id)arg2;
- (id)getEnvironmentSpecificConfigDictionaryFromDictionary:(id)arg1 bundleIDs:(id)arg2 country:(id)arg3;
- (id)getSpecificConfigFromConfigs:(id)arg1 configSpecifiers:(id)arg2 specifierKey:(id)arg3;
- (id)initWithConfigDictionary:(id)arg1 bundleIDs:(id)arg2 country:(id)arg3 userID:(id)arg4;
- (bool)isExpired;
- (id)lastModificationDate;
- (bool)loadSavedCitiesFromKVSOnly;
- (float)locationGeocodingSamplingRate;
- (unsigned long long)locationNumDecimalsOfPrecision;
- (double)locationUpdateMinDistance;
- (double)locationUpdateMinTimeInterval;
- (unsigned long long)networkFailedAttemptsLimit;
- (unsigned long long)networkSwitchExpirationTimeInSeconds;
- (double)privateUserIdentifierResetTimeInterval;
- (bool)shouldUseAPIVersionFromDictionary:(id)arg1 userID:(id)arg2;
- (float)telemetrySamplingRate;
- (double)userIdentifierResetTimeInterval;
- (id)weatherEventsConfig;
- (id)widgetRefreshPolicy;

@end
