
@interface SBFluidSwitcherItemContainer : SBFTouchPassThroughClippingView <SBAffordancePresenceControllerDelegate, SBAppPlatterDragSourceViewProviding, SBAppSwitcherPageViewDelegate, SBFailureNotifyingTapGestureRecognizerDelegate, UIDragInteractionDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    bool  _active;
    SBAffordancePresenceController * _affordancePresenceController;
    bool  _animatingPageViewScale;
    SBAppLayout * _appLayout;
    SBApplicationBlurContentView * _blurView;
    bool  _blurred;
    bool  _clipsToUnobscuredMargin;
    double  _contentAlpha;
    struct UIRectCornerRadii { 
        double topLeft; 
        double bottomLeft; 
        double bottomRight; 
        double topRight; 
    }  _contentCornerRadii;
    double  _contentPageViewScale;
    <SBFluidSwitcherItemContainerDelegate> * _delegate;
    UITapGestureRecognizer * _doubleTapGestureRecognizer;
    UIDragInteraction * _dragInteraction;
    bool  _draggable;
    bool  _dragging;
    bool  _eligibleForContentDragSpringLoading;
    bool  _focusable;
    bool  _hasPageViewBeenCommitted;
    struct CGPoint { 
        double x; 
        double y; 
    }  _highlightTapDownLocation;
    bool  _highlightedFromCursorHover;
    bool  _highlightedFromDirectTouch;
    UIHoverGestureRecognizer * _hoverGestureRecognizer;
    unsigned long long  _hoveringOverEdge;
    SBFluidSwitcherIconOverlayView * _iconOverlayView;
    unsigned long long  _killAxis;
    double  _killProgressForCurrentDecelerationTarget;
    SBFluidSwitcherTouchPassThroughScrollView * _killScrollView;
    double  _killScrollViewInitialVelocityScaleFactor;
    bool  _killable;
    bool  _lifted;
    unsigned long long  _maskedCorners;
    SBMedusaSettings * _medusaSettings;
    CAMeshTransform * _meshTransform;
    struct CGPoint { 
        double x; 
        double y; 
    }  _meshWarpCollapsedTargetPosition;
    struct CGPoint { 
        double x; 
        double y; 
    }  _meshWarpExpandedSourcePosition;
    double  _minimumTranslationForKillingContainer;
    SBAppSwitcherPageView * _pageView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _pageViewAnchorPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _pageViewOffset;
    bool  _pointerInteractionEnabled;
    double  _pointerInteractionHitTestPadding;
    bool  _preferredPointerLockStatusSuppressed;
    UILongPressGestureRecognizer * _pressDownGestureRecognizer;
    bool  _resizingAllowed;
    UITapGestureRecognizer * _returnKeyGestureRecognizer;
    bool  _rubberbandable;
    bool  _selectable;
    UILongPressGestureRecognizer * _selectionHighlightGestureRecognizer;
    bool  _sentKillRequest;
    SBAppSwitcherSettings * _settings;
    bool  _shouldApplyMeshWarp;
    bool  _shouldScaleOverlayToFillBounds;
    bool  _shouldUseWallpaperGradientTreatment;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeForContainingSpace;
    SBFFluidBehaviorSettings * _squishSettings;
    bool  _supportsSwitcherDragAndDrop;
    bool  _suppressesHighlightEffect;
    SBFailureNotifyingTapGestureRecognizer * _tapGestureRecognizer;
    long long  _tintStyle;
    double  _unobscuredMargin;
    bool  _visible;
    struct SBSwitcherGradientWallpaperAttributes { 
        double leadingAlpha; 
        double trailingAlpha; 
    }  _wallpaperGradientAttributes;
}

@property (getter=isActive, nonatomic) bool active;
@property (nonatomic, readonly) SBAffordancePresenceController *affordancePresenceController;
@property (nonatomic) unsigned long long allowedTouchResizeCorners;
@property (nonatomic, retain) SBAppLayout *appLayout;
@property (nonatomic) double blurViewIconScale;
@property (nonatomic) bool clipsToUnobscuredMargin;
@property (nonatomic) double contentAlpha;
@property (nonatomic) struct UIRectCornerRadii { double x1; double x2; double x3; double x4; } contentCornerRadii;
@property (nonatomic, retain) UIView *contentOverlay;
@property (nonatomic) double contentPageViewScale;
@property (nonatomic, retain) UIView<SBAppSwitcherPageContentView> *contentView;
@property (nonatomic) bool contentViewBlocksTouches;
@property (nonatomic, readonly) bool contentViewHasSceneOverlay;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBFluidSwitcherItemContainerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double dimmingAlpha;
@property (getter=isDraggable, nonatomic) bool draggable;
@property (getter=isDragging, nonatomic) bool dragging;
@property (nonatomic, readonly) double effectivePageViewPresentationCornerRadius;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } effectivePageViewPresentationFrame;
@property (getter=isEligibleForContentDragSpringLoading, nonatomic) bool eligibleForContentDragSpringLoading;
@property (getter=isFocusable, nonatomic) bool focusable;
@property (readonly) unsigned long long hash;
@property (getter=isHighlightedFromCursorHover, nonatomic) bool highlightedFromCursorHover;
@property (getter=isHighlightedFromDirectTouch, nonatomic) bool highlightedFromDirectTouch;
@property (getter=pointerIsHoveringOverEdge, nonatomic) unsigned long long hoveringOverEdge;
@property (nonatomic, readonly) bool isDeceleratingTowardsKillZone;
@property (nonatomic) unsigned long long killAxis;
@property (getter=isKillable, nonatomic) bool killable;
@property (nonatomic, readonly) double killingProgress;
@property (getter=isLifted, nonatomic) bool lifted;
@property (nonatomic) double lighteningAlpha;
@property (nonatomic) unsigned long long maskedCorners;
@property (nonatomic) CAMeshTransform *meshTransform;
@property (nonatomic) struct CGPoint { double x1; double x2; } meshWarpCollapsedTargetPosition;
@property (nonatomic) struct CGPoint { double x1; double x2; } meshWarpExpandedSourcePosition;
@property (nonatomic) double minimumTranslationForKillingContainer;
@property (getter=isOccludedInContinuousExposeStage, nonatomic) bool occludedInContinuousExposeStage;
@property (nonatomic) struct CGPoint { double x1; double x2; } pageViewAnchorPoint;
@property (nonatomic) struct CGPoint { double x1; double x2; } pageViewOffset;
@property (getter=isPointerInteractionEnabled, nonatomic) bool pointerInteractionEnabled;
@property (nonatomic) double pointerInteractionHitTestPadding;
@property (nonatomic) bool positionAnimationsBeginFromModelState;
@property (getter=isPreferredPointerLockStatusSuppressed, nonatomic) bool preferredPointerLockStatusSuppressed;
@property (getter=isResizingAllowed, nonatomic) bool resizingAllowed;
@property (getter=isRubberbandable, nonatomic) bool rubberbandable;
@property (getter=isSelectable, nonatomic) bool selectable;
@property (nonatomic) double shadowAlpha;
@property (nonatomic) double shadowOffset;
@property (nonatomic) long long shadowStyle;
@property (nonatomic) bool shouldApplyMeshWarp;
@property (nonatomic) bool shouldScaleOverlayToFillBounds;
@property (nonatomic) bool shouldUseBackgroundWallpaperTreatment;
@property (nonatomic) bool shouldUseWallpaperGradientTreatment;
@property (nonatomic) struct CGSize { double x1; double x2; } sizeForContainingSpace;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsSwitcherDragAndDrop;
@property (nonatomic) bool suppressesHighlightEffect;
@property (nonatomic) long long tintStyle;
@property (nonatomic) bool transformAnimationsAreLegacyCounterRotations;
@property (nonatomic) double unobscuredMargin;
@property (getter=isVisible, nonatomic) bool visible;
@property (nonatomic) struct SBSwitcherGradientWallpaperAttributes { double x1; double x2; } wallpaperGradientAttributes;
@property (nonatomic) double wallpaperOverlayAlpha;

+ (Class)layerClass;
+ (double)preferredRestingVisibleMarginForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

- (void).cxx_destruct;
- (struct CGPoint { double x1; double x2; })_CGPointFromScalarBasedOnKillAxis:(double)arg1;
- (double)_CGPointXOrYBasedOnKillAxis:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_CGSizeFromLengthBasedOnKillAxis:(double)arg1;
- (double)_CGSizeWidthOrHeightBasedOnKillAxis:(struct CGSize { double x1; double x2; })arg1;
- (void)_addPageView;
- (struct CGPoint { double x1; double x2; })_contentOffsetAtRest;
- (struct CGPoint { double x1; double x2; })_contentOffsetForKillingProgress:(double)arg1;
- (struct CGSize { double x1; double x2; })_contentSizeForScrollView;
- (id)_createScrollView;
- (bool)_dragInteraction:(id)arg1 shouldDelayCompetingGestureRecognizer:(id)arg2;
- (void)_ensureSubviewOrder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForPageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForPageViewWithFullPresentedSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForScrollView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForScrollViewWithFullPresentedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_handleHoverGesture:(id)arg1;
- (void)_handlePageViewPressDown:(id)arg1;
- (void)_handlePageViewTap:(id)arg1;
- (void)_handleSelectionHighlightGesture:(id)arg1;
- (double)_inverseScaleTransformFactor;
- (double)_killingProgressForContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)_notifyDelegateScrollViewDidChange;
- (id)_pageView;
- (void)_resetKillProgressScrollState;
- (void)_returnKeyPressed:(id)arg1;
- (double)_scaleForHighlightFromCursorHover;
- (double)_scaleForHighlightFromDirectTouch;
- (bool)_scrollViewShouldPanGestureTryToBegin:(id)arg1;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (id)_springLoadingEffectTargetView;
- (void)_updateAccessibilityIdentifier;
- (void)_updateForPointerHoveringOverEdge:(unsigned long long)arg1;
- (void)_updateKillScrollViewEnabled;
- (void)_updatePageViewContentClippingFrame;
- (void)_updatePageViewContentViewClipping;
- (void)_updateShadowVisibility;
- (void)_updateTransformForCurrentHighlight;
- (id)affordancePresenceController;
- (void)affordancePresenceController:(id)arg1 didChangeToPresence:(long long)arg2;
- (unsigned long long)allowedTouchResizeCorners;
- (id)appLayout;
- (void)appSwitcherPageView:(id)arg1 pointerIsHoveringOverEdge:(unsigned long long)arg2;
- (bool)appSwitcherPageView:(id)arg1 shouldBeginPointerInteractionAtLocation:(struct CGPoint { double x1; double x2; })arg2 window:(id)arg3;
- (double)blurViewIconScale;
- (bool)canBecomeFocused;
- (bool)clipsToUnobscuredMargin;
- (id)containerViewForBlurContentView;
- (double)contentAlpha;
- (struct UIRectCornerRadii { double x1; double x2; double x3; double x4; })contentCornerRadii;
- (id)contentOverlay;
- (double)contentPageViewScale;
- (id)contentView;
- (bool)contentViewBlocksTouches;
- (bool)contentViewHasSceneOverlay;
- (double)currentStatusBarHeight;
- (id)delegate;
- (id)description;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (double)dimmingAlpha;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (double)effectivePageViewPresentationCornerRadius;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectivePageViewPresentationFrame;
- (id)focusEffect;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)gestureRecognizerTransitionedToFailed:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 appLayout:(id)arg2 delegate:(id)arg3 active:(bool)arg4 windowScene:(id)arg5;
- (id)initialCornerRadiusConfiguration;
- (id)initialDiffuseShadowFilters;
- (struct SBDragPreviewShadowParameters { double x1; double x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })initialDiffuseShadowParameters;
- (id)initialRimShadowFilters;
- (struct SBDragPreviewShadowParameters { double x1; double x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })initialRimShadowParameters;
- (bool)isActive;
- (bool)isDeceleratingTowardsKillZone;
- (bool)isDraggable;
- (bool)isDragging;
- (bool)isEligibleForContentDragSpringLoading;
- (bool)isFocusable;
- (bool)isHighlightedFromCursorHover;
- (bool)isHighlightedFromDirectTouch;
- (bool)isKillable;
- (bool)isLifted;
- (bool)isOccludedInContinuousExposeStage;
- (bool)isPointerInteractionEnabled;
- (bool)isPreferredPointerLockStatusSuppressed;
- (bool)isResizingAllowed;
- (bool)isRubberbandable;
- (bool)isSelectable;
- (bool)isVisible;
- (unsigned long long)killAxis;
- (double)killingProgress;
- (id)layer;
- (void)layoutSubviews;
- (double)lighteningAlpha;
- (unsigned long long)maskedCorners;
- (id)meshTransform;
- (struct CGPoint { double x1; double x2; })meshWarpCollapsedTargetPosition;
- (struct CGPoint { double x1; double x2; })meshWarpExpandedSourcePosition;
- (double)minimumTranslationForKillingContainer;
- (struct CGPoint { double x1; double x2; })pageViewAnchorPoint;
- (struct CGPoint { double x1; double x2; })pageViewOffset;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (double)pointerInteractionHitTestPadding;
- (unsigned long long)pointerIsHoveringOverEdge;
- (bool)positionAnimationsBeginFromModelState;
- (void)prepareForReuse;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDecelerating:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setActive:(bool)arg1;
- (void)setAllowedTouchResizeCorners:(unsigned long long)arg1;
- (void)setAppLayout:(id)arg1;
- (void)setBlurViewIconScale:(double)arg1;
- (void)setBlurred:(bool)arg1 duration:(double)arg2 blurDelay:(double)arg3 iconViewScale:(double)arg4 began:(id /* block */)arg5 completion:(id /* block */)arg6;
- (void)setClipsToUnobscuredMargin:(bool)arg1;
- (void)setContentAlpha:(double)arg1;
- (void)setContentCornerRadii:(struct UIRectCornerRadii { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentOverlay:(id)arg1;
- (void)setContentOverlay:(id)arg1 animated:(bool)arg2;
- (void)setContentPageViewScale:(double)arg1;
- (void)setContentView:(id)arg1;
- (void)setContentViewBlocksTouches:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimmingAlpha:(double)arg1;
- (void)setDraggable:(bool)arg1;
- (void)setDragging:(bool)arg1;
- (void)setEligibleForContentDragSpringLoading:(bool)arg1;
- (void)setFocusable:(bool)arg1;
- (void)setHighlightedFromCursorHover:(bool)arg1;
- (void)setHighlightedFromDirectTouch:(bool)arg1;
- (void)setHoveringOverEdge:(unsigned long long)arg1;
- (void)setKillAxis:(unsigned long long)arg1;
- (void)setKillable:(bool)arg1;
- (void)setLifted:(bool)arg1;
- (void)setLighteningAlpha:(double)arg1;
- (void)setMaskedCorners:(unsigned long long)arg1;
- (void)setMeshTransform:(id)arg1;
- (void)setMeshWarpCollapsedTargetPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setMeshWarpExpandedSourcePosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setMinimumTranslationForKillingContainer:(double)arg1;
- (void)setOccludedInContinuousExposeStage:(bool)arg1;
- (void)setPageViewAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPageViewOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPointerInteractionEnabled:(bool)arg1;
- (void)setPointerInteractionHitTestPadding:(double)arg1;
- (void)setPositionAnimationsBeginFromModelState:(bool)arg1;
- (void)setPreferredPointerLockStatusSuppressed:(bool)arg1;
- (void)setResizingAllowed:(bool)arg1;
- (void)setRubberbandable:(bool)arg1;
- (void)setSelectable:(bool)arg1;
- (void)setShadowAlpha:(double)arg1;
- (void)setShadowOffset:(double)arg1;
- (void)setShadowStyle:(long long)arg1;
- (void)setShouldApplyMeshWarp:(bool)arg1;
- (void)setShouldScaleOverlayToFillBounds:(bool)arg1;
- (void)setShouldUseBackgroundWallpaperTreatment:(bool)arg1;
- (void)setShouldUseWallpaperGradientTreatment:(bool)arg1;
- (void)setSizeForContainingSpace:(struct CGSize { double x1; double x2; })arg1;
- (void)setSupportsSwitcherDragAndDrop:(bool)arg1;
- (void)setSuppressesHighlightEffect:(bool)arg1;
- (void)setTintStyle:(long long)arg1;
- (void)setTransformAnimationsAreLegacyCounterRotations:(bool)arg1;
- (void)setUnobscuredMargin:(double)arg1;
- (void)setVisible:(bool)arg1;
- (void)setWallpaperGradientAttributes:(struct SBSwitcherGradientWallpaperAttributes { double x1; double x2; })arg1;
- (void)setWallpaperOverlayAlpha:(double)arg1;
- (double)shadowAlpha;
- (double)shadowOffset;
- (long long)shadowStyle;
- (bool)shouldApplyMeshWarp;
- (bool)shouldScaleOverlayToFillBounds;
- (bool)shouldUseBackgroundWallpaperTreatment;
- (bool)shouldUseWallpaperGradientTreatment;
- (struct CGSize { double x1; double x2; })sizeForContainingSpace;
- (id)sourceView;
- (bool)supportsSwitcherDragAndDrop;
- (bool)suppressesHighlightEffect;
- (long long)tintStyle;
- (bool)transformAnimationsAreLegacyCounterRotations;
- (double)unobscuredMargin;
- (struct SBSwitcherGradientWallpaperAttributes { double x1; double x2; })wallpaperGradientAttributes;
- (double)wallpaperOverlayAlpha;

@end
