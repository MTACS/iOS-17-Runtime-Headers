
@interface SBDefaultCoverSheetContext : NSObject <CSAppHostConfiguring, CSAuthenticationManaging, CSCarPlayStatusProviding, CSCoverSheetContextProviding, CSDeviceOrientationProviding, CSMediaControlling, CSOverlayProviding, CSProximitySensorProviding, CSReachabilityControlling, CSResetRestoreStatusProviding, CSSystemPointerInteractionManaging, CSTelephonyStatusProviding, CSTouchEnvironmentStatusProviding, CSTraitAwareAppHostConfiguring, CSUnlockRequesting, CSUserSessionControlling, CSWallpaperLogging, SBFOverlayObserving, SBProximitySensorManagerObserver> {
    NSString * _accessoryAnimationStatusChangedNotificationName;
    NSString * _accessoryAttachedNotificationName;
    NSString * _accessoryDetachedNotificationName;
    <CSMagSafeAccessoryStatusProviding> * _accessoryStatusProvider;
    <CSApplicationInforming> * _applicationInformer;
    <SBFAuthenticationAssertionProviding> * _authenticationAssertionProvider;
    <SBFAuthenticationStatusProvider> * _authenticationStatusProvider;
    <SBUIBiometricResource> * _biometricResource;
    <SBFActionProviding> * _contentActionProvider;
    <SBFDateProviding> * _dateProvider;
    <CSHomeAffordanceControlling> * _homeAffordanceController;
    <CSLegibilityProviding> * _legibilityProvider;
    <SBFLockOutStatusProvider> * _lockOutStatusProvider;
    <CSModalHomeAffordanceControlling> * _modalHomeAffordanceController;
    SBDashBoardNotificationPresenter * _notificationPresenter;
    bool  _objectInProximity;
    <SBFPasscodeFieldChangeObserver> * _passcodeFieldChangeObserver;
    <CSPlatterHomeGestureManaging> * _platterHomeGestureManager;
    NSString * _powerStatusChangeNotificationName;
    <CSPowerStatusProviding> * _powerStatusProvider;
    SBProximitySensorManager * _proximitySensorManager;
    NSMutableSet * _proximitySensorProviderObservers;
    long long  _rawDeviceOrientationIgnoringOrientationLocks;
    SBWindowScene * _sbWindowScene;
    <CSScreenStateProviding> * _screenStateProvider;
    <SBFScreenWakeAnimationControlling> * _screenWakeAnimationController;
    <CSStatusBarControlling> * _statusBarController;
    SBSyncController * _syncController;
    <CSThermalStatusProviding> * _thermalStatusProvider;
    SBFWallpaperAggdLogger * _wallpaperAggdLogger;
    <CSWallpaperProviding> * _wallpaperProvider;
    <CSWallpaperSnapshotUpdating> * _wallpaperSnapshotUpdater;
}

@property (nonatomic, readonly, copy) NSString *accessoryAnimationStatusChangedNotificationName;
@property (nonatomic, readonly, copy) NSString *accessoryAttachedNotificationName;
@property (nonatomic, readonly, copy) NSString *accessoryDetachedNotificationName;
@property (nonatomic, readonly) <CSMagSafeAccessoryStatusProviding> *accessoryStatusProvider;
@property (nonatomic, readonly) <CSAppHostConfiguring> *appHostConfiguring;
@property (nonatomic, readonly) <CSApplicationInforming> *applicationInformer;
@property (nonatomic, readonly) <SBFAuthenticationAssertionProviding> *authenticationAssertionProvider;
@property (nonatomic, readonly) <CSAuthenticationManaging> *authenticationManager;
@property (nonatomic, readonly) <SBFAuthenticationStatusProvider> *authenticationStatusProvider;
@property (nonatomic, readonly) <SBUIBiometricResource> *biometricResource;
@property (getter=isCarPlayActiveForNotifications, nonatomic, readonly) bool carPlayActiveForNotifications;
@property (nonatomic, readonly) <CSCarPlayStatusProviding> *carPlayStatusProvider;
@property (nonatomic, readonly) <SBFActionProviding> *contentActionProvider;
@property (nonatomic, readonly) <SBFDateProviding> *dateProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <CSDeviceOrientationProviding> *deviceOrientationProvider;
@property (nonatomic, readonly, copy) NSArray *dismissableOverlays;
@property (nonatomic, readonly) bool expectsPocketTouches;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <CSHomeAffordanceControlling> *homeAffordanceController;
@property (nonatomic, readonly) <CSOverlayProviding> *homeScreenOverlayProvider;
@property (nonatomic, readonly) <CSLegibilityProviding> *legibilityProvider;
@property (nonatomic, readonly) <SBFLockOutStatusProvider> *lockOutStatusProvider;
@property (getter=isLogoutSupported, nonatomic, readonly) bool logoutSupported;
@property (nonatomic, readonly) <CSMediaControlling> *mediaController;
@property (nonatomic, readonly) <CSModalHomeAffordanceControlling> *modalHomeAffordanceController;
@property (nonatomic, readonly) <CSNotificationPresenting> *notificationPresenter;
@property (getter=isObjectInProximity, nonatomic, readonly) bool objectInProximity;
@property (nonatomic, readonly) <SBFPasscodeFieldChangeObserver> *passcodeFieldChangeObserver;
@property (nonatomic, readonly) <CSPlatterHomeGestureManaging> *platterHomeGestureManager;
@property (nonatomic, readonly, copy) NSString *powerStatusChangeNotificationName;
@property (nonatomic, readonly) <CSPowerStatusProviding> *powerStatusProvider;
@property (nonatomic, readonly) <CSProximitySensorProviding> *proximitySensorProvider;
@property (nonatomic, readonly) long long rawDeviceOrientationIgnoringOrientationLocks;
@property (nonatomic, readonly) <CSReachabilityControlling> *reachabilityController;
@property (nonatomic, readonly) <CSResetRestoreStatusProviding> *resetRestoreStatusProvider;
@property (nonatomic, readonly) long long resetState;
@property (getter=isResetting, nonatomic, readonly) bool resetting;
@property (nonatomic, readonly) long long restoreState;
@property (getter=isRestoring, nonatomic, readonly) bool restoring;
@property (getter=_sbWindowScene, nonatomic, readonly) SBWindowScene *sbWindowScene;
@property (nonatomic, readonly) <CSScreenStateProviding> *screenStateProvider;
@property (nonatomic, readonly) <SBFScreenWakeAnimationControlling> *screenWakeAnimationController;
@property (nonatomic, readonly) <CSStatusBarControlling> *statusBarController;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <CSSystemPointerInteractionManaging> *systemPointerInteractionManager;
@property (nonatomic, readonly) bool tapToWakeEnabled;
@property (nonatomic, readonly) <CSTelephonyStatusProviding> *telephonyStatusProvider;
@property (nonatomic, readonly) <CSThermalStatusProviding> *thermalStatusProvider;
@property (nonatomic, readonly) <CSTouchEnvironmentStatusProviding> *touchEnvironmentStatusProvider;
@property (nonatomic, readonly) <CSTraitAwareAppHostConfiguring> *traitsAwareAppHosting;
@property (nonatomic, readonly) <CSUnlockRequesting> *unlockRequester;
@property (nonatomic, readonly) <CSUserSessionControlling> *userSessionController;
@property (nonatomic, readonly) <CSWallpaperLogging> *wallpaperLogger;
@property (nonatomic, readonly) <CSWallpaperProviding> *wallpaperProvider;
@property (nonatomic, readonly) <CSWallpaperSnapshotUpdating> *wallpaperSnapshotUpdater;
@property (nonatomic, readonly) bool wantsHomeScreenOverlay;

- (void).cxx_destruct;
- (id)_sbWindowScene;
- (id)_todayViewControllerIfAvailable;
- (id)accessoryAnimationStatusChangedNotificationName;
- (id)accessoryAttachedNotificationName;
- (id)accessoryDetachedNotificationName;
- (id)accessoryStatusProvider;
- (void)addProximitySensorProviderObserver:(id)arg1;
- (id)appHostConfiguring;
- (id)applicationHosterForHostContextProvider:(id)arg1;
- (id)applicationHosterForTraitsHostContextProvider:(id)arg1;
- (id)applicationInformer;
- (void)attemptUnlockWithPasscode:(id)arg1 finishUIUnlock:(bool)arg2 completion:(id /* block */)arg3;
- (id)authenticationAssertionProvider;
- (id)authenticationManager;
- (id)authenticationStatusProvider;
- (id)biometricResource;
- (id)carPlayStatusProvider;
- (id)contentActionProvider;
- (id)createUnlockRequest;
- (id)createUnlockRequestForActionContext:(id)arg1;
- (id)dateProvider;
- (void)deactivateReachability;
- (id)deviceOrientationProvider;
- (bool)dismissModalContentIfVisibleAnimated:(bool)arg1;
- (id)dismissableOverlays;
- (double)effectiveReachabilityYOffset;
- (bool)expectsPocketTouches;
- (id)homeAffordanceController;
- (id)homeScreenOverlayProvider;
- (void)incrementIrisPlayCount;
- (id)initWithWindowScene:(id)arg1;
- (bool)isCarPlayActiveForNotifications;
- (bool)isEmergencyCallSupported;
- (bool)isLogoutSupported;
- (bool)isObjectInProximity;
- (bool)isResetting;
- (bool)isRestoring;
- (id)legibilityProvider;
- (id)lockOutStatusProvider;
- (void)logout;
- (id)mediaController;
- (id)modalHomeAffordanceController;
- (id)newOverlayController;
- (id)notificationPresenter;
- (void)overlayController:(id)arg1 didChangePresentationProgress:(double)arg2 newPresentationProgress:(double)arg3 fromLeading:(bool)arg4;
- (void)overlayController:(id)arg1 visibilityDidChange:(bool)arg2;
- (void)overlayControllerDidBeginChangingPresentationProgress:(id)arg1;
- (id)passcodeFieldChangeObserver;
- (id)platterHomeGestureManager;
- (id)powerStatusChangeNotificationName;
- (id)powerStatusProvider;
- (void)proximitySensorManager:(id)arg1 crudeProximityDidChange:(bool)arg2;
- (id)proximitySensorProvider;
- (long long)rawDeviceOrientationIgnoringOrientationLocks;
- (id)reachabilityController;
- (void)registerView:(id)arg1 delegate:(id)arg2;
- (void)removeProximitySensorProviderObserver:(id)arg1;
- (id)resetRestoreStatusProvider;
- (long long)resetState;
- (long long)restoreState;
- (id)screenStateProvider;
- (id)screenWakeAnimationController;
- (void)setBiometricAutoUnlockingDisabled:(bool)arg1 forReason:(id)arg2;
- (void)setPasscodeVisible:(bool)arg1 animated:(bool)arg2;
- (id)statusBarController;
- (void)stopMediaPlaybackForSource:(long long)arg1;
- (id)systemPointerInteractionManager;
- (bool)tapToWakeEnabled;
- (id)telephonyStatusProvider;
- (id)thermalStatusProvider;
- (id)touchEnvironmentStatusProvider;
- (id)traitsAwareAppHosting;
- (id)traitsAwareViewControllerForApplicationHoster:(id)arg1 targetWindow:(id)arg2;
- (id)unlockRequester;
- (void)unlockWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)unregisterView:(id)arg1;
- (id)userSessionController;
- (id)wallpaperLogger;
- (id)wallpaperProvider;
- (id)wallpaperSnapshotUpdater;
- (bool)wantsHomeScreenOverlay;

@end
