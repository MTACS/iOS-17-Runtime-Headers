
@interface SBPIPContainerViewController : UIViewController <BSInvalidatable, SBPIPContainerViewControllerAdapterContextProviding, SBPIPInteractionControllerDelegate, SBSDisplayLayoutElementProviding> {
    bool  _activelyTethered;
    <SBPIPContainerViewControllerAdapter> * _adapter;
    unsigned int  _adapterWants_didBeginEdgeResize;
    unsigned int  _adapterWants_didEndEdgeResize;
    unsigned int  _adapterWants_didEndInteraction;
    unsigned int  _adapterWants_didEndSizeChange;
    unsigned int  _adapterWants_didPanGestureDidEnd;
    unsigned int  _adapterWants_didSettleStashState;
    unsigned int  _adapterWants_didUpdateContentViewFrame;
    unsigned int  _adapterWants_didUpdateStashProgress;
    unsigned int  _adapterWants_didUpdateStashState;
    unsigned int  _adapterWants_handleSceneHandleDestruction;
    unsigned int  _adapterWants_handleTransition;
    unsigned int  _adapterWants_hostedAppSceneHandle;
    unsigned int  _adapterWants_isStashTabHidden;
    unsigned int  _adapterWants_layoutSubviews;
    unsigned int  _adapterWants_loadSubviews;
    unsigned int  _adapterWants_morphAnimatorTargetContainerView;
    unsigned int  _adapterWants_morphAnimatorTargetView;
    unsigned int  _adapterWants_shouldDisableIdleTimer;
    unsigned int  _adapterWants_shouldRequireMedusaKeyboard;
    unsigned int  _adapterWants_shouldSuppressAssociatedElementsInSystemAperture;
    unsigned int  _adapterWants_startReducingResources;
    unsigned int  _adapterWants_stopReducingResources;
    unsigned int  _adapterWants_transitionAnimationDidEnd;
    unsigned int  _adapterWants_transitionAnimationWillBegin;
    unsigned int  _adapterWants_wantsStashTabHidden;
    unsigned int  _adapterWants_willBeginInteraction;
    unsigned int  _adapterWants_willBeginSizeChange;
    unsigned int  _adapterWants_willUpdateStashState;
    NSArray * _connectedWindowScenes;
    UIView * _contentView;
    UIViewController * _contentViewController;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentViewPadding;
    long long  _contentZOrderPriority;
    SBSDisplayLayoutElement * _displayLayoutElement;
    <BSInvalidatable> * _displayLayoutElementAssertion;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _effectiveEdgeInsets;
    unsigned long long  _inFlightAnimationCounter;
    SBPIPInteractionController * _interactionController;
    <SBPIPContainerViewControllerInteractionObserver> * _interactionObserver;
    SBPIPInteractionSettings * _interactionSettings;
    SBFFluidBehaviorSettings * _interactiveAnimationSettings;
    bool  _interfaceOrientationLockAcquired;
    bool  _invalidated;
    UIViewFloatAnimatableProperty * _metricsAnimatableProperty;
    SBFFluidBehaviorSettings * _metricsAnimationSettings;
    unsigned long long  _metricsUpdateGenCount;
    SBPIPContentViewLayoutSettings * _microPIPLayoutSettings;
    SBMicroPIPTetheringMirrorView * _microPIPTetheringViewMirror;
    CADisplayLink * _microPiPRotationDisplayLink;
    NSHashTable * _observerHashTable;
    SBPIPController * _pipController;
    SBPIPContentViewLayoutSettings * _preTetheringLayoutSettings;
    double  _preTetheringNormalizedContentScale;
    bool  _prefersHiddenFromClonedDisplay;
    SBFFluidBehaviorSettings * _regionUpdateAnimationSettings;
    long long  _requiredInterfaceOrientation;
    SBFFluidBehaviorSettings * _stashTabAnimationSettings;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _stashedPadding;
    BSAbsoluteMachTimer * _stashedStateReduceResourcesUsageTimer;
    SBPIPContainerViewController * _tetheredContainerViewController;
    bool  _tetheredInMicroPIPMode;
    SBPIPContainerViewController * _tetheringContainerViewController;
    unsigned int  _updateContentViewLayoutSettingsAndLayoutIfNeeded;
    NSMutableArray * _waitInteractionAnimationsCompletionBlocks;
    bool  _wasInteractionEnabledPreRotationAnimation;
}

@property (getter=isActivelyTethered, nonatomic, readonly) bool activelyTethered;
@property (nonatomic, readonly, copy) NSString *bundleIdentifier;
@property (nonatomic, copy) NSArray *connectedWindowScenes;
@property (nonatomic) double contentScale;
@property (nonatomic, readonly) UIViewController *contentViewController;
@property (nonatomic) long long contentZOrderPriority;
@property (nonatomic, readonly) unsigned long long currentCanonicalPosition;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDisplayLayoutElementActive, nonatomic) bool displayLayoutElementActive;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } effectiveEdgeInsets;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) SBPIPInteractionController *interactionController;
@property (nonatomic) <SBPIPContainerViewControllerInteractionObserver> *interactionObserver;
@property (nonatomic, readonly) UIView *morphAnimatorTargetContainerView;
@property (nonatomic, readonly) UIView *morphAnimatorTargetView;
@property (nonatomic, readonly) NSNumber *overrideResourcesUsageReductionTimeout;
@property (nonatomic) bool prefersHiddenFromClonedDisplay;
@property (nonatomic, readonly) bool prefersIdleTimerDisabled;
@property (nonatomic, readonly) int processIdentifier;
@property (nonatomic, readonly) long long requiredInterfaceOrientation;
@property (nonatomic, readonly) bool requiresMedusaKeyboard;
@property (nonatomic, readonly, copy) NSString *scenePersistenceIdentifier;
@property (nonatomic, readonly) bool shouldSuppressAssociatedElementsInSystemAperture;
@property (getter=isStashed, nonatomic) bool stashed;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } stashedPadding;
@property (readonly) Class superclass;
@property (nonatomic) SBPIPContainerViewController *tetheredContainerViewController;
@property (nonatomic) SBPIPContainerViewController *tetheringContainerViewController;
@property (nonatomic, readonly) long long windowInterfaceOrientation;

- (void).cxx_destruct;
- (double)SB_accessibilityContentViewScale;
- (void)SB_accessibilitySetContentViewScale:(double)arg1;
- (void)SB_accessibilityToggleStashed;
- (void)_addBlurFilterToView:(id)arg1;
- (id)_blackCurtainViewForStopAnimation;
- (id)_blurSpringAnimationWithParameters:(id)arg1 fromValue:(id)arg2 toValue:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentViewFrameInDisplayReferenceSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameInFixedCoordinateSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 transformedToInterfaceOrientation:(long long)arg2;
- (void)_handleMicroPiPRotationDisplayLink:(id)arg1;
- (void)_layoutWithNonOperationFrame;
- (void)_notifyStashStateChanged:(bool)arg1;
- (void)_removeBlurFilterFromView:(id)arg1;
- (void)_removeMicroPIPMirrorView;
- (void)_requireInterfaceOrientation:(long long)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_resolvedSafeAreaInsetsForWindowScene:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_safeAreaInsetsForScene:(id)arg1;
- (void)_setAdapter:(id)arg1;
- (void)_setStashTabHidden:(bool)arg1 left:(bool)arg2 completion:(id /* block */)arg3;
- (void)_updateContentPadding;
- (void)_updateContentViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 reason:(id)arg2 usingDisplayArrangementSpace:(bool)arg3;
- (void)_updateDisplayLayoutElementReferenceFrame;
- (void)acquireInterfaceOrientationLock;
- (void)addObserver:(id)arg1;
- (void)animateOutLeftStashTabWithCompletion:(id /* block */)arg1;
- (id)bundleIdentifier;
- (id)connectedWindowScenes;
- (double)contentScale;
- (id)contentViewController;
- (long long)contentZOrderPriority;
- (unsigned long long)currentCanonicalPosition;
- (void)dealloc;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })effectiveEdgeInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })effectiveEdgeInsetsForWindowScene:(id)arg1;
- (void)forcePictureInPictureToFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)getRotationContentSettings:(struct { bool x1; bool x2; bool x3; bool x4; bool x5; double x6; int x7; }*)arg1 forWindow:(id)arg2;
- (void)handleDestructionRequestForSceneHandle:(id)arg1;
- (bool)handleStashingForTransitionContext:(id)arg1;
- (id)hostedAppSceneHandle;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithPIPController:(id)arg1 interactionSettings:(id)arg2 adapter:(id)arg3;
- (id)interactionController;
- (void)interactionController:(id)arg1 didSettleOnStashState:(bool)arg2;
- (void)interactionController:(id)arg1 didUpdateStashProgress:(double)arg2;
- (void)interactionController:(id)arg1 wantsStashTabHidden:(bool)arg2 left:(bool)arg3;
- (void)interactionControllerDidBeginEdgeResizing:(id)arg1;
- (void)interactionControllerDidBeginInteraction:(id)arg1 forGestureRecognizer:(id)arg2;
- (void)interactionControllerDidBeginSizeChange:(id)arg1 behavior:(int)arg2;
- (void)interactionControllerDidEndAllInteractions:(id)arg1 targetWindowScene:(id)arg2;
- (void)interactionControllerDidEndEdgeResizing:(id)arg1;
- (void)interactionControllerDidEndSizeChange:(id)arg1;
- (void)interactionControllerDidUpdateEdgeInsets:(id)arg1;
- (void)interactionControllerPanGestureDidEnd:(id)arg1;
- (id)interactionObserver;
- (void)invalidate;
- (bool)isActivelyTethered;
- (bool)isDisplayLayoutElementActive;
- (bool)isStashed;
- (void)layoutForTetheringInteractionController:(id)arg1 behavior:(int)arg2;
- (void)loadView;
- (id)maximumAvailableVerticalPadding;
- (id)morphAnimatorTargetContainerView;
- (id)morphAnimatorTargetView;
- (void)noteWindowSceneDidChange;
- (id)overrideResourcesUsageReductionTimeout;
- (void)performAfterInFlightAnimationsComplete:(id /* block */)arg1;
- (bool)prefersHiddenFromClonedDisplay;
- (bool)prefersIdleTimerDisabled;
- (int)processIdentifier;
- (void)relinquishInterfaceOrientationLock;
- (void)removeObserver:(id)arg1;
- (long long)requiredInterfaceOrientation;
- (bool)requiresMedusaKeyboard;
- (void)rotationAnimationDidBeginToRotation:(long long)arg1 contentViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)rotationAnimationDidCompleteToRotation:(long long)arg1 contentViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)rotationAnimationWillBeginToRotation:(long long)arg1 contentViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)rotationAnimationWillCompleteToRotation:(long long)arg1 contentViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)scenePersistenceIdentifier;
- (void)setConnectedWindowScenes:(id)arg1;
- (void)setContentScale:(double)arg1;
- (void)setContentViewPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentZOrderPriority:(long long)arg1;
- (void)setDisplayLayoutElementActive:(bool)arg1;
- (void)setEffectiveEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setInteractionControllerEnabled:(bool)arg1 stashed:(bool)arg2 dataSource:(id)arg3;
- (void)setInteractionObserver:(id)arg1;
- (void)setInteractionsEnabled:(bool)arg1;
- (void)setIsActivelyTethered:(bool)arg1 mode:(long long)arg2;
- (void)setNeedsLayoutForInteractionController:(id)arg1 traits:(unsigned long long)arg2 withReason:(unsigned long long)arg3 behavior:(int)arg4 completion:(id /* block */)arg5;
- (void)setPrefersHiddenFromClonedDisplay:(bool)arg1;
- (void)setStashed:(bool)arg1;
- (void)setStashedPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setTetheredContainerViewController:(id)arg1;
- (void)setTetheringContainerViewController:(id)arg1;
- (bool)shouldSuppressAssociatedElementsInSystemAperture;
- (void)startAnimationDidBeginWithInitialInterfaceOrientation:(long long)arg1;
- (void)startAnimationDidCompleteWithInitialInterfaceOrientation:(long long)arg1;
- (void)startAnimationWillBeginWithInitialInterfaceOrientation:(long long)arg1 initialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)startDisplayLink;
- (void)startResourcesUsageReductionAfterTimeout:(double)arg1;
- (void)startShowingContentWithAnimationSettings:(id)arg1 parameters:(struct { double x1; double x2; double x3; })arg2 completion:(id /* block */)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })stashedPadding;
- (void)stopAnimationDidBeginWithFinalInterfaceOrientation:(long long)arg1 finalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)stopAnimationDidCompleteWithFinalInterfaceOrientation:(long long)arg1;
- (void)stopAnimationWillBeginWithFinalInterfaceOrientation:(long long)arg1 finalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)stopDisplayLink;
- (void)stopResourcesUsageReduction;
- (void)stopShowingContentWithAnimationSettings:(id)arg1 parameters:(struct { double x1; double x2; double x3; })arg2 completion:(id /* block */)arg3;
- (unsigned long long)supportedInterfaceOrientations;
- (id)tetheredContainerViewController;
- (id)tetheringContainerViewController;
- (bool)toggleUserPreferredScale;
- (void)transitionAnimationDidEnd;
- (void)transitionAnimationWillBegin;
- (void)updateDisplayLayoutElementWithBuilder:(id /* block */)arg1;
- (void)updatePreferredContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewSafeAreaInsetsDidChange;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (long long)windowInterfaceOrientation;

@end
