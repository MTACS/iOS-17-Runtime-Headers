
@interface SBWallpaperController : NSObject <BSDescriptionProviding, CSWallpaperSnapshotUpdating, FCActivityManagerObserving, PBUILegacyWallpaperPresenting, PBUILegibilitySettingsProviderDelegate, PBUIWallpaperLegibilityProviding, PBUIWallpaperPresentingDelegate, PBUIWallpaperReachabilityCoordinating, PBUIWallpaperViewDelegate, SBFBacklightEnvironmentSceneProviding, SBUIActiveOrientationObserver, SBWallpaperServerDelegate, UIWindowDelegate, _UISettingsKeyObserver> {
    PRSPosterConfiguration * _activeHomeScreenPosterConfiguration;
    PRSPosterConfiguration * _activeLockScreenPosterConfiguration;
    NSMutableSet * _activeOrientationSources;
    FCActivityManager * _activityManager;
    <BSInvalidatable> * _batterySaverAnimationAssertion;
    NSString * _cachingIdentifier;
    long long  _displayedVariant;
    UITraitCollection * _fakeBlurViewOverrideTraitCollection;
    PRSPosterConfiguration * _lastActiveHomeScreenPosterConfiguration;
    PRSPosterConfiguration * _lastActiveLockScreenPosterConfiguration;
    bool  _loadedLastActiveConfigurations;
    PTSingleTestRecipe * _migrationTestRecipe;
    long long  _orientation;
    NSMapTable * _orientationProviders;
    SBPosterBoardModalEditingManager * _posterBoardModalEditingManager;
    PRSService * _posterBoardService;
    PRSWallpaperObserver * _posterBoardStateObserver;
    PTSingleTestRecipe * _reloadTestRecipe;
    UIViewController * _rootWallpaperViewController;
    bool  _updatedActiveConfigurations;
    SBFWallpaperAggdLogger * _wallpaperAggdLogger;
    PBUIWallpaperConfigurationManager * _wallpaperConfigurationManager;
    UIView * _wallpaperContainerView;
    SBFWallpaperCoreAnalyticsLogger * _wallpaperCoreAnalyticsLogger;
    <PBUIWallpaperLegibilityProviding> * _wallpaperLegibilityProvider;
    bool  _wallpaperObscured;
    UIView * _wallpaperOverlayContainerView;
    <PBUIWallpaperPresenting> * _wallpaperPresenter;
    <PBUIWallpaperPresentingDelegate> * _wallpaperPresentingDelegate;
    <BSInvalidatable> * _wallpaperStyleAnimationAssertion;
    PBUIWallpaperViewController * _wallpaperViewController;
    UIWindow * _wallpaperWindow;
    SBWindowScene * _windowScene;
}

@property (getter=_WallpaperOrientationNotForYou, nonatomic, readonly) long long _orientation;
@property (nonatomic, readonly) long long activeOrientationSource;
@property (nonatomic) long long activeVariant;
@property (nonatomic, retain) <BSInvalidatable> *batterySaverAnimationAssertion;
@property (nonatomic, readonly, copy) NSString *cachingIdentifier;
@property (nonatomic, readonly) struct { long long x1; long long x2; double x3; } currentHomescreenStyleTransitionState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double effectiveReachabilityYOffset;
@property (nonatomic, retain) UITraitCollection *fakeBlurViewOverrideTraitCollection;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double homescreenWallpaperScale;
@property (nonatomic, readonly) <PBUIIrisWallpaperPlaying> *irisWallpaperPlayer;
@property (nonatomic, readonly) <PBUIWallpaperLegibilityProviding> *legibilityProvider;
@property (nonatomic, readonly) double lockscreenWallpaperScale;
@property (nonatomic, readonly) double minimumHomescreenWallpaperScale;
@property (nonatomic, readonly) double minimumLockscreenWallpaperScale;
@property (nonatomic, readonly) <PBUIWallpaperPresenting> *presenter;
@property (nonatomic, readonly) unsigned long long significantEventsCounter;
@property (readonly) Class superclass;
@property (nonatomic, retain) SBFWallpaperAggdLogger *wallpaperAggdLogger;
@property (nonatomic, readonly) PBUIWallpaperConfigurationManager *wallpaperConfigurationManager;
@property (nonatomic, retain) SBFWallpaperCoreAnalyticsLogger *wallpaperCoreAnalyticsLogger;
@property (nonatomic, readonly) UIGestureRecognizer *wallpaperGestureRecognizer;
@property (nonatomic) <PBUIWallpaperPresentingDelegate> *wallpaperPresentingDelegate;
@property (nonatomic, retain) <BSInvalidatable> *wallpaperStyleAnimationAssertion;
@property (nonatomic) double windowLevel;
@property (nonatomic) SBWindowScene *windowScene;

+ (id)accessAuthenticator;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (long long)_WallpaperOrientationNotForYou;
- (void)_applicationDidFinishLaunching:(id)arg1;
- (void)_batterySaverModeChanged:(id)arg1;
- (void)_fetchUserTapEventsRequestedWithCompletionHandler:(id /* block */)arg1;
- (void)_ingestPrimaryWallpaperLayersSnapshotIOSurface:(id)arg1 floatingWallpaperLayerSnapshotIOSurface:(id)arg2 snapshotScale:(double)arg3 traitCollection:(id)arg4 withCompletion:(id /* block */)arg5;
- (bool)_isAcceptingOrientationChangesFromSource:(long long)arg1;
- (bool)_isMaglevActive;
- (bool)_isTraitsArbiterWallpaperActive;
- (void)_loadLastActiveConfigurations;
- (void)_motionEffectsChanged;
- (void)_noteSignificantTimeChanged:(id)arg1;
- (void)_persistLastActiveHomeScreenPosterConfiguration:(id)arg1;
- (void)_persistLastActiveLockScreenPosterConfiguration:(id)arg1;
- (void)_reloadWallpaperAndFlushCaches:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_saveWallpaperAggdKeysForLocations:(long long)arg1 withConfiguration:(id)arg2;
- (void)_saveWallpaperCoreAnalyticsForLocations:(long long)arg1 withConfiguration:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_screenBoundsForOrientation:(long long)arg1;
- (void)_updateForLockScreenPosterConfiguration:(id)arg1 homeScreenPosterConfiguration:(id)arg2;
- (void)_updateScreenBlanked;
- (void)_updateWallpaperForLocations:(long long)arg1 options:(unsigned long long)arg2 wallpaperMode:(long long)arg3 withCompletion:(id /* block */)arg4;
- (void)_updateWallpaperForLocations:(long long)arg1 options:(unsigned long long)arg2 withCompletion:(id /* block */)arg3;
- (id)_wallpaperViewForVariant:(long long)arg1;
- (id)_window;
- (void)activateOrientationSource:(long long)arg1;
- (void)activeActivityDidChangeForManager:(id)arg1;
- (void)activeInterfaceOrientationDidChangeToOrientation:(long long)arg1 willAnimateWithDuration:(double)arg2 fromOrientation:(long long)arg3;
- (id)activeInterfaceOrientationSourcesDescriptions;
- (void)activeInterfaceOrientationWillChangeToOrientation:(long long)arg1;
- (long long)activeOrientationSource;
- (long long)activeVariant;
- (void)addObserver:(id)arg1 forVariant:(long long)arg2;
- (void)addReachabilityObserver:(id)arg1;
- (void)addWallpaperOverlay:(id)arg1;
- (void)availableActivitiesDidChangeForManager:(id)arg1;
- (id)averageColorForVariant:(long long)arg1;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2 withSmudgeRadius:(double)arg3;
- (id)batterySaverAnimationAssertion;
- (id)cachingIdentifier;
- (void)cancelInProcessAnimations;
- (double)contrastForVariant:(long long)arg1;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVariant:(long long)arg2;
- (id)createWallpaperFloatingViewForReason:(id)arg1 ignoreReplica:(bool)arg2;
- (struct { long long x1; long long x2; double x3; })currentHomescreenStyleTransitionState;
- (void)deactivateOrientationSource:(long long)arg1;
- (void)dealloc;
- (long long)defaultInterfaceOrientationForSource:(long long)arg1;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (double)effectiveReachabilityYOffset;
- (id)embeddedWindowScene;
- (id)fakeBlurViewOverrideTraitCollection;
- (bool)homeScreenPosterMirrorsLock;
- (double)homescreenWallpaperScale;
- (id)init;
- (id)initWithWallpaperConfigurationManager:(id)arg1;
- (id)initWithWallpaperConfigurationManager:(id)arg1 cachingIdentifier:(id)arg2;
- (id)initWithWindowScene:(id)arg1 orientation:(long long)arg2 variant:(long long)arg3 wallpaperConfigurationManager:(id)arg4 cachingIdentifier:(id)arg5;
- (id)irisWallpaperPlayer;
- (bool)isWindowIgnoredForReachability:(id)arg1;
- (id)legibilityProvider;
- (id)legibilitySettingsForVariant:(long long)arg1;
- (double)lockscreenWallpaperScale;
- (double)minimumHomescreenWallpaperScale;
- (double)minimumLockscreenWallpaperScale;
- (id)newFakeBlurViewForVariant:(long long)arg1 style:(long long)arg2 transformOptions:(unsigned long long)arg3;
- (void)orientationSource:(long long)arg1 didRotateFromInterfaceOrientation:(long long)arg2;
- (void)orientationSource:(long long)arg1 willAnimateRotationToInterfaceOrientation:(long long)arg2 duration:(double)arg3;
- (void)orientationSource:(long long)arg1 willRotateToInterfaceOrientation:(long long)arg2 duration:(double)arg3;
- (bool)posterHandlesWakeAnimation;
- (bool)posterHidesDimmingLayer;
- (void)preheatWallpaperForVariant:(long long)arg1;
- (id)presenter;
- (void)providerLegibilitySettingsChanged:(id)arg1;
- (void)removeObserver:(id)arg1 forVariant:(long long)arg2;
- (void)removeReachabilityObserver:(id)arg1;
- (void)removeWallpaperOverlay:(id)arg1;
- (bool)removeWallpaperStyleForPriority:(long long)arg1 forVariant:(long long)arg2 withAnimationFactory:(id)arg3;
- (id)requireWallpaperRasterizationWithReason:(id)arg1;
- (id)requireWallpaperWithReason:(id)arg1;
- (id)scenesForBacklightSession;
- (void)setActiveVariant:(long long)arg1;
- (void)setActiveVariant:(long long)arg1 withOutAnimationFactory:(id)arg2 inAnimationFactory:(id)arg3 completion:(id /* block */)arg4;
- (void)setBatterySaverAnimationAssertion:(id)arg1;
- (void)setFakeBlurViewOverrideTraitCollection:(id)arg1;
- (id)setHomescreenWallpaperScale:(double)arg1 withAnimationFactory:(id)arg2;
- (void)setLockscreenOnlyWallpaperAlpha:(double)arg1;
- (id)setLockscreenWallpaperScale:(double)arg1 withAnimationFactory:(id)arg2;
- (void)setOrientationProvider:(id)arg1 forSource:(long long)arg2;
- (void)setWallpaperAggdLogger:(id)arg1;
- (void)setWallpaperCoreAnalyticsLogger:(id)arg1;
- (id)setWallpaperFloatingLayerContainerView:(id)arg1 forReason:(id)arg2 withAnimationFactory:(id)arg3;
- (void)setWallpaperHidden:(bool)arg1 variant:(long long)arg2 reason:(id)arg3;
- (void)setWallpaperObscured:(bool)arg1;
- (void)setWallpaperPresentingDelegate:(id)arg1;
- (bool)setWallpaperStyle:(long long)arg1 forPriority:(long long)arg2 forVariant:(long long)arg3 withAnimationFactory:(id)arg4;
- (void)setWallpaperStyleAnimationAssertion:(id)arg1;
- (bool)setWallpaperStyleTransitionState:(struct { long long x1; long long x2; double x3; })arg1 forPriority:(long long)arg2 forVariant:(long long)arg3 withAnimationFactory:(id)arg4;
- (void)setWindowLevel:(double)arg1;
- (void)setWindowScene:(id)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (id)suspendWallpaperAnimationForReason:(id)arg1;
- (void)triggerPosterSignificantEvent;
- (void)triggerPosterTapEvent:(id)arg1;
- (void)updateIrisWallpaperForInteractiveMode;
- (bool)updateIrisWallpaperForStaticMode;
- (void)updateOrientationAfterSourceChange;
- (void)updatePosterSwitcherSnapshots;
- (void)updateWallpaperAnimationWithIconFlyInTension:(double)arg1 friction:(double)arg2;
- (void)updateWallpaperAnimationWithProgress:(double)arg1;
- (void)updateWallpaperAnimationWithWakeSourceIsSwipeToUnlock:(bool)arg1;
- (void)updateWallpaperForLocations:(long long)arg1 wallpaperMode:(long long)arg2 withCompletion:(id /* block */)arg3;
- (void)updateWallpaperForLocations:(long long)arg1 withCompletion:(id /* block */)arg2;
- (id)wallpaperAggdLogger;
- (id)wallpaperConfigurationManager;
- (id)wallpaperCoreAnalyticsLogger;
- (id)wallpaperGestureRecognizer;
- (void)wallpaperPresenter:(id)arg1 didChangeWallpaperForLocations:(long long)arg2 withConfiguration:(id)arg3;
- (long long)wallpaperPresenter:(id)arg1 requestsOrientationWithRefresh:(bool)arg2;
- (void)wallpaperPresenterDidCompleteWallpaperChange:(id)arg1;
- (id)wallpaperPresentingDelegate;
- (void)wallpaperServer:(id)arg1 fetchContentCutoutBoundsForVariant:(long long)arg2 orientation:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)wallpaperServer:(id)arg1 fetchLimitedOcclusionBoundsForOrientation:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchLockScreenContentCutoutBoundsForOrientation:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchLockScreenMaximalContentCutoutBoundsForOrientation:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchLockScreenTimeBoundsForOrientation:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchObscurableBoundsForOrientation:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchOriginalImageDataForVariant:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchOriginalVideoURLDataForVariant:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchSignificantEventsCounterForPosterWithIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 fetchThumbnailDataForVariant:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)wallpaperServer:(id)arg1 restoreDefaultWallpaperWithCompletionHandler:(id /* block */)arg2;
- (void)wallpaperServer:(id)arg1 setWallpaperColor:(id)arg2 darkColor:(id)arg3 forVariants:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)wallpaperServer:(id)arg1 setWallpaperColorName:(id)arg2 forVariants:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)wallpaperServer:(id)arg1 setWallpaperGradient:(id)arg2 forVariants:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)wallpaperServer:(id)arg1 setWallpaperVideoWithWallpaperMode:(id)arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 wallpaperMode:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)wallpaperServer:(id)arg1 triggerPosterSignificantEventCompletionHandler:(id /* block */)arg2;
- (id)wallpaperStyleAnimationAssertion;
- (id)wallpaperView:(id)arg1 wallpaperConfigurationIncludingValueTypes:(unsigned long long)arg2;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (double)windowLevel;
- (id)windowScene;

@end
