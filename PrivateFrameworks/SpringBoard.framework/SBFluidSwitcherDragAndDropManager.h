
@interface SBFluidSwitcherDragAndDropManager : NSObject <BSTransactionObserver, SBApplicationDropSessionSceneProviding, SBDragAndDropWorkspaceTransactionDelegate, UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private> {
    NSMapTable * _activeDropSessions;
    SBDragAndDropWorkspaceTransaction * _activeTransaction;
    <SBFluidSwitcherDragAndDropManagerDelegate> * _delegate;
    UIDropInteraction * _dropInteraction;
    bool  _hasAddedSwitcherWindowAsDragTarget;
    NSMutableSet * _requiredContextIdentifiersForMedusaDraggingDestination;
    SBSceneManager * _sceneManager;
    SBFluidSwitcherViewController * _switcherContentController;
    SBSwitcherController * _switcherController;
    bool  _windowDragHandledByDruid;
    SBWindowDragInteraction * _windowDragInteraction;
    NSString * _windowDragSceneIdentifier;
    <UIDragSession> * _windowDragSession;
    id /* block */  _windowDragSessionPrepareCompletionBlock;
}

@property (nonatomic, retain) NSMapTable *activeDropSessions;
@property (nonatomic, retain) SBDragAndDropWorkspaceTransaction *activeTransaction;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <SBFluidSwitcherDragAndDropManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIDropInteraction *dropInteraction;
@property (nonatomic) bool hasAddedSwitcherWindowAsDragTarget;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableSet *requiredContextIdentifiersForMedusaDraggingDestination;
@property (nonatomic, readonly) SBSceneManager *sceneManager;
@property (readonly) Class superclass;
@property (nonatomic, readonly) SBFluidSwitcherViewController *switcherContentController;
@property (nonatomic, readonly) SBSwitcherController *switcherController;
@property (nonatomic) bool windowDragHandledByDruid;
@property (nonatomic, retain) SBWindowDragInteraction *windowDragInteraction;
@property (nonatomic, retain) NSString *windowDragSceneIdentifier;
@property (nonatomic, retain) <UIDragSession> *windowDragSession;
@property (nonatomic, copy) id /* block */ windowDragSessionPrepareCompletionBlock;

- (void).cxx_destruct;
- (void)_addMedusaDraggingDestinationWindow:(id)arg1;
- (bool)_anyActiveAndVisibleSceneEntityMatches:(id /* block */)arg1;
- (void)_beginTrackingDropSessionIfNeeded:(id)arg1;
- (bool)_continuousExposeStripsOccluded;
- (id)_dragInteraction:(id)arg1 customSpringAnimationBehaviorForCancellingItem:(id)arg2;
- (void)_dragInteraction:(id)arg1 prepareForSession:(id)arg2 completion:(id /* block */)arg3;
- (void)_dragInteractionDidCancelLiftWithoutDragging:(id)arg1;
- (id)_dropInteraction:(id)arg1 customSpringAnimationBehaviorForDroppingItem:(id)arg2;
- (void)_removeMedusaDraggingDestinationWindow:(id)arg1;
- (id)_requiredContextIDsForDragSessionInView:(id)arg1;
- (id)_requiredContextIdentifiersForMedusaDraggingDestination;
- (void)_windowDragSessionDidEnd;
- (bool)_workspaceWouldAllowTransitionToApplication:(id)arg1;
- (id)activeDropSessions;
- (id)activeTransaction;
- (void)dealloc;
- (id)delegate;
- (void)dragAndDropTransaction:(id)arg1 didBeginGesture:(id)arg2;
- (void)dragAndDropTransaction:(id)arg1 didEndGesture:(id)arg2;
- (void)dragAndDropTransaction:(id)arg1 didPlatterizeWindowDragWithSceneIdentifier:(id)arg2;
- (void)dragAndDropTransaction:(id)arg1 didUpdateGesture:(id)arg2;
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 sessionDidMove:(id)arg2;
- (bool)dragInteraction:(id)arg1 sessionIsRestrictedToDraggingApplication:(id)arg2;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;
- (id)dropInteraction;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 concludeDrop:(id)arg2;
- (void)dropInteraction:(id)arg1 item:(id)arg2 willAnimateDropWithAnimator:(id)arg3;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnd:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)handleWindowDragGestureRecognizer:(id)arg1;
- (bool)hasAddedSwitcherWindowAsDragTarget;
- (id)initWithSwitcherController:(id)arg1 delegate:(id)arg2;
- (bool)isApplicationActiveAndVisible:(id)arg1;
- (bool)isDragAndDropTransactionRunning;
- (id)mostRecentSceneIdentityExcludingLiveScenesForApplication:(id)arg1;
- (id)newSceneIdentityForApplication:(id)arg1;
- (id)preferredSceneIdentityForApplication:(id)arg1 targetContentIdentifier:(id)arg2 preferNewScene:(bool)arg3;
- (id)requiredContextIdentifiersForMedusaDraggingDestination;
- (id)sceneManager;
- (void)setActiveDropSessions:(id)arg1;
- (void)setActiveTransaction:(id)arg1;
- (void)setDropInteraction:(id)arg1;
- (void)setHasAddedSwitcherWindowAsDragTarget:(bool)arg1;
- (void)setRequiredContextIdentifiersForMedusaDraggingDestination:(id)arg1;
- (void)setWindowDragHandledByDruid:(bool)arg1;
- (void)setWindowDragInteraction:(id)arg1;
- (void)setWindowDragSceneIdentifier:(id)arg1;
- (void)setWindowDragSession:(id)arg1;
- (void)setWindowDragSessionPrepareCompletionBlock:(id /* block */)arg1;
- (bool)shouldBeginWindowDragGesture;
- (id)switcherContentController;
- (id)switcherController;
- (void)transactionDidComplete:(id)arg1;
- (bool)windowDragHandledByDruid;
- (id)windowDragInteraction;
- (id)windowDragSceneIdentifier;
- (id)windowDragSession;
- (id /* block */)windowDragSessionPrepareCompletionBlock;

@end
