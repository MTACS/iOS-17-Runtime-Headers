
@interface SBAmbientPresentationController : NSObject <AMAmbientPresentationTriggerManagerObserver, AMRedModeTriggerManagerObserver, SBAlwaysOnPolicy, SBAmbientIdleTimerControllerObserver, SBAmbientMotionDetectionWakeAttributeMonitorObserver, SBAmbientScheduledAlarmObserverDelegate, SBAmbientTransientOverlayViewControllerDelegate, SBBacklightControllerObserver, SBLiftToWakeObserver, SBPocketStateMonitorObserver, SBSecureAppObserver, SBWakeDestinationHandling, SBWakeDestinationProviding, TRAParticipantDelegate> {
    SBAlwaysOnPolicyCoordinator * _alwaysOnPolicyCoordinator;
    AMAmbientDefaults * _ambientDefaults;
    long long  _ambientDisplayStyle;
    SBAmbientIdleTimerController * _ambientIdleTimerController;
    int  _ambientPresentationDarwinNotificationToken;
    SBAmbientSettings * _ambientSettings;
    bool  _ambientTransientOverlayIsShowingPasscode;
    AMAmbientPresentationTriggerManager * _ambientTriggerManager;
    SBAmbientAuthenticationIdleTimer * _authenticationIdleTimer;
    SBBacklightController * _backlightController;
    <BSInvalidatable> * _bumpToWakeAssertion;
    NSArray * _defaultWidgetStacks;
    BLSAssertion * _disableAlwaysOnAssertion;
    <BSInvalidatable> * _disableIdleTimerAssertion;
    BLSAssertion * _enableIdleTimerAssertion;
    bool  _isViewObstructedSuppressionActive;
    SBLiftToWakeController * _liftToWakeController;
    SBLockScreenManager * _lockScreenManager;
    SBAmbientMainDisplayController * _mainDisplayController;
    SBAmbientMotionDetectionWakeAttributeMonitor * _motionDetectionWakeAttributeMonitor;
    <BSInvalidatable> * _motionToWakeEnableAssertion;
    NSHashTable * _observers;
    SBPocketStateMonitor * _pocketStateMonitor;
    bool  _presentationPossible;
    bool  _presentationPossibleTimeoutConfigured;
    bool  _presentationRequested;
    bool  _presented;
    AMRedModeTriggerManager * _redModeTriggerManager;
    SBAmbientScheduledAlarmObserver * _scheduledAlarmObserver;
    SBSecureAppManager * _secureAppManager;
    bool  _suppressIdleTimerForUpcomingAlarm;
    bool  _suppressRedModeDisplayStyleForUpcomingAlarm;
    CMSuppressionManager * _suppressionManager;
    <BSInvalidatable> * _systemApertureLockElementSuppressionAssertion;
    SBAmbientTelemetryEmitter * _telemetryEmitter;
    TRAParticipant * _traitsArbiterParticipant;
    SBAmbientTransientOverlayViewController * _transientOverlay;
    AMUIWidgetHostManager * _widgetHostManager;
    SBWindowScene * _windowScene;
    SBAmbientWirelessChargingIdleTimer * _wirelessChargingIdleTimer;
}

@property (getter=isAlwaysOnPolicyActive, nonatomic, readonly) bool alwaysOnPolicyActive;
@property (setter=_setAmbientDisplayStyle:, nonatomic) long long ambientDisplayStyle;
@property (setter=_setAmbientTransientOverlayIsShowingPasscode:, nonatomic) bool ambientTransientOverlayIsShowingPasscode;
@property (nonatomic, readonly, copy) NSString *analyticsPolicyName;
@property (nonatomic, readonly, copy) id analyticsPolicyValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSArray *defaultWidgetStacks;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool notificationsPreviewOnTapOnly;
@property (getter=isPresentationRequested, nonatomic, readonly) bool presentationRequested;
@property (getter=isPresented, setter=_setPresented:, nonatomic) bool presented;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool suppressNotificationPresentation;
@property (nonatomic, readonly) <SBWakeDestinationHandling> *wakeDestinationHandler;
@property (nonatomic, retain) AMUIWidgetHostManager *widgetHostManager;
@property (nonatomic) SBWindowScene *windowScene;

- (void).cxx_destruct;
- (void)_carPlayPresentationDidChange:(id)arg1;
- (void)_clearUpcomingAlarmSuppressionsIfNecessary;
- (id)_connectedChargerIdentifier;
- (id)_connectedWirelessChargerIdentifierForAdapterDetails:(id)arg1;
- (void)_evaluateAuthenticationIdleTimerEnablement;
- (void)_evaluateBumpToWakeEnablement;
- (void)_evaluateIdleTimerDisablement;
- (void)_evaluateIdleTimerEnablement;
- (bool)_evaluatePresentationState;
- (bool)_evaluatePresentationStateIgnoreLockState:(bool)arg1 animated:(bool)arg2 withCompletion:(id /* block */)arg3;
- (void)_evaluateRedModeTriggerDetectionState;
- (void)_evaluateTriggerDetectionState;
- (void)_evaluateTriggerDetectionStateIgnoreLockState:(bool)arg1;
- (id)_fetchConnectedWirelessChargerIdentifier;
- (id)_fetchConnectedWirelessChargerIdentifierFromRawAdapterDetails;
- (void)_fetchDefaultWidgetStacks;
- (bool)_isAmbientAlwaysOnUserSettingEnabled;
- (bool)_isAmbientModeUserSettingEnabled;
- (bool)_isAmbientPresentationAllowedIgnoreLockState:(bool)arg1;
- (bool)_isBumpToWakeUserSettingEnabled;
- (bool)_isConnectedChargerInternalWirelessWithFamilyCode:(int)arg1;
- (bool)_isMotionToWakeUserSettingEnabled;
- (bool)_isNightModeUserSettingEnabled;
- (void)_isOnACDidChange:(id)arg1;
- (bool)_isRedModeTriggered;
- (void)_lockStateDidChange:(id)arg1;
- (void)_observeAmbientUserSettingChanges;
- (void)_presentLockUIAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_setAmbientDisplayStyle:(long long)arg1;
- (void)_setAmbientDisplayStyle:(long long)arg1 forReason:(id)arg2;
- (void)_setAmbientTransientOverlayIsShowingPasscode:(bool)arg1;
- (void)_setPresented:(bool)arg1;
- (void)_setPresented:(bool)arg1 animated:(bool)arg2;
- (void)_setPresented:(bool)arg1 animated:(bool)arg2 withCompletion:(id /* block */)arg3;
- (void)_setSystemApertureProudLockElementHidden:(bool)arg1;
- (void)_setupStateCaptureBlock;
- (void)_updateAmbientPresentationState:(long long)arg1 analogousTriggerEvents:(bool)arg2 withReason:(id)arg3;
- (void)_updateMotionDetection;
- (void)_updatePosterBoardWithChargerIdentifier:(id)arg1;
- (void)_updatePresentationPossibleForPresentationState:(long long)arg1;
- (void)_updateScheduledAlarmObserverForPresentationRequested:(bool)arg1;
- (void)_updateTelemetryIsPresented:(bool)arg1;
- (void)_updateTraitsArbiterParticipantForPresented:(bool)arg1;
- (void)_updateViewObstructedSuppressionManager;
- (id)_widgetDescriptorsForATXStack:(id)arg1;
- (void)activateAlwaysOnPolicy;
- (void)addObserver:(id)arg1;
- (void)alarmDidResetForAmbientScheduledAlarmObserver:(id)arg1;
- (id)ambientDefaultsForAmbientTransientOverlayViewController:(id)arg1;
- (long long)ambientDisplayStyle;
- (void)ambientIdleTimerController:(id)arg1 didChangeIdleTimerBehavior:(id)arg2;
- (void)ambientIdleTimerController:(id)arg1 didUpdateUserSleepPredicted:(bool)arg2;
- (void)ambientIdleTimerControllerSuppressionDidEnd:(id)arg1;
- (void)ambientPresentationManager:(id)arg1 didUpdatePresentationState:(long long)arg2 analogousTriggerEvents:(bool)arg3;
- (bool)ambientTransientOverlayIsShowingPasscode;
- (void)ambientTransientOverlayViewController:(id)arg1 didSetInlineAuthenticationViewVisible:(bool)arg2;
- (void)ambientTransientOverlayViewController:(id)arg1 didUpdateActiveConfiguration:(id)arg2 withMetadata:(id)arg3;
- (void)ambientTransientOverlayViewController:(id)arg1 viewDidAppear:(bool)arg2;
- (void)ambientTransientOverlayViewController:(id)arg1 viewDidDisappear:(bool)arg2;
- (void)ambientTransientOverlayViewController:(id)arg1 viewWillAppear:(bool)arg2;
- (void)ambientTransientOverlayViewController:(id)arg1 viewWillDisappear:(bool)arg2;
- (id)ambientTransientOverlayViewControllerRequestsConnectedChargerId:(id)arg1;
- (void)ambientTransientOverlayViewControllerRequestsDismissal:(id)arg1;
- (void)ambientTransientOverlayViewControllerWillBeginConfiguration:(id)arg1;
- (void)ambientTransientOverlayViewControllerWillEndConfiguration:(id)arg1;
- (id)analyticsPolicyName;
- (id)analyticsPolicyValue;
- (void)backlightController:(id)arg1 didTransitionToBacklightState:(long long)arg2 source:(long long)arg3;
- (void)dealloc;
- (id)defaultWidgetDescriptorStacksForAmbientTransientOverlayViewController:(id)arg1;
- (id)defaultWidgetStacks;
- (void)didChangeSettingsForParticipant:(id)arg1 context:(id)arg2;
- (id)initWithWindowScene:(id)arg1;
- (bool)isAlwaysOnPolicyActive;
- (bool)isPresentationRequested;
- (bool)isPresented;
- (void)liftToWakeController:(id)arg1 didIgnoreTransition:(long long)arg2;
- (void)liftToWakeController:(id)arg1 didObserveTransition:(long long)arg2 deviceOrientation:(long long)arg3;
- (void)motionDetectionWakeAttributeMonitor:(id)arg1 didUpdateShouldEnableMotionDetectionWake:(bool)arg2;
- (bool)notificationsPreviewOnTapOnly;
- (void)pocketStateMonitor:(id)arg1 pocketStateDidChangeFrom:(long long)arg2 to:(long long)arg3;
- (bool)presentIfAllowedAndLockWithCompletion:(id /* block */)arg1;
- (void)redModeTriggerManager:(id)arg1 didUpdateRedModeTriggeredState:(bool)arg2;
- (void)removeObserver:(id)arg1;
- (void)scheduledAlarmObserver:(id)arg1 timerFiredForReason:(id)arg2;
- (void)secureAppOfTypeDidBegin:(unsigned long long)arg1;
- (void)secureAppOfTypeDidEnd:(unsigned long long)arg1;
- (void)setDefaultWidgetStacks:(id)arg1;
- (void)setWidgetHostManager:(id)arg1;
- (void)setWindowScene:(id)arg1;
- (bool)suppressNotificationPresentation;
- (void)test_updateAmbientPresentationState:(long long)arg1 withReason:(id)arg2;
- (id)timeIntervalsWithReasonsForScheduledTimersForAmbientScheduledAlarmObserver:(id)arg1;
- (void)updatePreferencesForParticipant:(id)arg1 updater:(id)arg2;
- (id)wakeDestinationHandler;
- (bool)wakeToContentForWakeDestination:(id)arg1 unlockSource:(int)arg2;
- (id)widgetHostManager;
- (id)widgetHostManagerForAmbientTransientOverlayViewController:(id)arg1;
- (id)windowScene;

@end
