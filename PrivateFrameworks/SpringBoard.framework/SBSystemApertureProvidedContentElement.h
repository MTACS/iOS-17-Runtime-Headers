
@interface SBSystemApertureProvidedContentElement : NSObject <SAElement, SAUIContentTransitioning, SAUIElementViewProviding, SAUILayoutObservable, SAUILayoutSpecifying, SBSystemActionCoordinatedElementPreviewing, SBSystemActionElementPreviewing, SBSystemApertureLayoutCustomizing, SBSystemApertureSuppressible, SBUISystemApertureContentViewContaining> {
    UIView * _actionView;
    NSString * _clientIdentifier;
    <SBUISystemApertureContentProviding> * _contentProvider;
    <SAElementHosting> * _elementHost;
    NSString * _elementIdentifier;
    bool  _expanding;
    <SAUILayoutHosting> * _layoutHost;
    long long  _layoutMode;
    UIView * _leadingView;
    long long  _maximumSupportedLayoutMode;
    UIView * _minimalView;
    long long  _minimumSupportedLayoutMode;
    NSHashTable * _observers;
    <SBSystemAperturePlatformElementHosting> * _platformElementHost;
    long long  _preferredLayoutMode;
    bool  _previewing;
    SBSystemActionElementPreviewingCoordinator * _previewingCoordinator;
    UIView * _primaryView;
    bool  _prominent;
    UIView * _secondaryView;
    UIView * _trailingView;
    bool  _urgent;
}

@property (nonatomic, readonly, copy) NSString *clientIdentifier;
@property (nonatomic, readonly) long long customLayoutRequestingSpecialFlowerBoundsResizingAnimation;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIView *detachedMinimalView;
@property (nonatomic, readonly) <SAElement> *element;
@property (nonatomic) <SAElementHosting> *elementHost;
@property (nonatomic, readonly, copy) NSString *elementIdentifier;
@property (getter=isExpanding, nonatomic, readonly) bool expanding;
@property (readonly) unsigned long long hash;
@property (getter=isInteractiveDismissalEnabled, nonatomic, readonly) bool interactiveDismissalEnabled;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } intrinsicCompactContainerSize;
@property (nonatomic) unsigned long long layoutAxis;
@property (nonatomic) <SAUILayoutHosting> *layoutHost;
@property (nonatomic, readonly) long long layoutMode;
@property (nonatomic, readonly) UIView *leadingView;
@property (nonatomic) long long maximumSupportedLayoutMode;
@property (getter=isMinimalPresentationPossible, nonatomic, readonly) bool minimalPresentationPossible;
@property (nonatomic, readonly) UIView *minimalView;
@property (nonatomic) long long minimumSupportedLayoutMode;
@property (nonatomic) <SBSystemAperturePlatformElementHosting> *platformElementHost;
@property (nonatomic) long long preferredLayoutMode;
@property (getter=isPreviewing, nonatomic, readonly) bool previewing;
@property (getter=isProminent, nonatomic) bool prominent;
@property (getter=isRequestingMenuPresentation, nonatomic, readonly) bool requestingMenuPresentation;
@property (readonly) Class superclass;
@property (getter=isSuppressed, nonatomic) bool suppressed;
@property (nonatomic, readonly) long long systemApertureCustomLayout;
@property (nonatomic, readonly) long long systemApertureLayoutCustomizingOptions;
@property (nonatomic, readonly) UIView *trailingView;
@property (getter=isUrgent, nonatomic, readonly) bool urgent;

- (void).cxx_destruct;
- (id)_actionView;
- (bool)_canShowWhileLocked;
- (double)_edgeSpacingWithConcentricPositioningIfNecessaryForView:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContainerView:(id)arg3;
- (id)_primaryView;
- (id)_secondaryView;
- (struct CGSize { double x1; double x2; })_sizeForEdgeView:(id)arg1 thatFits:(struct CGSize { double x1; double x2; })arg2 layoutMode:(long long)arg3;
- (void)addElementLayoutSpecifierObserver:(id)arg1;
- (id)clientIdentifier;
- (void)contentProviderWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 inContainerView:(id)arg2 transitionCoordinator:(id)arg3;
- (id)description;
- (id)element;
- (id)elementDescription;
- (id)elementHost;
- (id)elementIdentifier;
- (id)initWithIdentifier:(id)arg1 contentProvider:(id)arg2;
- (struct CGSize { double x1; double x2; })intrinsicCompactContainerSize;
- (bool)isExpanding;
- (bool)isPreviewing;
- (bool)isProminent;
- (bool)isUrgent;
- (id)layoutHost;
- (void)layoutHostContainerViewDidLayoutSubviews:(id)arg1;
- (long long)layoutMode;
- (id)leadingView;
- (long long)maximumSupportedLayoutMode;
- (id)minimalView;
- (long long)minimumSupportedLayoutMode;
- (id)platformElementHost;
- (void)pop;
- (void)preferredContentSizeDidInvalidateForContentViewProvider:(id)arg1;
- (struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })preferredEdgeOutsetsForLayoutMode:(long long)arg1 suggestedOutsets:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg2 maximumOutsets:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (long long)preferredLayoutMode;
- (void)removeElementLayoutSpecifierObserver:(id)arg1;
- (void)setElementHost:(id)arg1;
- (void)setExpanding:(bool)arg1;
- (void)setLayoutHost:(id)arg1;
- (void)setLayoutMode:(long long)arg1 reason:(long long)arg2;
- (void)setMaximumSupportedLayoutMode:(long long)arg1;
- (void)setMinimumSupportedLayoutMode:(long long)arg1;
- (void)setPlatformElementHost:(id)arg1;
- (void)setPreferredLayoutMode:(long long)arg1;
- (void)setPreviewing:(bool)arg1;
- (void)setProminent:(bool)arg1;
- (void)setUrgent:(bool)arg1;
- (bool)shouldSuppressElementWhileOnCoversheet;
- (struct CGSize { double x1; double x2; })sizeThatFitsSize:(struct CGSize { double x1; double x2; })arg1 forProvidedView:(id)arg2 inLayoutMode:(long long)arg3;
- (long long)systemApertureLayoutCustomizingOptions;
- (id)trailingView;
- (id)viewProvider;

@end
