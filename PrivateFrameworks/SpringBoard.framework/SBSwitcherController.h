
@interface SBSwitcherController : NSObject <SBAttentionAwarenessClientDelegate, SBDisplayLayoutContext, SBFluidSwitcherGestureManagerDelegate, SBLayoutStateTransitionObserver, SBLayoutStateTransitionSceneEntityFrameProvider, SBSDisplayLayoutElementProviding, SBSceneSnapshotReferenceFrameProviding, SBSwitcherTraitsAssistantDelegate, SBTraitsParticipantDelegate> {
    TRASettingsActuationContext * _arbiterActuationContext;
    bool  _canDetermineActiveOrientation;
    bool  _chamoisWindowingUIEnabled;
    <SBSwitcherContentViewControlling> * _contentViewController;
    SBDisplayItemLayoutAttributesCalculator * _displayItemFrameCalculator;
    SBSDisplayLayoutElement * _displayLayoutElement;
    <BSInvalidatable> * _displayLayoutElementAssertion;
    bool  _evaluatingLayoutStateOrientation;
    SBFluidSwitcherGestureManager * _gestureManager;
    SBAttentionAwarenessClient * _idleTouchAwarenessClient;
    bool  _idleTouchAwarenessClientEnabled;
    NSHashTable * _inAppStatusBarHiddenAssertions;
    bool  _isPublishedOrientationLocked;
    bool  _isSystemGesturing;
    unsigned long long  _layoutStateEvaluationCounter;
    BSAbsoluteMachTimer * _medusaBannerDismissTimer;
    BSAbsoluteMachTimer * _medusaBannerPresentTimer;
    SBMedusaBannerViewController * _medusaBannerViewController;
    bool  _medusaMultitaskingEnabled;
    bool  _needsOrientationReevaluation;
    long long  _panGestureRecognizerRequestedOrientation;
    SBTraitsSceneParticipantDelegate * _primaryElementTraitsParticipantDelegate;
    TRAParticipant * _publisherTraitsParticipant;
    bool  _shouldLockPublishedOrientation;
    <BSInvalidatable> * _stateCaptureInvalidatable;
    SBMainSwitcherControllerCoordinator<SBSwitcherControllerCoordinating> * _switcherCoordinator;
    SBSwitcherViewController * _switcherViewController;
    SBMainSwitcherWindow * _switcherWindow;
    SBSwitcherTraitsAssistant * _traitsAssistant;
    NSDictionary * _traitsDelegateByParticipant;
    TRAParticipant * _traitsParticipant;
    NSDictionary * _traitsParticipantsByElementIdentifier;
    SBWindowScene * _windowScene;
}

@property (getter=isChamoisWindowingUIEnabled, nonatomic) bool chamoisWindowingUIEnabled;
@property (nonatomic, retain) <SBSwitcherContentViewControlling> *contentViewController;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) FBSDisplayIdentity *displayIdentity;
@property (getter=isDisplayLayoutElementActive, nonatomic) bool displayLayoutElementActive;
@property (nonatomic, retain) SBFluidSwitcherGestureManager *gestureManager;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool idleTouchAwarenessClientEnabled;
@property (nonatomic, readonly) SBLayoutState *layoutState;
@property (getter=isMedusaMultitaskingEnabled, nonatomic) bool medusaMultitaskingEnabled;
@property (readonly) Class superclass;
@property (nonatomic, readonly) SBMainSwitcherControllerCoordinator<SBSwitcherControllerCoordinating> *switcherCoordinator;
@property (nonatomic, retain) SBSwitcherViewController *switcherViewController;
@property (nonatomic, retain) SBMainSwitcherWindow *switcherWindow;
@property (nonatomic, readonly) unsigned long long windowManagementStyle;
@property (nonatomic, readonly) SBWindowScene *windowScene;

- (void).cxx_destruct;
- (BOOL)_activityModeForScene:(id)arg1;
- (void)_addInAppStatusBarHiddenAssertion:(id)arg1 animated:(bool)arg2;
- (id)_ancillaryTransitionRequestForTransitionRequest:(id)arg1;
- (id)_appLayoutForScene:(id)arg1;
- (bool)_areLayoutStateElements:(id)arg1 matchedWithAssociatedParticipants:(id)arg2;
- (void)_attemptContentViewInterfaceOrientationUpdateForPanGesture:(long long)arg1;
- (id)_currentFloatingAppLayout;
- (id)_currentLayoutState;
- (id)_currentMainAppLayout;
- (id)_deviceApplicationSceneHandleForDisplayItem:(id)arg1;
- (void)_dismissMedusaBanner;
- (id)_elementsOrientationsForParticipantsByElementIdentifier:(id)arg1;
- (void)_enqueueOrientationTransitionWithActuationContext:(id)arg1 suggestedAnimator:(id)arg2 completionTask:(id /* block */)arg3 validator:(id /* block */)arg4 label:(id)arg5;
- (void)_handleDisplayCanvasSizeChange:(id)arg1;
- (long long)_interfaceOrientationForLayoutElementIdentifier:(id)arg1;
- (void)_invalidateLayoutElementsTraitsParticipants;
- (void)_invalidateMedusaEducationBannerTimer;
- (bool)_isUnderUILock;
- (BOOL)_jetsamModeForScene:(id)arg1;
- (id)_liveOverlayForTraitsDelegate:(id)arg1;
- (void)_noteLayoutStateEvaluationBegan;
- (void)_noteLayoutStateEvaluationEndedWithParticipantsByElementIdentifiers:(id)arg1 delegatesByParticipant:(id)arg2 primaryDelegate:(id)arg3;
- (void)_noteSwitcherDropAnimationCompletedWithContext:(id)arg1;
- (id)_orientationStateDescription;
- (id)_orientationsForLayoutStateElements:(id)arg1 withAssociatedParticipants:(id)arg2;
- (void)_performSwitcherDropWithContext:(id)arg1;
- (void)_prepareForSceneLayoutTransitionWithTransitionContext:(id)arg1;
- (void)_presentContinuousExposeStripRevealGrabberTongueImmediately;
- (void)_presentMedusaBanner:(long long)arg1 fireInterval:(double)arg2 dismissInterval:(double)arg3;
- (void)_presentMedusaEducationBanner;
- (void)_removeInAppStatusBarHiddenAssertion:(id)arg1 animated:(bool)arg2;
- (id)_sceneEntitiesToForeground;
- (id)_sceneHandleForLayoutElement:(id)arg1;
- (void)_setupSwitcherTraitsParticipantAndPolicySpecifiers;
- (bool)_shouldAcceleratedHomeButtonPressBegin;
- (void)_tickleContinuousExposeStripRevealGrabberTongueIfVisible;
- (id)_traitsParticipantForLayoutElementIdentifier:(id)arg1;
- (void)_updateAppTransitionContext:(id)arg1 withOrientationActuationContext:(id)arg2;
- (void)_updateAppTransitionContext:(id)arg1 withOrientationContext:(id)arg2 accountForSceneState:(bool)arg3 primaryDelegate:(id)arg4;
- (void)_updateContentViewInterfaceOrientation:(long long)arg1;
- (void)_updateDisplayLayoutElementForLayoutState:(id)arg1;
- (id)activeAndVisibleSceneIdentifiersForApplication:(id)arg1;
- (id)activeTransientOverlayPresentedAppLayout;
- (void)actuateOrientationForTraitsDelegate:(id)arg1 withContext:(id)arg2 reasons:(long long)arg3;
- (void)addAcquiredTransientOverlayViewController:(id)arg1 forAppLayout:(id)arg2;
- (void)addAppLayoutForDisplayItem:(id)arg1 completion:(id /* block */)arg2;
- (void)addAppLayoutForTransientOverlayViewController:(id)arg1;
- (void)addCenterRoleAppLayoutForDisplayItem:(id)arg1 completion:(id /* block */)arg2;
- (id)animationControllerForTransitionRequest:(id)arg1;
- (id)appLayoutForWorkspaceTransientOverlay:(id)arg1;
- (void)appendDescriptionForParticipant:(id)arg1 withBuilder:(id)arg2 multilinePrefix:(id)arg3;
- (bool)canPerformKeyboardShortcutAction:(long long)arg1 forBundleIdentifier:(id)arg2;
- (void)cleanUpAfterCoordinatedLayoutStateTransitionWithContext:(id)arg1;
- (void)client:(id)arg1 attentionLostTimeoutDidExpire:(double)arg2 forConfigurationGeneration:(unsigned long long)arg3 withAssociatedObject:(id)arg4;
- (void)clientDidResetForUserAttention:(id)arg1;
- (void)configureRequest:(id)arg1 forSwitcherTransitionRequest:(id)arg2 withEventLabel:(id)arg3;
- (double)contentContainerAspectRatio;
- (id)contentViewController;
- (id)coordinateSpaceForInterfaceOrientation:(long long)arg1;
- (id)coordinateSpaceForLayoutElement:(id)arg1 layoutState:(id)arg2;
- (id)coordinateSpaceForLayoutState:(id)arg1;
- (id)createWorkspaceTransientOverlayForAppLayout:(id)arg1;
- (id)currentElementsParticipants;
- (void)dealloc;
- (void)didChangeSettingsForParticipant:(id)arg1 context:(id)arg2;
- (id)displayIdentity;
- (id)entityWithRole:(long long)arg1;
- (void)enumerateTransientOverlayViewControllersUsingBlock:(id /* block */)arg1;
- (long long)floatingConfiguration;
- (void)fluidSwitcherGestureManager:(id)arg1 clickReceivedForHomeGrabberView:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 didBeginDraggingWindowWithSceneIdentifier:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 didBeginGesture:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 didEndGesture:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 didPlatterizeWindowDragWithSceneIdentifier:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 didUpdateGesture:(id)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 tapReceivedForGrabberTongueAtEdge:(unsigned long long)arg2;
- (void)fluidSwitcherGestureManager:(id)arg1 willEndDraggingWindowWithSceneIdentifier:(id)arg2;
- (bool)fluidSwitcherGestureManagerSupportsFloatingApplication:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForCenterItemWithConfiguration:(long long)arg1 interfaceOrientation:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForFloatingAppLayoutInInterfaceOrientation:(long long)arg1 floatingConfiguration:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForItemWithRole:(long long)arg1 inMainAppLayout:(id)arg2 interfaceOrientation:(long long)arg3;
- (id)gestureManager;
- (bool)hasAppLayoutForTransientOverlayViewController:(id)arg1;
- (bool)hasTransientOverlayAppLayouts;
- (bool)hitTestedToFloatingElement:(struct CGPoint { double x1; double x2; })arg1 window:(id)arg2;
- (id)homeGestureBottomEdgeRecognizer;
- (bool)idleTouchAwarenessClientEnabled;
- (id)initWithWindowScene:(id)arg1 switcherCoordinator:(id)arg2;
- (long long)interfaceOrientation;
- (long long)interfaceOrientationForLayoutElement:(id)arg1;
- (long long)interfaceOrientationForSceneHandle:(id)arg1;
- (bool)isAcquiredTransientOverlayViewController:(id)arg1;
- (bool)isAnySwitcherVisible;
- (bool)isChamoisUIEnabled;
- (bool)isChamoisWindowingUIEnabled;
- (bool)isDisplayLayoutElementActive;
- (bool)isFloatingSwitcherVisible;
- (bool)isIdleTouchAwarenessClientEnabled;
- (bool)isInAnyPeekState;
- (bool)isInAppStatusBarHidden;
- (bool)isInAppStatusBarRequestedHiddenForSwitcherContentController:(id)arg1;
- (bool)isMainSwitcherVisible;
- (bool)isMedusaMultitaskingEnabled;
- (bool)isOnExternalDisplay;
- (bool)layoutContainsRole:(long long)arg1;
- (id)layoutElementSizingPoliciesForLayoutState:(id)arg1;
- (id)layoutState;
- (id)layoutStateApplicationSceneHandles;
- (id)layoutStatePrimaryElement;
- (id)layoutStateSideElement;
- (id)layoutStateStudyLogData;
- (void)layoutStateTransitionCoordinator:(id)arg1 transitionDidBeginWithTransitionContext:(id)arg2;
- (void)layoutStateTransitionCoordinator:(id)arg1 transitionDidEndWithTransitionContext:(id)arg2;
- (id)leadingStatusBarStyleRequest;
- (double)minimumHomeScreenScale;
- (id)participantAssociatedSceneIdentityTokens:(id)arg1;
- (id)participantAssociatedWindows:(id)arg1;
- (void)performKeyboardShortcutAction:(long long)arg1 forBundleIdentifier:(id)arg2;
- (void)performTransitionWithContext:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)prepareForCoordinatedLayoutStateTransitionWithContext:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })referenceFrameForInterfaceOrientation:(long long)arg1 centerConfiguration:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })referenceFrameForInterfaceOrientation:(long long)arg1 floatingConfiguration:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })referenceFrameForInterfaceOrientation:(long long)arg1 layoutRole:(long long)arg2 appLayout:(id)arg3 isInsetForHomeAffordance:(bool)arg4;
- (void)removeAcquiredTransientOverlayViewController:(id)arg1;
- (void)removeAppLayoutTransientOverlayViewController:(id)arg1;
- (id)requestInAppStatusBarHiddenAssertionForReason:(id)arg1 animated:(bool)arg2;
- (double)scaleForDownscaledSnapshotGenerationForSceneHandle:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sceneEntityFrameForWorkspaceEntity:(id)arg1 inLayoutState:(id)arg2;
- (id)sceneHandleForLayoutElement:(id)arg1;
- (id)sceneHandleForTraitsParticipant:(id)arg1;
- (void)setChamoisWindowingUIEnabled:(bool)arg1;
- (void)setContentViewController:(id)arg1;
- (void)setDisplayLayoutElementActive:(bool)arg1;
- (void)setGestureManager:(id)arg1;
- (void)setIdleTouchAwarenessClientEnabled:(bool)arg1;
- (void)setMedusaMultitaskingEnabled:(bool)arg1;
- (void)setSwitcherViewController:(id)arg1;
- (void)setSwitcherWindow:(id)arg1;
- (void)setUpSwitcherWindowIfNeeded;
- (bool)shouldMorphFromPIPForTransitionContext:(id)arg1;
- (bool)shouldMorphToPIPForTransitionContext:(id)arg1;
- (id)stateCaptureTitlePreamble;
- (id)statusBarActionsByPartIdentifier;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })statusBarAvoidanceFrameForLayoutRole:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })statusBarAvoidanceFrameForLayoutRole:(long long)arg1 layoutState:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })statusBarEdgeInsets;
- (id)statusBarOverlayData;
- (id)switcherCoordinator;
- (void)switcherOrientation:(out long long*)arg1 elementsOrientations:(out id*)arg2 forTransitionRequest:(id)arg3 previousLayoutState:(id)arg4 layoutState:(id)arg5;
- (unsigned long long)switcherSupportedInterfaceOrientations;
- (id)switcherViewController;
- (id)switcherWindow;
- (bool)toggleMainSwitcherNoninteractivelyWithSource:(long long)arg1 animated:(bool)arg2;
- (id)trailingStatusBarStyleRequest;
- (id)traitsParticipantForSceneHandle:(id)arg1;
- (id)traitsPipelineManager;
- (long long)unlockedEnvironmentMode;
- (void)updateDisplayLayoutElementWithBuilder:(id /* block */)arg1;
- (void)updateOrientationForTraitsDelegate:(id)arg1 withUpdateReasons:(long long)arg2 suggestedAnimator:(id)arg3 actuationContext:(id)arg4;
- (void)updatePreferencesForParticipant:(id)arg1 updater:(id)arg2;
- (void)updateWindowVisibilityForSwitcherContentController:(id)arg1;
- (unsigned long long)windowManagementStyle;
- (id)windowScene;

@end
