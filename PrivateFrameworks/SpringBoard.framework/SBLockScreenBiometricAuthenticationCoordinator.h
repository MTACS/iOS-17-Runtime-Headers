
@interface SBLockScreenBiometricAuthenticationCoordinator : NSObject <BSDescriptionProviding, PKPassLibraryDelegate, SBBiometricUnlockBehaviorDelegate, SBUIBiometricResourceObserver, SBUIPasscodeBiometricMatchingAssertionFactory, SBWalletPrearmRecognizerDelegate> {
    NSMutableOrderedSet * _activePasscodeMatchAssertions;
    <SBBiometricUnlockBehavior> * _autoUnlockBehavior;
    bool  _bioAuthenticatedWhileMenuButtonDown;
    SBUIBiometricResource * _biometricResource;
    <SBLockScreenBiometricAuthenticationCoordinatorDelegate> * _delegate;
    bool  _didMatchBeforeWalletPrearmRecognizerTimeout;
    NSHashTable * _disabledAssertions;
    NSHashTable * _disabledAutoUnlockAssertions;
    NSHashTable * _disabledUnlockAssertions;
    <BSInvalidatable> * _fingerDetectEnabledAssertion;
    bool  _isAuthenticated;
    bool  _matchedWithResult;
    NSTimer * _matchingAssertionInvalidationTimer;
    <BSInvalidatable> * _matchingWantedAssertion;
    unsigned long long  _matchingWantedAssertionMode;
    PKPassLibrary * _passLibrary;
    _SBPendingMesaUnlockBehaviorUnlockRequest * _pendingUnlockRequest;
    bool  _presentingWalletInterface;
    unsigned long long  _state;
    SBWalletPreArmController * _walletPreArmController;
    SBWalletPrearmRecognizer * _walletPrearmRecognizer;
}

@property (getter=isAuthenticated, nonatomic) bool authenticated;
@property (getter=_setAutoUnlockBehavior, setter=_setAutoUnlockBehavior:, nonatomic, retain) <SBBiometricUnlockBehavior> *autoUnlockBehavior;
@property (getter=isAutoUnlockingDisabled, nonatomic, readonly) bool autoUnlockingDisabled;
@property (nonatomic) bool bioAuthenticatedWhileMenuButtonDown;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBLockScreenBiometricAuthenticationCoordinatorDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic, readonly) bool enabled;
@property (readonly) unsigned long long hash;
@property (getter=isUnlockingDisabled, nonatomic, readonly) bool isUnlockingDisabled;
@property (getter=_getPassLibrary, setter=_setPassLibrary:, nonatomic, retain) PKPassLibrary *passLibrary;
@property (getter=_state, nonatomic, readonly) unsigned long long state;
@property (readonly) Class superclass;
@property (getter=isWalletPreArmDisabled, nonatomic, readonly) bool walletPreArmDisabled;
@property (getter=_walletPrearmRecognizer, nonatomic, readonly) SBWalletPrearmRecognizer *walletPrearmRecognizer;

- (void).cxx_destruct;
- (void)_addPasscodeMatchingAssertion:(id)arg1;
- (void)_clearFingerDetectAssertion;
- (void)_clearPendingUnlockRequest;
- (void)_createFingerDetectAssertion;
- (id)_getPassLibrary;
- (void)_handleIdentityMatchSuccess:(bool)arg1;
- (void)_handlePassKitDismissalIfNecessaryWithReason:(id)arg1;
- (bool)_hasActivePasscodeViews;
- (void)_invalidateWalletPreArmRecognizer;
- (bool)_isMatchingEffectivelyDisabled;
- (bool)_isWalletPreArmAllowed;
- (void)_noteMenuButtonDoublePress;
- (void)_noteMenuButtonSinglePress;
- (void)_pendUnlockRequest:(id)arg1;
- (void)_removePasscodeMatchingAssertion:(id)arg1;
- (void)_resetStateForReason:(id)arg1;
- (id)_setAutoUnlockBehavior;
- (void)_setAutoUnlockBehavior:(id)arg1;
- (void)_setPassLibrary:(id)arg1;
- (void)_setState:(unsigned long long)arg1 forReason:(id)arg2;
- (void)_setupPreArmRecognizerIfPossibleForReason:(id)arg1;
- (unsigned long long)_state;
- (void)_stateChangedFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (bool)_stateWantsMatching:(unsigned long long)arg1 outMatchMode:(unsigned long long*)arg2;
- (void)_toggleAutoUnlockBehaviorEnabled:(bool)arg1;
- (void)_updateMatchingForState:(unsigned long long)arg1 forReason:(id)arg2;
- (void)_walletPreArmDisabledDidChange:(id)arg1;
- (id)_walletPrearmRecognizer;
- (id)acquireDisableAutoUnlockAssertionForReason:(id)arg1;
- (id)acquireDisableCoordinatorAssertionForReason:(id)arg1;
- (id)acquireDisableUnlockAssertionForReason:(id)arg1;
- (id)acquireDisableWalletPreArmAssertionForReason:(id)arg1;
- (id)acquireMatchingAssertionWithMode:(unsigned long long)arg1 reason:(id)arg2;
- (bool)bioAuthenticatedWhileMenuButtonDown;
- (void)biometricResource:(id)arg1 matchingAllowedDidChange:(bool)arg2;
- (void)biometricResource:(id)arg1 observeEvent:(unsigned long long)arg2;
- (bool)biometricUnlockBehavior:(id)arg1 requestsFeedback:(id)arg2;
- (bool)biometricUnlockBehavior:(id)arg1 requestsUnlock:(id)arg2 withFeedback:(id)arg3;
- (void)contactlessInterfaceDidDismissFromSource:(long long)arg1;
- (id)delegate;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)initWithBiometricResource:(id)arg1 walletPreArmController:(id)arg2;
- (bool)isAuthenticated;
- (bool)isAutoUnlockingDisabled;
- (bool)isEnabled;
- (bool)isUnlockingDisabled;
- (bool)isWalletPreArmDisabled;
- (void)passLibraryReceivedInterruption;
- (void)setAuthenticated:(bool)arg1;
- (void)setBioAuthenticatedWhileMenuButtonDown:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (void)walletPrearmRecognizer:(id)arg1 didFailToRecognizeForReason:(unsigned long long)arg2;
- (void)walletPrearmRecognizerDidRecognize:(id)arg1;

@end
