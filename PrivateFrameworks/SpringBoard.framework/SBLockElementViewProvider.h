
@interface SBLockElementViewProvider : SBActivityProvidedContentElement <SAElementViewProviding, SAUIContentTransitioning, SBSystemApertureLayoutCustomizing, SBSystemApertureSuppressible, SBUIBiometricResourceObserver> {
    bool  _allowsBioUnlock;
    SBUISystemApertureContentProvider * _contentProvider;
    <SAElementHosting> * _elementHost;
    bool  _hasActiveUnlockAttempt;
    bool  _isAcquiring;
    bool  _isAuthenticated;
    bool  _isEmpty;
    bool  _isInBloomMode;
    <SAUILayoutHosting> * _layoutHost;
    long long  _layoutMode;
    SBUIProudLockIconView * _leadingLock;
    SBUISystemApertureCustomContentProvider * _lockProvider;
    SBUIProudLockIconView * _prominentLock;
    SBUIBiometricResource * _sharedResource;
    UIView * _trailingContainerView;
    SBUISystemApertureCustomContentProvider * _trailingPackageProvider;
    BSUICAPackageView * _trailingPackageView;
    UIView * _trailingView;
    unsigned long long  _unlockMode;
}

@property (nonatomic, retain) SBUISystemApertureContentProvider *contentProvider;
@property (nonatomic, readonly) long long customLayoutRequestingSpecialFlowerBoundsResizingAnimation;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <SAElement> *element;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) SBUISystemApertureCustomContentProvider *lockProvider;
@property (readonly) Class superclass;
@property (getter=isSuppressed, nonatomic) bool suppressed;
@property (nonatomic, readonly) long long systemApertureCustomLayout;
@property (nonatomic, readonly) long long systemApertureLayoutCustomizingOptions;
@property (nonatomic, retain) SBUISystemApertureCustomContentProvider *trailingPackageProvider;

+ (bool)deviceSupportsElement;

- (void).cxx_destruct;
- (bool)_activelyWantsMatching;
- (bool)_allowsBiometricUnlock;
- (bool)_canShowWhileLocked;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_elementFrameLeading:(bool)arg1 forLayoutMode:(long long)arg2;
- (bool)_isShowingInLandscape;
- (void)_setAcquiring:(bool)arg1;
- (void)_setUnlockMode:(unsigned long long)arg1;
- (void)_toggleUnlockMode;
- (bool)_treatAsAmbient;
- (bool)_treatsAsAmbientSearching;
- (unsigned long long)_unlockMode;
- (void)_updateAllowsBioUnlock;
- (void)_updateContentProvidersForViewProviderMode;
- (void)_updateLargePackageVisibility;
- (void)_updateLeadingPackageVisibility;
- (void)_updateLockLayout;
- (void)_updateTrailingGlyph;
- (void)_updateTrailingPackageVisibility;
- (void)_updateUnlockModeForState;
- (void)biometricResource:(id)arg1 matchingEnabledDidChange:(bool)arg2;
- (void)biometricResource:(id)arg1 observeEvent:(unsigned long long)arg2;
- (id)clientIdentifier;
- (id)contentProvider;
- (void)contentProviderWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 inContainerView:(id)arg2 transitionCoordinator:(id)arg3;
- (id)element;
- (id)elementHost;
- (id)elementIdentifier;
- (void)handleBiometricEvent:(long long)arg1;
- (bool)handleElementViewEvent:(long long)arg1;
- (bool)hasActivityBehavior;
- (id)init;
- (bool)isMinimalPresentationPossible;
- (bool)isProvidedViewConcentric:(id)arg1 inLayoutMode:(long long)arg2;
- (id)layoutHost;
- (void)layoutHostContainerViewDidLayoutSubviews:(id)arg1;
- (void)layoutHostContainerViewWillLayoutSubviews:(id)arg1;
- (long long)layoutMode;
- (id)leadingLock;
- (id)lockProvider;
- (long long)maximumSupportedLayoutMode;
- (long long)minimumSupportedLayoutMode;
- (struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })preferredEdgeOutsetsForLayoutMode:(long long)arg1 suggestedOutsets:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg2 maximumOutsets:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (long long)preferredLayoutMode;
- (bool)preventsSwipeToHide;
- (id)prominentLock;
- (void)setAuthenticated:(bool)arg1;
- (void)setBloomed:(bool)arg1;
- (void)setContentProvider:(id)arg1;
- (void)setElementHost:(id)arg1;
- (void)setEmpty:(bool)arg1;
- (void)setLayoutHost:(id)arg1;
- (void)setLayoutMode:(long long)arg1 reason:(long long)arg2;
- (void)setLockProvider:(id)arg1;
- (void)setTrailingPackageProvider:(id)arg1;
- (void)shake;
- (bool)shouldIgnoreSystemChromeSuppression;
- (bool)shouldSuppressElementWhileOnCoversheet;
- (bool)shouldSuppressElementWhileOverLiquidDetectionCriticalU;
- (struct CGSize { double x1; double x2; })sizeThatFitsSize:(struct CGSize { double x1; double x2; })arg1 forProvidedView:(id)arg2 inLayoutMode:(long long)arg3;
- (long long)systemApertureCustomLayout;
- (id)trailingPackageProvider;
- (id)trailingPackageView;
- (id)viewProvider;

@end
