
@interface MRExternalDevice : NSObject {
    long long  _connectionRecoveryBehavior;
    unsigned int  _connectionState;
    NSMutableDictionary * _discoveryConfigurations;
    NSMutableDictionary * _discoveryModes;
    NSMutableDictionary * _discoveryOutputDevicesCallbacks;
    NSArray * _personalOutputDevices;
    bool  _usingSystemPairing;
    bool  _valid;
    bool  _wantsEndpointChangeNotifications;
}

@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (nonatomic) long long connectionRecoveryBehavior;
@property (nonatomic, readonly) unsigned int connectionState;
@property (nonatomic, readonly) MROrigin *customOrigin;
@property (nonatomic, readonly) MRDeviceInfo *deviceInfo;
@property (nonatomic, readonly) NSString *hostName;
@property (nonatomic, readonly) NSString *name;
@property (getter=isPaired, nonatomic, readonly) bool paired;
@property (nonatomic, readonly) NSArray *personalOutputDevices;
@property (nonatomic, readonly) long long port;
@property (nonatomic, copy) NSArray *subscribedPlayerPaths;
@property (nonatomic, readonly) MRSupportedProtocolMessages *supportedMessages;
@property (nonatomic, readonly) bool supportsExternalDiscovery;
@property (nonatomic, readonly) bool supportsIdleDisconnection;
@property (nonatomic, readonly) NSString *uid;
@property (getter=isUsingSystemPairing, nonatomic) bool usingSystemPairing;
@property (getter=isValid, nonatomic, readonly) bool valid;
@property (nonatomic) bool wantsEndpointChangeNotifications;
@property (nonatomic) bool wantsNowPlayingArtworkNotifications;
@property (nonatomic) bool wantsNowPlayingNotifications;
@property (nonatomic) bool wantsOutputDeviceNotifications;
@property (nonatomic) bool wantsSystemEndpointNotifications;
@property (nonatomic) bool wantsVolumeNotifications;

- (void).cxx_destruct;
- (id)_init;
- (void)adjustOutputDeviceVolume:(long long)arg1 outputDeviceUID:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)connectWithOptions:(unsigned int)arg1;
- (void)connectWithOptions:(unsigned int)arg1 userInfo:(id)arg2;
- (void)connectWithOptions:(unsigned int)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (long long)connectionRecoveryBehavior;
- (unsigned int)connectionState;
- (void)createHostedEndpointWithOutputDeviceUIDs:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)currentClientUpdatesConfigMessage;
- (id)customOrigin;
- (id)deviceInfo;
- (void)disconnect:(id)arg1;
- (id)discoveryDescription;
- (id)errorForCurrentState;
- (id)hostName;
- (bool)isConnected;
- (bool)isPaired;
- (bool)isUsingSystemPairing;
- (bool)isValid;
- (void)modifyByAddingDeviceUIDs:(id)arg1 removingDeviceUIDs:(id)arg2 settingDeviceUIDs:(id)arg3 addingClusterAwareDeviceUIDs:(id)arg4 removingClusterAwareDeviceUIDs:(id)arg5 settingClusterAwareDeviceUIDs:(id)arg6 withReplyQueue:(id)arg7 completion:(id /* block */)arg8;
- (void)muteOutputDeviceVolume:(bool)arg1 outputDeviceUID:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (id)name;
- (void)notifyDiscoveryOutputDevicesChanged:(id)arg1 forConfiguration:(id)arg2;
- (void)outputDeviceVolume:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)outputDeviceVolumeControlCapabilities:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)personalOutputDevices;
- (void)ping:(double)arg1 callback:(id /* block */)arg2 withQueue:(id)arg3;
- (long long)port;
- (id)registerDiscoveryTokenForConfiguration:(id)arg1;
- (void)removeFromParentGroup:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)sendButtonEvent:(struct _MRHIDButtonEvent { unsigned int x1; unsigned int x2; bool x3; })arg1;
- (void)sendClientUpdatesConfigMessage;
- (void)sendCustomData:(id)arg1 withName:(id)arg2;
- (void)setConnectionRecoveryBehavior:(long long)arg1;
- (void)setConnectionStateCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setConversationDetectionEnabled:(bool)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setCustomDataCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setDiscoveryMode:(unsigned int)arg1 forConfiguration:(id)arg2;
- (void)setDiscoveryMode:(unsigned int)arg1 forToken:(id)arg2;
- (void)setDiscoveryOutputDevicesChangedCallback:(id /* block */)arg1 forToken:(id)arg2;
- (void)setListeningMode:(id)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setNameCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setOutputDeviceVolume:(float)arg1 outputDeviceUID:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)setOutputDeviceVolume:(float)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setOutputDevicesRemovedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setOutputDevicesUpdatedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setPairingAllowedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setPairingCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setSubscribedPlayerPaths:(id)arg1;
- (void)setUsingSystemPairing:(bool)arg1;
- (void)setVolumeCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setVolumeChangedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setVolumeControlCapabilitiesCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setVolumeMutedChangedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setWantsEndpointChangeNotifications:(bool)arg1;
- (void)setWantsNowPlayingArtworkNotifications:(bool)arg1;
- (void)setWantsNowPlayingNotifications:(bool)arg1;
- (void)setWantsOutputDeviceNotifications:(bool)arg1;
- (void)setWantsSystemEndpointNotifications:(bool)arg1;
- (void)setWantsVolumeNotifications:(bool)arg1;
- (id)subscribedPlayerPaths;
- (id)supportedMessages;
- (bool)supportsExternalDiscovery;
- (bool)supportsIdleDisconnection;
- (id)uid;
- (void)unregisterDiscoveryToken:(id)arg1;
- (bool)wantsEndpointChangeNotifications;
- (bool)wantsNowPlayingArtworkNotifications;
- (bool)wantsNowPlayingNotifications;
- (bool)wantsOutputDeviceNotifications;
- (bool)wantsSystemEndpointNotifications;
- (bool)wantsVolumeNotifications;

@end
