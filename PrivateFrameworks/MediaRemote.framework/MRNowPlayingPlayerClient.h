
@interface MRNowPlayingPlayerClient : NSObject <MRNowPlayingClientState> {
    NSDate * _activeRequestedDate;
    NSMutableDictionary * _cachedContentItemChangedForPendingPlaybackQueueRequest;
    bool  _canBeNowPlayingPlayer;
    double  _canBeNowPlayingPlayerTimestamp;
    unsigned long long  _capabilities;
    MRNowPlayingPlayerClientCallbacks * _clientCallbacks;
    NSMutableArray * _enqueuedContentItemChangesForPendingPlaybackQueueInvalidation;
    NSMutableSet * _homeUserIdentifiers;
    double  _invalidatationTimestamp;
    bool  _invalidatingPlaybackQueue;
    NSDate * _lastReceivedCommandDate;
    MRNowPlayingArtwork * _nowPlayingArtwork;
    NSDictionary * _nowPlayingInfo;
    NSMutableDictionary * _pendingPlaybackSessionMigrateEvents;
    bool  _pictureInPictureEnabled;
    MRPlaybackQueue * _playbackQueue;
    unsigned int  _playbackState;
    NSDate * _playbackStateDate;
    MRPlayerPath * _playerPath;
    NSObject<OS_dispatch_queue> * _replayQueue;
    NSObject<OS_dispatch_queue> * _serialQueue;
    MRPlaybackQueueSubscriptionController * _subscriptionController;
    NSArray * _supportedCommands;
}

@property (nonatomic, retain) NSDate *activeRequestedDate;
@property (nonatomic) bool canBeNowPlayingPlayer;
@property (nonatomic) unsigned long long capabilities;
@property (nonatomic, readonly) MRNowPlayingPlayerClientCallbacks *clientCallbacks;
@property (nonatomic, readonly) bool hasReceivedCommandRecently;
@property (nonatomic) double invalidatationTimestamp;
@property (nonatomic) bool invalidatingPlaybackQueue;
@property (nonatomic, retain) MRNowPlayingArtwork *nowPlayingArtwork;
@property (nonatomic, readonly) MRContentItem *nowPlayingContentItem;
@property (nonatomic, copy) NSDictionary *nowPlayingInfo;
@property (getter=isPictureInPictureEnabled, nonatomic) bool pictureInPictureEnabled;
@property (nonatomic, retain) MRPlaybackQueue *playbackQueue;
@property (nonatomic, readonly) unsigned int playbackState;
@property (nonatomic, retain) MRPlayerPath *playerPath;
@property (nonatomic, readonly) MRPlaybackQueueSubscriptionController *subscriptionController;
@property (nonatomic, readonly) NSArray *supportedCommands;

- (void).cxx_destruct;
- (id)activeRequestedDate;
- (void)addPendingPlaybackSessionMigrateEvent:(id)arg1;
- (void)addPendingRequest:(id)arg1;
- (void)appendHomeUserIdentifier:(id)arg1;
- (bool)canBeNowPlayingPlayer;
- (unsigned long long)capabilities;
- (void)clearCachedContentItemArtworkForItems:(id)arg1;
- (void)clearHomeUserIdentifiers;
- (id)clientCallbacks;
- (id)debugDescription;
- (id)description;
- (void)flushPendingPlaybackSessionMigrateEvents:(id /* block */)arg1;
- (bool)hasReceivedCommandRecently;
- (id)homeUserIdentifiers;
- (id)initWithPlayerPath:(id)arg1;
- (double)invalidatationTimestamp;
- (void)invalidatePlaybackQueue;
- (void)invalidatePlaybackQueueWithPlaybackQueue:(id)arg1;
- (bool)invalidatingPlaybackQueue;
- (bool)isPictureInPictureEnabled;
- (id)nowPlayingArtwork;
- (id)nowPlayingContentItem;
- (id)nowPlayingInfo;
- (id)playbackQueue;
- (unsigned int)playbackState;
- (id)playerPath;
- (bool)removePendingPlaybackSessionMigrateEvent:(id)arg1;
- (unsigned int)resolveCommand:(unsigned int)arg1;
- (id)resolveCommandOptions:(unsigned int)arg1 options:(id)arg2;
- (void)restoreNowPlayingClientState;
- (void)sendContentItemChanges:(id)arg1;
- (void)setActiveRequestedDate:(id)arg1;
- (void)setCanBeNowPlayingPlayer:(bool)arg1;
- (void)setCapabilities:(unsigned long long)arg1;
- (void)setHomeUserIdentifier:(id)arg1;
- (void)setInvalidatationTimestamp:(double)arg1;
- (void)setInvalidatingPlaybackQueue:(bool)arg1;
- (void)setNowPlayingArtwork:(id)arg1;
- (void)setNowPlayingInfo:(id)arg1;
- (void)setPictureInPictureEnabled:(bool)arg1;
- (void)setPlaybackQueue:(id)arg1;
- (void)setPlayerPath:(id)arg1;
- (void)setSupportedCommands:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)startCachingContentItemUpdatesForItem:(id)arg1 forPendingRequest:(id)arg2;
- (id)subscriptionController;
- (id)supportedCommands;
- (void)updatePlaybackQueueWithCachedUpdates:(id)arg1 forPendingRequest:(id)arg2;
- (void)updatePlaybackState:(unsigned int)arg1 date:(id)arg2;
- (void)updatePlayer:(id)arg1;

@end
