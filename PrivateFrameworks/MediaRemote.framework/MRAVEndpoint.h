
@interface MRAVEndpoint : NSObject {
    long long  _connectionType;
    NSString * _localizedName;
    MROutputContextDataSource * _outputContextDataSource;
    bool  _outputDevicesDidChangeNotificationScheduled;
    NSString * _uniqueIdentifier;
}

@property (nonatomic, readonly) bool canModifyGroupMembership;
@property (getter=isCompanionEndpoint, nonatomic, readonly) bool companionEndpoint;
@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (nonatomic, readonly) long long connectionType;
@property (nonatomic, readonly) NSString *debugName;
@property (nonatomic, readonly) _MRAVEndpointDescriptorProtobuf *descriptor;
@property (nonatomic, readonly) MRAVOutputDevice *designatedGroupLeader;
@property (nonatomic, readonly) MRDeviceInfo *deviceInfo;
@property (nonatomic, retain) MRExternalDevice *externalDevice;
@property (nonatomic, readonly) MRAVOutputDevice *groupLeader;
@property (nonatomic, readonly) MRGroupSessionInfo *groupSessionInfo;
@property (getter=isGroupable, nonatomic, readonly) bool groupable;
@property (nonatomic, readonly) NSDictionary *jsonEncodableDictionaryRepresentation;
@property (getter=isLocalEndpoint, nonatomic, readonly) bool localEndpoint;
@property (nonatomic, retain) NSString *localizedName;
@property (nonatomic, readonly) unsigned long long logicalOutputDeviceCount;
@property (nonatomic, readonly) MROrigin *origin;
@property (nonatomic, retain) MROutputContextDataSource *outputContextDataSource;
@property (nonatomic, readonly) NSArray *outputDeviceUIDs;
@property (nonatomic, readonly) NSArray *outputDevices;
@property (nonatomic, readonly) NSArray *personalOutputDevices;
@property (nonatomic, readonly) MRAVOutputDevice *predictedOutputDevice;
@property (getter=isProxyGroupPlayer, nonatomic, readonly) bool proxyGroupPlayer;
@property (nonatomic, readonly) NSArray *resolvedOutputDevices;
@property (nonatomic, readonly) NSString *shortDescription;
@property (nonatomic, readonly) NSArray *syncedOutputDevices;
@property (nonatomic, retain) NSString *uniqueIdentifier;
@property (nonatomic, readonly) float volume;
@property (nonatomic, readonly) unsigned int volumeCapabilities;
@property (getter=isVolumeMuted, nonatomic, readonly) bool volumeMuted;

+ (void)_notifyDidAddOutputDevice:(id)arg1 endpoint:(id)arg2;
+ (void)_notifyDidChangeOutputDevice:(id)arg1 endpoint:(id)arg2;
+ (void)_notifyDidChangePredictedOutputDevice:(id)arg1 endpoint:(id)arg2;
+ (void)_notifyDidRemoveOutputDevice:(id)arg1 endpoint:(id)arg2;
+ (void)_notifyEndpointDidConnect:(id)arg1;
+ (void)_notifyEndpointDidDisconnect:(id)arg1 withError:(id)arg2;
+ (void)_notifyVolumeCapabilitiesDidChange:(unsigned int)arg1 outputDevice:(id)arg2 endpoint:(id)arg3;
+ (void)_notifyVolumeDidChange:(float)arg1 outputDevice:(id)arg2 endpoint:(id)arg3;
+ (void)_notifyVolumeMutedDidChange:(bool)arg1 outputDevice:(id)arg2 endpoint:(id)arg3;
+ (id)_userInfoFromEndpoint:(id)arg1 outputDevice:(id)arg2;
+ (void)createEndpointWithOutputDeviceUIDs:(id)arg1 options:(unsigned long long)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
+ (void)createEndpointWithOutputDeviceUIDs:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
+ (void)directEndpointForOutputDeviceUIDs:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
+ (void)hostedEndpointForOutputDeviceUIDs:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;

- (void).cxx_destruct;
- (void)_adjustOutputDeviceVolume:(long long)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (id)_externalOutputContext;
- (id)_init;
- (void)_muteOutputDeviceVolume:(bool)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)_setOutputDeviceVolume:(float)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)addOutputDevices:(id)arg1 initiator:(id)arg2 withReplyQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)adjustOutputDeviceVolume:(long long)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)adjustOutputDeviceVolume:(long long)arg1 outputDevice:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)adjustVolume:(long long)arg1 details:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)adjustVolume:(long long)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)canMigrateToEndpoint:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (bool)canModifyGroupMembership;
- (void)connectToExternalDeviceWithOptions:(unsigned int)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)connectToExternalDeviceWithUserInfo:(id)arg1 completion:(id /* block */)arg2;
- (long long)connectionType;
- (bool)containsOutputDeviceWithUID:(id)arg1;
- (void)createHostedEndpointWithOutputDeviceUIDs:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)debugDescription;
- (id)debugName;
- (id)description;
- (id)descriptor;
- (id)designatedGroupLeader;
- (id)deviceInfo;
- (id)discoverySessionWithConfiguration:(id)arg1;
- (bool)effectivelyEqual:(id)arg1;
- (id)externalDevice;
- (id)groupLeader;
- (id)groupSessionInfo;
- (unsigned long long)hash;
- (bool)isCompanionEndpoint;
- (bool)isConnected;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToEndpoint:(id)arg1;
- (bool)isGroupable;
- (bool)isLocalEndpoint;
- (void)isMutedOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (bool)isProxyGroupPlayer;
- (bool)isVolumeMuted;
- (id)jsonEncodableDictionaryRepresentation;
- (id)localizedName;
- (unsigned long long)logicalOutputDeviceCount;
- (void)migrateToEndpoint:(id)arg1 request:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)migrateToEndpointOrSetOutputDevices:(id)arg1 request:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)migrateToOrAddOutputDevices:(id)arg1 initiator:(id)arg2 withReplyQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)migrateToOrSetOutputDevices:(id)arg1 initiator:(id)arg2 withReplyQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)migrateToOutputDevice:(id)arg1 request:(id)arg2 initiator:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)migrateToOutputDevices:(id)arg1 request:(id)arg2 initiator:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)muteOutputDeviceVolume:(bool)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)muteOutputDeviceVolume:(bool)arg1 outputDevice:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)muteVolume:(bool)arg1 details:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)muteVolume:(bool)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)origin;
- (id)outputContextDataSource;
- (void)outputContextDataSourceDidAddOutputDevice:(id)arg1;
- (void)outputContextDataSourceDidChangeOutputDevice:(id)arg1;
- (void)outputContextDataSourceDidRemoveOutputDevice:(id)arg1;
- (void)outputContextDataSourceOutputDeviceDidChangeVolume:(id)arg1;
- (void)outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:(id)arg1;
- (void)outputContextDataSourceOutputDeviceDidChangeVolumeMuted:(id)arg1;
- (void)outputContextDidChangePredictedOutputDevice:(id)arg1;
- (id)outputDeviceForUID:(id)arg1;
- (void)outputDeviceIsMuted:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)outputDeviceUIDs;
- (id)outputDeviceUIDsMatchingPredicate:(id /* block */)arg1;
- (void)outputDeviceVolume:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)outputDeviceVolumeControlCapabilities:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)outputDeviceVolumeMuted:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)outputDeviceWithUID:(id)arg1;
- (id)outputDevices;
- (id)outputDevicesMatchingPredicate:(id /* block */)arg1;
- (void)performMigrationToEndpoint:(id)arg1 request:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)performMigrationToOutputDevices:(id)arg1 request:(id)arg2 initiator:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (id)personalOutputDevices;
- (id)predictedOutputDevice;
- (void)removeOutputDeviceFromParentGroup:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)removeOutputDevices:(id)arg1 initiator:(id)arg2 withReplyQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)resetPredictedOutputDevice;
- (id)resolvedOutputDevices;
- (void)scheduleEndpointOutputDevicesDidChangeNotification;
- (void)setAllowsHeadTrackedSpatialAudio:(bool)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setConversationDetectionEnabled:(bool)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setExternalDevice:(id)arg1;
- (void)setHeadTrackedSpatialAudioMode:(id)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setIsMuted:(bool)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)setListeningMode:(id)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setLocalizedName:(id)arg1;
- (void)setOutputContextDataSource:(id)arg1;
- (void)setOutputDeviceIsMuted:(bool)arg1 outputDevice:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setOutputDeviceVolume:(float)arg1 outputDevice:(id)arg2 details:(id)arg3 queue:(id)arg4 completion:(id /* block */)arg5;
- (void)setOutputDeviceVolume:(float)arg1 outputDevice:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setOutputDevices:(id)arg1 initiator:(id)arg2 fadeAudio:(bool)arg3 withReplyQueue:(id)arg4 completion:(id /* block */)arg5;
- (void)setOutputDevices:(id)arg1 initiator:(id)arg2 withReplyQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)setUniqueIdentifier:(id)arg1;
- (void)setVolume:(float)arg1 details:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setVolume:(float)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)shortDescription;
- (id)syncedOutputDevices;
- (id)uniqueIdentifier;
- (float)volume;
- (unsigned int)volumeCapabilities;
- (void)volumeControlCapabilitiesOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)volumeMutedOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)volumeOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)willStartingPlaybackToOutputDeviceInterruptPlayback:(id)arg1 duration:(double)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)willStartingPlaybackToOutputDevicesInterruptPlayback:(id)arg1 originatingOutputDeviceUID:(id)arg2 duration:(double)arg3 queue:(id)arg4 completion:(id /* block */)arg5;

@end
