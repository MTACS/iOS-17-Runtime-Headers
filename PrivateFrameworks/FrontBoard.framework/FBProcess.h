
@interface FBProcess : NSObject <FBProcessBootstrapping, FBSProcess, FBSProcessInternal, RBSProcessMatching> {
    BSAuditToken * _auditToken;
    NSError * _bootstrapError;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _bootstrapLock;
    NSString * _bundleIdentifier;
    bool  _calloutQueue_sentAppDidLaunch;
    bool  _calloutQueue_sentAppWillLaunch;
    bool  _calloutQueue_sentDidExit;
    bool  _calloutQueue_sentWillExit;
    NSString * _description;
    double  _execTime;
    NSString * _executablePath;
    FBProcessExecutionContext * _executionContext;
    BSProcessHandle * _handle;
    RBSProcessIdentity * _identity;
    struct os_unfair_recursive_lock_s { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } ourl_lock; 
        unsigned int ourl_count; 
    }  _lock;
    FBSApplicationInfo * _lock_applicationInfo;
    bool  _lock_attemptedBootstrap;
    NSMutableArray * _lock_bootstrapBlocks;
    <FBProcessDelegate> * _lock_delegate;
    bool  _lock_didExit;
    long long  _lock_executableLivesOnSystemPartition;
    FBProcessExitContext * _lock_exitContext;
    BSAbsoluteMachTimer * _lock_exitTimer;
    RBSAssertion * _lock_gracefulExitAssertion;
    bool  _lock_invalidated;
    FBSProcessExecutionProvision * _lock_latestViolatedProvision;
    NSMutableArray * _lock_launchCompletionBlocks;
    bool  _lock_launchFinalized;
    bool  _lock_launchSuccess;
    bool  _lock_pendingExit;
    long long  _lock_platformBinary;
    RBSProcessState * _lock_rbsState;
    unsigned char  _lock_sceneState;
    FBProcessState * _lock_state;
    NSMutableArray * _lock_terminateRequestCompletionBlocks;
    FBSProcessTerminationRequest * _lock_terminationRequest;
    FBProcessWatchdogEventContext * _lock_terminationWatchdogContext;
    bool  _lock_updatingState;
    bool  _lock_waitForDebugger;
    FBProcessWatchdog * _lock_watchdog;
    FBProcessCPUStatistics * _lock_watchdogCPUStatistics;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _observerLock;
    NSMutableSet * _observerLock_observers;
    int  _pid;
    RBSProcessHandle * _rbsHandle;
    FBSProcessWatchdogPolicy * _sceneCreateWatchdogPolicy;
    RBSTarget * _target;
    long long  _terminationReason;
    long long  _versionedPID;
    <FBProcessWatchdogProviding> * _watchdogProvider;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _watchdogProviderLock;
    FBWorkspace * _workspace;
}

@property (nonatomic, readonly) FBSApplicationInfo *applicationInfo;
@property (nonatomic, readonly) unsigned char assertionState;
@property (nonatomic, readonly) BSAuditToken *auditToken;
@property (getter=isBeingDebugged, nonatomic, readonly) bool beingDebugged;
@property (nonatomic, readonly, copy) NSString *bundleIdentifier;
@property (getter=isCurrentProcess, nonatomic, readonly) bool currentProcess;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <FBProcessDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double execTime;
@property (nonatomic, readonly) bool executableLivesOnSystemPartition;
@property (nonatomic, readonly, copy) NSString *executablePath;
@property (nonatomic, readonly, copy) FBProcessExecutionContext *executionContext;
@property (nonatomic, readonly) FBProcessExitContext *exitContext;
@property (getter=isFinishedLaunching, nonatomic, readonly) bool finishedLaunching;
@property (getter=isForeground, nonatomic, readonly) bool foreground;
@property (nonatomic, readonly) BSProcessHandle *handle;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) RBSProcessIdentity *identity;
@property (nonatomic, readonly, copy) NSString *name;
@property (getter=isPendingExit, nonatomic, readonly) bool pendingExit;
@property (nonatomic, readonly) int pid;
@property (getter=isPlatformBinary, nonatomic, readonly) bool platformBinary;
@property (nonatomic, readonly) RBSProcessHandle *rbsHandle;
@property (getter=isRunning, nonatomic, readonly) bool running;
@property (nonatomic, readonly, copy) FBProcessState *state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) RBSTarget *target;
@property (nonatomic, readonly, retain) BSMachPortTaskNameRight *taskNameRight;
@property (nonatomic, readonly) long long versionedPID;
@property (nonatomic, readonly) FBWorkspace *workspace;

// Image: /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard

+ (id)_currentProcess;
+ (id)calloutQueue;
+ (id)createCurrentProcess;
+ (id)createProcessWithExecutionContext:(id)arg1;
+ (id)createProcessWithHandle:(id)arg1;

- (void).cxx_destruct;
- (void)_bootstrapAndExec;
- (void)_bootstrapDidComplete;
- (void)_configureIntrinsicsFromHandle:(id)arg1;
- (id)_createBootstrapContext;
- (void)_executeBlockAfterBootstrap:(id /* block */)arg1;
- (void)_executeBlockAfterLaunchCompletes:(id /* block */)arg1;
- (void)_executeBlockAsCurrentProcess:(id /* block */)arg1;
- (void)_finishInit;
- (id)_initWithIdentity:(id)arg1 handle:(id)arg2 executionContext:(id)arg3;
- (void)_killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3 completion:(id /* block */)arg4;
- (void)_launchDidComplete:(bool)arg1 finalizeBlock:(id /* block */)arg2;
- (void)_lock_consumeLock_executeTerminationRequest;
- (void)_lock_consumeLock_performGracefulKill;
- (id)_newWatchdogForContext:(id)arg1 completion:(id /* block */)arg2;
- (void)_noteAssertionStateDidChange;
- (void)_notePendingExitForReason:(id)arg1;
- (void)_noteProcessDidExit:(id)arg1;
- (void)_noteStateDidUpdate:(id)arg1;
- (id)_observers;
- (void)_processDidExitWithContext:(id)arg1;
- (void)_rebuildState;
- (void)_rebuildState:(id)arg1;
- (void)_setSceneLifecycleState:(unsigned char)arg1;
- (bool)_shouldWatchdogWithDeclineReason:(id*)arg1;
- (bool)_startWatchdogTimerForContext:(id)arg1;
- (void)_terminateWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)_terminateWithRequest:(id)arg1 forWatchdog:(id)arg2;
- (void)_updateStateWithBlock:(id /* block */)arg1;
- (bool)_watchdog:(id)arg1 shouldTerminateWithDeclineReason:(out id*)arg2;
- (id)_watchdog:(id)arg1 terminationRequestForViolatedProvision:(id)arg2 error:(id)arg3;
- (id)_watchdogProvider;
- (long long)_watchdogReportType;
- (void)addObserver:(id)arg1;
- (id)applicationInfo;
- (unsigned char)assertionState;
- (id)auditToken;
- (void)bootstrapLock:(id /* block */)arg1;
- (bool)bootstrapWithDelegate:(id)arg1;
- (id)bundleIdentifier;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (double)execTime;
- (bool)executableLivesOnSystemPartition;
- (id)executablePath;
- (id)executionContext;
- (id)exitContext;
- (bool)finishedLaunching;
- (id)handle;
- (bool)hasEntitlement:(id)arg1;
- (id)identity;
- (id)init;
- (void)invalidate;
- (bool)isApplicationProcess;
- (bool)isBeingDebugged;
- (bool)isCurrentProcess;
- (bool)isExtensionProcess;
- (bool)isFinishedLaunching;
- (bool)isForeground;
- (bool)isPendingExit;
- (bool)isPlatformBinary;
- (bool)isRunning;
- (bool)isSystemApplicationProcess;
- (bool)matchesProcess:(id)arg1;
- (id)name;
- (void)noteProcessPublished;
- (int)pid;
- (id)processPredicate;
- (id)rbsHandle;
- (void)removeObserver:(id)arg1;
- (void)setWatchdogProvider:(id)arg1;
- (id)state;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (id)target;
- (id)taskNameRight;
- (long long)taskState;
- (id)valueForEntitlement:(id)arg1;
- (long long)versionedPID;
- (long long)visibility;
- (id)workspace;

// Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard

- (id)sb_bundleIdentifierWithFallback;
- (bool)sb_isProbablyUIApplication;

@end
