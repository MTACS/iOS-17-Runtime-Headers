
@interface NTKPigmentEditOption : NTKEditOption <NSCopying, NSSecureCoding, NTKPigmentEditOptionConvertible> {
    NSString * _alternativeLocalizedStringTableName;
    NSString * _bundlePrincipalClassName;
    NSString * _collectionName;
    double  _colorFraction;
    NSNumber * _desiredPosition;
    NSString * _effectiveCollectionName;
    NSString * _effectiveOptionName;
    bool  _fromStore;
    NSString * _fullname;
    bool  _isAddable;
    bool  _isSensitiveUI;
    bool  _loadedBundleFromClass;
    NSString * _localizedCollectionName;
    NSString * _localizedName;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSBundle * _mainBundle;
    NSString * _optionName;
    bool  _sortedByHue;
    NSBundle * _sourceBundle;
    bool  _supportsSlider;
}

@property (nonatomic, retain) NSString *alternativeLocalizedStringTableName;
@property (nonatomic, retain) NSString *bundlePrincipalClassName;
@property (nonatomic, readonly) NSString *collectionName;
@property (nonatomic, readonly) double colorFraction;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSNumber *desiredPosition;
@property (nonatomic, retain) NSString *effectiveCollectionName;
@property (nonatomic, retain) NSString *effectiveOptionName;
@property (getter=isFromStore, nonatomic) bool fromStore;
@property (nonatomic, retain) NSString *fullname;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic) bool isAddable;
@property (nonatomic) bool isSensitiveUI;
@property (nonatomic, readonly) bool isVisible;
@property (nonatomic) bool loadedBundleFromClass;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } lock;
@property (nonatomic, readonly) NSBundle *mainBundle;
@property (nonatomic, readonly) NSString *optionName;
@property (nonatomic) bool sortedByHue;
@property (nonatomic, retain) NSBundle *sourceBundle;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsSlider;

+ (double)defaultFraction;
+ (id)duotoneNameWithName:(id)arg1 otherName:(id)arg2;
+ (void)effectiveNamesFromName:(id)arg1 effectiveCollectionName:(inout id*)arg2 effectiveOptionName:(inout id*)arg3;
+ (id)fullnameWithCollectionName:(id)arg1 optionName:(id)arg2;
+ (bool)hasInlineCollectionInOptionName:(id)arg1;
+ (bool)isMultitoneOptionWithOptionName:(id)arg1;
+ (id)legacyOptionWithPigmentEditOption:(id)arg1 forDevice:(id)arg2;
+ (id)multitoneColorNames:(id)arg1;
+ (id)multitonePigmentAtIndex:(unsigned long long)arg1 forColorName:(id)arg2 groupName:(id)arg3;
+ (void)parseFullname:(id)arg1 collectionName:(inout id*)arg2 optionName:(inout id*)arg3 fraction:(double*)arg4;
+ (void)parserIdentifier:(id)arg1 collectionName:(id*)arg2 optionName:(id*)arg3 colorFraction:(double*)arg4 separator:(id)arg5;
+ (id)pigmentNamed:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)JSONObjectRepresentation;
- (id)JSONObjectRepresentationForFace:(id)arg1;
- (id)_buildFullname;
- (id)_resolveBundleWithBundlePrincipalClassName:(id)arg1;
- (id)alternativeLocalizedStringTableName;
- (id)bundlePrincipalClassName;
- (id)collectionName;
- (double)colorFraction;
- (id)copyWithCollectionOverride:(id)arg1;
- (id)copyWithColorFraction:(double)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dailySnapshotKey;
- (id)desiredPosition;
- (id)effectiveCollectionName;
- (id)effectiveOptionName;
- (void)encodeWithCoder:(id)arg1;
- (void)extractEffectiveCollectionName:(inout id*)arg1 effectiveOptionName:(inout id*)arg2;
- (id)fullname;
- (id)fullnameIncludingFraction;
- (unsigned long long)hash;
- (id)identifier;
- (id)initWithCoder:(id)arg1;
- (id)initWithDevice:(id)arg1;
- (id)initWithFullname:(id)arg1;
- (id)initWithJSONObjectRepresentation:(id)arg1 forDevice:(id)arg2;
- (id)initWithOptionName:(id)arg1 collectionName:(id)arg2;
- (id)initWithOptionName:(id)arg1 collectionName:(id)arg2 colorFraction:(double)arg3;
- (id)initWithProtoBuffer:(id)arg1;
- (bool)isAddable;
- (bool)isEqual:(id)arg1;
- (bool)isEqualIgnoringFraction:(id)arg1;
- (bool)isEquivalentToOption:(id)arg1;
- (bool)isFromStore;
- (bool)isMultiColor;
- (bool)isMultitoneOption;
- (bool)isPrideOption;
- (bool)isRainbowColor;
- (bool)isSensitiveUI;
- (bool)isValidOption;
- (bool)isVisible;
- (bool)isWhiteColor;
- (id)json;
- (id)legacyJSONRepresentationForFace:(id)arg1;
- (void)loadEffectiveNames;
- (bool)loadedBundleFromClass;
- (id)localizationTableNames;
- (id)localizedCollectionName;
- (id)localizedName;
- (id)localizedNameForKey:(id)arg1;
- (id)localizedNameForKey:(id)arg1 fromTable:(id)arg2 separatorString:(id)arg3;
- (id)localizedNameForKey:(id)arg1 table:(id)arg2;
- (struct os_unfair_lock_s { unsigned int x1; })lock;
- (id)mainBundle;
- (id)multitoneNamesWithoutCollection;
- (id)optionName;
- (id)pigmentEditOption;
- (id)protoBuffer;
- (void)setAlternativeLocalizedStringTableName:(id)arg1;
- (void)setBundlePrincipalClassName:(id)arg1;
- (void)setDesiredPosition:(id)arg1;
- (void)setEffectiveCollectionName:(id)arg1;
- (void)setEffectiveOptionName:(id)arg1;
- (void)setFromStore:(bool)arg1;
- (void)setFullname:(id)arg1;
- (void)setIsAddable:(bool)arg1;
- (void)setIsSensitiveUI:(bool)arg1;
- (void)setLoadedBundleFromClass:(bool)arg1;
- (void)setLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setSortedByHue:(bool)arg1;
- (void)setSourceBundle:(id)arg1;
- (void)setSupportsSlider:(bool)arg1;
- (bool)sortedByHue;
- (id)sourceBundle;
- (bool)supportsSlider;
- (long long)swatchStyle;
- (id)uniqueName;

@end
