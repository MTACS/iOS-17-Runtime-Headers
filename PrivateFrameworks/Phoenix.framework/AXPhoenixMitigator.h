
@interface AXPhoenixMitigator : NSObject <AXPhoenixDeviceLockMonitorObserver, AXPhoenixDisplayStatusMonitorObserver, AXPhoenixEventMonitorObserver, AXPhoenixWakeGestureMonitorObserver> {
    AXPhoenixMitigatorConfiguration * _configuration;
    <AXPhoenixMitigatorDelegate> * _delegate;
    bool  _deviceLocked;
    bool  _displayOn;
    AXEventProcessor * _eventProcessor;
    bool  _isHandHeld;
    bool  _isRunning;
    double  _lastDeviceLockedTimestamp;
    double  _lastDeviceUnlockedTimestamp;
    double  _lastDismissalTimestamp;
    double  _lastDisplayOffTimestamp;
    double  _lastDisplayOnTimestamp;
    double  _lastTouchInteractionGainTimestamp;
    double  _lastTouchInteractionLossTimestamp;
    double  _lastWakeGestureTimestamp;
    NSMutableArray * _monitors;
    int  _policyOption;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _touchOn;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool deviceLocked;
@property (nonatomic) bool displayOn;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isHandHeld;
@property (nonatomic) double lastDeviceLockedTimestamp;
@property (nonatomic) double lastDeviceUnlockedTimestamp;
@property (nonatomic) double lastDismissalTimestamp;
@property (nonatomic) double lastDisplayOffTimestamp;
@property (nonatomic) double lastDisplayOnTimestamp;
@property (nonatomic) double lastTouchInteractionGainTimestamp;
@property (nonatomic) double lastTouchInteractionLossTimestamp;
@property (nonatomic) double lastWakeGestureTimestamp;
@property (nonatomic) int policyOption;
@property (readonly) Class superclass;
@property (nonatomic) bool touchOn;

- (void).cxx_destruct;
- (id)_contextInfo:(bool)arg1;
- (void)_shouldTriggerEventWithTapData:(struct { double x1; double x2; double x3; double x4; })arg1 isDoubleTap:(bool)arg2 completion:(id /* block */)arg3;
- (void)_subscribeEventMonitor:(id)arg1;
- (void)_subscribeEventMonitors;
- (void)_unsubscribeEventMonitors;
- (id)configuration;
- (void)dealloc;
- (bool)deviceLocked;
- (bool)displayOn;
- (void)gestureMonitorDidReceiveSleepGesture:(id)arg1 timestamp:(double)arg2;
- (void)gestureMonitorDidReceiveWakeGesture:(id)arg1 timestamp:(double)arg2;
- (id)initWithDelegate:(id)arg1 configuration:(id)arg2;
- (bool)isHandHeld;
- (bool)isRunning;
- (double)lastDeviceLockedTimestamp;
- (double)lastDeviceUnlockedTimestamp;
- (double)lastDismissalTimestamp;
- (double)lastDisplayOffTimestamp;
- (double)lastDisplayOnTimestamp;
- (double)lastTouchInteractionGainTimestamp;
- (double)lastTouchInteractionLossTimestamp;
- (double)lastWakeGestureTimestamp;
- (void)phoenixDeviceLockMonitor:(id)arg1 didReceiveDeviceLockStateChanged:(bool)arg2 timestamp:(double)arg3;
- (void)phoenixDisplayStatusMonitor:(id)arg1 didReceiveDisplayStateChanged:(bool)arg2 timestamp:(double)arg3;
- (void)phoenixEventMonitorDidReceiveEvent:(id)arg1;
- (int)policyOption;
- (void)setDeviceLocked:(bool)arg1;
- (void)setDisplayOn:(bool)arg1;
- (void)setIsHandHeld:(bool)arg1;
- (void)setLastDeviceLockedTimestamp:(double)arg1;
- (void)setLastDeviceUnlockedTimestamp:(double)arg1;
- (void)setLastDismissalTimestamp:(double)arg1;
- (void)setLastDisplayOffTimestamp:(double)arg1;
- (void)setLastDisplayOnTimestamp:(double)arg1;
- (void)setLastTouchInteractionGainTimestamp:(double)arg1;
- (void)setLastTouchInteractionLossTimestamp:(double)arg1;
- (void)setLastWakeGestureTimestamp:(double)arg1;
- (void)setPolicyOption:(int)arg1;
- (void)setTouchOn:(bool)arg1;
- (void)setTouchOn:(bool)arg1 timestamp:(double)arg2;
- (void)shouldTriggerDoubleTapEventWithTapData:(struct { double x1; double x2; double x3; double x4; })arg1 completion:(id /* block */)arg2;
- (void)shouldTriggerTripleTapEventWithTapData:(struct { double x1; double x2; double x3; double x4; })arg1 completion:(id /* block */)arg2;
- (void)startWithCompletion:(id /* block */)arg1;
- (void)stop;
- (bool)touchOn;

@end
