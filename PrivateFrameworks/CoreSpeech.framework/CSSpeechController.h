
@interface CSSpeechController : NSObject <CSAudioAlertProvidingDelegate, CSAudioConverterDelegate, CSAudioDecoderDelegate, CSAudioSessionControllerDelegate, CSAudioSessionProvidingDelegate, CSAudioStreamProvidingDelegate, CSContinuousVoiceTriggerDelegate, CSEndpointAnalyzerImplDelegate, CSLanguageCodeUpdateMonitorDelegate, CSSmartSiriVolumeControllerDelegate, CSSpeakerRecognitionAssetDownloadMonitorDelegate, CSSpeakerRecognitionProxyProtocol, CSSpeechManagerDelegate, CSVoiceTriggerAssetHandlerDelegate, CSXPCClientDelegate, SOClockAlarmListening, SOClockTimerListening, SOMediaNowPlayingListening, SSRSpeakerRecognitionControllerDelegate> {
    unsigned long long  _activeChannel;
    SOClockAlarmObserver * _alarmMonitor;
    <CSAudioAlertProviding> * _alertProvider;
    CSAsset * _asset;
    NSObject<OS_dispatch_queue> * _audibleFeedbackQueue;
    CSAudioConverter * _audioConverter;
    CSAudioDeviceInfo * _audioDeviceInfo;
    CSPlainAudioFileWriter * _audioFileWriter;
    <CSAudioMeterProviding> * _audioMeterProvider;
    <CSAudioMetricProviding> * _audioMetricProvider;
    CSAudioRecordContext * _audioRecordContext;
    double  _audioSessionActivationDelay;
    CSAudioSessionController * _audioSessionController;
    CSAudioStream * _audioStream;
    NSString * _bundleIdFromDictation;
    float  _cachedAvgPower;
    float  _cachedPeakPower;
    bool  _canPerformDelayedStop;
    NSObject<OS_dispatch_queue> * _contextResetQueue;
    CSContinuousVoiceTrigger * _continuousVoiceTrigger;
    CSAudioZeroCounter * _continuousZeroCounter;
    unsigned long long  _decoderProcessedSampleCountForTV;
    NSMutableDictionary * _decodersForTV;
    <CSSpeechControllerDelegate> * _delegate;
    bool  _deviceRoleIsStereo;
    bool  _didDeliverFirstSpeechPacket;
    bool  _didDeliverLastBuffer;
    CSAudioSampleRateConverter * _downsampler;
    CSXPCClient * _duckAudioXPCClient;
    NSUUID * _endpointId;
    CSEndpointerProxy * _endpointerProxy;
    bool  _hasPerformedDelayedStop;
    bool  _hasRequestedTwoShotFeedback;
    bool  _isAlarmPlaying;
    bool  _isAsrOnDevice;
    bool  _isAudioSessionActivated;
    bool  _isHybridUODEnabled;
    bool  _isMediaPlaying;
    bool  _isNarrowBand;
    bool  _isOpus;
    bool  _isRemoteVADAvailableStream;
    bool  _isSiriClientListening;
    bool  _isSoundPlaying;
    bool  _isTimerPlaying;
    CSLanguageDetector * _languageDetector;
    <CSLanguageDetectorDelegate> * _languageDetectorDelegate;
    NSDictionary * _lastRTSTriggerInfo;
    NSDictionary * _lastVoiceTriggerInfo;
    NSString * _logEventUUID;
    unsigned long long  _maxAllowedTrailingSamplesAfterSchedulingStop;
    SOMediaNowPlayingObserver * _mediaPlayingMonitor;
    NSObject<OS_dispatch_queue> * _mediaPlayingObserverQueue;
    bool  _myriadPreventingTwoShotFeedback;
    CSAudioConverter * _narrowBandOpusConverter;
    unsigned long long  _numTrailingSamplesAfterSchedulingStop;
    CSAudioConverter * _opusAudioConverter;
    id /* block */  _pendingAudioSessionActivationCompletion;
    unsigned long long  _pendingAudioSessionActivationReason;
    NSUUID * _pendingAudioSessionActivationToken;
    CSAudioPowerMeter * _powerMeter;
    NSObject<OS_dispatch_queue> * _queue;
    CSRCHandlingXPCClient * _rcHandlingClient;
    NSString * _recordEventUUID;
    NSString * _requestMHUUID;
    NSDictionary * _requestedRecordSettings;
    CSAudioStopStreamOption * _requestedStopRecordingOptions;
    CSSACInfoMonitor * _sacInfoMonitor;
    CSSelectiveChannelAudioFileWriter * _serverLoggingWriter;
    <CSAudioSessionProviding> * _sessionProvider;
    bool  _setupStarted;
    bool  _shouldUseLanguageDetectorForCurrentRequest;
    <CSSpeakerIdentificationDelegate> * _speakerIdDelegate;
    SSRSpeakerRecognitionController * _speakerRecognitionController;
    CSSpeakerRecognitionProxy * _speakerRecognitionProxy;
    NSDictionary * _speakerRecognitionScores;
    CSSpeechEndHostTimeEstimator * _speechEndHostTimeEstimator;
    NSArray * _ssrAssets;
    NSString * _ssvLogFilePath;
    <CSAudioStreamProviding> * _streamProvider;
    bool  _supportHearstVoiceTrigger;
    bool  _supportLazySessionActivtion;
    bool  _supportPhatic;
    bool  _supportSessionActivateDelay;
    bool  _supportTriagleModeSessionActivationRetry;
    NSObject<OS_dispatch_queue> * _targetQueue;
    SOClockTimerObserver * _timerMonitor;
    NSObject<OS_dispatch_group> * _twoShotAudibleFeedbackDecisionGroup;
    bool  _twoShotNotificationEnabled;
    CSUncompressedAudioLogging * _uncompressedAudioLogging;
    SSRVoiceProfileManager * _voiceProfileManager;
    CSSmartSiriVolumeController * _volumeController;
    CSVolumeMonitor * _volumeMonitor;
    CSXPCClient * _xpcClient;
    CSXPCClientFactory * _xpcClientFactory;
}

@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic, retain) SOClockAlarmObserver *alarmMonitor;
@property (nonatomic, retain) <CSAudioAlertProviding> *alertProvider;
@property (nonatomic, retain) CSAsset *asset;
@property (nonatomic, retain) CSAudioDeviceInfo *audioDeviceInfo;
@property (nonatomic, retain) CSPlainAudioFileWriter *audioFileWriter;
@property (nonatomic, retain) <CSAudioMeterProviding> *audioMeterProvider;
@property (nonatomic, retain) <CSAudioMetricProviding> *audioMetricProvider;
@property (nonatomic, retain) CSAudioRecordContext *audioRecordContext;
@property (nonatomic) double audioSessionActivationDelay;
@property (nonatomic, retain) CSAudioSessionController *audioSessionController;
@property (nonatomic, retain) CSAudioStream *audioStream;
@property (nonatomic, retain) NSString *bundleIdFromDictation;
@property (nonatomic) float cachedAvgPower;
@property (nonatomic) float cachedPeakPower;
@property (nonatomic) bool canPerformDelayedStop;
@property (nonatomic, retain) CSContinuousVoiceTrigger *continuousVoiceTrigger;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long decoderProcessedSampleCountForTV;
@property (nonatomic, retain) NSMutableDictionary *decodersForTV;
@property (nonatomic) <CSSpeechControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool deviceRoleIsStereo;
@property (nonatomic) bool didDeliverFirstSpeechPacket;
@property (nonatomic) bool didDeliverLastBuffer;
@property (nonatomic, retain) CSXPCClient *duckAudioXPCClient;
@property (nonatomic, readonly) <CSEndpointAnalyzer> *endpointAnalyzer;
@property (nonatomic, readonly, copy) NSUUID *endpointId;
@property (nonatomic, retain) CSEndpointerProxy *endpointerProxy;
@property (nonatomic) bool hasPerformedDelayedStop;
@property (nonatomic) bool hasRequestedTwoShotFeedback;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAlarmPlaying;
@property (nonatomic) bool isAsrOnDevice;
@property (nonatomic) bool isAudioSessionActivated;
@property (nonatomic) bool isHybridUODEnabled;
@property (nonatomic) bool isMediaPlaying;
@property (nonatomic) bool isNarrowBand;
@property (nonatomic) bool isOpus;
@property (nonatomic) bool isRemoteVADAvailableStream;
@property (nonatomic) bool isSiriClientListening;
@property (nonatomic) bool isSoundPlaying;
@property (nonatomic) bool isTimerPlaying;
@property (nonatomic, retain) CSLanguageDetector *languageDetector;
@property (nonatomic) <CSLanguageDetectorDelegate> *languageDetectorDelegate;
@property (nonatomic, retain) NSString *logEventUUID;
@property (nonatomic) unsigned long long maxAllowedTrailingSamplesAfterSchedulingStop;
@property (nonatomic, retain) SOMediaNowPlayingObserver *mediaPlayingMonitor;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *mediaPlayingObserverQueue;
@property (nonatomic) bool myriadPreventingTwoShotFeedback;
@property (nonatomic) unsigned long long numTrailingSamplesAfterSchedulingStop;
@property (nonatomic, copy) id /* block */ pendingAudioSessionActivationCompletion;
@property (nonatomic) unsigned long long pendingAudioSessionActivationReason;
@property (nonatomic, retain) NSUUID *pendingAudioSessionActivationToken;
@property (nonatomic, retain) CSAudioPowerMeter *powerMeter;
@property (nonatomic, retain) CSRCHandlingXPCClient *rcHandlingClient;
@property (nonatomic, retain) NSString *recordEventUUID;
@property (nonatomic, retain) NSString *requestMHUUID;
@property (nonatomic, retain) CSAudioStopStreamOption *requestedStopRecordingOptions;
@property (nonatomic, retain) CSSACInfoMonitor *sacInfoMonitor;
@property (nonatomic, retain) CSSelectiveChannelAudioFileWriter *serverLoggingWriter;
@property (nonatomic, retain) <CSAudioSessionProviding> *sessionProvider;
@property (nonatomic) bool setupStarted;
@property (nonatomic) bool shouldUseLanguageDetectorForCurrentRequest;
@property (nonatomic) <CSSpeakerIdentificationDelegate> *speakerIdDelegate;
@property (nonatomic, retain) SSRSpeakerRecognitionController *speakerRecognitionController;
@property (nonatomic, retain) CSSpeakerRecognitionProxy *speakerRecognitionProxy;
@property (nonatomic, retain) NSDictionary *speakerRecognitionScores;
@property (nonatomic, retain) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator;
@property (nonatomic, retain) NSArray *ssrAssets;
@property (nonatomic, retain) NSString *ssvLogFilePath;
@property (nonatomic, retain) <CSAudioStreamProviding> *streamProvider;
@property (readonly) Class superclass;
@property (nonatomic) bool supportHearstVoiceTrigger;
@property (nonatomic) bool supportLazySessionActivtion;
@property (nonatomic) bool supportPhatic;
@property (nonatomic) bool supportSessionActivateDelay;
@property (nonatomic) bool supportTriagleModeSessionActivationRetry;
@property (nonatomic, retain) SOClockTimerObserver *timerMonitor;
@property (nonatomic) bool twoShotNotificationEnabled;
@property (nonatomic, retain) CSUncompressedAudioLogging *uncompressedAudioLogging;
@property (nonatomic, retain) SSRVoiceProfileManager *voiceProfileManager;
@property (nonatomic, retain) CSSmartSiriVolumeController *volumeController;
@property (nonatomic, retain) CSVolumeMonitor *volumeMonitor;
@property (nonatomic, retain) CSXPCClient *xpcClient;
@property (nonatomic, retain) CSXPCClientFactory *xpcClientFactory;

+ (bool)isSmartSiriVolumeAvailable;
+ (id)sharedController;

- (void).cxx_destruct;
- (void)CSLanguageCodeUpdateMonitor:(id)arg1 didReceiveLanguageCodeChanged:(id)arg2;
- (void)CSSpeakerRecognitionAssetDownloadMonitor:(id)arg1 didInstallNewAsset:(bool)arg2 assetProviderType:(unsigned long long)arg3;
- (void)CSXPCClient:(id)arg1 didDisconnect:(bool)arg2;
- (bool)_activateAudioSessionWithReason:(unsigned long long)arg1 delay:(double)arg2 delayRequested:(bool)arg3 error:(id*)arg4;
- (bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id*)arg2;
- (unsigned long long)_audibleFeedbackPlaybackReason;
- (void)_audioStreamProvdider:(id)arg1 audioBufferAvailable:(id)arg2;
- (unsigned long long)_calculateEstimatedSpeechEndHostTimeWithStopOptions:(id)arg1;
- (bool)_canDelayStopRecording;
- (bool)_canPlayTwoShotFeedbackDuringMediaPlayback;
- (void)_cancelPendingAudioSessionActivateForReason:(id)arg1;
- (id)_contextToString:(id)arg1;
- (id)_createAlarmMonitor;
- (void)_createAudioPowerMeterIfNeeded;
- (bool)_createAudioProviderFromXPCWithContext:(id)arg1;
- (void)_createLanguageDetectorIfNeeded;
- (id)_createMediaPlayingMonitor;
- (id)_createTimerMonitor;
- (long long)_currentAudioRecorderSampleRate;
- (bool)_currentConfigurationSupportsDucking;
- (void)_deviceAudioLoggingWithFileWriter:(id)arg1;
- (void)_didStopForReason:(long long)arg1;
- (bool)_doActivateAudioSessionWithReason:(unsigned long long)arg1 error:(id*)arg2;
- (id)_fetchAudioDecoderForTV:(unsigned int)arg1;
- (bool)_fetchAudioProviderWithContext:(id)arg1;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (bool)_fetchLastTriggerInfo;
- (void)_fetchMetricsAndLog;
- (id)_getSerialQueueWithName:(id)arg1 targetQueue:(id)arg2;
- (id)_getSpeechIdentifier;
- (void)_initializeAlarmState;
- (void)_initializeMediaPlayingState;
- (void)_initializeTimerState;
- (bool)_isDelayedDuckingSupportedContext;
- (bool)_isDuckingAvailableRoute:(id)arg1;
- (bool)_isHubRequestTV;
- (bool)_isRecordRouteBuiltinMic;
- (bool)_isRecordRouteStudioDisplay;
- (id)_languageDetectorOptionFromSettings:(id)arg1;
- (bool)_lazyActivateAudioSessionWithReason:(unsigned long long)arg1 error:(id*)arg2;
- (void)_logRecordingStopErrorIfNeeded:(long long)arg1;
- (id)_mapScoresToSharedSiriId:(id)arg1;
- (void)_performPendingAudioSessionActivateForReason:(id)arg1;
- (id)_processSpeakerRecognitionResult:(id)arg1;
- (void)_refreshSpeakerRecognitionAssets;
- (void)_scheduleActivateAudioSessionWithDelay:(double)arg1 sessionActivateReason:(unsigned long long)arg2 scheduleReason:(id)arg3 validator:(id /* block */)arg4 completion:(id /* block */)arg5;
- (void)_scheduleAudibleFeedbackAtStartRecording;
- (float)_scheduledAudibleFeedbackDelay;
- (void)_setAlarmIsPlaying:(bool)arg1;
- (void)_setMediaPlaybackState:(bool)arg1 isInterrupted:(bool)arg2;
- (void)_setSoundPlayingState;
- (void)_setTimerIsPlaying:(bool)arg1;
- (bool)_setupAudioConverter:(bool)arg1 isNarrowBand:(bool)arg2;
- (void)_setupAudioProviderFromXPC:(id)arg1;
- (void)_setupDownsamplerIfNeeded;
- (void)_setupSpeakerRecognitionController;
- (bool)_shouldCalculateEstimatedSpeechEndHostTimeFromCachedEPMetrics;
- (bool)_shouldFetchRaiseToSpeakInfo;
- (bool)_shouldFetchVoiceTriggerInfo;
- (bool)_shouldResetContextAtPrepare;
- (bool)_shouldRunHybridSDSDMitigation;
- (bool)_shouldSetStartSampleCount;
- (bool)_shouldSetStartSampleCountForRTS;
- (bool)_shouldTrackLaunchLatency;
- (bool)_shouldUseLanguageDetector:(id)arg1;
- (bool)_shouldUseSoundPlaybackMonitors;
- (void)_startFeedbackForTwoShotAtTime:(double)arg1;
- (void)_startPhaticDecision;
- (void)_startTwoShotFeedbackDecisionForDetectionAtTime:(double)arg1;
- (bool)_supportsHybridSDSD;
- (void)_teardownAudioProviderIfNeeded;
- (void)_updateRecordContextIfNeeded:(id)arg1;
- (unsigned long long)activeChannel;
- (id)alarmMonitor;
- (id)alertProvider;
- (unsigned long long)alertStartTime;
- (id)asset;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (void)audioConverterDidConvertPackets:(id)arg1 packets:(id)arg2 durationInSec:(float)arg3 timestamp:(unsigned long long)arg4 arrivalTimestampToAudioRecorder:(unsigned long long)arg5;
- (void)audioDecoderDidDecodePackets:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 timestamp:(unsigned long long)arg5 arrivalTimestampToAudioRecorder:(unsigned long long)arg6 wasBuffered:(bool)arg7 receivedNumChannels:(unsigned int)arg8;
- (id)audioDeviceInfo;
- (id)audioFileWriter;
- (id)audioMeterProvider;
- (id)audioMetricProvider;
- (id)audioRecordContext;
- (double)audioSessionActivationDelay;
- (id)audioSessionController;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;
- (void)audioSessionProvider:(id)arg1 didChangeContext:(bool)arg2;
- (void)audioSessionProvider:(id)arg1 didSetAudioSessionActive:(bool)arg2;
- (void)audioSessionProvider:(id)arg1 providerInvalidated:(bool)arg2;
- (void)audioSessionProvider:(id)arg1 willSetAudioSessionActive:(bool)arg2;
- (void)audioSessionProviderBeginInterruption:(id)arg1;
- (void)audioSessionProviderBeginInterruption:(id)arg1 withContext:(id)arg2;
- (void)audioSessionProviderEndInterruption:(id)arg1;
- (id)audioStream;
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 didHardwareConfigurationChange:(long long)arg2;
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectedly:(long long)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)averagePowerForOutputReference;
- (void)beginWaitingForMyriad;
- (id)bundleIdFromDictation;
- (float)cachedAvgPower;
- (float)cachedPeakPower;
- (bool)canPerformDelayedStop;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)clockAlarmObserver:(id)arg1 alarmDidDismiss:(id)arg2;
- (void)clockAlarmObserver:(id)arg1 alarmDidFire:(id)arg2;
- (void)clockAlarmObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)clockTimerObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)clockTimerObserver:(id)arg1 timerDidDismiss:(id)arg2;
- (void)clockTimerObserver:(id)arg1 timerDidFire:(id)arg2;
- (id)continuousVoiceTrigger;
- (void)continuousVoiceTrigger:(id)arg1 detectedSilenceAfterVoiceTriggerAt:(double)arg2;
- (void)continuousVoiceTrigger:(id)arg1 detectedVoiceTriggerResult:(id)arg2;
- (unsigned long long)decoderProcessedSampleCountForTV;
- (id)decodersForTV;
- (id)delegate;
- (bool)deviceRoleIsStereo;
- (bool)didDeliverFirstSpeechPacket;
- (bool)didDeliverLastBuffer;
- (void)didFinishSpeakerRecognition:(id)arg1;
- (void)didReceiveSpeakerRecognitionScoreCard:(id)arg1;
- (void)didTTSVolumeChange:(id)arg1 forReason:(unsigned long long)arg2;
- (id)duckAudioXPCClient;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)arg1;
- (id)endpointAnalyzer;
- (id)endpointId;
- (void)endpointer:(id)arg1 detectedTwoShotAtTime:(double)arg2;
- (id)endpointerModelVersion;
- (id)endpointerProxy;
- (void)fetchAudioMetricsWithCompletion:(id /* block */)arg1;
- (id)getAudioConverterForTest;
- (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })getLPCMAudioStreamBasicDescription;
- (void)getMitigationDecisionForRCId:(unsigned long long)arg1 requestId:(id)arg2 completion:(id /* block */)arg3;
- (double)getRecordBufferDuration;
- (float)getSmartSiriVolume;
- (float)getVolumeForTTSType:(unsigned long long)arg1;
- (void)handleStopRecordingRequestWithOptions:(id)arg1;
- (bool)hasPerformedDelayedStop;
- (bool)hasRequestedTwoShotFeedback;
- (id)init;
- (id)initWithEndpointId:(id)arg1;
- (id)initWithEndpointId:(id)arg1 xpcClientFactory:(id)arg2 endpointer:(id)arg3 continuousVoiceTrigger:(id)arg4 siriVolumeController:(id)arg5 mediaPlayingMonitor:(id)arg6 alarmMonitor:(id)arg7 timerMonitor:(id)arg8 sacInfoMonitor:(id)arg9 audioSessionController:(id)arg10 supportPhatic:(bool)arg11 supportHearstVoiceTrigger:(bool)arg12 supportTriagleModeSessionActivationRetry:(bool)arg13 supportSessionActivateDelay:(bool)arg14 supportLazySessionActivtion:(bool)arg15;
- (bool)initializeRecordSessionWithRecordContext:(id)arg1;
- (bool)isAlarmPlaying;
- (bool)isAsrOnDevice;
- (bool)isAudioSessionActivated;
- (bool)isHybridUODEnabled;
- (bool)isMediaPlaying;
- (bool)isNarrowBand;
- (bool)isOpus;
- (bool)isRecording;
- (bool)isRemoteVADAvailableStream;
- (bool)isSiriClientListening;
- (bool)isSmartSiriVolumeAvailable;
- (bool)isSoundPlaying;
- (bool)isTimerPlaying;
- (void)keywordDetectorDidDetectKeyword;
- (id)languageDetector;
- (id)languageDetectorDelegate;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)arg1;
- (double)lastEndOfVoiceActivityTime;
- (id)logEventUUID;
- (unsigned long long)maxAllowedTrailingSamplesAfterSchedulingStop;
- (id)mediaPlayingMonitor;
- (id)mediaPlayingObserverQueue;
- (bool)myriadPreventingTwoShotFeedback;
- (void)nowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3 lastPlayingDate:(id)arg4;
- (unsigned long long)numTrailingSamplesAfterSchedulingStop;
- (unsigned long long)outputReferenceChannel;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForOutputReference;
- (id /* block */)pendingAudioSessionActivationCompletion;
- (unsigned long long)pendingAudioSessionActivationReason;
- (id)pendingAudioSessionActivationToken;
- (bool)playAlertSoundForType:(long long)arg1;
- (bool)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)arg1;
- (id)playbackRoute;
- (id)powerMeter;
- (void)preheat;
- (bool)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (bool)prewarmAudioSession;
- (void)processRCWithId:(unsigned long long)arg1 requestId:(id)arg2 speechPackage:(id)arg3 taskId:(id)arg4 forceAccept:(bool)arg5 completionHandler:(id /* block */)arg6;
- (void)processServerEndpointFeatures:(id)arg1;
- (id)rcHandlingClient;
- (id)recordDeviceInfo;
- (id)recordEventUUID;
- (id)recordRoute;
- (id)recordSettings;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (id)requestMHUUID;
- (id)requestedStopRecordingOptions;
- (void)reset;
- (void)resetAudioSession;
- (void)resetEndpointer;
- (id)sacInfoMonitor;
- (id)serverLoggingWriter;
- (id)sessionProvider;
- (void)setActiveChannel:(unsigned long long)arg1;
- (void)setAlarmMonitor:(id)arg1;
- (void)setAlertProvider:(id)arg1;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2 force:(bool)arg3;
- (void)setAsset:(id)arg1;
- (void)setAudioDeviceInfo:(id)arg1;
- (void)setAudioFileWriter:(id)arg1;
- (void)setAudioMeterProvider:(id)arg1;
- (void)setAudioMetricProvider:(id)arg1;
- (void)setAudioRecordContext:(id)arg1;
- (void)setAudioSessionActivationDelay:(double)arg1;
- (void)setAudioSessionController:(id)arg1;
- (void)setAudioStream:(id)arg1;
- (void)setBundleIdFromDictation:(id)arg1;
- (void)setCachedAvgPower:(float)arg1;
- (void)setCachedPeakPower:(float)arg1;
- (void)setCanPerformDelayedStop:(bool)arg1;
- (void)setContinuousVoiceTrigger:(id)arg1;
- (bool)setCurrentRecordContext:(id)arg1 error:(id*)arg2;
- (void)setDecoderProcessedSampleCountForTV:(unsigned long long)arg1;
- (void)setDecodersForTV:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceRoleIsStereo:(bool)arg1;
- (void)setDidDeliverFirstSpeechPacket:(bool)arg1;
- (void)setDidDeliverLastBuffer:(bool)arg1;
- (void)setDuckAudioXPCClient:(id)arg1;
- (void)setDuckOthersOption:(bool)arg1;
- (void)setEndpointAnalyzerDelegate:(id)arg1;
- (void)setEndpointerOperationMode:(long long)arg1;
- (void)setEndpointerProxy:(id)arg1;
- (void)setHasPerformedDelayedStop:(bool)arg1;
- (void)setHasRequestedTwoShotFeedback:(bool)arg1;
- (void)setIsAlarmPlaying:(bool)arg1;
- (void)setIsAsrOnDevice:(bool)arg1;
- (void)setIsAudioSessionActivated:(bool)arg1;
- (void)setIsHybridUODEnabled:(bool)arg1;
- (void)setIsMediaPlaying:(bool)arg1;
- (void)setIsNarrowBand:(bool)arg1;
- (void)setIsOpus:(bool)arg1;
- (void)setIsRemoteVADAvailableStream:(bool)arg1;
- (void)setIsSiriClientListening:(bool)arg1;
- (void)setIsSoundPlaying:(bool)arg1;
- (void)setIsTimerPlaying:(bool)arg1;
- (void)setLanguageDetector:(id)arg1;
- (void)setLanguageDetectorDelegate:(id)arg1;
- (void)setLanguageDetectorInteractionID:(id)arg1;
- (void)setLogEventUUID:(id)arg1;
- (void)setMaxAllowedTrailingSamplesAfterSchedulingStop:(unsigned long long)arg1;
- (void)setMediaPlayingMonitor:(id)arg1;
- (void)setMediaPlayingObserverQueue:(id)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (void)setMyriadPreventingTwoShotFeedback:(bool)arg1;
- (void)setNumTrailingSamplesAfterSchedulingStop:(unsigned long long)arg1;
- (void)setPendingAudioSessionActivationCompletion:(id /* block */)arg1;
- (void)setPendingAudioSessionActivationReason:(unsigned long long)arg1;
- (void)setPendingAudioSessionActivationToken:(id)arg1;
- (void)setPermanentVolumeOffsetWithDirection:(bool)arg1;
- (void)setPowerMeter:(id)arg1;
- (void)setRcHandlingClient:(id)arg1;
- (bool)setRecordBufferDuration:(double)arg1;
- (void)setRecordEventUUID:(id)arg1;
- (void)setRequestMHUUID:(id)arg1;
- (void)setRequestedStopRecordingOptions:(id)arg1;
- (void)setSacInfoMonitor:(id)arg1;
- (void)setServerLoggingWriter:(id)arg1;
- (void)setSessionProvider:(id)arg1;
- (void)setSetupStarted:(bool)arg1;
- (void)setShouldUseLanguageDetectorForCurrentRequest:(bool)arg1;
- (void)setSmartSiriVolumeDirection:(bool)arg1;
- (void)setSmartSiriVolumePercentage:(float)arg1;
- (void)setSpeakerIdDelegate:(id)arg1;
- (void)setSpeakerRecognitionController:(id)arg1;
- (void)setSpeakerRecognitionProxy:(id)arg1;
- (void)setSpeakerRecognitionScores:(id)arg1;
- (void)setSpeechEndHostTimeEstimator:(id)arg1;
- (void)setSsrAssets:(id)arg1;
- (void)setSsvLogFilePath:(id)arg1;
- (void)setStreamProvider:(id)arg1;
- (void)setSupportHearstVoiceTrigger:(bool)arg1;
- (void)setSupportLazySessionActivtion:(bool)arg1;
- (void)setSupportPhatic:(bool)arg1;
- (void)setSupportSessionActivateDelay:(bool)arg1;
- (void)setSupportTriagleModeSessionActivationRetry:(bool)arg1;
- (void)setSynchronousCallbackEnabled:(bool)arg1;
- (void)setTimerMonitor:(id)arg1;
- (void)setTwoShotNotificationEnabled:(bool)arg1;
- (void)setUncompressedAudioLogging:(id)arg1;
- (void)setVoiceProfileManager:(id)arg1;
- (void)setVolumeController:(id)arg1;
- (void)setVolumeMonitor:(id)arg1;
- (void)setXpcClient:(id)arg1;
- (void)setXpcClientFactory:(id)arg1;
- (bool)setupStarted;
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(id /* block */)arg2;
- (bool)shouldUseLanguageDetectorForCurrentRequest;
- (id)speakerIdDelegate;
- (id)speakerRecognitionController;
- (void)speakerRecognitionController:(id)arg1 hasSpeakerInfo:(id)arg2;
- (void)speakerRecognitionFinishedProcessing:(id)arg1 withFinalSpeakerInfo:(id)arg2;
- (id)speakerRecognitionProxy;
- (id)speakerRecognitionScores;
- (id)speechEndHostTimeEstimator;
- (id)ssrAssets;
- (id)ssvLogFilePath;
- (void)startController;
- (bool)startRecording:(id*)arg1;
- (bool)startRecordingWithSettings:(id)arg1 error:(id*)arg2;
- (void)stopEndpointer;
- (void)stopRecording;
- (void)stopRecordingWithOptions:(id)arg1;
- (id)streamProvider;
- (bool)supportHearstVoiceTrigger;
- (bool)supportLazySessionActivtion;
- (bool)supportPhatic;
- (bool)supportSessionActivateDelay;
- (bool)supportTriagleModeSessionActivationRetry;
- (id)timerMonitor;
- (bool)twoShotNotificationEnabled;
- (id)uncompressedAudioLogging;
- (void)updateEndpointerDelayedTrigger:(bool)arg1;
- (void)updateEndpointerThreshold:(float)arg1;
- (void)updateMeters;
- (id)voiceProfileManager;
- (void)voiceTriggerAssetHandler:(id)arg1 endpointId:(id)arg2 didChangeCachedAsset:(id)arg3;
- (id)voiceTriggerInfo;
- (id)volumeController;
- (id)volumeMonitor;
- (id)xpcClient;
- (id)xpcClientFactory;

@end
