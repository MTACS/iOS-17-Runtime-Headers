
@interface CSBuiltInVoiceTrigger : NSObject <CSActivationEventNotificationHandlerDelegate, CSAttSiriStateMonitorDelegate, CSAudioRouteChangeMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSAudioStreamProvidingDelegate, CSBluetoothWirelessSplitterMonitorDelegate, CSPhoneCallStateMonitorDelegate, CSSecondPassProgressProviding, CSSelfTriggerDetectorDelegate, CSSiriClientBehaviorMonitorDelegate, CSStateMachineDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSVoiceTriggerXPCServiceProxyDelegate> {
    CSVoiceTriggerAlwaysOnProcessor * _alwaysOnProcessorController;
    NSMutableArray * _assetConfigWaitingBuffer;
    unsigned long long  _attSiriState;
    CSAudioProvider * _audioProvider;
    CSAudioRouteChangeMonitor * _audioRouteChangeMonitor;
    CSAudioStream * _audioStream;
    NSMutableArray * _audioStreamHoldings;
    unsigned long long  _bestChannel;
    float  _bestScore;
    struct OpaqueFigEndpoint { } * _carPlayEndpoint;
    unsigned long long  _channelSelectionDelay;
    NSDictionary * _channelSelectionScores;
    CSAsset * _currentAsset;
    unsigned long long  _currentSplitterState;
    unsigned long long  _delayInSamplesRequiredForChannelSelection;
    <CSVoiceTriggerDelegate> * _delegate;
    CSVoiceTriggerFirstPassConfig * _firstPassConfig;
    NSNumber * _firstPassMyriadGoodness;
    bool  _firstTimeAssetConfigured;
    bool  _hasTriggerPending;
    long long  _hearstOwnershipStatus;
    unsigned long long  _heartbeatFactor;
    bool  _isHearstConnected;
    bool  _isHearstRouted;
    bool  _isJarvisConnected;
    bool  _isListenPollingStarting;
    bool  _isPhraseSpotterBypassed;
    bool  _isSecondPassCancelled;
    bool  _isSecondPassRunning;
    bool  _isSiriClientListening;
    bool  _isSiriInputSourceOutOfBand;
    NSMutableArray * _keywordAnalyzersNDAPI;
    unsigned long long  _lastSelfTriggerDetectedStartMachTime;
    unsigned long long  _lastTriggeredBestChannel;
    CSKeywordAnalyzerNDAPIResult * _lastTriggeredOnsetResult;
    CSVoiceTriggerUserSelectedPhrase * _multiPhraseSelectedStatus;
    NSString * _name;
    unsigned long long  _onsetChannel;
    CSKeywordAnalyzerNDAPIResult * _onsetResult;
    unsigned long long  _phoneCallState;
    unsigned long long  _processingChunkSamples;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_group> * _recordingWillStartGroup;
    CSVoiceTriggerSecondChanceContext * _secondChanceContext;
    <CSSecondPassProgressDelegate> * _secondPassProgressDelegate;
    CSOSTransaction * _secondPassTransaction;
    bool  _shouldDisableOnSpeakerVerificationInSplitterMode;
    CSSpeechManager * _speechManager;
    CSStateCapture * _stateCapture;
    CSStateMachine * _stateMachine;
    NSObject<OS_dispatch_source> * _validationTimer;
    CSPolicy * _voiceTriggerAOPModeStartPolicy;
    bool  _voiceTriggerEnabled;
    CSVoiceTriggerSecondPass * _voiceTriggerSecondPass;
    CSPolicy * _voiceTriggerStartPolicy;
}

@property (nonatomic, retain) CSVoiceTriggerAlwaysOnProcessor *alwaysOnProcessorController;
@property (nonatomic, retain) NSMutableArray *assetConfigWaitingBuffer;
@property (nonatomic) unsigned long long attSiriState;
@property (nonatomic, retain) CSAudioProvider *audioProvider;
@property (nonatomic, retain) CSAudioRouteChangeMonitor *audioRouteChangeMonitor;
@property (nonatomic, retain) CSAudioStream *audioStream;
@property (nonatomic, retain) NSMutableArray *audioStreamHoldings;
@property (nonatomic) unsigned long long bestChannel;
@property (nonatomic) float bestScore;
@property (nonatomic) struct OpaqueFigEndpoint { }*carPlayEndpoint;
@property (nonatomic) unsigned long long channelSelectionDelay;
@property (nonatomic, retain) NSDictionary *channelSelectionScores;
@property (nonatomic, retain) CSAsset *currentAsset;
@property (nonatomic) unsigned long long currentSplitterState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long delayInSamplesRequiredForChannelSelection;
@property (nonatomic) <CSVoiceTriggerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CSVoiceTriggerFirstPassConfig *firstPassConfig;
@property (nonatomic, retain) NSNumber *firstPassMyriadGoodness;
@property (nonatomic) bool firstTimeAssetConfigured;
@property (nonatomic) bool hasTriggerPending;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long hearstOwnershipStatus;
@property (nonatomic) unsigned long long heartbeatFactor;
@property (nonatomic) bool isHearstConnected;
@property (nonatomic) bool isHearstRouted;
@property (nonatomic) bool isJarvisConnected;
@property (nonatomic) bool isListenPollingStarting;
@property (nonatomic) bool isPhraseSpotterBypassed;
@property (nonatomic) bool isSecondPassCancelled;
@property (nonatomic) bool isSecondPassRunning;
@property (nonatomic) bool isSiriClientListening;
@property (nonatomic) bool isSiriInputSourceOutOfBand;
@property (nonatomic, retain) NSMutableArray *keywordAnalyzersNDAPI;
@property (nonatomic) unsigned long long lastSelfTriggerDetectedStartMachTime;
@property (nonatomic) unsigned long long lastTriggeredBestChannel;
@property (nonatomic, retain) CSKeywordAnalyzerNDAPIResult *lastTriggeredOnsetResult;
@property (nonatomic, retain) CSVoiceTriggerUserSelectedPhrase *multiPhraseSelectedStatus;
@property (nonatomic, retain) NSString *name;
@property (nonatomic) unsigned long long onsetChannel;
@property (nonatomic, retain) CSKeywordAnalyzerNDAPIResult *onsetResult;
@property (nonatomic) unsigned long long phoneCallState;
@property (nonatomic) unsigned long long processingChunkSamples;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *recordingWillStartGroup;
@property (nonatomic, retain) CSVoiceTriggerSecondChanceContext *secondChanceContext;
@property (nonatomic) <CSSecondPassProgressDelegate> *secondPassProgressDelegate;
@property (nonatomic, retain) CSOSTransaction *secondPassTransaction;
@property (nonatomic) bool shouldDisableOnSpeakerVerificationInSplitterMode;
@property (nonatomic, retain) CSSpeechManager *speechManager;
@property (nonatomic, retain) CSStateCapture *stateCapture;
@property (nonatomic, retain) CSStateMachine *stateMachine;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *validationTimer;
@property (nonatomic, retain) CSPolicy *voiceTriggerAOPModeStartPolicy;
@property (nonatomic) bool voiceTriggerEnabled;
@property (nonatomic, retain) CSVoiceTriggerSecondPass *voiceTriggerSecondPass;
@property (nonatomic, retain) CSPolicy *voiceTriggerStartPolicy;

- (void).cxx_destruct;
- (void)CSAudioRouteChangeMonitor:(id)arg1 didReceiveAudioRouteChangeEvent:(long long)arg2;
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;
- (void)CSBluetoothWirelessSplitterMonitor:(id)arg1 didReceiveSplitterStateChange:(unsigned long long)arg2 shouldDisableSpeakerVerificationInSplitterMode:(bool)arg3;
- (void)CSPhoneCallStateMonitor:(id)arg1 didRecievePhoneCallStateChange:(unsigned long long)arg2;
- (void)CSVoiceTriggerEnabledMonitor:(id)arg1 didReceiveEnabled:(bool)arg2;
- (void)CSVoiceTriggerXPCServiceProxy:(id)arg1 bypassPhraseSpotter:(bool)arg2;
- (void)CSVoiceTriggerXPCServiceProxy:(id)arg1 bypassRaiseToSpeak:(bool)arg2;
- (void)_APModeValidationTimerFired;
- (void)_addAudioStreamHold:(id)arg1;
- (void)_cancelAllAudioStreamHold;
- (void)_cancelLastAudioStreamHold;
- (void)_createSecondPassIfNeededWithFirstPassSource:(unsigned long long)arg1;
- (long long)_currentJarvisTriggerMode;
- (unsigned long long)_currentState;
- (id)_eventName:(unsigned long long)arg1;
- (id)_firstPassVoiceTriggerSignalEstimate;
- (void)_forceUpdateCarPlayEndpointWithJarvisConnected:(bool)arg1;
- (void)_handleAudioChunk:(id)arg1;
- (void)_handleSecondPassResult:(id)arg1 deviceId:(id)arg2 error:(id)arg3;
- (void)_handleVoiceTriggerSecondPassWithSource:(unsigned long long)arg1 deviceId:(id)arg2 event:(id)arg3 audioProviderUUID:(id)arg4 firstPassInfo:(id)arg5;
- (bool)_hasHearstRoutableDuringPhoneCall;
- (bool)_hasPhoneCallOnNonBargeInDevice;
- (bool)_hasSiriInputOutOfBandAndNotInSplitter;
- (bool)_isBuiltInAOPVoiceTriggerEvent:(id)arg1;
- (bool)_isVoiceTriggerStateTransitionEvent:(id)arg1;
- (void)_keywordAnalyzerNDAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;
- (void)_notifyEvent:(unsigned long long)arg1;
- (void)_receivedHearstConnectedEvent:(bool)arg1;
- (void)_receivedHearstOwnershipEvent:(long long)arg1;
- (void)_receivedHearstRoutedEvent:(bool)arg1;
- (void)_receivedJarvisConnectionEvent:(bool)arg1;
- (void)_receivedSiriInputSourceOutOfBandEvent:(bool)arg1;
- (void)_reportVoiceTriggerFirstPassFireFromAP;
- (void)_requestStartAudioStreamWithSource:(unsigned long long)arg1 context:(id)arg2 completion:(id /* block */)arg3;
- (void)_reset;
- (void)_setAsset:(id)arg1;
- (void)_setIsSecondPassRunning:(bool)arg1;
- (void)_setupStateMachine;
- (bool)_shouldCancelSecondPassResultWithVoiceTriggerInfo:(id)arg1;
- (bool)_shouldEnableAOPVoiceTrigger;
- (bool)_shouldEnableAPVoiceTrigger;
- (bool)_shouldHandleAOPVoiceTrigger;
- (bool)_shouldReuseBuiltInAudioProvider;
- (bool)_shouldSecondPassKeepAlive;
- (void)_startAOPVoiceTrigger;
- (void)_startAPVoiceTriggerWithCompletion:(id /* block */)arg1;
- (void)_startListenPollingWithInterval:(double)arg1 completion:(id /* block */)arg2;
- (void)_startListenWithCompletion:(id /* block */)arg1;
- (void)_startVoiceTriggerWithCompletion:(id /* block */)arg1;
- (id)_stateName:(unsigned long long)arg1;
- (void)_stopAOPVoiceTrigger;
- (void)_stopAPVoiceTrigger;
- (void)_stopListening;
- (void)_teardownSecondPassIfNeeded;
- (void)_transitAOPMode:(bool)arg1;
- (void)_transitAOPModeAsync:(bool)arg1;
- (void)_transitAOPModeSync:(bool)arg1;
- (void)_transitVoiceTriggerStatus:(bool)arg1 force:(bool)arg2;
- (void)_updateCurrentSplitterState:(unsigned long long)arg1 shouldDisableSpeakerVerificationInSplitterMode:(bool)arg2;
- (void)activationEventNotificationHandler:(id)arg1 event:(id)arg2 completion:(id /* block */)arg3;
- (id)alwaysOnProcessorController;
- (id)assetConfigWaitingBuffer;
- (unsigned long long)attSiriState;
- (void)attSiriStateMonitor:(id)arg1 didRecieveAttSiriStateChange:(unsigned long long)arg2;
- (id)audioProvider;
- (id)audioRouteChangeMonitor;
- (id)audioStream;
- (id)audioStreamHoldings;
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectedly:(long long)arg2;
- (unsigned long long)bestChannel;
- (float)bestScore;
- (void)cancelSecondPassRunning;
- (struct OpaqueFigEndpoint { }*)carPlayEndpoint;
- (unsigned long long)channelSelectionDelay;
- (id)channelSelectionScores;
- (id)currentAsset;
- (unsigned long long)currentSplitterState;
- (unsigned long long)delayInSamplesRequiredForChannelSelection;
- (id)delegate;
- (void)didIgnoreEvent:(long long)arg1 from:(long long)arg2;
- (void)didTransitFrom:(long long)arg1 to:(long long)arg2 by:(long long)arg3;
- (id)firstPassConfig;
- (id)firstPassMyriadGoodness;
- (bool)firstTimeAssetConfigured;
- (bool)hasTriggerPending;
- (long long)hearstOwnershipStatus;
- (unsigned long long)heartbeatFactor;
- (id)initWithTargetQueue:(id)arg1 withSpeechManager:(id)arg2;
- (id)initWithTargetQueue:(id)arg1 withSpeechManager:(id)arg2 withAudioRouteChangeMonitor:(id)arg3;
- (bool)isHearstConnected;
- (bool)isHearstRouted;
- (bool)isJarvisConnected;
- (bool)isListenPollingStarting;
- (bool)isPhraseSpotterBypassed;
- (bool)isSecondPassCancelled;
- (bool)isSecondPassRunning;
- (bool)isSiriClientListening;
- (bool)isSiriInputSourceOutOfBand;
- (id)keywordAnalyzersNDAPI;
- (unsigned long long)lastSelfTriggerDetectedStartMachTime;
- (unsigned long long)lastTriggeredBestChannel;
- (id)lastTriggeredOnsetResult;
- (id)multiPhraseSelectedStatus;
- (id)name;
- (unsigned long long)onsetChannel;
- (id)onsetResult;
- (void)pendingSecondPassTriggerWasClearedForClient:(unsigned long long)arg1 deviceId:(id)arg2;
- (unsigned long long)phoneCallState;
- (unsigned long long)processingChunkSamples;
- (id)queue;
- (id)recordingWillStartGroup;
- (void)reset;
- (id)secondChanceContext;
- (id)secondPassProgressDelegate;
- (id)secondPassTransaction;
- (void)selfTriggerDetector:(id)arg1 didDetectSelfTrigger:(id)arg2;
- (void)setAlwaysOnProcessorController:(id)arg1;
- (void)setAsset:(id)arg1;
- (void)setAssetConfigWaitingBuffer:(id)arg1;
- (void)setAttSiriState:(unsigned long long)arg1;
- (void)setAudioProvider:(id)arg1;
- (void)setAudioRouteChangeMonitor:(id)arg1;
- (void)setAudioStream:(id)arg1;
- (void)setAudioStreamHoldings:(id)arg1;
- (void)setBestChannel:(unsigned long long)arg1;
- (void)setBestScore:(float)arg1;
- (void)setCarPlayEndpoint:(struct OpaqueFigEndpoint { }*)arg1;
- (void)setChannelSelectionDelay:(unsigned long long)arg1;
- (void)setChannelSelectionScores:(id)arg1;
- (void)setCurrentAsset:(id)arg1;
- (void)setCurrentSplitterState:(unsigned long long)arg1;
- (void)setDelayInSamplesRequiredForChannelSelection:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFirstPassConfig:(id)arg1;
- (void)setFirstPassMyriadGoodness:(id)arg1;
- (void)setFirstTimeAssetConfigured:(bool)arg1;
- (void)setHasTriggerPending:(bool)arg1;
- (void)setHearstOwnershipStatus:(long long)arg1;
- (void)setHeartbeatFactor:(unsigned long long)arg1;
- (void)setIsHearstConnected:(bool)arg1;
- (void)setIsHearstRouted:(bool)arg1;
- (void)setIsJarvisConnected:(bool)arg1;
- (void)setIsListenPollingStarting:(bool)arg1;
- (void)setIsPhraseSpotterBypassed:(bool)arg1;
- (void)setIsSecondPassCancelled:(bool)arg1;
- (void)setIsSecondPassRunning:(bool)arg1;
- (void)setIsSiriClientListening:(bool)arg1;
- (void)setIsSiriInputSourceOutOfBand:(bool)arg1;
- (void)setKeywordAnalyzersNDAPI:(id)arg1;
- (void)setLastSelfTriggerDetectedStartMachTime:(unsigned long long)arg1;
- (void)setLastTriggeredBestChannel:(unsigned long long)arg1;
- (void)setLastTriggeredOnsetResult:(id)arg1;
- (void)setMultiPhraseSelectedStatus:(id)arg1;
- (void)setName:(id)arg1;
- (void)setOnsetChannel:(unsigned long long)arg1;
- (void)setOnsetResult:(id)arg1;
- (void)setPhoneCallState:(unsigned long long)arg1;
- (void)setProcessingChunkSamples:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingWillStartGroup:(id)arg1;
- (void)setSecondChanceContext:(id)arg1;
- (void)setSecondPassProgressDelegate:(id)arg1;
- (void)setSecondPassTransaction:(id)arg1;
- (void)setShouldDisableOnSpeakerVerificationInSplitterMode:(bool)arg1;
- (void)setSpeechManager:(id)arg1;
- (void)setStateCapture:(id)arg1;
- (void)setStateMachine:(id)arg1;
- (void)setValidationTimer:(id)arg1;
- (void)setVoiceTriggerAOPModeStartPolicy:(id)arg1;
- (void)setVoiceTriggerEnabled:(bool)arg1;
- (void)setVoiceTriggerSecondPass:(id)arg1;
- (void)setVoiceTriggerStartPolicy:(id)arg1;
- (bool)shouldDisableOnSpeakerVerificationInSplitterMode;
- (void)siriClientBehaviorMonitor:(id)arg1 didStartStreamWithContext:(id)arg2 successfully:(bool)arg3 option:(id)arg4 withEventUUID:(id)arg5;
- (void)siriClientBehaviorMonitor:(id)arg1 didStopStream:(id)arg2 withEventUUID:(id)arg3;
- (void)siriClientBehaviorMonitor:(id)arg1 willStartStreamWithContext:(id)arg2 option:(id)arg3;
- (void)siriClientBehaviorMonitor:(id)arg1 willStopStream:(id)arg2 reason:(unsigned long long)arg3;
- (id)speechManager;
- (void)start;
- (id)stateCapture;
- (id)stateMachine;
- (id)validationTimer;
- (id)voiceTriggerAOPModeStartPolicy;
- (bool)voiceTriggerEnabled;
- (id)voiceTriggerSecondPass;
- (id)voiceTriggerStartPolicy;

@end
