
@interface CSAudioTapProvider : NSObject <CSAudioServerCrashMonitorDelegate, CSAudioStreamProviding> {
    NSString * _UUIDString;
    id /* block */  _aqStartCompletion;
    id /* block */  _aqStopCompletion;
    struct AudioQueueBuffer {} * _audioBuffers;
    CSAudioStream * _audioStream;
    CSAudioCircularBuffer * _circularBuffer;
    NSObject<OS_dispatch_queue> * _loggingQueue;
    unsigned long long  _processedSampleCount;
    NSObject<OS_dispatch_queue> * _queue;
    struct OpaqueAudioQueue { } * _recordingAudioQueue;
    CSOSTransaction * _transaction;
}

@property (nonatomic, retain) NSString *UUIDString;
@property (nonatomic, copy) id /* block */ aqStartCompletion;
@property (nonatomic, copy) id /* block */ aqStopCompletion;
@property (nonatomic) CSAudioStream *audioStream;
@property (nonatomic, retain) CSAudioCircularBuffer *circularBuffer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *loggingQueue;
@property (nonatomic) unsigned long long processedSampleCount;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) struct OpaqueAudioQueue { }*recordingAudioQueue;
@property (readonly) Class superclass;
@property (nonatomic, retain) CSOSTransaction *transaction;

- (void).cxx_destruct;
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;
- (id)UUID;
- (id)UUIDString;
- (unsigned int)_calculateBufferSize:(struct OpaqueAudioQueue { }*)arg1 audioStreamBasicDescription:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg2 frameSizeInSec:(float)arg3;
- (void)_destroyRecordingAudioQueue;
- (void)_holdTransactionForStartListening;
- (void)_releaseTransactionForStopListeningIfNeeded;
- (void)_reset;
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;
- (bool)_setupRecordingAudioQueueIfNeededWithOption:(id)arg1;
- (void)_stopRecordingAudioQueueIfNeededWithCompletion:(id /* block */)arg1;
- (id /* block */)aqStartCompletion;
- (id /* block */)aqStopCompletion;
- (void)attachTandemStream:(id)arg1 toPrimaryStream:(id)arg2 completion:(id /* block */)arg3;
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;
- (id)audioChunkToEndFrom:(unsigned long long)arg1;
- (id)audioChunkToEndFrom:(unsigned long long)arg1 channelIdx:(unsigned long long)arg2;
- (id)audioDeviceInfo;
- (id)audioStream;
- (unsigned long long)audioStreamId;
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(id /* block */)arg3;
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id*)arg3;
- (void)cancelAudioStreamHold:(id)arg1;
- (id)circularBuffer;
- (void)dealloc;
- (void)destroyRecordingAudioQueue;
- (id)holdAudioStreamWithDescription:(id)arg1 option:(id)arg2;
- (id)init;
- (bool)isNarrowBand;
- (bool)isRecording;
- (id)loggingQueue;
- (id)playbackRoute;
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(id /* block */)arg3;
- (bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id*)arg3;
- (unsigned long long)processedSampleCount;
- (id)queue;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (id)recordSettings;
- (struct OpaqueAudioQueue { }*)recordingAudioQueue;
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;
- (void)setAnnounceCallsEnabled:(bool)arg1 withStreamHandleID:(unsigned long long)arg2;
- (void)setAqStartCompletion:(id /* block */)arg1;
- (void)setAqStopCompletion:(id /* block */)arg1;
- (void)setAudioStream:(id)arg1;
- (void)setCircularBuffer:(id)arg1;
- (bool)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setLoggingQueue:(id)arg1;
- (void)setProcessedSampleCount:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingAudioQueue:(struct OpaqueAudioQueue { }*)arg1;
- (void)setTransaction:(id)arg1;
- (void)setUUIDString:(id)arg1;
- (void)setup;
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(id /* block */)arg3;
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(id /* block */)arg3;
- (bool)supportsDuckingOnCurrentRouteWithError:(id*)arg1;
- (id)transaction;

@end
