
@interface CSAudioRecorder : NSObject <AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSAudioSessionEventProviding, CSRemoteRecordClientDelegate, CSUserSessionActiveMonitorDelegate> {
    CSReusableBufferPool * _audioBufferPool;
    unsigned long long  _audioFilePathIndex;
    CSAudioFileReader * _audioFileReader;
    NSMutableDictionary * _hasSetAlertDictionary;
    struct AudioBufferList { 
        unsigned int mNumberBuffers; 
        struct AudioBuffer { 
            unsigned int mNumberChannels; 
            unsigned int mDataByteSize; 
            void *mData; 
        } mBuffers[1]; 
    }  _interleavedABL;
    NSHashTable * _observers;
    NSMutableDictionary * _opusDecoders;
    struct AudioBufferList { unsigned int x1; struct AudioBuffer { unsigned int x_2_1_1; unsigned int x_2_1_2; void *x_2_1_3; } x2[1]; } * _pNonInterleavedABL;
    unsigned long long  _pendingTwoShotVTToken;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableSet * _remoteAccessoryStreamIdSet;
    CSRemoteRecordClient * _remoteRecordClient;
    <CSAudioSessionEventProvidingDelegate> * _sessionEventDelegate;
    AVVoiceController * _voiceController;
    NSObject<OS_dispatch_queue> * _voiceControllerCreationQueue;
    bool  _waitingForDidStart;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSMutableSet *remoteAccessoryStreamIdSet;
@property (nonatomic) <CSAudioSessionEventProvidingDelegate> *sessionEventDelegate;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *voiceControllerCreationQueue;

+ (unsigned long long)_convertDeactivateOption:(unsigned long long)arg1;
+ (void)createSharedAudioSession;
+ (void)resetDuckSettings;

- (void).cxx_destruct;
- (bool)_audioIsFromRemoteAccessory:(unsigned long long)arg1;
- (void)_audioRecorderDidStartRecordingSuccessfully:(bool)arg1 streamHandleID:(unsigned long long)arg2 error:(id)arg3;
- (void)_audioRecorderDidStopRecordingForReason:(long long)arg1 streamHandleID:(unsigned long long)arg2;
- (id)_compensateChannelDataIfNeeded:(id)arg1 receivedNumChannels:(unsigned int)arg2;
- (id)_createVoiceControllerWithError:(id*)arg1;
- (void)_destroyVoiceController;
- (id)_fetchRemoteRecordClientWithDeviceId:(id)arg1 streamHandleId:(unsigned long long)arg2;
- (id)_getRecordSettingsWithRequest:(id)arg1;
- (id)_getVoiceController;
- (bool)_hasLocalPendingTwoShot;
- (bool)_isDarwinDeviceId:(id)arg1;
- (void)_logResourceNotAvailableErrorIfNeeded:(id)arg1;
- (bool)_needResetAudioInjectionIndex:(id)arg1;
- (void)_processAudioBuffer:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 arrivalTimestampToAudioRecorder:(unsigned long long)arg3;
- (void)_processAudioChain:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 remoteVAD:(id)arg3 atTime:(unsigned long long)arg4 arrivalTimestampToAudioRecorder:(unsigned long long)arg5 numberOfChannels:(int)arg6;
- (id)_recordModeString:(long long)arg1;
- (bool)_shouldInjectAudio;
- (bool)_shouldLogResourceNotAvailableError;
- (bool)_shouldUseRemoteBuiltInMic:(id)arg1;
- (bool)_startAudioStreamForAudioInjectionWithAVVCContext:(id)arg1;
- (void)_stopTrackingRemoteAccessoryStreamId:(unsigned long long)arg1;
- (void)_trackRemoteAccessoryStreamIdIfNeeded:(id)arg1;
- (id)_updateLanguageCodeForRemoteVTEIResult:(id)arg1;
- (bool)activateAudioSessionWithReason:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (unsigned long long)alertStartTime;
- (void)audioDecoderDidDecodePackets:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 timestamp:(unsigned long long)arg5 arrivalTimestampToAudioRecorder:(unsigned long long)arg6 wasBuffered:(bool)arg7 receivedNumChannels:(unsigned int)arg8;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)arg1 recordDeviceIndicator:(id)arg2;
- (void)audioFileReaderBufferAvailable:(id)arg1 buffer:(id)arg2 atTime:(unsigned long long)arg3;
- (void)audioFileReaderDidStartRecording:(id)arg1 successfully:(bool)arg2 error:(id)arg3;
- (void)audioFileReaderDidStopRecording:(id)arg1 forReason:(long long)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (bool)clearListeningMicIndicatorProperty;
- (void)configureAlertBehavior:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (bool)deactivateAudioSession:(unsigned long long)arg1 error:(id*)arg2;
- (bool)deactivateAudioSession:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)dealloc;
- (void)enableMiniDucking:(bool)arg1;
- (void)enableSmartRoutingConsiderationForStream:(unsigned long long)arg1 enable:(bool)arg2;
- (id)fetchGibraltarVoiceTriggerInfoWithRecordDeviceIndicator:(id)arg1;
- (id)getPlaybackRouteForStreamID:(unsigned long long)arg1;
- (id)init;
- (id)initWithQueue:(id)arg1 error:(id*)arg2;
- (bool)isDuckingSupportedOnCurrentRouteWithStreamHandleID:(unsigned long long)arg1 error:(id*)arg2;
- (bool)isNarrowBandWithStreamHandleId:(unsigned long long)arg1;
- (bool)isRecordingWithRecordDeviceIndicator:(id)arg1;
- (bool)isSessionCurrentlyActivated;
- (id)metrics;
- (id)observers;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (bool)playAlertSoundForType:(long long)arg1 overrideMode:(long long)arg2;
- (bool)playAlertSoundForType:(long long)arg1 recordDevideIndicator:(id)arg2;
- (bool)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)arg1 withAlertOverride:(long long)arg2;
- (bool)prepareAudioStreamRecord:(id)arg1 recordDeviceIndicator:(id)arg2 error:(id*)arg3;
- (bool)prewarmAudioSessionWithStreamHandleId:(unsigned long long)arg1 error:(id*)arg2;
- (id)queue;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)arg1 recordDeviceIndicator:(id)arg2;
- (id)recordRouteWithRecordDeviceIndicator:(id)arg1;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)arg1;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)arg1;
- (void)registerObserver:(id)arg1;
- (id)remoteAccessoryStreamIdSet;
- (void)remoteRecordConnectionDisconnected:(id)arg1;
- (void)remoteRecordDidStartRecordingWithStreamHandleId:(unsigned long long)arg1 error:(id)arg2;
- (void)remoteRecordDidStopRecordingWithWithStreamHandleId:(unsigned long long)arg1 error:(id)arg2;
- (void)remoteRecordLPCMBufferAvailable:(id)arg1 streamHandleId:(unsigned long long)arg2;
- (void)remoteRecordTwoShotDetectedAtTime:(double)arg1;
- (id)sessionEventDelegate;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2 force:(bool)arg3;
- (void)setAnnounceCallsEnabled:(bool)arg1 withStreamHandleID:(unsigned long long)arg2;
- (void)setAudioSessionEventDelegate:(id)arg1;
- (void)setContext:(id)arg1 completion:(id /* block */)arg2;
- (bool)setCurrentContext:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)setDuckMixWithOthersForStream:(unsigned long long)arg1 duckOthers:(bool)arg2 duckToLevelInDB:(id)arg3 mixWithOthers:(bool)arg4;
- (bool)setListeningMicIndicatorProperty;
- (void)setMeteringEnabled:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setQueue:(id)arg1;
- (bool)setRecordMode:(long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)setRemoteAccessoryStreamIdSet:(id)arg1;
- (void)setSessionEventDelegate:(id)arg1;
- (void)setVoiceControllerCreationQueue:(id)arg1;
- (bool)startAudioStreamWithOption:(id)arg1 recordDeviceIndicator:(id)arg2 error:(id*)arg3;
- (bool)stopAudioStreamWithRecordDeviceIndicator:(id)arg1 error:(id*)arg2;
- (void)unregisterObserver:(id)arg1;
- (void)updateMeters;
- (void)userSessionActivateMonitor:(id)arg1 didReceivedUserSessionActiveHasChanged:(bool)arg2;
- (void)voiceControllerAudioCallback:(id)arg1 forStream:(unsigned long long)arg2 buffer:(id)arg3;
- (void)voiceControllerBeginRecordInterruption:(id)arg1;
- (void)voiceControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2;
- (id)voiceControllerCreationQueue;
- (void)voiceControllerDidFinishAlertPlayback:(id)arg1 ofType:(int)arg2 error:(id)arg3;
- (void)voiceControllerDidSetAudioSessionActive:(id)arg1 isActivated:(bool)arg2;
- (void)voiceControllerDidStartRecording:(id)arg1 forStream:(unsigned long long)arg2 successfully:(bool)arg3 error:(id)arg4;
- (void)voiceControllerDidStopRecording:(id)arg1 forStream:(unsigned long long)arg2 forReason:(long long)arg3;
- (void)voiceControllerEncoderErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)voiceControllerEndRecordInterruption:(id)arg1;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(int)arg2;
- (void)voiceControllerStreamInvalidated:(id)arg1 forStream:(unsigned long long)arg2;
- (void)voiceControllerWillSetAudioSessionActive:(id)arg1 willActivate:(bool)arg2;
- (void)willDestroy;

@end
