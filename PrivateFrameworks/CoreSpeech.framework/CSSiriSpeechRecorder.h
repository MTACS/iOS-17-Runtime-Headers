
@interface CSSiriSpeechRecorder : NSObject <CSAudioSessionControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSiriAcousticFingerprinterDelegate, CSSiriSpeechCapturing, CSSpeakerIdentificationDelegate, CSSpeechControllerDelegate> {
    double  _accumulatedBufferDuration;
    NSObject<OS_dispatch_group> * _alertPlaybackGroup;
    bool  _audioDuckingEnabled;
    NSFileHandle * _audioFileHandle;
    long long  _audioFileType;
    CSSiriAudioFileWriter * _audioFileWriter;
    CSSiriAudioPlaybackService * _audioPlaybackService;
    CSAudioSessionController * _audioSessionController;
    AFBluetoothWirelessSplitterSessionStateObserver * _bluetoothWirelessSplitterSessionStateObserver;
    CSSiriSpeechRecordingContext * _context;
    CSSiriAudioActivationInfo * _currentActivationInfo;
    CSAudioDeviceInfo * _currentAudioDeviceInfo;
    AFClientConfiguration * _currentClientConfiguration;
    struct OpaqueAudioConverter { } * _decoder;
    <CSSiriSpeechCapturingDelegate> * _delegate;
    bool  _didDetectEndpoint;
    bool  _didDetectStartpoint;
    bool  _didEnterTwoShotMode;
    bool  _didFakeTwoShotWithAlert;
    bool  _didPerformTwoShotPrompt;
    bool  _didReceiveFirstBuffer;
    bool  _didReceiveLastBuffer;
    bool  _didTimeout;
    <CSEndpointAnalyzer> * _endpointAnalyzer;
    CSEndpointDelayReporter * _endpointDelayReporter;
    long long  _endpointerOperationMode;
    unsigned long long  _estimatedSpeechEndHostTime;
    double  _expectedFirstBufferTimestamp;
    AFExperimentContext * _experimentContext;
    NSObject<OS_dispatch_source> * _extendedEndpointTimer;
    NSUUID * _fakeTwoShotTTSPromptUUID;
    AFWatchdogTimer * _fakeTwoShotTTSPromptWatchdogTimer;
    bool  _fingerprintWasRecognized;
    CSSiriAcousticFingerprinter * _fingerprinter;
    bool  _fingerprintingEnabled;
    unsigned long long  _firstBufferHostTime;
    double  _firstBufferTimestamp;
    bool  _forceSuccessAlertOnStop;
    bool  _hasReceivedEmptyLPCMRecordBuffer;
    bool  _hybridUODEnabled;
    bool  _isDriving;
    bool  _isOpus;
    bool  _isRecordingUsingBTRoute;
    bool  _isSpeechControllerInitialized;
    unsigned long long  _lastAudioRecordBufferReceiptTime;
    unsigned long long  _lastAudioRecordBufferStartTime;
    id /* block */  _lastEndpointHintCompletion;
    NSArray * _lastEndpointHintFeatures;
    SASResultCandidate * _lastEndpointHintRC;
    bool  _lastEndpointHintRCProcessedForMitigation;
    CSEndpointerMetrics * _lastEndpointerMetrics;
    double  _lastPrepareTimestamp;
    NSUUID * _mhUUID;
    AFSpeechSynthesisRecord * _mostRecentSpeechSynthesisRecord;
    bool  _needsAVVCLPCMCallbacks;
    NSMutableDictionary * _numberOfAVVCAlertPlaybacksByType;
    long long  _packetCount;
    CSSiriAudioActivationInfo * _pendingActivationInfo;
    NSObject<OS_dispatch_queue> * _queue;
    NSString * _recordDevice;
    long long  _recordingAlertsConfiguration;
    long long  _recordingState;
    NSObject<OS_dispatch_group> * _recordingWillStartGroup;
    bool  _serverDidEndpoint;
    bool  _serverDidRecognizeSpeech;
    bool  _shouldDisableSpeechPacketGeneration;
    double  _skippedSamplesTimeInSec;
    long long  _speechCapturingMode;
    CSSpeechController * _speechController;
    NSDictionary * _speechRecognizedContextForServerEndpointInstrumentation;
    NSXPCConnection * _speechRecordingEventListenerConnection;
    long long  _startEvent;
    double  _startRecordingTimestamp;
    unsigned long long  _stopRecordingMachContinuousTime;
    unsigned long long  _stopRecordingReason;
    bool  _suppressInterruptionEndedNotifications;
    bool  _suppressRecordingStoppedAlert;
    double  _twoShotStartTime;
    bool  _wasCanceled;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressInterruptionEndedNotifications;

- (void).cxx_destruct;
- (unsigned int)_audioDeviceID;
- (unsigned int)_audioSessionID;
- (void)_cancelExtendedEndpointTimer;
- (bool)_checkAudioLoggingLimits:(id)arg1;
- (void)_checkIfLastEndpointHintShouldBeAccepted:(bool)arg1;
- (void)_clearEndpointHint;
- (id)_convertToAFSpeechPackage:(id)arg1;
- (id)_currentMHUUID:(bool)arg1;
- (id)_currentPlaybackRoute;
- (id)_currentRecordDeviceInfo;
- (id)_currentRecordRoute;
- (id)_currentRecordingInfo;
- (void)_enforceEndpointHintWithMitigation:(bool)arg1;
- (id)_fingerprinter;
- (id)_getFanInfoArray;
- (void)_handleFakeTwoShotPromptCallbackWithUUID:(id)arg1 timestamp:(double)arg2 duration:(double)arg3 error:(id)arg4;
- (void)_handleFakeTwoShotPromptTimeoutWithUUID:(id)arg1;
- (void)_hardEndpointWasDetectedWithMetrics:(id)arg1 atTime:(double)arg2;
- (void)_logAudioMetrics:(id)arg1 mhUUID:(id)arg2;
- (void)_logBluetoothStateWithMHUUID:(id)arg1;
- (void)_logFanState;
- (void)_logVoiceTriggerInfo:(id)arg1 withMHUUID:(id)arg2;
- (int)_mapInstrumentationEndpointTypeFromStopRecordingReason:(union { struct { unsigned short x_1_1_1; unsigned short x_1_1_2; } x1; unsigned int x2; })arg1;
- (id)_mhUUIDFromSpeechRequestOptions:(id)arg1;
- (void)_performTwoShotPromptForType:(long long)arg1 withOverride:(long long)arg2 atTime:(double)arg3;
- (void)_playAudioAlert:(long long)arg1;
- (void)_playPhaticWithCompletion:(id /* block */)arg1;
- (void)_playStopAlertIfNecessaryForReason:(long long)arg1 endpointMode:(long long)arg2 error:(id)arg3;
- (bool)_prepareDirectoryAtPath:(id)arg1;
- (bool)_prepareSpeechControllerWithOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)_recordingInfoForEvent:(long long)arg1 audioAlertStyle:(long long)arg2 includeBTInfo:(bool)arg3 includeRecordDeviceInfo:(bool)arg4;
- (void)_reportServerEndpointMetricsIfNeeded;
- (void)_resetSpeechController;
- (void)_scheduleExtendedEndpointTimer;
- (void)_setAlertsIfNeeded;
- (bool)_setAudioContextWithInfo:(id)arg1 forReason:(id)arg2;
- (void)_setAudioDuckingEnabled:(bool)arg1;
- (void)_setDictationAudioModeEnabled:(bool)arg1;
- (void)_setEndpointStyle:(long long)arg1;
- (void)_setEndpointerOperationMode:(long long)arg1 forceUpdate:(bool)arg2;
- (void)_setLanguageDetectorDelegateIfRequired;
- (void)_setSpeechCapturingMode:(long long)arg1;
- (void)_setupAudioFileWritingForSpeechController:(id)arg1 info:(id)arg2 context:(id)arg3;
- (bool)_shouldEmitInstrumentation;
- (bool)_shouldPlaySummonedToneOnTopCapInvocationOnHorseman;
- (bool)_shouldPlayTwoShotToneFeedbackOnHorseman;
- (id)_speechController;
- (void)_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:(unsigned long long)arg1 atHostTime:(unsigned long long)arg2 mhUUID:(id)arg3;
- (void)_speechControllerDidReceiveLastAudioRecordBuffer:(id)arg1 forReason:(long long)arg2 estimatedSpeechEndHostTime:(unsigned long long)arg3 isRecordingStopped:(bool)arg4;
- (void)_speechControllerDidStartRecording:(id)arg1 successfully:(bool)arg2 error:(id)arg3;
- (void)_speechControllerDidStopRecording:(id)arg1 audioDeviceInfo:(id)arg2 forReason:(long long)arg3 estimatedSpeechEndHostTime:(unsigned long long)arg4 errorCodeOverride:(long long)arg5 underlyingError:(id)arg6;
- (void)_speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)_speechControllerWithError:(id*)arg1;
- (id)_speechRecordingEventListener;
- (bool)_startAudioPlaybackRequest:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_stopRecordingForEndpointReason:(union { struct { unsigned short x_1_1_1; unsigned short x_1_1_2; } x1; unsigned int x2; })arg1 withEndpointMetrics:(id)arg2;
- (void)_stopRecordingWithReason:(union { struct { unsigned short x_1_1_1; unsigned short x_1_1_2; } x1; unsigned int x2; })arg1 hostTime:(unsigned long long)arg2;
- (bool)_updateAudioContextToPostVoiceForReason:(id)arg1;
- (void)_updateAudioContextWithInfo:(id)arg1 reason:(id)arg2;
- (bool)_updateAudioContextWithPendingInfoForReason:(id)arg1;
- (void)_updateAudioDeviceInfo:(id)arg1 forReason:(id)arg2 forcesUpdate:(bool)arg3;
- (void)_updateRecordBufferDuration;
- (void)acousticFingerprinter:(id)arg1 hasFingerprint:(id)arg2 duration:(double)arg3;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionInterruptionNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionOwnerLostNotification:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionOwnerResetNotification:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionRouteChangeNotificationWithUserInfo:(id)arg2;
- (void)cancelSpeechCaptureSuppressingAlert:(bool)arg1;
- (int)convertSISchemaAudioInputRouteToMHRoute:(int)arg1 withRecordingInfo:(id)arg2;
- (id)convertVirtualAudioSubTypeToString:(unsigned int)arg1;
- (id)currentVTSatScore;
- (void)dealloc;
- (void)disableSpeechPacketGeneration:(bool)arg1;
- (void)eagerlyInitializeAudioRecording;
- (void)endpointer:(id)arg1 didDetectHardEndpointAtTime:(double)arg2 withMetrics:(id)arg3;
- (void)endpointer:(id)arg1 didDetectStartpointAtTime:(double)arg2;
- (void)enforcePreviousEndpointHint;
- (id)fetchAudioDeviceInfo;
- (unsigned int)fetchAudioSessionID;
- (id)fetchRecordingInfo;
- (void)forceSuccessAudioAlertOnStop;
- (id)getAudioRouteInstrumentationWithRecordingInfo:(id)arg1;
- (void)getLastStartpointTimestampAndCurrentTime:(id /* block */)arg1;
- (id)initWithQueue:(id)arg1 speechController:(id)arg2 audioSessionController:(id)arg3 audioPlaybackService:(id)arg4 experimentContext:(id)arg5;
- (void)languageDetectorDidDetectLanguageWithConfidence:(id)arg1 confidence:(id)arg2 isConfident:(bool)arg3;
- (void)performBlockAfterAlerts:(id /* block */)arg1 timeout:(double)arg2;
- (void)playRecordingStartAlert;
- (void)preheatRecognizerWithOption:(id)arg1;
- (void)preheatWithOption:(id)arg1;
- (void)prepareForMode:(long long)arg1;
- (void)prepareForMode:(long long)arg1 withOptions:(id)arg2;
- (bool)prepareSpeechCaptureWithOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)recordingInfoForPreheatWithEvent:(long long)arg1;
- (void)releaseAudioSession;
- (void)setAudioFileHandle:(id)arg1;
- (void)setAudioFileType:(long long)arg1;
- (void)setClientConfiguration:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEARLanguageDetectorSpeechRequestId:(id)arg1;
- (void)setEndpointerDelayedTrigger:(bool)arg1;
- (void)setEndpointerThreshold:(double)arg1;
- (void)setFingerprintWasRecognized;
- (void)setFingerprintingEnabled:(bool)arg1;
- (void)setHybridUODEnabled:(bool)arg1;
- (void)setIsDriving:(bool)arg1;
- (void)setSpeechRecognizedContext:(id)arg1;
- (void)setSpeechRecordingEventListeningEndpoint:(id)arg1;
- (void)setSpeechRequestOptions:(id)arg1;
- (void)setSpeechWasRecognizedForElapsedTime:(double)arg1 isFinal:(bool)arg2;
- (void)setSuppressInterruptionEndedNotifications:(bool)arg1;
- (void)speakerIdentificationDidDetectSpeakerWithScores:(id)arg1;
- (void)speechController:(id)arg1 didSetAudioSessionActive:(bool)arg2;
- (void)speechController:(id)arg1 willSetAudioSessionActive:(bool)arg2;
- (void)speechControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2;
- (void)speechControllerDidDeliverLastBuffer:(id)arg1 forReason:(long long)arg2 estimatedSpeechEndHostTime:(unsigned long long)arg3;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)arg1 atTime:(double)arg2 wantsAudibleFeedback:(bool)arg3;
- (void)speechControllerDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (void)speechControllerDidStartRecording:(id)arg1 audioDeviceInfo:(id)arg2 successfully:(bool)arg3 error:(id)arg4;
- (void)speechControllerDidStopRecording:(id)arg1 audioDeviceInfo:(id)arg2 forReason:(long long)arg3 estimatedSpeechEndHostTime:(unsigned long long)arg4;
- (void)speechControllerDidUpdateSmartSiriVolume:(id)arg1 forReason:(unsigned long long)arg2;
- (void)speechControllerEndRecordInterruption:(id)arg1;
- (void)speechControllerLPCMRecordBufferAvailable:(id)arg1 buffer:(id)arg2 recordedAt:(unsigned long long)arg3;
- (void)speechControllerRecordBufferAvailable:(id)arg1 buffers:(id)arg2 durationInSec:(float)arg3 recordedAt:(unsigned long long)arg4 audioDeviceInfo:(id)arg5;
- (void)speechControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;
- (void)speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2;
- (void)speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (bool)startSpeechCaptureWithContext:(id)arg1 willStartHandler:(id /* block */)arg2 error:(id*)arg3;
- (void)stopSpeechCaptureForEvent:(long long)arg1 suppressAlert:(bool)arg2 hostTime:(unsigned long long)arg3;
- (bool)suppressInterruptionEndedNotifications;
- (void)suppressUtteranceGradingIfRequired;
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange { double x1; double x2; })arg1;
- (void)updateEndpointHintForRC:(id)arg1 forceAccept:(bool)arg2 completion:(id /* block */)arg3;
- (void)updateServerEndpointFeatures:(id)arg1;
- (void)updateSpeechSynthesisRecord:(id)arg1;

@end
