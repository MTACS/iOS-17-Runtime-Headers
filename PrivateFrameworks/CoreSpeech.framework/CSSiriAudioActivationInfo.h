
@interface CSSiriAudioActivationInfo : NSObject {
    unsigned long long  _activationHostTime;
    NSDictionary * _activationMetadata;
    long long  _activationMode;
    double  _activationSystemUptime;
    float  _activeMediaPlaybackVolume;
    NSString * _applicationBundleIdentifier;
    NSString * _applicationDisplayName;
    long long  _audioAlertStyle;
    unsigned long long  _buttonDownHostTime;
    long long  _csAudioRecordType;
    AFClientConfiguration * _currentClientConfiguration;
    NSString * _deviceIdentifier;
    long long  _dictationInputOrigin;
    unsigned long long  _dictationVoiceTriggerAbsStartSampleId;
    AFExperimentContext * _experimentContext;
    bool  _hasPlayedStartAlert;
    bool  _isActivated;
    bool  _isOnPhoneCall;
    bool  _isSpokenNotification;
    bool  _isTriggerlessFollowup;
    AFLanguageDetectionUserContext * _languageDetectionUserContext;
    CSAttSiriMagusSupportedPolicy * _magusSupportedPolicy;
    long long  _presentationMode;
    long long  _speechEndpointerOperationMode;
    long long  _speechEvent;
    AFSpeechRecordingAlertPolicy * _speechRecordingAlertPolicy;
    long long  _speechRecordingMode;
    long long  _storedActivationMode;
    bool  _suppressStartAlert;
    NSUUID * _turnIdentifier;
    bool  _useBorealisBuffer;
    bool  _usePrelistening;
    unsigned long long  _voiceTriggerEndHostTime;
}

@property (nonatomic, readonly) unsigned long long activationHostTime;
@property (nonatomic, readonly, copy) NSDictionary *activationMetadata;
@property (nonatomic, readonly) double activationSystemUptime;
@property (nonatomic, readonly, copy) NSString *applicationBundleIdentifier;
@property (nonatomic, readonly, copy) NSString *applicationDisplayName;
@property (nonatomic, readonly) long long audioAlertStyle;
@property (nonatomic, readonly) unsigned long long buttonDownHostTime;
@property (nonatomic, readonly, copy) NSString *deviceIdentifier;
@property (nonatomic, readonly) long long dictationInputOrigin;
@property (nonatomic, readonly) unsigned long long dictationVoiceTriggerAbsStartSampleId;
@property (nonatomic, readonly) bool hasPlayedStartAlert;
@property (nonatomic, readonly) bool isOnPhoneCall;
@property (nonatomic, readonly) bool isSpokenNotification;
@property (nonatomic, readonly) bool isTriggerlessFollowup;
@property (nonatomic, readonly, copy) AFLanguageDetectionUserContext *languageDetectionUserContext;
@property (nonatomic, readonly) long long presentationMode;
@property (nonatomic, readonly) long long speechEndpointerOperationMode;
@property (nonatomic, readonly) long long speechEvent;
@property (nonatomic, readonly) AFSpeechRecordingAlertPolicy *speechRecordingAlertPolicy;
@property (nonatomic) long long speechRecordingMode;
@property (nonatomic, readonly, copy) NSUUID *turnIdentifier;
@property (nonatomic, readonly) bool useBorealisBuffer;
@property (nonatomic, readonly) bool usePrelistening;
@property (nonatomic, readonly) unsigned long long voiceTriggerEndHostTime;

+ (id)_alertBehaviorForRecordRoute:(id)arg1 playbackRoute:(id)arg2 recordingInfo:(id)arg3 speechEvent:(long long)arg4 activationMode:(long long)arg5 speechRecordingMode:(long long)arg6 ringerState:(long long)arg7 startingAlertBeepOverideID:(long long)arg8 presentationMode:(long long)arg9 usesDeviceSpeakerForTTS:(long long)arg10 attemptsToUsePastDataBufferFrames:(bool)arg11 usePrelistening:(bool)arg12 isOnPhoneCall:(bool)arg13 hasPlayedStartAlert:(bool)arg14 supportsEchoCancellation:(bool)arg15 isVoiceOverTouchEnabled:(bool)arg16 isDeviceInCarDNDMode:(bool)arg17 isVibrationEnabled:(bool)arg18 isVibrationSupported:(bool)arg19 suppressStartAlert:(bool)arg20 activationHostTime:(unsigned long long)arg21;
+ (id)_alertDictionaryForRecordRoute:(id)arg1 playbackRoute:(id)arg2 recordingInfo:(id)arg3 speechEvent:(long long)arg4 activationMode:(long long)arg5 speechRecordingMode:(long long)arg6 ringerState:(long long)arg7 startingAlertBeepOverideID:(long long)arg8 presentationMode:(long long)arg9 usesDeviceSpeakerForTTS:(long long)arg10 attemptsToUsePastDataBufferFrames:(bool)arg11 usePrelistening:(bool)arg12 isOnPhoneCall:(bool)arg13 hasPlayedStartAlert:(bool)arg14 supportsEchoCancellation:(bool)arg15 isVoiceOverTouchEnabled:(bool)arg16 isDeviceInCarDNDMode:(bool)arg17 isVibrationEnabled:(bool)arg18 isVibrationSupported:(bool)arg19 suppressStartAlert:(bool)arg20 activationHostTime:(unsigned long long)arg21;
+ (id)_dictationAlertBehaviorDictionaryForRecordRoute:(id)arg1 playbackRoute:(id)arg2 ringerState:(long long)arg3 usePrelistening:(bool)arg4 suppressStartAlert:(bool)arg5 supportsEchoCancellation:(bool)arg6 isVibrationEnabled:(bool)arg7 isVibrationSupported:(bool)arg8;
+ (bool)_shouldAllowRecordWhileBeepWithRecordRoute:(id)arg1 playbackRoute:(id)arg2 supportsEchoCancellation:(bool)arg3 speechRecordingMode:(long long)arg4;
+ (bool)_shouldPlayAlertIfNotPrelisteningForSpeechEvent:(long long)arg1 isVoiceOverTouchEnabled:(bool)arg2;

- (void).cxx_destruct;
- (long long)_activationMode;
- (id)_appendDictationApplicationInfoSettings:(id)arg1;
- (id)_audioSessionActiveDelayCoreSpeechWithType:(unsigned long long)arg1;
- (id)_audioSessionActiveDelayOverride;
- (id)_audioSessionActiveDelayServerConfiguration;
- (id)_audioSessionActiveDelayUserPerceptionWithType:(unsigned long long)arg1;
- (bool)_canUseZLL;
- (long long)_csAudioRecordType;
- (long long)_csAudioRecordTypeForSpeechEvent:(long long)arg1 currentClientConfiguration:(id)arg2;
- (long long)_csAudioRecordTypeForSpeechRequestOptions:(id)arg1 useBorealisBuffer:(bool)arg2 currentClientConfiguration:(id)arg3;
- (bool)_eventIsTVRemote;
- (bool)_eventIsVoiceTrigger;
- (bool)_isRequestFromSpokenNotification:(long long)arg1;
- (bool)_isVibrationDisabledInAccessibility;
- (bool)_isVoiceOverTouchEnabledInAccessibility;
- (bool)_shouldSkipStartRecordingAlertForRecordingInfo:(id)arg1;
- (unsigned long long)activationHostTime;
- (id)activationMetadata;
- (double)activationSystemUptime;
- (id)applicationBundleIdentifier;
- (id)applicationDisplayName;
- (long long)audioAlertStyle;
- (void)audioSessionActivated;
- (id)audioSessionActivationTargetDate;
- (unsigned long long)beginUpdateToPostVoice;
- (unsigned long long)buttonDownHostTime;
- (bool)canEnterTwoShot;
- (bool)canGetPCMStream;
- (bool)canPrepareWithoutInterruption;
- (bool)canPrewarm;
- (id)dateByAddingTimeIntervalSinceActivation:(double)arg1;
- (id)description;
- (id)deviceIdentifier;
- (long long)dictationInputOrigin;
- (unsigned long long)dictationVoiceTriggerAbsStartSampleId;
- (void)endUpdateToPostVoiceWithContext:(unsigned long long)arg1 success:(bool)arg2;
- (long long)event;
- (bool)hasPlayedStartAlert;
- (id)initWithSpeechRecordingMode:(long long)arg1 clientConfiguration:(id)arg2 experimentContext:(id)arg3;
- (bool)isOnPhoneCall;
- (bool)isSpokenNotification;
- (bool)isTriggerlessFollowup;
- (bool)isVoiceOverTouchEnabled;
- (id)languageDetectionUserContext;
- (bool)needsUpdateToPostVoiceMode;
- (long long)overrideStartingAlertBeepSoundID;
- (long long)presentationMode;
- (id)recordContext;
- (id)recordContextForSpeechEvent:(long long)arg1;
- (id)recordSettingsWithOptions:(unsigned long long)arg1 appendingSettings:(id)arg2;
- (bool)requiresBorealisConsumerCheck;
- (void)setClientConfiguration:(id)arg1;
- (void)setSpeechRecordingMode:(long long)arg1;
- (void)setSpeechRequestOptions:(id)arg1 currentActivationInfo:(id)arg2;
- (bool)shouldExplicitlyPlayAlertOnStart;
- (bool)shouldPlayAlertIfNotPrelistening;
- (bool)shouldSuppressRecordingErrorAlert;
- (bool)shouldSuppressRecordingStopAlert;
- (bool)shouldTreatTimeoutAsHardEndpoint;
- (bool)shouldUseVoiceTriggerAnalyzerStyle;
- (long long)speechEndpointerOperationMode;
- (long long)speechEvent;
- (id)speechRecordingAlertPolicy;
- (long long)speechRecordingMode;
- (id)startRecordingSettingsWithRecordRoute:(id)arg1 recordingInfo:(id)arg2 playbackRoute:(id)arg3;
- (id)startingAlertBeepURL;
- (id)turnIdentifier;
- (long long)twoShotFeedbackAlertOverrideForRecordRoute:(id)arg1 playbackRoute:(id)arg2 deviceSupportsVibrator:(bool)arg3 deviceSupportsEC:(bool)arg4;
- (long long)twoShotPromptTypeForRecordRoute:(id)arg1 playbackRoute:(id)arg2;
- (bool)useBorealisBuffer;
- (bool)usePrelistening;
- (unsigned long long)voiceTriggerEndHostTime;

@end
