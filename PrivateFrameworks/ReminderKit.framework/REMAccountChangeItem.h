
@interface REMAccountChangeItem : NSObject <REMConflictResolving, REMExternalSyncMetadataWritableProviding, REMPersonIDProviding, REMSaveRequestTrackedValue, REMSupportedVersionProviding, REMSupportedVersionUpdating> {
    REMChangedKeysObserver * _changedKeysObserver;
    REMSaveRequest * _saveRequest;
    REMAccountStorage * _storage;
}

@property (nonatomic, readonly) REMAccountCapabilities *capabilities;
@property (nonatomic, retain) REMChangedKeysObserver *changedKeysObserver;
@property (nonatomic) bool daAllowsCalendarAddDeleteModify;
@property (nonatomic, retain) NSString *daConstraintsDescriptionPath;
@property (nonatomic, copy) NSString *daPushKey;
@property (nonatomic) bool daSupportsSharedCalendars;
@property (nonatomic, copy) NSString *daSyncToken;
@property (nonatomic) bool daWasMigrated;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool debugSyncDisabled;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didChooseToMigrate;
@property (nonatomic) bool didChooseToMigrateLocally;
@property (nonatomic) bool didFinishMigration;
@property (nonatomic, retain) NSString *displayName;
@property (nonatomic, readonly) long long effectiveMinimumSupportedVersion;
@property (nonatomic, copy) NSString *externalIdentifier;
@property (nonatomic, copy) NSString *externalModificationTag;
@property (nonatomic, readonly) REMAccountGroupContextChangeItem *groupContext;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inactive;
@property (nonatomic, readonly) REMCRMergeableOrderedSet *listIDsMergeableOrdering;
@property (nonatomic, readonly) NSData *listIDsMergeableOrderingData;
@property (nonatomic, retain) NSSet *listIDsToUndelete;
@property (nonatomic) bool listsDADisplayOrderChanged;
@property (nonatomic) bool markedForRemoval;
@property (nonatomic, readonly) long long minimumSupportedVersion;
@property (nonatomic, retain) NSString *name;
@property (nonatomic, retain) REMObjectID *objectID;
@property (nonatomic) long long persistenceCloudSchemaVersion;
@property (nonatomic, copy) NSString *personID;
@property (nonatomic, copy) NSData *personIDSalt;
@property (nonatomic, readonly) REMAccountPinnedListsContextChangeItem *pinnedListsContext;
@property (nonatomic, retain) REMManualOrdering *pinnedListsManualOrdering;
@property (nonatomic, readonly) REMObjectID *remObjectID;
@property (nonatomic, retain) REMResolutionTokenMap *resolutionTokenMap;
@property (nonatomic, retain) NSData *resolutionTokenMapData;
@property (nonatomic, readonly) REMSaveRequest *saveRequest;
@property (nonatomic, retain) NSSet *smartListIDsToUndelete;
@property (nonatomic, readonly, copy) REMAccountStorage *storage;
@property (readonly) Class superclass;
@property (nonatomic, retain) REMManualOrdering *templatesManualOrdering;
@property (nonatomic) long long type;

+ (id)_emptyListIDsOrderingWithAccountID:(id)arg1;
+ (void)initialize;

- (void).cxx_destruct;
- (void)_editListIDsOrderingUsingBlock:(id /* block */)arg1;
- (void)_lowLevelAddMergeableOrderingNodeToOrdering:(id)arg1 atIndexOfSibling:(id)arg2 isAfter:(bool)arg3 withParentMergeableOrderingNode:(id)arg4;
- (void)_lowLevelApplyUndoToOrdering:(id)arg1;
- (void)_reassignMergeableOrderingNode:(id)arg1 withParentListChangeItem:(id)arg2;
- (id)accountTypeHost;
- (void)addListChangeItem:(id)arg1;
- (void)addMergeableOrderingNode:(id)arg1;
- (void)addSmartListChangeItem:(id)arg1;
- (bool)canCopyReminderLosslesslyToAccountChangeItem:(id)arg1;
- (id)capabilities;
- (id)changedKeys;
- (id)changedKeysObserver;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)groupContext;
- (id)initWithObjectID:(id)arg1 type:(long long)arg2 name:(id)arg3 insertIntoSaveRequest:(id)arg4;
- (id)initWithSaveRequest:(id)arg1 storage:(id)arg2 capabilities:(id)arg3 changedKeysObserver:(id)arg4;
- (id)initWithSaveRequest:(id)arg1 storage:(id)arg2 capabilities:(id)arg3 observeInitialValues:(bool)arg4;
- (void)insertListChangeItem:(id)arg1 afterListChangeItem:(id)arg2;
- (void)insertListChangeItem:(id)arg1 beforeListChangeItem:(id)arg2;
- (void)insertMergeableOrderingNode:(id)arg1 adjacentToMergeableOrderingNode:(id)arg2 isAfter:(bool)arg3 withParentMergeableOrderingNode:(id)arg4;
- (void)insertMergeableOrderingNode:(id)arg1 afterMergeableOrderingNode:(id)arg2;
- (void)insertMergeableOrderingNode:(id)arg1 beforeMergeableOrderingNode:(id)arg2;
- (void)insertSmartListChangeItem:(id)arg1 afterSmartListChangeItem:(id)arg2;
- (void)insertSmartListChangeItem:(id)arg1 beforeSmartListChangeItem:(id)arg2;
- (bool)isUnsupported;
- (void)lowLevelAddMergeableOrderingNodeIDToOrdering:(id)arg1 withParentMergeableOrderingNode:(id)arg2;
- (id)lowLevelRemoveMergeableOrderingNodeIDFromOrdering:(id)arg1;
- (id)mergeableOrderingNodesByOrderingMergeableOrderingNodes:(id)arg1;
- (id)pinnedListsContext;
- (void)removeFromStore;
- (id)resolutionTokenKeyForChangedKey:(id)arg1;
- (bool)respondsToSelector:(SEL)arg1;
- (id)saveRequest;
- (void)setChangedKeysObserver:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)shallowCopyWithSaveRequest:(id)arg1;
- (id)storage;
- (id)templatesContextChangeItem;
- (void)test_lowLevelEditOrderingByMovingListObjectID:(id)arg1 toTarget:(unsigned long long)arg2;
- (void)undeleteListWithID:(id)arg1 usingUndo:(id)arg2;
- (void)undeleteSmartListWithID:(id)arg1 usingUndo:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;

@end
