
@interface TIKeyboardInputManager_zh_ja : TIKeyboardInputManager {
    struct RefPtr<TI::Favonius::KeyboardLayout> { 
        struct KeyboardLayout {} *m_ptr; 
    }  _baseLayout;
    MCDrawInput * _cancelledDrawInput;
    NSArray * _clearedGeometryDataArray;
    NSArray * _clearedTouchDataArray;
    MCKeyboardInput * _composingInput;
    TIKeyboardInputManager_zh_ja * _composingKeyboardInputManager;
    id /* block */  _compositionCompletionHandler;
    NSString * _currentClientIdentifier;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentLayoutCharacterKeysFrame;
    NSString * _currentRecipientIdentifier;
    struct RefPtr<TI::Favonius::KeyboardLayout> { 
        struct KeyboardLayout {} *m_ptr; 
    }  _favoniusLayoutForCharacterKeysFrame;
    NSMutableArray * _geometryDataArray;
    bool  _hasBackspacedIntoInputString;
    bool  _hasCommittedPartialCandidate;
    int  _lastCommittedCandidateType;
    bool  _preservesComposingInput;
    MCKeyboardInput * _previouslyDeletedTypeInput;
    MCKeyboardInput * _previouslyProcessedDeleteInput;
    NSMutableArray * _touchDataArray;
    NSMutableDictionary * _touchDownEvents;
    NSMutableDictionary * _touchUpEvents;
    TIWordSearch * _wordSearch;
    TIWordSearchCandidateResultSet * _wordSearchCandidateResultSet;
    TIKeyboardInputManager_zh_ja * chainedKeyboardInputManager;
}

@property (nonatomic, readonly) struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout {} *x1; } baseLayout;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } baseLayoutCharacterKeysFrame;
@property (nonatomic, retain) MCDrawInput *cancelledDrawInput;
@property (nonatomic, readonly) TIKeyboardInputManager_zh_ja *chainedKeyboardInputManager;
@property (nonatomic, retain) NSArray *clearedGeometryDataArray;
@property (nonatomic, retain) NSArray *clearedTouchDataArray;
@property (nonatomic, readonly) MCKeyboardInput *composingInput;
@property (nonatomic, retain) TIKeyboardInputManager_zh_ja *composingKeyboardInputManager;
@property (nonatomic, copy) id /* block */ compositionCompletionHandler;
@property (nonatomic, copy) NSString *currentClientIdentifier;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentLayoutCharacterKeysFrame;
@property (nonatomic, copy) NSString *currentRecipientIdentifier;
@property (nonatomic) struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout {} *x1; } favoniusLayoutForCharacterKeysFrame;
@property (nonatomic, readonly) NSMutableArray *geometryDataArray;
@property (nonatomic) bool hasBackspacedIntoInputString;
@property (nonatomic) bool hasCommittedPartialCandidate;
@property (nonatomic) int lastCommittedCandidateType;
@property (nonatomic, readonly) struct __Mecabra { }*mecabra;
@property (nonatomic) bool preservesComposingInput;
@property (nonatomic, retain) MCKeyboardInput *previouslyDeletedTypeInput;
@property (nonatomic, retain) MCKeyboardInput *previouslyProcessedDeleteInput;
@property (nonatomic, readonly) bool supportsPerRecipientLearning;
@property (nonatomic, readonly) NSMutableArray *touchDataArray;
@property (nonatomic, readonly) NSMutableDictionary *touchDownEvents;
@property (nonatomic, readonly) NSMutableDictionary *touchUpEvents;
@property (nonatomic, readonly) bool usesComposingInput;
@property (nonatomic, readonly) NSCharacterSet *validCharacterSetForAutocorrection;
@property (nonatomic, readonly) struct USet { }*validUSetForAutocorrection;
@property (nonatomic, readonly) TIWordSearch *wordSearch;
@property (nonatomic, retain) TIWordSearchCandidateResultSet *wordSearchCandidateResultSet;

+ (id)dummyGeometryData;
+ (id)dummyTouchData;
+ (id)initializedClients;
+ (id)inputMethodWithChainedKeyboardInputManager:(id)arg1;
+ (id)offlineLearningHandleForInputMode:(id)arg1;
+ (void)removeDynamicDictionaryForInputMode:(id)arg1;
+ (Class)wordSearchClass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2;
- (void)_completeComposition:(bool)arg1;
- (struct pair<NSString *, NSArray<NSNumber *> *> { id x1; id x2; })_supplementalItemIdentifiersInCurrentSelection;
- (void)abortComposition;
- (id)adaptationContextReadingForReanalysisString:(id)arg1 fromRecentlyCommittedCandidates:(id)arg2;
- (void)addProactiveTriggers:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (long long)addTouch:(id)arg1 shouldHitTest:(bool)arg2;
- (unsigned long long)additionalAnalysisOptions;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2;
- (bool)alreadyGeneratedCandidates;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })analysisStringRange;
- (id)autocorrectionListFromWordSearchCandidateResultSet:(id)arg1 emojiCandidates:(id)arg2;
- (id)autocorrectionListWithCandidateCount:(unsigned long long)arg1;
- (unsigned long long)autoquoteType;
- (struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout {} *x1; })baseLayout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })baseLayoutCharacterKeysFrame;
- (bool)canTypeAndPathSimultaneously;
- (void)cancelComposition;
- (id)cancelledDrawInput;
- (void)candidateRejected:(id)arg1;
- (id)candidateResultSetFromWordSearchCandidateResultSet:(id)arg1;
- (id)chainedKeyboardInputManager;
- (void)clearInput;
- (id)clearedGeometryDataArray;
- (id)clearedTouchDataArray;
- (void)commitComposition;
- (void)completeComposition;
- (void)composeText:(id /* block */)arg1;
- (void)composeTextWith:(id)arg1;
- (id)composingInput;
- (id)composingKeyboardInputManager;
- (id /* block */)compositionCompletionHandler;
- (id)convertInputsToSyntheticInputUptoCount:(int)arg1;
- (id)currentClientIdentifier;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentLayoutCharacterKeysFrame;
- (id)currentRecipientIdentifier;
- (void)dealloc;
- (void)deleteFromInputWithContext:(id)arg1;
- (void)dropInputPrefix:(unsigned int)arg1;
- (struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout {} *x1; })favoniusLayoutForCharacterKeysFrame;
- (void)generateAutocorrectionsWithKeyboardState:(id)arg1 candidateRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 candidateHandler:(id)arg3;
- (void)generateCandidatesWithKeyboardState:(id)arg1 candidateRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 candidateHandler:(id)arg3;
- (id)generateRefinementsForCandidate:(id)arg1;
- (id)generateReplacementsForString:(id)arg1 keyLayout:(id)arg2;
- (id)geometryDataArray;
- (id)geometryModelData;
- (id)handleAcceptedCandidate:(id)arg1 keyboardState:(id)arg2;
- (id)handleKeyboardInput:(id)arg1;
- (void)handlePerformBackgroundMaintenanceNotification;
- (bool)hasBackspacedIntoInputString;
- (bool)hasCommittedPartialCandidate;
- (void)incrementUsageTrackingKeysForDeleteFromInput;
- (id)initWithConfig:(id)arg1 keyboardState:(id)arg2;
- (id)initWithKeyboardInputManagerToChain:(id)arg1;
- (id)inputsToReject;
- (void)insertDummyGeometryDataAtIndex:(unsigned long long)arg1;
- (void)insertDummyTouchDataAtIndex:(unsigned long long)arg1;
- (bool)isProgressivelyPathing;
- (id)keyboardConfiguration;
- (void)lastAcceptedCandidateCorrected;
- (int)lastCommittedCandidateType;
- (void)logAllCandidates;
- (void)logCommittedCandidate:(id)arg1 partial:(bool)arg2;
- (void)logDocumentContext;
- (void)logInputString;
- (struct __Mecabra { }*)mecabra;
- (void*)mecabraCandidateRefFromCandidate:(id)arg1;
- (int)mecabraTextContentTypeFromTITextContentType:(id)arg1;
- (bool)needsTouchEvents;
- (void)padGeometryForInput:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)pathedWordSeparator;
- (unsigned int)pathedWordSeparatorChar;
- (long long)performHitTestForTouchEvent:(id)arg1 keyboardState:(id)arg2;
- (bool)preservesComposingInput;
- (id)previouslyDeletedTypeInput;
- (id)previouslyProcessedDeleteInput;
- (void)registerLearning:(id)arg1 fullCandidate:(id)arg2 keyboardState:(id)arg3 mode:(id)arg4;
- (void)registerLearningForCompletion:(id)arg1 fullCompletion:(id)arg2 context:(id)arg3 prefix:(id)arg4 mode:(id)arg5;
- (void)restoreGeometryForInput:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)resume;
- (void)saveGeometryForInput:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)savePartialGeometryData;
- (void)saveTouchDataForEvent:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)segmentsFromCandidate:(id)arg1 phraseBoundary:(bool)arg2;
- (void)setCancelledDrawInput:(id)arg1;
- (void)setClearedGeometryDataArray:(id)arg1;
- (void)setClearedTouchDataArray:(id)arg1;
- (void)setComposingKeyboardInputManager:(id)arg1;
- (void)setCompositionCompletionHandler:(id /* block */)arg1;
- (void)setCurrentClientIdentifier:(id)arg1;
- (void)setCurrentRecipientIdentifier:(id)arg1;
- (void)setFavoniusLayoutForCharacterKeysFrame:(struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout {} *x1; })arg1;
- (void)setHasBackspacedIntoInputString:(bool)arg1;
- (void)setHasCommittedPartialCandidate:(bool)arg1;
- (void)setKeyboardState:(id)arg1;
- (void)setLanguageModelAdaptationContext;
- (void)setLastCommittedCandidateType:(int)arg1;
- (void)setOriginalInput:(id)arg1;
- (void)setPreservesComposingInput:(bool)arg1;
- (void)setPreviouslyDeletedTypeInput:(id)arg1;
- (void)setPreviouslyProcessedDeleteInput:(id)arg1;
- (void)setWordSearchCandidateResultSet:(id)arg1;
- (bool)shouldClearInputOnMarkedTextOutOfSync;
- (bool)shouldDelayUpdateComposedText;
- (bool)shouldResample;
- (bool)shouldRescaleTouchPoints;
- (bool)shouldUpdateLanguageModel;
- (void)skipHitTestForTouchEvent:(id)arg1 keyboardState:(id)arg2;
- (void)storeLanguageModelDynamicDataIncludingCache;
- (bool)stringContainsActiveSupplementalLexiconSearchPrefix:(id)arg1;
- (bool)stringEndsWord:(id)arg1;
- (bool)supportsCandidateGeneration;
- (bool)supportsPerRecipientLearning;
- (void)suspend;
- (void)syncMarkedTextForKeyboardState:(id)arg1 afterContextChange:(bool)arg2;
- (bool)syncToKeyboardState:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)syncToKeyboardState:(id)arg1 from:(id)arg2 afterContextChange:(bool)arg3;
- (void)tearDown;
- (void)textAccepted:(id)arg1 fromPredictiveInputBar:(bool)arg2 withInput:(id)arg3;
- (id)touchDataArray;
- (id)touchDataForPathIndex:(long long)arg1;
- (id)touchDownEvents;
- (id)touchUpEvents;
- (void)updateComposedText;
- (void)updateDocumentContext;
- (bool)updateLanguageModelForKeyboardState;
- (void)updateProactiveCandidatesForCandidateResultSet:(id)arg1 withInput:(id)arg2;
- (void)updateUsageStatisticsForCandidate:(id)arg1 isPartial:(bool)arg2;
- (bool)usesComposingInput;
- (bool)usesMarkedTextForInput;
- (id)validCharacterSetForAutocorrection;
- (struct USet { }*)validUSetForAutocorrection;
- (bool)whiteSpaceEndsSentence;
- (id)wordSearch;
- (id)wordSearchCandidateResultSet;
- (id)wordSeparator;

@end
