
@interface STSReader : NSObject <NFSecureTransactionServicesHandoverSessionDelegate, STSHelperLibraryDelegateProtocol, STSXPCClientNotificationListenerDelegate> {
    bool  _alternativeCarrierConnected;
    STSCASessionStats * _caSessionStats;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    id /* block */  _connectionHandler;
    unsigned long long  _engagementConfiguration;
    NFSecureTransactionServicesHandoverSession * _handoverSession;
    NSObject<NFSession> * _initiatingSession;
    id /* block */  _invalidationHandler;
    STSHardwareManagerWrapper * _nfHwManager;
    NFSecureElementManagerSession * _proxyReaderSESession;
    bool  _queuePaused;
    STSTimer * _responseTimeout;
    NFSecureElementReaderProxyListener * _seProxyListener;
    id /* block */  _sendRequestCompletion;
    id /* block */  _sessionStartCompletion;
    NSData * _sessionTranscriptBytes;
    long long  _state;
    STSHelperLibrary * _stsHelper;
    STSXPCClientNotificationListener * _stsNotificationListener;
    id /* block */  _tnepStatusHandler;
    long long  _transmissionState;
    unsigned long long  _type;
}

@property (nonatomic) bool alternativeCarrierConnected;
@property (nonatomic, retain) STSCASessionStats *caSessionStats;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, copy) id /* block */ connectionHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long engagementConfiguration;
@property (nonatomic, retain) NFSecureTransactionServicesHandoverSession *handoverSession;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<NFSession> *initiatingSession;
@property (nonatomic, copy) id /* block */ invalidationHandler;
@property (nonatomic, retain) STSHardwareManagerWrapper *nfHwManager;
@property (nonatomic, retain) NFSecureElementManagerSession *proxyReaderSESession;
@property (nonatomic) bool queuePaused;
@property (nonatomic, retain) STSTimer *responseTimeout;
@property (nonatomic, retain) NFSecureElementReaderProxyListener *seProxyListener;
@property (nonatomic, copy) id /* block */ sendRequestCompletion;
@property (nonatomic, copy) id /* block */ sessionStartCompletion;
@property (nonatomic, retain) NSData *sessionTranscriptBytes;
@property (nonatomic) long long state;
@property (nonatomic, retain) STSHelperLibrary *stsHelper;
@property (nonatomic, retain) STSXPCClientNotificationListener *stsNotificationListener;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ tnepStatusHandler;
@property (nonatomic) long long transmissionState;
@property (nonatomic, readonly) unsigned long long type;

- (void).cxx_destruct;
- (void)_activateInvalidationHandler:(id)arg1;
- (void)_activateOnConnectCompletion;
- (void)_activateSendRequestCompletion:(id)arg1 terminationRequested:(bool)arg2 error:(id)arg3;
- (void)_activateSessionStartCompletion:(id)arg1;
- (void)_activateTnepStatusHandler:(id)arg1;
- (void)_seProxyCleanup:(id /* block */)arg1;
- (id)_translateNfcdXPCHelperError:(id)arg1;
- (id)_translateSTSXPCHelperError:(id)arg1;
- (id)_translateXPCClientNotificationStatus:(unsigned long long)arg1;
- (bool)alternativeCarrierConnected;
- (void)alternativeCarrierConnectedWithStatus:(unsigned long long)arg1;
- (void)alternativeCarrierDisconnectedWithStatus:(unsigned long long)arg1;
- (void)alternativeCarrierReceived:(id)arg1 dataPending:(bool)arg2;
- (id)caSessionStats;
- (id)callbackQueue;
- (id /* block */)connectionHandler;
- (void)connectionHandoverCompleted:(id)arg1;
- (void)dealloc;
- (unsigned long long)engagementConfiguration;
- (void)executeOnSEProxyWithBlock:(id /* block */)arg1;
- (id)handoverSession;
- (id)initWithType:(unsigned long long)arg1 queue:(id)arg2;
- (id)initiatingSession;
- (void)invalidate;
- (void)invalidateWithCode:(unsigned int)arg1;
- (void)invalidateWithCodeSync:(unsigned int)arg1;
- (id /* block */)invalidationHandler;
- (id)nfHwManager;
- (void)notificationClientConnected;
- (id)proxyReaderSESession;
- (bool)queuePaused;
- (void)receiveISO18013DeviceResponse:(id)arg1 sessionDataStatus:(id)arg2 status:(id)arg3;
- (void)relinquishSEProxy;
- (id)responseTimeout;
- (id)seProxyListener;
- (void)sendDocumentRequest:(id)arg1 timeoutInterval:(double)arg2 sessionTermination:(bool)arg3 responseHandler:(id /* block */)arg4;
- (id /* block */)sendRequestCompletion;
- (void)session:(id)arg1 connectionHandoverProcessFailure:(id)arg2;
- (void)session:(id)arg1 didEndUnexpectedly:(id)arg2;
- (void)session:(id)arg1 fieldNotification:(id)arg2;
- (void)session:(id)arg1 tnepService:(id)arg2;
- (id /* block */)sessionStartCompletion;
- (id)sessionTranscriptBytes;
- (void)sessionTranscriptGenerated:(id)arg1;
- (void)setAlternativeCarrierConnected:(bool)arg1;
- (void)setCaSessionStats:(id)arg1;
- (void)setConnectionHandler:(id /* block */)arg1;
- (void)setEngagementConfiguration:(unsigned long long)arg1;
- (void)setHandoverSession:(id)arg1;
- (void)setInitiatingSession:(id)arg1;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setNfHwManager:(id)arg1;
- (void)setProxyReaderSESession:(id)arg1;
- (void)setQueuePaused:(bool)arg1;
- (void)setResponseTimeout:(id)arg1;
- (void)setSeProxyListener:(id)arg1;
- (void)setSendRequestCompletion:(id /* block */)arg1;
- (void)setSessionStartCompletion:(id /* block */)arg1;
- (void)setSessionTranscriptBytes:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setStsHelper:(id)arg1;
- (void)setStsNotificationListener:(id)arg1;
- (void)setTnepStatusHandler:(id /* block */)arg1;
- (void)setTransmissionState:(long long)arg1;
- (id)startWithConfiguration:(id)arg1 connectionHandler:(id /* block */)arg2 tnepStatusHandler:(id /* block */)arg3 invalidationHandler:(id /* block */)arg4 completion:(id /* block */)arg5;
- (id)startWithHandoverType:(unsigned long long)arg1 connectionHandler:(id /* block */)arg2 tnepStatusHandler:(id /* block */)arg3 invalidationErrorHandler:(id /* block */)arg4 completion:(id /* block */)arg5;
- (long long)state;
- (id)stsHelper;
- (id)stsNotificationListener;
- (id /* block */)tnepStatusHandler;
- (void)transactionEndedWithIdentifier:(id)arg1 error:(id)arg2;
- (void)transactionStarted:(unsigned long long)arg1;
- (long long)transmissionState;
- (unsigned long long)type;
- (void)xpcInterrupted;
- (void)xpcInvalidated;

@end
