
@interface CaptureMTLTexture : NSObject <CaptureMTLObject, MTLResourceSPI, MTLTextureImplementation> {
    <MTLTextureSPI><MTLResourceSPI> * _baseObject;
    <MTLDevice> * _captureDevice;
    <MTLHeap> * _captureHeap;
    <MTLTexture> * _captureRemoteStorageTexture;
    <MTLResource> * _captureRootResource;
    struct GTTraceContext { } * _traceContext;
    struct GTTraceStream { } * _traceStream;
}

@property (readonly) unsigned long long allocatedSize;
@property (readonly) unsigned long long allocationID;
@property (readonly) bool allowGPUOptimizedContents;
@property (readonly) unsigned long long arrayLength;
@property (readonly) <MTLTexture> *baseObject;
@property (readonly) <MTLBuffer> *buffer;
@property (readonly) unsigned long long bufferBytesPerRow;
@property (readonly) unsigned long long bufferOffset;
@property (nonatomic, readonly) unsigned long long colorSpaceConversionMatrix;
@property (readonly) long long compressionFeedback;
@property (nonatomic, readonly) unsigned long long compressionFootprint;
@property (readonly) long long compressionType;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long depth;
@property (readonly, copy) NSString *description;
@property (readonly) <MTLDevice> *device;
@property (readonly) unsigned long long firstMipmapInTail;
@property (getter=isFramebufferOnly, readonly) bool framebufferOnly;
@property (nonatomic, readonly) unsigned long long gpuAddress;
@property (readonly) unsigned long long gpuHandle;
@property (readonly) struct MTLResourceID { unsigned long long x1; } gpuResourceID;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hazardTrackingMode;
@property (readonly) <MTLHeap> *heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long height;
@property (readonly) struct __IOSurface { }*iosurface;
@property (readonly) unsigned long long iosurfacePlane;
@property (readonly) bool isCompressed;
@property (readonly) bool isDrawable;
@property (readonly) bool isSparse;
@property (copy) NSString *label;
@property (readonly) unsigned long long mipmapLevelCount;
@property (readonly) unsigned long long numFaces;
@property (readonly) unsigned long long parentRelativeLevel;
@property (readonly) unsigned long long parentRelativeSlice;
@property (readonly) <MTLTexture> *parentTexture;
@property (readonly) unsigned long long pixelFormat;
@property (readonly) unsigned long long protectionOptions;
@property (nonatomic, readonly) unsigned long long resourceIndex;
@property (readonly) unsigned long long resourceOptions;
@property int responsibleProcess;
@property (readonly) <MTLResource> *rootResource;
@property (readonly) unsigned long long rotation;
@property (readonly) unsigned long long sampleCount;
@property (getter=isShareable, readonly) bool shareable;
@property (readonly) unsigned long long sparseSurfaceDefaultValue;
@property (readonly) unsigned long long storageMode;
@property (readonly) unsigned long long streamReference;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; } swizzle;
@property (readonly) unsigned int swizzleKey;
@property (readonly) unsigned long long tailSizeInBytes;
@property (readonly) unsigned long long textureType;
@property (readonly) struct GTTraceContext { }*traceContext;
@property (readonly) struct GTTraceStream { }*traceStream;
@property (readonly) unsigned long long unfilteredResourceOptions;
@property (readonly) unsigned long long uniqueIdentifier;
@property (readonly) unsigned long long usage;
@property (readonly) unsigned long long width;

- (void).cxx_destruct;
- (id)_quicklookData;
- (unsigned long long)allocatedSize;
- (unsigned long long)allocationID;
- (bool)allowGPUOptimizedContents;
- (unsigned long long)arrayLength;
- (id)baseObject;
- (id)buffer;
- (unsigned long long)bufferBytesPerRow;
- (unsigned long long)bufferOffset;
- (bool)canGenerateMipmapLevels;
- (unsigned long long)colorSpaceConversionMatrix;
- (long long)compressionFeedback;
- (unsigned long long)compressionFootprint;
- (long long)compressionType;
- (bool)conformsToProtocol:(id)arg1;
- (unsigned long long)cpuCacheMode;
- (void)dealloc;
- (unsigned long long)depth;
- (id)description;
- (id)device;
- (bool)doesAliasAllResources:(const id*)arg1 count:(unsigned long long)arg2;
- (bool)doesAliasAnyResources:(const id*)arg1 count:(unsigned long long)arg2;
- (bool)doesAliasResource:(id)arg1;
- (unsigned long long)firstMipmapInTail;
- (id)formattedDescription:(unsigned long long)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)generateMipmapLevel:(unsigned long long)arg1 slice:(unsigned long long)arg2;
- (void)getBytes:(void*)arg1 bytesPerRow:(unsigned long long)arg2 bytesPerImage:(unsigned long long)arg3 fromRegion:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; })arg4 mipmapLevel:(unsigned long long)arg5 slice:(unsigned long long)arg6;
- (void)getBytes:(void*)arg1 bytesPerRow:(unsigned long long)arg2 fromRegion:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; })arg3 mipmapLevel:(unsigned long long)arg4;
- (unsigned long long)gpuAddress;
- (unsigned long long)gpuHandle;
- (struct MTLResourceID { unsigned long long x1; })gpuResourceID;
- (unsigned long long)hazardTrackingMode;
- (id)heap;
- (unsigned long long)heapOffset;
- (unsigned long long)height;
- (id)initWithBaseObject:(id)arg1 captureBuffer:(id)arg2;
- (id)initWithBaseObject:(id)arg1 captureDevice:(id)arg2;
- (id)initWithBaseObject:(id)arg1 captureHeap:(id)arg2;
- (id)initWithBaseObject:(id)arg1 captureTexture:(id)arg2;
- (struct __IOSurface { }*)iosurface;
- (unsigned long long)iosurfacePlane;
- (bool)isAliasable;
- (bool)isComplete;
- (bool)isCompressed;
- (bool)isDrawable;
- (bool)isFramebufferOnly;
- (bool)isPurgeable;
- (bool)isShareable;
- (bool)isSparse;
- (id)label;
- (void)makeAliasable;
- (unsigned long long)mipmapLevelCount;
- (id)newCompressedTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 level:(unsigned long long)arg3 slice:(unsigned long long)arg4;
- (id)newSharedTextureHandle;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 resourceIndex:(unsigned long long)arg2;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 slices:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 slices:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 resourceIndex:(unsigned long long)arg5;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 slices:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 swizzle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; })arg5;
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 slices:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 swizzle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; })arg5 resourceIndex:(unsigned long long)arg6;
- (unsigned long long)numFaces;
- (id)originalObject;
- (unsigned long long)parentRelativeLevel;
- (unsigned long long)parentRelativeSlice;
- (id)parentTexture;
- (unsigned long long)pixelFormat;
- (void)replaceRegion:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; })arg1 mipmapLevel:(unsigned long long)arg2 slice:(unsigned long long)arg3 withBytes:(const void*)arg4 bytesPerRow:(unsigned long long)arg5 bytesPerImage:(unsigned long long)arg6;
- (void)replaceRegion:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; })arg1 mipmapLevel:(unsigned long long)arg2 withBytes:(const void*)arg3 bytesPerRow:(unsigned long long)arg4;
- (unsigned long long)resourceIndex;
- (unsigned long long)resourceOptions;
- (bool)respondsToSelector:(SEL)arg1;
- (int)responsibleProcess;
- (id)rootResource;
- (unsigned long long)rotation;
- (unsigned long long)sampleCount;
- (void)setLabel:(id)arg1;
- (unsigned long long)setPurgeableState:(unsigned long long)arg1;
- (void)setResponsibleProcess:(int)arg1;
- (unsigned long long)sparseSurfaceDefaultValue;
- (unsigned long long)storageMode;
- (unsigned long long)streamReference;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; })swizzle;
- (unsigned int)swizzleKey;
- (unsigned long long)tailSize;
- (unsigned long long)tailSizeInBytes;
- (unsigned long long)textureType;
- (void)touch;
- (struct GTTraceContext { }*)traceContext;
- (struct GTTraceStream { }*)traceStream;
- (unsigned long long)unfilteredResourceOptions;
- (unsigned long long)uniqueIdentifier;
- (unsigned long long)usage;
- (void)waitUntilComplete;
- (unsigned long long)width;

@end
