
@interface MSCMSRecipientInfo : NSObject {
    NSArray * _algorithmCapabilities;
    NSArray * _encryptedKeys;
    MSAlgorithmIdentifier * _keyEncryptionAlgorithm;
    struct __SecCertificate { } * _originator;
    NSData * _originatorPubKey;
    struct __SecCertificate { } * _recipientCertificate;
    NSArray * _recipientCertificates;
    NSData * _userKeyingMaterial;
    NSNumber * _version;
}

@property (retain) NSArray *algorithmCapabilities;
@property (retain) NSArray *encryptedKeys;
@property (retain) MSAlgorithmIdentifier *keyEncryptionAlgorithm;
@property (nonatomic) struct __SecCertificate { }*originator;
@property (retain) NSData *originatorPubKey;
@property (nonatomic) struct __SecCertificate { }*recipientCertificate;
@property (retain) NSArray *recipientCertificates;
@property (retain) NSData *userKeyingMaterial;
@property (retain) NSNumber *version;

+ (id)decodeKeyAgreeRecipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg1 certificates:(id)arg2 LAContext:(id)arg3 error:(id*)arg4;
+ (id)decodeKeyTransRecipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg1 certificates:(id)arg2 LAContext:(id)arg3 error:(id*)arg4;
+ (id)decodeRecipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg1 certificates:(id)arg2 LAContext:(id)arg3 error:(id*)arg4;

- (void).cxx_destruct;
- (id)algorithmCapabilities;
- (void)dealloc;
- (bool)encodeKeyAgreeRecipientInfo:(id)arg1 recipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg2 error:(id*)arg3;
- (bool)encodeKeyTransRecipientInfo:(id)arg1 recipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg2 error:(id*)arg3;
- (bool)encodeRecipientInfo:(id)arg1 recipientInfo:(struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg2 error:(id*)arg3;
- (id)encryptBulkKey:(id)arg1;
- (id)encryptedKeys;
- (void)freeKeyTransRecipientInfo:(const struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg1;
- (void)freeRecipientInfo:(const struct RecipientInfo { int x1; union { struct KeyTransRecipientInfo { int x_1_2_1; struct heim_base_data { unsigned long long x_2_3_1; void *x_2_3_2; } x_1_2_2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_3_3_1; struct heim_base_data {} *x_3_3_2; } x_1_2_3; struct heim_base_data { unsigned long long x_4_3_1; void *x_4_3_2; } x_1_2_4; } x_2_1_1; struct KeyAgreeRecipientInfo { int x_2_2_1; struct OriginatorIdentifierOrKey { int x_2_3_1; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x_1_6_1; void *x_1_6_2; } x_1_5_1; struct heim_integer { unsigned long long x_2_6_1; void *x_2_6_2; int x_2_6_3; } x_1_5_2; } x_2_4_1; struct heim_base_data { unsigned long long x_2_5_1; void *x_2_5_2; } x_2_4_2; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_7_1; unsigned int *x_1_7_2; } x_1_6_1; struct heim_base_data {} *x_1_6_2; } x_3_5_1; struct heim_bit_string { unsigned long long x_2_6_1; void *x_2_6_2; } x_3_5_2; } x_2_4_3; } x_2_3_2; } x_2_2_2; struct heim_base_data {} *x_2_2_3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x_1_4_1; unsigned int *x_1_4_2; } x_4_3_1; struct heim_base_data {} *x_4_3_2; } x_2_2_4; struct RecipientEncryptedKeys { unsigned int x_5_3_1; struct RecipientEncryptedKey {} *x_5_3_2; } x_2_2_5; } x_2_1_2; } x2; }*)arg1;
- (id)initWithCertificate:(struct __SecCertificate { }*)arg1;
- (id)initWithCertificate:(struct __SecCertificate { }*)arg1 algorithmCapabilities:(id)arg2;
- (id)initWithCertificate:(struct __SecCertificate { }*)arg1 keyEncryptionAlgorithm:(id)arg2 keyWrapAlgorithm:(id)arg3;
- (id)initWithCertificate:(struct __SecCertificate { }*)arg1 legacyKeyWrapAlgorithm:(bool)arg2;
- (id)initWithEmail:(id)arg1;
- (id)initWithEmail:(id)arg1 algorithmCapabilities:(id)arg2;
- (id)initWithEmail:(id)arg1 keyEncryptionAlgorithm:(id)arg2;
- (id)key;
- (id)keyEncryptionAlgorithm;
- (struct __CFData { }*)keyEncryptionKey:(id)arg1 forEncryption:(bool)arg2;
- (struct __SecCertificate { }*)originator;
- (id)originatorPubKey;
- (struct __SecCertificate { }*)recipientCertificate;
- (id)recipientCertificates;
- (void)setAlgorithmCapabilities:(id)arg1;
- (void)setEncryptedKeys:(id)arg1;
- (void)setKeyEncryptionAlgorithm:(id)arg1;
- (void)setOriginator:(struct __SecCertificate { }*)arg1;
- (void)setOriginatorPubKey:(id)arg1;
- (void)setRecipientCertificate:(struct __SecCertificate { }*)arg1;
- (void)setRecipientCertificates:(id)arg1;
- (void)setUserKeyingMaterial:(id)arg1;
- (void)setVersion:(id)arg1;
- (id)userKeyingMaterial;
- (id)version;

@end
