
@interface PGGraph : MAGraph {
    NSDateFormatter * _dateFormatter;
    NSObject<OS_dispatch_queue> * _graphQueue;
    PGGraphLocationCityNodeCollection * _interestingCityNodes;
    PGMessageProfile * _messageProfile;
    PGGraphLocationCityNodeCollection * _supersetCityNodes;
    PGGraphLocationCountryNodeCollection * _supersetCountryNodes;
    PGGraphLocationCountyNodeCollection * _supersetCountyNodes;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _supersetLock;
    PGGraphLocationStateNodeCollection * _supersetStateNodes;
    NSDictionary * _zeroKeywordMappingByMeaningLabel;
}

@property (nonatomic, readonly) NSDateFormatter *dateFormatter;
@property (nonatomic) NSObject<OS_dispatch_queue> *graphQueue;
@property (readonly) PGGraphInfoNode *infoNode;
@property (readonly) bool isOnGraphQueue;
@property (nonatomic, readonly) long long librarySizeRange;
@property (nonatomic, retain) PGMessageProfile *messageProfile;
@property (nonatomic, readonly) NSSet *musicSessions;
@property (nonatomic, readonly) PGGraphLocationCityNodeCollection *supersetCityNodes;
@property (nonatomic, readonly) PGGraphLocationCountryNodeCollection *supersetCountryNodes;
@property (nonatomic, readonly) PGGraphLocationCountyNodeCollection *supersetCountyNodes;
@property (nonatomic, readonly) PGGraphLocationStateNodeCollection *supersetStateNodes;
@property (nonatomic, readonly) NSSet *supersets;
@property (nonatomic, readonly) NSDictionary *zeroKeywordMappingByMeaningLabel;

+ (id)_closestRelationshipEdgeLabelForPersonNode:(id)arg1 andOtherPersonNode:(id)arg2;
+ (id)_findParentMeaningLabelForMeaningLabel:(id)arg1 inTree:(id)arg2 currentParent:(id)arg3;
+ (id)_graphNodePOILabelByPlaceType;
+ (id)_meaningLabelTree;
+ (id)_personClosestToMeBetweenPersonNode:(id)arg1 andOtherPersonNode:(id)arg2;
+ (void)_traverseMeaningLabelsInTree:(id)arg1 usingBlock:(id /* block */)arg2;
+ (void)_traverseMeaningLabelsUsingBlock:(id /* block */)arg1;
+ (id)allMeaningfulMeanings;
+ (id)assetPropertySetsForIngest;
+ (id)availableInferredMeaningLabels;
+ (id)defaultMatchingSortDescriptors;
+ (id)defaultSpecification;
+ (id)frequentMeaningLabels;
+ (bool)graphExistsAtURL:(id)arg1;
+ (bool)graphExistsWithName:(id)arg1 parentDirectoryURL:(id)arg2;
+ (id)graphURLForName:(id)arg1 parentDirectoryURL:(id)arg2;
+ (id)graphWithVisualString:(id)arg1 error:(id*)arg2;
+ (id)lessMeaningfulMeanings;
+ (long long)librarySizeRangeForNumberOfAssets:(unsigned long long)arg1;
+ (id)matchingBlockedSceneLabels;
+ (id)matchingWeightToDictionary;
+ (unsigned long long)meaningForMeaningLabel:(id)arg1;
+ (id)meaningLabelForMeaning:(unsigned long long)arg1;
+ (id)mostSignificantMeaningLabels;
+ (id)parentMeaningLabelForMeaningLabel:(id)arg1;
+ (id)poiLabelForPOIType:(id)arg1;
+ (id)preciseMeaningNodeForMeaningLabel:(id)arg1 meaningfulEvent:(id)arg2;
+ (id)socialGroupPeopleSortDescriptorForSocialGroupNode:(id)arg1;
+ (id)stellarMeanings;
+ (void)traverseParentMeaningsForMeaningLabel:(id)arg1 usingBlock:(id /* block */)arg2;
+ (id)veryMeaningfulMeanings;

- (void).cxx_destruct;
- (void)_checkCanRead;
- (id)_closestLocationNodeFromAddressNode:(id)arg1 toAddressNode:(id)arg2;
- (unsigned long long)_cluePeopleForRelationships:(id)arg1;
- (id)_commonAreaNodesBetweenAddressAreaNodes:(id)arg1 andAddressNode:(id)arg2;
- (id)_commonAreaNodesBetweenAddressNode:(id)arg1 andAddressNode:(id)arg2;
- (id)_coreEventMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_coreLocationMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_corePlaceMatchingIdsToScoresFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_coreSceneMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (unsigned long long)_countOfDistinctSocialGroups:(id)arg1;
- (id)_createZeroKeywordMappingByMeaningLabel;
- (double)_distanceForLocationLabel:(id)arg1;
- (void)_enumerateMeaningfulEventsWithMeaningLabel:(id)arg1 visitedMeaningfulEvents:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)_enumerateMomentForMomentNode:(id)arg1 inPhotoLibrary:(id)arg2 paddingTime:(double)arg3 enumerationBlock:(id /* block */)arg4;
- (bool)_enumerateMomentNodesForAssetCollection:(id)arg1 paddingTime:(double)arg2 error:(id*)arg3 enumerationBlock:(id /* block */)arg4;
- (id)_eventMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_eventMatchingIdsToScoresFromEvent:(id)arg1 options:(id)arg2;
- (id)_eventsFromEvents:(id)arg1 withTargetDomain:(unsigned short)arg2;
- (id)_firstLocationNodeFromAddressNode:(id)arg1 inLocationNodes:(id)arg2;
- (id)_fuzzyMomentLookupForMomentNode:(id)arg1 inPhotoLibrary:(id)arg2 error:(id*)arg3;
- (id)_fuzzyMomentNodeLookupForAssetCollection:(id)arg1 error:(id*)arg2;
- (id)_locationMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_locationMatchingIdsToScoresFromEvent:(id)arg1 options:(id)arg2;
- (id)_momentNodeForAssetCollection:(id)arg1 error:(id*)arg2;
- (id)_momentNodesForDateComponents:(id)arg1 error:(id*)arg2;
- (unsigned long long)_peopleCountWithoutMe:(id)arg1 focusOnNodes:(id)arg2;
- (id)_peopleMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_peopleMatchingIdsToResultsFromEvent:(id)arg1 options:(id)arg2;
- (id)_peopleMatchingResultFromEvent:(id)arg1 matchedEvent:(id)arg2 presentPeopleCountForEvent:(unsigned long long)arg3 presentPeopleCountForMatchedEvent:(unsigned long long)arg4 commonPeople:(id)arg5 relationshipScoreCache:(id)arg6 needsKeywords:(bool)arg7;
- (id)_peopleWithoutMe:(id)arg1 focusOnNodes:(id)arg2;
- (id)_personNodeIntersectingSocialGroups:(id)arg1;
- (id)_placeMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_placeMatchingIdsToScoresFromEvent:(id)arg1 options:(id)arg2;
- (id)_previousSeasonForSeason:(id)arg1;
- (void)_reportBusinessItemsWithAnalytics:(id)arg1;
- (void)_reportDeviceOwnerWithAnalytics:(id)arg1 photoLibrary:(id)arg2;
- (void)_reportDisambiguatedLocationsWithAnalytics:(id)arg1;
- (void)_reportLibraryWithAnalytics:(id)arg1;
- (void)_reportMobilityWithAnalytics:(id)arg1;
- (id)_sceneMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_sceneMatchingIdsToScoresFromEvent:(id)arg1 options:(id)arg2;
- (double)_scoreForPlaceSubDomain:(unsigned short)arg1;
- (id)_socialGroupNodeForPersonNodes:(id)arg1 searchWithTolerance:(bool)arg2;
- (id)_strictMomentLookupForMomentNode:(id)arg1 inPhotoLibrary:(id)arg2;
- (id)_strictMomentNodeLookupForAssetCollection:(id)arg1 error:(id*)arg2;
- (id)_timeMatchingFromEvent:(id)arg1 toEvent:(id)arg2 options:(id)arg3;
- (id)_timeMatchingIdsToScoresFromEvent:(id)arg1 options:(id)arg2;
- (id)aggregationHighlightTypeNode;
- (id)aggregationNodes;
- (id)allSocialGroupsForPersonLocalIdentifier:(id)arg1 options:(id)arg2;
- (id)allTimeYearsNodes;
- (id)allTripNodes;
- (double)averageTopMomentTimes:(id)arg1 numberOfMoments:(unsigned long long)arg2;
- (id)bestFittingAreaNodeFromAreaNodes:(id)arg1;
- (id)bestMeaningLabelForMeaningfulEvent:(id)arg1;
- (id)bestSocialGroupNodes;
- (id)businessNodes;
- (id)celebratedHolidayNodes;
- (id)celebratedHolidays;
- (id)children;
- (id)closestMomentNodeForLocalDate:(id)arg1;
- (id)commonSocialGroupNodesForPersonNodes:(id)arg1;
- (id)commonSocialGroupNodesForPersonNodes:(id)arg1 withThreshold:(double)arg2;
- (bool)copyToURL:(id)arg1;
- (id)coworkers;
- (id)dateFormatter;
- (id)dateNodeFilterForLocalDateInterval:(id)arg1;
- (id)dateNodeForLocalDate:(id)arg1;
- (id)dateNodeNameWithLocalDate:(id)arg1;
- (id)dateNodesForLocalDate:(id)arg1;
- (id)dateNodesForLocalDateInterval:(id)arg1;
- (id)dateNodesForMonth:(long long)arg1;
- (id)dateNodesForWeekOfMonth:(long long)arg1;
- (id)dateNodesForWeekOfYear:(long long)arg1;
- (id)dateNodesForYear:(long long)arg1;
- (id)dateNodesIgnoringYearForLocalDate:(id)arg1;
- (id)dayHighlightNodes;
- (id)dayHighlightNodesSortedByDate;
- (id)dayNodeForDay:(long long)arg1;
- (id)dayOfWeekNodeForDayOfWeek:(long long)arg1;
- (id)dayOfWeekNodes;
- (id)defaultHighlightNodes;
- (id)defaultHighlightTypeNode;
- (void)enumerateAreaNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateBusinessNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateCelebratedHolidayNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateDayHighlightNodesWithBlock:(id /* block */)arg1;
- (void)enumerateHighlightGroupNodesWithBlock:(id /* block */)arg1;
- (void)enumerateMeaningfulEventsWithMeaning:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateMeaningsFromMeaningfulEvent:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateMomentNodesWithMeaning:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateMusicSessionNodesUsingBlock:(id /* block */)arg1;
- (void)enumeratePeopleClustersIncludingMeNode:(bool)arg1 socialGroupsVersion:(unsigned long long)arg2 singlePersonGroups:(out id*)arg3 withBlock:(id /* block */)arg4;
- (void)enumeratePeopleClustersWithLinkage:(unsigned long long)arg1 threshold:(double)arg2 includingMeNode:(bool)arg3 socialGroupsVersion:(unsigned long long)arg4 singlePersonGroups:(out id*)arg5 withBlock:(id /* block */)arg6;
- (void)enumeratePersonNodesIncludingMe:(bool)arg1 withBlock:(id /* block */)arg2;
- (void)enumeratePublicEventNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateSocialGroupsIncludingMeNode:(bool)arg1 socialGroupsVersion:(unsigned long long)arg2 simulateMeNodeNotSet:(bool)arg3 validGroupsBlock:(id /* block */)arg4 invalidGroupsBlock:(id /* block */)arg5 averageWeight:(out float*)arg6;
- (void)enumerateSocialGroupsIncludingMeNode:(bool)arg1 validGroupsBlock:(id /* block */)arg2 invalidGroupsBlock:(id /* block */)arg3 averageWeight:(out float*)arg4;
- (void)enumerateSocialGroupsWithBlock:(id /* block */)arg1;
- (bool)eventIsStellar:(id)arg1;
- (bool)eventIsVeryMeaningful:(id)arg1;
- (id)eventNodeForAssetCollection:(id)arg1;
- (bool)exportMatchMomentEventResults:(id)arg1 relatedType:(unsigned long long)arg2 focusOnNodes:(id)arg3 toFileURL:(id)arg4 error:(id*)arg5;
- (id)familyMembers;
- (id)favoritedPersonNodesIncludingMe:(bool)arg1;
- (id)fetchPersonNodesBySocialGroupNodeForSocialGroupNodes:(id)arg1;
- (id)fetchPersonNodesBySocialGroupNodeForSocialGroups:(id)arg1;
- (id)friends;
- (id)graphQueue;
- (bool)hasSocialGroups;
- (id)highlightForHighlightNode:(id)arg1 inPhotoLibrary:(id)arg2;
- (id)highlightGroupNodes;
- (id)highlightGroupNodesSortedByDate;
- (id)highlightNodeForHighlight:(id)arg1;
- (id)inferMeNodeFromSocialGroups;
- (id)inferredUserLocales;
- (id)infoNode;
- (id)initWithSpecification:(id)arg1;
- (id)initWithURL:(id)arg1 persistenceOptions:(long long)arg2 error:(id*)arg3;
- (id)interestingAreaNodes;
- (id)interestingCityNodes;
- (void)invalidateMemoryCaches;
- (void)invalidateProcessingCaches;
- (void)invalidateSupersetCaches;
- (bool)isBestPairSocialGroup:(id)arg1;
- (bool)isEmpty;
- (bool)isOnGraphQueue;
- (bool)isPairSocialGroup:(id)arg1;
- (bool)isSharedLibraryEnabled;
- (bool)isSocialGroupEligible:(unsigned long long)arg1 longevity:(float)arg2;
- (id)largeFrequentLocationNodes;
- (long long)libraryAge;
- (double)libraryDuration;
- (long long)librarySizeRange;
- (id)localDatesForMomentNode:(id)arg1;
- (id)longTripHighlightTypeNode;
- (id)longTripNodes;
- (double)longevity:(id)arg1;
- (id)mainUrbanCityNodes;
- (id)matchEvent:(id)arg1 options:(id)arg2;
- (id)matchEvent:(id)arg1 withEvent:(id)arg2 options:(id)arg3;
- (id)matchPersonNodes:(id)arg1 sortDescriptors:(id)arg2;
- (id)maximalSocialGroupsOverlappingPersonLocalIdentifiers:(id)arg1;
- (id)meNode;
- (id)meNodeCollection;
- (id)meNodeWithFallbackInferredMeNode;
- (id)meaningNodes;
- (id)meaningfulEventNodeForUUID:(id)arg1;
- (id)meaningfulEvents;
- (id)meaningfulMomentNodesSortedByDate;
- (id)meaningsFromMeaningfulEvent:(id)arg1;
- (id)messageProfile;
- (id)momentForMomentNode:(id)arg1 inPhotoLibrary:(id)arg2;
- (id)momentNodeForAsset:(id)arg1;
- (id)momentNodeForMoment:(id)arg1;
- (id)momentNodes;
- (id)momentNodesForPersonNodes:(id)arg1;
- (id)momentNodesOverlappingLocalDateInterval:(id)arg1;
- (id)momentNodesSortedByDate;
- (id)momentNodesSortedByDateFromMomentNodes:(id)arg1;
- (id)momentNodesWithMeaning:(unsigned long long)arg1;
- (double)momentsCountDistance:(id)arg1 withSecondBaseGroup:(id)arg2 withSubsetBias:(double)arg3 withDistanceThreshold:(double)arg4 withIntersectionBias:(double)arg5 withKey:(id)arg6;
- (id)momentsForMomentNodes:(id)arg1 inPhotoLibrary:(id)arg2 sortChronologically:(bool)arg3;
- (id)momentsResultForMomentNodes:(id)arg1 inPhotoLibrary:(id)arg2 sortChronologically:(bool)arg3;
- (id)monthNodeForMonth:(long long)arg1;
- (id)musicGenreDistributionUsingTaggedGenres:(bool)arg1;
- (id)musicSessions;
- (id)nodeLabelForHighlightType:(unsigned short)arg1;
- (float)normalizeFeatureValue:(float)arg1 average:(float)arg2 featureValues:(id)arg3 factor:(float)arg4;
- (unsigned long long)numberOfMomentNodes;
- (unsigned long long)numberOfPersonNodesIncludingMe:(bool)arg1;
- (unsigned long long)numberOfSocialGroupNodes;
- (id)onGoingTripHighlightTypeNode;
- (id)onGoingTripNodes;
- (id)parents;
- (id)partners;
- (double)peopleDistance:(id)arg1 withSecondBaseGroup:(id)arg2 threshold:(double)arg3 factor:(double)arg4;
- (id)personLocalIdentifiersBySocialGroupUUIDWithPersonNodesBySocialGroupNode:(id)arg1 shouldIncludeMeNode:(bool)arg2 simulateMeNodeNotSet:(bool)arg3;
- (id)personNodeForPersonLocalIdentifier:(id)arg1;
- (id)personNodesForPersonLocalIdentifiers:(id)arg1;
- (id)personNodesIncludingMe:(bool)arg1;
- (id)poiNodes;
- (id)previousSeasonNodeForSeasonNode:(id)arg1;
- (id)publicEventNodes;
- (float)recencyFeature:(double)arg1;
- (double)relationshipScoreForPersonNode:(id)arg1;
- (id)relevantMomentNodesForSocialGroupProcessing;
- (void)reportMetricsLogsWithAnalytics:(id)arg1 photoLibrary:(id)arg2;
- (bool)saveToURL:(id)arg1;
- (id)sceneNodeForSceneName:(id)arg1;
- (id)sceneNodesForSceneNames:(id)arg1;
- (id)seasonNodeForLocalDate:(id)arg1;
- (void)setGraphQueue:(id)arg1;
- (void)setMessageProfile:(id)arg1;
- (id)shortTripHighlightTypeNode;
- (id)shortTripNodes;
- (bool)singlePersonBelongsToSocialGroupOfMaxSize:(id)arg1 groups:(id)arg2 maxSize:(unsigned long long)arg3;
- (bool)singlePersonGroupIsInSocialGroups:(id)arg1 groups:(id)arg2;
- (id)socialGroupNodeForPersonNodes:(id)arg1;
- (id)socialGroupNodesSortedByImportance;
- (id)socialGroupsIdentifiersFromSocialGroupNodes:(id)arg1 shouldIncludeMeNode:(bool)arg2;
- (id)socialGroupsIdentifiersFromSocialGroupNodesWithPersonNodesBySocialGroupNode:(id)arg1 shouldIncludeMeNode:(bool)arg2 simulateMeNodeNotSet:(bool)arg3;
- (id)socialGroupsOverlappingPersonLocalIdentifiers:(id)arg1;
- (id)sortedSocialGroupNodesWithMomentNodes:(id)arg1;
- (id)staticGraphSchema;
- (id)supersetCityNodes;
- (id)supersetCountryNodes;
- (id)supersetCountyNodes;
- (id)supersetStateNodes;
- (id)supersets;
- (id)trips;
- (void)unloadMessageProfile;
- (id)weekends;
- (id)yearNodeForYear:(long long)arg1;
- (id)zeroKeywordMappingByMeaningLabel;

@end
