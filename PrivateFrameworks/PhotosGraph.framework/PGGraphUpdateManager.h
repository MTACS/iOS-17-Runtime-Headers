
@interface PGGraphUpdateManager : NSObject <PGLibraryChangeConsumer> {
    PGPhotoChangeToGraphChangeConverter * _changeConverter;
    NSDate * _dateSinceMajorUpgrade;
    long long  _executionContext;
    PGGraphUpdateJetsamIndicator * _jetsamIndicator;
    PGLibraryChangeListener * _libraryChangeListener;
    NSMutableSet * _listeners;
    bool  _listening;
    PGManager * _manager;
    NSMutableArray * _pendingChanges;
    NSObject<OS_dispatch_queue> * _processingQueue;
    unsigned char  _processingState;
    NSObject<OS_dispatch_queue> * _stateQueue;
    bool  _stopRequested;
    PGGraphUpdateManagerTargetTokenState * _targetTokenState;
    <PGGraphUpdateHealthRecording> * _updateHealthRecorder;
}

@property (nonatomic, retain) PGPhotoChangeToGraphChangeConverter *changeConverter;
@property (nonatomic, readonly) NSDate *dateSinceMajorUpgrade;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property long long executionContext;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isConsistencyUpdate;
@property (nonatomic, readonly) PGGraphUpdateJetsamIndicator *jetsamIndicator;
@property (nonatomic, retain) PGLibraryChangeListener *libraryChangeListener;
@property (nonatomic, readonly) NSMutableSet *listeners;
@property (getter=isListening, nonatomic) bool listening;
@property (nonatomic, readonly) PGManager *manager;
@property (nonatomic, retain) NSMutableArray *pendingChanges;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *processingQueue;
@property (nonatomic) unsigned char processingState;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *stateQueue;
@property (nonatomic) bool stopRequested;
@property (readonly) Class superclass;
@property (nonatomic, retain) PGGraphUpdateManagerTargetTokenState *targetTokenState;
@property (nonatomic, readonly) <PGGraphUpdateHealthRecording> *updateHealthRecorder;

- (void).cxx_destruct;
- (id)_graphUpdateForPhotoChanges:(id)arg1;
- (void)_notifyListeners:(id)arg1 notificationType:(unsigned char)arg2;
- (void)_notifyProgress:(double)arg1;
- (void)_onEncounteredTargetToken;
- (void)_onFinishedProcessingChangesWithTokens:(id)arg1;
- (void)_onStopRequestedWasListening:(bool)arg1;
- (bool)_pauseListening;
- (bool)_performEnrichmentWithGraphUpdateInventory:(id)arg1 enrichmentContext:(unsigned long long)arg2 progressBlock:(id /* block */)arg3 error:(id*)arg4;
- (void)_performRebuildWithGraphIngestRecipe:(id)arg1 progressBlock:(id /* block */)arg2 completionBlock:(id /* block */)arg3;
- (void)_processPendingChanges;
- (void)_processRebuild;
- (void)_recordInformationFromDatabaseChange:(id)arg1;
- (void)_recordInformationFromGraphChanges:(id)arg1;
- (void)_recordNumberOfDaysSinceMajorOSUpgradeIfNeeded;
- (void)_signalGraphIsConsistentWithTokens:(id)arg1;
- (bool)_startListening;
- (id)_tokensForChanges:(id)arg1;
- (void)_triggerFullRebuildDuringLiveUpdate:(bool)arg1 graphIngestRecipe:(id)arg2 progressBlock:(id /* block */)arg3 keepExistingGraph:(bool)arg4 completionBlock:(id /* block */)arg5;
- (void)_triggerUpdateForGraphUpdate:(id)arg1;
- (void)addListener:(id)arg1;
- (id)changeConverter;
- (id)dateSinceMajorUpgrade;
- (id)description;
- (long long)executionContext;
- (void)incrementalChangeNotAvailable;
- (id)initWithGraphManager:(id)arg1;
- (bool)isConsistencyUpdate;
- (bool)isListening;
- (id)jetsamIndicator;
- (id)libraryChangeListener;
- (void)libraryChangesAvailable:(id)arg1;
- (id)listeners;
- (id)manager;
- (id)pendingChanges;
- (void)performFullRebuildWithProgressBlock:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (id)processingQueue;
- (unsigned char)processingState;
- (void)removeListener:(id)arg1;
- (void)setChangeConverter:(id)arg1;
- (void)setExecutionContext:(long long)arg1;
- (void)setLibraryChangeListener:(id)arg1;
- (void)setListening:(bool)arg1;
- (void)setPendingChanges:(id)arg1;
- (void)setProcessingQueue:(id)arg1;
- (void)setProcessingState:(unsigned char)arg1;
- (void)setStateQueue:(id)arg1;
- (void)setStopRequested:(bool)arg1;
- (void)setTargetTokenState:(id)arg1;
- (bool)startListening;
- (id)stateQueue;
- (void)stopListening;
- (bool)stopRequested;
- (id)targetTokenState;
- (id)updateHealthRecorder;

@end
