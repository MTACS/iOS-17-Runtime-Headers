
@interface PGGraphPersonNode : PGGraphOptimizedNode <PGAssetCollectionFeature, PGPersonResult> {
    unsigned long long  _ageCategory;
    NSDate * _anniversaryDate;
    NSDate * _birthdayDate;
    NSString * _contactIdentifier;
    bool  _isFavorite;
    bool  _isUserCreated;
    NSString * _localIdentifier;
    NSString * _name;
    NSDate * _potentialBirthdayDate;
    unsigned long long  _sex;
    NSString * _shareParticipantLocalIdentifier;
}

@property (readonly) unsigned long long ageCategory;
@property (readonly) NSDate *anniversaryDate;
@property (nonatomic, readonly) NSDateComponents *anniversaryDateComponents;
@property (readonly) bool belongsToAnySocialGroup;
@property (readonly) bool belongsToBestSocialGroups;
@property (nonatomic, readonly) NSDate *birthdayDate;
@property (readonly) NSDate *birthdayDate;
@property (nonatomic, readonly) NSDateComponents *birthdayDateComponents;
@property (nonatomic, readonly) PGGraphPersonNodeCollection *collection;
@property (nonatomic, readonly) NSString *contactIdentifier;
@property (readonly) NSString *contactIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSString *featureIdentifier;
@property (nonatomic, readonly) unsigned long long featureType;
@property (nonatomic, readonly) NSString *fullName;
@property (readonly) unsigned long long hash;
@property (readonly) bool isFavorite;
@property (nonatomic, readonly) bool isInferredChild;
@property (readonly) bool isInferredMemberOfMyFamily;
@property (readonly) bool isMeNode;
@property (readonly) bool isMemberOfMyFamily;
@property (readonly) bool isMyAcquaintance;
@property (readonly) bool isMyChild;
@property (readonly) bool isMyCoworker;
@property (readonly) bool isMyFather;
@property (readonly) bool isMyFriend;
@property (readonly) bool isMyInferredAcquaintance;
@property (readonly) bool isMyInferredChild;
@property (readonly) bool isMyInferredCoworker;
@property (readonly) bool isMyInferredFather;
@property (readonly) bool isMyInferredFriend;
@property (readonly) bool isMyInferredMother;
@property (readonly) bool isMyInferredParent;
@property (readonly) bool isMyInferredPartner;
@property (readonly) bool isMyInferredSibling;
@property (readonly) bool isMyMother;
@property (readonly) bool isMyParent;
@property (readonly) bool isMyPartner;
@property (readonly) bool isMySibling;
@property (readonly) bool isUserCreated;
@property (nonatomic, readonly) bool isVerified;
@property (nonatomic, readonly) NSString *keywordDescription;
@property (nonatomic, readonly) NSString *localIdentifier;
@property (readonly) NSString *localIdentifier;
@property (nonatomic, readonly) NSString *name;
@property (readonly) unsigned long long numberOfMomentNodes;
@property (readonly) double personScore;
@property (readonly) NSDate *potentialBirthdayDate;
@property (nonatomic, readonly) NSDateComponents *potentialBirthdayDateComponents;
@property (readonly) unsigned long long sex;
@property (readonly) NSString *shareParticipantLocalIdentifier;
@property (nonatomic, readonly) NSString *suggestedContactIdentifier;
@property (readonly) Class superclass;

+ (id)_specialDateComponentsForDate:(id)arg1;
+ (id)_specialDateForDateComponents:(id)arg1;
+ (double)_specialDateTimeIntervalForDate:(id)arg1;
+ (id)acquaintanceOfPerson;
+ (id)brotherOfPerson;
+ (id)changedPropertyNamesForContactsChange;
+ (id)childOfPerson;
+ (id)coworkerOfPerson;
+ (id)coworkerSocialGroupOfPerson;
+ (id)daughterOfPerson;
+ (id)familyOfPerson;
+ (id)familySocialGroupOfPerson;
+ (id)fatherOfPerson;
+ (id)filter;
+ (id)filterExcludingMe;
+ (id)filterForAgeCategories:(id)arg1 includingMe:(bool)arg2;
+ (id)filterForBiologicalSex:(unsigned long long)arg1;
+ (id)filterIncludingMe;
+ (id)filterNameEmpty;
+ (id)filterNameNotEmpty;
+ (id)filterShareParticipantIdentifierNotEmpty;
+ (id)filterWithShareParticipantIdentifiers:(id)arg1;
+ (id)friendOfPerson;
+ (id)homeOfPerson;
+ (id)homeOrWorkOfPerson;
+ (id)inferredAcquaintanceOfPerson;
+ (id)inferredBrotherOfPerson;
+ (id)inferredChildOfPerson;
+ (id)inferredCoworkerOfPerson;
+ (id)inferredCoworkerSocialGroupOfPerson;
+ (id)inferredDaughterOfPerson;
+ (id)inferredFamilyOfPerson;
+ (id)inferredFamilySocialGroupOfPerson;
+ (id)inferredFatherOfPerson;
+ (id)inferredFriendOfPerson;
+ (id)inferredMotherOfPerson;
+ (id)inferredParentOfPerson;
+ (id)inferredPartnerOfPerson;
+ (id)inferredSisterOfPerson;
+ (id)inferredSonOfPerson;
+ (id)inferredVipOfPerson;
+ (id)momentAuthoredByPerson;
+ (id)momentOfPerson;
+ (id)momentWithPhysicallyPresentPerson;
+ (id)motherOfPerson;
+ (id)parentOfPerson;
+ (id)partnerOfPerson;
+ (id)personActivityMeaningOfPerson;
+ (id)personScoreSortDescriptors;
+ (id)personSortDescriptors;
+ (id)propertiesWithAgeCategory:(unsigned long long)arg1;
+ (id)propertiesWithBiologicalSex:(unsigned long long)arg1;
+ (id)propertiesWithPerson:(id)arg1;
+ (id)relationshipTagOfPerson;
+ (id)relationshipTagOfPersonWithConfidence:(double)arg1;
+ (void)setAnniversaryDateComponents:(id)arg1 onPersonNodeForIdentifier:(unsigned long long)arg2 inGraph:(id)arg3;
+ (void)setBirthdayDateComponents:(id)arg1 onPersonNodeForIdentifier:(unsigned long long)arg2 inGraph:(id)arg3;
+ (void)setName:(id)arg1 onPersonNodeForIdentifier:(unsigned long long)arg2 inGraph:(id)arg3;
+ (id)sisterOfPerson;
+ (id)socialGroupOfPerson;
+ (id)sonOfPerson;
+ (unsigned long long)type;
+ (id)vipOfPerson;
+ (id)workOfPerson;

- (void).cxx_destruct;
- (bool)_contactSuggestionEdge:(id)arg1 fitsQuery:(unsigned long long)arg2;
- (id)_contactSuggestionEdgesSortedByConfidence;
- (bool)_hasRelationshipLabel:(id)arg1 withStatus:(unsigned long long)arg2;
- (unsigned long long)ageCategory;
- (id)anniversaryDate;
- (id)anniversaryDateComponents;
- (id)associatedNodesForRemoval;
- (bool)belongsToAnySocialGroup;
- (bool)belongsToBestSocialGroups;
- (id)birthdayDate;
- (id)birthdayDateComponents;
- (id)changingPropertiesWithProperties:(id)arg1;
- (id)collection;
- (long long)compareToPerson:(id)arg1;
- (id)contactIdentifier;
- (id)description;
- (unsigned short)domain;
- (id)entityFilter;
- (void)enumerateBirthdayMomentNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateContactSuggestionsSortedByConfidenceMatchingQuery:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateHomeOrWorkAddressEdgesAndNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateHomeOrWorkAddressNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateHomeOrWorkNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateMomentEdgesAndNodesUsingBlock:(id /* block */)arg1;
- (id)featureIdentifier;
- (unsigned long long)featureType;
- (id)fullName;
- (bool)hasProperties:(id)arg1;
- (id)initWithLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)initWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4;
- (id)initWithPerson:(id)arg1;
- (bool)isFavorite;
- (bool)isIdentifiedByProperties:(id)arg1;
- (bool)isInferredChild;
- (bool)isInferredMemberOfMyFamily;
- (bool)isMeNode;
- (bool)isMemberOfMyFamily;
- (bool)isMyAcquaintance;
- (bool)isMyChild;
- (bool)isMyCoworker;
- (bool)isMyFather;
- (bool)isMyFriend;
- (bool)isMyInferredAcquaintance;
- (bool)isMyInferredChild;
- (bool)isMyInferredCoworker;
- (bool)isMyInferredFather;
- (bool)isMyInferredFriend;
- (bool)isMyInferredMother;
- (bool)isMyInferredParent;
- (bool)isMyInferredPartner;
- (bool)isMyInferredSibling;
- (bool)isMyMother;
- (bool)isMyParent;
- (bool)isMyPartner;
- (bool)isMySibling;
- (bool)isUserCreated;
- (bool)isVerified;
- (id)label;
- (id)localIdentifier;
- (id)name;
- (unsigned long long)numberOfMomentNodes;
- (double)personScore;
- (id)potentialBirthdayDate;
- (id)potentialBirthdayDateComponents;
- (id)propertyDictionary;
- (id)propertyForKey:(id)arg1;
- (void)setLocalProperties:(id)arg1;
- (unsigned long long)sex;
- (id)shareParticipantLocalIdentifier;
- (id)stringDescription;
- (id)suggestedContactIdentifier;

@end
