
@interface AMSURLRequestEncoder : NSObject <AMSBagConsumer, AMSRequestEncoding> {
    ACAccount * _account;
    NSDictionary * _additionalMetrics;
    long long  _anisetteType;
    <AMSBagProtocol> * _bag;
    <AMSURLBagContract> * _bagContract;
    AMSProcessInfo * _clientInfo;
    bool  _compressRequestBody;
    long long  _dialogOptions;
    bool  _disableResponseDecoding;
    bool  _enableRemoteSecuritySigning;
    long long  _encodeCount;
    NSArray * _groupRequestAccounts;
    NSString * _gsTokenIdentifier;
    bool  _includeClientVersions;
    NSObject<OS_dispatch_queue> * _internalQueue;
    AMSKeychainOptions * _keychainOptions;
    NSString * _logUUID;
    long long  _mescalType;
    AMSURLRequestProperties * _parentProperties;
    bool  _preserveQueryParameterEncoding;
    struct os_unfair_recursive_lock_s { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } ourl_lock; 
        unsigned int ourl_count; 
    }  _propertiesLock;
    long long  _requestEncoding;
    <AMSResponseDecoding> * _responseDecoder;
    bool  _shouldSetCookiesFromResponse;
    bool  _shouldSetStorefrontFromResponse;
    bool  _shouldSetStorefrontHeader;
    AMSSigningSecurityService * _signingService;
    bool  _urlKnownToBeTrusted;
}

@property (nonatomic, retain) ACAccount *account;
@property (nonatomic, retain) NSDictionary *additionalMetrics;
@property long long anisetteType;
@property (nonatomic, retain) <AMSBagProtocol> *bag;
@property (nonatomic, retain) <AMSURLBagContract> *bagContract;
@property (nonatomic, retain) AMSProcessInfo *clientInfo;
@property bool compressRequestBody;
@property (nonatomic) long long dataEncoding;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property long long dialogOptions;
@property bool disableResponseDecoding;
@property bool enableRemoteSecuritySigning;
@property (nonatomic) long long encodeCount;
@property (nonatomic, retain) NSArray *groupRequestAccounts;
@property (nonatomic, retain) NSString *gsTokenIdentifier;
@property (readonly) unsigned long long hash;
@property bool includeClientVersions;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *internalQueue;
@property (nonatomic, retain) AMSKeychainOptions *keychainOptions;
@property (nonatomic, retain) NSString *logUUID;
@property long long mescalType;
@property (nonatomic, copy) AMSURLRequestProperties *parentProperties;
@property (nonatomic) bool preserveQueryParameterEncoding;
@property (nonatomic, readonly) struct os_unfair_recursive_lock_s { struct os_unfair_lock_s { unsigned int x_1_1_1; } x1; unsigned int x2; } propertiesLock;
@property long long requestEncoding;
@property (nonatomic, retain) <AMSResponseDecoding> *responseDecoder;
@property bool shouldSetCookiesFromResponse;
@property bool shouldSetStorefrontFromResponse;
@property (nonatomic) bool shouldSetStorefrontHeader;
@property (nonatomic, readonly) AMSSigningSecurityService *signingService;
@property (readonly) Class superclass;
@property bool urlKnownToBeTrusted;

+ (id)bagKeySet;
+ (id)bagSubProfile;
+ (id)bagSubProfileVersion;
+ (id)createBagForSubProfile;

- (void).cxx_destruct;
- (void)_addSecuritySigningHeadersToRequest:(id)arg1 buyParams:(id)arg2 bag:(id)arg3;
- (id)_methodStringFromMethod:(long long)arg1;
- (void)_personalizeKeychainOptionsForAccount:(id)arg1;
- (id)account;
- (id)additionalMetrics;
- (long long)anisetteType;
- (id)bag;
- (id)bagContract;
- (id)clientInfo;
- (bool)compressRequestBody;
- (long long)dataEncoding;
- (long long)dialogOptions;
- (bool)disableResponseDecoding;
- (bool)enableRemoteSecuritySigning;
- (long long)encodeCount;
- (id)groupRequestAccounts;
- (id)gsTokenIdentifier;
- (bool)includeClientVersions;
- (id)init;
- (id)initWithBag:(id)arg1;
- (id)initWithBagContract:(id)arg1;
- (id)internalQueue;
- (id)keychainOptions;
- (id)logUUID;
- (long long)mescalType;
- (id)parentProperties;
- (bool)preserveQueryParameterEncoding;
- (struct os_unfair_recursive_lock_s { struct os_unfair_lock_s { unsigned int x_1_1_1; } x1; unsigned int x2; })propertiesLock;
- (id)requestByEncodingRequest:(id)arg1 parameters:(id)arg2;
- (id)requestByEncodingRequest:(id)arg1 parameters:(id)arg2 error:(id*)arg3;
- (long long)requestEncoding;
- (id)requestWithMethod:(long long)arg1 URL:(id)arg2 error:(id*)arg3;
- (id)requestWithMethod:(long long)arg1 URL:(id)arg2 headers:(id)arg3 parameters:(id)arg4;
- (id)requestWithMethod:(long long)arg1 URL:(id)arg2 parameters:(id)arg3;
- (id)requestWithMethod:(long long)arg1 URL:(id)arg2 parameters:(id)arg3 error:(id*)arg4;
- (id)requestWithMethod:(long long)arg1 URLString:(id)arg2 error:(id*)arg3;
- (id)requestWithMethod:(long long)arg1 URLString:(id)arg2 parameters:(id)arg3 error:(id*)arg4;
- (id)requestWithMethod:(long long)arg1 bagURL:(id)arg2 error:(id*)arg3;
- (id)requestWithMethod:(long long)arg1 bagURL:(id)arg2 headers:(id)arg3 parameters:(id)arg4;
- (id)requestWithMethod:(long long)arg1 bagURL:(id)arg2 parameters:(id)arg3;
- (id)requestWithMethod:(long long)arg1 bagURL:(id)arg2 parameters:(id)arg3 error:(id*)arg4;
- (id)responseDecoder;
- (void)setAccount:(id)arg1;
- (void)setAdditionalMetrics:(id)arg1;
- (void)setAnisetteType:(long long)arg1;
- (void)setBag:(id)arg1;
- (void)setBagContract:(id)arg1;
- (void)setClientInfo:(id)arg1;
- (void)setCompressRequestBody:(bool)arg1;
- (void)setDataEncoding:(long long)arg1;
- (void)setDialogOptions:(long long)arg1;
- (void)setDisableResponseDecoding:(bool)arg1;
- (void)setEnableRemoteSecuritySigning:(bool)arg1;
- (void)setEncodeCount:(long long)arg1;
- (void)setGroupRequestAccounts:(id)arg1;
- (void)setGsTokenIdentifier:(id)arg1;
- (void)setIncludeClientVersions:(bool)arg1;
- (void)setInternalQueue:(id)arg1;
- (void)setKeychainOptions:(id)arg1;
- (void)setLogUUID:(id)arg1;
- (void)setMescalType:(long long)arg1;
- (void)setParentProperties:(id)arg1;
- (void)setPreserveQueryParameterEncoding:(bool)arg1;
- (void)setRequestEncoding:(long long)arg1;
- (void)setResponseDecoder:(id)arg1;
- (void)setShouldSetCookiesFromResponse:(bool)arg1;
- (void)setShouldSetStorefrontFromResponse:(bool)arg1;
- (void)setShouldSetStorefrontHeader:(bool)arg1;
- (void)setUrlKnownToBeTrusted:(bool)arg1;
- (bool)shouldSetCookiesFromResponse;
- (bool)shouldSetStorefrontFromResponse;
- (bool)shouldSetStorefrontHeader;
- (id)signingService;
- (bool)urlKnownToBeTrusted;

@end
