
@interface PKAdjustableSingleCellView : UIView <PKPaymentDashboardCellActionHandleable> {
    PKPaymentPassAction * _action;
    PKContinuousButton * _actionButton;
    id /* block */  _actionHandler;
    bool  _animated;
    unsigned long long  _deferUpdateCounter;
    NSString * _detail;
    UIColor * _detailColor;
    long long  _detailLineBreakMode;
    UILabel * _detailView;
    UIImageView * _disclosureView;
    bool  _enableDisclosure;
    bool  _isTemplateLayout;
    PKPaymentPass * _pass;
    NSString * _subDetail;
    UIColor * _subDetailColor;
    long long  _subDetailLineBreakMode;
    UILabel * _subDetailView;
    NSString * _title;
    UIColor * _titleColor;
    long long  _titleLineBreakMode;
    UILabel * _titleView;
    double  _topPadding;
}

@property (nonatomic, copy) PKPaymentPassAction *action;
@property (nonatomic, copy) id /* block */ actionHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSString *detail;
@property (nonatomic, copy) UIColor *detailColor;
@property (nonatomic) long long detailLineBreakMode;
@property (nonatomic) bool enableDisclosure;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) PKPaymentPass *pass;
@property (nonatomic, copy) NSString *subDetail;
@property (nonatomic, copy) UIColor *subDetailColor;
@property (nonatomic) long long subDetailLineBreakMode;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) UIColor *titleColor;
@property (nonatomic) long long titleLineBreakMode;

- (void).cxx_destruct;
- (void)_actionButtonTapped:(id)arg1;
- (void)_applyStyles;
- (id)_detailFont;
- (struct CGSize { double x1; double x2; })_layoutWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_needsThirdLine;
- (void)_performInit;
- (void)_setupViews;
- (id)_smallerDetailFont;
- (id)_subDetailFont;
- (id)_titleFont;
- (void)_updateContent:(bool)arg1;
- (id)action;
- (id /* block */)actionHandler;
- (void)beginUpdates;
- (id)detail;
- (id)detailColor;
- (long long)detailLineBreakMode;
- (bool)enableDisclosure;
- (void)endUpdates:(bool)arg1;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutIfNeededAnimated:(bool)arg1;
- (void)layoutSubviews;
- (id)pass;
- (void)prepareForReuse;
- (void)setAction:(id)arg1;
- (void)setActionHandler:(id /* block */)arg1;
- (void)setDetail:(id)arg1;
- (void)setDetailColor:(id)arg1;
- (void)setDetailLineBreakMode:(long long)arg1;
- (void)setEnableDisclosure:(bool)arg1;
- (void)setPass:(id)arg1;
- (void)setSubDetail:(id)arg1;
- (void)setSubDetailColor:(id)arg1;
- (void)setSubDetailLineBreakMode:(long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleColor:(id)arg1;
- (void)setTitleLineBreakMode:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)subDetail;
- (id)subDetailColor;
- (long long)subDetailLineBreakMode;
- (id)title;
- (id)titleColor;
- (long long)titleLineBreakMode;
- (void)traitCollectionDidChange:(id)arg1;
- (long long)viewType;

@end
