
@interface CLSCalendar : NSObject

+ (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularities:(unsigned long long)arg3;
+ (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;
+ (id)components:(unsigned long long)arg1 fromDate:(id)arg2;
+ (id)components:(unsigned long long)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
+ (id)components:(unsigned long long)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned long long)arg4;
+ (id)componentsFromDate:(id)arg1 inTimeZone:(id)arg2;
+ (id)currentLocalDate;
+ (bool)currentLocaleSupportsSeasons;
+ (id)dateByAddingDays:(long long)arg1 toDate:(id)arg2;
+ (id)dateByAddingHours:(long long)arg1 toDate:(id)arg2;
+ (id)dateByAddingMonths:(long long)arg1 toDate:(id)arg2;
+ (id)dateByAddingWeeksOfYear:(long long)arg1 toDate:(id)arg2;
+ (id)dateByAddingYears:(long long)arg1 toDate:(id)arg2;
+ (id)dateBySettingYear:(long long)arg1 ofDate:(id)arg2;
+ (id)dateComponentsWithLocalDate:(id)arg1;
+ (id)dateComponentsWithUTCDate:(id)arg1 localDate:(id)arg2;
+ (id)dateFromComponents:(id)arg1 inTimeZone:(id)arg2;
+ (id)dateFromComponents:(unsigned long long)arg1 ofDate:(id)arg2;
+ (long long)dayFromDate:(id)arg1;
+ (long long)dayOfWeekFromDate:(id)arg1;
+ (id)endOfDayForDate:(id)arg1;
+ (id)endOfMonthForDate:(id)arg1;
+ (id)endOfWeekForDate:(id)arg1;
+ (long long)hourFromDate:(id)arg1;
+ (void)initialize;
+ (bool)isCountryCodePartOfNorthernHemisphere:(id)arg1;
+ (bool)isCountryCodePartOfSouthernHemisphere:(id)arg1;
+ (bool)isDateValid:(id)arg1;
+ (bool)isFirstMonthOfSeasonForLocalDate:(id)arg1;
+ (bool)isFirstTenDaysOfSeasonForLocalDate:(id)arg1;
+ (bool)isFirstTwoWeeksOfMonthForLocalDate:(id)arg1;
+ (bool)isLastMonthOfSeasonForLocalDate:(id)arg1;
+ (bool)isLastTwoWeeksOfMonthForLocalDate:(id)arg1;
+ (bool)isLastWeekOfMonthForLocalDate:(id)arg1;
+ (bool)isMiddleMonthOfSeasonForLocalDate:(id)arg1;
+ (bool)isSecondHalfOfSeasonForLocalDate:(id)arg1;
+ (id)localDateFormatterWithFormat:(id)arg1;
+ (id)localDateFromUniversalDate:(id)arg1;
+ (id)localDateFromUniversalDate:(id)arg1 atLocation:(id)arg2;
+ (id)localDateFromUniversalDate:(id)arg1 inTimeZone:(id)arg2;
+ (id)localDateIntervalOfFirstTenDaysOfSeasonForLocalDate:(id)arg1;
+ (id)localStartDateForNextSeasonAfterLocalDate:(id)arg1;
+ (id)localStartSeasonDateForLocalDate:(id)arg1;
+ (long long)monthFromDate:(id)arg1;
+ (id)northernMeteorologicalSeasonNameForDateComponents:(id)arg1;
+ (long long)numberOfDaysBetweenDate:(id)arg1 andDate:(id)arg2;
+ (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
+ (id)s_seasonCountryCodesDictionary;
+ (id)seasonNameForDateComponents:(id)arg1 locale:(id)arg2;
+ (id)seasonNameForLocalDate:(id)arg1 locale:(id)arg2;
+ (id)southernMeteorologicalSeasonNameForDateComponents:(id)arg1;
+ (id)startOfDayForDate:(id)arg1;
+ (id)startOfMonthForDate:(id)arg1;
+ (id)startOfWeekForDate:(id)arg1;
+ (bool)supportsSeasonsWithLocale:(id)arg1;
+ (id)timeZoneFromLocation:(id)arg1;
+ (id)universalDateFromLocalDate:(id)arg1;
+ (id)universalDateFromLocalDate:(id)arg1 atLocation:(id)arg2;
+ (id)universalDateFromLocalDate:(id)arg1 inTimeZone:(id)arg2;
+ (id)validDateForDate:(id)arg1;
+ (long long)weekOfMonthFromDate:(id)arg1;
+ (long long)weekOfYearFromDate:(id)arg1;
+ (long long)yearForWeekOfYearFromDate:(id)arg1;
+ (long long)yearFromDate:(id)arg1;

@end
