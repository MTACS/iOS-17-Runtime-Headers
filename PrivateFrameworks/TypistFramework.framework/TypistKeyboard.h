
@interface TypistKeyboard : NSObject <NSSecureCoding> {
    NSRegularExpression * _autoshiftRegex;
    TypistCandidateBar * _candidatebar;
    NSString * _defaultPlaneName;
    bool  _dictationSupported;
    bool  _fastTyping;
    bool  _flickTyping;
    TypistHWKeyboard * _hardwareKeyboard;
    bool  _hasCandidatesToCommit;
    bool  _isCapsLockedState;
    bool  _isHandwriting;
    bool  _isKana;
    bool  _isTenKey;
    NSMutableDictionary * _keyPlanes;
    NSString * _keyboardID;
    NSString * _keyboardSW;
    NSString * _keyboardType;
    NSString * _languageID;
    NSString * _layoutName;
    NSDictionary * _planeSwitchTable;
    NSNumber * _pressDuration;
    NSString * _regionCode;
    NSString * _sentenceDelimitingCharacters;
    NSString * _sentencePrefixingCharacters;
    NSString * _sentenceTrailingCharacters;
    bool  _shouldShowDictationKey;
    bool  _shouldShowGlobeKey;
    NSNumber * _swipeAlpha;
    NSNumber * _swipeConvexProbability;
    NSNumber * _swipeConvexSigma;
    NSNumber * _swipeErrantProbability;
    NSNumber * _swipeErrantSigma;
    bool  _swipeForceSpace;
    NSNumber * _swipePivotProbability;
    NSNumber * _swipeSigma;
    NSNumber * _tapBounds;
    NSNumber * _tapSigma;
    int  _tapStyle;
    NSNumber * _touchMajorRadius;
    NSNumber * _typeInterval;
    bool  _usePopupKeys;
    bool  _usePredictionBar;
}

@property (nonatomic, retain) NSRegularExpression *autoshiftRegex;
@property (nonatomic, retain) TypistCandidateBar *candidatebar;
@property (nonatomic, copy) NSString *defaultPlaneName;
@property (getter=dictationSupported, nonatomic) bool dictationSupported;
@property (nonatomic) bool fastTyping;
@property (nonatomic) bool flickTyping;
@property (nonatomic, retain) TypistHWKeyboard *hardwareKeyboard;
@property (nonatomic) bool hasCandidatesToCommit;
@property (nonatomic) bool isCapsLockedState;
@property (getter=isHandwriting, nonatomic) bool isHandwriting;
@property (getter=isKanaKeyboard, nonatomic) bool isKana;
@property (getter=isTenKey, nonatomic) bool isTenKey;
@property (nonatomic, retain) NSMutableDictionary *keyPlanes;
@property (nonatomic, copy) NSString *keyboardID;
@property (nonatomic, copy) NSString *keyboardSW;
@property (nonatomic, copy) NSString *keyboardType;
@property (nonatomic, copy) NSString *languageID;
@property (nonatomic, copy) NSString *layoutName;
@property (nonatomic, copy) NSDictionary *planeSwitchTable;
@property (nonatomic, copy) NSNumber *pressDuration;
@property (nonatomic, copy) NSString *regionCode;
@property (nonatomic, retain) NSString *sentenceDelimitingCharacters;
@property (nonatomic, retain) NSString *sentencePrefixingCharacters;
@property (nonatomic, retain) NSString *sentenceTrailingCharacters;
@property (getter=shouldShowDictationKey, nonatomic) bool shouldShowDictationKey;
@property (getter=shouldShowGlobeKey, nonatomic) bool shouldShowGlobeKey;
@property (nonatomic, retain) NSNumber *swipeAlpha;
@property (nonatomic, retain) NSNumber *swipeConvexProbability;
@property (nonatomic, retain) NSNumber *swipeConvexSigma;
@property (nonatomic, retain) NSNumber *swipeErrantProbability;
@property (nonatomic, retain) NSNumber *swipeErrantSigma;
@property (nonatomic) bool swipeForceSpace;
@property (nonatomic, retain) NSNumber *swipePivotProbability;
@property (nonatomic, retain) NSNumber *swipeSigma;
@property (nonatomic, retain) NSNumber *tapBounds;
@property (nonatomic, retain) NSNumber *tapSigma;
@property (nonatomic) int tapStyle;
@property (nonatomic, copy) NSNumber *touchMajorRadius;
@property (nonatomic, copy) NSNumber *typeInterval;
@property (nonatomic) bool usePopupKeys;
@property (nonatomic) bool usePredictionBar;

+ (id)keyboardLanguageValueMap;
+ (bool)supportsSecureCoding;
+ (void)typeStringOnHardwareKeyboard:(id)arg1 withLanguage:(id)arg2;

- (void).cxx_destruct;
- (void)_bailWithError:(id)arg1 completion:(id /* block */)arg2;
- (id)_character_set_pattern_from_string:(id)arg1;
- (id)_constructSwitchPath:(id)arg1 toPlane:(id)arg2 fromPlane:(id)arg3;
- (id)_convertCollationCharacters:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_determineHandwritingBound;
- (struct CGPoint { double x1; double x2; })_determinePointBetween:(struct CGPoint { double x1; double x2; })arg1 nextPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_determineTransformationinFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 segmentStart:(double)arg2 totalSegmentWidth:(unsigned long long)arg3 scale:(double)arg4 characterHeight:(double)arg5 characterWidth:(double)arg6 dimensions:(id)arg7;
- (id)_generateArgumentList:(id)arg1;
- (id)_generateHandwritingStream:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isPencil:(bool)arg3 dimensions:(id)arg4;
- (double)_getScaleInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isPencil:(bool)arg2 dimensions:(id)arg3;
- (struct CGPoint { double x1; double x2; })_guardAgainstOffScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isPlaneControlKey:(id)arg1;
- (id)_sanitizedStringForAutoShiftCheck:(id)arg1;
- (void)_setKeyboardUserPreferences:(id)arg1;
- (id)_setupAutoShiftRegex;
- (void)activate:(bool)arg1;
- (id)addAccentKeyAction:(id)arg1;
- (id)addKeyboardPopupKeys:(id)arg1 inPlane:(id)arg2 addTo:(id)arg3 keyplaneKeycaps:(id)arg4;
- (void)attachHardwareKeyboard:(id)arg1;
- (void)attachHardwareKeyboardWithCountryCode:(id)arg1;
- (id)attemptToFindKeystrokeAsGesture:(id)arg1;
- (id)autoshiftRegex;
- (struct CGPoint { double x1; double x2; })calculateCoordinatesForFlickGesture:(struct CGPoint { double x1; double x2; })arg1 direction:(id)arg2 offset:(float)arg3;
- (id)candidatebar;
- (struct CGPoint { double x1; double x2; })centerOfKey:(struct CGPoint { double x1; double x2; })arg1 withOffset:(struct CGPoint { double x1; double x2; })arg2;
- (id)changeKeyNameToGenericCharacter:(id)arg1;
- (long long)commitCandidate:(id)arg1;
- (long long)commitCandidateAtIndex:(long long)arg1;
- (id)convertRepresentedStringsIfNecessary:(id)arg1;
- (id)createAutoshiftRegularExpressionWithDelimitingCharacters:(id)arg1 sentenceTrailingCharacters:(id)arg2 sentencePrefixingCharacters:(id)arg3;
- (void)dealloc;
- (id)defaultPlaneName;
- (void)detachHardwareKeyboard;
- (bool)dictationSupported;
- (void)dragFromKey:(id)arg1 toKey:(id)arg2 completion:(id /* block */)arg3;
- (void)dragPopoverKey:(id)arg1 completion:(id /* block */)arg2;
- (void)encodeWithCoder:(id)arg1;
- (bool)fastTyping;
- (id)findKey:(id)arg1 inPlane:(id)arg2;
- (id)findKeyInOtherPlanes:(id)arg1 currentPlane:(id)arg2;
- (id)findKeyOnAnyPlane:(id)arg1;
- (id)findKeyOnCurrentPlane:(id)arg1;
- (void)flickKey:(id)arg1 withDirection:(id)arg2 completion:(id /* block */)arg3;
- (bool)flickTyping;
- (id)generateHandwritingStream:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isPencil:(bool)arg3;
- (id)generateHandwritingStream:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isPencil:(bool)arg3 rotationBias:(double)arg4;
- (id)generateHandwritingStream:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isPencil:(bool)arg3 rotationBias:(double)arg4 isCursive:(bool)arg5;
- (id)generateKeyplaneSwitchTable:(id)arg1;
- (id)generateKeyplaneSwitchTableFor10Key:(id)arg1;
- (id)generateKeystrokeStream:(id)arg1;
- (id)generatePencilGestureStream:(int)arg1 gestureStyle:(int)arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)generateSwipeStream:(id)arg1;
- (id)getAllCandidates;
- (id)getAlternatePlanesForDefaultPlane;
- (id)getAlternativeKeyPlaneName:(id)arg1;
- (id)getExpectedPlaneNameForKey:(id)arg1 currentPlane:(id)arg2;
- (id)getPostfixKey:(id)arg1;
- (id)getShiftPlaneForAlternatePlane;
- (id)getShiftPlaneForDefaultPlane;
- (id)getShiftedKeyPlaneName:(id)arg1;
- (id)getVisibleCandidates;
- (id)hardwareKeyboard;
- (bool)hasCandidate:(id)arg1;
- (bool)hasCandidate:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)hasCandidates:(id)arg1;
- (bool)hasCandidates:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)hasCandidatesToCommit;
- (id)init:(id)arg1;
- (id)init:(id)arg1 options:(id)arg2;
- (id)init:(id)arg1 options:(id)arg2 locale:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithHardwareKeyboard:(id)arg1;
- (bool)isAutoshiftedToCapitalPlane:(id)arg1;
- (bool)isAvailableFlickOnCurrentPlane:(id)arg1 withDirection:(id)arg2;
- (bool)isAvailableGestureOnCurrentPlane:(id)arg1 withDirection:(id)arg2;
- (bool)isAvailableKeyOnCurrentPlane:(id)arg1;
- (bool)isAvailablePopoverOnCurrentPlane:(id)arg1;
- (bool)isCapsLockedState;
- (bool)isFloating;
- (bool)isHandwriting;
- (bool)isKanaKeyboard;
- (bool)isSwitchedToCapitalPlane:(id)arg1 previous:(id)arg2 currentPlane:(id)arg3 context:(id)arg4;
- (bool)isTenKey;
- (id)keyPlanes;
- (id)keyboardID;
- (id)keyboardSW;
- (id)keyboardType;
- (id)keysDataForInputMode:(id)arg1 andFileName:(id)arg2;
- (id)languageID;
- (id)layoutName;
- (void)moveFloatingKeyboardToPosition:(struct CGPoint { double x1; double x2; })arg1;
- (id)planeSwitchTable;
- (void)preprocessing;
- (void)pressAndHoldHardwareKeys:(id)arg1 forDuration:(double)arg2 withValidation:(id /* block */)arg3 validateAfter:(double)arg4;
- (id)pressDuration;
- (void)pressKeycode:(unsigned short)arg1;
- (id)regionCode;
- (id)sentenceDelimitingCharacters;
- (id)sentencePrefixingCharacters;
- (id)sentenceTrailingCharacters;
- (void)setAutoshiftRegex:(id)arg1;
- (void)setCandidatebar:(id)arg1;
- (void)setDefaultPlaneName:(id)arg1;
- (void)setDictationSupported:(bool)arg1;
- (void)setFastTyping:(bool)arg1;
- (void)setFlickTyping:(bool)arg1;
- (void)setFloatingKeyboard:(bool)arg1;
- (void)setHardwareKeyboard:(id)arg1;
- (void)setHasCandidatesToCommit:(bool)arg1;
- (void)setIsCapsLockedState:(bool)arg1;
- (void)setIsHandwriting:(bool)arg1;
- (void)setIsKana:(bool)arg1;
- (void)setIsTenKey:(bool)arg1;
- (void)setKeyPlanes:(id)arg1;
- (void)setKeyboardID:(id)arg1;
- (void)setKeyboardSW:(id)arg1;
- (void)setKeyboardType:(id)arg1;
- (void)setLanguageID:(id)arg1;
- (void)setLayoutName:(id)arg1;
- (void)setOneHandedPosition:(id)arg1;
- (void)setPlaneSwitchTable:(id)arg1;
- (void)setPressDuration:(id)arg1;
- (void)setRegionCode:(id)arg1;
- (void)setSentenceDelimitingCharacters:(id)arg1;
- (void)setSentencePrefixingCharacters:(id)arg1;
- (void)setSentenceTrailingCharacters:(id)arg1;
- (void)setShouldShowDictationKey:(bool)arg1;
- (void)setShouldShowGlobeKey:(bool)arg1;
- (void)setSwipeAlpha:(id)arg1;
- (void)setSwipeConvexProbability:(id)arg1;
- (void)setSwipeConvexSigma:(id)arg1;
- (void)setSwipeErrantProbability:(id)arg1;
- (void)setSwipeErrantSigma:(id)arg1;
- (void)setSwipeForceSpace:(bool)arg1;
- (void)setSwipePivotProbability:(id)arg1;
- (void)setSwipeSigma:(id)arg1;
- (void)setTapBounds:(id)arg1;
- (void)setTapSigma:(id)arg1;
- (void)setTapStyle:(int)arg1;
- (void)setTapStyleNoise:(id)arg1;
- (void)setTouchMajorRadius:(id)arg1;
- (void)setTypeInterval:(id)arg1;
- (void)setUsePopupKeys:(bool)arg1;
- (void)setUsePredictionBar:(bool)arg1;
- (void)setup50OnFlick:(id)arg1 forKey:(id)arg2 keyName:(id)arg3 planeName:(id)arg4;
- (void)setupExtraKeyplaneDataIfNeeded:(id)arg1;
- (id)setupKeyboardInfo:(id)arg1 options:(id)arg2;
- (void)setupSentenceBoundryStrings;
- (void)setupTenKey:(id)arg1 forKey:(id)arg2 keyName:(id)arg3 planeName:(id)arg4;
- (bool)shouldShowDictationKey;
- (bool)shouldShowGlobeKey;
- (id)splitKeystrokeStreamByWord:(id)arg1 originalText:(id)arg2;
- (id)swipeAlpha;
- (id)swipeConvexProbability;
- (id)swipeConvexSigma;
- (id)swipeErrantProbability;
- (id)swipeErrantSigma;
- (bool)swipeForceSpace;
- (void)swipeGestureKey:(id)arg1 withDirection:(id)arg2 completion:(id /* block */)arg3;
- (void)swipeGestureOrFlickKey:(id)arg1 withDirection:(id)arg2 completion:(id /* block */)arg3;
- (id)swipePivotProbability;
- (id)swipeSigma;
- (void)swipeString:(id)arg1;
- (void)switchKeyPlaneOnActiveKeyboard:(id)arg1;
- (id)switchToPlane:(id)arg1 fromPlane:(id)arg2;
- (id)tapBounds;
- (void)tapGlobeKey;
- (void)tapKey:(id)arg1 tapCount:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)tapKey:(id)arg1 tapCount:(unsigned long long)arg2 overriddenTypeInterval:(id)arg3 completion:(id /* block */)arg4;
- (void)tapMoreKey;
- (id)tapSigma;
- (int)tapStyle;
- (void)toggleCapsLock;
- (id)touchMajorRadius;
- (id)tryAlternateVariationsOfKey:(id)arg1;
- (id)typeInterval;
- (void)typeKeystrokeStream:(id)arg1;
- (void)typeKeystrokeStream:(id)arg1 completion:(id /* block */)arg2;
- (void)typeKeystrokeStreamWithPredictive:(id)arg1 originalText:(id)arg2 completion:(id /* block */)arg3;
- (void)typeString:(id)arg1;
- (void)typeString:(id)arg1 completion:(id /* block */)arg2;
- (void)typeString:(id)arg1 withCommit:(id)arg2;
- (void)typeStringWithHardwareKeyboard:(id)arg1;
- (void)typeWordKeystrokeWithPredictive:(id)arg1 atIndex:(long long)arg2 completion:(id /* block */)arg3;
- (void)typeWordKeystrokes:(id)arg1 expectedWord:(id)arg2 atIndex:(long long)arg3 completion:(id /* block */)arg4;
- (bool)usePopupKeys;
- (bool)usePredictionBar;
- (bool)usesMecabraCandidateBar;
- (void)writePencilGesture:(int)arg1 inStyle:(int)arg2 gestureRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)writePencilGesture:(int)arg1 inStyle:(int)arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)writeString:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)writeString:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 isCursive:(bool)arg3;
- (void)writeString:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 rotationBias:(double)arg3;
- (void)writeString:(id)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 rotationBias:(double)arg3 isCursive:(bool)arg4;

@end
