
@interface NRBluetoothPacketParser : NSObject <NENexusDelegate> {
    unsigned long long  _activityMask;
    bool  _advancedWithoutRXSync;
    NSUUID * _bluetoothUUID;
    unsigned long long  _bytesFromLink;
    unsigned long long  _bytesToLink;
    unsigned long long  _counterForDataStallCheck;
    unsigned long long  _counterForDataStallRemediation;
    NSObject<OS_dispatch_source> * _dNexusBEInputSource;
    NSObject<OS_dispatch_source> * _dNexusBEOutputSource;
    NSObject<OS_dispatch_source> * _dNexusBKInputSource;
    NSObject<OS_dispatch_source> * _dNexusBKOutputSource;
    NSObject<OS_dispatch_source> * _dNexusVIInputSource;
    NSObject<OS_dispatch_source> * _dNexusVIOutputSource;
    NSObject<OS_dispatch_source> * _dNexusVOInputSource;
    NSObject<OS_dispatch_source> * _dNexusVOOutputSource;
    unsigned long long  _datagramBytesFromLink;
    unsigned long long  _datagramBytesToLink;
    NRDeviceIdentifier * _deviceIdentifier;
    bool  _forceWakePacketForTesting;
    unsigned long long  _identifier;
    unsigned long long  _lastPacketDataArrivalTime;
    unsigned long long  _lastReadBytesFromDatagramLink;
    unsigned long long  _lastReadBytesFromLink;
    unsigned long long  _lastReadBytesFromUrgentLink;
    unsigned long long  _lastReadBytesToDatagramLink;
    unsigned long long  _lastReadBytesToLink;
    unsigned long long  _lastReadBytesToUrgentLink;
    unsigned long long  _lastReadPacketsFromNexusBE;
    unsigned long long  _lastReadPacketsFromNexusBK;
    unsigned long long  _lastReadPacketsFromNexusVI;
    unsigned long long  _lastReadPacketsFromNexusVO;
    unsigned long long  _lastReadPacketsToNexusBE;
    unsigned long long  _lastReadPacketsToNexusBK;
    unsigned long long  _lastReadPacketsToNexusVI;
    unsigned long long  _lastReadPacketsToNexusVO;
    unsigned long long  _lastReadWriteActivityCounterForHigh;
    unsigned long long  _lastReadWriteActivityCounterForIsochronous;
    unsigned long long  _lastReadWriteActivityCounterForMedium;
    unsigned char  _linkActivationMap;
    NSObject<OS_dispatch_source> * _linkStatTimerSource;
    struct in6_addr { 
        union { 
            unsigned char __u6_addr8[16]; 
            unsigned short __u6_addr16[8]; 
            unsigned int __u6_addr32[4]; 
        } __u6_addr; 
    }  _localAddrClassD;
    NWAddressEndpoint * _localEndpoint;
    struct channel { } * _nexusBEChannel;
    bool  _nexusBEChannelUsedSinceLastPurge;
    NSObject<OS_dispatch_group> * _nexusBEGroup;
    struct channel_ring_desc { } * _nexusBEInputRing;
    struct channel_ring_desc { } * _nexusBEOutputRing;
    struct channel { } * _nexusBKChannel;
    bool  _nexusBKChannelUsedSinceLastPurge;
    NSObject<OS_dispatch_group> * _nexusBKGroup;
    struct channel_ring_desc { } * _nexusBKInputRing;
    struct channel_ring_desc { } * _nexusBKOutputRing;
    NSArray * _nexusInstances;
    bool  _nexusSetupComplete;
    struct channel { } * _nexusVIChannel;
    bool  _nexusVIChannelUsedSinceLastPurge;
    NSObject<OS_dispatch_group> * _nexusVIGroup;
    struct channel_ring_desc { } * _nexusVIInputRing;
    struct channel_ring_desc { } * _nexusVIOutputRing;
    struct channel { } * _nexusVOChannel;
    bool  _nexusVOChannelUsedSinceLastPurge;
    NSObject<OS_dispatch_group> * _nexusVOGroup;
    struct channel_ring_desc { } * _nexusVOInputRing;
    struct channel_ring_desc { } * _nexusVOOutputRing;
    unsigned long long  _packetDataIntervalAverage;
    unsigned long long  _packetsFromNexusBE;
    unsigned long long  _packetsFromNexusBK;
    unsigned long long  _packetsFromNexusVI;
    unsigned long long  _packetsFromNexusVO;
    unsigned long long  _packetsToNexusBE;
    unsigned long long  _packetsToNexusBK;
    unsigned long long  _packetsToNexusVI;
    unsigned long long  _packetsToNexusVO;
    NSObject<OS_dispatch_source> * _poolPurgeTimer;
    bool  _processingNexusInput;
    NSObject<OS_dispatch_queue> * _queue;
    struct { void *x1; int (*x2)(); int (*x3)(); int (*x4)(); void *x5; } * _readContextForHigh;
    struct { void *x1; int (*x2)(); int (*x3)(); int (*x4)(); void *x5; } * _readContextForIsochronous;
    struct { void *x1; int (*x2)(); int (*x3)(); int (*x4)(); void *x5; } * _readContextForMedium;
    struct in6_addr { 
        union { 
            unsigned char __u6_addr8[16]; 
            unsigned short __u6_addr16[8]; 
            unsigned int __u6_addr32[4]; 
        } __u6_addr; 
    }  _remoteAddrClassD;
    NWAddressEndpoint * _remoteEndpoint;
    unsigned char  _ringIdxToStart;
    unsigned char  _ringIdxToStartForMedium;
    bool  _simulateWakePacketForTesting;
    bool  _startRequested;
    unsigned char  _state;
    unsigned long long  _totalContextCount;
    unsigned long long  _urgentBytesFromLink;
    unsigned long long  _urgentBytesToLink;
    unsigned long long  _writeActivityCounterForHigh;
    unsigned long long  _writeActivityCounterForIsochronous;
    unsigned long long  _writeActivityCounterForMedium;
    struct { void *x1; int (*x2)(); int (*x3)(); void *x4; } * _writeContextForHigh;
    struct { void *x1; int (*x2)(); int (*x3)(); void *x4; } * _writeContextForIsochronous;
    struct { void *x1; int (*x2)(); int (*x3)(); void *x4; } * _writeContextForMedium;
    NRXPCComm * _xpcComm;
}

@property (nonatomic, retain) NSUUID *bluetoothUUID;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)acceptNewFlow:(id)arg1 fromNexus:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)bluetoothUUID;
- (void)cancel;
- (struct { void *x1; int (*x2)(); int (*x3)(); int (*x4)(); void *x5; }*)createReadContextForPriority:(unsigned char)arg1 readAvailableCallback:(int (*)arg2 readAvailableContext:(void*)arg3;
- (struct { void *x1; int (*x2)(); int (*x3)(); void *x4; }*)createWriteContextForPriority:(unsigned char)arg1 writeOutputCallback:(int (*)arg2 writeOutputContext:(void*)arg3;
- (void)dealloc;
- (id)description;
- (void)handleRequestToActivateNexus:(id)arg1 fromFlow:(id)arg2;
- (id)initWithBluetoothUUID:(id)arg1 queue:(id)arg2;
- (id)initWithDeviceIdentifier:(id)arg1 queue:(id)arg2;
- (void)resetContextForPriority:(unsigned char)arg1;
- (void)setBluetoothUUID:(id)arg1;
- (bool)start;

@end
