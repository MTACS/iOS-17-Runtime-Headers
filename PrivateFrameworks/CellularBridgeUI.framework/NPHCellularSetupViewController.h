
@interface NPHCellularSetupViewController : BPSWelcomeOptinViewController <BPSMiniFlowStepController, UIAdaptivePresentationControllerDelegate> {
    NSString * _alternateButtonTitle;
    UIBarButtonItem * _cancelNavBarButtonItem;
    long long  _configuration;
    NSString * _detailString;
    bool  _haveReceivedProxyPlanItems;
    bool  _isCellularSetupFlowComplete;
    bool  _isTinkerCrossCarrierSetUpFlow;
    UIBarButtonItem * _nextNavBarButtonItem;
    bool  _shouldHideSkipButton;
    UIActivityIndicatorView * _spinner;
    SUBManager * _subManager;
    NSString * _suggestedButtonTitle;
    long long  _type;
    NSArray * _userVisibleErrors;
    <BPSSetupMiniFlowControllerDelegate> * miniFlowDelegate;
}

@property (nonatomic, copy) NSString *alternateButtonTitle;
@property (nonatomic, retain) UIBarButtonItem *cancelNavBarButtonItem;
@property (nonatomic) long long configuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSString *detailString;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool haveReceivedProxyPlanItems;
@property (nonatomic) bool isCellularSetupFlowComplete;
@property (nonatomic) bool isTinkerCrossCarrierSetUpFlow;
@property (nonatomic) <BPSSetupMiniFlowControllerDelegate> *miniFlowDelegate;
@property (nonatomic, retain) UIBarButtonItem *nextNavBarButtonItem;
@property (nonatomic, retain) UIActivityIndicatorView *spinner;
@property (nonatomic, retain) SUBManager *subManager;
@property (nonatomic, copy) NSString *suggestedButtonTitle;
@property (readonly) Class superclass;
@property (nonatomic) long long type;
@property (nonatomic, retain) NSArray *userVisibleErrors;

+ (void)_logEventOncePerSession:(unsigned long long)arg1;
+ (bool)controllerNeedsToRun;
+ (id)loggedEvents;
+ (void)setLoggedEvents:(id)arg1;

- (void).cxx_destruct;
- (void)_decideWhetherToShowTransferOrSetup;
- (id)_setUpNowDetailString;
- (id)alternateButtonTitle;
- (id)cancelNavBarButtonItem;
- (void)checkForSoftwareUpdate;
- (long long)configuration;
- (void)ctCellularPlanInfoDidChange:(id)arg1;
- (void)dealloc;
- (id)detailString;
- (bool)haveReceivedProxyPlanItems;
- (id)imageResource;
- (id)initWithConfiguration:(long long)arg1;
- (bool)isCellularSetupFlowComplete;
- (bool)isGeminiSetup;
- (bool)isTinkerCrossCarrierSetUpFlow;
- (id)miniFlowDelegate;
- (void)navigateToNextView;
- (id)nextNavBarButtonItem;
- (void)okayButtonPressed:(id)arg1;
- (id)okayButtonTitle;
- (void)presentationControllerWillDismiss:(id)arg1;
- (void)setAlternateButtonTitle:(id)arg1;
- (void)setCancelNavBarButtonItem:(id)arg1;
- (void)setConfiguration:(long long)arg1;
- (void)setDetailString:(id)arg1;
- (void)setHaveReceivedProxyPlanItems:(bool)arg1;
- (void)setIsCellularSetupFlowComplete:(bool)arg1;
- (void)setIsTinkerCrossCarrierSetUpFlow:(bool)arg1;
- (void)setMiniFlowDelegate:(id)arg1;
- (void)setNextNavBarButtonItem:(id)arg1;
- (void)setSpinner:(id)arg1;
- (void)setSubManager:(id)arg1;
- (void)setSuggestedButtonTitle:(id)arg1;
- (void)setType:(long long)arg1;
- (void)setUpNow;
- (void)setUserVisibleErrors:(id)arg1;
- (id)spinner;
- (id)subManager;
- (id)suggestedButtonTitle;
- (id)tapToRadarMetadata;
- (id)titleString;
- (void)transfer;
- (id)trialOfferMessage;
- (long long)type;
- (void)updateUIFromCellularPlanItems;
- (void)updateUIToShowContinue;
- (void)updateUIToShowPlanSetUpTrial;
- (void)updateUIToShowPlanTransferOrSetUpNewOptions;
- (void)updateUIToShowPreinstall;
- (void)updateUIToShowSetUpNow;
- (void)updateUIToShowSetUpNowMultipleSubscriptions;
- (void)updateUIToShowSpinner;
- (void)updateUIToShowUserConsent:(long long)arg1 relevantPlan:(id)arg2;
- (void)updateUIToShowUserVisibleError;
- (void)userTappedConsent:(id)arg1;
- (void)userTappedContinue:(id)arg1;
- (void)userTappedNext:(id)arg1;
- (void)userTappedSetUp:(id)arg1;
- (void)userTappedSetUpCarrier:(id)arg1;
- (void)userTappedSetUpNew:(id)arg1;
- (void)userTappedSkip:(id)arg1;
- (void)userTappedTransfer:(id)arg1;
- (id)userVisibleErrors;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (bool)wantsLightenBlendedScreen;

@end
