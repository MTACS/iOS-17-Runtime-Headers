
@interface GEOMapFeatureRoad : GEOMapFeatureLine <NSCopying> {
    bool  _checkedJunctionA;
    bool  _checkedJunctionB;
    GEOMultiSectionFeature * _feature;
    GEOMapFeatureJunction * _junctionA;
    GEOMapFeatureJunction * _junctionB;
    union { 
        unsigned long long roadID; 
        struct { 
            unsigned int flipped : 1; 
            unsigned int featureIndex : 14; 
            unsigned int tileY : 16; 
            unsigned int tileX : 16; 
            unsigned int unused : 17; 
        } ; 
    }  _roadKey;
    GEOVectorTile * _tile;
}

@property (nonatomic, readonly) unsigned long long _diagnosticsOnly_forwardSpeedLimit;
@property (nonatomic, readonly) unsigned long long _diagnosticsOnly_reverseSpeedLimit;
@property (nonatomic, readonly) int bikeLaneSide;
@property (nonatomic, readonly) int bikeableSide;
@property (nonatomic, readonly) GEOMultiSectionFeature *endFeature;
@property (nonatomic, readonly) GEOMapFeatureJunction *endJunction;
@property (nonatomic, readonly) GEOMultiSectionFeature *feature;
@property (nonatomic, readonly) unsigned long long featureIndex;
@property (nonatomic, readonly) struct { double x1; double x2; } firstCoordinate;
@property (nonatomic, readonly) int formOfWay;
@property (nonatomic, readonly) NSString *internalRoadName;
@property (nonatomic, readonly) bool isBridge;
@property (nonatomic, readonly) bool isDrivable;
@property (nonatomic, readonly) bool isFlipped;
@property (nonatomic, readonly) bool isRail;
@property (nonatomic, readonly) bool isRoadPedestrianNavigable;
@property (nonatomic, readonly) bool isTunnel;
@property (nonatomic, readonly) bool isValidTravelDirection;
@property (nonatomic, readonly) bool isWalkable;
@property (nonatomic, readonly) long long laneCount;
@property (nonatomic, readonly) unsigned long long muid;
@property (nonatomic, readonly) int rampType;
@property (nonatomic, readonly) int roadClass;
@property (nonatomic, readonly) unsigned long long roadID;
@property (nonatomic, readonly) double roadWidth;
@property (nonatomic, readonly) int sidewalkSide;
@property (nonatomic, readonly) long long signedMuid;
@property (nonatomic, readonly) unsigned long long speedLimit;
@property (nonatomic, readonly) bool speedLimitIsMPH;
@property (nonatomic, readonly) GEOMultiSectionFeature *startFeature;
@property (nonatomic, readonly) GEOMapFeatureJunction *startJunction;
@property (nonatomic, readonly) struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEOGloriaQuadIDTileKey { unsigned int x_2_2_1 : 6; unsigned int x_2_2_2 : 64; unsigned int x_2_2_3 : 14; unsigned int x_2_2_4 : 4; union { struct { unsigned int x_1_4_1 : 10; unsigned int x_1_4_2 : 10; unsigned int x_1_4_3 : 12; } x_5_3_1; unsigned int x_5_3_2; } x_2_2_5; } x_3_1_2; struct _GEORegionalResourceKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 6; unsigned int x_3_2_4 : 8; unsigned int x_3_2_5 : 8; unsigned int x_3_2_6 : 1; unsigned int x_3_2_7 : 57; } x_3_1_3; struct _GEOSputnikMetadataKey { unsigned int x_4_2_1 : 32; unsigned int x_4_2_2 : 24; unsigned int x_4_2_3 : 14; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 42; } x_3_1_4; struct _GEOFlyoverKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 26; unsigned int x_5_2_3 : 26; unsigned int x_5_2_4 : 8; unsigned int x_5_2_5 : 24; unsigned int x_5_2_6 : 14; unsigned int x_5_2_7 : 8; unsigned int x_5_2_8 : 8; } x_3_1_5; } x3; } tileKey;
@property (nonatomic, readonly) int travelDirection;
@property (nonatomic, readonly) int walkableSide;

- (void).cxx_destruct;
- (id)_attributes;
- (id)_containingTile;
- (unsigned long long)_diagnosticsOnly_forwardSpeedLimit;
- (unsigned long long)_diagnosticsOnly_reverseSpeedLimit;
- (float*)_elevationsForSection:(unsigned long long)arg1 outCount:(out unsigned long long*)arg2;
- (int)_flippedBikeLaneSideFor:(int)arg1;
- (int)_flippedBikeableSideFor:(int)arg1;
- (int)_flippedSidewalkSideFor:(int)arg1;
- (int)_flippedWalkableSideFor:(int)arg1;
- (id)_junctionA;
- (id)_junctionB;
- (struct GeoCodecsVectorTilePoint { float x1; float x2; }*)_tilePointsForSection:(unsigned long long)arg1 outCount:(out unsigned long long*)arg2;
- (int)bikeLaneSide;
- (int)bikeableSide;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugDescription;
- (id)description;
- (id)endFeature;
- (id)endJunction;
- (id)feature;
- (unsigned long long)featureIndex;
- (struct { double x1; double x2; })firstCoordinate;
- (void)flip;
- (id)flippedCopy;
- (int)formOfWay;
- (id)initWithFeature:(id)arg1;
- (id)internalRoadName;
- (bool)isBridge;
- (bool)isDrivable;
- (bool)isFlipped;
- (bool)isRail;
- (bool)isRoadPedestrianNavigable;
- (bool)isTunnel;
- (bool)isValidTravelDirection;
- (bool)isWalkable;
- (long long)laneCount;
- (id)localizedRoadName:(out id*)arg1;
- (unsigned long long)muid;
- (int)rampType;
- (int)roadClass;
- (unsigned long long)roadID;
- (double)roadWidth;
- (int)sidewalkSide;
- (long long)signedMuid;
- (unsigned long long)speedLimit;
- (bool)speedLimitIsMPH;
- (id)startFeature;
- (id)startJunction;
- (struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEOGloriaQuadIDTileKey { unsigned int x_2_2_1 : 6; unsigned int x_2_2_2 : 64; unsigned int x_2_2_3 : 14; unsigned int x_2_2_4 : 4; union { struct { unsigned int x_1_4_1 : 10; unsigned int x_1_4_2 : 10; unsigned int x_1_4_3 : 12; } x_5_3_1; unsigned int x_5_3_2; } x_2_2_5; } x_3_1_2; struct _GEORegionalResourceKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 6; unsigned int x_3_2_4 : 8; unsigned int x_3_2_5 : 8; unsigned int x_3_2_6 : 1; unsigned int x_3_2_7 : 57; } x_3_1_3; struct _GEOSputnikMetadataKey { unsigned int x_4_2_1 : 32; unsigned int x_4_2_2 : 24; unsigned int x_4_2_3 : 14; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 42; } x_3_1_4; struct _GEOFlyoverKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 26; unsigned int x_5_2_3 : 26; unsigned int x_5_2_4 : 8; unsigned int x_5_2_5 : 24; unsigned int x_5_2_6 : 14; unsigned int x_5_2_7 : 8; unsigned int x_5_2_8 : 8; } x_3_1_5; } x3; })tileKey;
- (int)travelDirection;
- (void)updateForDesiredRoadDirectionality:(unsigned long long)arg1 isOutboundRoad:(bool)arg2;
- (int)walkableSide;

@end
