
@interface GEORouteHypothesisMonitor : NSObject <GEOETAUpdaterDelegate, NSSecureCoding> {
    GEORouteHypothesizerAnalyticsStore * _analyticsStore;
    NSDate * _arrivalDate;
    GEOMapRegion * _arrivalMapRegion;
    GEONavdClientInfo * _clientInfo;
    GEOCommonOptions * _commonOptions;
    GEODirectionsRequest * _currentRequest;
    GEOComposedWaypoint * _destination;
    NSObject<OS_dispatch_group> * _etaUpdaterDispatchGroup;
    GEODirectionsRequestFeedback * _feedback;
    id /* block */  _handler;
    bool  _hasArrived;
    GEORouteHypothesis * _hypothesis;
    bool  _isTraveling;
    GEOLocation * _lastLocation;
    GEOLocation * _lastMatchedLocation;
    GEOComposedETARoute * _liveETARoute;
    GEOETAUpdater * _liveETAUpdater;
    bool  _needReroute;
    GEOLocation * _originLocation;
    geo_isolater * _requestIsolater;
    NSMutableArray * _rerouteEntries;
    GEOComposedRoute * _route;
    GEORouteAttributes * _routeAttributes;
    GEORouteMatch * _routeMatch;
    NSData * _sessionState;
    GEOComposedWaypoint * _source;
    NSString * _traceName;
    GEOMapServiceTraits * _traits;
    int  _transportType;
    double  _travelScore;
}

@property (nonatomic, readonly) NSDate *arrivalDate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) GEOComposedWaypoint *destination;
@property (nonatomic, retain) GEODirectionsRequestFeedback *feedback;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) GEORouteHypothesis *hypothesis;
@property (nonatomic, readonly) GEORouteAttributes *routeAttributes;
@property (nonatomic, readonly) NSString *routeName;
@property (nonatomic, readonly) GEOComposedWaypoint *source;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsDirections;
@property (nonatomic, readonly) bool supportsLiveTraffic;
@property (nonatomic, readonly) int transportType;

+ (id)monitorWithSource:(id)arg1 toDestination:(id)arg2 traceName:(id)arg3 traits:(id)arg4 routeAttributes:(id)arg5 clientInfo:(id)arg6;
+ (id)routeAttributesForTransportType:(int)arg1 withArrivalDate:(id)arg2;
+ (id)serverFormattedStringFormatter;
+ (void)setServerFormattedStringFormatter:(id)arg1;
+ (void)setUserPreferencesProvider:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)userPreferencesProvider;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_executeBlockAccessingCurrentRequest:(id /* block */)arg1;
- (void)_fetchETAWithRouteMatch:(id)arg1;
- (bool)_hasInitialRoute;
- (bool)_isNavigating;
- (bool)_isNavigatingToDestination;
- (id)_newETAUpdater;
- (void)_recalculateETAWithRouteMatch:(id)arg1;
- (void)_receivedRouteResponse:(id)arg1 forLocation:(id)arg2 isReroute:(bool)arg3;
- (void)_requestNewRouteFromLocation:(id)arg1 usualRouteData:(id)arg2;
- (void)_routeRequestFailed:(id)arg1;
- (bool)_shouldUpdateETAForRouteMatch:(id)arg1;
- (void)_showDebugAlert;
- (void)_updateLocation:(id)arg1 allowServer:(bool)arg2;
- (void)_updateRouteMatchETAAndTravelState;
- (void)_updateScoreForLocation:(id)arg1;
- (id)arrivalDate;
- (void)callHandlerIvar;
- (void)cancelCurrentRequest;
- (void)checkRouteForLocation:(id)arg1;
- (void)clientDisplayedUINotification:(unsigned long long)arg1;
- (void)dealloc;
- (id)description;
- (id)destination;
- (void)encodeWithCoder:(id)arg1;
- (void)etaUpdater:(id)arg1 receivedETATrafficUpdateResponse:(id)arg2 etaRoute:(id)arg3;
- (void)etaUpdater:(id)arg1 receivedError:(id)arg2;
- (void)etaUpdater:(id)arg1 willSendETATrafficUpdateRequest:(id)arg2;
- (void)etaUpdaterReceivedInvalidRoute:(id)arg1 newRoute:(id)arg2 incidentsOnRoute:(id)arg3 incidentsOffRoute:(id)arg4;
- (void)etaUpdaterRequestCompleted:(id)arg1;
- (void)etaUpdaterUpdatedETA:(id)arg1;
- (id)feedback;
- (id)hypothesis;
- (id)initWithCoder:(id)arg1;
- (id)initWithSource:(id)arg1 toDestination:(id)arg2 traceName:(id)arg3 traits:(id)arg4 routeAttributes:(id)arg5 clientInfo:(id)arg6;
- (id)navDestination;
- (void)recordETAUpdatesAfterEventStart;
- (id)routeAttributes;
- (id)routeMatchForLocation:(id)arg1;
- (id)routeName;
- (void)setFeedback:(id)arg1;
- (id)source;
- (void)stopMonitoring;
- (bool)supportsDirections;
- (bool)supportsLiveTraffic;
- (int)transportType;
- (void)travelStateChanged;
- (void)updateLocation:(id)arg1 allowServer:(bool)arg2 hypothesisHandler:(id /* block */)arg3;

@end
