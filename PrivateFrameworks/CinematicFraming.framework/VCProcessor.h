
@interface VCProcessor : NSObject <MetalImageBufferProcessor> {
    bool  _attachMetadataToOutputPixelBuffer;
    bool  _autoFramingEnabled;
    bool  _autoRestoreManualFramingState;
    VCCamera * _auxiliaryStreamCamera;
    NSDictionary * _cameraInfoByPortType;
    <VCProcessorCameraSwitchingDelegate> * _cameraSwitchingDelegate;
    bool  _centerStagePassthrough;
    bool  _confineOutputCamera;
    FigMetalContext * _context;
    struct __CVMetalTextureCache { } * _cvMetalTextureCacheRef;
    bool  _fisheyeEffectEnabled;
    bool  _framingModeJustChanged;
    CinematicFramingSession * _framingSession;
    VCCamera * _inputCamera;
    CinematicFramingSessionInputMetadata * _inputMetadata;
    struct __CVBuffer { } * _inputPixelBuffer;
    float  _manualFramingDefaultVideoZoomFactor;
    struct { 
        /* Warning: Unrecognized filer type: '"' using 'void*' */ void*panTiltAngles; 
    }  _manualFramingState;
    NSDictionary * _manualFramingStateMetadata;
    <MTLCommandQueue> * _metalCommandQueue;
    bool  _oneShotFramingCompleted;
    bool  _orientationCorrectionEnabled;
    VCCamera * _outputCamera;
    VCCameraAnimator * _outputCameraAnimator;
    bool  _outputCameraResetCompleted;
    struct { 
        int width; 
        int height; 
    }  _outputDimensions;
    struct __CVBuffer { } * _outputPixelBuffer;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _outputROI;
    unsigned int  _processingType;
    bool  _rollCorrectionEnabled;
    void _rotationCursorCurr;
    void _rotationCursorPrev;
    VCShaders * _shaders;
    VCTuningParameters * _tuning;
    NSDictionary * _tuningParameters;
    float  _videoZoomFactor;
}

@property (nonatomic) bool attachMetadataToOutputPixelBuffer;
@property (nonatomic) bool autoFramingEnabled;
@property (nonatomic) float autoFramingFOVLimit;
@property (nonatomic) bool autoRestoreManualFramingState;
@property (nonatomic, retain) NSDictionary *cameraInfoByPortType;
@property (nonatomic) bool centerStagePassthrough;
@property (nonatomic) bool confineOutputCamera;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CMIExternalMemoryResource *externalMemoryResource;
@property (nonatomic) bool fisheyeEffectEnabled;
@property (nonatomic, readonly) CinematicFramingSession *framingSession;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) VCCamera *inputCamera;
@property (nonatomic, retain) CinematicFramingSessionInputMetadata *inputMetadata;
@property (nonatomic) struct __CVBuffer { }*inputPixelBuffer;
@property (nonatomic) float manualFramingDefaultVideoZoomFactor;
@property (nonatomic, readonly) NSDictionary *manualFramingStateMetadata;
@property (nonatomic, retain) <MTLCommandQueue> *metalCommandQueue;
@property (nonatomic, readonly) bool oneShotFramingCompleted;
@property (nonatomic) bool orientationCorrectionEnabled;
@property (nonatomic, retain) VCCamera *outputCamera;
@property (nonatomic, readonly) bool outputCameraResetCompleted;
@property (nonatomic) struct { int x1; int x2; } outputDimensions;
@property (nonatomic) struct __CVBuffer { }*outputPixelBuffer;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } outputROI;
@property (nonatomic) bool rollCorrectionEnabled;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsExternalMemoryResource;
@property (nonatomic, retain) NSDictionary *tuningParameters;
@property (nonatomic) float videoZoomFactor;

+ (struct CGPoint { double x1; double x2; })warpCGPoint:(struct CGPoint { double x1; double x2; })arg1 fromCamera:(id)arg2 toCamera:(id)arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })warpCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromCamera:(id)arg2 toCamera:(id)arg3;

- (void).cxx_destruct;
- (id)_bindCVPixleBuffer:(struct __CVBuffer { }*)arg1 usage:(unsigned long long)arg2;
- (void)_cacheManualFramingState;
- (id)_cachedTexturesFromPixelBuffer:(struct __CVBuffer { }*)arg1 usage:(unsigned long long)arg2;
- (int)_confineOutputCameraToInputCameraFrustum:(bool)arg1;
- (int)_createRenderTargetForOutputLumaTex:(id)arg1 outputChromaTex:(id)arg2 renderTargetLumaTex:(id*)arg3 renderTargetChromaTex:(id*)arg4;
- (int)_encodeDownsample:(id)arg1 inputLumaTex:(id)arg2 inputChromaTex:(id)arg3 outputLumaTex:(id)arg4 outputChromaTex:(id)arg5;
- (int)_encodeRender:(id)arg1 inputLumaTex:(id)arg2 inputChromaTex:(id)arg3 outputLumaTex:(id)arg4 outputChromaTex:(id)arg5;
- (int)_encodeRenderTargetResolve:(id)arg1 renderTargetLumaTex:(id)arg2 renderTargetChromaTex:(id)arg3 outputLumaTex:(id)arg4 outputChromaTex:(id)arg5;
- (int)_fillRenderParams:(struct { struct { struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_1_2_1[3]; } x_1_1_1; float x_1_1_2; struct { void*x_3_2_1[4]; } x_1_1_3; bool x_1_1_4; int x_1_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; float x_6_2_4; float x_6_2_5; float x_6_2_6; float x_6_2_7; float x_6_2_8; } x_1_1_6; int x_1_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; float x_8_2_5; float x_8_2_6; float x_8_2_7; float x_8_2_8; } x_1_1_8; float x_1_1_9; } x1; struct { struct { void*x_1_2_1[3]; } x_2_1_1; float x_2_1_2; struct { void*x_3_2_1[4]; } x_2_1_3; bool x_2_1_4; int x_2_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; float x_6_2_4; float x_6_2_5; float x_6_2_6; float x_6_2_7; float x_6_2_8; } x_2_1_6; int x_2_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; float x_8_2_5; float x_8_2_6; float x_8_2_7; float x_8_2_8; } x_2_1_8; float x_2_1_9; } x2; struct { } x3; struct { } x4; }*)arg1;
- (float)_getBaseZoomFactor:(id)arg1;
- (void)_getEquivalentOutputCameraFocalLength:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1 rotation:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2 forViewport:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_getGravityVectorForCamera:(id)arg1 fromMetadata:(id)arg2;
- (int)_loadTuningParameters;
- (unsigned long long)_metalTextureFormatFromPixelBufferFormat:(unsigned int)arg1 forPlane:(unsigned int)arg2;
- (int)_processStill;
- (int)_processVideo;
- (int)_render;
- (void)_restoreManualFramingState;
- (int)_setOutputPixelBufferAttachments;
- (int)_updateAutoFraming;
- (int)_updateCamera:(id)arg1 withMetadata:(id)arg2;
- (int)_updateManualFraming;
- (int)_updateManualFramingStateMetadata;
- (int)_updateOutputCameraAnimation;
- (void)_updateOutputCameraFisheyeEffect;
- (void)_updateOutputCameraFocalLengthWithVideoZoomFactor;
- (int)_updateOutputCameraForRollCorrection;
- (void)_updateOutputCameraRotationWithCursor;
- (void)_updateVideoZoomFactorFromInputCamera:(id)arg1 toOutputCamera:(id)arg2;
- (void)adjustToFrameCurrentScene;
- (bool)attachMetadataToOutputPixelBuffer;
- (bool)autoFramingEnabled;
- (float)autoFramingFOVLimit;
- (bool)autoRestoreManualFramingState;
- (id)auxiliaryStreamCamera;
- (id)cameraInfoByPortType;
- (id)cameraSwitchingDelegate;
- (bool)centerStagePassthrough;
- (int)checkCameraSwitchingWithAuxilaryStreamMetadata:(id)arg1;
- (bool)confineOutputCamera;
- (void)continueRotatingToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (int)finishProcessing;
- (bool)fisheyeEffectEnabled;
- (id)framingSession;
- (id)init;
- (id)inputCamera;
- (id)inputMetadata;
- (struct __CVBuffer { }*)inputPixelBuffer;
- (float)manualFramingDefaultVideoZoomFactor;
- (id)manualFramingStateMetadata;
- (id)metalCommandQueue;
- (bool)oneShotFramingCompleted;
- (bool)orientationCorrectionEnabled;
- (id)outputCamera;
- (bool)outputCameraResetCompleted;
- (struct { int x1; int x2; })outputDimensions;
- (struct __CVBuffer { }*)outputPixelBuffer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })outputROI;
- (int)prepareToProcess:(unsigned int)arg1;
- (int)prewarm;
- (int)process;
- (int)purgeResources;
- (void)resetOutputCamera;
- (int)resetState;
- (bool)rollCorrectionEnabled;
- (void)setAttachMetadataToOutputPixelBuffer:(bool)arg1;
- (void)setAutoFramingEnabled:(bool)arg1;
- (void)setAutoFramingFOVLimit:(float)arg1;
- (void)setAutoRestoreManualFramingState:(bool)arg1;
- (void)setAuxilaryStreamCamera:(id)arg1;
- (void)setCameraInfoByPortType:(id)arg1;
- (void)setCameraSwitchingDelegate:(id)arg1;
- (void)setCenterStagePassthrough:(bool)arg1;
- (void)setConfineOutputCamera:(bool)arg1;
- (void)setFisheyeEffectEnabled:(bool)arg1;
- (void)setInputCamera:(id)arg1;
- (void)setInputMetadata:(id)arg1;
- (void)setInputPixelBuffer:(struct __CVBuffer { }*)arg1;
- (void)setManualFramingDefaultVideoZoomFactor:(float)arg1;
- (void)setMetalCommandQueue:(id)arg1;
- (void)setOrientationCorrectionEnabled:(bool)arg1;
- (void)setOutputCamera:(id)arg1;
- (void)setOutputDimensions:(struct { int x1; int x2; })arg1;
- (void)setOutputPixelBuffer:(struct __CVBuffer { }*)arg1;
- (void)setOutputROI:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRollCorrectionEnabled:(bool)arg1;
- (void)setTuningParameters:(id)arg1;
- (void)setVideoZoomFactor:(float)arg1;
- (int)setup;
- (void)startRotatingFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)tuningParameters;
- (float)videoZoomFactor;
- (struct CGPoint { double x1; double x2; })warpCGPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })warpCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
