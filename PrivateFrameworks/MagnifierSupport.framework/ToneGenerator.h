
@interface ToneGenerator : NSObject {
    AVAudioEngine * _audioEngine;
    NSURL * _audioFileURL;
    AVAudioPCMBuffer * _buffer;
    unsigned long long  _detectionType;
    CHHapticEngine * _hapticEngine;
    bool  _hapticEngineStarted;
    NSObject<OS_dispatch_queue> * _hapticQueue;
    float  _leftBalance;
    AVAudioMixerNode * _mixer;
    float  _pitchFactor;
    AVAudioPlayerNode * _player;
    double  _pulseDuration;
    double  _pulseFrequency;
    float  _rightBalance;
    NSTimer * _timer;
    bool  _useHapticFeedback;
    bool  _useSoundFeedback;
    float  _volume;
}

@property (nonatomic, retain) AVAudioEngine *audioEngine;
@property (nonatomic, retain) NSURL *audioFileURL;
@property (nonatomic, retain) AVAudioPCMBuffer *buffer;
@property (nonatomic) unsigned long long detectionType;
@property (nonatomic, retain) CHHapticEngine *hapticEngine;
@property bool hapticEngineStarted;
@property (nonatomic) float leftBalance;
@property (nonatomic, readonly) float maxPitchFactor;
@property (nonatomic, readonly) double maxPulseFrequency;
@property (nonatomic, readonly) float minPitchFactor;
@property (nonatomic, readonly) double minPulseFrequency;
@property (nonatomic, retain) AVAudioMixerNode *mixer;
@property (nonatomic) float pitchFactor;
@property (nonatomic, retain) AVAudioPlayerNode *player;
@property (nonatomic) double pulseDuration;
@property (nonatomic) double pulseFrequency;
@property (nonatomic) float rightBalance;
@property (nonatomic, retain) NSTimer *timer;
@property (nonatomic) bool useHapticFeedback;
@property (nonatomic) bool useSoundFeedback;
@property (nonatomic) float volume;

- (void).cxx_destruct;
- (id)audioEngine;
- (id)audioFileURL;
- (id)buffer;
- (id)configureAudioEngineWithError:(id*)arg1;
- (id)configureHapticPlayerWithVolume:(float)arg1 duration:(double)arg2 error:(id*)arg3;
- (void)configurePlayerWithPitchFactor:(float)arg1 leftBalance:(float)arg2 rightBalance:(float)arg3 volume:(float)arg4 loop:(bool)arg5;
- (unsigned long long)detectionType;
- (id)hapticEngine;
- (bool)hapticEngineStarted;
- (id)init;
- (float)leftBalance;
- (float)maxPitchFactor;
- (double)maxPulseFrequency;
- (float)minPitchFactor;
- (double)minPulseFrequency;
- (id)mixer;
- (void)pause;
- (float)pitchFactor;
- (void)playHapticsWithVolume:(float)arg1 pulseDuration:(double)arg2;
- (void)playOnePulse;
- (void)playSoundWithPitchFactor:(float)arg1 leftBalance:(float)arg2 rightBalance:(float)arg3 volume:(float)arg4 loop:(bool)arg5;
- (id)player;
- (double)pulseDuration;
- (double)pulseFrequency;
- (float)rightBalance;
- (void)setAudioEngine:(id)arg1;
- (void)setAudioFileURL:(id)arg1;
- (void)setBuffer:(id)arg1;
- (void)setDetectionType:(unsigned long long)arg1;
- (void)setHapticEngine:(id)arg1;
- (void)setHapticEngineStarted:(bool)arg1;
- (void)setLeftBalance:(float)arg1;
- (void)setMixer:(id)arg1;
- (void)setPitchFactor:(float)arg1;
- (void)setPlayer:(id)arg1;
- (void)setPulseDuration:(double)arg1;
- (void)setPulseFrequency:(double)arg1;
- (void)setRightBalance:(float)arg1;
- (void)setTimer:(id)arg1;
- (void)setUseHapticFeedback:(bool)arg1;
- (void)setUseSoundFeedback:(bool)arg1;
- (void)setVolume:(float)arg1;
- (void)startPulse;
- (void)stopPulse;
- (id)timer;
- (bool)useHapticFeedback;
- (bool)useSoundFeedback;
- (float)volume;

@end
