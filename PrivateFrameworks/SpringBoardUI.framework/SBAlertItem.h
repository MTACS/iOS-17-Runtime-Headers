
@interface SBAlertItem : NSObject <BSDescriptionProviding, SAElementIdentifying, SAUILayoutObserving> {
    UIWindowScene * __preferredActivationWindowScene;
    _SBAlertController * _alertController;
    bool  _allowDuringTransitionAnimations;
    bool  _allowInCar;
    bool  _allowInSetup;
    bool  _allowMessageInCar;
    NSArray * _allowedBundleIDs;
    UIImage * _attachmentImage;
    NSString * _contactIdentifier;
    NSString * _contentType;
    bool  _didEverActivate;
    bool  _didEverDeactivate;
    bool  _didPlayPresentationSound;
    UIImage * _headerImage;
    UIImage * _iconImage;
    NSString * _iconImagePath;
    bool  _ignoreIfAlreadyDisplaying;
    bool  _ignoresQuietMode;
    bool  _pendInSetupIfNotAllowed;
    bool  _pendWhileKeyBagLocked;
    unsigned long long  _presentationState;
    bool  _presented;
    bool  _shouldMaskIcon;
    bool  _suppressForKeynote;
    <SAElement> * _systemApertureElement;
}

@property (setter=_setAttachmentImage:, nonatomic, retain) UIImage *_attachmentImage;
@property (nonatomic, readonly) <SAElement> *_existingSystemApertureElement;
@property (setter=_setHeaderImage:, nonatomic, retain) UIImage *_headerImage;
@property (setter=_setIgnoresQuietMode:, nonatomic) bool _ignoresQuietMode;
@property (setter=_setPreferredActivationWindowScene:, nonatomic, retain) UIWindowScene *_preferredActivationWindowScene;
@property (setter=_setPresentationState:, nonatomic) unsigned long long _presentationState;
@property (nonatomic) bool allowDuringTransitionAnimations;
@property (nonatomic) bool allowInCar;
@property (nonatomic) bool allowInSetup;
@property (nonatomic) bool allowMessageInCar;
@property (nonatomic, retain) NSArray *allowedBundleIDs;
@property (nonatomic, readonly, copy) NSString *clientIdentifier;
@property (nonatomic, retain) NSString *contactIdentifier;
@property (nonatomic, retain) NSString *contentType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSString *elementIdentifier;
@property (readonly) unsigned long long hash;
@property (setter=setIconImage:, nonatomic, retain) UIImage *iconImage;
@property (getter=_iconImagePath, nonatomic, retain) NSString *iconImagePath;
@property (nonatomic) bool ignoreIfAlreadyDisplaying;
@property (nonatomic) bool pendInSetupIfNotAllowed;
@property (nonatomic) bool pendWhileKeyBagLocked;
@property (getter=_isPresented, setter=_setPresented:, nonatomic) bool presented;
@property (nonatomic) bool shouldMaskIcon;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressForKeynote;

+ (id)_alertItemsController;
+ (void)activateAlertItem:(id)arg1;

- (void).cxx_destruct;
- (id)_alertController;
- (id)_attachmentImage;
- (void)_clearAlertController;
- (id)_createSystemApertureElement;
- (void)_deactivationCompleted;
- (bool)_didEverActivate;
- (bool)_displayActionButtonOnLockScreen;
- (id)_existingSystemApertureElement;
- (bool)_hasActiveKeyboardOnScreen;
- (id)_headerImage;
- (id)_iconImagePath;
- (bool)_ignoresQuietMode;
- (bool)_isPresented;
- (void)_noteSilencingHardwareButtonPressed;
- (id)_preferredActivationWindowScene;
- (id)_prepareNewAlertControllerWithLockedState:(bool)arg1 requirePasscodeForActions:(bool)arg2;
- (unsigned long long)_presentationState;
- (id)_publicDescription;
- (void)_setAttachmentImage:(id)arg1;
- (void)_setHeaderImage:(id)arg1;
- (void)_setIgnoresQuietMode:(bool)arg1;
- (void)_setPreferredActivationWindowScene:(id)arg1;
- (void)_setPresentationState:(unsigned long long)arg1;
- (void)_setPresented:(bool)arg1;
- (id)_systemApertureElement;
- (id)alertController;
- (void)alertItemDidAppear;
- (void)alertItemDidDisappear;
- (int)alertPriority;
- (bool)allowDuringTransitionAnimations;
- (bool)allowInCar;
- (bool)allowInLoginWindow;
- (bool)allowInSetup;
- (bool)allowLockScreenDismissal;
- (bool)allowMenuButtonDismissal;
- (bool)allowMessageInCar;
- (id)allowedBundleIDs;
- (bool)behavesSuperModally;
- (void)buttonDismissed;
- (id)clientIdentifier;
- (void)configure:(bool)arg1 requirePasscodeForActions:(bool)arg2;
- (id)contactIdentifier;
- (id)contentType;
- (void)deactivate;
- (void)deactivateForButton;
- (void)deactivateForReason:(int)arg1;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)didActivate;
- (void)didDeactivateForReason:(int)arg1;
- (void)didFailToActivate;
- (bool)didPlayPresentationSound;
- (void)dismiss;
- (void)dismiss:(int)arg1;
- (bool)dismissOnLock;
- (bool)dismissesOverlaysOnLockScreen;
- (void)doCleanupAfterDeactivationAnimation;
- (id)elementIdentifier;
- (void)elementLayoutSpecifier:(id)arg1 layoutModeDidChange:(long long)arg2 reason:(long long)arg3;
- (bool)forcesModalAlertAppearance;
- (bool)hideOnClonedDisplay;
- (id)iconImage;
- (bool)ignoreIfAlreadyDisplaying;
- (id)init;
- (id)lockLabel;
- (bool)pendInSetupIfNotAllowed;
- (bool)pendWhileKeyBagLocked;
- (void)performUnlockAction;
- (void)playPresentationSound;
- (void)presentationStateDidChangeFromState:(unsigned long long)arg1 toState:(unsigned long long)arg2;
- (bool)reappearsAfterLock;
- (bool)reappearsAfterUnlock;
- (void)setAllowDuringTransitionAnimations:(bool)arg1;
- (void)setAllowInCar:(bool)arg1;
- (void)setAllowInSetup:(bool)arg1;
- (void)setAllowMessageInCar:(bool)arg1;
- (void)setAllowedBundleIDs:(id)arg1;
- (void)setContactIdentifier:(id)arg1;
- (void)setContentType:(id)arg1;
- (void)setIconImage:(id)arg1;
- (void)setIconImagePath:(id)arg1;
- (void)setIgnoreIfAlreadyDisplaying:(bool)arg1;
- (void)setPendInSetupIfNotAllowed:(bool)arg1;
- (void)setPendWhileKeyBagLocked:(bool)arg1;
- (void)setShouldMaskIcon:(bool)arg1;
- (void)setSuppressForKeynote:(bool)arg1;
- (id)shortLockLabel;
- (bool)shouldMaskIcon;
- (bool)shouldShowInEmergencyCall;
- (bool)shouldShowInLockScreen;
- (id)sound;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (bool)suppressForKeynote;
- (bool)undimsScreen;
- (bool)unlocksScreen;
- (id)visualStyleForAlertControllerStyle:(long long)arg1 traitCollection:(id)arg2 descriptor:(id)arg3;
- (bool)wakeDisplay;
- (void)willActivate;
- (void)willDeactivateForReason:(int)arg1;
- (void)willRelockForButtonPress:(bool)arg1;

@end
