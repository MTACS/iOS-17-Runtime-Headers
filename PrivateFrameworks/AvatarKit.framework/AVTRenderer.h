
@interface AVTRenderer : SCNRenderer <AVTSceneRenderer, SCNSceneRendererDelegate, _SCNSceneCommandBufferStatusMonitor, _SCNSceneRendererDelegateSPI, _SCNSceneRendererResourceManagerMonitor> {
    unsigned long long  _antialiasingMode;
    AVTARMaskRenderer * _arMaskRenderer;
    bool  _arMaskRendererHasFlippedDepth;
    SCNTechnique * _arMaskTechnique;
    AVTAvatar * _avatar;
    SCNNode * _avatarNode;
    bool  _captureImageIsTooDark;
    bool  _enableFaceTrackingLossFeedback;
    bool  _enableReticle;
    AVTAvatarEnvironment * _environment;
    bool  _faceIsTracked;
    AVTFaceTracker * _faceTracker;
    <AVTRendererFaceTrackingDelegate> * _faceTrackingDelegate;
    bool  _isSensorCovered;
    double  _lastFaceTrackerUpdateTimestamp;
    double  _lastFaceTrackerUpdateWithTrackedFaceTimestamp;
    NSLock * _lock;
    bool  _pauseSimulation;
    AVTPresentationConfiguration * _presentationConfiguration;
    bool  _warmingUp;
}

@property (nonatomic) bool arMode;
@property (nonatomic, readonly) AVAudioEngine *audioEngine;
@property (nonatomic, readonly) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (nonatomic, retain) SCNNode *audioListener;
@property (nonatomic) bool autoenablesDefaultLighting;
@property (nonatomic, retain) AVTAvatar *avatar;
@property (nonatomic) unsigned long long avt_antialiasingMode;
@property (nonatomic, readonly) unsigned long long colorPixelFormat;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, readonly) void*context;
@property (nonatomic, readonly) <MTLRenderCommandEncoder> *currentRenderCommandEncoder;
@property (nonatomic, readonly) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentViewport;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long debugOptions;
@property (nonatomic) <SCNSceneRendererDelegate> *delegate;
@property (nonatomic, readonly) unsigned long long depthPixelFormat;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <MTLDevice> *device;
@property (nonatomic, retain) AVTFaceTracker *faceTracker;
@property (nonatomic, copy) NSString *framingMode;
@property (readonly) unsigned long long hash;
@property (getter=isJitteringEnabled, nonatomic) bool jitteringEnabled;
@property (nonatomic) bool loops;
@property (nonatomic, retain) SKScene *overlaySKScene;
@property (nonatomic) bool pauseSimulation;
@property (getter=isPlaying) bool playing;
@property (nonatomic, retain) SCNNode *pointOfView;
@property (nonatomic, retain) AVTPresentationConfiguration *presentationConfiguration;
@property (nonatomic, readonly) unsigned long long renderingAPI;
@property (nonatomic, retain) SCNScene *scene;
@property (nonatomic) double sceneTime;
@property (nonatomic) bool showsStatistics;
@property (nonatomic, readonly) unsigned long long stencilPixelFormat;
@property (readonly) Class superclass;
@property (getter=isTemporalAntialiasingEnabled, nonatomic) bool temporalAntialiasingEnabled;
@property (nonatomic) bool usesReverseZ;
@property (getter=isWarmingUp, nonatomic) bool warmingUp;
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;

+ (id)renderer;

- (void).cxx_destruct;
- (void)__setAvatar:(id)arg1;
- (void)_animateToNoTrackingState;
- (void)_avtSetupWithOptions:(id)arg1;
- (void)_detachAvatarFromRenderer;
- (id)_initWithOptions:(id)arg1 isPrivateRenderer:(bool)arg2 privateRendererOwner:(id)arg3 clearsOnDraw:(bool)arg4 context:(void*)arg5 renderingAPI:(unsigned long long)arg6;
- (void)_renderer:(id)arg1 didApplyAnimationsAtTime:(double)arg2;
- (void)_renderer:(id)arg1 didBuildSubdivDataForHash:(id)arg2 dataProvider:(id /* block */)arg3;
- (id)_renderer:(id)arg1 subdivDataForHash:(id)arg2;
- (void)_renderer:(id)arg1 updateAtTime:(double)arg2;
- (void)_setAvatar:(id)arg1;
- (void)_updatePhysicsWorldForAvatarARScaleAndARMode:(bool)arg1;
- (bool)arMode;
- (id)avatar;
- (void)avatarDidChange;
- (unsigned long long)avt_antialiasingMode;
- (bool)captureImageIsTooDark;
- (id)capturedDepth;
- (void)clearOutAnimationToNoTrackingState;
- (void)crashAppExtensionOrViewService_rdar98130076:(id /* block */)arg1;
- (void)dealloc;
- (bool)enableDepthMask;
- (bool)enableFaceTrackingLossFeedback;
- (bool)enableReticle;
- (bool)faceIsTracked;
- (id)faceTracker;
- (void)faceTracker:(id)arg1 session:(id)arg2 didFailWithError:(id)arg3;
- (void)faceTracker:(id)arg1 sessionInterruptionEnded:(id)arg2;
- (void)faceTracker:(id)arg1 sessionWasInterrupted:(id)arg2;
- (void)faceTrackerDidUpdate:(id)arg1 withARFrame:(id)arg2;
- (id)faceTrackingDelegate;
- (void)fadePuppetToWhite:(float)arg1;
- (id)framingMode;
- (bool)isSensorCovered;
- (bool)isWarmingUp;
- (bool)pauseSimulation;
- (id)presentationConfiguration;
- (void)renderAtTime:(double)arg1 viewport:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 commandBuffer:(id)arg3 passDescriptor:(id)arg4;
- (void)renderWithViewport:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 commandBuffer:(id)arg2 passDescriptor:(id)arg3;
- (void)renderer:(id)arg1 commandBufferDidCompleteWithError:(id)arg2;
- (void)renderer:(id)arg1 didFallbackToDefaultTextureForSource:(id)arg2 message:(id)arg3;
- (void)setArMode:(bool)arg1;
- (void)setAvatar:(id)arg1;
- (void)setAvt_antialiasingMode:(unsigned long long)arg1;
- (void)setCaptureImageIsTooDark:(bool)arg1;
- (void)setCapturedDepth:(id)arg1;
- (void)setEnableDepthMask:(bool)arg1;
- (void)setEnableDepthMask:(bool)arg1 withFlippedDepth:(bool)arg2;
- (void)setEnableFaceTrackingLossFeedback:(bool)arg1;
- (void)setEnableReticle:(bool)arg1;
- (void)setFaceIsTracked:(bool)arg1;
- (void)setFaceTracker:(id)arg1;
- (void)setFaceTrackingDelegate:(id)arg1;
- (void)setFramingMode:(id)arg1;
- (void)setFramingModeForcingPointOfViewUpdate:(id)arg1;
- (void)setPauseSimulation:(bool)arg1;
- (void)setPresentationConfiguration:(id)arg1;
- (void)setSensorCovered:(bool)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)setWarmingUp:(bool)arg1;
- (void)updateProjectionMatrixForARModeIfNeeded:(struct CGSize { double x1; double x2; })arg1;

@end
