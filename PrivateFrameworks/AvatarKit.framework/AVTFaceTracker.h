
@interface AVTFaceTracker : NSObject {
    ARConfiguration * _arConfiguration;
    ARSession * _arSession;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _arSessionLock;
    struct CGSize { 
        double width; 
        double height; 
    }  _cameraImageResolution;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
    }  _cameraIntrinsics;
    long long  _captureVideoOrientation;
    NSURL * _debugRecordingURL;
    NSPointerArray * _delegates;
    bool  _directRetargetingMode;
    bool  _faceIsTracked;
    bool  _faceTrackingPaused;
    AVDepthData * _fallBackDepthData;
    long long  _frame_id;
    long long  _interfaceOrientation;
    bool  _isActive;
    bool  _isSensorCovered;
    double  _lastARFrameTime;
    double  _lastUpdateTimestamp;
    double  _lastUpdateWithTrackedFaceTimestamp;
    bool  _lowLight;
    bool  _mirroredDepthData;
    struct { 
        double refTimestamp; 
        double arDelegateTimestamp; 
    }  _perfPacket;
    bool  _shouldConstrainHeadPose;
    bool  _shouldUseAudioData;
    bool  _skipUpdates;
    double  _timeBetweenARFrame;
    NSLock * _trackingDataLock;
    AVTFaceTrackingInfo * _trackingInfo;
    bool  _trackingIsPaused;
    bool  _wantsPersonSegmentation;
    bool  limitRoll;
}

@property (nonatomic, readonly) double arDelegateTimestamp;
@property (nonatomic, readonly) double arFrameDeltaTime;
@property (nonatomic, readonly) double arFrameTimestamp;
@property (nonatomic, readonly) ARSession *arSession;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } cameraImageResolution;
@property (nonatomic, readonly) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; } cameraIntrinsics;
@property (nonatomic, readonly) long long captureVideoOrientation;
@property (nonatomic) bool directRetargetingMode;
@property (nonatomic, readonly) bool faceIsTracked;
@property (nonatomic, readonly) long long faceTrackingFrameID;
@property (nonatomic, readonly) AVTFaceTrackingInfo *faceTrackingInfo;
@property (getter=faceTrackingIsPaused, nonatomic) bool faceTrackingPaused;
@property (copy) NSURL *faceTrackingRecordingURL;
@property (nonatomic, readonly) AVDepthData *fallBackDepthData;
@property (readonly) double lastUpdateTimestamp;
@property (readonly) double lastUpdateWithTrackedFaceTimestamp;
@property (nonatomic) bool limitRoll;
@property (nonatomic, readonly) bool lowLight;
@property (nonatomic, readonly) bool mirroredDepthData;
@property (nonatomic, readonly) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } rawTransform;
@property (getter=isSensorCovered, nonatomic, readonly) bool sensorCovered;
@property (nonatomic) bool shouldConstrainHeadPose;
@property (nonatomic) bool shouldUseAudioData;
@property (nonatomic) bool skipUpdates;
@property (nonatomic) bool wantsPersonSegmentation;

+ (void)setUsesInternalTrackingPipeline:(bool)arg1;
+ (bool)usesInternalTrackingPipeline;

- (void).cxx_destruct;
- (void)_setupARKitForDebugging:(bool)arg1;
- (void)addDelegate:(id)arg1;
- (double)arDelegateTimestamp;
- (double)arFrameDeltaTime;
- (double)arFrameTimestamp;
- (id)arSession;
- (void)beginQuery;
- (struct CGSize { double x1; double x2; })cameraImageResolution;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })cameraIntrinsics;
- (long long)captureVideoOrientation;
- (void)configurationVideoFormatDidChange:(id)arg1;
- (void)copyTrackingData:(struct { double x1; bool x2; float x3[51]; float x4[51]; float x5[1]; float x6[1]; }*)arg1;
- (void)decreaseFrameRate;
- (bool)directRetargetingMode;
- (void)discardARFrameData;
- (void)endQuery;
- (void)enumerateDelegates:(id /* block */)arg1;
- (bool)faceIsTracked;
- (long long)faceTrackingFrameID;
- (id)faceTrackingInfo;
- (bool)faceTrackingIsPaused;
- (bool)faceTrackingPaused;
- (id)faceTrackingRecordingURL;
- (id)fallBackDepthData;
- (void)increaseFrameRateToMaximum;
- (id)init;
- (long long)interfaceOrientation;
- (bool)isActive;
- (bool)isSensorCovered;
- (double)lastUpdateTimestamp;
- (double)lastUpdateWithTrackedFaceTimestamp;
- (bool)limitRoll;
- (bool)lowLight;
- (bool)mirroredDepthData;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })projectionMatrixForViewportSize:(struct CGSize { double x1; double x2; })arg1 zNear:(double)arg2 zFar:(double)arg3;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })rawTransform;
- (void)removeDelegate:(id)arg1;
- (void)run;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
- (void)sessionInterruptionEnded:(id)arg1;
- (void)sessionWasInterrupted:(id)arg1;
- (void)setDirectRetargetingMode:(bool)arg1;
- (void)setFaceTrackingPaused:(bool)arg1;
- (void)setFaceTrackingRecordingURL:(id)arg1;
- (void)setInterfaceOrientation:(long long)arg1;
- (void)setLimitRoll:(bool)arg1;
- (void)setLowLight:(bool)arg1;
- (void)setSensorCovered:(bool)arg1;
- (void)setShouldConstrainHeadPose:(bool)arg1;
- (void)setShouldUseAudioData:(bool)arg1;
- (void)setSkipUpdates:(bool)arg1;
- (void)setWantsPersonSegmentation:(bool)arg1;
- (void)setupARKit;
- (void)setupARKitForDebugging;
- (bool)shouldConstrainHeadPose;
- (bool)shouldUseAudioData;
- (bool)skipUpdates;
- (void)startRecording;
- (void)stop;
- (void)stopRecording;
- (void)updateWithARFrame:(id)arg1 captureOrientation:(long long)arg2 interfaceOrientation:(long long)arg3 constrainHeadPose:(bool)arg4 mirroredDepthData:(bool)arg5;
- (void)updateWithARFrame:(id)arg1 worldAlignment:(long long)arg2 fallBackDepthData:(id)arg3 captureOrientation:(long long)arg4 interfaceOrientation:(long long)arg5 constrainHeadPose:(bool)arg6 mirroredDepthData:(bool)arg7;
- (bool)wantsPersonSegmentation;

@end
