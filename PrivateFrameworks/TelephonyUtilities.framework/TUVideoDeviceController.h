
@interface TUVideoDeviceController : NSObject <TUVideoDeviceControllerProviderDelegate> {
    <TUFeatureFlags> * _featureFlags;
    bool  _hasBeganRetryingAfterUninitializedClientError;
    bool  _hasRefreshedPreviewAfterError;
    bool  _ignoreStartPreview;
    id /* block */  _previewStartBlock;
    <TUVideoDeviceControllerProvider><TUVideoEffectsProvider> * _provider;
    NSObject<OS_dispatch_queue> * _serialQueue;
    long long  _uninitializedClientRetrySeconds;
    bool  _wantsPreview;
}

@property (nonatomic, readonly, copy) NSArray *availableVideoEffects;
@property (nonatomic) bool cameraBlurEnabled;
@property (getter=isCinematicFramingEnabled, nonatomic, readonly) bool cinematicFramingEnabled;
@property (nonatomic) int currentBackgroundBlurControlMode;
@property (nonatomic, retain) AVCaptureDevice *currentInputDevice;
@property (nonatomic, readonly) bool currentInputIsExternal;
@property (nonatomic, readonly) bool currentInputSupportsCinematicFraming;
@property (nonatomic, readonly) bool currentInputSupportsReactionEffects;
@property (nonatomic, readonly) bool currentInputSupportsStudioLight;
@property (nonatomic, retain) TUVideoEffect *currentVideoEffect;
@property (nonatomic) int currentVideoOrientation;
@property (nonatomic, readonly) <TUFeatureFlags> *featureFlags;
@property (getter=isFollowSystemCameraEnabled, nonatomic) bool followSystemCameraEnabled;
@property (nonatomic, readonly) bool hasAvailableDeskViewCameras;
@property (nonatomic) bool hasBeganRetryingAfterUninitializedClientError;
@property (nonatomic) bool hasRefreshedPreviewAfterError;
@property (getter=shouldIgnoreStartPreview, nonatomic) bool ignoreStartPreview;
@property (nonatomic, readonly, copy) NSArray *inputDevices;
@property (nonatomic, retain) CALayer *localBackLayer;
@property (nonatomic, retain) CALayer *localFrontLayer;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } localScreenContentsRect;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } localScreenLandscapeAspectRatio;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } localScreenPortraitAspectRatio;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } localVideoLandscapeAspectRatio;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } localVideoPortraitAspectRatio;
@property (getter=isPreviewRunning, nonatomic, readonly) bool previewRunning;
@property (nonatomic, copy) id /* block */ previewStartBlock;
@property (nonatomic, readonly) <TUVideoDeviceControllerProvider><TUVideoEffectsProvider> *provider;
@property (getter=isReactionEffectGestureEnabled, nonatomic) bool reactionEffectGestureEnabled;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (getter=isStudioLightEnabled, nonatomic) bool studioLightEnabled;
@property (nonatomic, readonly) bool supportsCameraBlur;
@property (nonatomic) long long uninitializedClientRetrySeconds;
@property (nonatomic) bool wantsPreview;

+ (int)_tuOrientationForVideoOrientation:(int)arg1;
+ (int)_videoOrientationForTUOrientation:(int)arg1;
+ (void)prewarm;

- (void).cxx_destruct;
- (id)availableVideoEffects;
- (bool)cameraBlurEnabled;
- (void)captureDevicesChangedForProvider:(id)arg1;
- (int)currentBackgroundBlurControlMode;
- (id)currentInputDevice;
- (bool)currentInputIsExternal;
- (bool)currentInputSupportsCinematicFraming;
- (bool)currentInputSupportsReactionEffects;
- (bool)currentInputSupportsStudioLight;
- (id)currentVideoEffect;
- (int)currentVideoOrientation;
- (id)debugDescription;
- (void)didPausePreviewForProvider:(id)arg1;
- (void)didStartPreviewForProvider:(id)arg1;
- (void)didStopPreviewForProvider:(id)arg1;
- (id)featureFlags;
- (void)flipCamera;
- (void)getSnapshot;
- (bool)hasAvailableDeskViewCameras;
- (bool)hasBeganRetryingAfterUninitializedClientError;
- (bool)hasRefreshedPreviewAfterError;
- (id)init;
- (id)initWithProvider:(id)arg1 serialQueue:(id)arg2 featureFlags:(id)arg3;
- (id)initWithSerialQueue:(id)arg1;
- (id)inputDevices;
- (bool)isCinematicFramingEnabled;
- (bool)isFollowSystemCameraEnabled;
- (bool)isPreviewRunning;
- (bool)isReactionEffectGestureEnabled;
- (bool)isStudioLightEnabled;
- (id)landscapeScreenAttributes;
- (id)localBackLayer;
- (id)localFrontLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })localScreenContentsRect;
- (struct CGSize { double x1; double x2; })localScreenLandscapeAspectRatio;
- (struct CGSize { double x1; double x2; })localScreenPortraitAspectRatio;
- (struct CGSize { double x1; double x2; })localVideoLandscapeAspectRatio;
- (struct CGSize { double x1; double x2; })localVideoPortraitAspectRatio;
- (void)noteBeginAnimationToPIP;
- (void)noteBeginAnimationToPreview;
- (void)noteEndAnimationToPIP;
- (void)noteEndAnimationToPreview;
- (void)pausePreview;
- (id)portraitScreenAttributes;
- (id /* block */)previewStartBlock;
- (id)provider;
- (void)provider:(id)arg1 cameraBlurEnabledDidChange:(bool)arg2;
- (void)provider:(id)arg1 cameraCinematicFramingAvailabilityDidChange:(bool)arg2;
- (void)provider:(id)arg1 cameraCinematicFramingEnabledDidChange:(bool)arg2;
- (void)provider:(id)arg1 cameraDidBecomeAvailableForUniqueID:(id)arg2;
- (void)provider:(id)arg1 cameraZoomAvailabilityDidChange:(bool)arg2;
- (void)provider:(id)arg1 didChangeLocalCameraUID:(id)arg2;
- (void)provider:(id)arg1 didChangeLocalVideoAttributes:(id)arg2;
- (void)provider:(id)arg1 didGetSnapshot:(id)arg2;
- (void)provider:(id)arg1 didReceiveErrorFromCameraUniqueID:(id)arg2 error:(id)arg3;
- (void)provider:(id)arg1 didReceiveFirstPreviewFrameFromCameraUniqueID:(id)arg2;
- (void)provider:(id)arg1 reactionEffectsEnabledDidChange:(bool)arg2;
- (void)provider:(id)arg1 studioLightEnabledDidChange:(bool)arg2;
- (void)provider:(id)arg1 systemPreferredCameraUIDDidChange:(id)arg2;
- (void)provider:(id)arg1 userPreferredCameraUIDDidChange:(id)arg2;
- (void)rampCameraZoomFactor:(double)arg1 withRate:(double)arg2;
- (void)retryPreviewAfterError;
- (id)serialQueue;
- (void)setCameraBlurEnabled:(bool)arg1;
- (void)setCameraZoomFactor:(double)arg1;
- (void)setCinematicFramingEnabled:(bool)arg1;
- (void)setCurrentBackgroundBlurControlMode:(int)arg1;
- (void)setCurrentInputDevice:(id)arg1;
- (void)setCurrentInputDevice:(id)arg1 isUserPreferred:(bool)arg2;
- (void)setCurrentVideoEffect:(id)arg1;
- (void)setCurrentVideoOrientation:(int)arg1;
- (void)setFollowSystemCameraEnabled:(bool)arg1;
- (void)setHasBeganRetryingAfterUninitializedClientError:(bool)arg1;
- (void)setHasRefreshedPreviewAfterError:(bool)arg1;
- (void)setIgnoreStartPreview:(bool)arg1;
- (void)setLocalBackLayer:(id)arg1;
- (void)setLocalFrontLayer:(id)arg1;
- (void)setLocalPortraitAspectRatio:(struct CGSize { double x1; double x2; })arg1 localLandscapeAspectRatio:(struct CGSize { double x1; double x2; })arg2;
- (void)setPreviewStartBlock:(id /* block */)arg1;
- (void)setReactionEffectGestureEnabled:(bool)arg1;
- (void)setStudioLightEnabled:(bool)arg1;
- (void)setUninitializedClientRetrySeconds:(long long)arg1;
- (void)setWantsPreview:(bool)arg1;
- (bool)shouldIgnoreStartPreview;
- (void)startPreview;
- (void)stopPreview;
- (bool)supportsCameraBlur;
- (long long)uninitializedClientRetrySeconds;
- (bool)wantsPreview;

@end
