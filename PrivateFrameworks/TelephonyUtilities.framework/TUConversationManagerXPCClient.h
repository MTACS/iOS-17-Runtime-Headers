
@interface TUConversationManagerXPCClient : NSObject <TUConversationManagerDataSource, TUConversationManagerXPCClient> {
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _accessorLock;
    NSDictionary * _activityAuthorizedBundleIdentifiers;
    bool  _autoSharePlayEnabled;
    NSDictionary * _conversationsByGroupUUID;
    NSObject<OS_dispatch_queue> * _dataSourceDelegateQueue;
    <TUConversationManagerDataSourceDelegate> * _delegate;
    bool  _hasInitialState;
    bool  _hasRequestedInitialState;
    <TUConversationMediaControllerDataSourceDelegate> * _mediaDelegate;
    NSObject<OS_dispatch_queue> * _queue;
    <TUConversationReactionsControllerDataSourceDelegate> * _reactionsDelegate;
    NSNumber * _screenSharingAvailable;
    NSNumber * _sharePlayAvailable;
    bool  _shouldConnectToHost;
    int  _shouldConnectToken;
    NSXPCConnection * _xpcConnection;
}

@property (nonatomic, readonly) struct os_unfair_lock_s { unsigned int x1; } accessorLock;
@property (nonatomic, readonly, copy) NSSet *activatedConversationLinks;
@property (nonatomic, copy) NSDictionary *activityAuthorizedBundleIdentifiers;
@property (nonatomic) bool autoSharePlayEnabled;
@property (nonatomic, copy) NSDictionary *conversationsByGroupUUID;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dataSourceDelegateQueue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <TUConversationManagerDataSourceDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasInitialState;
@property (nonatomic) bool hasRequestedInitialState;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) NSDictionary *incomingPendingConversationsByGroupUUID;
@property (nonatomic, readonly) bool isScreenSharingAvailable;
@property (nonatomic, readonly) bool isSharePlayAvailable;
@property (nonatomic) <TUConversationMediaControllerDataSourceDelegate> *mediaDelegate;
@property (nonatomic, readonly, copy) NSDictionary *pseudonymsByCallUUID;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) <TUConversationReactionsControllerDataSourceDelegate> *reactionsDelegate;
@property (nonatomic, copy) NSNumber *screenSharingAvailable;
@property (nonatomic, copy) NSNumber *sharePlayAvailable;
@property (nonatomic) bool shouldConnectToHost;
@property (nonatomic) int shouldConnectToken;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSXPCConnection *xpcConnection;

+ (id)asynchronousServer;
+ (id)conversationManagerAllowedClasses;
+ (id)conversationManagerClientXPCInterface;
+ (id)conversationManagerServerXPCInterface;
+ (void)setAsynchronousServer:(id)arg1;
+ (void)setSynchronousServer:(id)arg1;
+ (id)synchronousServer;

- (void).cxx_destruct;
- (void)_invokeCompletionHandler:(id /* block */)arg1;
- (void)_requestInitialStateIfNecessary;
- (void)_requestInitialStateWithCompletionHandler:(id /* block */)arg1;
- (struct os_unfair_lock_s { unsigned int x1; })accessorLock;
- (void)activateConversationNoticeWithActionURL:(id)arg1 bundleIdentifier:(id)arg2;
- (void)activateLink:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)activatedConversationLinks;
- (oneway void)activeParticipant:(id)arg1 addedHighlightToConversation:(id)arg2 highlightIdentifier:(id)arg3 oldHighlightIdentifier:(id)arg4 isFirstAdd:(bool)arg5;
- (oneway void)activeParticipant:(id)arg1 removedHighlightFromConversation:(id)arg2 highlightIdentifier:(id)arg3;
- (id)activityAuthorizedBundleIdentifiers;
- (void)addCollaborationDictionary:(id)arg1 forConversationWithUUID:(id)arg2 fromMe:(bool)arg3;
- (void)addCollaborationIdentifier:(id)arg1 collaborationURL:(id)arg2 cloudKitAppBundleIDs:(id)arg3 forConversationUUID:(id)arg4;
- (void)addDisclosedCollaborationInitiator:(id)arg1 toConversationUUID:(id)arg2;
- (void)addInvitedMemberHandles:(id)arg1 toConversationLink:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)addRemoteMembers:(id)arg1 otherInvitedHandles:(id)arg2 toConversation:(id)arg3;
- (void)addRemoteMembers:(id)arg1 toConversation:(id)arg2;
- (oneway void)addedCollaborationDictionary:(id)arg1 forConversation:(id)arg2;
- (void)approvePendingMember:(id)arg1 forConversation:(id)arg2;
- (id)asynchronousServerWithErrorHandler:(id /* block */)arg1;
- (bool)autoSharePlayEnabled;
- (void)buzzMember:(id)arg1 conversation:(id)arg2;
- (void)checkLinkValidity:(id)arg1 completionHandler:(id /* block */)arg2;
- (oneway void)conversation:(id)arg1 addedMembersLocally:(id)arg2;
- (oneway void)conversation:(id)arg1 appLaunchState:(unsigned long long)arg2 forActivitySession:(id)arg3;
- (oneway void)conversation:(id)arg1 buzzedMember:(id)arg2;
- (oneway void)conversation:(id)arg1 collaborationStateChanged:(long long)arg2 highlightIdentifier:(id)arg3;
- (oneway void)conversation:(id)arg1 didChangeSceneAssociationForActivitySession:(id)arg2;
- (oneway void)conversation:(id)arg1 didChangeStateForActivitySession:(id)arg2;
- (oneway void)conversation:(id)arg1 participant:(id)arg2 addedNotice:(id)arg3;
- (oneway void)conversation:(id)arg1 participant:(id)arg2 didReact:(id)arg3;
- (oneway void)conversation:(id)arg1 participantDidStopReacting:(id)arg2;
- (oneway void)conversation:(id)arg1 receivedActivitySessionEvent:(id)arg2;
- (oneway void)conversation:(id)arg1 screenSharingChangedForParticipant:(id)arg2;
- (void)conversationUpdateMessagesGroupPhoto:(id)arg1;
- (oneway void)conversationUpdatedMessagesGroupPhoto:(id)arg1;
- (id)conversationsByGroupUUID;
- (void)createActivitySession:(id)arg1 onConversation:(id)arg2;
- (id)dataSourceDelegateQueue;
- (void)dealloc;
- (id)delegate;
- (void)endActivitySession:(id)arg1 onConversation:(id)arg2;
- (void)fetchUpcomingNoticeWithCompletionHandler:(id /* block */)arg1;
- (void)generateLinkForConversation:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)generateLinkWithInvitedMemberHandles:(id)arg1 linkLifetimeScope:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)getActiveLinksWithCreatedOnly:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)getInactiveLinkWithCompletionHandler:(id /* block */)arg1;
- (void)getLatestRemoteScreenShareAttributesWithCompletionHandler:(id /* block */)arg1;
- (void)getMessagesGroupDetailsForConversationUUID:(id)arg1 completionHandler:(id /* block */)arg2;
- (oneway void)getMessagesGroupDetailsForMessagesGroupUUID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getNeedsDisclosureOfCollaborationInitiator:(id)arg1 forConversationUUID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleServerDisconnect;
- (bool)hasInitialState;
- (bool)hasRequestedInitialState;
- (id)incomingPendingConversationsByGroupUUID;
- (id)init;
- (void)invalidate;
- (void)invalidateLink:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)isScreenSharingAvailable;
- (bool)isSharePlayAvailable;
- (void)joinConversationWithRequest:(id)arg1;
- (void)kickMember:(id)arg1 conversation:(id)arg2;
- (void)launchApplicationForActivitySessionUUID:(id)arg1 authorizedExternally:(bool)arg2 forceBackground:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)leaveActivitySession:(id)arg1 onConversation:(id)arg2;
- (void)leaveConversationWithUUID:(id)arg1;
- (void)linkSyncStateIncludeLinks:(bool)arg1 WithCompletion:(id /* block */)arg2;
- (void)markCollaborationWithIdentifierOpened:(id)arg1 forConversationUUID:(id)arg2;
- (id)mediaDelegate;
- (oneway void)mediaPrioritiesChangedForConversation:(id)arg1;
- (void)prepareConversationWithUUID:(id)arg1 withHandoffContext:(id)arg2;
- (void)presentDismissalAlertForActivitySession:(id)arg1 onConversation:(id)arg2;
- (id)pseudonymsByCallUUID;
- (id)queue;
- (id)reactionsDelegate;
- (oneway void)receivedTrackedPendingMember:(id)arg1 forConversationLink:(id)arg2;
- (void)refreshActiveConversations;
- (void)registerMessagesGroupUUIDForConversationUUID:(id)arg1;
- (void)registerWithCompletionHandler:(id /* block */)arg1;
- (void)rejectPendingMember:(id)arg1 forConversation:(id)arg2;
- (oneway void)remoteScreenShareAttributesChanged:(id)arg1 isLocallySharing:(bool)arg2;
- (oneway void)remoteScreenShareEndedWithReason:(id)arg1;
- (void)removeCollaborationIdentifier:(id)arg1 forConversationUUID:(id)arg2;
- (void)removeConversationNoticeWithUUID:(id)arg1;
- (void)renewLink:(id)arg1 expirationDate:(id)arg2 reason:(unsigned long long)arg3 completionHandler:(id /* block */)arg4;
- (void)requestScreenSharingPickerForConversationUUID:(id)arg1;
- (void)scheduleConversationLinkCheckInInitial:(bool)arg1;
- (id)screenSharingAvailable;
- (oneway void)screenSharingAvailableChanged:(bool)arg1;
- (void)setActivityAuthorization:(bool)arg1 forBundleIdentifier:(id)arg2;
- (void)setActivityAuthorizedBundleIdentifiers:(id)arg1;
- (void)setAutoSharePlayEnabled:(bool)arg1;
- (void)setConversationsByGroupUUID:(id)arg1;
- (void)setDataSourceDelegateQueue:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDownlinkMuted:(bool)arg1 forRemoteParticipantsInConversation:(id)arg2;
- (void)setGridDisplayMode:(unsigned long long)arg1 conversation:(id)arg2;
- (void)setHasInitialState:(bool)arg1;
- (void)setHasRequestedInitialState:(bool)arg1;
- (void)setIgnoreLetMeInRequests:(bool)arg1 forConversation:(id)arg2;
- (void)setLinkName:(id)arg1 forConversationLink:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setLocalParticipantAudioVideoMode:(unsigned long long)arg1 forConversationUUID:(id)arg2;
- (void)setMediaDelegate:(id)arg1;
- (void)setReactionsDelegate:(id)arg1;
- (void)setScreenEnabled:(bool)arg1 withScreenShareAttributes:(id)arg2 forConversationWithUUID:(id)arg3;
- (void)setScreenSharingAvailable:(id)arg1;
- (void)setSharePlayAvailable:(id)arg1;
- (void)setSharePlayHandedOff:(bool)arg1 onConversationWithUUID:(id)arg2;
- (void)setShouldConnectToHost:(bool)arg1;
- (void)setShouldConnectToken:(int)arg1;
- (void)setSupportsMessagesGroupProviding:(bool)arg1;
- (void)setUsingAirplay:(bool)arg1 onActivitySession:(id)arg2 onConversationWithUUID:(id)arg3;
- (void)setXpcConnection:(id)arg1;
- (id)sharePlayAvailable;
- (oneway void)sharePlayAvailableChanged:(bool)arg1;
- (bool)shouldConnectToHost;
- (int)shouldConnectToken;
- (void)startTrackingCollaborationWithIdentifier:(id)arg1 collaborationURL:(id)arg2 cloudKitAppBundleIDs:(id)arg3 forConversationUUID:(id)arg4 completionHandler:(id /* block */)arg5;
- (id)synchronousServerWithErrorHandler:(id /* block */)arg1;
- (oneway void)updateActivatedConversationLinks:(id)arg1;
- (oneway void)updateActivityAuthorizedBundleIdentifierState:(id)arg1;
- (void)updateConversationWithUUID:(id)arg1 participantPresentationContexts:(id)arg2;
- (oneway void)updateConversationsByGroupUUID:(id)arg1;
- (oneway void)updateIncomingPendingConversationsByGroupUUID:(id)arg1;
- (void)updateLocalParticipantToAVLessWithPresentationMode:(unsigned long long)arg1 forConversationUUID:(id)arg2;
- (void)updateMessagesGroupName:(id)arg1 onConversation:(id)arg2;
- (id)xpcConnection;

@end
