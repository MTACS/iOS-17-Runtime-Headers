
@interface CalculateResult : NSObject {
    bool  _autoScientificNotation;
    NSArray * _conversions;
    NSString * _expression;
    bool  _flexibleFractionDigits;
    bool  _hasStaleCurrencyData;
    CalculateResult * _inputValueAndUnit;
    bool  _isTrivial;
    NSArray * _locales;
    bool  _localizeUnit;
    NSNumberFormatter * _numberFormatter;
    CalculateResult * _parent;
    struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; } * _parseTree;
    struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; } * _resultTree;
    int  _singleUnitID;
    bool  _synchronous;
    NSArray * _terms;
    UnitTypeInfo * _typeInfo;
    int  _unitExponent;
    unsigned long long  _unitFormat;
    unsigned long long  _unitType;
    UnitsInfo * _unitsInfo;
}

@property (nonatomic) bool autoScientificNotation;
@property (nonatomic, readonly) NSArray *conversions;
@property (nonatomic, readonly) NSString *expression;
@property (nonatomic) bool flexibleFractionDigits;
@property (nonatomic, readonly) NSString *formattedExpression;
@property (nonatomic, readonly) NSString *formattedResult;
@property (nonatomic, readonly) bool hasStaleCurrencyData;
@property (nonatomic, readonly) CalculateResult *inputValueAndUnit;
@property (nonatomic, readonly) bool isTrivial;
@property (nonatomic, retain) NSArray *locales;
@property (nonatomic) bool localizeUnit;
@property (nonatomic, retain) NSNumberFormatter *numberFormatter;
@property (nonatomic) CalculateResult *parent;
@property (nonatomic) struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*parseTree;
@property (nonatomic) struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*resultTree;
@property (nonatomic) int singleUnitID;
@property (nonatomic) bool synchronous;
@property (nonatomic, readonly) NSArray *terms;
@property (nonatomic, retain) UnitTypeInfo *typeInfo;
@property (nonatomic, readonly) int unitExponent;
@property (nonatomic) unsigned long long unitFormat;
@property (nonatomic, readonly) unsigned long long unitType;
@property (nonatomic, retain) UnitsInfo *unitsInfo;

+ (id)decimalNumberWithDecimal128:(struct { unsigned long long x1[2]; })arg1;
+ (id)defaultNumberFormatter;
+ (void)preferMeasurementSystemsForLocale:(id)arg1 preferred:(unsigned long long*)arg2 fallback:(unsigned long long*)arg3;
+ (id)resultWithResultTree:(struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)arg1 parseTree:(struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)arg2 locales:(id)arg3 numberFormatter:(id)arg4 unitsInfo:(id)arg5 unitType:(int)arg6 unitExponent:(int)arg7 expression:(id)arg8 isTrivial:(bool)arg9 localizeUnit:(bool)arg10 unitFormat:(unsigned long long)arg11 autoScientificNotation:(bool)arg12 flexibleFractionDigits:(bool)arg13 hasStaleCurrencyData:(bool)arg14;

- (void).cxx_destruct;
- (void)_setConversions:(id)arg1;
- (void)_setExpression:(id)arg1;
- (void)_setInputValueAndUnit:(id)arg1;
- (void)_setTerms:(id)arg1;
- (bool)autoScientificNotation;
- (id)availableConversions;
- (id)bestConversion;
- (long long)compare:(id)arg1;
- (id)conversions;
- (id)conversionsForMetric:(bool)arg1 US:(bool)arg2 UK:(bool)arg3;
- (id)convertedTo:(id)arg1;
- (struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)convertedTree:(id)arg1 needsUpdate:(bool*)arg2;
- (void)dealloc;
- (id)description;
- (void)enableMeasurementSystemsForLocale:(id)arg1 metric:(bool*)arg2 US:(bool*)arg3 UK:(bool*)arg4;
- (id)expression;
- (bool)flexibleFractionDigits;
- (id)formattedExpression;
- (id)formattedResult;
- (bool)hasStaleCurrencyData;
- (id)init;
- (id)inputValueAndUnit;
- (bool)isAcceptableConversion:(struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isTrivial;
- (id)locales;
- (bool)localizeUnit;
- (id)localizedConversions;
- (id)newUnit:(id)arg1;
- (id)numberFormatter;
- (id)parent;
- (struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)parseTree;
- (struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)resultTree;
- (void)setAutoScientificNotation:(bool)arg1;
- (void)setFlexibleFractionDigits:(bool)arg1;
- (void)setLocales:(id)arg1;
- (void)setLocalizeUnit:(bool)arg1;
- (void)setNumberFormatter:(id)arg1;
- (void)setParent:(id)arg1;
- (void)setParseTree:(struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)arg1;
- (void)setResultTree:(struct TreeObject { int x1; int (*x2)(); struct TreeObject {} *x3; struct TreeObject {} *x4; double x5; struct { unsigned long long x_6_1_1[2]; } x6; unsigned long long x7; struct UnitCount { int x_8_1_1; int x_8_1_2; } x8[16]; bool x9; bool x10; bool x11; bool x12; int x13; }*)arg1;
- (void)setSingleUnitID:(int)arg1;
- (void)setSynchronous:(bool)arg1;
- (void)setTypeInfo:(id)arg1;
- (void)setUnitFormat:(unsigned long long)arg1;
- (void)setUnitsInfo:(id)arg1;
- (int)singleUnitID;
- (bool)synchronous;
- (id)terms;
- (id)typeInfo;
- (int)unitExponent;
- (unsigned long long)unitFormat;
- (unsigned long long)unitType;
- (id)unitsInfo;

@end
