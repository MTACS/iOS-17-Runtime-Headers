
@interface VUIPlaybackManager : NSObject <AVPlayerViewControllerDelegatePrivate, UIActivityItemsConfigurationProviding, VUIMultiPlayerViewControllerDelegate, VUINowPlayingFeatureMonitorDelegate, VUINowPlayingTabControllerDelegate, VUIPlaybackContainerViewControllerDelegate, VUIPlaybackTabManagerDelegate, VUIPostPlayViewDelegate, VideosExtrasContextDelegate> {
    VUIPlayer * _activePlayer;
    NSObject<OS_dispatch_queue> * _audioSessionSerialQueue;
    unsigned long long  _autoPlayedVideosCount;
    AVPlayerViewController * _avPlayerViewController;
    VUIPlayer * _backgroundAudioPlayer;
    bool  _configuredPostPlay;
    long long  _dismissalOperation;
    UIAlertController * _errorAlertController;
    AVPlayerViewController * _extrasAVPlayerViewController;
    VideosExtrasContext * _extrasContext;
    VUIPlayer * _extrasPlayer;
    VideosExtrasPresenter * _extrasPresenter;
    VUINowPlayingFeatureMonitor * _featureMonitor;
    NSDate * _initialPlaybackStartDate;
    UIActivityItemsConfiguration * _itemsConfiguration;
    VUIVideoAdvisoryLogoImageDownloader * _logoImageDownloader;
    AVPlayerViewController * _mainAVPlayerViewController;
    VUIPlayer * _mainPlayer;
    UIViewController * _moreInfoCanonicalViewController;
    UIViewController<VUIMultiPlayerDetailsViewController> * _multiPlayerDetailsViewController;
    UIViewController<VUIMultiPlayerViewController> * _multiPlayerViewController;
    NSMutableArray * _multiviewPlaybackInfo;
    UIImage * _photoSensitivityImage;
    UIViewController<VUIPlaybackContainerViewController> * _playbackContainerViewController;
    NSNumber * _postPlayImpressionTime;
    NSString * _postPlayItemId;
    VUIPostPlayView * _postPlayView;
    NSObject<VUIControllerPresenter> * _presentingViewController;
    UIImage * _productPlacementImage;
    VUIProductPlacementView * _productPlacementView;
    UIImage * _ratingImage;
    VUIVideoAdvisoryView * _ratingView;
    bool  _requiresLinearPlayback;
    id  _savedErrorContext;
    NSDictionary * _savedErrorUserInfo;
    bool  _shouldAnimateProductPlacementView;
    bool  _shouldAnimateTVRatingView;
    bool  _shouldDisplayProductPlacementWhenVideoBoundsIsAvailable;
    bool  _shouldDisplayTVRatingWhenVideoBoundsIsAvailable;
    NSLayoutConstraint * _skipBottomConstraint;
    UIButton * _skipButton;
    NSDictionary * _skipButtonImpressionMetrics;
    NSLayoutConstraint * _skipCenterXConstraint;
    NSLayoutConstraint * _skipTrailingConstraint;
    TVPStateMachine * _stateMachine;
    bool  _trackingPlayerViewFrame;
}

@property (nonatomic) VUIPlayer *activePlayer;
@property (nonatomic, readonly) <UIActivityItemsConfigurationReading> *activityItemsConfiguration;
@property (nonatomic, readonly) bool allowedToAutoPlay;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *audioSessionSerialQueue;
@property (nonatomic) unsigned long long autoPlayedVideosCount;
@property (nonatomic, retain) AVPlayerViewController *avPlayerViewController;
@property (nonatomic, retain) VUIPlayer *backgroundAudioPlayer;
@property (nonatomic) bool configuredPostPlay;
@property (nonatomic, readonly) NSObject<TVPMediaItem> *currentMediaItem;
@property (nonatomic, readonly) bool currentPlaylistAllowsCellular;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long dismissalOperation;
@property (nonatomic, retain) UIAlertController *errorAlertController;
@property (nonatomic, retain) AVPlayerViewController *extrasAVPlayerViewController;
@property (nonatomic, retain) VideosExtrasContext *extrasContext;
@property (nonatomic, retain) VUIPlayer *extrasPlayer;
@property (nonatomic, retain) VideosExtrasPresenter *extrasPresenter;
@property (nonatomic, retain) VUINowPlayingFeatureMonitor *featureMonitor;
@property (nonatomic, readonly) NSObject<VUIControllerPresenter> *fullScreenViewControllerForPresentation;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSDate *initialPlaybackStartDate;
@property (nonatomic, readonly) bool isFullscreenPlaybackUIBeingShown;
@property (nonatomic, readonly) bool isPIPing;
@property (nonatomic, readonly) bool isPlaybackUIBeingShown;
@property (nonatomic, readonly) bool isShowingExtras;
@property (nonatomic, retain) UIActivityItemsConfiguration *itemsConfiguration;
@property (nonatomic, retain) VUIVideoAdvisoryLogoImageDownloader *logoImageDownloader;
@property (nonatomic, retain) AVPlayerViewController *mainAVPlayerViewController;
@property (nonatomic, retain) VUIPlayer *mainPlayer;
@property (nonatomic, readonly) long long maxMultiviewPlayerCount;
@property (nonatomic, retain) UIViewController *moreInfoCanonicalViewController;
@property (nonatomic, retain) UIViewController<VUIMultiPlayerDetailsViewController> *multiPlayerDetailsViewController;
@property (nonatomic, retain) UIViewController<VUIMultiPlayerViewController> *multiPlayerViewController;
@property (nonatomic, readonly) NSArray *multiviewIdentifiers;
@property (nonatomic, retain) NSMutableArray *multiviewPlaybackInfo;
@property (nonatomic, readonly) long long multiviewPlayerCount;
@property (nonatomic, readonly) <VUINowPlayingTabControllerDelegate> *nowPlayingControllerDelegate;
@property (nonatomic, retain) UIImage *photoSensitivityImage;
@property (nonatomic, retain) UIViewController<VUIPlaybackContainerViewController> *playbackContainerViewController;
@property (nonatomic, readonly) AVPlayerViewController *playerViewController;
@property (getter=isPostPlayActive, nonatomic, readonly) bool postPlayActive;
@property (nonatomic, retain) NSNumber *postPlayImpressionTime;
@property (nonatomic, retain) NSString *postPlayItemId;
@property (nonatomic, retain) VUIPostPlayView *postPlayView;
@property (nonatomic) NSObject<VUIControllerPresenter> *presentingViewController;
@property (nonatomic, retain) UIImage *productPlacementImage;
@property (nonatomic, retain) VUIProductPlacementView *productPlacementView;
@property (nonatomic, retain) UIImage *ratingImage;
@property (nonatomic, retain) VUIVideoAdvisoryView *ratingView;
@property (nonatomic) bool requiresLinearPlayback;
@property (nonatomic, retain) id savedErrorContext;
@property (nonatomic, retain) NSDictionary *savedErrorUserInfo;
@property (nonatomic) bool shouldAnimateProductPlacementView;
@property (nonatomic) bool shouldAnimateTVRatingView;
@property (nonatomic) bool shouldDisplayProductPlacementWhenVideoBoundsIsAvailable;
@property (nonatomic) bool shouldDisplayTVRatingWhenVideoBoundsIsAvailable;
@property (nonatomic, retain) NSLayoutConstraint *skipBottomConstraint;
@property (nonatomic, retain) UIButton *skipButton;
@property (nonatomic, retain) NSDictionary *skipButtonImpressionMetrics;
@property (nonatomic, retain) NSLayoutConstraint *skipCenterXConstraint;
@property (nonatomic, retain) NSLayoutConstraint *skipTrailingConstraint;
@property (nonatomic, retain) TVPStateMachine *stateMachine;
@property (readonly) Class superclass;
@property (getter=isTrackingPlayerViewFrame, nonatomic) bool trackingPlayerViewFrame;

+ (bool)_isFullScreenPlaybackState:(id)arg1;
+ (bool)_isShowingExtrasState:(id)arg1;
+ (id)downloadDataSource;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_addProductPlacementFeatureFromMediaItem:(id)arg1;
- (void)_addRollsInfoFeaturesFromMediaItem:(id)arg1;
- (void)_addSkipInfoFeaturesFromMediaItem:(id)arg1;
- (void)_addTVRatingFeatureFromMediaItem:(id)arg1;
- (void)_addTappableViewToRemoveSkipButton;
- (void)_addVideoDimmingViewForPostPlay;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_avPlayerViewControllerPresentationDidTimeout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculatePostPlayPipRectForParent:(id)arg1;
- (void)_clearActivityItemsConfiguration;
- (void)_configureStillWatchingFeatureMonitoringIfLivePlayback;
- (void)_currentMediaItemDidChange:(id)arg1;
- (id)_currentlyPlayingMultiviewInfo;
- (id)_deepLinkPlaybackURLForCurrentMediaItem;
- (void)_dismissPostPlayWithSwipe:(id)arg1;
- (void)_donateUserActivityForMediaItem:(id)arg1;
- (void)_downloadProductPlacementImageIfAvailable:(id)arg1;
- (void)_downloadRatingImageIfAvailable:(id)arg1;
- (void)_externalPlaybackTypeDidChange:(id)arg1;
- (void)_handleDismissSkipButtonGesture:(id)arg1;
- (void)_handleTapAwayFromPostPlayGesture:(id)arg1;
- (bool)_isNewPostPlayEnabled;
- (void)_markMainPlayerMediaItemPlayingPictureInPictureMetadataAsActive:(bool)arg1 forAVPlayerViewController:(id)arg2;
- (void)_markMainPlayerMediaItemPostPlayActive:(bool)arg1;
- (bool)_multiviewContainsMediaInfo:(id)arg1;
- (void)_networkReachbilityDidChange:(id)arg1;
- (void)_notifyAVPlayerViewControllerDisplaySize;
- (void)_playbackErrorDidOccur:(id)arg1;
- (void)_playbackStateDidChange:(id)arg1;
- (void)_playerRateDidChange:(id)arg1;
- (void)_postPlayItemSelected:(id)arg1;
- (void)_pushMoreInfoControllerIfNeeded;
- (void)_recordSkipButtonImpressions;
- (void)_registerApplicationNotifications;
- (void)_registerStateMachineHandlers;
- (void)_removeMoreInfoViewControllerIfNeeded;
- (void)_removeTappableViewForSkipButtonIfNeeded;
- (void)_removeVideoDimmingViewForPostPlay;
- (void)_resetAutoPlayBingeWatchingQualifications;
- (void)_setExtrasButtonVisible:(bool)arg1;
- (void)_setupBootstrapPostPlayFeatureMonitorForMediaItem:(id)arg1;
- (void)_setupFeaturesFromMainPlayersCurrentMediaItem;
- (void)_setupInfoTab:(bool)arg1;
- (void)_showOrUpdateAdvisoryViewsIfNeeded;
- (void)_showProductPlacement:(bool)arg1 withImage:(id)arg2 animated:(bool)arg3;
- (void)_showSkipButtonWithTitle:(id)arg1 show:(bool)arg2 animated:(bool)arg3;
- (void)_showStillWatchingAlertFeature:(id)arg1;
- (void)_showTVRating:(bool)arg1 withRatingImage:(id)arg2 photoSensitivityImage:(id)arg3 animated:(bool)arg4;
- (void)_skipButtonTapped:(id)arg1;
- (void)_startPlaybackFromBeginning;
- (void)_unmuteNextAvailableMultiviewPlayer;
- (void)_updateActivityItemsConfigurationWithSharedWatchId:(id)arg1 sharedWatchUrl:(id)arg2 previewMetadata:(id)arg3 mediaItem:(id)arg4;
- (void)_updateMultiviewButtonState;
- (void)_updateRequiresLinearPlayback;
- (void)_updateStopWhenBackgroundedFeatureForApplicationState:(long long)arg1 isFullScreen:(bool)arg2;
- (void)_updateTimeBoundFeature:(id)arg1 animated:(bool)arg2;
- (void)_updateTimeTriggeredFeature:(id)arg1 animated:(bool)arg2;
- (id)activePlayer;
- (id)activityItemsConfiguration;
- (void)addPlaylistToMultiview:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)addPlaylistToMultiview:(id)arg1 atIndex:(long long)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (bool)allowedToAutoPlay;
- (id)audioSessionSerialQueue;
- (void)autoPlayTimerDidCompleteForPostPlayView:(id)arg1;
- (unsigned long long)autoPlayedVideosCount;
- (id)avPlayerViewController;
- (id)backgroundAudioPlayer;
- (void)configureAudioSessionForBackgroundPlayback:(bool)arg1 usingPlaybackCategory:(bool)arg2;
- (bool)configuredPostPlay;
- (id)createPlayerViewController;
- (id)currentMediaItem;
- (bool)currentPlaylistAllowsCellular;
- (id)detailsViewControllerForMultiPlayerViewController:(id)arg1;
- (double)detailsViewHeightForMultiPlayerViewController:(id)arg1;
- (void)dismissPlaybackAnimated:(bool)arg1 leaveGroupActivitySession:(bool)arg2 completion:(id /* block */)arg3;
- (void)dismissPostPlayAnimated:(bool)arg1;
- (long long)dismissalOperation;
- (id)errorAlertController;
- (id)extrasAVPlayerViewController;
- (void)extrasBackButtonPressed;
- (id)extrasContext;
- (void)extrasContext:(id)arg1 extrasVisibilityNeedsUpdate:(bool)arg2;
- (void)extrasContext:(id)arg1 hadFatalError:(id)arg2;
- (void)extrasContextDidLoadMainMenuItems:(id)arg1;
- (void)extrasDoneButtonPressed;
- (void)extrasMenuItemSelected:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)extrasPlayer;
- (id)extrasPresenter;
- (void)extrasRequestReloadWithContext:(id)arg1;
- (void)extrasRequestsMediaPlayback:(id)arg1 isBackground:(bool)arg2;
- (void)extrasRequestsPlaybackStop;
- (id)featureMonitor;
- (void)featureMonitor:(id)arg1 featureDidChangeState:(id)arg2 animated:(bool)arg3;
- (id)fullScreenViewControllerForPresentation;
- (unsigned long long)indexOfMediaItemInMultiviewWithIdentifier:(id)arg1;
- (id)init;
- (id)initialPlaybackStartDate;
- (bool)isFullscreenPlaybackUIBeingShown;
- (bool)isPIPing;
- (bool)isPlaybackUIBeingShown;
- (bool)isPlaylistBeingPresented:(id)arg1;
- (bool)isPostPlayActive;
- (bool)isShowingExtras;
- (bool)isTrackingPlayerViewFrame;
- (id)itemsConfiguration;
- (id)logoImageDownloader;
- (id)mainAVPlayerViewController;
- (id)mainPlayer;
- (long long)maxMultiviewPlayerCount;
- (void)mediaInfoDidChangeTo:(id)arg1 canPlay:(bool)arg2 wasAutoPlayed:(bool)arg3;
- (id)moreInfoCanonicalViewController;
- (id)multiPlayerDetailsViewController;
- (id)multiPlayerViewController;
- (void)multiPlayerViewController:(id)arg1 detailsViewControllerDidAppear:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 detailsViewControllerDidDisappear:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 detailsViewControllerWillAppear:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 detailsViewControllerWillDisappear:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didBeginDropWithMediaInfo:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didCrossSupportedScreenSizeBoundary:(bool)arg2;
- (void)multiPlayerViewController:(id)arg1 didDismissWithPlayerViewController:(id)arg2 withReason:(unsigned long long)arg3;
- (void)multiPlayerViewController:(id)arg1 didDropWithMediaInfo:(id)arg2 overPlayerAtIndex:(long long)arg3;
- (void)multiPlayerViewController:(id)arg1 didEndDropWithMediaInfo:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didEnterFullscreenWithPlayerViewController:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didExitFullscreenWithPlayerViewController:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didPinchPlayerToDismiss:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didRemovePlayer:(id)arg2 atIndex:(long long)arg3;
- (void)multiPlayerViewController:(id)arg1 didSelectPlayerViewController:(id)arg2;
- (void)multiPlayerViewController:(id)arg1 didSwapPlayerViewControllerAtIndex:(long long)arg2 withPlayerAtIndex:(long long)arg3;
- (void)multiPlayerViewController:(id)arg1 willDismissWithPlayerViewController:(id)arg2 withReason:(unsigned long long)arg3;
- (bool)multiviewContainsMediaItemWithIdentifier:(id)arg1;
- (id)multiviewIdentifiers;
- (id)multiviewPlaybackInfo;
- (long long)multiviewPlayerCount;
- (id)nowPlayingControllerDelegate;
- (void)nowPlayingTabControllerMediaInfoDidChangeTo:(id)arg1 canPlay:(bool)arg2 wasAutoPlayed:(bool)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)photoSensitivityImage;
- (id)playbackContainerViewController;
- (void)playbackContainerViewControllerBackgroundPlaybackWillBegin:(id)arg1;
- (void)playbackContainerViewControllerDidAutoPlay:(id)arg1;
- (void)playbackContainerViewControllerDidDisappear:(id)arg1;
- (void)playbackContainerViewControllerDidFinishLoadingPostPlay:(id)arg1;
- (void)playbackContainerViewControllerExitPictureInPicturePressed:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playbackContainerViewControllerPiPFrameForCurrentPlayback:(id)arg1;
- (id)playerViewController;
- (void)playerViewController:(id)arg1 contentViewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg2 withTransitionCoordinator:(id)arg3;
- (id)playerViewController:(id)arg1 displayNameForMediaSelectionOption:(id)arg2;
- (void)playerViewController:(id)arg1 failedToStartPictureInPictureWithError:(id)arg2;
- (void)playerViewController:(id)arg1 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(id /* block */)arg2;
- (id)playerViewController:(id)arg1 targetViewForDismissalAnimationWithProposedTargetView:(id)arg2;
- (void)playerViewController:(id)arg1 willEndFullScreenPresentationWithAnimationCoordinator:(id)arg2;
- (void)playerViewController:(id)arg1 willTransitionToVisibilityOfPlaybackControls:(bool)arg2 withAnimationCoordinator:(id)arg3;
- (void)playerViewControllerDidStartPictureInPicture:(id)arg1;
- (void)playerViewControllerDidStopPictureInPicture:(id)arg1;
- (void)playerViewControllerWillStartPictureInPicture:(id)arg1;
- (void)playerViewControllerWillStopPictureInPicture:(id)arg1;
- (id)postPlayImpressionTime;
- (id)postPlayItemId;
- (id)postPlayView;
- (void)presentExtrasWithURL:(id)arg1 storeID:(id)arg2 actionParams:(id)arg3 fromViewController:(id)arg4 completion:(id /* block */)arg5;
- (void)presentMultiviewWithPlaylists:(id)arg1 fromViewController:(id)arg2 animated:(bool)arg3;
- (void)presentPlaylist:(id)arg1 fromViewController:(id)arg2 dismissalOperation:(long long)arg3 allowsCellular:(bool)arg4 animated:(bool)arg5 completion:(id /* block */)arg6;
- (void)presentPlaylist:(id)arg1 fromViewController:(id)arg2 dismissalOperation:(long long)arg3 allowsCellular:(bool)arg4 animated:(bool)arg5 userInfo:(id)arg6 completion:(id /* block */)arg7;
- (void)presentPlaylist:(id)arg1 fromViewController:(id)arg2 dismissalOperation:(long long)arg3 animated:(bool)arg4 completion:(id /* block */)arg5;
- (id)presentingViewController;
- (id)productPlacementImage;
- (id)productPlacementView;
- (id)ratingImage;
- (id)ratingView;
- (void)removePlaylistFromMultiview:(id)arg1 animated:(bool)arg2;
- (void)replacePlaylistInMultiviewAtIndex:(long long)arg1 withPlaylist:(id)arg2 animated:(bool)arg3;
- (bool)requiresLinearPlayback;
- (id)savedErrorContext;
- (id)savedErrorUserInfo;
- (void)setActivePlayer:(id)arg1;
- (void)setAudioSessionSerialQueue:(id)arg1;
- (void)setAutoPlayedVideosCount:(unsigned long long)arg1;
- (void)setAvPlayerViewController:(id)arg1;
- (void)setBackgroundAudioPlayer:(id)arg1;
- (void)setConfiguredPostPlay:(bool)arg1;
- (void)setDismissalOperation:(long long)arg1;
- (void)setErrorAlertController:(id)arg1;
- (void)setExtrasAVPlayerViewController:(id)arg1;
- (void)setExtrasContext:(id)arg1;
- (void)setExtrasPlayer:(id)arg1;
- (void)setExtrasPresenter:(id)arg1;
- (void)setFeatureMonitor:(id)arg1;
- (void)setInitialPlaybackStartDate:(id)arg1;
- (void)setItemsConfiguration:(id)arg1;
- (void)setLogoImageDownloader:(id)arg1;
- (void)setMainAVPlayerViewController:(id)arg1;
- (void)setMainPlayer:(id)arg1;
- (void)setMoreInfoCanonicalViewController:(id)arg1;
- (void)setMultiPlayerDetailsViewController:(id)arg1;
- (void)setMultiPlayerViewController:(id)arg1;
- (void)setMultiviewPlaybackInfo:(id)arg1;
- (void)setPhotoSensitivityImage:(id)arg1;
- (void)setPlaybackContainerViewController:(id)arg1;
- (void)setPostPlayImpressionTime:(id)arg1;
- (void)setPostPlayItemId:(id)arg1;
- (void)setPostPlayView:(id)arg1;
- (void)setPresentingViewController:(id)arg1;
- (void)setProductPlacementImage:(id)arg1;
- (void)setProductPlacementView:(id)arg1;
- (void)setRatingImage:(id)arg1;
- (void)setRatingView:(id)arg1;
- (void)setRequiresLinearPlayback:(bool)arg1;
- (void)setSavedErrorContext:(id)arg1;
- (void)setSavedErrorUserInfo:(id)arg1;
- (void)setShouldAnimateProductPlacementView:(bool)arg1;
- (void)setShouldAnimateTVRatingView:(bool)arg1;
- (void)setShouldDisplayProductPlacementWhenVideoBoundsIsAvailable:(bool)arg1;
- (void)setShouldDisplayTVRatingWhenVideoBoundsIsAvailable:(bool)arg1;
- (void)setSkipBottomConstraint:(id)arg1;
- (void)setSkipButton:(id)arg1;
- (void)setSkipButtonImpressionMetrics:(id)arg1;
- (void)setSkipCenterXConstraint:(id)arg1;
- (void)setSkipTrailingConstraint:(id)arg1;
- (void)setStateMachine:(id)arg1;
- (void)setTrackingPlayerViewFrame:(bool)arg1;
- (bool)shouldAnimateProductPlacementView;
- (bool)shouldAnimateTVRatingView;
- (bool)shouldDisplayProductPlacementWhenVideoBoundsIsAvailable;
- (bool)shouldDisplayTVRatingWhenVideoBoundsIsAvailable;
- (id)skipBottomConstraint;
- (id)skipButton;
- (id)skipButtonImpressionMetrics;
- (id)skipCenterXConstraint;
- (id)skipTrailingConstraint;
- (void)startPictureInPicture;
- (id)stateMachine;

@end
