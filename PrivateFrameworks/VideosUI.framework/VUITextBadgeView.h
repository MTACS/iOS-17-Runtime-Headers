
@interface VUITextBadgeView : VUIBaseView {
    NSAttributedString * _attributedTitle;
    UIColor * _backgroundColor;
    UIImage * _backgroundImage;
    UIImage * _backgroundImageForMaterialRendering;
    bool  _backgroundImageForMaterialRenderingHasChanged;
    unsigned long long  _badgeKind;
    int  _blendMode;
    <VUITextBadgeViewDelegate> * _delegate;
    NSTimer * _expiryUpdateTimer;
    struct CGSize { 
        double width; 
        double height; 
    }  _glyphSize;
    NSArray * _gradientBgColors;
    UIView * _imageView;
    bool  _isUppercased;
    double  _layerCornerRadius;
    double  _minHeight;
    NSOperationQueue * _operationQueue;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    NSOperation * _pendingOperation;
    VUIRentalExpirationLabel * _rentalExpirationLabel;
    double  _strokeSize;
    UIColor * _tintColor;
}

@property (nonatomic, copy) NSAttributedString *attributedTitle;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic, retain) UIImage *backgroundImage;
@property (nonatomic, retain) UIImage *backgroundImageForMaterialRendering;
@property (nonatomic) bool backgroundImageForMaterialRenderingHasChanged;
@property (nonatomic) unsigned long long badgeKind;
@property (nonatomic) int blendMode;
@property (nonatomic) <VUITextBadgeViewDelegate> *delegate;
@property (nonatomic, retain) NSTimer *expiryUpdateTimer;
@property (nonatomic) struct CGSize { double x1; double x2; } glyphSize;
@property (nonatomic, retain) NSArray *gradientBgColors;
@property (nonatomic, retain) UIView *imageView;
@property (nonatomic) bool isUppercased;
@property (nonatomic) double layerCornerRadius;
@property (nonatomic) double minHeight;
@property (nonatomic, retain) NSOperationQueue *operationQueue;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } padding;
@property (nonatomic, retain) NSOperation *pendingOperation;
@property (nonatomic, retain) VUIRentalExpirationLabel *rentalExpirationLabel;
@property (nonatomic) double strokeSize;
@property (nonatomic, retain) UIColor *tintColor;

+ (bool)_viewBackgroundImageNeedsUpdatingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 currentBackgroundImage:(id)arg2;
+ (id)badgeWithLayout:(id)arg1 existing:(id)arg2;

- (void).cxx_destruct;
- (void)_cancelPendingOperation;
- (void)_configureWithLayout:(id)arg1;
- (void)_imageLoaded;
- (void)_invalidateTimer;
- (void)_redrawTextBadgeWithDuration:(double)arg1;
- (void)_redrawView:(id)arg1 withDuration:(double)arg2;
- (void)_setBackgroundImageForMaterialRendering:(id)arg1;
- (bool)_textBadgeBackgroundImageNeedsUpdating;
- (struct CGSize { double x1; double x2; })_textSize;
- (void)_updateBackgroundImagesWithCompletedOperation:(id)arg1;
- (void)_updateBackgroundMaterialImagesWithBackgroundImageSize:(struct CGSize { double x1; double x2; })arg1 performSynchronously:(bool)arg2 overlayViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)accessibilityLabel;
- (id)accessibilityTitle;
- (id)attributedTitle;
- (id)backgroundColor;
- (id)backgroundImage;
- (id)backgroundImageForMaterialRendering;
- (bool)backgroundImageForMaterialRenderingHasChanged;
- (unsigned long long)badgeKind;
- (int)blendMode;
- (void)dealloc;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)expiryUpdateTimer;
- (struct CGSize { double x1; double x2; })glyphSize;
- (id)gradientBgColors;
- (id)imageView;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAccessibilityElement;
- (bool)isUppercased;
- (double)layerCornerRadius;
- (double)minHeight;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)operationQueue;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (id)pendingOperation;
- (id)rentalExpirationLabel;
- (void)rentalExpirationLabelNeedsRelayout:(id)arg1;
- (void)reset;
- (void)setAttributedTitle:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundImage:(id)arg1;
- (void)setBackgroundImageForMaterialRendering:(id)arg1;
- (void)setBackgroundImageForMaterialRendering:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 overlayViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)setBackgroundImageForMaterialRendering:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 overlayViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 operationQueue:(id)arg4;
- (void)setBackgroundImageForMaterialRenderingHasChanged:(bool)arg1;
- (void)setBadgeKind:(unsigned long long)arg1;
- (void)setBlendMode:(int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpiryUpdateTimer:(id)arg1;
- (void)setGlyphSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setGradientBgColors:(id)arg1;
- (void)setImageView:(id)arg1;
- (void)setIsUppercased:(bool)arg1;
- (void)setLayerCornerRadius:(double)arg1;
- (void)setMinHeight:(double)arg1;
- (void)setOperationQueue:(id)arg1;
- (void)setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPendingOperation:(id)arg1;
- (void)setRentalExpirationLabel:(id)arg1;
- (void)setStrokeSize:(double)arg1;
- (void)setTintColor:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (double)strokeSize;
- (id)tintColor;
- (struct CGSize { double x1; double x2; })vui_layoutSubviews:(struct CGSize { double x1; double x2; })arg1 computationOnly:(bool)arg2;

@end
