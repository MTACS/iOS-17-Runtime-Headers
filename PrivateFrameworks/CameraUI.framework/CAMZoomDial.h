
@interface CAMZoomDial : UIView {
    CAMZoomDialDotsView * __activeDots;
    long long  __backgroundImageJobIdentifier;
    UIImageView * __backgroundView;
    bool  __backgroundViewUpdateNeeded;
    UIView * __contentContainerView;
    UIImageView * __contentMaskView;
    bool  __dotsUpdateNeeded;
    UIView * __focalLengthLabelContainerView;
    NSArray * __focalLengthLabelsLandscape;
    NSArray * __focalLengthLabelsPortrait;
    NSObject<OS_dispatch_queue> * __imageGenerationQueue;
    CAMZoomDialDotsView * __inactiveDots;
    UIView * __labelContainerView;
    NSArray * __labels;
    bool  __labelsUpdateNeeded;
    long long  __maskImageJobIdentifier;
    bool  __maskUpdateNeeded;
    UIView * __needleView;
    long long  __ticksImageJobIdentifier;
    bool  __ticksUpdateNeeded;
    UIImageView * __ticksView;
    double  _angleDeltaForZoomRange;
    double  _contentMaskingHeight;
    double  _contractionDistance;
    bool  _expanded;
    bool  _hideFocalLengthLabels;
    bool  _hideLabels;
    double  _maxAvailableZoomFactor;
    double  _minAvailableZoomFactor;
    long long  _orientation;
    long long  _style;
    double  _zoomFactor;
    NSArray * _zoomFactors;
    NSArray * _zoomPoints;
}

@property (nonatomic, readonly) CAMZoomDialDotsView *_activeDots;
@property (nonatomic, readonly) double _backgroundAlpha;
@property (setter=_setBackgroundImageJobIdentifier:, nonatomic) long long _backgroundImageJobIdentifier;
@property (nonatomic, readonly) UIImageView *_backgroundView;
@property (getter=_isBackgroundViewUpdateNeeded, setter=_setBackgroundViewUpdateNeeded:, nonatomic) bool _backgroundViewUpdateNeeded;
@property (nonatomic, readonly) double _borderStrokeWidth;
@property (nonatomic, readonly) UIView *_contentContainerView;
@property (nonatomic, readonly) UIImageView *_contentMaskView;
@property (getter=_isDotsUpdateNeeded, setter=_setDotsUpdateNeeded:, nonatomic) bool _dotsUpdateNeeded;
@property (nonatomic, readonly) double _focalLengthInsetLandscape;
@property (nonatomic, readonly) double _focalLengthInsetPortrait;
@property (nonatomic, readonly) UIView *_focalLengthLabelContainerView;
@property (setter=_setFocalLengthLabelsLandscape:, nonatomic, retain) NSArray *_focalLengthLabelsLandscape;
@property (setter=_setFocalLengthLabelsPortrait:, nonatomic, retain) NSArray *_focalLengthLabelsPortrait;
@property (nonatomic, readonly) double _fullRadius;
@property (nonatomic, readonly) double _fullRadiusInset;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_imageGenerationQueue;
@property (nonatomic, readonly) CAMZoomDialDotsView *_inactiveDots;
@property (nonatomic, readonly) UIView *_labelContainerView;
@property (nonatomic, readonly) double _labelPaddingForContentSizeCategory;
@property (setter=_setLabels:, nonatomic, retain) NSArray *_labels;
@property (getter=_isLabelsUpdateNeeded, setter=_setLabelsUpdateNeeded:, nonatomic) bool _labelsUpdateNeeded;
@property (setter=_setMaskImageJobIdentifier:, nonatomic) long long _maskImageJobIdentifier;
@property (getter=_isMaskUpdateNeeded, setter=_setMaskUpdateNeeded:, nonatomic) bool _maskUpdateNeeded;
@property (nonatomic, readonly) UIView *_needleView;
@property (nonatomic, readonly) double _radiusDelta;
@property (nonatomic, readonly) double _tickLabelCenterRadialInset;
@property (setter=_setTicksImageJobIdentifier:, nonatomic) long long _ticksImageJobIdentifier;
@property (getter=_isTicksUpdateNeeded, setter=_setTicksUpdateNeeded:, nonatomic) bool _ticksUpdateNeeded;
@property (nonatomic, readonly) UIImageView *_ticksView;
@property (nonatomic, readonly) bool _useDots;
@property (nonatomic, readonly) bool _useTicks;
@property (nonatomic, readonly) NSArray *activeZoomFactorLabels;
@property (nonatomic) double angleDeltaForZoomRange;
@property (nonatomic) double contentMaskingHeight;
@property (nonatomic) double contractionDistance;
@property (nonatomic, readonly) double dialBorderWidth;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } dialCenter;
@property (nonatomic, readonly) double dotCenterInset;
@property (getter=isExpanded, nonatomic) bool expanded;
@property (nonatomic) bool hideFocalLengthLabels;
@property (nonatomic) bool hideLabels;
@property (nonatomic) double maxAvailableZoomFactor;
@property (nonatomic, readonly) double maximumZoomFactor;
@property (nonatomic) double minAvailableZoomFactor;
@property (nonatomic, readonly) double minimumZoomFactor;
@property (nonatomic) long long orientation;
@property (nonatomic, readonly) long long style;
@property (nonatomic) double zoomFactor;
@property (nonatomic, readonly) NSArray *zoomFactors;
@property (nonatomic, retain) NSArray *zoomPoints;

+ (id)_createBackgroundImageForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 dialCenter:(struct CGPoint { double x1; double x2; })arg2 radius:(double)arg3 backgroundAlpha:(double)arg4 borderStrokeWidth:(double)arg5;
+ (id)_createMaskImageWithSize:(struct CGSize { double x1; double x2; })arg1 tickLabelCenterRadialInset:(double)arg2 notchMaskImage:(id)arg3;
+ (id)_createTicksImageForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 dialCenter:(struct CGPoint { double x1; double x2; })arg2 radius:(double)arg3 pixelWidth:(double)arg4 zoomFactors:(id)arg5 minAvailableZoomFactor:(double)arg6 maxAvailableZoomFactor:(double)arg7 signedAngleDeltaForZoomRange:(double)arg8;
+ (double)_normalizedValueForZoomFactor:(double)arg1 min:(double)arg2 max:(double)arg3;
+ (double)_offsetAngleForZoomFactor:(double)arg1 relativeToCurrentZoomFactor:(bool)arg2 currentZoomFactor:(double)arg3 min:(double)arg4 max:(double)arg5 signedAngleDeltaForZoomRange:(double)arg6;
+ (struct CGPoint { double x1; double x2; })_pointForOffsetAngle:(double)arg1 dialCenter:(struct CGPoint { double x1; double x2; })arg2 radius:(double)arg3;

- (void).cxx_destruct;
- (id)_activeDots;
- (double)_backgroundAlpha;
- (long long)_backgroundImageJobIdentifier;
- (id)_backgroundView;
- (double)_borderStrokeWidth;
- (void)_commonCAMZoomDialInitialization;
- (id)_contentContainerView;
- (id)_contentMaskView;
- (id)_createDotImage;
- (struct CGPoint { double x1; double x2; })_dotCenterForOffsetAngle:(double)arg1 assumeExpanded:(bool)arg2;
- (struct CGPoint { double x1; double x2; })_dotCenterForZoomFactor:(double)arg1 assumeExpanded:(bool)arg2 relativeToCurrentZoomFactor:(bool)arg3;
- (double)_focalLengthInsetLandscape;
- (double)_focalLengthInsetPortrait;
- (id)_focalLengthLabelContainerView;
- (id)_focalLengthLabelsLandscape;
- (id)_focalLengthLabelsPortrait;
- (double)_fullRadius;
- (double)_fullRadiusInset;
- (id)_imageGenerationQueue;
- (id)_inactiveDots;
- (void)_invalidateImagesForViewSize;
- (bool)_isBackgroundViewUpdateNeeded;
- (bool)_isDotsUpdateNeeded;
- (bool)_isLabelsUpdateNeeded;
- (bool)_isMaskUpdateNeeded;
- (bool)_isTicksUpdateNeeded;
- (id)_labelContainerView;
- (double)_labelPaddingForContentSizeCategory;
- (double)_labelRotationAngleForOrientation;
- (id)_labels;
- (void)_layoutBackgroundAndContainerWithContentInset:(double)arg1;
- (void)_layoutSubviewsWithDots;
- (void)_layoutSubviewsWithTicks;
- (long long)_maskImageJobIdentifier;
- (id)_needleView;
- (double)_offsetAngleForZoomFactor:(double)arg1 relativeToCurrentZoomFactor:(bool)arg2;
- (double)_offsetAngleForZoomPoint:(id)arg1;
- (struct CGPoint { double x1; double x2; })_pointForOffsetAngle:(double)arg1 radialInset:(double)arg2 assumeExpanded:(bool)arg3;
- (double)_radiusDelta;
- (void)_setBackgroundImageJobIdentifier:(long long)arg1;
- (void)_setBackgroundViewUpdateNeeded:(bool)arg1;
- (void)_setDotsUpdateNeeded:(bool)arg1;
- (void)_setFocalLengthLabelsLandscape:(id)arg1;
- (void)_setFocalLengthLabelsPortrait:(id)arg1;
- (void)_setLabels:(id)arg1;
- (void)_setLabelsUpdateNeeded:(bool)arg1;
- (void)_setMaskImageJobIdentifier:(long long)arg1;
- (void)_setMaskUpdateNeeded:(bool)arg1;
- (void)_setTicksImageJobIdentifier:(long long)arg1;
- (void)_setTicksUpdateNeeded:(bool)arg1;
- (double)_signedAngleDeltaForZoomRange;
- (struct CGPoint { double x1; double x2; })_textCenterForOffsetAngle:(double)arg1 assumeExpanded:(bool)arg2;
- (struct CGPoint { double x1; double x2; })_tickEndpointForOffsetAngle:(double)arg1 isTop:(bool)arg2;
- (double)_tickLabelCenterRadialInset;
- (long long)_ticksImageJobIdentifier;
- (id)_ticksView;
- (void)_updateBackroundImageViewIfNeeded;
- (void)_updateContentIfNeeded;
- (void)_updateDots;
- (void)_updateFocalLengthLabelAlphas;
- (void)_updateFocalLengthLabels;
- (void)_updateLabels;
- (void)_updateLabelsIfNeeded;
- (void)_updateMaskImageIfNeeded;
- (void)_updateMinimizedLabels;
- (void)_updatePortraitFocalLengthLabelAlphas;
- (void)_updateTicksImageIfNeeded;
- (bool)_useDots;
- (bool)_useTicks;
- (id)_zoomPointIndexesForPrioritizedFocalLengthLabels;
- (id)activeZoomFactorLabels;
- (double)angleDeltaForZoomRange;
- (double)contentMaskingHeight;
- (double)contractionDistance;
- (double)dialBorderWidth;
- (struct CGPoint { double x1; double x2; })dialCenter;
- (double)dotCenterInset;
- (bool)hideFocalLengthLabels;
- (bool)hideLabels;
- (id)initWithStyle:(long long)arg1;
- (bool)isExpanded;
- (void)layoutSubviews;
- (double)maxAvailableZoomFactor;
- (double)maximumZoomFactor;
- (double)minAvailableZoomFactor;
- (double)minimumZoomFactor;
- (double)normalizedValueForZoomFactor:(double)arg1;
- (double)offsetAngleForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)offsetAngleForZoomFactor:(double)arg1;
- (long long)orientation;
- (void)setAngleDeltaForZoomRange:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentMaskingHeight:(double)arg1;
- (void)setContractionDistance:(double)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHideFocalLengthLabels:(bool)arg1;
- (void)setHideLabels:(bool)arg1;
- (void)setMaxAvailableZoomFactor:(double)arg1;
- (void)setMinAvailableZoomFactor:(double)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setOrientation:(long long)arg1 animated:(bool)arg2;
- (void)setZoomFactor:(double)arg1;
- (void)setZoomPoints:(id)arg1;
- (long long)style;
- (struct CGPoint { double x1; double x2; })textCenterForZoomFactor:(double)arg1 assumeExpanded:(bool)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (double)zoomFactor;
- (double)zoomFactorForNormalizedValue:(double)arg1;
- (double)zoomFactorForOffsetAngle:(double)arg1;
- (id)zoomFactors;
- (id)zoomPoints;

@end
