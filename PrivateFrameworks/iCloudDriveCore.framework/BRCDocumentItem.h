
@interface BRCDocumentItem : BRCLocalItem <BRCTopLevelShareable> {
    BRCLocalVersion * _currentVersion;
    BRCDesiredVersion * _desiredVersion;
    NSMutableSet * _liveConflictLoserEtags;
    NSData * _liveThumbnailSignature;
    NSMutableSet * _resolvedConflictLoserEtags;
    bool  _shouldAutomaticallyDownloadThumbnail;
    NSString * _syncPausedByBundleID;
    NSNumber * _syncPausedExpireTS;
}

@property (nonatomic, readonly) BRCAliasItem *asBRAlias;
@property (nonatomic, readonly) BRCDirectoryItem *asDirectory;
@property (nonatomic, readonly) BRCDocumentItem *asDocument;
@property (nonatomic, readonly) NSDictionary *conflictLoserState;
@property (nonatomic, readonly) BRCLocalVersion *currentVersion;
@property (nonatomic, readonly) BRCDesiredVersion *desiredVersion;
@property (nonatomic, readonly) unsigned short downloadStatus;
@property (nonatomic, readonly) NSNumber *fileIDForUpload;
@property (nonatomic, readonly) BRCGenerationID *generationIDForUpload;
@property (nonatomic, readonly) bool hasLocalContent;
@property (nonatomic, readonly) bool isAutomaticallyEvictable;
@property (nonatomic, readonly) bool isDownloadRequested;
@property (nonatomic, readonly) bool isDownloadRequestedForThumbnail;
@property (nonatomic, readonly) bool isEvictable;
@property (nonatomic, readonly) bool isVisibleIniCloudDrive;
@property (nonatomic, retain) NSSet *liveConflictLoserEtags;
@property (nonatomic, retain) NSData *liveThumbnailSignature;
@property (nonatomic, readonly) unsigned int queryItemStatus;
@property (nonatomic, readonly) NSSet *resolvedConflictLoserEtags;
@property (nonatomic, readonly) bool shouldAutomaticallyDownloadThumbnail;
@property (nonatomic, readonly) bool shouldBeGreedy;
@property (nonatomic, readonly) bool shouldHaveThumbnail;
@property (nonatomic, readonly) bool shouldTransferThumbnail;
@property (nonatomic, readonly) NSString *syncPausedByBundleID;
@property (nonatomic, readonly) NSNumber *syncPausedExpireTS;
@property (nonatomic, readonly) NSString *unsaltedBookmarkData;
@property (nonatomic, readonly) NSError *uploadError;

+ (id)anyReverseAliasInAppLibrary:(id)arg1 toRelativePath:(id)arg2;
+ (id)anyReverseAliasWithUnsaltedBookmarkData:(id)arg1 inAppLibrary:(id)arg2;
+ (void)autoResumeSyncPausedDocumentsOnTimeoutWithSession:(id)arg1;
+ (bool)isDocumentAutomaticallyEvictableWithExtension:(id)arg1;
+ (bool)isDocumentAutomaticallyEvictableWithName:(id)arg1;
+ (id)nextPausedDocumentBatchEnumeratorWithBundleID:(id)arg1 fromRowID:(unsigned long long)arg2 batchSize:(unsigned int)arg3 session:(id)arg4 db:(id)arg5;
+ (id)reverseAliasEnumeratorWithRelativePath:(id)arg1;
+ (id)reverseAliasEnumeratorWithUnsaltedBookmarkData:(id)arg1 session:(id)arg2;
+ (bool)shouldDocumentBeGreedyWithName:(id)arg1;

- (void).cxx_destruct;
- (bool)_deleteFromDB:(id)arg1 keepAliases:(bool)arg2;
- (id)_filenameOverrideForPath:(id)arg1;
- (id)_initFromPQLResultSet:(id)arg1 session:(id)arg2 db:(id)arg3 error:(id*)arg4;
- (id)_initWithLocalItem:(id)arg1;
- (id)_initWithRelativePath:(id)arg1 parentGlobalID:(id)arg2;
- (id)_initWithServerItem:(id)arg1 dbRowID:(unsigned long long)arg2;
- (bool)_insertInDB:(id)arg1 dbRowID:(unsigned long long)arg2;
- (void)_insertTombstoneForPreviousZoneGlobalID;
- (bool)_isInterestingUpdateForNotifs;
- (void)_markAsDeadTombstoneWithPreviousGlobalID;
- (bool)_needsSyncBubbleRecomputeForError:(id)arg1 origError:(id)arg2;
- (bool)_nukePackageItemsFromDB:(id)arg1;
- (bool)_updateInDB:(id)arg1 diffs:(unsigned long long)arg2;
- (void)_updateLiveConflictLoserFromFSAtPath:(id)arg1;
- (void)_updateReadThrottleIfNeededForRowID:(unsigned long long)arg1 forCreation:(bool)arg2;
- (void)_updateRecursivePropertiesInDB:(id)arg1 dbRowID:(unsigned long long)arg2 diffs:(unsigned long long)arg3;
- (void)_updateUploadJobIfNeededWithDiffs:(unsigned long long)arg1;
- (void)addResolvedConflictLoserEtag:(id)arg1;
- (id)aliasItemID;
- (id)anyReverseAliasInAppLibrary:(id)arg1;
- (void)appDidResolveConflictLoserWithEtag:(id)arg1;
- (id)asDocument;
- (id)asShareableItem;
- (id)baseContentsRecord;
- (bool)changedAtRelativePath:(id)arg1 scanPackage:(bool)arg2;
- (void)clearDesiredVersion;
- (void)clearFromStage;
- (void)clearVersionSignatures:(unsigned long long)arg1 isPackage:(bool)arg2;
- (id)collaborationIdentifierIfComputable;
- (id)conflictLoserState;
- (bool)contentRecordNeedsForceAllFieldsWhenDeadInServerTruth:(bool)arg1;
- (id)contentsRecordID;
- (id)currentVersion;
- (id)descriptionWithContext:(id)arg1;
- (id)desiredVersion;
- (unsigned long long)diffAgainstLocalItem:(id)arg1;
- (unsigned long long)diffAgainstServerItem:(id)arg1;
- (unsigned short)downloadStatus;
- (bool)evictInTask:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)fileIDForUpload;
- (void)forceVersionConflictByClearkingCKInfo;
- (void)forceiWorkConflictEtag:(id)arg1;
- (void)forceiWorkSharingInfoResend;
- (id)generationIDForUpload;
- (void)handleUnknownItemError;
- (bool)hasLocalContent;
- (bool)hasShareIDAndIsOwnedByMe;
- (bool)hasValidCKInfo;
- (bool)isAutomaticallyEvictable;
- (bool)isCrossZoneMoveTombstone;
- (bool)isDocument;
- (bool)isDocumentBeingCopiedToNewZone;
- (bool)isDownloadRequested;
- (bool)isDownloadRequestedForThumbnail;
- (bool)isEvictable;
- (bool)isFault;
- (bool)isPackage;
- (bool)isPausedFromSync;
- (bool)isResumingSync;
- (bool)isShareableItem;
- (bool)isVisibleIniCloudDrive;
- (void)learnItemID:(id)arg1 serverItem:(id)arg2 path:(id)arg3 markLost:(bool)arg4;
- (void)learnThumbnailSignatureFromLiveVersion:(id)arg1;
- (id)liveConflictLoserEtags;
- (id)liveThumbnailSignature;
- (void)markCrossZoneMovedForServerAssetCopyWithParentItem:(id)arg1 path:(id)arg2;
- (void)markDead;
- (void)markForceNeedsSyncUp;
- (void)markForceUpload;
- (void)markItemForgottenByServer;
- (bool)markLatestSyncRequestAcknowledgedInZone:(id)arg1;
- (void)markLatestSyncRequestRejectedInZone:(id)arg1;
- (void)markLiveFromStageWithPath:(id)arg1;
- (void)markNeedsReading;
- (void)markNeedsUploadOrSyncingUp;
- (void)markOverQuotaWithError:(id)arg1;
- (void)markUploadedWithRecord:(id)arg1;
- (bool)pauseFromSyncWithTimeout:(double)arg1 forBundleID:(id)arg2 error:(id*)arg3;
- (unsigned int)queryItemStatus;
- (void)removeLiveConflictLoserEtag:(id)arg1;
- (id)resolvedConflictLoserEtags;
- (void)resumeSyncComplete;
- (bool)resumeSyncForBundleID:(id)arg1 dropLocalChanges:(bool)arg2 error:(id*)arg3;
- (id)reverseAliasEnumerator;
- (void)setLiveConflictLoserEtags:(id)arg1;
- (void)setLiveThumbnailSignature:(id)arg1;
- (id)setOfAppLibraryIDsWithReverseAliases;
- (bool)shouldAutomaticallyDownloadThumbnail;
- (bool)shouldBeGreedy;
- (bool)shouldHaveThumbnail;
- (bool)shouldTransferThumbnail;
- (void)stageFaultForCreation:(bool)arg1 name:(id)arg2 size:(id)arg3 isPackage:(bool)arg4;
- (void)stageFaultForCreation:(bool)arg1 serverItem:(id)arg2;
- (bool)startDownloadInTask:(id)arg1 options:(unsigned long long)arg2 etagIfLoser:(id)arg3 stageFileName:(id)arg4 error:(id*)arg5;
- (bool)supportsServerSideAssetCopies;
- (id)syncContextUsedForTransfers;
- (id)syncPausedExpireTS;
- (void)updateContentsCKInfoAndDeviceIDFromServerItem:(id)arg1;
- (int)updateDesiredVersionWithServerItem:(id)arg1 diffs:(unsigned long long)arg2 options:(unsigned int)arg3 needsSave:(bool*)arg4;
- (int)updateDesiredVersionWithServerItem:(id)arg1 options:(unsigned int)arg2 needsSave:(bool*)arg3;
- (bool)updateFromFSAtPath:(id)arg1 parentGlobalID:(id)arg2;
- (bool)updateLocationAndMetaFromFSAtPath:(id)arg1 parentGlobalID:(id)arg2;
- (void)updateVersionMetadataFromServerItem:(id)arg1 preventVersionDiffs:(bool)arg2;
- (bool)updateXattrInfoFromPath:(id)arg1 error:(id*)arg2;
- (id)uploadError;
- (bool)validateLoggingToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;

@end
