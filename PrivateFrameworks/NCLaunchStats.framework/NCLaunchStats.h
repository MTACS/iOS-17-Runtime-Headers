
@interface NCLaunchStats : NSObject {
    NSMutableDictionary * _appUpdateTimes;
    NSMutableDictionary * _appsRequestingRefresh;
    id /* block */  _asyncRecommendHandler;
    NSSet * _bootstrapWidgetIds;
    _DASActivity * _bootstrapWidgetPrewarmActivity;
    _DKPredictionTimeline * _bootstrapWidgetTimeline;
    bool  _defaultRequiresNetwork;
    unsigned long long  _defaultSchedulingPriority;
    _DASActivity * _historyDeletionActivity;
    NSObject<OS_os_log> * _ncLog;
    _DKPredictionTimeline * _predictionTimeline;
    _DASActivity * _predictionUpdateActivity;
    _DKPredictor * _predictor;
    <_DASActivityScheduler> * _scheduler;
    <_DKKnowledgeSaving><_DKKnowledgeDeleting><_DKKnowledgeQuerying> * _store;
    NSObject<OS_dispatch_queue> * _syncQueue;
    _DASActivity * _widgetPrewarmActivity;
    _DKEventStream * _widgetStream;
    NSMutableDictionary * _widgetViewTime;
    int  appSpecificTriggerToken;
    bool  backgroundAppRefreshSwitchedOn;
    int  classCLockedToken;
    int  generatePredictionToken;
    bool  isClassCLocked;
    double  kTimeGuardBand;
    NSMutableDictionary * launchTracker;
    long long  numPrewarmedLaunches;
    long long  numRepeatedPrewarms;
    int  predictedWidgetsToken;
    NSMutableDictionary * prewarmDurationTracker;
    NSMutableDictionary * prewarmTimeTracker;
}

@property (nonatomic, retain) NSMutableDictionary *appUpdateTimes;
@property (nonatomic, retain) NSMutableDictionary *appsRequestingRefresh;
@property (nonatomic, copy) id /* block */ asyncRecommendHandler;
@property (nonatomic, retain) NSSet *bootstrapWidgetIds;
@property (nonatomic, retain) _DASActivity *bootstrapWidgetPrewarmActivity;
@property (nonatomic, retain) _DKPredictionTimeline *bootstrapWidgetTimeline;
@property (nonatomic) bool defaultRequiresNetwork;
@property (nonatomic) unsigned long long defaultSchedulingPriority;
@property (nonatomic, retain) _DASActivity *historyDeletionActivity;
@property (nonatomic, retain) NSObject<OS_os_log> *ncLog;
@property (nonatomic, retain) _DKPredictionTimeline *predictionTimeline;
@property (nonatomic, retain) _DASActivity *predictionUpdateActivity;
@property (nonatomic, retain) _DKPredictor *predictor;
@property (nonatomic, retain) <_DASActivityScheduler> *scheduler;
@property (nonatomic, retain) <_DKKnowledgeSaving><_DKKnowledgeDeleting><_DKKnowledgeQuerying> *store;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *syncQueue;
@property (nonatomic, retain) _DASActivity *widgetPrewarmActivity;
@property (nonatomic, retain) _DKEventStream *widgetStream;
@property (nonatomic, retain) NSMutableDictionary *widgetViewTime;

+ (double)minTimeBetweenRefreshes;
+ (double)minTimeBootstrappingRandomizationSeed;
+ (void)scheduleDeletionActivity:(id)arg1 store:(id)arg2 stream:(id)arg3;

- (void).cxx_destruct;
- (id)appUpdateTimes;
- (id)appsRequestingRefresh;
- (id /* block */)asyncRecommendHandler;
- (id)bootstrapStartAfterDate:(id)arg1;
- (id)bootstrapWidgetIds;
- (id)bootstrapWidgetPrewarmActivity;
- (id)bootstrapWidgetTimeline;
- (bool)canUpdateWidgetsUnsafe;
- (void)cancelRequestedRefreshForWidget:(id)arg1;
- (void)dealloc;
- (bool)defaultRequiresNetwork;
- (unsigned long long)defaultSchedulingPriority;
- (id)earliestRequestedRefresh:(id)arg1 atDate:(id)arg2;
- (void)endEvent:(id)arg1;
- (id)historyDeletionActivity;
- (bool)immediateUpdatesAllowedForWidgetUnsafe:(id)arg1;
- (void)incrementOccurrencesForKey:(id)arg1 byCount:(long long)arg2;
- (id)init;
- (void)initAfterClassCUnlocked;
- (id)initWithKnowledgeStore:(id)arg1;
- (id)initWithKnowledgeStore:(id)arg1 defaultSchedulingPriority:(unsigned long long)arg2 defaultRequiresNetwork:(bool)arg3;
- (id)ncLog;
- (id)nextPredictedRefreshDate:(id)arg1 afterDate:(id)arg2;
- (void)preWarmHasEnded:(id)arg1 withResult:(unsigned long long)arg2 withTriggerType:(int)arg3 withSequence:(unsigned long long)arg4;
- (void)preWarmHasStarted:(id)arg1 withResult:(unsigned long long)arg2 withTriggerType:(int)arg3 withSequence:(unsigned long long)arg4;
- (id)predictedWidgetUsage;
- (id)predictedWidgetsForDate:(id)arg1 withTimeline:(id)arg2;
- (id)predictionTimeline;
- (id)predictionUpdateActivity;
- (id)predictor;
- (void)recordOccurrenceForKey:(id)arg1;
- (void)recordPrewarmStatisticsRaw:(id)arg1;
- (void)requestRefreshForWidget:(id)arg1 afterDate:(id)arg2;
- (void)scheduleBootstrapWidgetRefresh;
- (void)schedulePredictionUpdateBeforeDate:(id)arg1;
- (void)scheduleWidgetRefresh:(id)arg1 withRequestedRefreshes:(id)arg2;
- (void)scheduleWidgetRefresh:(id)arg1 withRequestedRefreshes:(id)arg2 cancelExisting:(bool)arg3;
- (id)scheduler;
- (void)setAppUpdateTimes:(id)arg1;
- (void)setAppsRequestingRefresh:(id)arg1;
- (void)setAsyncRecommendHandler:(id /* block */)arg1;
- (void)setBootstrapWidgetIDs:(id)arg1;
- (void)setBootstrapWidgetIds:(id)arg1;
- (void)setBootstrapWidgetPrewarmActivity:(id)arg1;
- (void)setBootstrapWidgetTimeline:(id)arg1;
- (void)setDefaultRequiresNetwork:(bool)arg1;
- (void)setDefaultSchedulingPriority:(unsigned long long)arg1;
- (void)setHistoryDeletionActivity:(id)arg1;
- (void)setNCLaunchRecommendationHandler:(id /* block */)arg1;
- (void)setNCLaunchRecommendationHandlerWithCompletion:(id /* block */)arg1;
- (void)setNcLog:(id)arg1;
- (void)setPredictionTimeline:(id)arg1;
- (void)setPredictionUpdateActivity:(id)arg1;
- (void)setPredictor:(id)arg1;
- (void)setScheduler:(id)arg1;
- (void)setStore:(id)arg1;
- (void)setSyncQueue:(id)arg1;
- (void)setWidgetPrewarmActivity:(id)arg1;
- (void)setWidgetStream:(id)arg1;
- (void)setWidgetViewTime:(id)arg1;
- (void)startEvent:(id)arg1;
- (id)store;
- (id)syncQueue;
- (void)unprotectedRemoveAllRequestsBeforeDate:(id)arg1;
- (void)unprotectedRemoveRequestsForWidget:(id)arg1 beforeDate:(id)arg2;
- (void)updateBARSwitch;
- (void)updateBootstrapWidgetsAtDate:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)updateWidgetsAtDate:(id)arg1 withTimeline:(id)arg2 withCompletion:(id /* block */)arg3;
- (id)widgetPrewarmActivity;
- (id)widgetStream;
- (id)widgetViewTime;
- (id)widgetsToRefreshAtDate:(id)arg1 withTimeline:(id)arg2;

@end
