
@interface MANode : NSObject <KGNode, MAElement, NSCopying> {
    MAGraphReference * _graphReference;
    unsigned long long  _identifier;
    <MANodeImplementationProtocol> * _implementation;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned short domain;
@property (nonatomic, readonly) <MAGraphProxy> *graph;
@property (nonatomic, retain) MAGraphReference *graphReference;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long identifier;
@property (nonatomic, retain) <MANodeImplementationProtocol> *implementation;
@property (nonatomic, readonly, copy) NSString *label;
@property (nonatomic, readonly, copy) NSSet *labels;
@property (nonatomic, readonly, copy) NSDictionary *properties;
@property (readonly) Class superclass;
@property (nonatomic, readonly) float weight;

- (void).cxx_destruct;
- (id)allEdges;
- (id)anyEdgeFromNode:(id)arg1;
- (id)anyEdgeOfType:(unsigned long long)arg1 withLabel:(id)arg2 domain:(unsigned short)arg3;
- (id)anyEdgeOfType:(unsigned long long)arg1 withNode:(id)arg2;
- (id)anyEdgeTowardNode:(id)arg1;
- (id)anyEdgeWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)anyEdgeWithNode:(id)arg1;
- (id)anyNeighborNodeThroughEdgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 domain:(unsigned short)arg3;
- (id)anyNeighborNodeThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)associatedNodesForRemoval;
- (id)changingPropertiesWithProperties:(id)arg1;
- (bool)conformsToNodeSchema:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)countOfEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)description;
- (unsigned long long)edgesCount;
- (id)edgesForLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)edgesFromNode:(id)arg1;
- (id)edgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 domain:(unsigned short)arg3;
- (id)edgesOfType:(unsigned long long)arg1 withNode:(id)arg2;
- (id)edgesTowardNode:(id)arg1;
- (id)edgesWithNode:(id)arg1;
- (void)enumerateEdgesInDomains:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesOfType:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 domain:(unsigned short)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateEdgesOfType:(unsigned long long)arg1 withNode:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateEdgesWithDomains:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateInEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborEdgesAndNodesThroughEdgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 inDomain:(unsigned short)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateNeighborEdgesAndNodesThroughEdgesWithDomains:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateNeighborEdgesAndNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateNeighborEdgesAndNodesThroughInEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborEdgesAndNodesThroughOutEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborEdgesAndNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborNodesThroughEdgesOfType:(unsigned long long)arg1 matchingFilter:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateNeighborNodesThroughEdgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 inDomain:(unsigned short)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateNeighborNodesThroughEdgesWithDomains:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateNeighborNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateNeighborNodesThroughInEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborNodesThroughOutEdgesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborNodesUsingBlock:(id /* block */)arg1;
- (void)enumerateNeighborNodesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateOutEdgesUsingBlock:(id /* block */)arg1;
- (void)enumeratePropertiesUsingBlock:(id /* block */)arg1;
- (void)enumerateSiblingNodesThroughEdgesWithDomains:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateSiblingNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (id)graph;
- (id)graphReference;
- (bool)hasEdge:(id)arg1 isIn:(bool*)arg2;
- (bool)hasEdgeFromNode:(id)arg1;
- (bool)hasEdgeTowardNode:(id)arg1;
- (bool)hasEdgeWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (bool)hasEdgeWithNode:(id)arg1;
- (bool)hasEqualPropertiesToNode:(id)arg1;
- (bool)hasProperties;
- (bool)hasProperties:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)identifier;
- (id)implementation;
- (unsigned long long)inEdgesCount;
- (id)init;
- (id)initWithIdentifier:(unsigned long long)arg1 labels:(id)arg2 properties:(id)arg3;
- (id)initWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToNode:(id)arg1;
- (bool)isIdentifiedByProperties:(id)arg1;
- (bool)isOrphan;
- (bool)isSameNodeAsNode:(id)arg1;
- (bool)isUnique;
- (id)labels;
- (bool)matchesNode:(id)arg1 includingProperties:(bool)arg2;
- (unsigned long long)memoryFootprint:(id)arg1;
- (id)neighborNodes;
- (id)neighborNodesThroughEdgesOfType:(unsigned long long)arg1 withLabel:(id)arg2 domain:(unsigned short)arg3;
- (id)neighborNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)neighborNodesThroughInEdges;
- (id)neighborNodesThroughOutEdges;
- (id)neighborNodesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (unsigned long long)outEdgesCount;
- (id)properties;
- (unsigned long long)propertiesCount;
- (id)propertyDictionary;
- (id)propertyForKey:(id)arg1;
- (id)propertyForKey:(id)arg1 kindOfClass:(Class)arg2;
- (id)propertyKeys;
- (void)resolveIdentifier:(unsigned long long)arg1;
- (id)resolvedNode;
- (void)setGraphReference:(id)arg1;
- (void)setIdentifier:(unsigned long long)arg1;
- (void)setImplementation:(id)arg1;
- (void)setShouldStoreResolvedNode;
- (id)shortDescription;
- (id)shortestPathToNode:(id)arg1 directed:(bool)arg2;
- (id)siblingNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)visualString;
- (id)visualStringWithName:(id)arg1;
- (id)visualStringWithName:(id)arg1 andPropertyKeys:(id)arg2;

@end
