
@interface HTPrefs : NSObject {
    struct __CFString { } * __htDomain;
    struct __CFString { } * __htTaskingDomain;
    NSDictionary * __installedHTProfileDict;
    bool  __isInternalNoOverride;
    NSObject<OS_dispatch_queue> * __prefsQueue;
    NSString * __profilePath;
    double  _appActivationLoggingCPUUtilizationThresholdMSec;
    bool  _appActivationLoggingEnabled;
    unsigned int  _appActivationLoggingMaxActivationLimit;
    bool  _appLaunchMonitoringEnabled;
    NSString * _automationGroup;
    unsigned int  _badDayEnablementDurationDays;
    unsigned long long  _badDayEnablementForHangDurationMSec;
    unsigned int  _badDayEnablementForLogCount;
    unsigned int  _badDayEnablementForPreviousDays;
    unsigned int  _badDayEnablementMinimumBreakDurationDays;
    double  _badDaySecondsBetweenLastEnablementAndReferenceDate;
    bool  _customerModeEnabled;
    bool  _enableLoggingForPoster;
    bool  _enableLoggingForWidgetRenderer;
    NSString * _enablementPrefix;
    bool  _eplEnabled;
    bool  _eplEnabledProfile;
    double  _eplTimeoutTimestampSec;
    NSString * _experimentGroup;
    int  _fenceHangDailyLogLimit;
    bool  _fenceTrackingEnabled;
    bool  _forceQuitDetectionEnabled;
    unsigned int  _forceQuitDetectionThresholdMSec;
    unsigned long long  _hangWaitTimeoutDurationMSec;
    bool  _hangtracerDaemonEnabled;
    bool  _hasInternalSettings;
    bool  _htTailspinEnabled;
    bool  _hudEnabled;
    unsigned int  _hudThresholdMSec;
    bool  _isCarryDevice;
    bool  _isInternal;
    bool  _keepTailspinsLegacy;
    bool  _memoryLoggingEnabled;
    unsigned int  _memoryLoggingIntervalSec;
    bool  _pdseAllowEnableTailspin;
    bool  _pdseAppLaunchKillSwitch;
    int  _pdseAppLaunchPeriodDays;
    bool  _pdseCATailspinKillSwitch;
    int  _pdseCATailspinPeriodDays;
    bool  _pdseHTBadDayKillSwitch;
    int  _pdseHTPeriodDays;
    bool  _pdseHTRateOnlyKillSwitch;
    int  _pdseHTRateOnlyPeriodDays;
    bool  _pdseHTThirdPartyKillSwitch;
    int  _pdseHTThirdPartyNoLogUploadPeriodDays;
    int  _pdseHTThirdPartyPeriodDays;
    bool  _pdseHangTracerKillSwitch;
    bool  _pdseSentryKillSwitch;
    int  _pdseSentryPeriodDays;
    bool  _pdseWorkflowResponsivenessKillSwitch;
    int  _pdseWorkflowResponsivenessPeriodDays;
    struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; } * _prefInitList;
    unsigned long long  _reportPeriodMATU;
    int  _runLoopHangDailyLogLimit;
    int  _runLoopHangPerPeriodLogLimit;
    int  _runLoopLongHangDailyLogLimit;
    int  _runLoopMicroHangDailyLogLimit;
    unsigned long long  _runloopHangDurationThresholdMSec;
    double  _runloopHangPercentHeavyLogs;
    int  _runloopHangThirdPartyDailyLogLimit;
    unsigned long long  _runloopHangThirdPartyDurationThresholdMSec;
    unsigned long long  _runloopHangTimeoutDurationMSec;
    unsigned long long  _runloopLongHangDurationThresholdMSec;
    double  _samplingPercentForMicroHangs;
    unsigned long long  _savedTailspinMaxMB;
    bool  _shouldAllowSentryEnablement;
    bool  _shouldAllowWorkflowResponsivenessEnablement;
    bool  _shouldCollectOSSignposts;
    bool  _shouldCollectOSSignpostsDeferred;
    bool  _shouldCompressSavedTailspins;
    bool  _shouldIncludeDiskInfo;
    bool  _shouldIncludeDisplayData;
    bool  _shouldIncludeNetworkState;
    bool  _shouldPostHTPrefsChangedNotification;
    bool  _shouldSaveTailspins;
    bool  _shouldUploadToDiagPipe;
    int  _signpostMonitoringDailyLogLimit;
    bool  _signpostMonitoringEnabled;
    int  _signpostMonitoringPerPeriodLogLimit;
    int  _slowAppActivationDailyLogLimit;
    int  _slowAppActivationPerAppMaxLogLimit;
    bool  _slowAppActivationTailspinEnabled;
    unsigned long long  _slowAppActivationThresholdMSec;
    unsigned long long  _springBoardHangIORegGPUDumpTimeoutMSec;
    NSString * _tailspinSaveFormat;
    NSString * _thirdPartyDevBootSessionUUID;
    bool  _thirdPartyDevHangHUDEnabled;
    NSArray * _thirdPartyDevPreferredLanguages;
    bool  _thirdPartyRunLoopHangLogsEnabled;
    int  _workflowResponsivenessDailyLogLimit;
    bool  _workflowResponsivenessEnabled;
    int  _workflowResponsivenessPerPeriodLogLimit;
}

@property struct __CFString { }*_htDomain;
@property struct __CFString { }*_htTaskingDomain;
@property (retain) NSDictionary *_installedHTProfileDict;
@property bool _isInternalNoOverride;
@property (retain) NSObject<OS_dispatch_queue> *_prefsQueue;
@property (retain) NSString *_profilePath;
@property (readonly) double appActivationLoggingCPUUtilizationThresholdMSec;
@property (readonly) bool appActivationLoggingEnabled;
@property (readonly) unsigned int appActivationLoggingMaxActivationLimit;
@property (readonly) bool appLaunchMonitoringEnabled;
@property (retain) NSString *automationGroup;
@property (readonly) unsigned int badDayEnablementDurationDays;
@property (readonly) unsigned long long badDayEnablementForHangDurationMSec;
@property (readonly) unsigned int badDayEnablementForLogCount;
@property (readonly) unsigned int badDayEnablementForPreviousDays;
@property (readonly) unsigned int badDayEnablementMinimumBreakDurationDays;
@property (readonly) double badDaySecondsBetweenLastEnablementAndReferenceDate;
@property (readonly) bool customerModeEnabled;
@property bool enableLoggingForPoster;
@property bool enableLoggingForWidgetRenderer;
@property (readonly) NSString *enablementPrefix;
@property (readonly) bool eplEnabled;
@property (readonly) bool eplEnabledProfile;
@property (readonly) double eplTimeoutTimestampSec;
@property (retain) NSString *experimentGroup;
@property (readonly) int fenceHangDailyLogLimit;
@property (readonly) bool fenceTrackingEnabled;
@property (readonly) bool forceQuitDetectionEnabled;
@property (readonly) unsigned int forceQuitDetectionThresholdMSec;
@property (readonly) unsigned long long hangWaitTimeoutDurationMSec;
@property (readonly) bool hangtracerDaemonEnabled;
@property (readonly) bool hasInternalSettings;
@property (readonly) bool htTailspinEnabled;
@property (readonly) bool hudEnabled;
@property (readonly) unsigned int hudThresholdMSec;
@property (readonly) bool isCarryDevice;
@property (readonly) bool isInternal;
@property bool keepTailspinsLegacy;
@property (readonly) bool memoryLoggingEnabled;
@property unsigned int memoryLoggingIntervalSec;
@property (readonly) bool pdseAllowEnableTailspin;
@property (readonly) bool pdseAppLaunchKillSwitch;
@property (readonly) int pdseAppLaunchPeriodDays;
@property (readonly) bool pdseCATailspinKillSwitch;
@property (readonly) int pdseCATailspinPeriodDays;
@property (readonly) bool pdseHTBadDayKillSwitch;
@property (readonly) int pdseHTPeriodDays;
@property (readonly) bool pdseHTRateOnlyKillSwitch;
@property (readonly) int pdseHTRateOnlyPeriodDays;
@property (readonly) bool pdseHTThirdPartyKillSwitch;
@property (readonly) int pdseHTThirdPartyNoLogUploadPeriodDays;
@property (readonly) int pdseHTThirdPartyPeriodDays;
@property (readonly) bool pdseHangTracerKillSwitch;
@property (readonly) bool pdseSentryKillSwitch;
@property (readonly) int pdseSentryPeriodDays;
@property (readonly) bool pdseWorkflowResponsivenessKillSwitch;
@property (readonly) int pdseWorkflowResponsivenessPeriodDays;
@property (readonly) NSArray *prefContextPrefixPriorityOrder;
@property (readonly) struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*prefInitList;
@property (readonly) unsigned long long reportPeriodMATU;
@property (readonly) int runLoopHangDailyLogLimit;
@property (readonly) int runLoopHangPerPeriodLogLimit;
@property (readonly) int runLoopLongHangDailyLogLimit;
@property (readonly) int runLoopMicroHangDailyLogLimit;
@property (readonly) unsigned long long runloopHangDurationThresholdMSec;
@property (readonly) double runloopHangPercentHeavyLogs;
@property (readonly) int runloopHangThirdPartyDailyLogLimit;
@property (readonly) unsigned long long runloopHangThirdPartyDurationThresholdMSec;
@property (readonly) unsigned long long runloopHangTimeoutDurationMSec;
@property (readonly) unsigned long long runloopLongHangDurationThresholdMSec;
@property (readonly) double samplingPercentForMicroHangs;
@property (readonly) unsigned long long savedTailspinMaxMB;
@property bool shouldAllowSentryEnablement;
@property bool shouldAllowWorkflowResponsivenessEnablement;
@property (readonly) bool shouldCollectOSSignposts;
@property (readonly) bool shouldCollectOSSignpostsDeferred;
@property (readonly) bool shouldCompressSavedTailspins;
@property (readonly) bool shouldDisplayFenceHangToHUD;
@property (readonly) bool shouldIncludeDiskInfo;
@property (readonly) bool shouldIncludeDisplayData;
@property (readonly) bool shouldIncludeNetworkState;
@property bool shouldPostHTPrefsChangedNotification;
@property (readonly) bool shouldSaveTailspins;
@property (readonly) bool shouldUpdateHangsHUD;
@property (readonly) bool shouldUploadToDiagPipe;
@property (readonly) int signpostMonitoringDailyLogLimit;
@property (readonly) bool signpostMonitoringEnabled;
@property (readonly) int signpostMonitoringPerPeriodLogLimit;
@property (readonly) int slowAppActivationDailyLogLimit;
@property (readonly) int slowAppActivationPerAppMaxLogLimit;
@property (readonly) bool slowAppActivationTailspinEnabled;
@property (readonly) unsigned long long slowAppActivationThresholdMSec;
@property (readonly) unsigned long long springBoardHangIORegGPUDumpTimeoutMSec;
@property (retain) NSString *tailspinSaveFormat;
@property (readonly) NSString *thirdPartyDevBootSessionUUID;
@property (readonly) bool thirdPartyDevHangHUDEnabled;
@property (readonly) NSArray *thirdPartyDevPreferredLanguages;
@property (readonly) bool thirdPartyRunLoopHangLogsEnabled;
@property (readonly) int workflowResponsivenessDailyLogLimit;
@property (readonly) bool workflowResponsivenessEnabled;
@property (readonly) int workflowResponsivenessPerPeriodLogLimit;

+ (id)sharedPrefs;

- (void).cxx_destruct;
- (void)__createInternalSettings;
- (struct __CFString { }*)_htDomain;
- (struct __CFString { }*)_htTaskingDomain;
- (id)_installedHTProfileDict;
- (bool)_isInternalNoOverride;
- (id)_prefsQueue;
- (id)_profilePath;
- (void)_removeAllPrefs;
- (double)appActivationLoggingCPUUtilizationThresholdMSec;
- (bool)appActivationLoggingEnabled;
- (unsigned int)appActivationLoggingMaxActivationLimit;
- (bool)appLaunchMonitoringEnabled;
- (id)automationGroup;
- (unsigned int)badDayEnablementDurationDays;
- (unsigned long long)badDayEnablementForHangDurationMSec;
- (unsigned int)badDayEnablementForLogCount;
- (unsigned int)badDayEnablementForPreviousDays;
- (unsigned int)badDayEnablementMinimumBreakDurationDays;
- (double)badDaySecondsBetweenLastEnablementAndReferenceDate;
- (bool)boolProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (bool)customerModeEnabled;
- (void)dealloc;
- (double)doubleProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (void)earlyInitNecessaryPrefs;
- (bool)enableLoggingForPoster;
- (bool)enableLoggingForWidgetRenderer;
- (id)enablementPrefix;
- (bool)eplEnabled;
- (bool)eplEnabledProfile;
- (double)eplTimeoutTimestampSec;
- (id)experimentGroup;
- (int)fenceHangDailyLogLimit;
- (bool)fenceTrackingEnabled;
- (bool)forceQuitDetectionEnabled;
- (unsigned int)forceQuitDetectionThresholdMSec;
- (id)getHighestPrioritySettingValue:(id)arg1 matchingSelector:(SEL)arg2 contextPrefixOut:(id*)arg3;
- (unsigned long long)hangWaitTimeoutDurationMSec;
- (bool)hangtracerDaemonEnabled;
- (bool)hasInternalSettings;
- (bool)htTailspinEnabled;
- (bool)hudEnabled;
- (unsigned int)hudThresholdMSec;
- (void)initBoolProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initDoubleProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initIntProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initNSStringProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyHangtracerDaemonEnabled:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyHaveInternalSettings:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyIsInternal:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyMemoryLoggingIntervalSec:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyReportPeriod:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyShouldSaveAndCompressTailspins:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initPropertyThirdPartyDevPreferredLanguages:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initUnsignedIntProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (void)initUnsignedLongProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1;
- (int)intProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (bool)isCarryDevice;
- (bool)isInternal;
- (bool)keepTailspinsLegacy;
- (bool)memoryLoggingEnabled;
- (unsigned int)memoryLoggingIntervalSec;
- (id)objectProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 matchingSelector:(SEL)arg2 contextPrefixOut:(id*)arg3;
- (bool)pdseAllowEnableTailspin;
- (bool)pdseAppLaunchKillSwitch;
- (int)pdseAppLaunchPeriodDays;
- (bool)pdseCATailspinKillSwitch;
- (int)pdseCATailspinPeriodDays;
- (bool)pdseHTBadDayKillSwitch;
- (int)pdseHTPeriodDays;
- (bool)pdseHTRateOnlyKillSwitch;
- (int)pdseHTRateOnlyPeriodDays;
- (bool)pdseHTThirdPartyKillSwitch;
- (int)pdseHTThirdPartyNoLogUploadPeriodDays;
- (int)pdseHTThirdPartyPeriodDays;
- (bool)pdseHangTracerKillSwitch;
- (bool)pdseSentryKillSwitch;
- (int)pdseSentryPeriodDays;
- (bool)pdseWorkflowResponsivenessKillSwitch;
- (int)pdseWorkflowResponsivenessPeriodDays;
- (id)prefContextPrefixPriorityOrder;
- (struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)prefInitList;
- (id)prefNamed:(struct __CFString { }*)arg1 domain:(struct __CFString { }*)arg2 profile:(id)arg3 matchingSelector:(SEL)arg4 contextPrefixOut:(id*)arg5;
- (void)refreshHTPrefs;
- (unsigned long long)reportPeriodMATU;
- (int)runLoopHangDailyLogLimit;
- (int)runLoopHangPerPeriodLogLimit;
- (int)runLoopLongHangDailyLogLimit;
- (int)runLoopMicroHangDailyLogLimit;
- (unsigned long long)runloopHangDurationThresholdMSec;
- (double)runloopHangPercentHeavyLogs;
- (int)runloopHangThirdPartyDailyLogLimit;
- (unsigned long long)runloopHangThirdPartyDurationThresholdMSec;
- (unsigned long long)runloopHangTimeoutDurationMSec;
- (unsigned long long)runloopLongHangDurationThresholdMSec;
- (double)samplingPercentForMicroHangs;
- (unsigned long long)savedTailspinMaxMB;
- (void)setAutomationGroup:(id)arg1;
- (void)setEnableLoggingForPoster:(bool)arg1;
- (void)setEnableLoggingForWidgetRenderer:(bool)arg1;
- (void)setExperimentGroup:(id)arg1;
- (void)setKeepTailspinsLegacy:(bool)arg1;
- (void)setMemoryLoggingIntervalSec:(unsigned int)arg1;
- (void)setShouldAllowSentryEnablement:(bool)arg1;
- (void)setShouldAllowWorkflowResponsivenessEnablement:(bool)arg1;
- (void)setShouldPostHTPrefsChangedNotification:(bool)arg1;
- (void)setTailspinSaveFormat:(id)arg1;
- (void)set_htDomain:(struct __CFString { }*)arg1;
- (void)set_htTaskingDomain:(struct __CFString { }*)arg1;
- (void)set_installedHTProfileDict:(id)arg1;
- (void)set_isInternalNoOverride:(bool)arg1;
- (void)set_prefsQueue:(id)arg1;
- (void)set_profilePath:(id)arg1;
- (void)setupPrefsWithQueue:(id)arg1;
- (void)setupPrefsWithQueue:(id)arg1 profilePath:(id)arg2 taskingDomainName:(struct __CFString { }*)arg3 hangtracerDomain:(struct __CFString { }*)arg4 setupInternalPrefs:(bool)arg5;
- (bool)shouldAllowSentryEnablement;
- (bool)shouldAllowWorkflowResponsivenessEnablement;
- (bool)shouldCollectOSSignposts;
- (bool)shouldCollectOSSignpostsDeferred;
- (bool)shouldCompressSavedTailspins;
- (bool)shouldDisplayFenceHangToHUD;
- (bool)shouldIncludeDiskInfo;
- (bool)shouldIncludeDisplayData;
- (bool)shouldIncludeNetworkState;
- (bool)shouldPostHTPrefsChangedNotification;
- (bool)shouldSaveTailspins;
- (bool)shouldUpdateHangsHUD;
- (bool)shouldUploadToDiagPipe;
- (int)signpostMonitoringDailyLogLimit;
- (bool)signpostMonitoringEnabled;
- (int)signpostMonitoringPerPeriodLogLimit;
- (int)slowAppActivationDailyLogLimit;
- (int)slowAppActivationPerAppMaxLogLimit;
- (bool)slowAppActivationTailspinEnabled;
- (unsigned long long)slowAppActivationThresholdMSec;
- (unsigned long long)springBoardHangIORegGPUDumpTimeoutMSec;
- (id)stringProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (id)tailspinSaveFormat;
- (id)thirdPartyDevBootSessionUUID;
- (bool)thirdPartyDevHangHUDEnabled;
- (id)thirdPartyDevPreferredLanguages;
- (bool)thirdPartyRunLoopHangLogsEnabled;
- (unsigned int)unsignedIntProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (unsigned long long)unsignedLongProperty:(struct HTPrefInit { struct __CFString {} *x1; void *x2; union HTPrefDefaultVal { bool x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; unsigned long long x_3_1_4; double x_3_1_5; void *x_3_1_6; } x3; union HTPrefDefaultVal { bool x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; unsigned long long x_4_1_4; double x_4_1_5; void *x_4_1_6; } x4; unsigned long long x5; SEL x6; }*)arg1 contextPrefixOut:(id*)arg2;
- (int)workflowResponsivenessDailyLogLimit;
- (bool)workflowResponsivenessEnabled;
- (int)workflowResponsivenessPerPeriodLogLimit;

@end
