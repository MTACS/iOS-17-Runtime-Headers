
@interface TDNamedAssetImportInfo : NSObject <NSCopying> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _alignmentRect;
    long long  _appearanceIdentifier;
    NSString * _appearanceName;
    unsigned long long  _arrayIndex;
    short  _autoscalingType;
    NSArray * _backgroundColorComponents;
    NSString * _backgroundColorName;
    long long  _backgroundColorSpaceID;
    struct CGSize { 
        double width; 
        double height; 
    }  _canvasSize;
    NSArray * _colorComponents;
    long long  _colorSpaceID;
    long long  _compressionType;
    NSArray * _containedImageNames;
    bool  _cubeMap;
    long long  _displayGamut;
    NSURL * _fileURL;
    NSString * _fontName;
    double  _fontSize;
    NSString * _foregroundColorName;
    unsigned long long  _graphicsClass;
    long long  _graphicsFeatureSetClass;
    NSValue * _iconSize;
    long long  _idiom;
    bool  _isFlippable;
    NSArray * _layerReferences;
    long long  _layoutDirection;
    long long  _localizationIdentifier;
    NSString * _localizationName;
    double  _lossyCompressionQuality;
    double  _maxPointSize;
    unsigned long long  _memoryClass;
    double  _minPointSize;
    NSDate * _modificationDate;
    NSString * _name;
    long long  _nameIdentifier;
    int  _objectVersion;
    bool  _optOutOfThinning;
    struct CGSize { 
        double width; 
        double height; 
    }  _physicalSizeInMeters;
    bool  _preserveForArchiveOnly;
    bool  _preservesVectorRepresentation;
    long long  _renditionType;
    struct CGSize { 
        double width; 
        double height; 
    }  _resizableSliceSize;
    long long  _resizingMode;
    unsigned long long  _scaleFactor;
    long long  _scalingStyle;
    long long  _sizeClassHorizontal;
    long long  _sizeClassVertical;
    struct { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _sliceInsets;
    long long  _subtype;
    NSString * _systemColorName;
    NSSet * _tags;
    long long  _templateRenderingMode;
    long long  _textAlignment;
    unsigned long long  _textureDepth;
    unsigned long long  _textureHeight;
    NSArray * _textureInfos;
    long long  _textureInterpretation;
    long long  _texturePixelFormat;
    unsigned long long  _textureWidth;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _transformation;
    NSString * _universalTypeIdentifier;
    long long  _vectorGlyphRenderingMode;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentRect;
@property (nonatomic) long long appearanceIdentifier;
@property (nonatomic, copy) NSString *appearanceName;
@property (nonatomic) unsigned long long arrayIndex;
@property (nonatomic) short autoscalingType;
@property (nonatomic, copy) NSArray *backgroundColorComponents;
@property (nonatomic, copy) NSString *backgroundColorName;
@property (nonatomic) long long backgroundColorSpaceID;
@property (nonatomic) struct CGSize { double x1; double x2; } canvasSize;
@property (nonatomic, copy) NSArray *colorComponents;
@property (nonatomic) long long colorSpaceID;
@property (nonatomic) long long compressionType;
@property (nonatomic, copy) NSArray *containedImageNames;
@property (nonatomic) bool cubeMap;
@property (nonatomic) long long displayGamut;
@property (nonatomic, copy) NSURL *fileURL;
@property (nonatomic, copy) NSString *fontName;
@property (nonatomic) double fontSize;
@property (nonatomic, copy) NSString *foregroundColorName;
@property (nonatomic) unsigned long long graphicsClass;
@property (nonatomic) long long graphicsFeatureSetClass;
@property (nonatomic, copy) NSValue *iconSize;
@property (nonatomic) long long idiom;
@property (nonatomic) bool isFlippable;
@property (nonatomic) bool isTemplate;
@property (nonatomic, copy) NSArray *layerReferences;
@property (nonatomic) long long layoutDirection;
@property (nonatomic) long long localizationIdentifier;
@property (nonatomic, copy) NSString *localizationName;
@property (nonatomic) double lossyCompressionQuality;
@property (nonatomic) double maxPointSize;
@property (nonatomic) unsigned long long memoryClass;
@property (nonatomic) double minPointSize;
@property (nonatomic, copy) NSDate *modificationDate;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) long long nameIdentifier;
@property (nonatomic) int objectVersion;
@property (nonatomic) bool optOutOfThinning;
@property (nonatomic) struct CGSize { double x1; double x2; } physicalSizeInMeters;
@property (nonatomic) bool preserveForArchiveOnly;
@property (nonatomic) bool preservesVectorRepresentation;
@property (nonatomic) long long renditionType;
@property (nonatomic) struct CGSize { double x1; double x2; } resizableSliceSize;
@property (nonatomic) long long resizingMode;
@property (nonatomic) unsigned long long scaleFactor;
@property (nonatomic) long long scalingStyle;
@property (nonatomic) long long sizeClassHorizontal;
@property (nonatomic) long long sizeClassVertical;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } sliceInsets;
@property (nonatomic) long long subtype;
@property (nonatomic, retain) NSString *systemColorName;
@property (nonatomic, copy) NSSet *tags;
@property (nonatomic) long long templateRenderingMode;
@property (nonatomic) long long textAlignment;
@property (nonatomic) unsigned long long textureDepth;
@property (nonatomic) unsigned long long textureHeight;
@property (nonatomic, copy) NSArray *textureInfos;
@property (nonatomic) long long textureInterpretation;
@property (nonatomic) long long texturePixelFormat;
@property (nonatomic) unsigned long long textureWidth;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } transformation;
@property (nonatomic, copy) NSString *universalTypeIdentifier;
@property (nonatomic) long long vectorGlyphRenderingMode;

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRect;
- (long long)appearanceIdentifier;
- (id)appearanceName;
- (unsigned long long)arrayIndex;
- (short)autoscalingType;
- (id)backgroundColorComponents;
- (id)backgroundColorName;
- (long long)backgroundColorSpaceID;
- (struct CGSize { double x1; double x2; })canvasSize;
- (id)colorComponents;
- (long long)colorSpaceID;
- (long long)compressionType;
- (id)containedImageNames;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)cubeMap;
- (void)dealloc;
- (id)description;
- (long long)displayGamut;
- (id)fileURL;
- (id)fontName;
- (double)fontSize;
- (id)foregroundColorName;
- (unsigned long long)graphicsClass;
- (long long)graphicsFeatureSetClass;
- (id)iconSize;
- (long long)idiom;
- (id)init;
- (bool)isFlippable;
- (bool)isTemplate;
- (id)layerReferences;
- (long long)layoutDirection;
- (long long)localizationIdentifier;
- (id)localizationName;
- (double)lossyCompressionQuality;
- (double)maxPointSize;
- (unsigned long long)memoryClass;
- (double)minPointSize;
- (id)modificationDate;
- (id)name;
- (long long)nameIdentifier;
- (int)objectVersion;
- (bool)optOutOfThinning;
- (struct CGSize { double x1; double x2; })physicalSizeInMeters;
- (bool)preserveForArchiveOnly;
- (bool)preservesVectorRepresentation;
- (long long)renditionSubtype;
- (long long)renditionType;
- (struct CGSize { double x1; double x2; })resizableSliceSize;
- (long long)resizingMode;
- (unsigned long long)scaleFactor;
- (long long)scalingStyle;
- (void)setAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAppearanceIdentifier:(long long)arg1;
- (void)setAppearanceName:(id)arg1;
- (void)setArrayIndex:(unsigned long long)arg1;
- (void)setAutoscalingType:(short)arg1;
- (void)setBackgroundColorComponents:(id)arg1;
- (void)setBackgroundColorName:(id)arg1;
- (void)setBackgroundColorSpaceID:(long long)arg1;
- (void)setCanvasSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setColorComponents:(id)arg1;
- (void)setColorSpaceID:(long long)arg1;
- (void)setCompressionType:(long long)arg1;
- (void)setContainedImageNames:(id)arg1;
- (void)setCubeMap:(bool)arg1;
- (void)setDisplayGamut:(long long)arg1;
- (void)setFileURL:(id)arg1;
- (void)setFontName:(id)arg1;
- (void)setFontSize:(double)arg1;
- (void)setForegroundColorName:(id)arg1;
- (void)setGraphicsClass:(unsigned long long)arg1;
- (void)setGraphicsFeatureSetClass:(long long)arg1;
- (void)setIconSize:(id)arg1;
- (void)setIdiom:(long long)arg1;
- (void)setIsFlippable:(bool)arg1;
- (void)setIsTemplate:(bool)arg1;
- (void)setLayerReferences:(id)arg1;
- (void)setLayoutDirection:(long long)arg1;
- (void)setLocalizationIdentifier:(long long)arg1;
- (void)setLocalizationName:(id)arg1;
- (void)setLossyCompressionQuality:(double)arg1;
- (void)setMaxPointSize:(double)arg1;
- (void)setMemoryClass:(unsigned long long)arg1;
- (void)setMinPointSize:(double)arg1;
- (void)setModificationDate:(id)arg1;
- (void)setName:(id)arg1;
- (void)setNameIdentifier:(long long)arg1;
- (void)setObjectVersion:(int)arg1;
- (void)setOptOutOfThinning:(bool)arg1;
- (void)setPhysicalSizeInMeters:(struct CGSize { double x1; double x2; })arg1;
- (void)setPreserveForArchiveOnly:(bool)arg1;
- (void)setPreservesVectorRepresentation:(bool)arg1;
- (void)setRenditionType:(long long)arg1;
- (void)setResizableSliceSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setResizingMode:(long long)arg1;
- (void)setScaleFactor:(unsigned long long)arg1;
- (void)setScalingStyle:(long long)arg1;
- (void)setSizeClassHorizontal:(long long)arg1;
- (void)setSizeClassVertical:(long long)arg1;
- (void)setSliceInsets:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setSubtype:(long long)arg1;
- (void)setSystemColorName:(id)arg1;
- (void)setTags:(id)arg1;
- (void)setTemplateRenderingMode:(long long)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextureDepth:(unsigned long long)arg1;
- (void)setTextureHeight:(unsigned long long)arg1;
- (void)setTextureInfos:(id)arg1;
- (void)setTextureInterpretation:(long long)arg1;
- (void)setTexturePixelFormat:(long long)arg1;
- (void)setTextureWidth:(unsigned long long)arg1;
- (void)setTransformation:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setUniversalTypeIdentifier:(id)arg1;
- (void)setVectorGlyphRenderingMode:(long long)arg1;
- (long long)sizeClassHorizontal;
- (long long)sizeClassVertical;
- (struct { double x1; double x2; double x3; double x4; })sliceInsets;
- (long long)subtype;
- (id)systemColorName;
- (id)tags;
- (long long)templateRenderingMode;
- (long long)textAlignment;
- (unsigned long long)textureDepth;
- (unsigned long long)textureHeight;
- (id)textureInfos;
- (long long)textureInterpretation;
- (long long)texturePixelFormat;
- (unsigned long long)textureWidth;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })transformation;
- (id)universalTypeIdentifier;
- (long long)vectorGlyphRenderingMode;
- (void)verify;

@end
