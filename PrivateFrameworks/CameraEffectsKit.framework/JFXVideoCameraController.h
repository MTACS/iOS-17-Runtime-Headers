
@interface JFXVideoCameraController : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate, AVCaptureDataOutputSynchronizerDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCapturePhotoCaptureDelegate, JFXARKitFrameDelegate> {
    bool  _allowARMetadata_queryDataQueue;
    JFXARKitCameraSessionController * _arCameraSessionController;
    NSObject<OS_dispatch_queue> * _audioDelegateQueue;
    NSMutableSet * _audioDelegates;
    AVCaptureDeviceInput * _audioInput;
    NSObject<OS_dispatch_queue> * _audioOutQueue;
    AVCaptureAudioDataOutput * _audioOutput;
    AVCaptureSession * _audioSession;
    long long  _cachedMovieRecordingTorchMode;
    JFXCaptureCallObserver * _callObserver;
    long long  _cameraColorSpace_queryDataQueue;
    AVCaptureDeviceInput * _cameraDeviceInput;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
    }  _cameraDeviceIntrinsics_dataOutSynchQueue;
    struct CGSize { 
        double width; 
        double height; 
    }  _cameraFrameResolution_dataOutSynchQueue;
    long long  _cameraMode_captureSessionQueue;
    long long  _cameraMode_dataOutSynchQueue;
    long long  _cameraMode_queryDataQueue;
    NSString * _cameraType_queryDataQueue;
    double  _cameraVideoMaxZoomFactor_captureSessionQueue;
    double  _cameraVideoZoomFactor_queryDataQueue;
    id /* block */  _capturePhotoCompletionBlock;
    AVCaptureSession * _captureSession;
    NSObject<OS_dispatch_queue> * _captureSessionQueue;
    bool  _captureSessionRunning_queryDataQueue;
    long long  _captureVideoOrientation_dataOutSynchQueue;
    long long  _captureVideoOrientation_queryDataQueue;
    PVFrameSet * _capturedPhotoFrameSet_dataOutSynchQueue;
    long long  _currentCameraPosition_captureSessionQueue;
    long long  _currentCameraPosition_dataOutSynchQueue;
    long long  _currentCameraPosition_queryDataQueue;
    PVFrameSet * _currentFrameSet_dataOutSynchQueue;
    NSNumber * _currentlyTrackedFaceID;
    NSObject<OS_dispatch_queue> * _dataOutSynchQueue;
    AVCaptureDataOutputSynchronizer * _dataOutputSynchronizer;
    AVCaptureDepthDataOutput * _depthOutput;
    bool  _hasValidFaceData_queryDataQueue;
    bool  _isFlashScene_queryDataQueue;
    bool  _isRecordingMovie_captureSessionQueue;
    NSNumber * _largestDepthDimension;
    NSObject<OS_dispatch_queue> * _livePlayerSourceQueue;
    NSMutableSet * _livePlayerSources;
    NSArray * _metadataFaceObjectsArray_dataOutSynchQueue;
    AVCaptureMetadataOutput * _metadataOutput;
    NSArray * _metadataTrackedFacesArray_dataOutSynchQueue;
    JFXARMetadata * _mostRecentARMetadata_queryDataQueue;
    bool  _observingAudioRouteChanges;
    NSString * _ownerName;
    NSString * _photoOutCodec;
    AVCapturePhotoOutput * _photoOutput;
    NSArray * _pvDetectedFacesArray_dataOutSynchQueue;
    NSObject<OS_dispatch_queue> * _queryDataQueue;
    bool  _runningARKit_dataOutSynchQueue;
    bool  _sessionRequiresFaceTracking_queryDataQueue;
    bool  _skipARProcessingWhenNoFaceData_queryDataQueue;
    JFXFaceAnchor * _stillImageFaceAnchor_queryDataQueue;
    <JFXVideoCameraThermalDelegate> * _thermalDelegate;
    VCPCaptureAnalysisSession * _vcpAnalyzer;
    NSObject<OS_dispatch_queue> * _videoDelegateQueue;
    NSMutableSet * _videoDelegates;
    AVCaptureVideoDataOutput * _videoOutput;
}

@property (nonatomic, readonly) bool ARKitEnabled;
@property (nonatomic) bool allowARMetadata;
@property (nonatomic) bool allowARMetadata_queryDataQueue;
@property (nonatomic, retain) JFXARKitCameraSessionController *arCameraSessionController;
@property (nonatomic, readonly) bool audioEnabled;
@property (nonatomic) long long cachedMovieRecordingTorchMode;
@property (nonatomic, readonly) JFXCaptureCallObserver *callObserver;
@property (nonatomic, readonly) long long cameraColorSpace;
@property (nonatomic) long long cameraColorSpace_queryDataQueue;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; } cameraDeviceIntrinsics_dataOutSynchQueue;
@property (nonatomic) struct CGSize { double x1; double x2; } cameraFrameResolution_dataOutSynchQueue;
@property (nonatomic, readonly) long long cameraMode;
@property (nonatomic) long long cameraMode_captureSessionQueue;
@property (nonatomic) long long cameraMode_dataOutSynchQueue;
@property (nonatomic) long long cameraMode_queryDataQueue;
@property (nonatomic, readonly) bool cameraSessionRunning;
@property (nonatomic, retain) NSString *cameraType_queryDataQueue;
@property (nonatomic) double cameraVideoMaxZoomFactor_captureSessionQueue;
@property (nonatomic) double cameraVideoZoomFactor_queryDataQueue;
@property (nonatomic) bool captureSessionRunning_queryDataQueue;
@property (nonatomic) long long captureVideoOrientation_dataOutSynchQueue;
@property (nonatomic) long long captureVideoOrientation_queryDataQueue;
@property (nonatomic, retain) PVFrameSet *capturedPhotoFrameSet_dataOutSynchQueue;
@property (nonatomic) long long currentCameraPosition_captureSessionQueue;
@property (nonatomic) long long currentCameraPosition_dataOutSynchQueue;
@property (nonatomic) long long currentCameraPosition_queryDataQueue;
@property (nonatomic, retain) PVFrameSet *currentFrameSet_dataOutSynchQueue;
@property (nonatomic, retain) NSNumber *currentlyTrackedFaceID;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) struct { int x1; int x2; } depthDimensions;
@property (nonatomic, readonly) bool depthEnabled;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasFFCZoomEnabled;
@property (nonatomic) bool hasValidFaceData;
@property (nonatomic) bool hasValidFaceData_queryDataQueue;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isFlashScene;
@property (nonatomic) bool isFlashScene_queryDataQueue;
@property (nonatomic) bool isRecordingMovie_captureSessionQueue;
@property (nonatomic, retain) NSNumber *largestDepthDimension;
@property (nonatomic, retain) NSArray *metadataFaceObjectsArray_dataOutSynchQueue;
@property (nonatomic, retain) NSArray *metadataTrackedFacesArray_dataOutSynchQueue;
@property (nonatomic, retain) JFXARMetadata *mostRecentARMetadata;
@property (nonatomic, retain) JFXARMetadata *mostRecentARMetadata_queryDataQueue;
@property (nonatomic, retain) NSString *ownerName;
@property (nonatomic, retain) NSArray *pvDetectedFacesArray_dataOutSynchQueue;
@property (nonatomic) bool sessionRequiresFaceTracking;
@property (nonatomic) bool sessionRequiresFaceTracking_queryDataQueue;
@property (nonatomic) bool skipARProcessingWhenNoFaceDataIsPresent;
@property (nonatomic) bool skipARProcessingWhenNoFaceData_queryDataQueue;
@property (nonatomic, readonly) JFXFaceAnchor *stillImageFaceAnchor;
@property (nonatomic, retain) JFXFaceAnchor *stillImageFaceAnchor_queryDataQueue;
@property (readonly) Class superclass;
@property (nonatomic, retain) <JFXVideoCameraThermalDelegate> *thermalDelegate;
@property (nonatomic, readonly) VCPCaptureAnalysisSession *vcpAnalyzer;
@property (nonatomic) double zoomFactor;

+ (bool)allowsDepthFromDualBackCamera;
+ (double)cameraZoomFactorForUIZoomFactor:(double)arg1 captureDeviceType:(id)arg2;
+ (void)initialize;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (bool)ARKitEnabled;
- (void)JFX_audioSessionRouteChangeNotification:(id)arg1;
- (bool)JFX_buildCaptureSessionGraphError:(id*)arg1;
- (void)JFX_captureSessionDidStartRunningNotification:(id)arg1;
- (void)JFX_captureSessionDidStopRunningNotification:(id)arg1;
- (void)JFX_captureSessionInterruptionEndedNotification:(id)arg1;
- (void)JFX_captureSessionRuntimeErrorNotification:(id)arg1;
- (void)JFX_captureSessionWasInterruptedNotification:(id)arg1;
- (void)JFX_configureCaptureSessionDataOutputSynchronizer;
- (void)JFX_configureCaptureSessionEnableCameraIntrinsicMatrixDelivery;
- (bool)JFX_configureCaptureSessionForCaptureDevice:(id)arg1 error:(id*)arg2;
- (void)JFX_configureCaptureSessionMetadataForCaptureDevice:(id)arg1;
- (void)JFX_configureCaptureSessionMicrophoneForOmnidirectionalPattern;
- (void)JFX_configureCaptureSessionMicrophoneForPosition:(long long)arg1;
- (void)JFX_configureCaptureSessionPhotoOrientationFromInterfaceOrientation:(long long)arg1;
- (void)JFX_configureCaptureSessionPreset;
- (void)JFX_configureCaptureSessionVideoDataOutput;
- (bool)JFX_configureCaptureSesstionForPosition:(long long)arg1 applyFFCZoom:(bool)arg2 configureLockedCamera:(id /* block */)arg3 error:(id*)arg4;
- (void)JFX_configureLockedCaptureDevice:(id)arg1;
- (void)JFX_configureLockedCaptureDevice:(id)arg1 minFrameRate:(int)arg2 maxFrameRate:(int)arg3;
- (bool)JFX_configureLockedCaptureDeviceCustomFormat:(id)arg1 applyFFCZoom:(bool)arg2;
- (void)JFX_configureLockedCaptureDeviceExposure:(id)arg1 exposurePoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)JFX_configureLockedCaptureDeviceFocus:(id)arg1 focusPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)JFX_configureLockedCaptureDeviceForDepth:(id)arg1;
- (void)JFX_configureLockedCaptureDeviceFrameRate:(id)arg1;
- (id)JFX_createPVFrameSetFromPixelBuffer:(struct __CVBuffer { }*)arg1 withMetadata:(id)arg2 timeInterval:(double)arg3 error:(out id*)arg4;
- (id)JFX_currentAVMetadataFaceObject:(id)arg1;
- (id)JFX_getFormatForCaptureDevice:(id)arg1 previewDimensions:(struct { int x1; int x2; })arg2 colorSpace:(long long)arg3;
- (bool)JFX_isARKitEnabledCaptureSessionQueue;
- (bool)JFX_isAudioEnabledCaptureSessionQueue;
- (bool)JFX_isDepthEnabledCaptureSessionQueue;
- (bool)JFX_isUsingInternalMicCaptureSessionQueue;
- (void)JFX_notifyVideoDelegatesOfDroppedFrameWithTimeStamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)JFX_notifyVideoDelegatesOfFrameSetDataOutSynchQueue:(id)arg1;
- (void)JFX_observeCaptureSessionNotifications:(id)arg1;
- (void)JFX_orientationMonitorDeviceInterfaceOrientationNotification:(id)arg1;
- (void)JFX_processMetadataObjectsDataOutSynchQueue:(id)arg1;
- (id)JFX_processPixelBufferForFaceTransform:(struct __CVBuffer { }*)arg1 cameraIntrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg2 forNormalizedFaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 withRollAngle:(float)arg4 withTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg5 andDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg6 detectionOrientation:(long long)arg7 interfaceOrientation:(long long)arg8 needsMirroring:(bool)arg9;
- (void)JFX_rampToZoom:(double)arg1 rate:(double)arg2 durationCaptureSessionQueue:(double)arg3;
- (void)JFX_resetSessionCaptureSessionQueue;
- (void)JFX_setCaptureDeviceType:(id)arg1 captureDevicePositionCaptureSessionQueue:(long long)arg2;
- (void)JFX_setIsFlashScene:(bool)arg1;
- (void)JFX_setZoomFactor_captureSessionQueue:(double)arg1;
- (void)JFX_setupARCameraSessionController;
- (bool)JFX_setupCaptureSessionAudioError:(id*)arg1;
- (bool)JFX_setupCaptureSessionDepthError:(id*)arg1;
- (bool)JFX_setupCaptureSessionPhotoError:(id*)arg1;
- (bool)JFX_setupCaptureSessionVideoDataOutputError:(id*)arg1;
- (void)JFX_startARCameraSessionController;
- (void)JFX_thermalPolicyOrLevelChangedNotification:(id)arg1;
- (id)JFX_updateCurrentlyTrackedFaceID:(id)arg1;
- (void)addAudioRenderDelegate:(id)arg1;
- (void)addVideoRenderDelegate:(id)arg1;
- (bool)allowARMetadata;
- (bool)allowARMetadata_queryDataQueue;
- (id)arCameraSessionController;
- (bool)audioEnabled;
- (long long)cachedMovieRecordingTorchMode;
- (id)callObserver;
- (long long)cameraColorSpace;
- (long long)cameraColorSpace_queryDataQueue;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })cameraDeviceIntrinsics_dataOutSynchQueue;
- (struct CGSize { double x1; double x2; })cameraFrameResolution_dataOutSynchQueue;
- (long long)cameraMode;
- (long long)cameraMode_captureSessionQueue;
- (long long)cameraMode_dataOutSynchQueue;
- (long long)cameraMode_queryDataQueue;
- (long long)cameraPosition;
- (bool)cameraSessionRunning;
- (id)cameraType;
- (id)cameraType_queryDataQueue;
- (double)cameraVideoMaxZoomFactor_captureSessionQueue;
- (double)cameraVideoZoomFactor_queryDataQueue;
- (void)captureOutput:(id)arg1 didFinishProcessingPhoto:(id)arg2 error:(id)arg3;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)capturePhotoWithFlash:(long long)arg1 completion:(id /* block */)arg2;
- (bool)captureSessionRunning_queryDataQueue;
- (long long)captureVideoOrientation;
- (long long)captureVideoOrientation_dataOutSynchQueue;
- (long long)captureVideoOrientation_queryDataQueue;
- (id)capturedPhotoFrameSet_dataOutSynchQueue;
- (void)clear;
- (id)createLivePlayerCameraSource;
- (long long)currentCameraPosition_captureSessionQueue;
- (long long)currentCameraPosition_dataOutSynchQueue;
- (long long)currentCameraPosition_queryDataQueue;
- (id)currentFrameSet_dataOutSynchQueue;
- (id)currentlyTrackedFaceID;
- (void)dataOutputSynchronizer:(id)arg1 didOutputSynchronizedDataCollection:(id)arg2;
- (void)dealloc;
- (id)debugFrameRateLabel;
- (struct { int x1; int x2; })depthDimensions;
- (bool)depthEnabled;
- (void)didUpdateFrame:(id)arg1;
- (void)enableRecordingMovieMode:(bool)arg1 completion:(id /* block */)arg2;
- (bool)faceTrackingEnabled;
- (bool)hasFFCZoomEnabled;
- (bool)hasValidFaceData;
- (bool)hasValidFaceData_queryDataQueue;
- (id)init;
- (bool)isFlashScene;
- (bool)isFlashScene_queryDataQueue;
- (bool)isRecordingMovie_captureSessionQueue;
- (id)largestDepthDimension;
- (id)metadataFaceObjectsArray_dataOutSynchQueue;
- (id)metadataTrackedFacesArray_dataOutSynchQueue;
- (void)minFrameRate:(int*)arg1 maxFrameRate:(int*)arg2;
- (id)mostRecentARMetadata;
- (id)mostRecentARMetadata_queryDataQueue;
- (void)notifyExternalARKitFaceTrackedImageData:(id)arg1 completion:(id /* block */)arg2;
- (void)notifyExternalImageData:(id)arg1 completion:(id /* block */)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)ownerName;
- (void)preProcessFrameWithPixelBuffer:(struct __CVBuffer { }*)arg1 metadata:(id)arg2 timestamp:(double)arg3 completion:(id /* block */)arg4;
- (void)prepareCameraForMode:(long long)arg1 position:(long long)arg2 completion:(id /* block */)arg3;
- (id)pvDetectedFacesArray_dataOutSynchQueue;
- (void)rampToZoom:(double)arg1 duration:(double)arg2;
- (void)rampToZoom:(double)arg1 rate:(double)arg2;
- (void)removeAudioRenderDelegate:(id)arg1 async:(bool)arg2;
- (void)removeLivePlayerCameraSource:(id)arg1;
- (void)removeVideoRenderDelegate:(id)arg1 async:(bool)arg2;
- (void)saveToPhotoLibrary:(id)arg1;
- (void)scaleCurrentZoomFactor:(double)arg1;
- (bool)sessionRequiresFaceTracking;
- (bool)sessionRequiresFaceTracking_queryDataQueue;
- (void)setAllowARMetadata:(bool)arg1;
- (void)setAllowARMetadata_queryDataQueue:(bool)arg1;
- (void)setArCameraSessionController:(id)arg1;
- (void)setCachedMovieRecordingTorchMode:(long long)arg1;
- (void)setCameraColorSpace_queryDataQueue:(long long)arg1;
- (void)setCameraDeviceIntrinsics_dataOutSynchQueue:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg1;
- (void)setCameraFrameResolution_dataOutSynchQueue:(struct CGSize { double x1; double x2; })arg1;
- (void)setCameraMode_captureSessionQueue:(long long)arg1;
- (void)setCameraMode_dataOutSynchQueue:(long long)arg1;
- (void)setCameraMode_queryDataQueue:(long long)arg1;
- (void)setCameraType_queryDataQueue:(id)arg1;
- (void)setCameraVideoMaxZoomFactor_captureSessionQueue:(double)arg1;
- (void)setCameraVideoZoomFactor_queryDataQueue:(double)arg1;
- (void)setCameraZoomFactorForUIZoomFactor:(double)arg1;
- (void)setCaptureSessionRunning_queryDataQueue:(bool)arg1;
- (void)setCaptureTorchMode:(long long)arg1 completion:(id /* block */)arg2;
- (void)setCaptureVideoOrientation_dataOutSynchQueue:(long long)arg1;
- (void)setCaptureVideoOrientation_queryDataQueue:(long long)arg1;
- (void)setCapturedPhotoFrameSet_dataOutSynchQueue:(id)arg1;
- (void)setCurrentCameraPosition_captureSessionQueue:(long long)arg1;
- (void)setCurrentCameraPosition_dataOutSynchQueue:(long long)arg1;
- (void)setCurrentCameraPosition_queryDataQueue:(long long)arg1;
- (void)setCurrentFrameSet_dataOutSynchQueue:(id)arg1;
- (void)setCurrentlyTrackedFaceID:(id)arg1;
- (void)setFFCZoom:(bool)arg1 completion:(id /* block */)arg2;
- (void)setFocusAndExposurePoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setHasValidFaceData:(bool)arg1;
- (void)setHasValidFaceData_queryDataQueue:(bool)arg1;
- (void)setIsFlashScene_queryDataQueue:(bool)arg1;
- (void)setIsRecordingMovie_captureSessionQueue:(bool)arg1;
- (void)setLargestDepthDimension:(id)arg1;
- (void)setMetadataFaceObjectsArray_dataOutSynchQueue:(id)arg1;
- (void)setMetadataTrackedFacesArray_dataOutSynchQueue:(id)arg1;
- (void)setMinFrameRate:(int)arg1 maxFrameRate:(int)arg2;
- (void)setMostRecentARMetadata:(id)arg1;
- (void)setMostRecentARMetadata_queryDataQueue:(id)arg1;
- (void)setOwnerName:(id)arg1;
- (void)setPvDetectedFacesArray_dataOutSynchQueue:(id)arg1;
- (void)setSessionRequiresFaceTracking:(bool)arg1;
- (void)setSessionRequiresFaceTracking_queryDataQueue:(bool)arg1;
- (void)setSkipARProcessingWhenNoFaceDataIsPresent:(bool)arg1;
- (void)setSkipARProcessingWhenNoFaceData_queryDataQueue:(bool)arg1;
- (void)setStillImageFaceAnchor_queryDataQueue:(id)arg1;
- (void)setThermalDelegate:(id)arg1;
- (void)setZoomFactor:(double)arg1;
- (bool)skipARProcessingWhenNoFaceDataIsPresent;
- (bool)skipARProcessingWhenNoFaceData_queryDataQueue;
- (void)startCameraSession:(id /* block */)arg1;
- (id)stillImageFaceAnchor;
- (id)stillImageFaceAnchor_queryDataQueue;
- (void)stopCameraSession:(id /* block */)arg1;
- (void)stopRampToZoom:(id /* block */)arg1;
- (void)supportedFlashModes:(id /* block */)arg1;
- (void)switchCamera:(id /* block */)arg1;
- (void)switchCameraToPosition:(long long)arg1 applyFFCZoom:(bool)arg2 configureLockedCamera:(id /* block */)arg3 completion:(id /* block */)arg4;
- (void)switchCameraToPosition:(long long)arg1 completion:(id /* block */)arg2;
- (id)thermalDelegate;
- (void)turnOffMicrophone;
- (void)turnOnMicrophone;
- (id)updateCurrentlyTrackedFaceID:(id)arg1;
- (id)vcpAnalyzer;
- (void)videoAndAudioOutputSettings:(id /* block */)arg1;
- (double)zoomFactor;

@end
