
@interface JFXEffect : NSObject <JFXEffectAssetProviderProtocol, JFXEffectPreviewAssetProviderProtocol, JFXEffectRenderingAssetProviderProtocol, NSCopying, NSSecureCoding> {
    <JFXEffectContentDataSource> * _contentDataSource;
    NSMutableDictionary * _dirtyEffectParameters;
    NSString * _effectID;
    NSMutableDictionary * _effectParameters;
    bool  _isNone;
    NSString * _motionDocumentFolderPath;
    NSLock * _paramLock;
    PVEffect * _renderEffect;
    struct CGSize { 
        double width; 
        double height; 
    }  _renderSize;
    int  _type;
}

@property (nonatomic, readonly) bool arePreviewingAssetsLocal;
@property (nonatomic, readonly) bool areRenderingAssetsLocal;
@property (nonatomic, readonly) unsigned long long contentAvailability;
@property (nonatomic, readonly) <JFXEffectContentDataSource> *contentDataSource;
@property (nonatomic, readonly) NSString *contentVersion;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSString *effectID;
@property (nonatomic, copy) NSDictionary *effectParameters;
@property bool forceDisableLooping;
@property bool forceRenderAtPosterFrame;
@property (readonly) unsigned long long hash;
@property (getter=isHidden, nonatomic) bool hidden;
@property (nonatomic, readonly) bool isContentAvailable;
@property (nonatomic, readonly) bool isContentNew;
@property (nonatomic, readonly) bool isNone;
@property (nonatomic, copy) NSString *motionDocumentFolderPath;
@property (nonatomic) float opacity;
@property (nonatomic) double outputAspect;
@property (nonatomic) long long playableAspectRatio;
@property (nonatomic) long long playableAspectRatioPreservationMode;
@property (nonatomic, readonly) bool renderEffectResourcesAreReady;
@property (nonatomic) struct CGSize { double x1; double x2; } renderSize;
@property (readonly) Class superclass;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } topLevelTransform;
@property (nonatomic, retain) PVMatrix44Double *topLevelTransformObject;
@property (nonatomic, retain) PVTransformAnimation *transformAnimation;
@property (nonatomic, readonly) int type;

+ (long long)defaultPlayableAspectRatio;
+ (long long)defaultPlayableAspectRatioPreservationMode;
+ (bool)effectIDIsNone:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)JFX_defaultMotionDocumentFolderLocalURL;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_affineTransformFromEffectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toSize:(struct CGSize { double x1; double x2; })arg2 basisOrigin:(int)arg3;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x1; double x2; }*)arg1 numPoints:(unsigned long long)arg2 fromBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x1; double x2; }*)arg1 numPoints:(unsigned long long)arg2 toBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })_convertRenderEffectPoints:(struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })arg1 toBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 basisOrigin:(int)arg3;
- (void)_createCachedRenderEffect_noLock;
- (id)accessibilityName;
- (void)addEffectParameters:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })addTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 withComponentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeTo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })addTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 withComponentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeTo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4 ignoreTranslation:(bool)arg5;
- (bool)arePreviewingAssetsLocal;
- (bool)areRenderingAssetsLocal;
- (id)availableAssetsWithFilteringOptions:(id)arg1;
- (id)availableAssetsWithFilteringOptionsArray:(id)arg1;
- (bool)buildInAnimation;
- (void)cancelAssetRequest:(id)arg1;
- (unsigned long long)contentAvailability;
- (id)contentDataSource;
- (id)contentProperties;
- (id)contentVersion;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)describeRequest:(id)arg1;
- (id)description;
- (id)displayName;
- (id)effectID;
- (id)effectParameters;
- (id)effectWillRenderPreviewWithOptions:(id)arg1;
- (bool)enablePresentationState:(bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)forceDisableLooping;
- (bool)forceRenderAtPosterFrame;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithEffectID:(id)arg1;
- (bool)isAppearanceEqual:(id)arg1;
- (bool)isAppearanceEqual:(id)arg1 forPurpose:(unsigned long long)arg2;
- (bool)isConfiguredForOutputAspect:(double)arg1;
- (bool)isConfiguredForOutputAspectMatchingSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)isContentAvailable;
- (bool)isContentNew;
- (bool)isEqual:(id)arg1;
- (bool)isHidden;
- (bool)isNone;
- (bool)loadRenderEffect;
- (void)loadRenderEffectInBackgroundWithCompletionOnMainQueue:(id /* block */)arg1;
- (void)loadRenderEffectOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (id)localAssetsWithFilteringOptions:(id)arg1;
- (bool)loopedRangeRenderIsCacheable;
- (id)motionDocumentFolderPath;
- (float)opacity;
- (double)outputAspect;
- (id)parameterForKey:(id)arg1;
- (id)parametersClassWhitelist;
- (long long)playableAspectRatio;
- (long long)playableAspectRatioPreservationMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playableRectInOutputSize:(struct CGSize { double x1; double x2; })arg1;
- (double)playableScaleInOutputSize:(struct CGSize { double x1; double x2; })arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })rangeForPresentationRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)registerMotionDocumentWithinAssets:(id)arg1;
- (void)removeEffectParameters:(id)arg1;
- (void)removeTopLevelAdditionalScale;
- (id)renderEffect;
- (bool)renderEffectResourcesAreReady;
- (void)renderEffectWillLoad;
- (struct CGSize { double x1; double x2; })renderSize;
- (id)requestAllAssetsWithOptions:(id)arg1 progressAndCancellationHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)requestAllAssetsWithOptions:(id)arg1 progressHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)requestAssetWithOptions:(id)arg1 progressAndCancellationHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)requestAssetWithOptions:(id)arg1 progressHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)requestPreviewingAssetsWithPriority:(long long)arg1 onlyThumbnailAssetWhenAvailable:(bool)arg2 progressHandler:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (id)requestRenderingAssetsWithPriority:(long long)arg1 progressHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (id)serializableEffectParameters;
- (void)setBuildInAnimation:(bool)arg1;
- (void)setEffectParameters:(id)arg1;
- (void)setForceDisableLooping:(bool)arg1;
- (void)setForceRenderAtPosterFrame:(bool)arg1;
- (void)setHDR:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setMotionDocumentFolderPath:(id)arg1;
- (void)setOpacity:(float)arg1;
- (void)setOutputAspect:(double)arg1;
- (void)setParameter:(id)arg1 forKey:(id)arg2;
- (void)setParentTransformAnimation:(id)arg1;
- (void)setPlayableAspectRatio:(long long)arg1;
- (void)setPlayableAspectRatioPreservationMode:(long long)arg1;
- (void)setRenderSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setRenderStartOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTopLevelAdditionalScale:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTopLevelTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setTopLevelTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 relativeTo:(struct CGSize { double x1; double x2; })arg2 basisOrigin:(int)arg3;
- (void)setTopLevelTransformObject:(id)arg1;
- (void)setTransformAnimation:(id)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })topLevelTransform;
- (id)topLevelTransformObject;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })topLevelTransformRelativeTo:(struct CGSize { double x1; double x2; })arg1 basisOrigin:(int)arg2;
- (id)transformAnimation;
- (int)type;
- (void)updatePriorityForAssetRequest:(id)arg1 newPriority:(long long)arg2;

@end
