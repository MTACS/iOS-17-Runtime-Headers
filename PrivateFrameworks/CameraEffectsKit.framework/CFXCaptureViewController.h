
@interface CFXCaptureViewController : UIViewController <CAMControlStatusBarDelegate, CAMControlVisibilityUpdateDelegate, CAMDynamicShutterControlDelegate, CAMZoomControlDelegate, CAMZoomSliderDelegate, CFXCameraControlsViewControllerDelegate, CFXEffectEditorViewDelegate, CFXFullScreenTextEditViewControllerDelegate, CFXLiveCaptureViewControllerDelegate, JFXAnimojiTrackingLossDelegate, JFXPassThroughContainerViewDelegate> {
    UIView * _animojiReticleFacePromptView;
    CFXFaceReticleView * _animojiTrackingLossReticle;
    unsigned long long  _appliedDirectOverlayEditingGestures;
    long long  _aspectRatioCrop;
    UIView * _bottomControlsContainer;
    CFXControlsViewController * _cameraControls;
    UIView * _cameraControlsContainerView;
    bool  _cameraIsFlipping;
    CFXLiveCaptureViewController * _cameraViewController;
    bool  _captureContainerUncroppedFrameWasCalculatedWithContentRect;
    NSLayoutConstraint * _captureControlsContainerHeightConstraint;
    NSLayoutConstraint * _captureControlsContainerLeadingConstraint;
    NSLayoutConstraint * _captureControlsContainerTopConstraint;
    NSLayoutConstraint * _captureControlsContainerTrailingConstraint;
    NSLayoutConstraint * _captureControlsContainerWidthConstraint;
    long long  _captureMode;
    CFXEffectComposition * _composition;
    bool  _configuredForOrientation;
    CAMControlStatusBar * _controlStatusBar;
    <CFXCaptureViewControllerDelegate> * _delegate;
    bool  _dockIsMagnified;
    double  _dockMagnifiedHeightDelta;
    PUReviewScreenDoneButton * _doneButton;
    CAMDynamicShutterControl * _dynamicShutterControl;
    struct { 
        long long tapBehavior; 
        long long longPressBehavior; 
        long long dragRightBehavior; 
        long long dragLeftBehavior; 
        bool allowsZoom; 
        long long lockBehavior; 
        long long ringStyle; 
        long long stopColor; 
        long long idleColor; 
    }  _dynamicShutterSettings;
    NSObject<OS_dispatch_group> * _editingOverlayWithGestureGroup;
    CFXEffectBrowserContentPresenterViewController * _effectBrowserContentPresenterViewController;
    CFXEffectEditorView * _effectEditor;
    JFXPassThroughContainerView * _effectEditorContainerView;
    CAMElapsedTimeView * _elapsedTimeView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _externalUncroppedPresentationRect;
    NSLayoutConstraint * _facePromptLabelYConstraint;
    CAMFlashButton * _flashButton;
    bool  _isExternalCaptureSessionAnExternalCamera;
    bool  _isRecording;
    bool  _isShowingAnimojiReticle;
    UIView * _liveCaptureContainer;
    UIView * _liveCaptureContainerContainer;
    CAMSnapshotView * _liveCaptureContainerSnapshot;
    UIView * _nonTransformedContainerView;
    bool  _observingOrientationChanges;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _presentationRect;
    UIView * _presentationView;
    CAMViewfinderReticleView * _reticleView;
    JFXThreadSafeArray * _runOnceAnimatedOverlays;
    bool  _switchedToVideoMode;
    CAMTopBar * _topBar;
    NSLayoutConstraint * _topBarContaineHeightConstraint;
    NSLayoutConstraint * _topBarTopConstraint;
    CFXViewfinderFlipTransition * _viewfinderFlipTransition;
    CAMZoomControl * _zoomControl;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _zoomControlFrame;
    double  _zoomFactorAtPinchStart;
    CAMZoomSlider * _zoomSlider;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _zoomSliderFrame;
}

@property (nonatomic, retain) UIView *animojiReticleFacePromptView;
@property (nonatomic, retain) CFXFaceReticleView *animojiTrackingLossReticle;
@property (nonatomic) unsigned long long appliedDirectOverlayEditingGestures;
@property (nonatomic) long long aspectRatioCrop;
@property (nonatomic, retain) UIView *bottomControlsContainer;
@property (nonatomic, retain) CFXControlsViewController *cameraControls;
@property (nonatomic, retain) UIView *cameraControlsContainerView;
@property (nonatomic) bool cameraIsFlipping;
@property (nonatomic, retain) CFXLiveCaptureViewController *cameraViewController;
@property (nonatomic) bool captureContainerUncroppedFrameWasCalculatedWithContentRect;
@property (nonatomic, retain) NSLayoutConstraint *captureControlsContainerHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *captureControlsContainerLeadingConstraint;
@property (nonatomic, retain) NSLayoutConstraint *captureControlsContainerTopConstraint;
@property (nonatomic, retain) NSLayoutConstraint *captureControlsContainerTrailingConstraint;
@property (nonatomic, retain) NSLayoutConstraint *captureControlsContainerWidthConstraint;
@property (nonatomic) long long captureMode;
@property (nonatomic, retain) CFXEffectComposition *composition;
@property (nonatomic) bool configuredForOrientation;
@property (nonatomic, retain) CAMControlStatusBar *controlStatusBar;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CFXCaptureViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool dockIsMagnified;
@property (nonatomic) double dockMagnifiedHeightDelta;
@property (nonatomic, retain) PUReviewScreenDoneButton *doneButton;
@property (nonatomic, retain) CAMDynamicShutterControl *dynamicShutterControl;
@property (nonatomic) struct { long long x1; long long x2; long long x3; long long x4; bool x5; long long x6; long long x7; long long x8; long long x9; } dynamicShutterSettings;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *editingOverlayWithGestureGroup;
@property (nonatomic, retain) CFXEffectBrowserContentPresenterViewController *effectBrowserContentPresenterViewController;
@property (nonatomic, retain) CFXEffectEditorView *effectEditor;
@property (nonatomic, retain) JFXPassThroughContainerView *effectEditorContainerView;
@property (nonatomic, retain) UIView *effectsPickerDrawer;
@property (nonatomic, retain) CAMElapsedTimeView *elapsedTimeView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } externalUncroppedPresentationRect;
@property (nonatomic, retain) NSLayoutConstraint *facePromptLabelYConstraint;
@property (nonatomic, retain) CAMFlashButton *flashButton;
@property (nonatomic) long long flashMode;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isExternalCaptureSessionAnExternalCamera;
@property (nonatomic) bool isRecording;
@property (nonatomic) bool isShowingAnimojiReticle;
@property (nonatomic, retain) UIView *liveCaptureContainer;
@property (nonatomic, retain) UIView *liveCaptureContainerContainer;
@property (nonatomic, retain) CAMSnapshotView *liveCaptureContainerSnapshot;
@property (nonatomic, readonly) bool livePlayerIsSaturated;
@property (nonatomic, retain) UIView *nonTransformedContainerView;
@property (nonatomic) bool observingOrientationChanges;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } presentationRect;
@property (nonatomic, retain) UIView *presentationView;
@property (nonatomic, retain) CAMViewfinderReticleView *reticleView;
@property (nonatomic, retain) JFXThreadSafeArray *runOnceAnimatedOverlays;
@property (readonly) Class superclass;
@property (nonatomic) bool switchedToVideoMode;
@property (nonatomic, retain) CAMTopBar *topBar;
@property (nonatomic, retain) NSLayoutConstraint *topBarContaineHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *topBarTopConstraint;
@property (nonatomic) bool useLocalCameraViewfinder;
@property (nonatomic) double userInterfaceAlpha;
@property (nonatomic, retain) CFXViewfinderFlipTransition *viewfinderFlipTransition;
@property (nonatomic, retain) CAMZoomControl *zoomControl;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } zoomControlFrame;
@property (setter=setZoomFactorAtPinchStart:, nonatomic) double zoomFactorAtPinchStart;
@property (nonatomic, retain) CAMZoomSlider *zoomSlider;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } zoomSliderFrame;

- (void).cxx_destruct;
- (void)CFX_addEffect:(id)arg1 allowImmediateTextEditing:(bool)arg2;
- (void)CFX_adjustOverlaysForCaptureOrientationChanged:(long long)arg1 oldCaptureOrientation:(long long)arg2;
- (void)CFX_applyAutoRotationCorrectionToEditorViews;
- (long long)CFX_camFlashModeForCaptureFlashMode:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CFX_cameraViewFinderUncroppedFrame;
- (bool)CFX_canApplyFaceTracking;
- (long long)CFX_captureFlashModeForCAMFlashMode:(long long)arg1;
- (long long)CFX_captureTorchModeForCAMFlashMode:(long long)arg1;
- (void)CFX_executeBlockAfterNextFrameRendered:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CFX_generateAutoRotationCorrectionFrameWithInterfaceOrientation:(long long)arg1;
- (void)CFX_getCAMCaptureForPosition:(long long)arg1 type:(id)arg2 captureDevice:(long long*)arg3 captureDevicePosition:(long long*)arg4 captureMode:(long long*)arg5;
- (void)CFX_getCaptureDevice:(long long*)arg1 captureDevicePosition:(long long*)arg2 captureMode:(long long*)arg3;
- (void)CFX_handleZoomPinchGestureRecognizer:(id)arg1;
- (void)CFX_hideAppStripUpperBackgroundView:(bool)arg1;
- (bool)CFX_isRenderingAnimatedOverlaysThatDontLoop;
- (bool)CFX_isZoomAllowed;
- (double)CFX_maxZoomForCamera;
- (void)CFX_performBackCameraZoomWithPinchGestureRecognizer:(id)arg1;
- (void)CFX_performFrontCameraZoomWithPinchGestureRecognizer:(id)arg1;
- (void)CFX_respondToShutterPress;
- (void)CFX_setFrameAndRenderSizes;
- (void)CFX_setZoomSliderFromZoomFactor:(double)arg1;
- (void)CFX_toggleCaptureUI;
- (void)JFX_capturePhoto;
- (void)JFX_orientationMonitorDeviceInterfaceOrientationNotification:(id)arg1;
- (void)JFX_orientationMonitorInterfaceOrientationNotification:(id)arg1;
- (void)addEffect:(id)arg1;
- (void)addEffect:(id)arg1 allowImmediateTextEditing:(bool)arg2;
- (void)addOverlayEffect:(id)arg1 atNormalizedPlanePoint:(struct CGPoint { double x1; double x2; })arg2 scale:(double)arg3 rotationAngle:(double)arg4;
- (void)addOverlayEffect:(id)arg1 atScreenLocation:(struct CGPoint { double x1; double x2; })arg2 atScreenSize:(struct CGSize { double x1; double x2; })arg3 rotationAngle:(double)arg4;
- (id)animojiReticleFacePromptView;
- (id)animojiTrackingLossReticle;
- (unsigned long long)appliedDirectOverlayEditingGestures;
- (void)applyAutoRotationCorrectionToEditorViewsWithTransitionCoordinator:(id)arg1;
- (void)applyRotationTransformForPortrait;
- (long long)aspectRatioCrop;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bottomBarCTMControlsFrameForWindowOrientation:(long long)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)bottomControlsContainer;
- (id)cameraControls;
- (id)cameraControlsContainerView;
- (void)cameraControlsViewControllerEffectsButtonWasTapped:(id)arg1;
- (void)cameraControlsViewControllerShutterButtonWasTapped:(id)arg1;
- (void)cameraControlsViewControllerSwitchCameraButtonWasTapped:(id)arg1;
- (void)cameraDidStart;
- (void)cameraDidStop;
- (bool)cameraIsFlipping;
- (id)cameraViewController;
- (bool)canToggleBetweenZoomFactorsForZoomControl:(id)arg1;
- (bool)captureContainerUncroppedFrameWasCalculatedWithContentRect;
- (id)captureControlsContainerHeightConstraint;
- (id)captureControlsContainerLeadingConstraint;
- (id)captureControlsContainerTopConstraint;
- (id)captureControlsContainerTrailingConstraint;
- (id)captureControlsContainerWidthConstraint;
- (long long)captureInterfaceOrientationForDisplay;
- (long long)captureMode;
- (void)completedVideoRecordWithURL:(id)arg1 metadataURL:(id)arg2;
- (id)composition;
- (void)configureCTMUIForCaptureMode;
- (void)configureCaptureControlsForOrientationWithAnimation:(bool)arg1;
- (void)configureUIForOrientation;
- (void)configureUIForWindowOrientation:(long long)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)configureWithControlsViewController:(id)arg1;
- (void)configureZoomControl;
- (bool)configuredForOrientation;
- (id)controlStatusBar;
- (void)controlStatusBar:(id)arg1 didCreateIndicatorForType:(unsigned long long)arg2;
- (void)controlStatusBar:(id)arg1 didReceiveTapInIndicatorForType:(unsigned long long)arg2;
- (void)dealloc;
- (id)delegate;
- (void)displayEffectEditorForEffect:(id)arg1 forMode:(unsigned long long)arg2;
- (bool)dockIsMagnified;
- (double)dockMagnifiedHeightDelta;
- (id)doneButton;
- (id)doneButtonForCameraControlsViewController:(id)arg1;
- (void)doneButtonTapped:(id)arg1;
- (id)dynamicShutterControl;
- (void)dynamicShutterControlDidDismissCounter:(id)arg1;
- (void)dynamicShutterControlDidPresentCounter:(id)arg1;
- (void)dynamicShutterControlDidPressLockButton:(id)arg1;
- (void)dynamicShutterControlDidShortPress:(id)arg1;
- (void)dynamicShutterControlDidStart:(id)arg1;
- (void)dynamicShutterControlDidStop:(id)arg1;
- (void)dynamicShutterControlGesturesDidBegin:(id)arg1;
- (void)dynamicShutterControlGesturesDidCancel:(id)arg1;
- (void)dynamicShutterControlGesturesDidEnd:(id)arg1;
- (void)dynamicShutterControlStopLockedRecording;
- (struct { long long x1; long long x2; long long x3; long long x4; bool x5; long long x6; long long x7; long long x8; long long x9; })dynamicShutterSettings;
- (id)editingOverlayWithGestureGroup;
- (id)effectBrowserContentPresenterViewController;
- (void)effectCompositionDidChange:(id)arg1;
- (id)effectEditor;
- (id)effectEditorContainerView;
- (void)effectEditorView:(id)arg1 didBeginEditingTextForEffect:(id)arg2;
- (void)effectEditorView:(id)arg1 didEditTextForEffect:(id)arg2 newText:(id)arg3;
- (void)effectEditorView:(id)arg1 didEndEditingEffect:(id)arg2;
- (void)effectEditorView:(id)arg1 didEndEditingTextForEffect:(id)arg2 wasCancelled:(bool)arg3;
- (void)effectEditorView:(id)arg1 didMoveEffect:(id)arg2 withTouchPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)effectEditorView:(id)arg1 didRemoveEffect:(id)arg2;
- (void)effectEditorView:(id)arg1 didTransformEffect:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)effectEditorView:(id)arg1 effectAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectEditorView:(id)arg1 frameForEffect:(id)arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectEditorView:(id)arg1 hitAreaBoundingFrameForEffect:(id)arg2 adjustForMinimumSize:(bool)arg3 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (bool)effectEditorView:(id)arg1 isEffectAtPoint:(struct CGPoint { double x1; double x2; })arg2 effect:(id)arg3;
- (bool)effectEditorView:(id)arg1 isFaceTrackingDataAvailableForEffect:(id)arg2;
- (bool)effectEditorView:(id)arg1 isFaceTrackingEffect:(id)arg2;
- (unsigned long long)effectEditorView:(id)arg1 maximumTextLengthForEffect:(id)arg2;
- (id)effectEditorView:(id)arg1 overlayEffectFrameForEffect:(id)arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (bool)effectEditorView:(id)arg1 presentCustomTextEditingUI:(id)arg2;
- (struct CGPoint { double x1; double x2; })effectEditorView:(id)arg1 removeButtonPositionForEffect:(id)arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (bool)effectEditorView:(id)arg1 shouldEditTextForEffect:(id)arg2;
- (struct CGPoint { double x1; double x2; })effectEditorView:(id)arg1 spacingBetweenCenterPointOfEffect:(id)arg2 point:(struct CGPoint { double x1; double x2; })arg3 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)effectEditorView:(id)arg1 textEditingPropertiesForEffect:(id)arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)effectEditorView:(id)arg1 textForEffect:(id)arg2;
- (void)effectEditorViewDidBeginEditing:(id)arg1;
- (void)effectEditorViewDidEndEditing:(id)arg1;
- (bool)effectEditorViewShouldShowFaceReticle:(id)arg1;
- (id)effectsPickerDrawer;
- (id)elapsedTimeView;
- (void)enableAnimationForOverlayEffect:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })externalUncroppedPresentationRect;
- (id)facePromptLabelYConstraint;
- (long long)faceTrackingInterfaceOrientationForfullScreenTextEditViewController:(id)arg1;
- (void)fadeInFaceInViewPromptLabel;
- (void)fadeOutFaceInViewPromptLabel;
- (id)flashButton;
- (id)flashButtonForCameraControlsViewController:(id)arg1;
- (void)flashButtonTapped:(id)arg1;
- (long long)flashMode;
- (void)flashModeDidChange;
- (void)fullScreenTextEditViewController:(id)arg1 didBeginAnimationBeforeEditingEffect:(id)arg2 completion:(id /* block */)arg3;
- (void)fullScreenTextEditViewController:(id)arg1 didBeginEditingEffect:(id)arg2;
- (void)fullScreenTextEditViewController:(id)arg1 didFinishAnimationAfterEditingEffect:(id)arg2 completion:(id /* block */)arg3;
- (void)fullScreenTextEditViewController:(id)arg1 didFinishEditingByRemovingEffect:(id)arg2;
- (void)fullScreenTextEditViewController:(id)arg1 didFinishEditingEffect:(id)arg2 withUpdatedText:(id)arg3;
- (bool)fullScreenTextEditViewController:(id)arg1 shouldDisableEditingAnimationForEffect:(id)arg2;
- (void)fullScreenTextEditViewController:(id)arg1 willBeginAnimationAfterEditingEffect:(id)arg2 updatedText:(id)arg3;
- (void)fullScreenTextEditViewController:(id)arg1 willBeginAnimationBeforeEditingEffect:(id)arg2;
- (void)handlePinchGestureRecognizer:(id)arg1;
- (void)hideAnimojiFaceReticleForTrackingGain;
- (void)insertCamBottomBar:(id)arg1;
- (bool)isEditingEffect;
- (bool)isExternalCaptureSessionAnExternalCamera;
- (bool)isFaceTrackingDataAvailable;
- (bool)isMessagesOnPhone;
- (bool)isRecording;
- (bool)isShowingAnimojiReticle;
- (void)layoutZoomControlForCTM;
- (void)layoutZoomControlRelativeToBottomBarAndPreview:(id)arg1;
- (void)layoutZoomSliderRelativeToBottomBarAndPreview;
- (void)layoutZoomUI;
- (id)liveCaptureContainer;
- (id)liveCaptureContainerContainer;
- (id)liveCaptureContainerSnapshot;
- (id)liveCaptureSnapshot;
- (void)liveCaptureViewController:(id)arg1 didRenderFrame:(id)arg2;
- (void)liveCaptureViewController:(id)arg1 livePreviewDoubleTappedAtNormalizedCenterPoint:(struct CGPoint { double x1; double x2; })arg2 gesture:(id)arg3;
- (void)liveCaptureViewController:(id)arg1 livePreviewPannedAtNormalizedPoint:(struct CGPoint { double x1; double x2; })arg2 gesture:(id)arg3;
- (void)liveCaptureViewController:(id)arg1 livePreviewPinchedAtNormalizedCenterPoint:(struct CGPoint { double x1; double x2; })arg2 gesture:(id)arg3;
- (void)liveCaptureViewController:(id)arg1 livePreviewRotatedAtNormalizedCenterPoint:(struct CGPoint { double x1; double x2; })arg2 gesture:(id)arg3;
- (void)liveCaptureViewController:(id)arg1 livePreviewTappedAtNormalizedPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)livePlayerIsSaturated;
- (bool)needsBlackBackgroundForCTMControls;
- (id)nonTransformedContainerView;
- (bool)observingOrientationChanges;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })overlayTransformForLocalViewfinder;
- (bool)passThroughContainerView:(id)arg1 shouldHandleTouchWithinView:(id)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)prepareForSegue:(id)arg1 sender:(id)arg2;
- (bool)presentFullScreenTextEditorForEffect:(id)arg1 insertingEffect:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })presentationRect;
- (id)presentationView;
- (void)removeAllEffectsAnimated:(bool)arg1;
- (void)removeAllEffectsOfType:(id)arg1 animated:(bool)arg2;
- (void)removeAnimojiTrackingReticle;
- (void)removeEffectEditorAnimated:(bool)arg1;
- (void)removeEffectsForCameraSwitch;
- (void)removeLiveCaptureSnapshot;
- (void)resign;
- (id)reticleView;
- (void)returnCTMUIToPhotoMode;
- (id)runOnceAnimatedOverlays;
- (void)saveLiveCaptureSnapshotForReview;
- (void)setAnimojiReticleFacePromptView:(id)arg1;
- (void)setAnimojiTrackingLossReticle:(id)arg1;
- (void)setAppliedDirectOverlayEditingGestures:(unsigned long long)arg1;
- (void)setAspectRatioCrop:(long long)arg1;
- (void)setBottomControlsContainer:(id)arg1;
- (void)setCameraControls:(id)arg1;
- (void)setCameraControlsContainerView:(id)arg1;
- (void)setCameraIsFlipping:(bool)arg1;
- (void)setCameraViewController:(id)arg1;
- (void)setCaptureContainerUncroppedFrameWasCalculatedWithContentRect:(bool)arg1;
- (void)setCaptureControlsContainerHeightConstraint:(id)arg1;
- (void)setCaptureControlsContainerLeadingConstraint:(id)arg1;
- (void)setCaptureControlsContainerTopConstraint:(id)arg1;
- (void)setCaptureControlsContainerTrailingConstraint:(id)arg1;
- (void)setCaptureControlsContainerWidthConstraint:(id)arg1;
- (void)setCaptureMode:(long long)arg1;
- (void)setComposition:(id)arg1;
- (void)setConfiguredForOrientation:(bool)arg1;
- (void)setControlStatusBar:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDockIsMagnified:(bool)arg1;
- (void)setDockMagnifiedHeightDelta:(double)arg1;
- (void)setDoneButton:(id)arg1;
- (void)setDynamicShutterControl:(id)arg1;
- (void)setDynamicShutterSettings:(struct { long long x1; long long x2; long long x3; long long x4; bool x5; long long x6; long long x7; long long x8; long long x9; })arg1;
- (void)setEditingOverlayWithGestureGroup:(id)arg1;
- (void)setEffectBrowserContentPresenterViewController:(id)arg1;
- (void)setEffectEditor:(id)arg1;
- (void)setEffectEditorContainerView:(id)arg1;
- (void)setEffectsPickerDrawer:(id)arg1;
- (void)setElapsedTimeView:(id)arg1;
- (void)setExternalUncroppedPresentationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFacePromptLabelYConstraint:(id)arg1;
- (void)setFlashButton:(id)arg1;
- (void)setFlashMode:(long long)arg1;
- (void)setIsExternalCaptureSessionAnExternalCamera:(bool)arg1;
- (void)setIsRecording:(bool)arg1;
- (void)setIsShowingAnimojiReticle:(bool)arg1;
- (void)setLiveCaptureContainer:(id)arg1;
- (void)setLiveCaptureContainerContainer:(id)arg1;
- (void)setLiveCaptureContainerSnapshot:(id)arg1;
- (void)setLiveCapturePresentationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setLiveCaptureViewController:(id)arg1;
- (void)setNonTransformedContainerView:(id)arg1;
- (void)setObservingOrientationChanges:(bool)arg1;
- (void)setPresentationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPresentationView:(id)arg1;
- (void)setReticleView:(id)arg1;
- (void)setRunOnceAnimatedOverlays:(id)arg1;
- (void)setSwitchedToVideoMode:(bool)arg1;
- (void)setTopBar:(id)arg1;
- (void)setTopBarContaineHeightConstraint:(id)arg1;
- (void)setTopBarTopConstraint:(id)arg1;
- (void)setTorchModeForFlashMode:(long long)arg1;
- (void)setUseLocalCameraViewfinder:(bool)arg1;
- (void)setUserInterfaceAlpha:(double)arg1;
- (void)setViewfinderFlipTransition:(id)arg1;
- (void)setZoomControl:(id)arg1;
- (void)setZoomControlFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setZoomFactorAtPinchStart:(double)arg1;
- (void)setZoomSlider:(id)arg1;
- (void)setZoomSliderFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setupAnimojiFaceReticleForTrackingLoss;
- (void)setupFaceInViewPromptLabel;
- (bool)shouldPerformSegueWithIdentifier:(id)arg1 sender:(id)arg2;
- (bool)shouldShowAnimojiFaceReticle;
- (bool)shouldUseFaceTracking;
- (void)showAnimojiFaceReticleForTrackingLoss;
- (void)showLiveCaptureSnapshotBlurred:(bool)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)shutterControlTouchAttemptedWhileDisabled:(id)arg1;
- (void)startVideoRecording;
- (void)stopVideoRecording:(id /* block */)arg1;
- (bool)switchedToVideoMode;
- (void)toggleBetweenZoomFactorsForZoomControl:(id)arg1;
- (void)toggleCTMFlashButton;
- (id)topBar;
- (id)topBarContaineHeightConstraint;
- (id)topBarTopConstraint;
- (void)updateAnimojiTrackingReticleAndLabelLayout;
- (void)updateControlVisibilityAnimated:(bool)arg1;
- (void)updateEffectEditorLayout;
- (void)updateFullScreenTextEditorLayout;
- (void)updateTopBar;
- (void)updateUIForDevicePosition:(long long)arg1;
- (void)updateUIForDockMagnify:(bool)arg1 dockHeightDelta:(double)arg2;
- (void)updateUIForVideoRecording:(bool)arg1;
- (void)updateZoomUIForCapturing:(bool)arg1 animated:(bool)arg2;
- (void)updateZoomUIVisibility;
- (bool)useLocalCameraViewfinder;
- (double)userInterfaceAlpha;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)viewfinderFlipTransition;
- (void)willDropCameraFrame;
- (id)zoomControl;
- (void)zoomControl:(id)arg1 didChangeZoomFactor:(double)arg2 interactionType:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })zoomControlFrame;
- (double)zoomFactorAtPinchStart;
- (id)zoomSlider;
- (void)zoomSliderDidBeginAutozooming:(id)arg1;
- (void)zoomSliderDidEndAutozooming:(id)arg1;
- (void)zoomSliderDidEndZooming:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })zoomSliderFrame;
- (void)zoomSliderValueDidChange:(id)arg1 forEvent:(id)arg2;

@end
