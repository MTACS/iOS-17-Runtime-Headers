
@interface DYCaptureArchive : NSObject <DYCaptureStore> {
    NSObject<OS_dispatch_group> * _add_group;
    NSMutableDictionary * _aliasCreationMap;
    int  _backingStoreFD;
    long long  _backingStoreSize;
    long long  _backingStoreWritePosition;
    int  _blocking_readers;
    unsigned long long  _cacheSize;
    struct vector<DYCaptureArchiveCacheEntry, std::allocator<DYCaptureArchiveCacheEntry>> { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<DYCaptureArchiveCacheEntry *, std::allocator<DYCaptureArchiveCacheEntry>> { 
            struct { /* ? */ } *__value_; 
        } __end_cap_; 
    }  _cacheTable;
    bool  _deleteOnClose;
    struct { unsigned int x1; union { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; long long x3; unsigned int x4; unsigned int x5; } * _file_table;
    unsigned int  _file_table_capacity;
    struct { unsigned int x1; unsigned int x2; unsigned int x3; } * _hash_table;
    struct { 
        unsigned int fourcc; 
        unsigned int version; 
        unsigned int hash_table_length; 
        unsigned int file_table_length; 
        unsigned int name_table_length; 
    }  _header;
    NSObject<OS_dispatch_semaphore> * _lock_global_semaphore;
    int  _lock_readers;
    NSMutableDictionary * _metadata;
    bool  _modified;
    struct { unsigned short x1; } * _name_table;
    unsigned int  _name_table_capacity;
    unsigned int  _open_file_count;
    unsigned long long  _options;
    struct atomic<unsigned long> { 
        struct __cxx_atomic_impl<unsigned long, std::__cxx_atomic_base_impl<unsigned long>> { 
            _Atomic unsigned long long __a_value; 
        } __a_; 
    }  _preloadAtomicIndex;
    void * _read_buffer;
    long long  _read_buffer_capacity;
    NSObject<OS_dispatch_semaphore> * _read_buffer_sem;
    struct vector<unsigned int, std::allocator<unsigned int>> { 
        unsigned int *__begin_; 
        unsigned int *__end_; 
        struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { 
            unsigned int *__value_; 
        } __end_cap_; 
    }  _read_buffer_tokens;
    int  _read_buffer_tokens_lock;
    char * _scratch;
    unsigned long long  _scratchSize;
    void * _store_write_buffer;
    void * _store_write_ptr;
    unsigned long long  _string_table_capacity;
    id * _string_table_nscache;
    unsigned long long * _string_table_offsets;
    void * _string_table_storage;
    NSURL * _url;
    bool  _useCache;
    struct __CFUUID { } * _uuid;
    NSObject<OS_dispatch_queue> * _write_queue;
}

@property (getter=isClosed, nonatomic, readonly) bool closed;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deleteOnClose;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, retain) NSString *path;
@property (getter=isReadOnly, nonatomic, readonly) bool readOnly;
@property (readonly) Class superclass;
@property (nonatomic, readonly, retain) NSURL *url;
@property (nonatomic, readonly) struct __CFUUID { }*uuid;

+ (bool)accessInstanceVariablesDirectly;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (unsigned long long)contextFromFilename:(id)arg1;
+ (id)coreArchiveBundleFilesPredicate;
+ (id)createArchiveInTemporaryDirectory:(id*)arg1;
+ (id)createArchiveInTemporaryDirectoryWithName:(id)arg1 deleteOnClose:(bool)arg2 error:(id*)arg3;
+ (id)createArchiveInTemporaryDirectoryWithName:(id)arg1 error:(id*)arg2;
+ (id)getReturnAllFilesPredicate;
+ (id)internalFilenamePredicate;
+ (bool)isFunctionStreamFilename:(id)arg1;
+ (bool)isInternalFilename:(id)arg1;
+ (bool)isNotSpecialFilename:(id)arg1;
+ (id)standardFunctionStreamFilenamePredicate;
+ (id)standardFunctionStreamFilenamePrefixes;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_cleanBytes:(unsigned long long)arg1 andSkip:(struct { unsigned long long x1; unsigned long long x2; int x3; id x4; }*)arg2;
- (id)_copyDataForFilePosition:(unsigned long long)arg1 error:(id*)arg2;
- (bool)_createNewArchiveAtPath:(id)arg1 error:(id*)arg2;
- (unsigned int)_createNewFileEntry;
- (unsigned int)_createNewHashEntry:(const char *)arg1 didGrowTable:(bool*)arg2;
- (unsigned int)_createNewNameEntry;
- (void)_fileObjectDidDeallocate;
- (void)_fileObjectDidInitialize;
- (struct { unsigned int x1; union { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; long long x3; unsigned int x4; unsigned int x5; }*)_fileTable;
- (void)_fillStringTableNSCacheForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned int)_findHashEntry:(const char *)arg1;
- (bool)_flushWriteBuffer:(id*)arg1;
- (id)_getCFilename:(id)arg1 outSize:(unsigned long long*)arg2 error:(id*)arg3;
- (bool)_getInfo:(struct { unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; }*)arg1 forFilePosition:(unsigned long long)arg2 error:(id*)arg3;
- (void)_growHashTable;
- (struct { unsigned int x1; unsigned int x2; unsigned int x3; }*)_hashTable;
- (struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; }*)_header;
- (bool)_loadArchiveAtPath:(id)arg1 error:(id*)arg2;
- (struct { unsigned short x1; }*)_nameTable;
- (bool)_performAddAlias:(id)arg1 targetting:(id)arg2 error:(id*)arg3;
- (unsigned int)_performAddFileWithName:(id)arg1 dataSize:(unsigned int)arg2 error:(id*)arg3;
- (unsigned int)_performAddFileWithName:(id)arg1 dataSize:(unsigned int)arg2 withFlags:(unsigned int)arg3 error:(id*)arg4;
- (bool)_performCommit:(id*)arg1;
- (void)_performEmptyStringTableNSCache;
- (bool)_performFinalizeAddFileAtPosition:(unsigned int)arg1 name:(id)arg2 data:(id)arg3 error:(id*)arg4;
- (bool)_performReplaceDataOfFile:(id)arg1 withData:(id)arg2 error:(id*)arg3;
- (void)_printUsage;
- (long long)_readDataForFilePosition:(unsigned long long)arg1 buffer:(void*)arg2 size:(unsigned long long)arg3 error:(id*)arg4;
- (id)_readRawDataForFilePosition:(unsigned int)arg1 error:(id*)arg2;
- (bool)_requestDataForFilePosition:(unsigned long long)arg1 buffer:(void**)arg2 size:(unsigned long long*)arg3 error:(id*)arg4;
- (unsigned long long)_reserveStringStorageSize:(unsigned long long)arg1;
- (id)_resolveCFilename:(const char *)arg1 error:(id*)arg2;
- (void)_springCleaning;
- (int)_storeFileDescriptor;
- (unsigned long long*)_stringTableOffsets;
- (void*)_stringTableStorage;
- (void)_swapFileTable;
- (void)_swapHashTable;
- (void)_swapNameTable;
- (int)_tryAgain:(struct { unsigned long long x1; unsigned long long x2; int x3; id x4; }*)arg1;
- (long long)_writeBufferToBackingStore:(const void*)arg1 size:(long long)arg2 error:(id*)arg3;
- (bool)_writeIndexInPath:(id)arg1 error:(id*)arg2;
- (bool)_writeMetadataInPath:(id)arg1 error:(id*)arg2;
- (bool)acceptCaptureVisitor:(id)arg1;
- (bool)addAlias:(id)arg1 forName:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (bool)addAlias:(id)arg1 forName:(id)arg2 options:(id)arg3 error:(id*)arg4 waitUntilDone:(bool)arg5;
- (bool)addCaptureFile:(id)arg1 options:(id)arg2 error:(id*)arg3 waitUntilDone:(bool)arg4;
- (bool)addFileWithName:(id)arg1 data:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (bool)addFileWithName:(id)arg1 data:(id)arg2 options:(id)arg3 error:(id*)arg4 waitUntilDone:(bool)arg5;
- (bool)addFilesFromArchive:(id)arg1 error:(id*)arg2 passingTest:(id /* block */)arg3;
- (bool)addTempFileWithName:(id)arg1 options:(id)arg2 fromLocation:(id)arg3 error:(id*)arg4;
- (bool)adjunctFileExistsForFilename:(id)arg1 error:(id*)arg2;
- (void*)allocateAndReadDataForFilenameBuffer:(const char *)arg1 outSize:(unsigned long long*)arg2 error:(id*)arg3;
- (bool)allocatePageAlignedMemory:(void**)arg1 forFilePosition:(unsigned long long)arg2 error:(id*)arg3;
- (void)cacheAllResources;
- (void)close;
- (bool)commit:(id*)arg1;
- (bool)commitForExport:(id*)arg1 progressHandler:(id /* block */)arg2;
- (id)copyAdjunctDataForFilename:(id)arg1 error:(id*)arg2;
- (id)copyDataForFilePosition:(unsigned long long)arg1 error:(id*)arg2;
- (id)copyDataForFilename:(id)arg1 error:(id*)arg2;
- (id)copyDataForFilenameBuffer:(const char *)arg1 error:(id*)arg2;
- (unsigned long long)countOfFilenames;
- (void)dealloc;
- (bool)deleteOnClose;
- (void)discardAndClose;
- (bool)fileExistsForFilename:(id)arg1 error:(id*)arg2;
- (bool)fileExistsForFilenameBuffer:(const char *)arg1 error:(id*)arg2;
- (id)filenamesAtIndexes:(id)arg1;
- (id)filenamesWithPredicate:(id)arg1 error:(id*)arg2;
- (id)filenamesWithPrefix:(id)arg1 error:(id*)arg2;
- (id)getFilenameForFilePosition:(unsigned long long)arg1 error:(id*)arg2;
- (void)getFilenames:(id*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)getInfo:(struct { unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; }*)arg1 forFilePosition:(unsigned long long)arg2 error:(id*)arg3;
- (bool)getInfo:(struct { unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; }*)arg1 forFilename:(id)arg2 error:(id*)arg3;
- (bool)getInfo:(struct { unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; }*)arg1 forFilenameBuffer:(const char *)arg2 error:(id*)arg3;
- (struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *x_3_1_1; } x3; })getSortedFilePositionsForDataCaching;
- (id)init;
- (void)initCache;
- (id)initWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)isClosed;
- (bool)isReadOnly;
- (id)metadataValueForKey:(id)arg1;
- (id)objectInFilenamesAtIndex:(unsigned long long)arg1;
- (id)openFileWithFilename:(id)arg1 error:(id*)arg2;
- (id)path;
- (long long)readDataForFilePosition:(unsigned long long)arg1 buffer:(void*)arg2 size:(unsigned long long)arg3 error:(id*)arg4;
- (long long)readDataForFilename:(id)arg1 buffer:(void*)arg2 size:(unsigned long long)arg3 error:(id*)arg4;
- (long long)readDataForFilenameBuffer:(const char *)arg1 buffer:(void*)arg2 size:(unsigned long long)arg3 error:(id*)arg4;
- (void)releaseBytesForFilePosition:(unsigned long long)arg1;
- (bool)replaceDataOfFile:(id)arg1 withData:(id)arg2 error:(id*)arg3;
- (bool)requestBuffer:(void**)arg1 forFilePosition:(unsigned long long)arg2 cacheEntry:(struct { unsigned long long x1; unsigned long long x2; int x3; id x4; }*)arg3 needsData:(bool*)arg4 error:(id*)arg5;
- (bool)requestDataForFilePosition:(unsigned long long)arg1 buffer:(void**)arg2 size:(unsigned long long*)arg3 error:(id*)arg4;
- (void)resizeCache;
- (id)resolveFilename:(id)arg1 error:(id*)arg2;
- (void)setDeleteOnClose:(bool)arg1;
- (void)setMetadataFromArchive:(id)arg1;
- (bool)setMetadataValue:(id)arg1 forKey:(id)arg2 error:(id*)arg3;
- (void)setTargetQueue:(id)arg1;
- (bool)storeAdjunctData:(id)arg1 filename:(id)arg2 error:(id*)arg3;
- (bool)updateDataReferenceCounts:(id)arg1 error:(id*)arg2;
- (id)url;
- (struct __CFUUID { }*)uuid;

@end
