
@interface VKMapView : CALayer {
    struct VKEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  _animatingToEdgeInsets;
    unsigned char  _applicationState;
    long long  _applicationUILayout;
    MDARController * _arController;
    struct _retain_ptr<VKARWalkingCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKARWalkingCameraController *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _arWalkingCameraController;
    VKMapCanvas * _canvas;
    bool  _compressedBuildingsEnabled;
    VKDaVinciCameraController * _davinciMapCameraController;
    bool  _didFinishSnapshotting;
    struct unique_ptr<md::DisplayOptions, std::default_delete<md::DisplayOptions>> { 
        struct __compressed_pair<md::DisplayOptions *, std::default_delete<md::DisplayOptions>> { 
            struct DisplayOptions {} *__value_; 
        } __ptr_; 
    }  _displayOptions;
    bool  _displayStyleOverrideEnabled;
    unsigned char  _displayedSearchResultsType;
    VKTimedAnimation * _edgeInsetAnimation;
    unsigned char  _emphasis;
    int  _flyoverMode;
    VKClassicGlobeCanvas * _globe;
    bool  _isChangingCenterPointWithoutAnimating;
    bool  _isChangingMapType;
    bool  _isInBackground;
    struct optional<geo::Unit<geo::RadianUnitDescription, double>> { 
        union { 
            BOOL __null_state_; 
            struct Unit<geo::RadianUnitDescription, double> { 
                double _value; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _lastAnimatedCourse;
    struct optional<geo::Coordinate3D<geo::Radians, double>> { 
        union { 
            BOOL __null_state_; 
            struct Coordinate3D<geo::Radians, double> { 
                struct Unit<geo::RadianUnitDescription, double> { 
                    double _value; 
                } latitude; 
                struct Unit<geo::RadianUnitDescription, double> { 
                    double _value; 
                } longitude; 
                struct Unit<geo::MeterUnitDescription, double> { 
                    double _value; 
                } altitude; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _lastAnimatedUserCoordinate;
    bool  _lastEnableAdvancedLighting;
    bool  _lastEnableAdvancedWater;
    bool  _lastEnableBuildingHeights;
    bool  _lastEnableColorizedBuildings;
    bool  _lastEnableGlobe;
    bool  _lastEnableRoundedBuildings;
    long long  _lastTerrainMode;
    bool  _loaderOpen;
    struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKManifestTileGroupObserverProxy *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _manifestTileGroupObserverProxy;
    VKMapCameraController * _mapCameraController;
    <VKMapViewDelegate> * _mapDelegate;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _mapDelegateMutex;
    struct { 
        unsigned char timePeriod; 
        unsigned char overlayType; 
        unsigned char applicationState; 
        unsigned char searchResultsType; 
        bool mapHasLabels; 
    }  _mapDisplayStyle;
    struct unique_ptr<md::MapEngine, md::MapEngineDeleter> { 
        struct __compressed_pair<md::MapEngine *, md::MapEngineDeleter> { 
            struct MapEngine {} *__value_; 
        } __ptr_; 
    }  _mapEngine;
    unsigned char  _mapKitClientMode;
    unsigned char  _mapKitUsage;
    struct optional<VKMapType> { 
        bool _hasValue; 
        union ValueUnion { 
            unsigned char data[4]; 
            int type; 
        } _value; 
    }  _mapType;
    NSMutableArray * _mapsFeatureListeners;
    unsigned char  _mapsUsage;
    VKMetrics * _metrics;
    struct _retain_ptr<VKMuninCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKMuninCameraController *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _muninCameraController;
    unsigned long long  _navCameraMode;
    VKNavContext * _navContext;
    VKNavCameraController * _navigationCameraController;
    long long  _navigationDisplayRate;
    VKNotificationObserver * _notificationObserver;
    GEOPOICategoryFilter * _pointsOfInterestFilter;
    VKRouteContext * _routeContext;
    struct _retain_ptr<NSSet<NSNumber *> *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        NSSet *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _selectedBuildingFeatureIds;
    struct _retain_ptr<VKStateCaptureHandler *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKStateCaptureHandler *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _stateCaptureHandler;
    unsigned char  _thermalLevel;
    int  _thermalNotificationToken;
    unsigned long long  _thermalPressureLevel;
    NSString * _tileLoaderClientID;
    unsigned char  _usage;
    VKPuckAnimator * _userLocationAnimator;
    double  _verticalYaw;
    struct _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKCamera *_obj; 
        struct _retain_objc_arc { } _retain; 
        struct _release_objc_arc { } _release; 
    }  _vkCamera;
}

@property (nonatomic, readonly) double altitude;
@property (getter=isAnimatingToTrackAnnotation, nonatomic, readonly) bool animatingToTrackAnnotation;
@property (nonatomic) struct { bool x1; double x2; bool x3; bool x4; } annotationTrackingBehavior;
@property (nonatomic) unsigned char applicationState;
@property (nonatomic) long long applicationUILayout;
@property (nonatomic) <VKMapViewCameraDelegate> *cameraDelegate;
@property (nonatomic, readonly) bool canEnter3DMode;
@property (nonatomic, readonly) bool canShowFlyover;
@property (nonatomic, readonly) bool canShowFlyoverAnimation;
@property (nonatomic, readonly) struct { double x1; double x2; double x3; } centerCoordinate;
@property (nonatomic) bool compressedBuildingsEnabled;
@property (nonatomic) bool debugLayoutContinuously;
@property (nonatomic) long long displayRate;
@property (nonatomic) unsigned char displayedSearchResultsType;
@property (nonatomic) struct VKEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property (nonatomic) bool enableAdvancedLighting;
@property (nonatomic) bool enableAdvancedWater;
@property (nonatomic) bool enableBuildingHeights;
@property (nonatomic) bool enableColorizedBuildings;
@property (nonatomic, readonly) bool enableDebugLabelHighlighting;
@property (nonatomic) bool enableGlobe;
@property (nonatomic) bool enableRoundedBuildings;
@property (nonatomic, readonly) int flyoverMode;
@property (nonatomic, retain) VKPolylineOverlay *focusedLabelsPolyline;
@property (getter=isFullyDrawn, nonatomic, readonly) bool fullyDrawn;
@property (nonatomic) struct VKEdgeInsets { float x1; float x2; float x3; float x4; } fullyOccludedEdgeInsets;
@property (getter=isFullyPitched, nonatomic, readonly) bool fullyPitched;
@property (getter=isGesturing, nonatomic) bool gesturing;
@property (nonatomic, readonly) bool hasTraffic;
@property (nonatomic, readonly) double heading;
@property (nonatomic, retain) CADisplay *hostDisplay;
@property (nonatomic) bool iconsShouldAlignToPixels;
@property (nonatomic, readonly) bool isCameraInHikingBoundary;
@property (nonatomic, readonly) bool isCameraInHikingBufferRegion;
@property (nonatomic) bool isMKRenderingSelectionBalloon;
@property (nonatomic) bool isPitchable;
@property (nonatomic, readonly) bool isShowingCuratedElevatedGround;
@property (nonatomic) struct VKEdgeInsets { float x1; float x2; float x3; float x4; } labelEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x1; float x2; float x3; float x4; } labelEdgeWidths;
@property (getter=isLabelMarkerSelectionEnabled, nonatomic) bool labelMarkerSelectionEnabled;
@property (nonatomic, readonly) NSArray *labelMarkers;
@property (nonatomic) long long labelScaleFactor;
@property (nonatomic) bool loadMuninAvailability;
@property (nonatomic) bool localizeLabels;
@property (nonatomic, readonly) VKMapCanvas *mapCanvas;
@property (nonatomic) <VKMapViewDelegate> *mapDelegate;
@property (nonatomic) struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; } mapDisplayStyle;
@property (nonatomic, readonly) const void*mapEngine;
@property (nonatomic) unsigned char mapKitClientMode;
@property (nonatomic) unsigned char mapKitUsage;
@property (nonatomic, readonly) GEOMapRegion *mapRegion;
@property (nonatomic, readonly) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (nonatomic) int mapType;
@property (nonatomic, readonly) unsigned char mapsUsage;
@property (getter=maxPitch, nonatomic, readonly) double maxPitch;
@property (nonatomic, readonly) VKMetrics *metrics;
@property (getter=minPitch, nonatomic, readonly) double minPitch;
@property (nonatomic) unsigned long long navCameraMode;
@property (nonatomic) long long navigationDisplayRate;
@property (nonatomic) long long navigationShieldSize;
@property (getter=isOfflineRegionSelector, setter=setOfflineRegionSelector:, nonatomic) bool offlineRegionSelector;
@property (nonatomic, readonly) double pitch;
@property (getter=isPitched, nonatomic, readonly) bool pitched;
@property (nonatomic, retain) GEOPOICategoryFilter *pointsOfInterestFilter;
@property (nonatomic, readonly) double presentationYaw;
@property (nonatomic) bool renderInverseFills;
@property (nonatomic) bool renderOverlayPolygons;
@property (nonatomic) bool rendersInBackground;
@property (nonatomic, readonly) VKSceneConfiguration *sceneConfiguration;
@property (getter=getSceneState, nonatomic, readonly) unsigned long long sceneState;
@property (nonatomic, readonly) VKLabelMarker *selectedLabelMarker;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) long long shieldSize;
@property (nonatomic) bool shouldLoadFallbackTiles;
@property (nonatomic) bool shouldLoadMapMargin;
@property (getter=isShowingFlyover, nonatomic, readonly) bool showingFlyover;
@property (nonatomic) bool showsBuildings;
@property (nonatomic) bool showsHiking;
@property (nonatomic) bool showsHillshade;
@property (nonatomic) bool showsLiveEVData;
@property (nonatomic) bool showsPointLabels;
@property (nonatomic) bool showsPointsOfInterest;
@property (nonatomic) bool showsRoadLabels;
@property (nonatomic) bool showsRoadShields;
@property (nonatomic) bool showsVenues;
@property (nonatomic) bool staysCenteredDuringPinch;
@property (nonatomic) bool staysCenteredDuringRotation;
@property (nonatomic) float styleZOffsetScale;
@property (nonatomic, readonly) bool supportsGPUFrameCaptureToDestination;
@property (nonatomic) long long targetDisplay;
@property (nonatomic) long long terrainMode;
@property (nonatomic) bool trackingCameraShouldHandleGestures;
@property (nonatomic) double trackingZoomScale;
@property (nonatomic) bool trafficEnabled;
@property (nonatomic) bool trafficIncidentsEnabled;
@property (nonatomic, readonly) VKPuckAnimator *userLocationAnimator;
@property (nonatomic) struct { bool x1; } vehicleState;
@property (nonatomic) bool virtualParallaxEnabled;
@property (nonatomic, readonly) NSArray *visibleTileSets;
@property (nonatomic, readonly) double yaw;

// Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit

+ (bool)_elevatedGroundIsAvailable;
+ (bool)_elevatedGroundIsEnabled;
+ (bool)_globeIsAvailable;
+ (bool)_globeIsEnabled;
+ (void)updateUserLocationAnnotationStateForNavigationPuck:(id)arg1 isPuckEnabled:(bool)arg2 synchronizedState:(void*)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_advancedLightingAllowed;
- (bool)_advancedWaterAllowed;
- (void)_applyMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1 animated:(bool)arg2 duration:(double)arg3;
- (bool)_buildingHeightsAllowed;
- (void)_closeLoaderConnection:(bool)arg1;
- (bool)_colorizedBuildingsAllowed;
- (void)_configureDefaultSettings;
- (bool)_createDisplayLayer;
- (void)_createGlobe;
- (bool)_daVinciDataAvailable;
- (void)_forceLayoutForSuspensionSnapShot;
- (bool)_hikingIsAvailable;
- (bool)_hillshadeIsAvailable;
- (void*)_labelSettings;
- (id)_mapDelegateQueue;
- (bool)_maritimeHikingOverrideIsEnabled;
- (bool)_modernMapAllowed;
- (void)_notifyDelegateFlyoverTourLabelChanged:(id)arg1;
- (void)_postDelegateCallbackBlock:(id /* block */)arg1;
- (bool)_realTimeEVChargerIsEnabled;
- (void)_reconfigurePermissions;
- (bool)_roundedBuildingsAllowed;
- (void)_runFlyoverTourStateChange:(int)arg1 completion:(id /* block */)arg2;
- (void)_setARSession:(id)arg1;
- (void)_setFloorSwitcherZoomPadding:(float)arg1;
- (void)_setThermalPressureLevel:(unsigned long long)arg1;
- (void)_setupThermalMonitor;
- (void)_shutdownThermalMonitor;
- (void)_updateBackgroundColor;
- (void)_updateBuildingCompressionSetting;
- (void)_updateCameraThermalOptions;
- (void)_updateMapDisplayStyle;
- (void)_updateOnlyShowRoadClosures;
- (void)_updateThermalPressureLevel;
- (void)activateInternalSettings;
- (void)activeARWalkingFeatureDidUpdate:(id)arg1;
- (id)activeLogics;
- (void)addCustomFeatureDataSource:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addPersistentRouteOverlay:(id)arg1;
- (void)addRouteOverlay:(id)arg1;
- (double)altitude;
- (id /* block */)annotationCoordinateTest;
- (id /* block */)annotationRectTest;
- (struct { bool x1; double x2; bool x3; bool x4; })annotationTrackingBehavior;
- (unsigned char)applicationState;
- (long long)applicationUILayout;
- (void)arController:(id)arg1 arSessionWasInterrupted:(unsigned long long)arg2;
- (void)arController:(id)arg1 didChangeTrackingState:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (void)arController:(id)arg1 didEncounterError:(id)arg2;
- (void)arControllerSessionInterruptionEnded:(id)arg1;
- (int)arMode;
- (int)arSceneType;
- (id)arWalkingDebugOutput;
- (void)arWalkingElevationRequestFailure:(id)arg1;
- (void)arWalkingFeatureSetStateDidUpdate:(id)arg1;
- (id)attributionsForCurrentRegion;
- (bool)buildingFootprintsDisabled;
- (id)buildingMarkerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)cameraDelegate;
- (bool)canEnter3DMode;
- (bool)canEnter3DModeFlyoverForTileSize:(long long)arg1;
- (bool)canRotate;
- (bool)canShowFlyover;
- (bool)canShowFlyoverAnimation;
- (bool)canZoomInForTileSize:(long long)arg1;
- (bool)canZoomOutForTileSize:(long long)arg1;
- (bool)cancelPendingMove;
- (long long)carDisplayConfig;
- (long long)carDisplayType;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (void)clearPreviouslySelectedLabelMarker;
- (void)clearScene;
- (id)clearVenueBuildingFloorSelections;
- (struct unordered_map<unsigned int, unsigned long long, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long long>>> { struct __hash_table<std::__hash_value_type<unsigned int, unsigned long long>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, unsigned long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { void **x_1_3_1; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; } x1; })clientStyleAttributes;
- (void)closeLoaderConnection;
- (bool)compressedBuildingsEnabled;
- (id)consoleString:(bool)arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toCameraModelPointToLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toPointToLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertMapPoint:(struct { double x1; double x2; })arg1 toPointToLayer:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromLayer:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toMapPointFromLayer:(id)arg2;
- (id)currentCanvas;
- (long long)currentMapMode;
- (id)currentMarker;
- (float)currentZoomLevel;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (void)dealloc;
- (void)debugHighlightFeatureMarker:(const void*)arg1;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)debugLabelString:(bool)arg1;
- (bool)debugLayoutContinuously;
- (short)defaultFloorOrdinalForVenueBuilding:(id)arg1;
- (void)deselectFeatureId;
- (void)deselectLabelMarker;
- (void)deselectTrails;
- (void)deselectTransitLineMarker;
- (void)deselectVenuePoiFeatureId;
- (id)detailedDescription;
- (id)detailedDescriptionDictionaryRepresentation;
- (void)didEnterBackground;
- (void)didFinishDaVinciTransition;
- (void)didFinishLoadingData;
- (void)didFinishLoadingDataWithError:(id)arg1;
- (void)didFinishSnapshotting;
- (void)didPresent;
- (void)didReceiveFlushTileCaches;
- (void)didReceiveLocalChanged;
- (void)didReceiveMemoryWarning;
- (void)didReceivePowerStateChanged;
- (void)didReceiveThermalStateChanged;
- (void)didStartLoadingData;
- (void)didUpdateSceneStatus:(unsigned char)arg1;
- (void)didUpdateVerticalYawTo:(double)arg1;
- (void)disableMapDisplayStyleDebugOverride;
- (void)disableTestStatistics;
- (void)disableTileStatistics;
- (long long)displayRate;
- (bool)displayedFloorIsDefaultForVenueBuilding:(id)arg1;
- (short)displayedFloorOrdinalForVenueBuilding:(id)arg1;
- (unsigned char)displayedSearchResultsType;
- (double)distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 fromLayer:(id)arg3 withPrecision:(long long)arg4;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (unsigned char)emphasis;
- (bool)enableAdvancedLighting;
- (bool)enableAdvancedWater;
- (bool)enableBuildingHeights;
- (bool)enableColorizedBuildings;
- (bool)enableDebugLabelHighlighting;
- (bool)enableGlobe;
- (void)enableMapDisplayStyleDebugOverride:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (bool)enableRoundedBuildings;
- (void)enableTestStatistics;
- (void)enableTileStatistics;
- (void)enableViewDataLoading:(bool)arg1;
- (void)enter3DMode;
- (void)enterARModeAtCoordinate:(struct { double x1; double x2; })arg1;
- (void)enterARWalking:(id)arg1;
- (void)enterMuninForMarker:(id)arg1 withHeading:(double)arg2;
- (void)enterMuninForStorefrontView:(id)arg1 secondaryStorefrontView:(id)arg2;
- (void)exit3DMode;
- (void)exitARMode;
- (void)exitARWalking;
- (void)flushTileLoads;
- (int)flyoverMode;
- (id)focusedLabelsPolyline;
- (void)forceCameraUpdateForFrameResize;
- (void)forceFrame;
- (void)forceLayout;
- (void)forceResolveCameraController;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })fullyOccludedEdgeInsets;
- (long long)getCurrentSetARInterfaceOrientation;
- (unsigned long long)getSceneState;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (bool)gridDisabled;
- (bool)hasTraffic;
- (double)heading;
- (id)hostDisplay;
- (id)iconForStyleAttributes:(id)arg1 contentScale:(double)arg2 size:(long long)arg3 transparent:(bool)arg4;
- (bool)iconsShouldAlignToPixels;
- (id)initShouldRasterize:(bool)arg1 inBackground:(bool)arg2 contentScale:(double)arg3 auditToken:(id)arg4 mapViewPurpose:(long long)arg5;
- (id)initShouldRasterize:(bool)arg1 inBackground:(bool)arg2 contentScale:(double)arg3 auditToken:(id)arg4 mapViewPurpose:(long long)arg5 allowsAntialiasing:(bool)arg6;
- (id)initWithDescriptor:(id)arg1;
- (void)injectDebugARFeatures:(id)arg1;
- (void)injectDebugARUserRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (bool)isAnimatingToTrackAnnotation;
- (bool)isCameraInHikingBoundary;
- (bool)isCameraInHikingBufferRegion;
- (bool)isChangingRegionWithoutAnimating;
- (bool)isDimmingBaseMap;
- (bool)isEffectivelyHidden;
- (bool)isFullyDrawn;
- (bool)isFullyPitched;
- (bool)isGesturing;
- (bool)isLabelMarkerSelectionEnabled;
- (bool)isLoadingMuninMetadata;
- (bool)isMKRenderingSelectionBalloon;
- (bool)isOfflineRegionSelector;
- (bool)isPitchable;
- (bool)isPitched;
- (bool)isPointValidForGesturing:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isShowingCuratedElevatedGround;
- (bool)isShowingFlyover;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })labelEdgeInsets;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })labelEdgeWidths;
- (void)labelManagerDidLayout;
- (void)labelMarkerDidChangeState:(const void*)arg1;
- (id)labelMarkerForCustomFeatureAnnotation:(id)arg1;
- (id)labelMarkerForCustomFeatureAnnotation:(id)arg1 dataSource:(id)arg2;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (id)labelMarkers;
- (long long)labelScaleFactor;
- (bool)labelsDisabled;
- (bool)loadMuninAvailability;
- (bool)localizeLabels;
- (void)locationInHikingToolTipRegion:(unsigned long long)arg1;
- (void)map:(id)arg1 canShowFlyoverDidChange:(bool)arg2;
- (void)map:(id)arg1 didEnterARMode:(bool)arg2;
- (void)map:(id)arg1 labelMarkerDidChangeState:(const void*)arg2;
- (void)map:(id)arg1 selectedLabelMarkerWillDisappear:(const void*)arg2;
- (id)mapCanvas;
- (void)mapController:(id)arg1 requestsDisplayRate:(long long)arg2;
- (id)mapDelegate;
- (void)mapDidFinishChangingMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (void)mapDidReloadStylesheet:(id)arg1;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })mapDisplayStyle;
- (const void*)mapEngine;
- (unsigned char)mapKitClientMode;
- (unsigned char)mapKitUsage;
- (void)mapLabelsDidLayout:(id)arg1;
- (id)mapRegion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })mapRegionBounds;
- (id)mapRegionIgnoringEdgeInsets;
- (int)mapType;
- (unsigned char)mapsUsage;
- (id)markerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)maxPitch;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
- (id)metrics;
- (double)minPitch;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
- (void)moveToFlyoverTourStartPosition:(id)arg1 duration:(double)arg2 completion:(id /* block */)arg3;
- (bool)moveToMarker:(id)arg1 withHeading:(double)arg2 animated:(bool)arg3 completionHandler:(id /* block */)arg4;
- (bool)moveToStorefrontView:(id)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)muninJunctionDidChange:(const void*)arg1 currentRoad:(const void*)arg2 localize:(bool)arg3;
- (id)muninMarkerAtCoordinate:(struct { double x1; double x2; })arg1;
- (id)muninMarkerAtCoordinate:(struct { double x1; double x2; })arg1 completeMarkerHandler:(id /* block */)arg2;
- (unsigned long long)navCameraMode;
- (void)navigationCameraReturnToPuck;
- (long long)navigationDisplayRate;
- (id)navigationPuck;
- (long long)navigationShieldSize;
- (void)nearestVenueDidChange:(const void*)arg1 building:(const void*)arg2;
- (id)onscreenImageResources;
- (void)openLoaderConnection;
- (void)panWithOffset:(struct CGPoint { double x1; double x2; })arg1 relativeToScreenPoint:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)pauseFlyoverTourAnimation;
- (void)pauseTracking;
- (void)performStylesheetDidChange;
- (double)pitch;
- (id)pointsOfInterestFilter;
- (bool)polygonsDisabled;
- (void)populateDebugNode:(void*)arg1 withOptions:(const void*)arg2;
- (id)pptTileStatisticsForMapType:(int)arg1 latitude:(double)arg2 longitude:(double)arg3 zoom:(float)arg4 width:(double)arg5 height:(double)arg6 rect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg7;
- (void)prepareFlyoverAnimation:(id)arg1 completion:(id /* block */)arg2;
- (double)presentationYaw;
- (void)projectCoordinate:(struct { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; }*)arg2;
- (struct optional<double> { union { BOOL x_1_1_1; double x_1_1_2; } x1; bool x2; })puckAnimator:(id)arg1 getElevationWithCoordinate:(const void*)arg2;
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;
- (void)puckAnimator:(id)arg1 updatedPosition:(const void*)arg2 course:(const void*)arg3;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckLocationTracingEvent:(id)arg1;
- (id)rapMarkerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)rastersDisabled;
- (void)reloadStylesheet;
- (void)removeCustomFeatureDataSource:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentRouteOverlay:(id)arg1;
- (void)removeRouteOverlay:(id)arg1;
- (void)renderInContext:(struct CGContext { }*)arg1;
- (bool)renderInverseFills;
- (bool)renderOverlayPolygons;
- (bool)rendersInBackground;
- (void)requestHikingToolTipRegionIDForLocation:(struct { double x1; double x2; })arg1;
- (void)resetTestStatistics;
- (void)resetTileStatistics;
- (id)resolveMapCameraController;
- (void)resumeFlyoverTourAnimation;
- (id)roadLabelTilesInScene;
- (bool)roadsDisabled;
- (id)routeContext;
- (void)runAnimation:(id)arg1;
- (id)sceneConfiguration;
- (id)secondaryCanvas;
- (void)selectLabelMarker:(id)arg1;
- (void)selectLabelMarker:(id)arg1 completion:(id /* block */)arg2;
- (void)selectTransitLineMarker:(id)arg1;
- (id)selectedLabelMarker;
- (void)selectedLabelMarkerWillDisappear:(const void*)arg1;
- (id)selectedTransitLineIDs;
- (void)setARInterfaceOrientation:(long long)arg1;
- (void)setARMode:(int)arg1;
- (void)setARSceneType:(int)arg1;
- (void)setARSession:(id)arg1;
- (id)setARWalkingFeatureSet:(id)arg1;
- (void)setARWalkingFeatures:(id)arg1;
- (void)setAnnotationTrackingBehavior:(struct { bool x1; double x2; bool x3; bool x4; })arg1;
- (void)setApplicationState:(unsigned char)arg1;
- (void)setApplicationState:(unsigned char)arg1 displayedSearchResultsType:(unsigned char)arg2;
- (void)setApplicationUILayout:(long long)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCameraDelegate:(id)arg1;
- (void)setCameraFramingInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (void)setCanonicalSkyHeight:(double)arg1;
- (void)setCarDisplayConfig:(long long)arg1 animated:(bool)arg2;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(id /* block */)arg6 completion:(id /* block */)arg7;
- (void)setCenterCoordinateDistanceRange:(struct { double x1; double x2; bool x3; })arg1 duration:(double)arg2 timingFunction:(id /* block */)arg3;
- (void)setClientLocalizedStrings:(id)arg1;
- (void)setCompressedBuildingsEnabled:(bool)arg1;
- (void)setContentsScale:(double)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (void)setDebugLayoutContinuously:(bool)arg1;
- (void)setDesiredMapMode:(long long)arg1;
- (void)setDimmingBaseMap:(bool)arg1;
- (void)setDimmingBaseMap:(bool)arg1 animated:(bool)arg2 duration:(double)arg3;
- (void)setDisableBuildingFootprints:(bool)arg1;
- (void)setDisableGrid:(bool)arg1;
- (void)setDisableLabels:(bool)arg1;
- (void)setDisablePolygons:(bool)arg1;
- (void)setDisableRasters:(bool)arg1;
- (void)setDisableRoads:(bool)arg1;
- (void)setDisableShadows:(bool)arg1;
- (void)setDisableTransitLines:(bool)arg1;
- (void)setDisplayRate:(long long)arg1;
- (void)setDisplayedFloorOrdinal:(short)arg1 forVenueBuilding:(id)arg2;
- (void)setDisplayedSearchResultsType:(unsigned char)arg1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1 duration:(double)arg2 timingFunction:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)setEmphasis:(unsigned char)arg1 animated:(bool)arg2;
- (void)setEnableAdvancedLighting:(bool)arg1;
- (void)setEnableAdvancedWater:(bool)arg1;
- (void)setEnableBuildingHeights:(bool)arg1;
- (void)setEnableColorizedBuildings:(bool)arg1;
- (void)setEnableGlobe:(bool)arg1;
- (void)setEnableRoundedBuildings:(bool)arg1;
- (void)setExternalTrafficFeatures:(id)arg1 areRouteTrafficFeaturesActive:(bool)arg2;
- (void)setFlyoverMode:(int)arg1;
- (void)setFocusedLabelsPolyline:(id)arg1;
- (void)setFullyOccludedEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setGesturing:(bool)arg1;
- (void)setHasVehicleHeading:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHiddenTrafficIncidentFeatures:(id)arg1;
- (void)setHostDisplay:(id)arg1;
- (void)setIconsShouldAlignToPixels:(bool)arg1;
- (void)setIsMKRenderingSelectionBalloon:(bool)arg1;
- (void)setIsPitchable:(bool)arg1;
- (void)setLabelEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setLabelEdgeWidths:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setLabelExclusionRegions:(id)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(long long)arg1;
- (void)setLoadMuninAvailability:(bool)arg1;
- (void)setLoadMuninMetadata:(bool)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setMapDelegate:(id)arg1;
- (void)setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (void)setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1 animated:(bool)arg2;
- (void)setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1 animated:(bool)arg2 duration:(double)arg3;
- (void)setMapKitClientMode:(unsigned char)arg1;
- (void)setMapKitUsage:(unsigned char)arg1;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id /* block */)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 timingCurve:(id /* block */)arg5 completion:(id /* block */)arg6;
- (void)setMapType:(int)arg1;
- (void)setMapType:(int)arg1 animated:(bool)arg2;
- (void)setModernMapEnabled:(bool)arg1;
- (void)setNavCameraMode:(unsigned long long)arg1;
- (void)setNavContext:(id)arg1;
- (void)setNavigationDisplayRate:(long long)arg1;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setNeedsLayout;
- (void)setOfflineRegionSelector:(bool)arg1;
- (void)setPointsOfInterestFilter:(id)arg1;
- (void)setPreferredUnits:(unsigned long long)arg1;
- (void)setRegionRestriction:(id)arg1 duration:(double)arg2 timingFunction:(id /* block */)arg3;
- (void)setRenderInverseFills:(bool)arg1;
- (void)setRenderOverlayPolygons:(bool)arg1;
- (void)setRendersInBackground:(bool)arg1;
- (void)setRouteContext:(id)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setScreenLabelFeatures:(id)arg1;
- (void)setSelectedBuildingFeatureIds:(id)arg1;
- (void)setSelectedFeatureId:(unsigned long long)arg1;
- (void)setSelectedTrailId:(unsigned long long)arg1;
- (void)setSelectedTrailWithId:(unsigned long long)arg1 name:(id)arg2 locale:(id)arg3;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShouldLoadFallbackTiles:(bool)arg1;
- (void)setShouldLoadMapMargin:(bool)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsHiking:(bool)arg1;
- (void)setShowsHillshade:(bool)arg1;
- (void)setShowsLiveEVData:(bool)arg1;
- (void)setShowsPointLabels:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setShowsRoadLabels:(bool)arg1;
- (void)setShowsRoadShields:(bool)arg1;
- (void)setShowsVenues:(bool)arg1;
- (void)setStaysCenteredDuringPinch:(bool)arg1;
- (void)setStaysCenteredDuringRotation:(bool)arg1;
- (void)setStyleZOffsetScale:(float)arg1;
- (void)setSupportedEVConnectorTypes:(id)arg1;
- (void)setTargetDisplay:(long long)arg1;
- (void)setTerrainMode:(long long)arg1;
- (void)setTrackingCameraShouldHandleGestures:(bool)arg1;
- (void)setTrackingZoomScale:(double)arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setTrafficIncidentsEnabled:(bool)arg1;
- (void)setUseSmallCache:(bool)arg1;
- (void)setVehicleState:(struct { bool x1; })arg1;
- (void)setVirtualParallaxEnabled:(bool)arg1;
- (void)setYaw:(double)arg1 animated:(bool)arg2;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (bool)shouldLoadFallbackTiles;
- (bool)shouldLoadMapMargin;
- (bool)showsBuildings;
- (bool)showsHiking;
- (bool)showsHillshade;
- (bool)showsLiveEVData;
- (bool)showsPointLabels;
- (bool)showsPointsOfInterest;
- (bool)showsRoadLabels;
- (bool)showsRoadShields;
- (bool)showsVenues;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(bool)arg2 completion:(id /* block */)arg3;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(bool)arg2 completion:(id /* block */)arg3;
- (void)startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 panAtStartPoint:(bool)arg2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(bool)arg2 animated:(bool)arg3 duration:(double)arg4 timingFunction:(id /* block */)arg5;
- (bool)staysCenteredDuringPinch;
- (bool)staysCenteredDuringRotation;
- (void)stopFlyoverAnimation;
- (void)stopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopSnappingAnimations;
- (void)stopTracking;
- (void)stopTrackingAnnotation;
- (float)styleZOffsetScale;
- (bool)stylesheetIsDevResource;
- (bool)supportsGPUFrameCaptureToDestination;
- (bool)supportsMapType:(int)arg1;
- (bool)supportsNightMode;
- (bool)tapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)targetDisplay;
- (long long)terrainMode;
- (id)testStatistics;
- (void)tileGroupDidChange;
- (void)tileGroupWillChange;
- (id)tileStatistics;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (bool)trackingCameraShouldHandleGestures;
- (double)trackingZoomScale;
- (bool)trafficEnabled;
- (bool)trafficIncidentsEnabled;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)transitLineMarkersInCurrentViewport;
- (bool)transitLinesDisabled;
- (void)transitionToTracking:(bool)arg1 mapMode:(long long)arg2 startLocation:(struct { double x1; double x2; })arg3 startCourse:(double)arg4 pounceCompletionHandler:(id /* block */)arg5;
- (void)updateLightingLogic;
- (void)updatePanWithTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 degrees:(double)arg2;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 newValue:(double)arg2;
- (id)userLocationAnimator;
- (struct { bool x1; })vehicleState;
- (id)venueAtLocation:(struct { double x1; double x2; })arg1;
- (id)venueAtLocation:(struct { double x1; double x2; })arg1 withMarginForError:(bool)arg2;
- (id)venueAtLocation:(struct { double x1; double x2; })arg1 withMarginForError:(bool)arg2 includeNonRevealedVenues:(bool)arg3;
- (id)venueBuildingWithFocus;
- (id)venueWithFocus;
- (id)venueWithID:(unsigned long long)arg1;
- (bool)virtualParallaxEnabled;
- (id)visibleTileSets;
- (bool)wantsTimerTick;
- (void)willBecomeFullyDrawn;
- (void)willEnterForeground;
- (void)willLayoutWithTimestamp:(double)arg1 withContext:(void*)arg2;
- (void)willStopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (float)worldSpaceWidthOfView;
- (double)yaw;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2;
- (float)zoomToRevealVenueBuildingFloorplan:(id)arg1;
- (float)zoomToRevealVenueFloorplan:(id)arg1;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

- (void)_mapkit_configureFromDefaults;
- (void)_mapkit_configureLabelSizesForContentSizeCategory:(id)arg1;

@end
