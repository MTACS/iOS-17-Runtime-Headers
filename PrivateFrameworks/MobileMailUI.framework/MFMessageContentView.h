
@interface MFMessageContentView : UIView <EFSignpostable, MFBlockedSenderBannerViewDelegate, MFHasMoreContentBannerViewDelegate, MFHideMyEmailBannerViewDelegate, MFLoadBlockedContentBannerViewDelegate, MFLoadFailedProxyContentBannerViewDelegate, MFMailDropBannerDelegate, MFMailWebProcessDelegate, MFMessageFooterViewDelegate, MFMessageHeaderViewDelegate, MFPresentationSource, MUIReusable, UIContextMenuInteractionDelegate_Private, UIPopoverPresentationControllerDelegate, UIScrollViewDelegate, WKNavigationDelegatePrivate, WKUIDelegatePrivate, _WKInputDelegate> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _activatedAttachmentRect;
    NSSet * _allRemoteURLs;
    bool  _allowLoadOfBlockedMessageContent;
    MFAddressAtomStatusManager * _atomManager;
    NSDictionary * _attachmentDragPreviews;
    NSArray * _attachments;
    bool  _automaticallyCollapseQuotedContent;
    unsigned long long  _backgroundWebProcessCrashCount;
    unsigned long long  _blockedContentTypes;
    MFBlockedSenderBannerView * _blockedSenderBanner;
    MUIBrandIndicatorProvider * _brandIndicatorProvider;
    EMCachingContactStore * _contactStore;
    <EMContentItem> * _contentItemForSaveMenu;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentItemRectForSaveMenu;
    bool  _contentPaddingFollowsLayoutMargins;
    NSError * _contentRepresentationError;
    MessageContentRepresentationRequest * _contentRequest;
    <EFCancelable> * _contentSizeObservation;
    EMDaemonInterface * _daemonInterface;
    <MFMessageContentViewDataSource> * _dataSource;
    <MFMessageContentViewDelegate> * _delegate;
    MFMessageDisplayMetrics * _displayMetrics;
    NSMutableDictionary * _failedProxyURLs;
    ConversationSearchOverlayView * _findOverlayView;
    struct { 
        unsigned int delegateRespondsToDidFinishLoadingMessages : 1; 
        unsigned int delegateRespondsToDidFinishFirstPaint : 1; 
        unsigned int delegateRespondsToDidDisplayContent : 1; 
        unsigned int delegateRespondsToDidFinishRenderingWithHeight : 1; 
        unsigned int delegateRespondsToExpandQuoteAtScrollOffset : 1; 
        unsigned int delegateRespondsToWillBeginZoomingMessage : 1; 
        unsigned int delegateRespondsToDidEndZoomingMessage : 1; 
        unsigned int delegateRespondsToDidTapRevealActionsButton : 1; 
        unsigned int delegateRespondsToDidTapUndoSendButton : 1; 
        unsigned int delegateRespondsToLoadingIndicatorDidChangeVisibility : 1; 
        unsigned int delegateRespondsToDidLoadSecurityInformation : 1; 
        unsigned int delegateRespondsToWebViewDidTerminateWithReason : 1; 
    }  _flags;
    MFConversationItemFooterView * _footerView;
    bool  _hasCompletedMoveMessageBodyAnimation;
    bool  _hasVisibleContent;
    MFMessageHeaderView * _headerView;
    UIView * _headerViewSubjectBlock;
    MFHideMyEmailBannerView * _hideMyEmailBanner;
    NSMutableSet * _inFlightURLs;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialContentOffset;
    double  _initialScale;
    bool  _initiallyZoomsToShowAllContent;
    bool  _isTextSearchActive;
    NSDate * _lastCrashDate;
    MFLoadFailedProxyContentBannerView * _loadFailedProxyContentBanner;
    MFHasMoreContentBannerView * _loadHasMoreContentBanner;
    MFLoadBlockedContentBannerView * _loadImagesHeaderBlock;
    EFCancelationToken * _loadingCancelable;
    MFMessageLoadingContext * _loadingContext;
    <EFCancelable> * _loadingIndicatorCancelable;
    <EFCancelable> * _loadingSpinnerTailspinToken;
    MFMessageContentLoadingView * _loadingView;
    MFMailDropBannerView * _mailDropBanner;
    MFMailboxProvider * _mailboxProvider;
    long long  _messageBlockingReason;
    UIViewPropertyAnimator * _moveMessageBodyPropertyAnimator;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _originalZoomInsets;
    bool  _paddingConstantsNeedUpdate;
    UIBarButtonItem * _presentedControllerDoneButtonItem;
    UIView * _previousContentSnapshot;
    UIView * _previousContentSnapshotWrapperView;
    MFQuickReplyAnimationContext * _quickReplyAnimationContext;
    MessageContentItemsHelper * _relatedItemsHelper;
    NSString * _selectedHTML;
    bool  _shouldArchiveByDefault;
    bool  _showMessageFooter;
    bool  _showingError;
    bool  _showsBanners;
    bool  _suppressContentSizeNotifications;
    bool  _suppressContentSizeNotificationsUntilFirstPaint;
    bool  _suppressScrolling;
    <EFScheduler> * _trustConfigurationScheduler;
    unsigned long long  _webProcessCrashCount;
    MFWebViewLoadingController * _webViewLoadingController;
    bool  _zoomEnabled;
}

@property (nonatomic) bool allowLoadOfBlockedMessageContent;
@property (nonatomic, retain) MFAddressAtomStatusManager *atomManager;
@property (nonatomic, retain) NSDictionary *attachmentDragPreviews;
@property (copy) NSArray *attachments;
@property (nonatomic) bool automaticallyCollapseQuotedContent;
@property (nonatomic) unsigned long long blockedContentTypes;
@property (nonatomic, retain) MUIBrandIndicatorProvider *brandIndicatorProvider;
@property (nonatomic, retain) EMCachingContactStore *contactStore;
@property (nonatomic, retain) <EMContentItem> *contentItemForSaveMenu;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentItemRectForSaveMenu;
@property (readonly) NSArray *contentItems;
@property (nonatomic) bool contentPaddingFollowsLayoutMargins;
@property (readonly) EMContentRepresentation *contentRepresentation;
@property (nonatomic, retain) NSError *contentRepresentationError;
@property (readonly) EMContentRepresentation *contentRepresentationIfAvailable;
@property (nonatomic, retain) MessageContentRepresentationRequest *contentRequest;
@property (nonatomic, retain) EMDaemonInterface *daemonInterface;
@property (nonatomic) <MFMessageContentViewDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MFMessageContentViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) MFMessageDisplayMetrics *displayMetrics;
@property (nonatomic, retain) ConversationSearchOverlayView *findOverlayView;
@property (nonatomic, readonly) MFConversationItemFooterView *footerView;
@property (nonatomic) bool hasCompletedMoveMessageBodyAnimation;
@property (nonatomic) bool hasVisibleContent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) MFMessageHeaderView *headerView;
@property (nonatomic, retain) UIView *headerViewSubjectBlock;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialContentOffset;
@property (nonatomic) double initialScale;
@property (nonatomic) bool initiallyZoomsToShowAllContent;
@property (nonatomic, retain) MFMessageLoadingContext *loadingContext;
@property (nonatomic, retain) <EFCancelable> *loadingIndicatorCancelable;
@property (getter=isLoadingIndicatorVisible, nonatomic) bool loadingIndicatorVisible;
@property (nonatomic, retain) <EFCancelable> *loadingSpinnerTailspinToken;
@property (nonatomic, retain) MFMessageContentLoadingView *loadingView;
@property (nonatomic, retain) MFMailboxProvider *mailboxProvider;
@property (nonatomic, readonly) bool mayShareToUnmanaged;
@property (nonatomic) long long messageBlockingReason;
@property (nonatomic, retain) UIViewPropertyAnimator *moveMessageBodyPropertyAnimator;
@property (nonatomic, retain) UIView *previousContentSnapshot;
@property (nonatomic, retain) MFQuickReplyAnimationContext *quickReplyAnimationContext;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, copy) NSString *selectedHTML;
@property (nonatomic) bool shouldArchiveByDefault;
@property (nonatomic, readonly) bool shouldHideStickyFooterView;
@property (nonatomic) bool showMessageFooter;
@property (nonatomic) bool showingError;
@property (nonatomic) bool showsBanners;
@property (readonly) unsigned long long signpostID;
@property (nonatomic, readonly) bool sourceIsManaged;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressScrolling;
@property (nonatomic, readonly) <EFScheduler> *trustConfigurationScheduler;
@property (nonatomic, readonly) WKWebView *webView;
@property (nonatomic, readonly) MFWebViewDictionary *webViewConstants;
@property (nonatomic, retain) MFWebViewLoadingController *webViewLoadingController;
@property (getter=isZoomEnabled, nonatomic) bool zoomEnabled;

+ (id)log;
+ (id)signpostLog;

- (void).cxx_destruct;
- (void)_addBlockedSenderBannerIfNeeded;
- (void)_addHasMoreContentBannerWithRemainingBytes:(unsigned long long)arg1;
- (void)_addHideMyEmailBannerIfNeeded;
- (void)_addLoadingSubview:(id)arg1;
- (void)_adjustHeaderOffsetForZoom;
- (double)_adjustWebViewInsetsToAccomodateHeaderAndFooter;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedRectForWebRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_alertMailDropDownloadIsTooLargeForCell:(bool)arg1;
- (bool)_allAttachmentsArePhotosOrVideos;
- (id)_attachmentPreviewsFromData:(id)arg1;
- (void)_beginObservingContentHeight;
- (id)_bodyFont;
- (void)_clearAllBannersAnimated:(bool)arg1;
- (void)_clearBlockedSenderBannerAnimated:(bool)arg1;
- (void)_clearHasMoreContentBannerAnimated:(bool)arg1;
- (void)_clearLoadFailedProxyContentBannerAnimated:(bool)arg1;
- (void)_clearLoadRemoteImagesBannerAnimated:(bool)arg1;
- (void)_commonInit;
- (void)_configureTrustEvaluationsForSignersInSecurityInformation:(id)arg1;
- (id)_contentItemForElement:(id)arg1;
- (id)_contextMenuConfigurationForAttachment:(id)arg1;
- (id)_contextMenuInteraction:(id)arg1 styleForMenuWithConfiguration:(id)arg2;
- (void)_darkerSystemColorsStatusDidChange:(id)arg1;
- (id)_dataDetectionContextForWebView:(id)arg1;
- (void)_displayDismissibleAttachmentErrorWithTitle:(id)arg1 message:(id)arg2;
- (void)_downloadAllMailDropAttachments;
- (void)_expandQuoteWithCollapsedBlockquoteOffset:(double)arg1 expandedOffset:(double)arg2;
- (bool)_firstResponderIsInWebView;
- (void)_fontSizeDidChange:(id)arg1;
- (void)_foundImageCIDAttachments:(id)arg1;
- (void)_handleAttachmentSaveMessage:(id)arg1;
- (void)_handleAttachmentTapMessage:(id)arg1;
- (void)_handleBlockSenderListChanged:(id)arg1;
- (bool)_lastCrashDateExceedsThreshhold;
- (void)_layoutFooterView;
- (void)_layoutLoadingView;
- (id)_libraryMessage;
- (void)_loadBlockedMessageContactWarning;
- (void)_loadBlockedMessageContactWarningWithRepresentation:(id)arg1;
- (void)_logRequestFinishWithSuccess:(bool)arg1;
- (id)_mailboxForBanner:(id)arg1;
- (void)_notifyDelegateScrollViewSizeChanged:(struct CGSize { double x1; double x2; })arg1;
- (bool)_objectContainsNonEmptyString:(id)arg1;
- (void)_observeBlockedSenderListChangedNotification;
- (void)_performQuickReplyMoveMessageBodyAnimationIfNeeded;
- (void)_performQuickReplySnapshotFadeOutAnimationIfNecessary;
- (void)_processDataDetectionMetricsFromResults:(id)arg1;
- (id)_quotedContentAttributionForMessage:(id)arg1;
- (void)_reevaluateTrustWithNetworkAccessAllowed;
- (void)_reloadUserStyleSheets;
- (void)_reloadWithPartiallyEncryptedMessageAllowed;
- (void)_reloadWithRemoteContentAllowed;
- (void)_removeLoadingSubview:(id)arg1;
- (void)_requestWebViewLoadWithLoadingContext:(id)arg1;
- (void)_requestWebViewLoadWithRepresentation:(id)arg1;
- (void)_resetHeaderOffsetForZoom;
- (void)_revealActionsButtonTapped;
- (void)_saveContentItemToPicker:(id)arg1;
- (void)_seeMoreButtonTapped;
- (void)_setNeedsPaddingConstantsUpdate;
- (void)_setRemoteContentToLoadWithoutProxy;
- (void)_setupWebProcessLocalizedStrings;
- (void)_showLoadFailedProxyContentBannerIfNeeded;
- (void)_showModalViewController:(id)arg1 presentationSource:(id)arg2;
- (void)_showModalViewController:(id)arg1 presentationSource:(id)arg2 forceNavigationController:(bool)arg3;
- (void)_stopObservingContentHeight;
- (id)_styleSheetWithPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 useWideLayout:(bool)arg2;
- (void)_triggerWebViewLoad;
- (void)_triggerWebViewLoadWithoutShowingContentRepresentation;
- (void)_undoSendButtonTapped;
- (void)_updateFileWrapperForAttachment:(id)arg1 contentID:(id)arg2;
- (void)_updateMinimumFontSize;
- (void)_updateWebViewPaddingConstants;
- (double)_viewportWidth;
- (id)_webView:(id)arg1 adjustedDataInteractionItemProvidersForItemProvider:(id)arg2 representingObjects:(id)arg3 additionalData:(id)arg4;
- (void)_webView:(id)arg1 contextMenuConfigurationForElement:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 session:(id)arg3 didEndWithOperation:(unsigned long long)arg4;
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 sessionWillBegin:(id)arg3;
- (long long)_webView:(id)arg1 dataOwnerForDragSession:(id)arg2;
- (long long)_webView:(id)arg1 decidePolicyForFocusedElement:(id)arg2;
- (void)_webView:(id)arg1 didInsertAttachment:(id)arg2 withSource:(id)arg3;
- (id)_webView:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)_webView:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (id)_webView:(id)arg1 previewItem:(id)arg2;
- (void)_webView:(id)arg1 renderingProgressDidChange:(unsigned long long)arg2;
- (void)_webView:(id)arg1 webContentProcessDidTerminateWithReason:(long long)arg2;
- (id)_webView:(id)arg1 willUpdateDropProposalToProposal:(id)arg2 forSession:(id)arg3;
- (void)_webViewWebProcessDidBecomeUnresponsive:(id)arg1;
- (bool)allowLoadOfBlockedMessageContent;
- (id)atomManager;
- (id)attachmentDragPreviews;
- (id)attachments;
- (bool)automaticallyCollapseQuotedContent;
- (unsigned long long)blockedContentTypes;
- (id)brandIndicatorProvider;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)clearAllDecoratedFoundText;
- (void)clearMessage;
- (void)clearSelectedHTML;
- (id)contactStore;
- (id)contentItemForSaveMenu;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentItemRectForSaveMenu;
- (id)contentItems;
- (bool)contentPaddingFollowsLayoutMargins;
- (id)contentRepresentation;
- (id)contentRepresentationError;
- (id)contentRepresentationIfAvailable;
- (id)contentRequest;
- (void)contentRequestDidReceiveContentRepresentation:(id)arg1 error:(id)arg2;
- (id)contextMenuInteraction:(id)arg1 configuration:(id)arg2 highlightPreviewForItemWithIdentifier:(id)arg3;
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)contextMenuInteraction:(id)arg1 willEndForConfiguration:(id)arg2 animator:(id)arg3;
- (id)daemonInterface;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (void)didBeginTextSearch;
- (void)didDismissBlockedSenderBannerView:(id)arg1;
- (void)didDismissHideMyEmailBannerView:(id)arg1;
- (void)didEndTextSearch;
- (void)didTapBlockedSenderBannerView:(id)arg1;
- (void)didTapHasMoreContentBannerView:(id)arg1;
- (void)didTapHideMyEmailBannerView:(id)arg1;
- (void)dismissPresentedViewController:(id)arg1;
- (id)displayMetrics;
- (id)downloadFutureForContentItem:(id)arg1;
- (id)findOverlayView;
- (id)footerView;
- (void)footerViewDidChangeHeight:(id)arg1;
- (void)generateSnapshotImageWithCompletion:(id /* block */)arg1;
- (bool)hasCompletedMoveMessageBodyAnimation;
- (bool)hasVisibleContent;
- (id)headerView;
- (void)headerViewDidChangeHeight:(id)arg1;
- (id)headerViewSubjectBlock;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })initialContentOffset;
- (double)initialScale;
- (bool)initiallyZoomsToShowAllContent;
- (bool)isLoadingIndicatorVisible;
- (bool)isZoomEnabled;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (void)loadBlockedContent;
- (void)loadBlockedContentBannerDidTriggerLoad:(id)arg1;
- (void)loadFailedProxyContentBannerDidTriggerLoad:(id)arg1;
- (void)loadFailedProxyContentBannerWasDismissed:(id)arg1;
- (void)loadHasMoreContentBannerIfNecessary;
- (id)loadingContext;
- (id)loadingIndicatorCancelable;
- (id)loadingSpinnerTailspinToken;
- (id)loadingView;
- (void)mailDropBannerDidTriggerDownload:(id)arg1;
- (id)mailboxProvider;
- (bool)mayShareToUnmanaged;
- (long long)messageBlockingReason;
- (void)mf_setAsSourceForPopoverPresentationController:(id)arg1;
- (void)mf_setAsTargetedSourceOnSceneConfiguration:(id)arg1;
- (id)moveMessageBodyPropertyAnimator;
- (void)prepareForQuickReplyAnimationWithContext:(id)arg1;
- (void)prepareForReuse;
- (void)presentViewController:(id)arg1;
- (void)presentationController:(id)arg1 willPresentWithAdaptiveStyle:(long long)arg2 transitionCoordinator:(id)arg3;
- (id)presentedControllerDoneButtonItem;
- (id)previousContentSnapshot;
- (id)quickReplyAnimationContext;
- (void)reload;
- (void)removeQuickReplyAnimationContextIfNecessary;
- (void)requestRectForFoundTextRange:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)sceneMovedToForeground;
- (id)scrollView;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)selectAll:(id)arg1;
- (id)selectedHTML;
- (void)setAllowLoadOfBlockedMessageContent:(bool)arg1;
- (void)setAtomManager:(id)arg1;
- (void)setAttachmentDragPreviews:(id)arg1;
- (void)setAttachments:(id)arg1;
- (void)setAutomaticallyCollapseQuotedContent:(bool)arg1;
- (void)setAutomaticallyCollapseQuotedContent:(bool)arg1 reloadIfNeeded:(bool)arg2;
- (void)setBlockedContentTypes:(unsigned long long)arg1;
- (void)setBrandIndicatorProvider:(id)arg1;
- (void)setContactStore:(id)arg1;
- (void)setContentItemForSaveMenu:(id)arg1;
- (void)setContentItemRectForSaveMenu:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentPaddingFollowsLayoutMargins:(bool)arg1;
- (void)setContentRepresentationError:(id)arg1;
- (void)setContentRequest:(id)arg1;
- (void)setDaemonInterface:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayMetrics:(id)arg1;
- (void)setFindOverlayView:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasCompletedMoveMessageBodyAnimation:(bool)arg1;
- (void)setHasVisibleContent:(bool)arg1;
- (void)setHeaderViewSubjectBlock:(id)arg1;
- (void)setInitialContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInitialScale:(double)arg1;
- (void)setInitiallyZoomsToShowAllContent:(bool)arg1;
- (void)setLoadingContext:(id)arg1;
- (void)setLoadingIndicatorCancelable:(id)arg1;
- (void)setLoadingIndicatorVisible:(bool)arg1;
- (void)setLoadingIndicatorVisible:(bool)arg1 animated:(bool)arg2;
- (void)setLoadingSpinnerTailspinToken:(id)arg1;
- (void)setLoadingView:(id)arg1;
- (void)setMailboxProvider:(id)arg1;
- (void)setMessageBlockingReason:(long long)arg1;
- (void)setMoveMessageBodyPropertyAnimator:(id)arg1;
- (void)setPreviousContentSnapshot:(id)arg1;
- (void)setQuickReplyAnimationContext:(id)arg1;
- (void)setSelectedHTML:(id)arg1;
- (void)setShouldArchiveByDefault:(bool)arg1;
- (void)setShowMessageFooter:(bool)arg1;
- (void)setShowingError:(bool)arg1;
- (void)setShowsBanners:(bool)arg1;
- (void)setSuppressScrolling:(bool)arg1;
- (void)setWebViewLoadingController:(id)arg1;
- (void)setZoomEnabled:(bool)arg1;
- (bool)shouldArchiveByDefault;
- (bool)shouldHideStickyFooterView;
- (void)showDelayedProgressUI;
- (bool)showMessageFooter;
- (void)showSearchResultsAtRange:(id)arg1 usingStyle:(unsigned long long)arg2;
- (bool)showingError;
- (bool)showsBanners;
- (unsigned long long)signpostID;
- (bool)sourceIsManaged;
- (bool)suppressScrolling;
- (id)trustConfigurationScheduler;
- (void)updateForRedisplay;
- (id)viewForZoomingInScrollView:(id)arg1;
- (id)viewPrintFormatter;
- (void)webProcessDidBlockLoadingResourceWithURL:(id)arg1;
- (void)webProcessDidCreateBrowserContextControllerLoadDelegate;
- (void)webProcessDidFailLoadingResourceWithURL:(id)arg1;
- (void)webProcessDidFinishDocumentLoadForURL:(id)arg1 andRequestedRemoteURLs:(id)arg2;
- (void)webProcessDidFinishLoadForURL:(id)arg1;
- (void)webProcessFailedToLoadResourceWithProxyForURL:(id)arg1 failureReason:(long long)arg2;
- (id)webView;
- (void)webView:(id)arg1 contextMenuForElement:(id)arg2 willCommitWithAnimator:(id)arg3;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 decisionHandler:(id /* block */)arg3;
- (void)webView:(id)arg1 decidePolicyForNavigationResponse:(id)arg2 decisionHandler:(id /* block */)arg3;
- (void)webView:(id)arg1 didCommitNavigation:(id)arg2;
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;
- (void)webView:(id)arg1 showLockdownModeFirstUseMessage:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)webViewConstants;
- (id)webViewLoadingController;

@end
