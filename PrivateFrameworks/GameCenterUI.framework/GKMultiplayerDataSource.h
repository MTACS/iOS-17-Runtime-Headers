
@interface GKMultiplayerDataSource : GKBasicCollectionViewDataSource <UICollectionViewDelegateFlowLayout> {
    bool  _autoMatching;
    bool  _automatchAddedToMinInHeader;
    long long  _automatchPlayerCount;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _automatchPlayerCountLock;
    long long  _automatchPlayersAddedByUser;
    <GKMultiplayerDataSourceDelegate> * _delegate;
    GKGame * _game;
    long long  _implicitAutomatchPlayerCount;
    bool  _invitingEnabled;
    long long  _maxPlayers;
    long long  _minPlayers;
    NSMutableOrderedSet * _orderedPlayerIDList;
    GKMultiplayerParticipant * _placeholderItem;
    NSMutableDictionary * _playerStatus;
    NSMutableOrderedSet * _players;
    bool  _removingEnabled;
    NSSet * _selectedMessageGroups;
    bool  _sharePlayEnabled;
}

@property (nonatomic, readonly) bool autoMatching;
@property (nonatomic) bool automatchAddedToMinInHeader;
@property (nonatomic) long long automatchPlayerCount;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } automatchPlayerCountLock;
@property (nonatomic) long long automatchPlayersAddedByUser;
@property (nonatomic, readonly) bool canCancelCurrentMatchmaking;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <GKMultiplayerDataSourceDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) GKGame *game;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool haveNonGuestPlayers;
@property (nonatomic) long long implicitAutomatchPlayerCount;
@property (nonatomic) bool invitingEnabled;
@property (nonatomic) long long maxPlayers;
@property (nonatomic) long long minPlayers;
@property (nonatomic, retain) NSMutableOrderedSet *orderedPlayerIDList;
@property (nonatomic, readonly) NSArray *participants;
@property (nonatomic, retain) GKMultiplayerParticipant *placeholderItem;
@property (nonatomic, retain) NSMutableDictionary *playerStatus;
@property (nonatomic, retain) NSMutableOrderedSet *players;
@property (nonatomic) bool removingEnabled;
@property (nonatomic, retain) NSSet *selectedMessageGroups;
@property (nonatomic) bool sharePlayEnabled;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)addPlayers:(id)arg1 withStatus:(long long)arg2 complete:(id /* block */)arg3;
- (void)addPlayers:(id)arg1 withStatus:(long long)arg2 replaceAutomatches:(bool)arg3 complete:(id /* block */)arg4;
- (bool)autoMatching;
- (bool)automatchAddedToMinInHeader;
- (long long)automatchPlayerCount;
- (struct os_unfair_lock_s { unsigned int x1; })automatchPlayerCountLock;
- (long long)automatchPlayersAddedByUser;
- (bool)canCancelCurrentMatchmaking;
- (void)clearDataSource;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (id)collectionViewDebugDescription;
- (void)configureCollectionView:(id)arg1;
- (id)connectingPlayers;
- (id)currentPlayers;
- (id)currentPlayersDebugDescription;
- (id)currentPlayersNotInvitedViaMessages;
- (id)currentRemotePlayers;
- (id)delegate;
- (void)didChangeMode;
- (void)failedToInvitePlayers:(id)arg1;
- (id)firstInvitedContactPlayer;
- (id)game;
- (id)guestPlayers;
- (bool)haveNonGuestPlayers;
- (bool)havePendingPlayers;
- (long long)implicitAutomatchPlayerCount;
- (id)init;
- (bool)invitingEnabled;
- (long long)maxAvailablePlayers;
- (long long)maxPlayers;
- (long long)minPlayers;
- (id)orderedPlayerIDList;
- (id)participantForAutoMatchNumber:(long long)arg1;
- (id)participantForPlayer:(id)arg1;
- (bool)participantShouldBeRemovable:(id)arg1 atIndexPath:(id)arg2;
- (id)participants;
- (id)placeholderItem;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })playerRange;
- (id)playerStatus;
- (id)players;
- (id)playersDebugDescription:(id)arg1 newStatus:(long long)arg2;
- (id)playersInvited;
- (id)playersToBeInvited;
- (id)playersWithStatus:(long long)arg1;
- (void)prepopulateConversationParticipants:(id)arg1 complete:(id /* block */)arg2;
- (id)readyPlayers;
- (void)recordButtonClickAction:(id)arg1 targetId:(id)arg2;
- (void)recordRemoveFriendClickAction:(id)arg1;
- (void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2 updateNotifier:(id)arg3;
- (void)refreshParticipantsStatuses;
- (void)refreshStatusForParticipant:(id)arg1;
- (void)removePlayers:(id)arg1 complete:(id /* block */)arg2;
- (void)removePrepopulatedPlayersIfExisted:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)removingEnabled;
- (void)replacePlayers:(id)arg1 withGKPlayers:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)replacePrepopulatedPlayerWithNormalPlayer:(id)arg1 participantServerIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)reportMultiplayerSelection:(id)arg1;
- (void)restoreOrderOfPlayers;
- (void)revertFailedPlayers;
- (id)selectedMessageGroups;
- (void)setAutomatchAddedToMinInHeader:(bool)arg1;
- (void)setAutomatchPlayerCount:(long long)arg1;
- (void)setAutomatchPlayerCount:(long long)arg1 complete:(id /* block */)arg2;
- (void)setAutomatchPlayerCountLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setAutomatchPlayersAddedByUser:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGame:(id)arg1;
- (void)setImplicitAutomatchPlayerCount:(long long)arg1;
- (void)setInvitingEnabled:(bool)arg1;
- (void)setMaxPlayers:(long long)arg1;
- (void)setMinPlayers:(long long)arg1;
- (void)setOrderedPlayerIDList:(id)arg1;
- (void)setParticipantsWithPlayers:(id)arg1 automatchPlayerCount:(long long)arg2 shouldUpdateAutomatchPlayerCount:(bool)arg3 andStatuses:(id)arg4 complete:(id /* block */)arg5;
- (void)setPlaceholderItem:(id)arg1;
- (void)setPlayerStatus:(id)arg1;
- (void)setPlayers:(id)arg1;
- (void)setRemovingEnabled:(bool)arg1;
- (void)setSelectedMessageGroups:(id)arg1;
- (void)setSharePlayEnabled:(bool)arg1;
- (void)setStatus:(long long)arg1 forPlayers:(id)arg2 complete:(id /* block */)arg3;
- (void)setStatus:(long long)arg1 forPlayers:(id)arg2 uuid:(id)arg3;
- (bool)sharePlayEnabled;
- (id)shareplayInvitedPlayers;
- (id)shareplayPrepopulatedPlayers;
- (bool)shouldRevertStatus:(long long)arg1;
- (bool)shouldUpdateStatus:(long long)arg1 withNewStatus:(long long)arg2;
- (long long)statusForPlayer:(id)arg1;
- (void)updateDataStructuresForRemovedPlayer:(id)arg1;
- (void)updateParticipants;

@end
