
@interface NCFullScreenPresentableViewController : UIViewController <BNPresentable, BNPresentableObservable, NCNotificationRequestPresenting, NCNotificationStaticContentProvidingDelegate, UIViewControllerAnimatedTransitioning> {
    MTMaterialView * _backgroundMaterialView;
    UIView * _backgroundOpaqueView;
    NCFullScreenStagingBannerView * _bannerView;
    <NCFullScreenPresentableViewControllerDelegate> * _delegate;
    long long  _detailStageTransitionRemainingAttempts;
    NSTimer * _detailStageTransitionTimer;
    NSString * _dismissalRequestReason;
    NCNotificationRequest * _notificationRequest;
    NSHashTable * _observers;
    bool  _panning;
    NSMapTable * _reasonsToTransitionBlockingAssertions;
    NCFullScreenPresentableTransitioningDelegate * _transitioningDelegate;
}

@property (nonatomic, readonly, copy) NSSet *activeTransitionBlockingAssertions;
@property (getter=_backgroundMaterialView, nonatomic, readonly) MTMaterialView *backgroundMaterialView;
@property (getter=_backgroundOpaqueView, nonatomic, readonly) UIView *backgroundOpaqueView;
@property (nonatomic, readonly) long long bannerStage;
@property (getter=_bannerView, nonatomic, readonly) NCFullScreenStagingBannerView *bannerView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NCFullScreenPresentableViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDraggingDismissalEnabled, nonatomic, readonly) bool draggingDismissalEnabled;
@property (getter=isDraggingInteractionEnabled, nonatomic, readonly) bool draggingInteractionEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NCNotificationRequest *notificationRequest;
@property (nonatomic, readonly, copy) NSDictionary *notificationUsageTrackingState;
@property (getter=_isPanning, setter=_setPanning:, nonatomic) bool panning;
@property (nonatomic, readonly) long long presentableBehavior;
@property (nonatomic) <BNPresentableContext> *presentableContext;
@property (nonatomic, readonly) long long presentableType;
@property (nonatomic, readonly, copy) NSString *requestIdentifier;
@property (nonatomic, readonly, copy) NSString *requesterIdentifier;
@property (getter=isStaticContentLoadingComplete, readonly) bool staticContentLoadingComplete;
@property (nonatomic, readonly) <NCNotificationStaticContentProviding> *staticContentProvider;
@property (readonly) Class superclass;
@property (getter=isTouchOutsideDismissalEnabled, nonatomic, readonly) bool touchOutsideDismissalEnabled;
@property (nonatomic, readonly) UIViewController *viewController;

- (void).cxx_destruct;
- (void)_animateDismissalWithAdditionalAnimations:(id /* block */)arg1 completion:(id /* block */)arg2;
- (void)_animateTransitionToDetailStateForTrigger:(long long)arg1;
- (void)_askDelegateToExecuteAction:(id)arg1 withParameters:(id)arg2 animated:(bool)arg3;
- (id)_backgroundAnimationSettingsForStage:(long long)arg1;
- (id)_backgroundMaterialView;
- (id)_backgroundOpaqueView;
- (id)_bannerView;
- (bool)_canShowWhileLocked;
- (void)_configureBackgroundMaterialViewIfNecessary;
- (void)_configureBackgroundOpaqueViewIfNecessary;
- (void)_configureBannerViewIfNecessary;
- (void)_enumerateObserversRespondingToSelector:(SEL)arg1 usingBlock:(id /* block */)arg2;
- (void)_executeDefaultAction:(bool)arg1;
- (void)_handleBannerContentTap;
- (void)_handleBannerDefaultTap;
- (void)_invalidateDetailStageTransitionTimerIfNecessary;
- (bool)_isPanning;
- (void)_requestDismissalWithReason:(id)arg1;
- (double)_rubberbandedTranslationForTranslation:(double)arg1;
- (void)_setPanning:(bool)arg1;
- (void)_startDetailStageTransitionTimerIfNecessary;
- (id)activeTransitionBlockingAssertionForReason:(id)arg1;
- (id)activeTransitionBlockingAssertions;
- (void)addPresentableObserver:(id)arg1;
- (void)animateTransition:(id)arg1;
- (long long)bannerStage;
- (void)contentProvider:(id)arg1 performAction:(id)arg2 animated:(bool)arg3;
- (id)contentProviderTraitCollection:(id)arg1;
- (id)delegate;
- (void)draggingDidBeginWithGestureProxy:(id)arg1;
- (id)initWithNotificationRequest:(id)arg1;
- (void)invalidateStaticContent;
- (bool)isDraggingDismissalEnabled;
- (bool)isDraggingInteractionEnabled;
- (bool)isStaticContentLoadingComplete;
- (void)loadStaticContentWithCompletion:(id /* block */)arg1;
- (void)loadView;
- (id)notificationRequest;
- (id)notificationUsageTrackingState;
- (struct CGSize { double x1; double x2; })preferredContentSizeWithPresentationSize:(struct CGSize { double x1; double x2; })arg1 containerSize:(struct CGSize { double x1; double x2; })arg2;
- (long long)preferredUserInterfaceStyle;
- (void)presentableDidAppearAsBanner:(id)arg1;
- (void)presentableDidDisappearAsBanner:(id)arg1 withReason:(id)arg2;
- (void)presentableWillAppearAsBanner:(id)arg1;
- (void)presentableWillDisappearAsBanner:(id)arg1 withReason:(id)arg2;
- (void)removePresentableObserver:(id)arg1;
- (id)requestIdentifier;
- (id)requestTransitionBlockingAssertionWithReason:(id)arg1;
- (id)requesterIdentifier;
- (void)setDelegate:(id)arg1;
- (void)setNotificationRequest:(id)arg1;
- (id)staticContentProvider;
- (double)transitionDuration:(id)arg1;
- (void)userInteractionDidEndForBannerForPresentable:(id)arg1;
- (void)userInteractionWillBeginForBannerForPresentable:(id)arg1;
- (id)viewController;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewIsAppearing:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end
