
@interface AXMVisionEngine : NSObject <AXMDescribing, AXMServiceDelegate, AXMTaskDispatcherDelegate, AXMVisionEngineNodeConnectionDelegate, NSCopying, NSSecureCoding> {
    AXMService * _axMediaUtilsService;
    AXMVisionEngineCache * _cache;
    bool  _diagnosticsEnabled;
    bool  _disableResultLogging;
    NSString * _identifier;
    bool  _imageRegistrationFilteringEnabled;
    long long  _maximumQueueSize;
    long long  _minimumImageRegistrationSignalLevel;
    bool  _prioritySchedulingAllowMultipleNodeExecution;
    bool  _prioritySchedulingEnabled;
    NSObject<OS_dispatch_queue> * _queue;
    _AXMVisionEngineAnalysisTask * _queue_currentTask;
    NSMutableArray * _queue_evaluationNodes;
    AXMImageRegistrationNode * _queue_imageRegistrationNode;
    NSMutableArray * _queue_resultHandlers;
    bool  _queue_shouldNotifyServiceOfEngineConfigChange;
    NSMutableArray * _queue_sourceNodes;
    AXMSequenceRequestManager * _sequenceRequestManager;
    AXMTaskDispatcher * _taskDispatcher;
    unsigned long long  _thresholdPriority;
}

@property (nonatomic, retain) AXMService *axMediaUtilsService;
@property (nonatomic, retain) AXMVisionEngineCache *cache;
@property (nonatomic, readonly) long long cacheSize;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=areDiagnosticsEnabled, nonatomic) bool diagnosticsEnabled;
@property (nonatomic) bool disableResultLogging;
@property (nonatomic, readonly) NSArray *evaluationNodes;
@property (readonly) unsigned long long hash;
@property (copy) NSString *identifier;
@property (nonatomic) bool imageRegistrationFilteringEnabled;
@property (nonatomic, readonly) bool isCachingEnabled;
@property long long maximumQueueSize;
@property (nonatomic) long long minimumImageRegistrationSignalLevel;
@property bool prioritySchedulingAllowMultipleNodeExecution;
@property bool prioritySchedulingEnabled;
@property (nonatomic, retain) AXMSequenceRequestManager *sequenceRequestManager;
@property (nonatomic, readonly) NSArray *sourceNodes;
@property (readonly) Class superclass;
@property (nonatomic, retain) AXMTaskDispatcher *taskDispatcher;
@property unsigned long long thresholdPriority;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_invokeFullQueueResultHandlersForContext:(id)arg1;
- (void)_invokeResultHandlers:(id)arg1 withError:(id)arg2;
- (void)_invokeResultHandlers:(id)arg1 withResult:(id)arg2;
- (bool)_queue_activeEvaluationNodesExclusivelyUseVisionFramework:(id)arg1;
- (id)_queue_activeEvaluationNodesForOptions:(id)arg1 applyPriorityScheduling:(bool)arg2 prioritySchedulingAllowMultipleNodeExecution:(bool)arg3;
- (void)_queue_addResultHandler:(id /* block */)arg1;
- (void)_queue_evaluateWithSource:(id)arg1 context:(id)arg2;
- (id)_queue_evaluationNodeWithIdentifier:(id)arg1;
- (void)_queue_handleEvaluatedContext:(id)arg1 result:(id)arg2 error:(id)arg3;
- (void)_queue_logEvaluatedResult:(id)arg1;
- (id)_queue_makeUniqueIdentifierForNode:(Class)arg1;
- (bool)_queue_nodeIdentifierExists:(id)arg1;
- (void)_queue_remotelyEvaluateWithSource:(id)arg1 context:(id)arg2;
- (void)_queue_removeAllResultHandlers;
- (void)_queue_removeResultHandler:(id /* block */)arg1;
- (bool)_queue_shouldContinueWithoutResultHandlers:(id)arg1;
- (bool)_queue_shouldEvaluateNode:(id)arg1 withOptions:(id)arg2;
- (id)_queue_sourceNodeWithIdentifier:(id)arg1;
- (void)addEvaluationNode:(id)arg1;
- (void)addResultHandler:(id /* block */)arg1;
- (void)addSourceNode:(id)arg1;
- (void)addSourceNodes:(id)arg1 evaluationNodes:(id)arg2;
- (bool)areDiagnosticsEnabled;
- (void)axMediaUtilitiesService:(id)arg1 eventOccurred:(long long)arg2;
- (id)axMediaUtilsService;
- (void)axmAppendRecursiveDescription:(id)arg1 withIndentation:(long long)arg2;
- (id)axmDescription;
- (id)cache;
- (long long)cacheSize;
- (bool)canAddEvaluationNode:(id)arg1;
- (bool)canAddEvaluationNodeClass:(Class)arg1;
- (bool)canAddSourceNode:(id)arg1;
- (bool)canAddSourceNodeClass:(Class)arg1;
- (void)captureSessionNodeDidBeginProcessingFrames:(id)arg1;
- (void)captureSessionNodeDidDropFrame:(id)arg1;
- (void)captureSessionNodeDidEndProcessingFrames:(id)arg1;
- (void)captureSessionNodeWillProcessFrame:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)diagnosticsEnabled:(id)arg1;
- (void)disableResultCaching;
- (bool)disableResultLogging;
- (void)dispatcher:(id)arg1 handleTask:(id)arg2;
- (void)enableResultCachingWithCacheSize:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)engineWillAcceptTiggerWithSource:(id)arg1;
- (id)evaluationNodeWithIdentifier:(id)arg1;
- (id)evaluationNodes;
- (unsigned long long)hash;
- (id)identifier;
- (bool)imageRegistrationFilteringEnabled;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (void)insertEvaluationNode:(id)arg1 atIndex:(long long)arg2;
- (void)insertSourceNode:(id)arg1 atIndex:(long long)arg2;
- (bool)isCachingEnabled;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToEngine:(id)arg1;
- (id)makeUniqueIdentifierForNode:(Class)arg1;
- (long long)maximumQueueSize;
- (long long)minimumImageRegistrationSignalLevel;
- (bool)nodeIdentifierExists:(id)arg1;
- (void)prewarmEngine;
- (bool)prioritySchedulingAllowMultipleNodeExecution;
- (bool)prioritySchedulingEnabled;
- (void)purgeResources:(id /* block */)arg1;
- (void)removeAllEvaluationNodes;
- (void)removeAllResultHandlers;
- (void)removeAllSourceNodes;
- (void)removeEvaluationNode:(id)arg1;
- (void)removeResultHandler:(id /* block */)arg1;
- (void)removeSourceNode:(id)arg1;
- (id)resultHandlers;
- (id)sequenceRequestManager;
- (void)setAxMediaUtilsService:(id)arg1;
- (void)setCache:(id)arg1;
- (void)setDiagnosticsEnabled:(bool)arg1;
- (void)setDisableResultLogging:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImageRegistrationFilteringEnabled:(bool)arg1;
- (void)setMaximumQueueSize:(long long)arg1;
- (void)setMinimumImageRegistrationSignalLevel:(long long)arg1;
- (void)setPrioritySchedulingAllowMultipleNodeExecution:(bool)arg1;
- (void)setPrioritySchedulingEnabled:(bool)arg1;
- (void)setSequenceRequestManager:(id)arg1;
- (void)setTaskDispatcher:(id)arg1;
- (void)setThresholdPriority:(unsigned long long)arg1;
- (id)sourceNodeWithIdentifier:(id)arg1;
- (id)sourceNodes;
- (id)taskDispatcher;
- (unsigned long long)thresholdPriority;
- (void)triggerWithSource:(id)arg1 context:(id)arg2;
- (void)updateEngineConfiguration:(id /* block */)arg1;

@end
