
@interface AXMVisionPipelineContext : NSObject <NSSecureCoding> {
    AXMVisionAnalysisOptions * _analysisOptions;
    NSNumber * _appliedImageOrientation;
    NSMutableOrderedSet * _auxiliaryDetectors;
    <NSCopying> * _cacheKey;
    NSMutableArray * _detectedSceneClassifications;
    NSArray * _effectiveTextDetectionLocales;
    NSError * _error;
    NSMutableSet * _evaluatedFeatureTypes;
    bool  _evaluationExclusivelyUsesVisionFramework;
    NSMutableArray * _features;
    long long  _imageRegistrationState;
    NSMutableArray * _mediaAnalysisDetectedSceneClassifications;
    AXMetricSession * _metricSession;
    AXBookendMetric * _piplelineMetric;
    AXMVisionResult * _result;
    NSMutableArray * _resultHandlers;
    VNSceneObservation * _sceneObservation;
    NSObject<OS_dispatch_queue> * _sceneObservationQueue;
    unsigned long long  _sequenceID;
    AXMSequenceRequestManager * _sequenceRequestManager;
    bool  _shouldCallCompletionHandlersForEmptyResultSet;
    bool  _shouldCallCompletionHandlersForEngineBusyError;
    bool  _shouldProcessRemotely;
    AXMPipelineContextInput * _sourceInput;
    NSDictionary * _sourceParameters;
    bool  _sourceProvidesOwnResults;
    NSObject<NSSecureCoding> * _userContext;
    VNImageRequestHandler * _visionImageRequestHandler;
}

@property (nonatomic, retain) AXMVisionAnalysisOptions *analysisOptions;
@property (nonatomic, retain) NSNumber *appliedImageOrientation;
@property (nonatomic, retain) <NSCopying> *cacheKey;
@property (nonatomic, retain) NSArray *effectiveTextDetectionLocales;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, retain) NSMutableSet *evaluatedFeatureTypes;
@property (nonatomic) bool evaluationExclusivelyUsesVisionFramework;
@property (nonatomic, retain) NSMutableArray *features;
@property (nonatomic) long long imageRegistrationState;
@property (nonatomic, readonly) NSArray *mediaAnalysisSceneLabelsForOCRDocumentTypeDetection;
@property (nonatomic, retain) AXMetricSession *metricSession;
@property (nonatomic, readonly) <AXMetricContainer> *pipelineMetric;
@property (nonatomic, retain) AXMVisionResult *result;
@property (nonatomic, readonly) NSArray *resultHandlers;
@property (nonatomic, readonly) NSArray *sceneLabelsForOCRDocumentTypeDetection;
@property (nonatomic) unsigned long long sequenceID;
@property (nonatomic, retain) AXMSequenceRequestManager *sequenceRequestManager;
@property (nonatomic) bool shouldCallCompletionHandlersForEmptyResultSet;
@property (nonatomic) bool shouldCallCompletionHandlersForEngineBusyError;
@property (nonatomic) bool shouldProcessRemotely;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;
@property (nonatomic, readonly) AXMPipelineContextInput *sourceInput;
@property (nonatomic, readonly) bool sourceProvidesResults;
@property (nonatomic, retain) NSObject<NSSecureCoding> *userContext;
@property (nonatomic, retain) VNImageRequestHandler *visionImageRequestHandler;
@property (nonatomic, readonly) bool visionImageRequestHandlerIsLoaded;

+ (id)contextWithSourceParameters:(id)arg1 options:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)_addSignificantEventFeatureGateIfNeededToFeature:(id)arg1 category:(id)arg2 minimumConfidence:(double)arg3;
- (void)_commonInitWithDiagnosticsEnabled:(bool)arg1;
- (id)_makeRequestHandlerForInput:(id)arg1 options:(id)arg2;
- (void)addAuxiliaryDetector:(id)arg1;
- (void)addEvaluatedFeatureType:(unsigned long long)arg1;
- (void)addMediaAnalysisSceneLabelForOCRDocumentTypeDetection:(id)arg1;
- (void)addResultHandler:(id /* block */)arg1;
- (void)addResultHandlers:(id)arg1;
- (void)addSceneLabelForOCRDocumentTypeDetection:(id)arg1;
- (id)analysisOptions;
- (void)appendFeature:(id)arg1;
- (id)appliedImageOrientation;
- (id)auxiliaryDetectors;
- (id)cacheKey;
- (void)createSceneObservationIfNilWithBlock:(id /* block */)arg1;
- (id)description;
- (void)didFinishProcessingContext;
- (id)effectiveTextDetectionLocales;
- (void)encodeWithCoder:(id)arg1;
- (id)error;
- (void)errorOccurred:(id)arg1;
- (id)evaluatedFeatureTypes;
- (bool)evaluationExclusivelyUsesVisionFramework;
- (id)features;
- (id)generateFileNameForImageWithPrefix:(id)arg1 extension:(id)arg2;
- (id)generateImageRepresentation;
- (long long)imageRegistrationState;
- (id)initWithCoder:(id)arg1;
- (id)initWithSourceParameters:(id)arg1 options:(id)arg2;
- (id)mediaAnalysisSceneLabelsForOCRDocumentTypeDetection;
- (id)metricSession;
- (id)pipelineMetric;
- (void)produceImage:(id /* block */)arg1;
- (void)removeAllAuxiliaryDetectors;
- (id)result;
- (id)resultHandlers;
- (id)sceneLabelsForOCRDocumentTypeDetection;
- (id)sceneObservation;
- (unsigned long long)sequenceID;
- (id)sequenceRequestManager;
- (void)setAnalysisOptions:(id)arg1;
- (void)setAppliedImageOrientation:(id)arg1;
- (void)setCacheKey:(id)arg1;
- (void)setEffectiveTextDetectionLocales:(id)arg1;
- (void)setEquivalenceToken:(id)arg1;
- (void)setError:(id)arg1;
- (void)setEvaluatedFeatureTypes:(id)arg1;
- (void)setEvaluationExclusivelyUsesVisionFramework:(bool)arg1;
- (void)setFeatures:(id)arg1;
- (void)setImageRegistrationState:(long long)arg1;
- (void)setMetricSession:(id)arg1;
- (void)setResult:(id)arg1;
- (void)setSequenceID:(unsigned long long)arg1;
- (void)setSequenceRequestManager:(id)arg1;
- (void)setShouldCallCompletionHandlersForEmptyResultSet:(bool)arg1;
- (void)setShouldCallCompletionHandlersForEngineBusyError:(bool)arg1;
- (void)setShouldProcessRemotely:(bool)arg1;
- (void)setUserContext:(id)arg1;
- (void)setVisionImageRequestHandler:(id)arg1;
- (bool)shouldCallCompletionHandlersForEmptyResultSet;
- (bool)shouldCallCompletionHandlersForEngineBusyError;
- (bool)shouldProcessRemotely;
- (struct CGSize { double x1; double x2; })size;
- (id)sourceInput;
- (bool)sourceProvidesResults;
- (id)userContext;
- (id)visionImageRequestHandler;
- (bool)visionImageRequestHandlerIsLoaded;
- (id)visionImageRequestHandlerWithOptions:(id)arg1;
- (void)willBeginProcessingContext;

@end
