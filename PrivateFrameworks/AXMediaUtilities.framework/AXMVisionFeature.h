
@interface AXMVisionFeature : NSObject <AXMJSONSerializable, NSSecureCoding> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _activationPoint;
    AXMVisionFeatureAestheticsResult * _aestheticsResult;
    AXMVisionFeatureAssetMetadata * _assetMetadata;
    NSString * _barcodeType;
    double  _blur;
    double  _brightness;
    long long  _cameraType;
    struct CGSize { 
        double width; 
        double height; 
    }  _canvasSize;
    NSString * _caption;
    bool  _captionMayContainSensitiveContent;
    NSString * _classificationLabel;
    NSString * _classificationLocalizedValue;
    AXMVisionFeatureColorInfo * _colorInfo;
    double  _confidence;
    double  _creationDate;
    NSDictionary * _debugRectangles;
    NSMutableSet * _detectorSceneClassIds;
    CMDeviceMotion * _deviceMotion;
    long long  _deviceOrientation;
    NSArray * _effectiveTextDetectionLocales;
    AXMVisionFeatureFaceDetectionResult * _faceDetectionResult;
    unsigned long long  _faceId;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _facePose;
    NSMutableDictionary * _featureGates;
    unsigned long long  _featureType;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    float  _horizonAngle;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _horizonTransform;
    bool  _isLowConfidence;
    bool  _isMediaAnalysisProminentObject;
    bool  _isMediaAnalysisSignificantEventClassification;
    bool  _isValueSpeakable;
    AXMVisionFeatureFaceDetectionResult * _mediaAnalysisFaceDetectionResult;
    unsigned long long  _mediaAnalysisFaceId;
    NSString * _mediaAnalysisImageCaption;
    double  _mediaAnalysisImageCaptionConfidence;
    AXMTranslatedText * _mediaAnalysisTranslatedImageCaption;
    NSString * _modelID;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _normalizedFrame;
    long long  _ocrFeatureType;
    NSString * _overrideLabel;
    NSArray * _recognizedTextFeatures;
    NSString * _sceneClassId;
    NSArray * _subfeatures;
    AXMTranslatedText * _translatedCaption;
    long long  _uiClass;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unpaddedDetectedFaceRect;
    NSObject<NSSecureCoding> * _userContext;
    NSString * _value;
    NSArray * _values;
}

@property (nonatomic) struct CGPoint { double x1; double x2; } activationPoint;
@property (nonatomic, readonly) AXMVisionFeatureAestheticsResult *aestheticsResult;
@property (nonatomic, readonly) AXMVisionFeatureAssetMetadata *assetMetadata;
@property (nonatomic, readonly) NSString *barcodeType;
@property (nonatomic, readonly) double blur;
@property (nonatomic, readonly) double brightness;
@property (nonatomic, readonly) long long cameraType;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } canvasSize;
@property (nonatomic, readonly) NSString *caption;
@property (nonatomic) bool captionMayContainSensitiveContent;
@property (nonatomic, readonly) NSString *classificationLabel;
@property (nonatomic, readonly) NSString *classificationLocalizedValue;
@property (nonatomic, readonly) AXMVisionFeatureColorInfo *colorInfo;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly) double creationDate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSDictionary *debugRectangles;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSSet *detectorSceneClassIds;
@property (nonatomic, readonly) CMDeviceMotion *deviceMotion;
@property (nonatomic, readonly) long long deviceOrientation;
@property (nonatomic, readonly) NSDictionary *dictionaryRepresentation;
@property (nonatomic, readonly) AXMVisionFeatureFaceDetectionResult *faceDetectionResult;
@property (nonatomic, readonly) unsigned long long faceId;
@property (nonatomic, readonly) NSDictionary *featureGates;
@property (nonatomic, readonly) unsigned long long featureType;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) float horizonAngle;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } horizonTransform;
@property (nonatomic, readonly) bool isAssetMetadata;
@property (nonatomic, readonly) bool isBarcode;
@property (nonatomic, readonly) bool isBlur;
@property (nonatomic, readonly) bool isBrightness;
@property (nonatomic, readonly) bool isCameraMetadata;
@property (nonatomic, readonly) bool isCaption;
@property (nonatomic, readonly) bool isColor;
@property (nonatomic, readonly) bool isEnvelope;
@property (nonatomic, readonly) bool isFace;
@property (nonatomic, readonly) bool isHorizon;
@property (nonatomic, readonly) bool isIconClass;
@property (nonatomic, readonly) bool isImageAesthetics;
@property (nonatomic, readonly) bool isLowConfidence;
@property (nonatomic, readonly) bool isMediaAnalysisFace;
@property (nonatomic, readonly) bool isMediaAnalysisImageCaption;
@property (nonatomic, readonly) bool isMediaAnalysisNSFWClassification;
@property (nonatomic, readonly) bool isMediaAnalysisObjectClassification;
@property (nonatomic, readonly) bool isMediaAnalysisProminentObject;
@property (nonatomic, readonly) bool isMediaAnalysisSceneClassification;
@property (nonatomic, readonly) bool isMediaAnalysisSignificantEventClassification;
@property (nonatomic, readonly) bool isMediaLegibility;
@property (nonatomic, readonly) bool isModelClassification;
@property (nonatomic, readonly) bool isMotion;
@property (nonatomic, readonly) bool isNSFWClassification;
@property (nonatomic, readonly) bool isNutritionLabel;
@property (nonatomic, readonly) bool isOCR;
@property (nonatomic, readonly) bool isObjectClassification;
@property (nonatomic, readonly) bool isPerson;
@property (nonatomic, readonly) bool isProminentObject;
@property (nonatomic, readonly) bool isRealtimeFace;
@property (nonatomic, readonly) bool isReceipt;
@property (nonatomic, readonly) bool isRectangle;
@property (nonatomic, readonly) bool isSceneClassification;
@property (nonatomic, readonly) bool isSignificantEventClassification;
@property (nonatomic, readonly) bool isTable;
@property (nonatomic, readonly) bool isTableCell;
@property (nonatomic, readonly) bool isTableColumn;
@property (nonatomic, readonly) bool isTableRow;
@property (nonatomic, readonly) bool isTextCharacter;
@property (nonatomic, readonly) bool isTextDiacritic;
@property (nonatomic, readonly) bool isTextDocument;
@property (nonatomic, readonly) bool isTextLine;
@property (nonatomic, readonly) bool isTextRegion;
@property (nonatomic, readonly) bool isTextSequence;
@property (nonatomic, readonly) bool isValueSpeakable;
@property (nonatomic, readonly) AXMVisionFeatureFaceDetectionResult *mediaAnalysisFaceDetectionResult;
@property (nonatomic, readonly) unsigned long long mediaAnalysisFaceId;
@property (nonatomic, readonly) NSString *mediaAnalysisImageCaption;
@property (nonatomic, readonly) double mediaAnalysisImageCaptionConfidence;
@property (nonatomic, readonly) AXMTranslatedText *mediaAnalysisTranslatedImageCaption;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } normalizedFrame;
@property (nonatomic, readonly) long long ocrFeatureType;
@property (nonatomic, retain) NSString *overrideLabel;
@property (nonatomic, readonly) NSArray *recognizedTextFeatures;
@property (nonatomic, readonly) NSString *sceneClassId;
@property (nonatomic, readonly) NSArray *subfeatures;
@property (readonly) Class superclass;
@property (nonatomic, readonly) AXMTranslatedText *translatedCaption;
@property (nonatomic) long long uiClass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unpaddedDetectedFaceRect;
@property (nonatomic, retain) NSObject<NSSecureCoding> *userContext;
@property (nonatomic, readonly) NSString *value;
@property (nonatomic, readonly) NSArray *values;

+ (void)_append:(id)arg1 toList:(id)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_aspectFaceRectFromSquareFaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 sizeInPixels:(struct CGSize { double x1; double x2; })arg2;
+ (id)envelopeRegion:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 confidence:(double)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)envelopeWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 regions:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)featureWithAssetMetadata:(id)arg1;
+ (id)featureWithCameraType:(long long)arg1;
+ (id)featureWithCaptionResult:(id)arg1 confidence:(double)arg2 translatedCaption:(id)arg3 modelIdentifier:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5 isLowConfidence:(bool)arg6;
+ (id)featureWithColorInfo:(id)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)featureWithDeviceMotion:(id)arg1 orientation:(long long)arg2;
+ (id)featureWithFaceDetectionResult:(id)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)featureWithIconClass:(id)arg1 confidence:(double)arg2;
+ (id)featureWithImageAestheticsObservation:(id)arg1;
+ (id)featureWithMediaAnalysisFaceDetectionResult:(id)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)featureWithMediaAnalysisImageCaptionResult:(id)arg1 confidence:(double)arg2 translatedCaption:(id)arg3;
+ (id)featureWithMediaAnalysisTaxonomyNode:(id)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)featureWithMediaLegibility:(id)arg1;
+ (id)featureWithMetadata:(id)arg1 interfaceOrientation:(long long)arg2 isMirrored:(bool)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)featureWithTaxonomyNode:(id)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)featureWithVisionRequest:(id)arg1 axElementRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 confidence:(double)arg3 uiClass:(long long)arg4 label:(id)arg5 canvasSize:(struct CGSize { double x1; double x2; })arg6;
+ (id)featureWithVisionRequest:(id)arg1 blurValue:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)featureWithVisionRequest:(id)arg1 brightnessValue:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)featureWithVisionRequest:(id)arg1 horizonResult:(id)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)featureWithVisionRequest:(id)arg1 modelClassificationResult:(id)arg2 modelIdentifier:(id)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)featureWithVisionRequest:(id)arg1 rectangleResult:(id)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)filterFeatureList:(id)arg1 basedOnSceneClassIdsForFeature:(id)arg2;
+ (id)flattenedFeatureList:(id)arg1;
+ (id)groupedFeatureWithElementRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 uiClass:(long long)arg2 confidence:(double)arg3 label:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5 subElements:(id)arg6;
+ (id)localizedStringForLocation:(long long)arg1 isSubjectImplicit:(bool)arg2;
+ (long long)locationForNormalizedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 previousLocation:(long long)arg2 usingThirds:(bool)arg3;
+ (id)mediaAnalysisNSFWClassificationWithCategory:(id)arg1 confidence:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)mediaAnalysisObjectClassificationWithLabel:(id)arg1 localizedValue:(id)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 confidence:(float)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5 sceneClassId:(id)arg6;
+ (id)mediaAnalysisProminentObjectWithBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2 confidence:(double)arg3;
+ (id)mediaAnalysisSceneClassificationWithLabel:(id)arg1 localizedValue:(id)arg2 confidence:(float)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)mediaAnalysisSignificantEventClassificationWithCategory:(id)arg1 confidence:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)nameForFeatureType:(unsigned long long)arg1;
+ (id)nameForLocation:(long long)arg1;
+ (id)nameForOCRType:(long long)arg1;
+ (id)nameForUIClass:(long long)arg1;
+ (id)nsfwClassificationWithCategory:(id)arg1 confidence:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)nutritionLabelWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 rows:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)objectClassificationWithLabel:(id)arg1 localizedValue:(id)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 confidence:(float)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5 sceneClassId:(id)arg6;
+ (id)personWithBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 confidence:(double)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)prominentObjectWithBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2 confidence:(double)arg3;
+ (id)receiptWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 regions:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)sceneClassificationWithLabel:(id)arg1 localizedValue:(id)arg2 confidence:(float)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)significantEventClassificationWithCategory:(id)arg1 confidence:(float)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
+ (bool)supportsSecureCoding;
+ (id)tableCellWithText:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 confidence:(double)arg3 recognizedTextFeatures:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5 isHeader:(bool)arg6;
+ (id)tableColumnWithText:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 cells:(id)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)tableRowWithText:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 cells:(id)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)tableWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 rows:(id)arg4 columns:(id)arg5 canvasSize:(struct CGSize { double x1; double x2; })arg6 isIncomplete:(bool)arg7;
+ (id)textDocumentWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 regions:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)textLineWithText:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 recognizedTextFeatures:(id)arg3 canvasSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)textRegionWithText:(id)arg1 isSpeakable:(bool)arg2 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 lines:(id)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)textSequence:(id)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 recognizedTextFeatures:(id)arg3 confidence:(double)arg4 canvasSize:(struct CGSize { double x1; double x2; })arg5;
+ (long long)uiClassForName:(id)arg1;
+ (id)unitTestingFaceFeature;
+ (id)unitTestingFaceFeatureWithSize:(struct CGSize { double x1; double x2; })arg1 faceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)unitTestingFeature;
+ (id)unitTestingFeatureWithType:(unsigned long long)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 value:(id)arg4 barcodeType:(id)arg5 ocrFeatureType:(long long)arg6 subFeatures:(id)arg7;
+ (id)unitTestingFeatureWithType:(unsigned long long)arg1 canvasSize:(struct CGSize { double x1; double x2; })arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 value:(id)arg4 valueIsSpeakable:(bool)arg5 barcodeType:(id)arg6 ocrFeatureType:(long long)arg7 subFeatures:(id)arg8;
+ (id)unitTestingHorizonFeature;
+ (id)unitTestingProminentObjectFeature;
+ (id)unitTestingTeatureWithType:(unsigned long long)arg1 axElementRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 confidence:(double)arg3 uiClass:(long long)arg4 label:(id)arg5 canvasSize:(struct CGSize { double x1; double x2; })arg6;

- (void).cxx_destruct;
- (id)_init;
- (id)_nameForOCRFeatureType:(long long)arg1;
- (void)_serializeWithCoder:(id)arg1 orDictionary:(id)arg2;
- (struct CGPoint { double x1; double x2; })activationPoint;
- (void)addFeatureGate:(id)arg1 userInfo:(id)arg2;
- (id)aestheticsResult;
- (id)assetMetadata;
- (id)barcodeType;
- (double)blur;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBoxForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)brightness;
- (long long)cameraType;
- (struct CGSize { double x1; double x2; })canvasSize;
- (id)caption;
- (bool)captionMayContainSensitiveContent;
- (id)classificationLabel;
- (id)classificationLocalizedValue;
- (id)colorInfo;
- (double)confidence;
- (double)creationDate;
- (id)debugDescription;
- (id)debugRectangles;
- (id)description;
- (id)detectorSceneClassIds;
- (id)deviceMotion;
- (long long)deviceOrientation;
- (id)dictionaryRepresentation;
- (id)effectiveTextDetectionLocales;
- (void)encodeWithCoder:(id)arg1;
- (id)faceDetectionResult;
- (unsigned long long)faceId;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })facePose;
- (id)featureGates;
- (unsigned long long)featureType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (unsigned long long)hash;
- (float)horizonAngle;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })horizonTransform;
- (id)initWithCoder:(id)arg1;
- (bool)isAssetMetadata;
- (bool)isBarcode;
- (bool)isBlur;
- (bool)isBrightness;
- (bool)isCameraMetadata;
- (bool)isCaption;
- (bool)isColor;
- (bool)isEnvelope;
- (bool)isEnvelopeRegion;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToAXMVisionFeature:(id)arg1;
- (bool)isFace;
- (bool)isHorizon;
- (bool)isIconClass;
- (bool)isImageAesthetics;
- (bool)isLowConfidence;
- (bool)isMediaAnalysisFace;
- (bool)isMediaAnalysisImageCaption;
- (bool)isMediaAnalysisNSFWClassification;
- (bool)isMediaAnalysisObjectClassification;
- (bool)isMediaAnalysisProminentObject;
- (bool)isMediaAnalysisSceneClassification;
- (bool)isMediaAnalysisSignificantEventClassification;
- (bool)isMediaAnalysisSignificantEventlassification;
- (bool)isMediaLegibility;
- (bool)isModelClassification;
- (bool)isMotion;
- (bool)isNSFWClassification;
- (bool)isNutritionLabel;
- (bool)isOCR;
- (bool)isObjectClassification;
- (bool)isPerson;
- (bool)isProminentObject;
- (bool)isRealtimeFace;
- (bool)isReceipt;
- (bool)isRectangle;
- (bool)isSceneClassification;
- (bool)isSignificantEventClassification;
- (bool)isTable;
- (bool)isTableCell;
- (bool)isTableColumn;
- (bool)isTableRow;
- (bool)isTextCharacter;
- (bool)isTextDiacritic;
- (bool)isTextDocument;
- (bool)isTextLine;
- (bool)isTextRegion;
- (bool)isTextSequence;
- (bool)isValueSpeakable;
- (long long)locationUsingThirds:(bool)arg1 withFlippedYAxis:(bool)arg2;
- (id)mediaAnalysisFaceDetectionResult;
- (unsigned long long)mediaAnalysisFaceId;
- (id)mediaAnalysisImageCaption;
- (double)mediaAnalysisImageCaptionConfidence;
- (id)mediaAnalysisTranslatedImageCaption;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedFrame;
- (long long)ocrFeatureType;
- (id)overrideLabel;
- (id)recognizedTextFeatures;
- (id)sceneClassId;
- (void)setActivationPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCaptionMayContainSensitiveContent:(bool)arg1;
- (void)setDebugRectangles:(id)arg1;
- (void)setOverrideLabel:(id)arg1;
- (void)setUiClass:(long long)arg1;
- (void)setUserContext:(id)arg1;
- (id)subfeatures;
- (id)translatedCaption;
- (long long)uiClass;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unpaddedDetectedFaceRect;
- (id)userContext;
- (id)value;
- (id)values;

@end
