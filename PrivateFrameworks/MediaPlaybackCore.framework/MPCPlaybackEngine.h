
@interface MPCPlaybackEngine : NSObject <MPAVRoutingControllerDelegate, MPCContentAgeRequirementDelegate, MPCQueueControllerBehaviorMusicDelegate, MPCQueueControllerBehaviorMusicSharePlayDelegate, MPCQueueControllerDelegate, MPCQueueControllerPlaybackEngine> {
    <MPCPlaybackEngineActiveItem> * _activeItem;
    MPCAudioSpectrumAnalyzer * _audioAnalyzer;
    bool  _audioAnalyzerEnabled;
    NSString * _audioSessionCategory;
    unsigned long long  _audioSessionOptions;
    <MPCPlaybackEngineDelegate> * _delegate;
    bool  _disableAutoPlay;
    bool  _disableRepeat;
    bool  _disableShuffle;
    NSString * _engineID;
    MPProtocolProxy<_MPCPlaybackEngineEventObserving> * _eventObserver;
    MPCPlaybackEngineEventStream * _eventStream;
    MPCPlaybackIntent * _fallbackPlaybackIntent;
    <MPCPlaybackEngineInitializationParameters> * _initializationParameters;
    _MPCLeaseManager * _leaseManager;
    _MPCMediaRemotePublisher * _mediaRemotePublisher;
    _MPCMusicPlayerControllerServer * _musicPlayerControllerServer;
    bool  _needsUISnapshot;
    MPAVRoute * _pickedRoute;
    bool  _pictureInPictureSupported;
    _MPCPlaybackEnginePlayer * _player;
    NSString * _playerID;
    MPCQueueController * _queueController;
    bool  _queueHandoffSupported;
    _MPCReportingController * _reportingController;
    MPAVRoutingController * _routingController;
    bool  _scheduledPlaybackStatePreservation;
    _MPCPlaybackEngineSessionManager * _sessionManager;
    bool  _started;
    id  _swiftStorage;
    bool  _systemMusicApplication;
    bool  _systemPodcastsApplication;
    NSString * _targetContentItemID;
    <MPCVideoOutput> * _videoOutput;
    bool  _videoSupported;
    MPCWhiskyController * _vocalAttenuationController;
    bool  _vocalAttenuationEnabled;
}

@property (nonatomic, readonly, copy) <MPCPlaybackEngineActiveItem> *activeItem;
@property (nonatomic, readonly) MPCAudioSpectrumAnalyzer *audioAnalyzer;
@property (getter=isAudioAnalyzerEnabled, nonatomic) bool audioAnalyzerEnabled;
@property (nonatomic, copy) NSString *audioSessionCategory;
@property (nonatomic) unsigned long long audioSessionOptions;
@property (nonatomic, readonly) double currentAudioProcessingDelay;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MPCPlaybackEngineDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableAutoPlay;
@property (nonatomic) bool disableRepeat;
@property (nonatomic) bool disableShuffle;
@property (nonatomic, readonly, copy) NSString *engineID;
@property (nonatomic, readonly) MPProtocolProxy<_MPCPlaybackEngineEventObserving> *eventObserver;
@property (nonatomic, readonly) MPCPlaybackEngineEventStream *eventStream;
@property (nonatomic, retain) MPCPlaybackIntent *fallbackPlaybackIntent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) NSString *hostingSharedSessionID;
@property (nonatomic, readonly) <MPCPlaybackEngineInitializationParameters> *initializationParameters;
@property (nonatomic, readonly) _MPCLeaseManager *leaseManager;
@property (nonatomic, readonly) _MPCMediaRemotePublisher *mediaRemotePublisher;
@property (nonatomic, readonly) _MPCMusicPlayerControllerServer *musicPlayerControllerServer;
@property (nonatomic) bool needsUISnapshot;
@property (nonatomic, readonly) MPAVRoute *pickedRoute;
@property (getter=isPictureInPictureSupported, nonatomic) bool pictureInPictureSupported;
@property (nonatomic, readonly) _MPCPlaybackEnginePlayer *player;
@property (nonatomic, readonly, copy) NSString *playerID;
@property (nonatomic, retain) MPCQueueController *queueController;
@property (getter=isQueueHandoffSupported, nonatomic) bool queueHandoffSupported;
@property (nonatomic, readonly) _MPCReportingController *reportingController;
@property (nonatomic, readonly) MPAVRoutingController *routingController;
@property (getter=hasScheduledPlaybackStatePreservation, nonatomic) bool scheduledPlaybackStatePreservation;
@property (nonatomic, readonly) NSXPCListenerEndpoint *serverEndpoint;
@property (nonatomic, readonly) _MPCPlaybackEngineSessionManager *sessionManager;
@property (getter=isStarted, nonatomic, readonly) bool started;
@property (getter=isStateRestorationSupported, nonatomic) bool stateRestorationSupported;
@property (readonly) Class superclass;
@property (nonatomic, retain) id swiftStorage;
@property (getter=isSystemMusicApplication, nonatomic) bool systemMusicApplication;
@property (getter=isSystemPodcastsApplication, nonatomic) bool systemPodcastsApplication;
@property (nonatomic, readonly, copy) NSString *targetContentItemID;
@property (nonatomic, readonly) <MPCVideoOutput> *videoOutput;
@property (getter=isVideoSupported, nonatomic) bool videoSupported;
@property (getter=isVocalAttenuationAvailable, nonatomic, readonly) bool vocalAttenuationAvailable;
@property (nonatomic, readonly) MPCWhiskyController *vocalAttenuationController;
@property (getter=isVocalAttenuationEnabled, nonatomic) bool vocalAttenuationEnabled;
@property (nonatomic) float vocalLevel;

+ (void)preheatPlayback;

- (void).cxx_destruct;
- (void)_detectCrashLoopForSessionIdentifier:(id)arg1 block:(id /* block */)arg2;
- (void)_initializePlaybackStack;
- (bool)_shouldIgnorePlaybackSessionError:(id)arg1;
- (id)activeItem;
- (void)addEngineObserver:(id)arg1;
- (id)audioAnalyzer;
- (id)audioSessionCategory;
- (unsigned long long)audioSessionOptions;
- (void)becomeActive;
- (void)beginScanningWithDirection:(void *)arg1 identifier:(void *)arg2 completion:(void *)arg3; // needs 3 arg types, found 19: long long, id, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, inout unsigned short, unsigned short, /* Warning: Unrecognized filer type: 't' using 'void*' */ void*, const int, in /* Warning: Unrecognized filer type: 'g' using 'void*' */ void*, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, id, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, inout unsigned short, /* Warning: Unrecognized filer type: 'E' using 'void*' */ void*, const const out const /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, /* Warning: Unrecognized filer type: '>' using 'void*' */ void*
- (void)behavior:(id)arg1 didChangeActionAtQueueEnd:(long long)arg2;
- (void)behavior:(id)arg1 didChangeExplicitContentState:(long long)arg2;
- (void)behavior:(id)arg1 didChangeRepeatType:(long long)arg2;
- (void)behavior:(id)arg1 didChangeShuffleType:(long long)arg2;
- (void)behavior:(id)arg1 didEndSharePlaySessionWithReason:(long long)arg2;
- (void)behavior:(id)arg1 didReceiveSharedListeningEvent:(id)arg2;
- (double)currentAudioProcessingDelay;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (bool)disableAutoPlay;
- (bool)disableRepeat;
- (bool)disableShuffle;
- (id)engineID;
- (id)eventObserver;
- (id)eventStream;
- (id)fallbackPlaybackIntent;
- (bool)hasScheduledPlaybackStatePreservation;
- (id)hostingSharedSessionID;
- (id)initWithParameters:(id)arg1;
- (id)initWithPlayerID:(id)arg1;
- (id)initializationParameters;
- (void)initializeSwiftStack;
- (void)invalidate;
- (bool)isAudioAnalyzerEnabled;
- (bool)isPictureInPictureSupported;
- (bool)isQueueHandoffSupported;
- (bool)isStarted;
- (bool)isStateRestorationSupported;
- (bool)isSystemMusicApplication;
- (bool)isSystemPodcastsApplication;
- (bool)isVideoSupported;
- (bool)isVocalAttenuationAvailable;
- (bool)isVocalAttenuationEnabled;
- (id)leaseManager;
- (void)loadSessionWithIdentifier:(void *)arg1 completion:(void *)arg2; // needs 2 arg types, found 18: id, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, inout unsigned short, unsigned short, /* Warning: Unrecognized filer type: 't' using 'void*' */ void*, const int, in /* Warning: Unrecognized filer type: 'g' using 'void*' */ void*, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, id, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, inout unsigned short, /* Warning: Unrecognized filer type: 'E' using 'void*' */ void*, const const out const /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, /* Warning: Unrecognized filer type: '>' using 'void*' */ void*
- (double)mapPlaybackTimeToUserTime:(double)arg1;
- (double)mapUserTimeToPlaybackTime:(double)arg1;
- (id)mediaRemotePublisher;
- (id)musicPlayerControllerServer;
- (bool)needsUISnapshot;
- (id)pickedRoute;
- (id)player;
- (id)playerID;
- (id)queueController;
- (void)queueController:(id)arg1 didChangeTargetContentItemID:(id)arg2;
- (void)queueController:(id)arg1 didDetectMismatchForActiveContentItemID:(id)arg2 targetContentItemID:(id)arg3;
- (void)queueController:(id)arg1 didIncrementVersionForSegment:(id)arg2;
- (void)queueControllerDidChangeContents:(id)arg1;
- (void)queueControllerDidReachUnexpectedEndOfQueue:(id)arg1;
- (void)reloadQueueForReason:(void *)arg1 completion:(void *)arg2; // needs 2 arg types, found 11: long long, id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, id, /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, inout unsigned short, /* Warning: Unrecognized filer type: 'E' using 'void*' */ void*, const const out const /* Warning: Unrecognized filer type: '"' using 'void*' */ void*, /* Warning: Unrecognized filer type: '>' using 'void*' */ void*
- (void)removeEngineObserver:(id)arg1;
- (void)reportUserBackgroundedApplication;
- (void)reportUserSeekFromTime:(double)arg1 toTime:(double)arg2;
- (id)reportingController;
- (void)requestAuthorizationForExplicitItem:(id)arg1 reason:(long long)arg2 completion:(id /* block */)arg3;
- (void)restoreStateWithCompletion:(id /* block */)arg1;
- (id)routingController;
- (void)routingController:(id)arg1 pickedRouteDidChange:(id)arg2;
- (void)schedulePlaybackStatePreservation;
- (id)serverEndpoint;
- (id)sessionManager;
- (void)setAudioAnalyzerEnabled:(bool)arg1;
- (void)setAudioSessionCategory:(id)arg1;
- (void)setAudioSessionOptions:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableAutoPlay:(bool)arg1;
- (void)setDisableRepeat:(bool)arg1;
- (void)setDisableShuffle:(bool)arg1;
- (void)setFallbackPlaybackIntent:(id)arg1;
- (void)setNeedsUISnapshot:(bool)arg1;
- (void)setPictureInPictureSupported:(bool)arg1;
- (void)setQueueController:(id)arg1;
- (void)setQueueHandoffSupported:(bool)arg1;
- (void)setScheduledPlaybackStatePreservation:(bool)arg1;
- (void)setStateRestorationSupported:(bool)arg1;
- (void)setSwiftStorage:(id)arg1;
- (void)setSystemMusicApplication:(bool)arg1;
- (void)setSystemPodcastsApplication:(bool)arg1;
- (void)setVideoSupported:(bool)arg1;
- (void)setVocalAttenuationEnabled:(bool)arg1;
- (void)setVocalLevel:(float)arg1;
- (bool)skipWithDirectionShouldJumpToItemStart:(long long)arg1;
- (void)start;
- (id)swiftStorage;
- (id)targetContentItemID;
- (id)videoOutput;
- (id)vocalAttenuationController;
- (float)vocalLevel;

@end
