
@interface _MPCQueueControllerBehaviorMusicSharePlay : NSObject <AVPlayerPlaybackCoordinatorDelegate, ICLiveLinkDelegate, MPCQueueControllerBehaviorExternalSyncImplementation, MPCQueueControllerBehaviorMusicSharePlay, MPCQueueControllerBehaviorUpNextImplementation, MPRequestResponseControllerDelegate> {
    unsigned short  _activeItemFlags;
    NSArray * _enumeratorContentItemIDs;
    <MPCQueueControllerExternalSyncBehaviorHost> * _externalSyncHost;
    bool  _hasUserMutations;
    <MPCQueueControllerBehaviorHost> * _host;
    MPCModelGenericAVItemUserIdentityPropertySet * _identityPropertySet;
    bool  _joiningAsInitiator;
    NSMutableSet * _knownContainerIDs;
    ICLiveLink * _liveLink;
    bool  _liveLinkStopped;
    id /* block */  _loadingCompletionHandler;
    <MPCQueueControllerBehaviorMusicDelegate> * _musicBehaviorDelegate;
    <MPCQueueControllerBehaviorMusicSharePlayDelegate> * _musicSharePlayBehaviorDelegate;
    NSMutableArray * _pendingActions;
    AVPlayerPlaybackCoordinator * _playbackCoordinator;
    MPCPlaybackRequestEnvironment * _playbackRequestEnvironment;
    ICSharedListeningQueue * _queue;
    bool  _queueRanDry;
    long long  _repeatType;
    MPRequestResponseController * _requestController;
    MPPropertySet * _requestedPropertySetForEvents;
    NSDictionary * _resultsIndexPathMap;
    NSString * _sessionID;
    long long  _shuffleType;
}

@property (nonatomic) bool allowsQueueModifications;
@property (nonatomic, readonly) bool autoPlayEnabled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSArray *enumeratorContentItemIDs;
@property (nonatomic, readonly) <MPCQueueControllerExternalSyncBehaviorHost> *externalSyncHost;
@property (nonatomic, readonly) bool hasUserMutations;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <MPCQueueControllerBehaviorHost> *host;
@property (nonatomic, retain) MPCModelGenericAVItemUserIdentityPropertySet *identityPropertySet;
@property (nonatomic) bool joiningAsInitiator;
@property (nonatomic, retain) NSMutableSet *knownContainerIDs;
@property (nonatomic, retain) ICLiveLink *liveLink;
@property (nonatomic) <MPCQueueControllerBehaviorMusicDelegate> *musicBehaviorDelegate;
@property (nonatomic) <MPCQueueControllerBehaviorMusicSharePlayDelegate> *musicSharePlayBehaviorDelegate;
@property (nonatomic, retain) NSMutableArray *pendingActions;
@property (setter=_setQueue:, nonatomic, retain) ICSharedListeningQueue *queue;
@property (nonatomic, readonly) long long queueExplicitContentState;
@property (nonatomic, readonly) long long repeatType;
@property (nonatomic, retain) MPRequestResponseController *requestController;
@property (nonatomic, copy) MPPropertySet *requestedPropertySetForEvents;
@property (nonatomic, copy) NSDictionary *resultsIndexPathMap;
@property (nonatomic, readonly, copy) NSString *sessionID;
@property (nonatomic, readonly) long long shuffleType;
@property (readonly) Class superclass;

+ (bool)canLoadQueue:(id)arg1 reason:(id*)arg2;

- (void).cxx_destruct;
- (id)_componentsForContentItemID:(id)arg1;
- (id)_componentsForSharedListeningItemID:(id)arg1;
- (void)_dequeuePendingActions;
- (void)_emitEventsForAddedSharedListeningContainer:(id)arg1;
- (void)_emitEventsForParticipants:(id)arg1 localUserIdentity:(id)arg2;
- (void)_emitEventsForPlaybackBehaviorChange;
- (void)_enqueuePendingActionWithLabel:(id)arg1 itemIdentifier:(id)arg2 block:(id /* block */)arg3;
- (void)_initializeWithQueue:(id)arg1;
- (id)_itemForContentItemID:(id)arg1;
- (id)_itemObjectForSharedListeningItemID:(id)arg1;
- (id)_mpcSharedListeningEventForICLiveLinkEvent:(id)arg1;
- (void)_purgePendingActionsWithLabel:(id)arg1;
- (id)_queueAsStateDictionary;
- (void)_reloadCacheDataWithOptions:(unsigned long long)arg1;
- (id)_sectionObjectForSharedListeningContainerID:(id)arg1;
- (id)_sectionedCollectionForQueue:(id)arg1;
- (void)_setQueue:(id)arg1;
- (id)_stateDictionaryIncludingQueue:(bool)arg1;
- (bool)_useItemPlaceholderForContentItemID:(id)arg1;
- (bool)_useItemPlaceholderForItemID:(id)arg1;
- (void)activeItemFlagsDidChange:(unsigned short)arg1;
- (bool)allowsQueueModifications;
- (bool)autoPlayEnabled;
- (bool)canJumpToContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canNextItemFromContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canPreviousItemFromContentItemID:(id)arg1 reason:(id*)arg2;
- (bool)canRemoveContentItemID:(id)arg1 reason:(id*)arg2;
- (void)canReuseQueue:(id)arg1 completion:(id /* block */)arg2;
- (bool)canUserChangeRepeatTypeWithReason:(id*)arg1;
- (bool)canUserChangeShuffleModeWithReason:(id*)arg1;
- (bool)canUserEnableAutoPlayWithReason:(id*)arg1;
- (void)clearAllItemsAfterContentItemID:(id)arg1;
- (id)componentsForContentItemID:(id)arg1;
- (void)connectToExternalSyncHost:(id)arg1;
- (void)connectToHost:(id)arg1;
- (id)contentItemIDEnumeratorStartingAfterContentItemID:(id)arg1 mode:(long long)arg2 options:(unsigned long long)arg3;
- (id)contentItemIDWithoutRepeatIteration:(id)arg1;
- (void)controller:(id)arg1 defersResponseReplacement:(id /* block */)arg2;
- (bool)controller:(id)arg1 shouldRetryFailedRequestWithError:(id)arg2;
- (id)copyContentItemID:(id)arg1 repeatIteration:(long long)arg2;
- (void)currentItemDidChangeFromContentItemID:(id)arg1 toContentItemID:(id)arg2;
- (void)didConnectToHost:(id)arg1;
- (void)didJumpToTargetContentItemID:(id)arg1;
- (void)didReachEndOfQueueWithReason:(id)arg1;
- (void)didStopLiveLink:(id)arg1;
- (void)disconnectFromExternalSyncHost:(id)arg1;
- (void)disconnectFromHost:(id)arg1;
- (long long)displayItemCount;
- (void)endSynchronizedPlayback;
- (id)enumeratorContentItemIDs;
- (id)externalSyncHost;
- (void)findFirstContentItemIDForItemIntersectingIdentifierSet:(id)arg1 completion:(id /* block */)arg2;
- (void)getExpectedCurrentItemModelObjectWithCompletion:(id /* block */)arg1;
- (void)getSharedQueueTracklistWithStartingContentItemID:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasUserMutations;
- (id)host;
- (id)identityPropertySet;
- (id)initWithSessionID:(id)arg1;
- (bool)isAutoPlayContentItemID:(id)arg1;
- (bool)isSupportedInsertionPosition:(long long)arg1 fromContentItemID:(id)arg2 reason:(id*)arg3;
- (bool)itemExistsForContentItemID:(id)arg1;
- (bool)joiningAsInitiator;
- (id)knownContainerIDs;
- (id)liveLink;
- (void)liveLink:(id)arg1 didEncounterError:(id)arg2 willRetry:(bool)arg3;
- (void)liveLink:(id)arg1 didReceiveDirectCurrentItemChanged:(id)arg2 fromParticipant:(id)arg3;
- (void)liveLink:(id)arg1 didReceiveEvent:(id)arg2;
- (void)liveLink:(id)arg1 didUpdateParticipants:(id)arg2;
- (void)liveLink:(id)arg1 didUpdateQueue:(id)arg2;
- (void)liveLinkDidReconnect:(id)arg1;
- (void)moveContentItemID:(id)arg1 afterContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (void)moveContentItemID:(id)arg1 beforeContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (id)musicBehaviorDelegate;
- (id)musicSharePlayBehaviorDelegate;
- (id)pendingActions;
- (void)performInsertCommand:(id)arg1 targetContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (id)performLoadCommand:(id)arg1 completion:(id /* block */)arg2;
- (id)playbackCoordinator:(id)arg1 identifierForPlayerItem:(id)arg2;
- (id)queue;
- (long long)queueExplicitContentState;
- (void)removeContentItemID:(id)arg1 completion:(id /* block */)arg2;
- (long long)repeatType;
- (id)requestController;
- (id)requestedPropertySetForEvents;
- (void)reshuffleWithTargetContentItemID:(id)arg1 completion:(id /* block */)arg2;
- (id)resultsIndexPathMap;
- (id)sessionID;
- (void)setAllowsQueueModifications:(bool)arg1;
- (void)setAutoPlayEnabled:(bool)arg1 targetContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (void)setEnumeratorContentItemIDs:(id)arg1;
- (void)setHostingSharedSessionID:(id)arg1 reason:(id)arg2;
- (void)setIdentityPropertySet:(id)arg1;
- (void)setJoiningAsInitiator:(bool)arg1;
- (void)setKnownContainerIDs:(id)arg1;
- (void)setLiveLink:(id)arg1;
- (void)setMusicBehaviorDelegate:(id)arg1;
- (void)setMusicSharePlayBehaviorDelegate:(id)arg1;
- (void)setPendingActions:(id)arg1;
- (void)setRepeatType:(long long)arg1 completion:(id /* block */)arg2;
- (void)setRequestController:(id)arg1;
- (void)setRequestedPropertySetForEvents:(id)arg1;
- (void)setResultsIndexPathMap:(id)arg1;
- (void)setShuffleType:(long long)arg1 targetContentItemID:(id)arg2 completion:(id /* block */)arg3;
- (long long)shuffleType;
- (void)updatePlaybackCoordinator:(id)arg1;

@end
