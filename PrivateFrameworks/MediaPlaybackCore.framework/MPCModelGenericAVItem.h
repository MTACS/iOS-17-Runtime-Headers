
@interface MPCModelGenericAVItem : MPAVItem <AVAssetResourceLoaderDelegate, AVPlayerItemMetadataOutputPushDelegate, ICContentKeySessionDelegateProtocol, ICEnvironmentMonitorObserver> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    MPCPlayerAudioFormat * _activeFormat;
    long long  _activeFormatJustification;
    bool  _allowsAirPlayFromCloud;
    NSArray * _alternateFormats;
    <MPCModelPlaybackAssetCacheProviding> * _assetCacheProvider;
    NSString * _assetSourceStoreFrontID;
    MPCAudioAssetTypeSelector * _audioAssetTypeSelector;
    NSDictionary * _audioFormatsDictionary;
    MPCPlayerAudioRoute * _audioRoute;
    NSArray * _availableSortedFormats;
    ICContentKeySession * _contentKeySession;
    NSArray * _currentGlobalTimedMetadataGroups;
    MPCDeferrableTask * _deferredLeaseAcquisitionTask;
    bool  _didDeferPreventionStatusUpdate;
    bool  _didReceiveHLSTimedMetadata;
    bool  _downloadedAsset;
    long long  _equivalencySourceAdamID;
    MPCPlaybackEngineEventStream * _eventStream;
    id /* block */  _firstBecomeActivePlayerItemBlock;
    MPModelGenericObject * _flattenedGenericObject;
    MPModelGenericObject * _flattenedMetadataGenericObject;
    MPModelGenericObject * _genericObject;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _genericObjectLock;
    bool  _hasLoadedSubscriptionLeaseSession;
    bool  _hasLoadedSubscriptionPlaybackInformation;
    bool  _hlsAsset;
    ICURLRequest * _hlsDownloadURLRequest;
    ICAVAssetDownloadURLSession * _hlsDownloadURLSession;
    NSString * _hlsStreamIdentifier;
    <MPCReportingIdentityPropertiesLoading> * _identityPropertiesLoader;
    MPCModelGenericAVItemUserIdentityPropertySet * _identityPropertySet;
    bool  _isAutomaticallyRefreshingSuzeLeaseSession;
    bool  _isMusicCellularStreamingAllowed;
    bool  _isSubscriptionPolicyContent;
    bool  _isiTunesStoreStream;
    MPPropertySet * _itemProperties;
    NSData * _jingleTimedMetadata;
    bool  _lastPreparedForNonZeroRate;
    long long  _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus * _leaseStatus;
    long long  _loadedAudioAssetType;
    bool  _mediaItemNeedsLoading;
    MPMediaLibrary * _mediaLibrary;
    MPModelGenericObject * _metadataGenericObject;
    MPCPlaybackRequestEnvironment * _playbackRequestEnvironment;
    NSString * _playerID;
    long long  _preferredAudioAssetType;
    MPCAudioAssetTypeSelection * _preferredAudioAssetTypeSelection;
    MPCPlayerAudioFormat * _preferredFormat;
    NSString * _previousQueueItemID;
    bool  _prioritizeStartupOverQuality;
    bool  _radioPlayback;
    bool  _radioStreamPlayback;
    NSString * _rtcReportingServiceIdentifier;
    bool  _shouldAutomaticallyRefreshSubscriptionLease;
    NSNumber * _siriInitiated;
    long long  _stationItemLikedState;
    ICStoreRequestContext * _storeRequestContext;
    NSURL * _streamingKeyCertificateURL;
    NSURL * _streamingKeyServerURL;
    long long  _subscriptionLeaseRequestCount;
    ICMusicSubscriptionLeaseSession * _subscriptionLeaseSession;
    NSObject<OS_dispatch_queue> * _subscriptionLeaseSessionLoadQueue;
    MPSubscriptionStatusPlaybackInformation * _subscriptionPlaybackInformation;
    NSObject<OS_dispatch_queue> * _subscriptionPlaybackInformationLoadQueue;
    bool  _subscriptionRequired;
    MPCSuzeLeaseSession * _suzeLeaseSession;
    NSURL * _tempFileURLToCleanup;
    NSOperationQueue * _timedMetadataOperationQueue;
    MPCModelGenericAVItemTimedMetadataRequest * _timedMetadataRequest;
    MPCModelGenericAVItemTimedMetadataResponse * _timedMetadataResponse;
    NSDictionary * _trackInfo;
}

@property (nonatomic, retain) MPCPlayerAudioFormat *activeFormat;
@property (nonatomic) long long activeFormatJustification;
@property (nonatomic, retain) NSArray *alternateFormats;
@property (nonatomic, retain) <MPCModelPlaybackAssetCacheProviding> *assetCacheProvider;
@property (nonatomic, copy) NSString *assetSourceStoreFrontID;
@property (nonatomic, retain) MPCAudioAssetTypeSelector *audioAssetTypeSelector;
@property (nonatomic, copy) NSDictionary *audioFormatsDictionary;
@property (nonatomic, retain) MPCPlayerAudioRoute *audioRoute;
@property (nonatomic, retain) NSArray *availableSortedFormats;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDownloadedAsset, nonatomic, readonly) bool downloadedAsset;
@property (nonatomic) long long equivalencySourceAdamID;
@property (nonatomic) MPCPlaybackEngineEventStream *eventStream;
@property (nonatomic, readonly) MPGaplessInfo *gaplessInfo;
@property (nonatomic, retain) MPModelGenericObject *genericObject;
@property (nonatomic, readonly) bool hasVideo;
@property (readonly) unsigned long long hash;
@property (getter=isHLSAsset, nonatomic, readonly) bool hlsAsset;
@property (nonatomic, readonly, copy) NSData *jingleTimedMetadata;
@property (nonatomic, readonly) long long loadedAudioAssetType;
@property (nonatomic, retain) MPMediaLibrary *mediaLibrary;
@property (nonatomic, readonly, copy) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (nonatomic, retain) NSString *playerID;
@property (nonatomic, readonly) long long preferredAudioAssetType;
@property (nonatomic, readonly) MPCAudioAssetTypeSelection *preferredAudioAssetTypeSelection;
@property (nonatomic, retain) MPCPlayerAudioFormat *preferredFormat;
@property (nonatomic, copy) NSString *previousQueueItemID;
@property (nonatomic) bool prioritizeStartupOverQuality;
@property (getter=isRadioPlayback, nonatomic) bool radioPlayback;
@property (getter=isRadioStreamPlayback, nonatomic) bool radioStreamPlayback;
@property (nonatomic, readonly) bool shouldReportPlayEventsToStore;
@property (getter=isSiriInitiated, nonatomic, copy) NSNumber *siriInitiated;
@property (nonatomic) long long stationItemLikedState;
@property (getter=isSubscriptionRequired, nonatomic) bool subscriptionRequired;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSDictionary *trackInfo;
@property (nonatomic, readonly) NSData *trackInfoData;

+ (id)_downloadCompletionPendingItems;
+ (bool)_prefersHighQualityAudioContentForNetworkType:(long long)arg1;
+ (bool)_prefersHighQualityVideoContentForNetworkType:(long long)arg1;
+ (long long)_unwrapPlaybackError:(id)arg1;
+ (id)_utilitySerialQueue;

- (void).cxx_destruct;
- (void)_addToDownloadCompletionPendingItems;
- (void)_ageVerificationStateDidChangeNotification:(id)arg1;
- (void)_allowsHighQualityMusicStreamingOnCellularDidChangeNotification:(id)arg1;
- (bool)_allowsStreamingPlayback;
- (void)_applyLoudnessInfo;
- (void)_applyPreferredPeakBitRateToPlayerItem:(id)arg1 withItemType:(long long)arg2;
- (id)_assetLoadPropertiesWithUserIdentityProperties:(id)arg1 delegatedUserIdentityProperties:(id)arg2 subscriptionPlaybackInfo:(id)arg3;
- (unsigned long long)_audioFormatPreference;
- (id)_bookmarkTime;
- (void)_checkDownloadErrorAndValidityOfDownloadedHLSAsset:(id)arg1 downloadLocationURL:(id)arg2 completion:(id /* block */)arg3;
- (void)_contentTasteControllerDidChangeNotification:(id)arg1;
- (id)_createOrUpdateDatabaseEntry:(id)arg1 loadResult:(id)arg2 urlBag:(id)arg3 destinationURL:(id)arg4 purgeable:(bool)arg5;
- (void)_currentPlaybackRateDidChange:(float)arg1;
- (id)_decorateAssetLoadResult:(id)arg1 withURLBag:(id)arg2;
- (id)_delegatedUserIdentityProperties:(id*)arg1;
- (void)_didBecomeActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_downloadHLSAsset:(id)arg1 destinationURL:(id)arg2 sharedCacheURL:(id)arg3 assetLoadProperties:(id)arg4 loadResult:(id)arg5 storeRequestContext:(id)arg6 urlBag:(id)arg7 fileUpgradeRecommendation:(long long)arg8;
- (void)_downloadHLSAssetWhilePlaying:(id)arg1 assetLoadProperties:(id)arg2 assetLoadResult:(id)arg3 destinationURL:(id)arg4 sharedCacheURL:(id)arg5 storeRequestContext:(id)arg6 urlBag:(id)arg7 fileUpgradeRecommendation:(long long)arg8;
- (void)_emitAudioAssetTypeSelection:(id)arg1 assetLoadInfo:(id)arg2;
- (void)_emitAudioFormatChangeEvent;
- (void)_emitNetworkOperationWithPerformanceMetrics:(id)arg1 operationType:(long long)arg2 reason:(id)arg3 blocksPlayback:(bool)arg4;
- (void)_getHLSServerDataForLoadResults:(id)arg1 bag:(id)arg2 keyCertificateURL:(id*)arg3 keyServerURL:(id*)arg4 keyServerAdamID:(id*)arg5 keyServerProtocolType:(long long*)arg6;
- (void)_getSubscriptionLeasePropertiesWithCompletion:(id /* block */)arg1;
- (void)_getUnverifiedSubscriptionLeaseSessionWithCompletion:(id /* block */)arg1;
- (void)_handleUpdatedLikedState:(long long)arg1 forUserIdentity:(id)arg2 completion:(id /* block */)arg3;
- (id)_hlsDownloadOptionsDictionary:(id)arg1;
- (id)_iTunesStorePurchasedMediaKind;
- (void)_invalidateContentItemForTimedMetadataChangesChangingRevisionID:(bool)arg1;
- (bool)_isAssetLoadResultValidForPlayback:(id)arg1 error:(id*)arg2;
- (long long)_keyServerAdamID;
- (bool)_linkAssetIfNeededAtURL:(id)arg1 toDestinationURL:(id)arg2 shareCacheURL:(id)arg3;
- (id)_loudnessInfoMediaKind;
- (id)_modelPlaybackPosition;
- (long long)_persistedLikedState;
- (void)_postInvalidationNotifications;
- (bool)_prefersHighQualityContent;
- (void)_prepareAssetForHLSPlayback:(id)arg1 loadResult:(id)arg2 destinationURL:(id)arg3 storeRequestContext:(id)arg4 urlBag:(id)arg5 identityProperties:(id)arg6;
- (void)_prepareLeaseWithShouldRequireLeaseAcquisition:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)_radioStation;
- (void)_reloadTimedMetadataRequest;
- (void)_removeFromDownloadCompletionPendingItems;
- (id)_rtcReportingMediaIdentifierWithAssetLoadProperties:(id)arg1;
- (id)_rtcReportingServiceIdentifierWithAssetURL:(id)arg1;
- (bool)_shouldPreloadSubscriptionStatus;
- (double)_startTime;
- (id)_stopTime;
- (id)_storeRequestContext;
- (id)_storeUbiquitousIdentifier;
- (void)_subscriptionLeaseStatusDidChangeNotification:(id)arg1;
- (long long)_suzeLeaseMediaType;
- (void)_suzeLeaseSessionRenewDidFailNotification:(id)arg1;
- (void)_timedMetadataResponseDidInvalidateNotification:(id)arg1;
- (struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; })_timeoutValues;
- (void)_updateActiveFormatJustification:(long long)arg1;
- (void)_updateAudioFormatInfoForContentItem:(id)arg1;
- (void)_updateAutomaticSubscriptionLeaseRefresh;
- (void)_updateJingleTimedMetadata;
- (void)_updatePreventionStatusWithLeaseSession:(id)arg1;
- (float)_volumeAdjustment;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (id)activeFormat;
- (long long)activeFormatJustification;
- (id)album;
- (id)albumArtist;
- (unsigned long long)albumArtistPersistentID;
- (unsigned long long)albumPersistentID;
- (long long)albumStoreID;
- (unsigned long long)albumTrackCount;
- (unsigned long long)albumTrackNumber;
- (long long)albumYear;
- (bool)allowsAirPlayFromCloud;
- (bool)allowsEQ;
- (bool)allowsExternalPlayback;
- (id)alternateFormats;
- (id)analyticsContentType;
- (id)analyticsFormatType;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(bool)arg1;
- (id)artist;
- (unsigned long long)artistPersistentID;
- (long long)artistStoreID;
- (id /* block */)artworkCatalogBlock;
- (id)artworkTimeMarkers;
- (id)assetCacheProvider;
- (id)assetSourceStoreFrontID;
- (id)audioAssetTypeSelector;
- (id)audioFormatForStableVariantID:(id)arg1;
- (id)audioFormatsDictionary;
- (id)audioRoute;
- (id)availableSortedFormats;
- (id)bookmarkTime;
- (bool)canUseLoadedAsset;
- (id)chapterTimeMarkers;
- (id)cloudAlbumID;
- (unsigned long long)cloudID;
- (id)cloudUniversalLibraryID;
- (id)composer;
- (unsigned long long)composerPersistentID;
- (void)configureAVPlayerItemWithAudioFormat:(id)arg1 forceSpatial:(bool)arg2;
- (id)containerUniqueID;
- (void)contentKeySession:(id)arg1 didFinishProcessingKey:(id)arg2 withResponse:(id)arg3 error:(id)arg4;
- (id)copyrightText;
- (id)currentPlayerAudioFormat;
- (id)databaseID;
- (void)dealloc;
- (id)description;
- (double)durationFromExternalMetadata;
- (void)environmentMonitorDidChangeNetworkType:(id)arg1;
- (long long)equivalencySourceAdamID;
- (id)eventStream;
- (id)explicitBadge;
- (id)externalContentIdentifier;
- (id)gaplessInfo;
- (id)genericObject;
- (id)genre;
- (unsigned long long)genrePersistentID;
- (bool)hasStoreLyrics;
- (bool)hasTimeSyncedLyrics;
- (bool)hasVideo;
- (id)initWithGenericObject:(id)arg1 itemProperties:(id)arg2 playbackRequestEnvironment:(id)arg3 identityPropertySet:(id)arg4;
- (bool)isAlwaysLive;
- (bool)isArtistUploadedContent;
- (bool)isAssetURLValid;
- (bool)isDownloadedAsset;
- (bool)isExplicitTrack;
- (bool)isHLSAsset;
- (bool)isLikedStateEnabled;
- (bool)isRadioItem;
- (bool)isRadioPlayback;
- (bool)isRadioStreamPlayback;
- (id)isSiriInitiated;
- (bool)isStreamable;
- (bool)isSubscriptionRequired;
- (bool)isValidPlayerSubstituteForItem:(id)arg1;
- (id)jingleTimedMetadata;
- (long long)leasePlaybackPreventionState;
- (id)leaseStatus;
- (id)libraryLyrics;
- (void)loadAssetAndPlayerItem;
- (long long)loadedAudioAssetType;
- (long long)lyricsAdamID;
- (id)mainTitle;
- (id)mediaItem;
- (bool)mediaItemNeedsLoading;
- (id)mediaLibrary;
- (unsigned long long)mediaType;
- (void)metadataOutput:(id)arg1 didOutputTimedMetadataGroups:(id)arg2 fromPlayerItemTrack:(id)arg3;
- (id)modelGenericObject;
- (long long)mpcReporting_equivalencySourceAdamID;
- (id)mpcReporting_identityPropertiesLoader;
- (unsigned long long)mpcReporting_itemType;
- (id)mpcReporting_jingleTimedMetadata;
- (id)mpcReporting_requestingBundleIdentifier;
- (id)mpcReporting_requestingBundleVersion;
- (bool)mpcReporting_shouldReportPlayEventsToStore;
- (bool)mpcReporting_shouldUseRelativeTimePositions;
- (id)mpcReporting_siriInitiated;
- (id)mpcReporting_trackInfo;
- (void)notePlaybackFinishedByHittingEnd;
- (void)nowPlayingInfoCenter:(id)arg1 lyricsForContentItem:(id)arg2 completion:(id /* block */)arg3;
- (void)pauseContentKeySession;
- (unsigned long long)persistentID;
- (id)personID;
- (id)playbackError;
- (id)playbackInfo;
- (id)playbackRequestEnvironment;
- (id)playerID;
- (long long)preferredAudioAssetType;
- (id)preferredAudioAssetTypeSelection;
- (id)preferredFormat;
- (bool)prefersSeekOverSkip;
- (void)prepareForRate:(float)arg1 completionHandler:(id /* block */)arg2;
- (id)previousQueueItemID;
- (bool)prioritizeStartupOverQuality;
- (void)reevaluateType;
- (long long)reportingAdamID;
- (bool)requiresLoadedAssetForAirPlayProperties;
- (void)resolvePlaybackError:(id)arg1 withCompletion:(id /* block */)arg2;
- (bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (bool)resourceLoader:(id)arg1 shouldWaitForRenewalOfRequestedResource:(id)arg2;
- (void)resumeContentKeySession;
- (id)rtcReportingServiceIdentifier;
- (void)setActiveFormat:(id)arg1;
- (void)setActiveFormatJustification:(long long)arg1;
- (void)setAlternateFormats:(id)arg1;
- (void)setAssetCacheProvider:(id)arg1;
- (void)setAssetSourceStoreFrontID:(id)arg1;
- (void)setAudioAssetTypeSelector:(id)arg1;
- (void)setAudioFormatsDictionary:(id)arg1;
- (void)setAudioRoute:(id)arg1;
- (void)setAvailableSortedFormats:(id)arg1;
- (void)setEquivalencySourceAdamID:(long long)arg1;
- (void)setEventStream:(id)arg1;
- (void)setGenericObject:(id)arg1;
- (void)setMediaLibrary:(id)arg1;
- (void)setPlayerID:(id)arg1;
- (void)setPreferredFormat:(id)arg1;
- (void)setPreviousQueueItemID:(id)arg1;
- (void)setPrioritizeStartupOverQuality:(bool)arg1;
- (void)setRadioPlayback:(bool)arg1;
- (void)setRadioStreamPlayback:(bool)arg1;
- (void)setRating:(float)arg1;
- (void)setSiriInitiated:(id)arg1;
- (void)setStationItemLikedState:(long long)arg1;
- (void)setSubscriptionRequired:(bool)arg1;
- (void)setTrackInfo:(id)arg1;
- (void)setupWithPlaybackInfo;
- (bool)shouldPreventPlayback;
- (bool)shouldReportPlayEventsToStore;
- (bool)shouldShowComposer;
- (id)stationHash;
- (long long)stationID;
- (long long)stationItemLikedState;
- (id)stationName;
- (long long)stationProviderID;
- (id)stationStringID;
- (id)storeAccountID;
- (long long)storeAlbumArtistID;
- (id)storeFrontIdentifier;
- (long long)storeItemInt64ID;
- (long long)storePurchasedAdamID;
- (long long)storeSubscriptionAdamID;
- (bool)supportsLikedState;
- (bool)supportsVocalAttenuation;
- (id)trackInfo;
- (id)trackInfoData;
- (long long)type;
- (bool)updateActiveFormat:(id)arg1 justification:(long long)arg2;
- (bool)updateAudioFormatsDictionary:(id)arg1;
- (void)updatePlayerItemMetadata;
- (bool)updatePreferredFormat:(id)arg1;
- (id)urlTimeMarkers;
- (bool)useEmbeddedChapterData;
- (float)userRating;
- (bool)usesBookmarking;
- (bool)usesSubscriptionLease;

@end
