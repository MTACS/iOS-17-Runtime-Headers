
@interface CSIGenerator : NSObject {
    short  _alignment;
    struct { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _alignmentRectInsets;
    bool  _allowsDeepmap2ImageCompression;
    bool  _allowsDeepmapImageCompression;
    bool  _allowsHevcCompression;
    bool  _allowsMultiPassEncoding;
    bool  _allowsOptimalRowbytesPacking;
    bool  _allowsPaletteImageCompression;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _alphaCroppedFrame;
    NSString * _assetPackIdentifier;
    float  _baseline;
    NSMutableArray * _bitmaps;
    int  _blendMode;
    float  _capHeight;
    bool  _clampMetrics;
    NSArray * _colorComponents;
    short  _colorSpaceID;
    double  _compressionQuality;
    long long  _compressionType;
    NSArray * _containedNamedElements;
    CUIShapeEffectPreset * _effectPreset;
    int  _exifOrientation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _externalReferenceFrame;
    NSSet * _externalTags;
    NSString * _fontName;
    double  _fontSize;
    CUIPSDGradient * _gradient;
    bool  _isCubeMap;
    bool  _isExcludedFromFilter;
    bool  _isFlippable;
    bool  _isInterpolatable;
    bool  _isTintable;
    bool  _isVectorBased;
    NSMutableArray * _layerReferences;
    short  _layout;
    unsigned short  _linkLayout;
    double  _maxPointSize;
    NSMutableArray * _meshReferences;
    NSMutableArray * _metrics;
    double  _minPointSize;
    NSMutableArray * _mipReferences;
    MDLAsset * _modelAsset;
    MDLMesh * _modelMesh;
    MDLSubmesh * _modelSubmesh;
    NSDate * _modtime;
    NSString * _name;
    int  _objectVersion;
    double  _opacity;
    bool  _optOutOfThinning;
    struct CGSize { 
        double width; 
        double height; 
    }  _originalUncroppedSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _physicalSizeInMeters;
    unsigned int  _pixelFormat;
    bool  _preserveForArchiveOnly;
    bool  _preservedVectorRepresentation;
    NSData * _rawData;
    NSDictionary * _renditionProperties;
    unsigned long long  _rowbytes;
    unsigned int  _scaleFactor;
    short  _scalingStyle;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    NSDictionary * _sizesByIndex;
    NSMutableArray * _slices;
    unsigned int  _standardVectorSize;
    NSMutableArray * _submeshReferences;
    NSString * _systemColorName;
    long long  _targetPlatform;
    long long  _templateRenderingMode;
    float  _templateVersion;
    long long  _textureFormat;
    long long  _textureInterpretation;
    bool  _textureOpaque;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _transformation;
    NSString * _utiType;
    bool  _vectorContainsHierarchicalLayers;
    bool  _vectorContainsMulticolorLayers;
    long long  _vectorGlyphRenderingMode;
    NSArray * _vectorSizes;
}

@property (nonatomic) short alignment;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } alignmentRectInsets;
@property (nonatomic) bool allowsDeepmap2ImageCompression;
@property (nonatomic) bool allowsDeepmapImageCompression;
@property (nonatomic) bool allowsHevcCompression;
@property (nonatomic) bool allowsMultiPassEncoding;
@property (nonatomic) bool allowsOptimalRowbytesPacking;
@property (nonatomic) bool allowsPaletteImageCompression;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alphaCroppedFrame;
@property (nonatomic) float baseline;
@property (nonatomic) int blendMode;
@property (nonatomic) float capHeight;
@property (nonatomic) bool clampMetrics;
@property (nonatomic, copy) NSArray *colorComponents;
@property (nonatomic) short colorSpaceID;
@property (nonatomic) double compressionQuality;
@property long long compressionType;
@property (nonatomic) bool cubemap;
@property (nonatomic, retain) CUIShapeEffectPreset *effectPreset;
@property (getter=isExcludedFromContrastFilter, nonatomic) bool excludedFromContrastFilter;
@property (nonatomic) int exifOrientation;
@property (nonatomic, copy) NSString *fontName;
@property (nonatomic) double fontSize;
@property (nonatomic, retain) CUIPSDGradient *gradient;
@property (getter=isInterpolatable, nonatomic) bool interpolatable;
@property (nonatomic) bool isFlippable;
@property (nonatomic) bool isTintable;
@property (nonatomic) bool isVectorBased;
@property (nonatomic, readonly) NSArray *layerReferences;
@property (nonatomic) double maxPointSize;
@property (nonatomic, readonly) NSArray *meshReferences;
@property (nonatomic) double minPointSize;
@property (nonatomic, readonly) NSArray *mipReferences;
@property (nonatomic, copy) MDLAsset *modelAsset;
@property (nonatomic, copy) MDLMesh *modelMesh;
@property (nonatomic, copy) MDLSubmesh *modelSubmesh;
@property (nonatomic, copy) NSDate *modtime;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) int objectVersion;
@property (nonatomic) double opacity;
@property (nonatomic) bool optOutOfThinning;
@property (nonatomic) struct CGSize { double x1; double x2; } originalUncroppedSize;
@property (nonatomic) struct CGSize { double x1; double x2; } physicalSizeInMeters;
@property (nonatomic) unsigned int pixelFormat;
@property (nonatomic) bool preserveForArchiveOnly;
@property (nonatomic) bool preservedVectorRepresentation;
@property (nonatomic, copy) NSDictionary *renditionProperties;
@property (nonatomic) unsigned int scaleFactor;
@property (nonatomic) short scalingStyle;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property (nonatomic, copy) NSDictionary *sizesByIndex;
@property (nonatomic) unsigned int standardVectorSize;
@property (nonatomic, readonly) NSArray *submeshReferences;
@property long long targetPlatform;
@property (nonatomic) long long templateRenderingMode;
@property (nonatomic) float templateVersion;
@property (nonatomic) long long textureFormat;
@property (nonatomic) long long textureInterpretation;
@property (nonatomic) bool textureOpaque;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } transformation;
@property (nonatomic, copy) NSString *utiType;
@property (nonatomic) bool vectorContainsHierarchicalLayers;
@property (nonatomic) bool vectorContainsMulticolorLayers;
@property (nonatomic) long long vectorGlyphRenderingMode;
@property (nonatomic, copy) NSArray *vectorSizes;

+ (int)fileEncoding;
+ (void)initialize;
+ (void)setFileEncoding:(int)arg1;

- (id)CSIRepresentationWithCompression:(bool)arg1;
- (void)addBitmap:(id)arg1;
- (void)addLayerReference:(id)arg1;
- (void)addMeshReference:(id)arg1;
- (void)addMetrics:(struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })arg1;
- (void)addMipReference:(id)arg1;
- (void)addSliceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)addSubmeshReference:(id)arg1;
- (short)alignment;
- (struct { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)allowsDeepmap2ImageCompression;
- (bool)allowsDeepmapImageCompression;
- (bool)allowsHevcCompression;
- (bool)allowsMultiPassEncoding;
- (bool)allowsOptimalRowbytesPacking;
- (bool)allowsPaletteImageCompression;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alphaCroppedFrame;
- (float)baseline;
- (int)blendMode;
- (float)capHeight;
- (bool)clampMetrics;
- (id)colorComponents;
- (short)colorSpaceID;
- (double)compressionQuality;
- (long long)compressionType;
- (bool)cubemap;
- (void)dealloc;
- (id)effectPreset;
- (int)exifOrientation;
- (id)fontName;
- (double)fontSize;
- (id)gradient;
- (id)initWithCanvasSize:(struct CGSize { double x1; double x2; })arg1 sliceCount:(unsigned int)arg2 layout:(short)arg3;
- (id)initWithColorNamed:(id)arg1 colorSpaceID:(unsigned long long)arg2 components:(id)arg3;
- (id)initWithColorNamed:(id)arg1 colorSpaceID:(unsigned long long)arg2 components:(id)arg3 linkedToSystemColorWithName:(id)arg4;
- (id)initWithExternalReference:(id)arg1 tags:(id)arg2;
- (id)initWithInternalReferenceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layout:(short)arg2;
- (id)initWithLayerStackData:(id)arg1 type:(long long)arg2 withCanvasSize:(struct CGSize { double x1; double x2; })arg3;
- (id)initWithLayerStackData:(id)arg1 withCanvasSize:(struct CGSize { double x1; double x2; })arg2;
- (id)initWithModelAsset:(id)arg1;
- (id)initWithModelMesh:(id)arg1;
- (id)initWithModelSubmesh:(id)arg1;
- (id)initWithMultisizeImageSetNamed:(id)arg1 sizesByIndex:(id)arg2;
- (id)initWithNameList:(id)arg1;
- (id)initWithRawData:(id)arg1 pixelFormat:(unsigned int)arg2 layout:(short)arg3;
- (id)initWithShapeEffectPreset:(id)arg1 forScaleFactor:(unsigned int)arg2;
- (id)initWithTextStyleNamed:(id)arg1 fontName:(id)arg2 fontSize:(double)arg3 maxPointSize:(double)arg4 minPointSize:(double)arg5 scalingStyle:(short)arg6 alignment:(short)arg7;
- (id)initWithTextureForPixelFormat:(long long)arg1;
- (id)initWithTextureImageWithSize:(struct CGSize { double x1; double x2; })arg1 forPixelFormat:(long long)arg2 cubeMap:(bool)arg3;
- (bool)isExcludedFromContrastFilter;
- (bool)isFlippable;
- (bool)isInterpolatable;
- (bool)isTintable;
- (bool)isVectorBased;
- (id)layerReferences;
- (double)maxPointSize;
- (id)meshReferences;
- (double)minPointSize;
- (id)mipReferences;
- (id)modelAsset;
- (id)modelMesh;
- (id)modelSubmesh;
- (id)modtime;
- (id)name;
- (int)objectVersion;
- (double)opacity;
- (bool)optOutOfThinning;
- (struct CGSize { double x1; double x2; })originalUncroppedSize;
- (struct CGSize { double x1; double x2; })physicalSizeInMeters;
- (unsigned int)pixelFormat;
- (bool)preserveForArchiveOnly;
- (bool)preservedVectorRepresentation;
- (id)rawData;
- (id)renditionProperties;
- (unsigned int)scaleFactor;
- (short)scalingStyle;
- (void)setAlignment:(short)arg1;
- (void)setAlignmentRectInsets:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setAllowsDeepmap2ImageCompression:(bool)arg1;
- (void)setAllowsDeepmapImageCompression:(bool)arg1;
- (void)setAllowsHevcCompression:(bool)arg1;
- (void)setAllowsMultiPassEncoding:(bool)arg1;
- (void)setAllowsOptimalRowbytesPacking:(bool)arg1;
- (void)setAllowsPaletteImageCompression:(bool)arg1;
- (void)setAlphaCroppedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBaseline:(float)arg1;
- (void)setBlendMode:(int)arg1;
- (void)setCapHeight:(float)arg1;
- (void)setClampMetrics:(bool)arg1;
- (void)setColorComponents:(id)arg1;
- (void)setColorSpaceID:(short)arg1;
- (void)setCompressionQuality:(double)arg1;
- (void)setCompressionType:(long long)arg1;
- (void)setCubemap:(bool)arg1;
- (void)setEffectPreset:(id)arg1;
- (void)setExcludedFromContrastFilter:(bool)arg1;
- (void)setExifOrientation:(int)arg1;
- (void)setFontName:(id)arg1;
- (void)setFontSize:(double)arg1;
- (void)setGradient:(id)arg1;
- (void)setInterpolatable:(bool)arg1;
- (void)setIsFlippable:(bool)arg1;
- (void)setIsTintable:(bool)arg1;
- (void)setIsVectorBased:(bool)arg1;
- (void)setMaxPointSize:(double)arg1;
- (void)setMinPointSize:(double)arg1;
- (void)setModelAsset:(id)arg1;
- (void)setModelMesh:(id)arg1;
- (void)setModelSubmesh:(id)arg1;
- (void)setModtime:(id)arg1;
- (void)setName:(id)arg1;
- (void)setObjectVersion:(int)arg1;
- (void)setOpacity:(double)arg1;
- (void)setOptOutOfThinning:(bool)arg1;
- (void)setOriginalUncroppedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPhysicalSizeInMeters:(struct CGSize { double x1; double x2; })arg1;
- (void)setPixelFormat:(unsigned int)arg1;
- (void)setPreserveForArchiveOnly:(bool)arg1;
- (void)setPreservedVectorRepresentation:(bool)arg1;
- (void)setRenditionProperties:(id)arg1;
- (void)setScaleFactor:(unsigned int)arg1;
- (void)setScalingStyle:(short)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSizesByIndex:(id)arg1;
- (void)setStandardVectorSize:(unsigned int)arg1;
- (void)setTargetPlatform:(long long)arg1;
- (void)setTemplateRenderingMode:(long long)arg1;
- (void)setTemplateVersion:(float)arg1;
- (void)setTextureFormat:(long long)arg1;
- (void)setTextureInterpretation:(long long)arg1;
- (void)setTextureOpaque:(bool)arg1;
- (void)setTransformation:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setUtiType:(id)arg1;
- (void)setVectorContainsHierarchicalLayers:(bool)arg1;
- (void)setVectorContainsMulticolorLayers:(bool)arg1;
- (void)setVectorGlyphRenderingMode:(long long)arg1;
- (void)setVectorSizes:(id)arg1;
- (struct CGSize { double x1; double x2; })size;
- (id)sizesByIndex;
- (unsigned int)standardVectorSize;
- (id)submeshReferences;
- (long long)targetPlatform;
- (long long)templateRenderingMode;
- (float)templateVersion;
- (long long)textureFormat;
- (long long)textureInterpretation;
- (bool)textureOpaque;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })transformation;
- (id)utiType;
- (bool)vectorContainsHierarchicalLayers;
- (bool)vectorContainsMulticolorLayers;
- (long long)vectorGlyphRenderingMode;
- (id)vectorSizes;

@end
