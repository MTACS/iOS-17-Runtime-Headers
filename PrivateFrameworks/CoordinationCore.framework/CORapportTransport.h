
@interface CORapportTransport : NSObject <COPingableProtocol, COTransportProtocol> {
    bool  _activated;
    NSObject<OS_nw_activity> * _activity;
    double  _averageRequestTime;
    <COCompanionLinkClientProtocol> * _client;
    id /* block */  _clientIsUsingOnDemandConnection;
    NSMutableDictionary * _commands;
    NSMutableDictionary * _counters;
    <COTransportDelegate> * _delegate;
    NSError * _error;
    COExecutionContext * _executionContext;
    double  _maximumPingInterval;
    double  _minimumPingInterval;
    <CODiscoveryRecordProtocol> * _record;
    NSMutableDictionary * _registrationCompletions;
    COConstituent * _remote;
    unsigned long long  _requestCount;
    NSMapTable * _sinks;
}

@property (nonatomic, readonly) NSObject<OS_nw_activity> *activity;
@property (nonatomic) double averageRequestTime;
@property (nonatomic, retain) <COCompanionLinkClientProtocol> *client;
@property (nonatomic, copy) id /* block */ clientIsUsingOnDemandConnection;
@property (nonatomic, readonly, copy) NSMutableDictionary *commands;
@property (nonatomic, readonly, copy) NSMutableDictionary *counters;
@property (nonatomic, readonly) double currentPingTimeout;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <COTransportDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSError *error;
@property (nonatomic, readonly) COExecutionContext *executionContext;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) int listeningPort;
@property (nonatomic) double maximumPingInterval;
@property (nonatomic) double minimumPingInterval;
@property (nonatomic, readonly) <CODiscoveryRecordProtocol> *record;
@property (nonatomic, readonly) NSMutableDictionary *registrationCompletions;
@property (nonatomic, retain) COConstituent *remote;
@property (nonatomic) unsigned long long requestCount;
@property (nonatomic, readonly) NSMapTable *sinks;
@property (readonly) Class superclass;

+ (void)_commandPayloadFromRapportRepresentation:(id)arg1 result:(id /* block */)arg2;

- (void).cxx_destruct;
- (void)_commandForIdentifier:(id)arg1 fromData:(id)arg2 result:(id /* block */)arg3;
- (void)_commandPayloadFromRapportRepresentationWithValidation:(id)arg1 result:(id /* block */)arg2;
- (id)_eventIDForClass:(Class)arg1;
- (void)_handleDisconnect;
- (void)_handleOnDemanNodeCreationRequest;
- (void)_handleRPErrorFlagsUpdate;
- (void)_handleRPIsUsingOnDemandConnection;
- (void)_handleRPStateUpdate;
- (void)_registerHandlersOnClient;
- (id)_serializedDataForCommand:(id)arg1;
- (void)_setUpRegistrationCompletionHandlers;
- (void)_updateRequestTimesFromRapportRepresentation:(id)arg1 start:(unsigned long long)arg2 end:(unsigned long long)arg3;
- (bool)_validateSource:(id)arg1 options:(id)arg2;
- (void)activateWithCompletion:(id /* block */)arg1;
- (id)activity;
- (double)averageRequestTime;
- (id)client;
- (id /* block */)clientIsUsingOnDemandConnection;
- (id)commands;
- (id)counters;
- (double)currentPingTimeout;
- (id)delegate;
- (void)deregisterCommandForClass:(Class)arg1;
- (void)deregisterRequestForClass:(Class)arg1;
- (id)description;
- (id)error;
- (id)executionContext;
- (void)handleEventIdentifier:(id)arg1 rapportRepresentation:(id)arg2 options:(id)arg3;
- (void)handleRequestFromUnknownNodeWithIdentifier:(id)arg1 rapportRepresentation:(id)arg2 options:(id)arg3 responseHandler:(id /* block */)arg4 at:(unsigned long long)arg5;
- (void)handleRequestIdentifier:(id)arg1 rapportRepresentation:(id)arg2 options:(id)arg3 responseHandler:(id /* block */)arg4 at:(unsigned long long)arg5;
- (void)handleResponseToRequest:(id)arg1 rapportRepresentation:(id)arg2 options:(id)arg3 error:(id)arg4 responseHandler:(id /* block */)arg5 at:(unsigned long long)arg6;
- (unsigned long long)hash;
- (id)initWithDiscoveryRecord:(id)arg1 executionContext:(id)arg2;
- (void)invalidateWithError:(id)arg1;
- (bool)isEqual:(id)arg1;
- (int)listeningPort;
- (double)maximumPingInterval;
- (double)minimumPingInterval;
- (void)pingWithCallback:(id /* block */)arg1;
- (id)record;
- (void)registerCommandForClass:(Class)arg1 withCompletion:(id /* block */)arg2;
- (void)registerRequestForClass:(Class)arg1 withCompletion:(id /* block */)arg2;
- (id)registrationCompletions;
- (id)remote;
- (void)removeAsSink:(id)arg1;
- (unsigned long long)requestCount;
- (void)sendCommand:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)sendRequest:(id)arg1 withResponseHandler:(id /* block */)arg2;
- (void)setAsSink:(id)arg1;
- (void)setAverageRequestTime:(double)arg1;
- (void)setClient:(id)arg1;
- (void)setClientIsUsingOnDemandConnection:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setMaximumPingInterval:(double)arg1;
- (void)setMinimumPingInterval:(double)arg1;
- (void)setRecord:(id)arg1;
- (void)setRemote:(id)arg1;
- (void)setRequestCount:(unsigned long long)arg1;
- (id)shortDescription;
- (id)sinks;
- (bool)supportsLeaderElection;

@end
