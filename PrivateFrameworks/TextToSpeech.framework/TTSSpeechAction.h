
@interface TTSSpeechAction : NSObject {
    NSAttributedString * _attributedString;
    id /* block */  _audioBufferCallback;
    bool  _cannotInterrupt;
    id /* block */  _completionCallback;
    unsigned long long  _currentSSMLSnippetIndex;
    NSMutableArray * _emojiRangeReplacements;
    NSString * _finalSpokenString;
    bool  _ignoreCustomSubstitutions;
    NSString * _language;
    id /* block */  _markerCallback;
    id /* block */  _onMarkerCallback;
    id /* block */  _onPauseCallback;
    id /* block */  _onResumeCallback;
    id /* block */  _onSpeechStartCallback;
    id /* block */  _onWillSpeakRangeCallback;
    double  _pitch;
    NSString * _processedString;
    bool  _shouldDetectLanguage;
    bool  _shouldPrecomposeString;
    bool  _shouldProcessEmoji;
    bool  _shouldProcessEmoticons;
    bool  _shouldQueue;
    double  _speakingRate;
    NSString * _ssmlRepresentation;
    long long  _state;
    NSString * _string;
    bool  _synthesizeSilently;
    _TtC12TextToSpeech10TaggedSSML * _taggedSSML;
    NSString * _voiceIdentifier;
    double  _volume;
    long long  _wordCallbackPostProcessedOffset;
}

@property (nonatomic, copy) NSAttributedString *attributedString;
@property (nonatomic, copy) id /* block */ audioBufferCallback;
@property (nonatomic) bool cannotInterrupt;
@property (nonatomic, copy) id /* block */ completionCallback;
@property (nonatomic) unsigned long long currentSSMLSnippetIndex;
@property (nonatomic, retain) NSMutableArray *emojiRangeReplacements;
@property (nonatomic, retain) NSString *finalSpokenString;
@property (nonatomic) bool ignoreCustomSubstitutions;
@property (nonatomic, retain) NSString *language;
@property (nonatomic, copy) id /* block */ markerCallback;
@property (nonatomic, copy) id /* block */ onMarkerCallback;
@property (nonatomic, copy) id /* block */ onPauseCallback;
@property (nonatomic, copy) id /* block */ onResumeCallback;
@property (nonatomic, copy) id /* block */ onSpeechStartCallback;
@property (nonatomic, copy) id /* block */ onWillSpeakRangeCallback;
@property (nonatomic) double pitch;
@property (nonatomic, retain) NSString *processedString;
@property (nonatomic) bool shouldDetectLanguage;
@property (nonatomic) bool shouldPrecomposeString;
@property (nonatomic) bool shouldProcessEmoji;
@property (nonatomic) bool shouldProcessEmoticons;
@property (nonatomic) bool shouldQueue;
@property (nonatomic) double speakingRate;
@property (nonatomic, copy) NSString *ssmlRepresentation;
@property (nonatomic) long long state;
@property (nonatomic, copy) NSString *string;
@property (nonatomic) bool synthesizeSilently;
@property (nonatomic, retain) _TtC12TextToSpeech10TaggedSSML *taggedSSML;
@property (nonatomic, retain) NSString *voiceIdentifier;
@property (nonatomic) double volume;
@property (nonatomic) long long wordCallbackPostProcessedOffset;

+ (id)actionWithAttributedString:(id)arg1 shouldQueue:(bool)arg2;
+ (id)actionWithSSMLRepresentation:(id)arg1 shouldQueue:(bool)arg2;
+ (id)actionWithString:(id)arg1 shouldQueue:(bool)arg2;
+ (void)test_setUseMaxSpeechRate:(bool)arg1;

- (void).cxx_destruct;
- (id)_detectLanguageFromContent;
- (id)attributedString;
- (id /* block */)audioBufferCallback;
- (bool)cannotInterrupt;
- (id /* block */)completionCallback;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)currentSSMLSnippetIndex;
- (void)dealloc;
- (id)description;
- (id)emojiRangeReplacements;
- (id)finalSpokenString;
- (bool)ignoreCustomSubstitutions;
- (id)init;
- (id)language;
- (id /* block */)markerCallback;
- (id /* block */)onMarkerCallback;
- (id /* block */)onPauseCallback;
- (id /* block */)onResumeCallback;
- (id /* block */)onSpeechStartCallback;
- (id /* block */)onWillSpeakRangeCallback;
- (double)pitch;
- (void)preprocessAction;
- (id)processedString;
- (void)setAttributedString:(id)arg1;
- (void)setAudioBufferCallback:(id /* block */)arg1;
- (void)setCannotInterrupt:(bool)arg1;
- (void)setCompletionCallback:(id /* block */)arg1;
- (void)setCurrentSSMLSnippetIndex:(unsigned long long)arg1;
- (void)setEmojiRangeReplacements:(id)arg1;
- (void)setFinalSpokenString:(id)arg1;
- (void)setIgnoreCustomSubstitutions:(bool)arg1;
- (void)setLanguage:(id)arg1;
- (void)setMarkerCallback:(id /* block */)arg1;
- (void)setOnMarkerCallback:(id /* block */)arg1;
- (void)setOnPauseCallback:(id /* block */)arg1;
- (void)setOnResumeCallback:(id /* block */)arg1;
- (void)setOnSpeechStartCallback:(id /* block */)arg1;
- (void)setOnWillSpeakRangeCallback:(id /* block */)arg1;
- (void)setPitch:(double)arg1;
- (void)setProcessedString:(id)arg1;
- (void)setShouldDetectLanguage:(bool)arg1;
- (void)setShouldPrecomposeString:(bool)arg1;
- (void)setShouldProcessEmoji:(bool)arg1;
- (void)setShouldProcessEmoticons:(bool)arg1;
- (void)setShouldQueue:(bool)arg1;
- (void)setSpeakingRate:(double)arg1;
- (void)setSsmlRepresentation:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setString:(id)arg1;
- (void)setSynthesizeSilently:(bool)arg1;
- (void)setTaggedSSML:(id)arg1;
- (void)setUtterance:(id)arg1;
- (void)setVoiceIdentifier:(id)arg1;
- (void)setVolume:(double)arg1;
- (void)setWordCallbackPostProcessedOffset:(long long)arg1;
- (bool)shouldDetectLanguage;
- (bool)shouldPrecomposeString;
- (bool)shouldProcessEmoji;
- (bool)shouldProcessEmoticons;
- (bool)shouldQueue;
- (double)speakingRate;
- (id)ssmlRepresentation;
- (long long)state;
- (id)string;
- (bool)synthesizeSilently;
- (id)taggedSSML;
- (id)utterance;
- (id)voiceIdentifier;
- (double)volume;
- (long long)wordCallbackPostProcessedOffset;

@end
