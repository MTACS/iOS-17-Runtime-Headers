
@interface QLDiskCache : NSObject {
    QLCacheMMAPBlobDatabase * _blobDatabase;
    NSLock * _databaseLock;
    <QLDiskCacheDelegate> * _delegate;
    NSString * _dirtyFilePath;
    bool  _dirtyForDelegate;
    int  _exclusiveFD;
    NSString * _exclusivePath;
    bool  _hasDirtyLock;
    QLCacheIndexDatabase * _indexDatabase;
    NSMutableDictionary * _metaData;
    bool  _metaDataDirty;
    NSString * _metaDataFilePath;
    bool  _opened;
    NSString * _path;
    NSString * _resetFilePath;
    NSString * _resetReasonPath;
    long long  _writingCount;
}

@property <QLDiskCacheDelegate> *delegate;
@property (readonly) unsigned long long fileEntryCount;
@property (readonly) float fragmentation;
@property (nonatomic, readonly) bool hasDirtyLock;
@property (readonly) bool isOpened;
@property (readonly) unsigned long long maxSize;
@property (readonly) unsigned long long maxThumbnailLifeTime;
@property (retain) NSMutableDictionary *metaData;
@property bool metaDataDirty;
@property (retain) NSString *metaDataFilePath;
@property (readonly) NSString *path;
@property (readonly) unsigned long long reserveBufferCount;
@property (readonly) unsigned long long reserveBufferSize;
@property (readonly) unsigned long long size;
@property (readonly) unsigned long long thumbnailCount;
@property (readonly) long long writingCount;

+ (id)defaultLocation;
+ (void)setCacheLocationForTesting:(id)arg1;
+ (void)setupCacheAtLocationIfNecessary:(id)arg1;

- (void).cxx_destruct;
- (id)_checkConsistency;
- (void)_cleanupDirtyLock;
- (void)_cleanupForceResetAtNextLaunch;
- (void)_close;
- (void)_closeWhatIsOpen;
- (void)_createDirtyLockInformDelegate:(bool)arg1;
- (unsigned long long)_deleteBlobArrayFromDatabase:(id)arg1;
- (void)_discardThumbnailDataForReset:(id)arg1;
- (bool)_open;
- (void)_removeDirtyLock;
- (void)_resetWithReason:(id)arg1;
- (bool)_setThumbnailData:(id)arg1;
- (id)blobDatabase;
- (id)checkConsistency;
- (void)checkpoint;
- (unsigned long long)cleanup;
- (unsigned long long)cleanupDeletedFiles;
- (void)close;
- (id)delegate;
- (bool)discardReservedBuffer:(id)arg1;
- (void)discardThumbnailDataBatchForReset:(id)arg1;
- (void)do:(id /* block */)arg1;
- (bool)doReading:(id /* block */)arg1;
- (bool)doWriting:(id /* block */)arg1;
- (id)enumeratorForAllFilesUbiquitousFiles:(bool)arg1 withExtraInfo:(bool)arg2;
- (id)enumeratorForAllThumbnailsWithFileIdentifier:(id)arg1;
- (id)enumeratorForThumbnailRequests:(id)arg1;
- (unsigned long long)fileEntryCount;
- (void)forceResetAtNextLaunch;
- (float)fragmentation;
- (unsigned long long)freeDiskSpaceForNewThumbnails;
- (bool)hasDirtyLock;
- (id)indexDatabase;
- (id)initWithPathLocation:(id)arg1 cacheSize:(long long)arg2 cacheThread:(id)arg3;
- (bool)isOpened;
- (bool)itemIsMissingRemoteThumbnail:(id)arg1;
- (id)itemsAfterFilteringOutItemsWithMissingThumbnails:(id)arg1;
- (id)lastCrapWithDate:(id*)arg1;
- (id)lastResetWithDate:(id*)arg1;
- (void)logCacheSizeBeforeCleanup;
- (unsigned long long)maxSize;
- (unsigned long long)maxThumbnailLifeTime;
- (id)metaData;
- (bool)metaDataDirty;
- (id)metaDataFilePath;
- (id)metaDataForKey:(id)arg1;
- (void)noteRemoteThumbnailMissingForItems:(id)arg1;
- (void)noteRemoteThumbnailPresentForItems:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)open;
- (id)path;
- (bool)removeCachedThumbnailsFromUninstalledFileProvidersWithIdentifiers:(id)arg1;
- (bool)removeCachedThumbnailsFromUninstalledFileProvidersWithRemainingFileProviderIdentifiers:(id)arg1;
- (void)removeFilesWithFileInfo:(id)arg1;
- (unsigned long long)removeThumbnailsOlderThanDate:(id)arg1;
- (unsigned long long)reserveBufferCount;
- (id)reserveBufferForData:(id)arg1;
- (unsigned long long)reserveBufferSize;
- (id)reserveBufferWithLength:(unsigned long long)arg1;
- (void)reset;
- (void)setDelegate:(id)arg1;
- (bool)setLastHitDateOfAllCachedThumbnailsToDate:(id)arg1;
- (void)setMetaData:(id)arg1;
- (void)setMetaData:(id)arg1 forKey:(id)arg2;
- (void)setMetaDataDirty:(bool)arg1;
- (void)setMetaDataFilePath:(id)arg1;
- (unsigned long long)size;
- (unsigned long long)sizeSumOfThumbnailsOlderThanDate:(id)arg1;
- (unsigned long long)thumbnailCount;
- (void)updateHitCount:(id)arg1 forFileIdentifier:(id)arg2;
- (bool)validateReservedBuffer:(id)arg1;
- (void)writeThumbnailDataBatch:(id)arg1;
- (long long)writingCount;

@end
