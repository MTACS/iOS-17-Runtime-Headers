
@interface APContentData : NSObject <NSSecureCoding> {
    NSArray * _adServerEnvironment;
    NSString * _brandName;
    NSString * _campaignText;
    NSUUID * _contextIdentifier;
    NSString * _disclosureRendererPayload;
    NSURL * _disclosureURL;
    NSError * _error;
    NSDate * _expirationDate;
    NSString * _humanReadableName;
    NSString * _identifier;
    double  _impressionThreshold;
    double  _impressionVisibilityThreshold;
    APInstallAttribution * _installAttribution;
    bool  _isLocationAvailableForAd;
    bool  _isPAAvailableForAd;
    NSString * _journeyIdentifier;
    NSDictionary * _metadata;
    unsigned long long  _minimumTimeBetweenPresentation;
    NSDate * _receivedReferenceTime;
    NSMutableSet * _representations;
    double  _serverResponseReceivedTimestamp;
    long long  _serverUnfilledReason;
    NSString * _targetingExpressionId;
    NSString * _uniqueIdentifier;
}

@property (nonatomic, retain) NSArray *adServerEnvironment;
@property (retain) NSString *brandName;
@property (retain) NSString *campaignText;
@property (retain) NSUUID *contextIdentifier;
@property (retain) NSString *disclosureRendererPayload;
@property (retain) NSURL *disclosureURL;
@property (retain) NSError *error;
@property (retain) NSDate *expirationDate;
@property (retain) NSString *humanReadableName;
@property (retain) NSString *identifier;
@property double impressionThreshold;
@property double impressionVisibilityThreshold;
@property (retain) APInstallAttribution *installAttribution;
@property (nonatomic) bool isLocationAvailableForAd;
@property (nonatomic) bool isPAAvailableForAd;
@property (retain) NSString *journeyIdentifier;
@property (retain) NSDictionary *metadata;
@property unsigned long long minimumTimeBetweenPresentation;
@property (readonly) long long pricingModel;
@property (nonatomic, retain) NSDate *receivedReferenceTime;
@property (retain) NSSet *representations;
@property (nonatomic) double serverResponseReceivedTimestamp;
@property long long serverUnfilledReason;
@property (retain) NSString *targetingExpressionId;
@property (retain) NSString *uniqueIdentifier;

+ (id)createForServerUnfilledReason:(long long)arg1 placementType:(long long)arg2 contextIdentifier:(id)arg3;
+ (id)createForServerUnfilledReason:(long long)arg1 placementType:(long long)arg2 contextIdentifier:(id)arg3 size:(struct { double x1; double x2; })arg4;
+ (id)mockDataFromContext:(id)arg1 types:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_correctNonNullableFields;
- (id)adServerEnvironment;
- (void)addRepresentation:(id)arg1;
- (void)addRepresentations:(id)arg1;
- (id)brandName;
- (id)campaignText;
- (id)contextIdentifier;
- (id)disclosureRendererPayload;
- (id)disclosureURL;
- (void)encodeWithCoder:(id)arg1;
- (id)error;
- (id)expirationDate;
- (id)getRepresentation;
- (bool)hasValidRepresentation;
- (id)humanReadableName;
- (id)identifier;
- (double)impressionThreshold;
- (double)impressionVisibilityThreshold;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)installAttribution;
- (bool)isLocationAvailableForAd;
- (bool)isPAAvailableForAd;
- (id)journeyIdentifier;
- (id)metadata;
- (unsigned long long)minimumTimeBetweenPresentation;
- (long long)pricingModel;
- (id)receivedReferenceTime;
- (void)removeRepresentation:(id)arg1;
- (id)representationWithIdentifier:(id)arg1;
- (id)representations;
- (double)serverResponseReceivedTimestamp;
- (long long)serverUnfilledReason;
- (void)setAdServerEnvironment:(id)arg1;
- (void)setBrandName:(id)arg1;
- (void)setCampaignText:(id)arg1;
- (void)setContextIdentifier:(id)arg1;
- (void)setDisclosureRendererPayload:(id)arg1;
- (void)setDisclosureURL:(id)arg1;
- (void)setError:(id)arg1;
- (void)setExpirationDate:(id)arg1;
- (void)setHumanReadableName:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImpressionThreshold:(double)arg1;
- (void)setImpressionVisibilityThreshold:(double)arg1;
- (void)setInstallAttribution:(id)arg1;
- (void)setIsLocationAvailableForAd:(bool)arg1;
- (void)setIsPAAvailableForAd:(bool)arg1;
- (void)setJourneyIdentifier:(id)arg1;
- (void)setMetadata:(id)arg1;
- (void)setMinimumTimeBetweenPresentation:(unsigned long long)arg1;
- (void)setReceivedReferenceTime:(id)arg1;
- (void)setRepresentations:(id)arg1;
- (void)setServerResponseReceivedTimestamp:(double)arg1;
- (void)setServerUnfilledReason:(long long)arg1;
- (void)setTargetingExpressionId:(id)arg1;
- (void)setUniqueIdentifier:(id)arg1;
- (id)targetingExpressionId;
- (id)uniqueIdentifier;

@end
