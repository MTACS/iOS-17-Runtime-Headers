
@interface NPTMetricResult : NSObject <NSCopying, NSSecureCoding> {
    NSNumber * _appleClientASN;
    NSString * _appleClientASNCompany;
    NSString * _cdnpop;
    NSString * _cdnuuid;
    NSNumber * _concurrentStreams;
    double  _connectionTime;
    double  _domainLookupTime;
    NSError * _error;
    NSString * _fetchDate;
    unsigned long long  _fileSize;
    NSString * _interfaceName;
    NSString * _interfaceServiceName;
    NSString * _isCellular;
    NSString * _isConstrained;
    NSString * _isExpensive;
    NSString * _isMultipath;
    NSString * _isProxyConnection;
    NSString * _isReusedConnection;
    NSNumber * _latency;
    NSString * _localAddress;
    NSNumber * _localPort;
    double  _maxSpeedObserved;
    NSNumber * _negotiatedTLSCipherSuite;
    NSNumber * _negotiatedTLSProtocolVersion;
    NSString * _nqTestEndPoint;
    NSString * _protocolName;
    NSString * _remoteAddress;
    NSNumber * _remotePort;
    double  _requestTime;
    double  _requestToResponseTime;
    double  _responseTime;
    NSNumber * _responsiveness;
    NSNumber * _responsivenessConfidence;
    NSNumber * _responsivenessRating;
    double  _secureConnectionTime;
    NSString * _server;
    double  _speed;
    NSNumber * _speedConfidence;
    NSNumber * _speedRating;
    double  _stableSpeed;
}

@property (nonatomic, retain) NSNumber *appleClientASN;
@property (nonatomic, retain) NSString *appleClientASNCompany;
@property (nonatomic, readonly) NSDictionary *asDictionary;
@property (nonatomic, retain) NSString *cdnpop;
@property (nonatomic, retain) NSString *cdnuuid;
@property (nonatomic, retain) NSNumber *concurrentStreams;
@property (nonatomic) double connectionTime;
@property (nonatomic) double domainLookupTime;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, retain) NSString *fetchDate;
@property (nonatomic) unsigned long long fileSize;
@property (nonatomic, retain) NSString *interfaceName;
@property (nonatomic, retain) NSString *interfaceServiceName;
@property (nonatomic, retain) NSString *isCellular;
@property (nonatomic, retain) NSString *isConstrained;
@property (nonatomic, retain) NSString *isExpensive;
@property (nonatomic, retain) NSString *isMultipath;
@property (nonatomic, retain) NSString *isProxyConnection;
@property (nonatomic, retain) NSString *isReusedConnection;
@property (nonatomic, retain) NSNumber *latency;
@property (nonatomic, retain) NSString *localAddress;
@property (nonatomic, retain) NSNumber *localPort;
@property (nonatomic) double maxSpeedObserved;
@property (nonatomic, retain) NSNumber *negotiatedTLSCipherSuite;
@property (nonatomic, retain) NSNumber *negotiatedTLSProtocolVersion;
@property (nonatomic, retain) NSString *nqTestEndPoint;
@property (nonatomic, retain) NSString *protocolName;
@property (nonatomic, retain) NSString *remoteAddress;
@property (nonatomic, retain) NSNumber *remotePort;
@property (nonatomic) double requestTime;
@property (nonatomic) double requestToResponseTime;
@property (nonatomic) double responseTime;
@property (nonatomic, retain) NSNumber *responsiveness;
@property (nonatomic, retain) NSNumber *responsivenessConfidence;
@property (nonatomic, retain) NSNumber *responsivenessRating;
@property (nonatomic) double secureConnectionTime;
@property (nonatomic, retain) NSString *server;
@property (nonatomic) double speed;
@property (nonatomic, retain) NSNumber *speedConfidence;
@property (nonatomic, retain) NSNumber *speedRating;
@property (nonatomic) double stableSpeed;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)appleClientASN;
- (id)appleClientASNCompany;
- (id)asDictionary;
- (id)cdnpop;
- (id)cdnuuid;
- (id)concurrentStreams;
- (double)connectionTime;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)domainLookupTime;
- (void)encodeWithCoder:(id)arg1;
- (id)error;
- (id)fetchDate;
- (unsigned long long)fileSize;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)interfaceName;
- (id)interfaceServiceName;
- (id)isCellular;
- (id)isConstrained;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToMetricResult:(id)arg1;
- (id)isExpensive;
- (id)isMultipath;
- (id)isProxyConnection;
- (id)isReusedConnection;
- (id)latency;
- (id)localAddress;
- (id)localPort;
- (double)maxSpeedObserved;
- (id)negotiatedTLSCipherSuite;
- (id)negotiatedTLSProtocolVersion;
- (id)nqTestEndPoint;
- (void)populateWithMetrics:(id)arg1;
- (void)populateWithURLResponse:(id)arg1;
- (id)protocolName;
- (id)remoteAddress;
- (id)remotePort;
- (double)requestTime;
- (double)requestToResponseTime;
- (double)responseTime;
- (id)responsiveness;
- (id)responsivenessConfidence;
- (id)responsivenessRating;
- (double)secureConnectionTime;
- (id)server;
- (void)setAppleClientASN:(id)arg1;
- (void)setAppleClientASNCompany:(id)arg1;
- (void)setCdnpop:(id)arg1;
- (void)setCdnuuid:(id)arg1;
- (void)setConcurrentStreams:(id)arg1;
- (void)setConnectionTime:(double)arg1;
- (void)setDomainLookupTime:(double)arg1;
- (void)setError:(id)arg1;
- (void)setFetchDate:(id)arg1;
- (void)setFileSize:(unsigned long long)arg1;
- (void)setInterfaceName:(id)arg1;
- (void)setInterfaceServiceName:(id)arg1;
- (void)setIsCellular:(id)arg1;
- (void)setIsConstrained:(id)arg1;
- (void)setIsExpensive:(id)arg1;
- (void)setIsMultipath:(id)arg1;
- (void)setIsProxyConnection:(id)arg1;
- (void)setIsReusedConnection:(id)arg1;
- (void)setLatency:(id)arg1;
- (void)setLocalAddress:(id)arg1;
- (void)setLocalPort:(id)arg1;
- (void)setMaxSpeedObserved:(double)arg1;
- (void)setNegotiatedTLSCipherSuite:(id)arg1;
- (void)setNegotiatedTLSProtocolVersion:(id)arg1;
- (void)setNqTestEndPoint:(id)arg1;
- (void)setProtocolName:(id)arg1;
- (void)setRemoteAddress:(id)arg1;
- (void)setRemotePort:(id)arg1;
- (void)setRequestTime:(double)arg1;
- (void)setRequestToResponseTime:(double)arg1;
- (void)setResponseTime:(double)arg1;
- (void)setResponsiveness:(id)arg1;
- (void)setResponsivenessConfidence:(id)arg1;
- (void)setResponsivenessRating:(id)arg1;
- (void)setSecureConnectionTime:(double)arg1;
- (void)setServer:(id)arg1;
- (void)setSpeed:(double)arg1;
- (void)setSpeedConfidence:(id)arg1;
- (void)setSpeedRating:(id)arg1;
- (void)setStableSpeed:(double)arg1;
- (double)speed;
- (id)speedConfidence;
- (id)speedRating;
- (double)stableSpeed;
- (double)timeIntervalSinceDateWithLogging:(id)arg1 startDate:(id)arg2 nameToLog:(id)arg3;

@end
