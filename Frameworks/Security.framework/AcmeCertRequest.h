
@interface AcmeCertRequest : NSObject {
    NSString * _account;
    NSString * _acmeNewAccountURL;
    NSString * _acmeNewNonceURL;
    NSString * _acmeNewOrderURL;
    NSData * _attestation;
    NSArray * _attestationChain;
    NSArray * _attestationOids;
    NSString * _authorizationURL;
    NSArray * _authorizations;
    struct __SecCertificate { } * _certificate;
    NSString * _certificateURL;
    NSString * _challengeURL;
    NSObject<OS_xpc_object> * _connection;
    NSData * _csr;
    SecJWSEncoder * _encoder;
    NSString * _finalizeOrderURL;
    struct __SecIdentity { } * _identity;
    NSDictionary * _keyParams;
    NSString * _location;
    bool  _logAcmeCSR;
    NSString * _nextMessageURL;
    NSString * _nonce;
    NSString * _orderURL;
    NSDictionary * _parameters;
    bool  _permitLocalIssuer;
    struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; } * _privateKey;
    struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; } * _publicKey;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _requireAttestation;
    long long  _state;
    NSArray * _subject;
    NSString * _timestamp;
    NSString * _token;
    NSObject<OS_dispatch_queue> * _xpc_queue;
}

@property (retain) NSString *account;
@property (retain) NSString *acmeNewAccountURL;
@property (retain) NSString *acmeNewNonceURL;
@property (retain) NSString *acmeNewOrderURL;
@property (retain) NSData *attestation;
@property (retain) NSArray *attestationChain;
@property (retain) NSArray *attestationOids;
@property (retain) NSString *authorizationURL;
@property (retain) NSArray *authorizations;
@property struct __SecCertificate { }*certificate;
@property (retain) NSString *certificateURL;
@property (retain) NSString *challengeURL;
@property (retain) NSObject<OS_xpc_object> *connection;
@property (retain) NSData *csr;
@property (retain) SecJWSEncoder *encoder;
@property (retain) NSString *finalizeOrderURL;
@property struct __SecIdentity { }*identity;
@property (retain) NSDictionary *keyParams;
@property (retain) NSString *location;
@property bool logAcmeCSR;
@property (retain) NSString *nextMessageURL;
@property (retain) NSString *nonce;
@property (retain) NSString *orderURL;
@property (retain) NSDictionary *parameters;
@property bool permitLocalIssuer;
@property struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*privateKey;
@property struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*publicKey;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property bool requireAttestation;
@property long long state;
@property (retain) NSArray *subject;
@property (retain) NSString *timestamp;
@property (retain) NSString *token;
@property (retain) NSObject<OS_dispatch_queue> *xpc_queue;

- (void).cxx_destruct;
- (id)account;
- (id)acmeNewAccountURL;
- (id)acmeNewNonceURL;
- (id)acmeNewOrderURL;
- (id)acmeRequest;
- (id)attestation;
- (id)attestationChain;
- (id)attestationChainPEMRepresentation;
- (id)attestationObjectWithCertificates:(id)arg1;
- (id)attestationOids;
- (id)authorizationURL;
- (id)authorizations;
- (struct __SecCertificate { }*)certificate;
- (id)certificateURL;
- (id)challengeURL;
- (id)connection;
- (id)createAttestation;
- (id)createCSR;
- (id)createCertificate;
- (id)createKeyPair;
- (id)csr;
- (void)dealloc;
- (bool)deviceAttestationSupported;
- (id)encoder;
- (int)errorStatusWithHTTPErrorCode:(int)arg1;
- (id)executeRequest;
- (id)finalizeOrderURL;
- (struct __SecIdentity { }*)identity;
- (struct __SecIdentity { }*)identityWithError:(id*)arg1;
- (id)initWithSubject:(id)arg1 parameters:(id)arg2;
- (id)keyParams;
- (id)location;
- (bool)logAcmeCSR;
- (id)nextMessageURL;
- (id)nonce;
- (id)orderURL;
- (id)parameters;
- (bool)permitLocalIssuer;
- (id)pollForStatus:(id)arg1 until:(id)arg2;
- (struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)privateKey;
- (id)processReply:(id)arg1;
- (struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)publicKey;
- (id)queue;
- (id)requestAttestationChainWithError:(id*)arg1;
- (bool)requireAttestation;
- (id)sanitizeParameters;
- (id)sanitizeSubject;
- (id)sendRequestToXPCService:(id)arg1 response:(id*)arg2;
- (id)serialNumber;
- (void)setAccount:(id)arg1;
- (void)setAcmeNewAccountURL:(id)arg1;
- (void)setAcmeNewNonceURL:(id)arg1;
- (void)setAcmeNewOrderURL:(id)arg1;
- (void)setAttestation:(id)arg1;
- (void)setAttestationChain:(id)arg1;
- (void)setAttestationOids:(id)arg1;
- (void)setAuthorizationURL:(id)arg1;
- (void)setAuthorizations:(id)arg1;
- (void)setCertificate:(struct __SecCertificate { }*)arg1;
- (void)setCertificateURL:(id)arg1;
- (void)setChallengeURL:(id)arg1;
- (void)setConnection:(id)arg1;
- (void)setCsr:(id)arg1;
- (void)setEncoder:(id)arg1;
- (void)setFinalizeOrderURL:(id)arg1;
- (void)setIdentity:(struct __SecIdentity { }*)arg1;
- (void)setKeyParams:(id)arg1;
- (void)setLocation:(id)arg1;
- (void)setLogAcmeCSR:(bool)arg1;
- (void)setNextMessageURL:(id)arg1;
- (void)setNonce:(id)arg1;
- (void)setOrderURL:(id)arg1;
- (void)setParameters:(id)arg1;
- (void)setPermitLocalIssuer:(bool)arg1;
- (void)setPrivateKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg1;
- (void)setPublicKey:(struct __SecKey { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __SecKeyDescriptor {} *x2; void *x3; }*)arg1;
- (void)setQueue:(id)arg1;
- (void)setRequireAttestation:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setSubject:(id)arg1;
- (void)setTimestamp:(id)arg1;
- (void)setToken:(id)arg1;
- (void)setXpc_queue:(id)arg1;
- (long long)state;
- (id)subject;
- (id)timestamp;
- (id)token;
- (bool)valueForBooleanDefault:(id)arg1;
- (id)xpc_queue;

@end
