
@interface AVPictureInPicturePlatformAdapter : NSObject <AVPictureInPictureControlsStyleAppearance, AVPictureInPictureViewControllerDelegate, PGPictureInPictureProxyDelegate> {
    NSString * _activitySessionIdentifier;
    bool  _allowsPictureInPicturePlayback;
    bool  _alwaysStartsAutomaticallyWhenEnteringBackground;
    bool  _anyPictureInPictureActive;
    long long  _backgroundPlaybackPolicy;
    bool  _canPausePlaybackWhenClosingPictureInPicture;
    bool  _canStartAutomaticallyWhenEnteringBackground;
    <AVPictureInPictureContentSource> * _contentSourceAwaitingInvalidation;
    <AVPictureInPictureContentSource> * _contentSourceAwaitingSetup;
    long long  _controlsStyle;
    <AVPictureInPicturePlatformAdapterDelegate> * _delegate;
    bool  _interruptedForAudioSession;
    NSTimer * _layoutCheckTimer;
    bool  _managesWiredSecondScreenPlayback;
    bool  _microphoneEnabled;
    AVObservationController * _observationController;
    long long  _observedTimeControlStatus;
    PGPictureInPictureProxy * _pegasusProxy;
    AVPictureInPictureViewController * _pictureInPictureViewController;
    AVPlayerController * _playerController;
    AVPictureInPicturePrerollAttributes * _prerollAttributes;
    double  _rateWhenScrubbingOrSeekingBegan;
    bool  _requiresLinearPlayback;
    bool  _routingVideoToHostedWindow;
    bool  _scrubbing;
    bool  _scrubbingOrSeeking;
    AVSecondScreenConnection * _secondScreenConnection;
    bool  _seeking;
    <AVPictureInPictureContentSource> * _source;
    UIWindow * _sourceWindowWhenPictureInPictureStarted;
    long long  _status;
    AVPlayerControllerTimeResolver * _timeResolver;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _videoRectInScreen;
    bool  _wasPlayingWhenSuspended;
}

@property (nonatomic, copy) NSString *activitySessionIdentifier;
@property (nonatomic) bool allowsPictureInPicturePlayback;
@property (nonatomic) bool alwaysStartsAutomaticallyWhenEnteringBackground;
@property (getter=isAnyPictureInPictureActive, nonatomic, readonly) bool anyPictureInPictureActive;
@property (nonatomic) long long backgroundPlaybackPolicy;
@property (nonatomic, readonly) bool canAnimatePictureInPictureTransition;
@property (nonatomic) bool canPausePlaybackWhenClosingPictureInPicture;
@property (nonatomic) bool canStartAutomaticallyWhenEnteringBackground;
@property (nonatomic) <AVPictureInPictureContentSource> *contentSourceAwaitingInvalidation;
@property (nonatomic) <AVPictureInPictureContentSource> *contentSourceAwaitingSetup;
@property (getter=isContentSourceSupported, nonatomic, readonly) bool contentSourceSupported;
@property (nonatomic) long long controlsStyle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVPictureInPicturePlatformAdapterDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isInterruptedForAudioSession, nonatomic) bool interruptedForAudioSession;
@property (nonatomic, readonly) NSTimer *layoutCheckTimer;
@property (nonatomic) bool managesWiredSecondScreenPlayback;
@property (getter=isMicrophoneEnabled, nonatomic) bool microphoneEnabled;
@property (nonatomic, readonly) AVObservationController *observationController;
@property (nonatomic) long long observedTimeControlStatus;
@property (nonatomic, readonly) PGPictureInPictureProxy *pegasusProxy;
@property (nonatomic, readonly) AVPictureInPictureViewController *pictureInPictureViewController;
@property (nonatomic, retain) AVPlayerController *playerController;
@property (nonatomic, retain) AVPictureInPicturePrerollAttributes *prerollAttributes;
@property (nonatomic) double rateWhenScrubbingOrSeekingBegan;
@property (nonatomic) bool requiresLinearPlayback;
@property (getter=isRoutingVideoToHostedWindow, nonatomic) bool routingVideoToHostedWindow;
@property (getter=isScrubbing, nonatomic) bool scrubbing;
@property (getter=isScrubbingOrSeeking, nonatomic) bool scrubbingOrSeeking;
@property (nonatomic, retain) AVSecondScreenConnection *secondScreenConnection;
@property (getter=isSeeking, nonatomic) bool seeking;
@property (nonatomic) <AVPictureInPictureContentSource> *source;
@property (nonatomic) UIWindow *sourceWindowWhenPictureInPictureStarted;
@property (nonatomic) long long status;
@property (readonly) Class superclass;
@property (getter=isSystemPictureInPicturePossible, nonatomic, readonly) bool systemPictureInPicturePossible;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } videoRectInScreen;
@property (nonatomic) bool wasPlayingWhenSuspended;

+ (id)imageSymbolConfiguration;
+ (bool)isPictureInPictureSupported;
+ (id)startPictureInPictureButtonImageName;
+ (id)stopPictureInPictureButtonImageName;

- (void).cxx_destruct;
- (void)_createProxyIfNeeded;
- (bool)_isFullScreen;
- (long long)_proxyControlsStyle;
- (void)_removeSecondScreenConnection;
- (void)_setRoutingVideoToHostedWindow:(bool)arg1 pictureInPictureViewController:(id)arg2 source:(id)arg3;
- (void)_setStatusAndNotifyDelegateIfNeeded:(long long)arg1;
- (void)_setupPipAdapter;
- (void)_startObservation;
- (void)_startObservingForPlaybackStateUpdates;
- (void)_updatePictureInPictureShouldStartWhenEnteringBackground;
- (void)_updateProxyPlaybackState;
- (void)_updateStatus;
- (void)_updateStatusUsingProposedStatus:(long long)arg1;
- (id)activitySessionIdentifier;
- (bool)allowsPictureInPicturePlayback;
- (bool)alwaysStartsAutomaticallyWhenEnteringBackground;
- (long long)backgroundPlaybackPolicy;
- (bool)canAnimatePictureInPictureTransition;
- (bool)canPausePlaybackWhenClosingPictureInPicture;
- (bool)canStartAutomaticallyWhenEnteringBackground;
- (id)contentSourceAwaitingInvalidation;
- (id)contentSourceAwaitingSetup;
- (long long)controlsStyle;
- (void)dealloc;
- (id)delegate;
- (id)initWithSource:(id)arg1;
- (bool)isAnyPictureInPictureActive;
- (bool)isContentSourceSupported;
- (bool)isInterruptedForAudioSession;
- (bool)isMicrophoneEnabled;
- (bool)isRoutingVideoToHostedWindow;
- (bool)isScrubbing;
- (bool)isScrubbingOrSeeking;
- (bool)isSeeking;
- (bool)isSystemPictureInPicturePossible;
- (id)layoutCheckTimer;
- (bool)managesWiredSecondScreenPlayback;
- (id)observationController;
- (long long)observedTimeControlStatus;
- (id)pegasusProxy;
- (void)pictureInPictureProxy:(id)arg1 didReceivePlaybackCommand:(id)arg2;
- (void)pictureInPictureProxy:(id)arg1 didReceiveTestingCommand:(id)arg2;
- (void)pictureInPictureProxy:(id)arg1 didStartPictureInPictureWithAnimationType:(long long)arg2;
- (void)pictureInPictureProxy:(id)arg1 didStopPictureInPictureWithAnimationType:(long long)arg2 reason:(long long)arg3;
- (void)pictureInPictureProxy:(id)arg1 didUpdateResourcesUsageReductionReasons:(unsigned long long)arg2 oldReasons:(unsigned long long)arg3;
- (void)pictureInPictureProxy:(id)arg1 failedToStartPictureInPictureWithAnimationType:(long long)arg2 error:(id)arg3;
- (void)pictureInPictureProxy:(id)arg1 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(id /* block */)arg2;
- (void)pictureInPictureProxy:(id)arg1 willStartPictureInPictureWithAnimationType:(long long)arg2;
- (void)pictureInPictureProxy:(id)arg1 willStopPictureInPictureWithAnimationType:(long long)arg2 reason:(long long)arg3;
- (bool)pictureInPictureProxyCanIssueOptionalCommand:(id)arg1;
- (long long)pictureInPictureProxyInterfaceOrientationForTransitionAnimation:(id)arg1;
- (void)pictureInPictureProxyPictureInPictureInterruptionBegan:(id)arg1;
- (void)pictureInPictureProxyPictureInPictureInterruptionEnded:(id)arg1;
- (id)pictureInPictureProxyViewControllerWindowForTransitionAnimation:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pictureInPictureProxyViewFrameForTransitionAnimation:(id)arg1;
- (id)pictureInPictureViewController;
- (void)pictureInPictureViewControllerViewDidAppear:(id)arg1;
- (void)pictureInPictureViewControllerViewWillDisappear:(id)arg1;
- (id)playerController;
- (id)prerollAttributes;
- (double)rateWhenScrubbingOrSeekingBegan;
- (bool)requiresLinearPlayback;
- (id)secondScreenConnection;
- (void)setActivitySessionIdentifier:(id)arg1;
- (void)setAllowsPictureInPicturePlayback:(bool)arg1;
- (void)setAlwaysStartsAutomaticallyWhenEnteringBackground:(bool)arg1;
- (void)setBackgroundPlaybackPolicy:(long long)arg1;
- (void)setCanPausePlaybackWhenClosingPictureInPicture:(bool)arg1;
- (void)setCanStartAutomaticallyWhenEnteringBackground:(bool)arg1;
- (void)setContentSourceAwaitingInvalidation:(id)arg1;
- (void)setContentSourceAwaitingSetup:(id)arg1;
- (void)setControlsStyle:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInterruptedForAudioSession:(bool)arg1;
- (void)setManagesWiredSecondScreenPlayback:(bool)arg1;
- (void)setMicrophoneEnabled:(bool)arg1;
- (void)setObservedTimeControlStatus:(long long)arg1;
- (void)setPlayerController:(id)arg1;
- (void)setPrerollAttributes:(id)arg1;
- (void)setRateWhenScrubbingOrSeekingBegan:(double)arg1;
- (void)setRequiresLinearPlayback:(bool)arg1;
- (void)setRoutingVideoToHostedWindow:(bool)arg1;
- (void)setScrubbing:(bool)arg1;
- (void)setScrubbingOrSeeking:(bool)arg1;
- (void)setSecondScreenConnection:(id)arg1;
- (void)setSeeking:(bool)arg1;
- (void)setSource:(id)arg1;
- (void)setSourceWindowWhenPictureInPictureStarted:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setVideoRectInScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWasPlayingWhenSuspended:(bool)arg1;
- (id)source;
- (id)sourceWindowWhenPictureInPictureStarted;
- (void)startPictureInPicture;
- (long long)status;
- (void)stopPictureInPictureAndRestoreUserInterface:(bool)arg1;
- (void)updateLayoutDependentBehaviors;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })videoRectInScreen;
- (bool)wasPlayingWhenSuspended;

@end
