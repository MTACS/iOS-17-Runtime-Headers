
@interface CMMotionManager : NSObject {
    id  _internal;
}

@property (getter=isAccelerometerActive, nonatomic, readonly) bool accelerometerActive;
@property (getter=isAccelerometerAvailable, nonatomic, readonly) bool accelerometerAvailable;
@property (readonly) CMAccelerometerData *accelerometerData;
@property (nonatomic) double accelerometerUpdateInterval;
@property (readonly) CMAmbientPressureData *ambientPressureData;
@property (nonatomic, readonly) unsigned long long attitudeReferenceFrame;
@property (readonly) CMAmbientPressureData *compensatedAmbientPressureData;
@property (readonly) CMDeviceMotion *deviceMotion;
@property (getter=isDeviceMotionActive, nonatomic, readonly) bool deviceMotionActive;
@property (getter=isDeviceMotionAvailable, nonatomic, readonly) bool deviceMotionAvailable;
@property (nonatomic) double deviceMotionUpdateInterval;
@property (getter=isGyroActive, nonatomic, readonly) bool gyroActive;
@property (getter=isGyroAvailable, nonatomic, readonly) bool gyroAvailable;
@property (readonly) CMGyroData *gyroData;
@property (nonatomic) double gyroUpdateInterval;
@property (getter=isDeviceMotionLiteAvailable, nonatomic, readonly) bool isDeviceMotionLiteAvailable;
@property (getter=isMagnetometerActive, nonatomic, readonly) bool magnetometerActive;
@property (getter=isMagnetometerAvailable, nonatomic, readonly) bool magnetometerAvailable;
@property (readonly) CMMagnetometerData *magnetometerData;
@property (nonatomic) double magnetometerUpdateInterval;
@property (getter=isPredictedDeviceMotionAvailable, nonatomic, readonly) bool predictedDeviceMotionAvailable;
@property (nonatomic) bool showsDeviceMovementDisplay;
@property (getter=isSidebandSensorFusionAvailable, nonatomic, readonly) bool sidebandSensorFusionAvailable;

// Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion

+ (unsigned long long)availableAttitudeReferenceFrames;
+ (bool)configureM7Activity:(bool)arg1 stepCounting:(bool)arg2 activityForceCodeTransition:(bool)arg3 stepCountingForceCodeTransition:(bool)arg4 threshold:(bool)arg5 onBodyDetection:(bool)arg6 ispMode:(unsigned char)arg7 predictionInterval:(float)arg8 logLevel:(BOOL)arg9 proactiveRevisitTime:(unsigned short)arg10;
+ (bool)deviceMotionInitialized:(struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_2_1_4; int x_2_1_5; bool x_2_1_6; bool x_2_1_7; bool x_2_1_8; float x_2_1_9; bool x_2_1_10; bool x_2_1_11; int x_2_1_12; } x2; struct { float x_3_1_1; } x3; bool x4; unsigned int x5; unsigned char x6; struct Status { unsigned short x_7_1_1; } x7; float x8; }*)arg1;
+ (void)dummySelector:(id)arg1;
+ (void)dumpDb:(long long)arg1 toURL:(id)arg2 onCompletion:(id /* block */)arg3;
+ (struct { int x1; double x2; double x3; float x4; float x5; union { struct { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_6_1_1; struct { bool x_2_2_1; BOOL x_2_2_2[282]; } x_6_1_2; } x6; })gyroCalibrationDatabaseGetBiasFit;
+ (struct { int x1; double x2; double x3; float x4; float x5; union { struct { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_6_1_1; struct { bool x_2_2_1; BOOL x_2_2_2[282]; } x_6_1_2; } x6; })gyroCalibrationDatabaseGetBiasFitAndEstimate:(struct { double x1; double x2; double x3; }*)arg1 atTemperature:(float)arg2;
+ (bool)hasRunMiniCal;
+ (void)initialize;
+ (bool)northAlignedReferenceFrame:(unsigned long long)arg1;
+ (void)setAllowInBackground:(bool)arg1;
+ (void)setVirtualAlmondDevice:(id)arg1;
+ (bool)startGyroMiniCalibration;
+ (bool)supportsGyroMiniCalibration;
+ (id)virtualAlmondDevice;

- (void)_startDeviceMotionErrorUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)_stopDeviceMotionErrorUpdates;
- (double)accelerometerUpdateInterval;
- (id)ambientPressureData;
- (double)ambientPressureUpdateInterval;
- (void)applyInitialReference:(struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_2_1_4; int x_2_1_5; bool x_2_1_6; bool x_2_1_7; bool x_2_1_8; float x_2_1_9; bool x_2_1_10; bool x_2_1_11; int x_2_1_12; } x2; struct { float x_3_1_1; } x3; bool x4; unsigned int x5; unsigned char x6; struct Status { unsigned short x_7_1_1; } x7; float x8; }*)arg1;
- (void)applyNorthReference:(struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_2_1_4; int x_2_1_5; bool x_2_1_6; bool x_2_1_7; bool x_2_1_8; float x_2_1_9; bool x_2_1_10; bool x_2_1_11; int x_2_1_12; } x2; struct { float x_3_1_1; } x3; bool x4; unsigned int x5; unsigned char x6; struct Status { unsigned short x_7_1_1; } x7; float x8; }*)arg1;
- (unsigned long long)attitudeReferenceFrame;
- (id)compensatedAmbientPressureData;
- (double)compensatedAmbientPressureUpdateInterval;
- (id)computeNonlinearPRTTFromDB:(id)arg1 where:(id)arg2;
- (void)connect;
- (void)dealloc;
- (void)deallocPrivate;
- (double)deviceMotionUpdateInterval;
- (void)didBecomeActive:(id)arg1;
- (void)didBecomeActivePrivate:(id)arg1;
- (void)dismissDeviceMovementDisplay;
- (double)gyroUpdateInterval;
- (int)gyttNumTemperatures;
- (id)init;
- (id)initPrivate;
- (id)initUsing6AxisSensorFusion;
- (id)initUsingGyroOnlySensorFusion;
- (bool)isAccelerometerActive;
- (bool)isAccelerometerAvailable;
- (bool)isAmbientPressureActive;
- (bool)isAmbientPressureAvailable;
- (bool)isCompensatedAmbientPressureActive;
- (bool)isDeviceMotionActive;
- (bool)isDeviceMotionAvailable;
- (bool)isDeviceMotionLiteAvailable;
- (bool)isGyroActive;
- (bool)isGyroAvailable;
- (bool)isMagnetometerActive;
- (bool)isMagnetometerAvailable;
- (bool)isPredictedDeviceMotionAvailable;
- (bool)isSidebandSensorFusionAvailable;
- (double)magnetometerUpdateInterval;
- (void)onAccelerometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; }*)arg1;
- (void)onAmbientPressure:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; } x2; }*)arg1;
- (void)onCompensatedAmbientPressure:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; } x2; }*)arg1;
- (void)onDeviceMotion:(const struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_2_1_4; int x_2_1_5; bool x_2_1_6; bool x_2_1_7; bool x_2_1_8; float x_2_1_9; bool x_2_1_10; bool x_2_1_11; int x_2_1_12; } x2; struct { float x_3_1_1; } x3; bool x4; unsigned int x5; unsigned char x6; struct Status { unsigned short x_7_1_1; } x7; float x8; }*)arg1;
- (void)onDeviceMotionForKeyboardMotion:(const struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_2_1_4; int x_2_1_5; bool x_2_1_6; bool x_2_1_7; bool x_2_1_8; float x_2_1_9; bool x_2_1_10; bool x_2_1_11; int x_2_1_12; } x2; struct { float x_3_1_1; } x3; bool x4; unsigned int x5; unsigned char x6; struct Status { unsigned short x_7_1_1; } x7; float x8; }*)arg1;
- (void)onFactoryGyro:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; unsigned short x3; bool x4; }*)arg1;
- (void)onFactoryGyroTemperature:(const struct Temperature { double x1; float x2; }*)arg1;
- (void)onGyro:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; unsigned short x3; bool x4; }*)arg1;
- (void)onMagnetometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; float x3; }*)arg1;
- (id)original_accelerometerData;
- (id)original_deviceMotion;
- (id)original_gyroData;
- (id)original_magnetometerData;
- (void)original_setAccelerometerUpdateInterval:(double)arg1;
- (void)original_setGyroUpdateInterval:(double)arg1;
- (void)original_setMagnetometerUpdateInterval:(double)arg1;
- (void)original_startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)original_startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)original_startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)original_startGyroUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)original_startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)original_stopAccelerometerUpdates;
- (void)original_stopGyroUpdates;
- (void)original_stopMagnetometerUpdates;
- (id)predictedDeviceMotionAtTimestamp:(double)arg1 error:(out id*)arg2;
- (bool)readRawAmbientPressureSamplesFromDB:(id)arg1 toQueue:(id)arg2 where:(id)arg3 withHandler:(id /* block */)arg4;
- (void)rebuildGytt;
- (bool)sendDeviceMotionError:(int)arg1;
- (bool)sendDeviceMotionHostGravityToKeyboard:(const struct { unsigned char x1[3]; unsigned char x2; unsigned char x3; }*)arg1;
- (void)setAccelerometerDataCallback:(int (*)arg1 info:(void*)arg2 interval:(double)arg3;
- (void)setAccelerometerUpdateIntervalPrivate:(double)arg1;
- (void)setAmbientPressureUpdateInterval:(double)arg1;
- (void)setAmbientPressureUpdateIntervalPrivate:(double)arg1;
- (void)setCompensatedAmbientPressureUpdateInterval:(double)arg1;
- (void)setCompensatedAmbientPressureUpdateIntervalPrivate:(double)arg1;
- (void)setDeviceMotionCallback:(int (*)arg1 info:(void*)arg2 interval:(double)arg3 fsync:(bool)arg4;
- (void)setDeviceMotionUpdateInterval:(double)arg1;
- (void)setDeviceMotionUpdateIntervalPrivate:(double)arg1;
- (void)setGyroDataCallback:(int (*)arg1 info:(void*)arg2 interval:(double)arg3;
- (void)setGyroUpdateIntervalPrivate:(double)arg1;
- (void)setMagnetometerDataCallback:(int (*)arg1 info:(void*)arg2 interval:(double)arg3;
- (void)setMagnetometerUpdateIntervalPrivate:(double)arg1;
- (bool)setMotionThreadPriority:(int)arg1;
- (void)setNotificationCallback:(int (*)arg1 info:(void*)arg2;
- (void)setPowerConservationMode:(int)arg1;
- (void)setShowsDeviceMovementDisplay:(bool)arg1;
- (void)setShowsDeviceMovementDisplayPrivate:(bool)arg1;
- (bool)setSidebandSensorFusionEnable:(bool)arg1;
- (bool)setSidebandSensorFusionEnable:(bool)arg1 measureLatency:(bool)arg2 withSnoopHandler:(id /* block */)arg3;
- (bool)setSidebandSensorFusionEnable:(bool)arg1 withSnoopHandler:(id /* block */)arg2;
- (void)setSidebandTimeSyncHandler:(id /* block */)arg1;
- (void)setUseAccelerometer:(bool)arg1;
- (void)showDeviceMovementDisplay;
- (bool)showsDeviceMovementDisplay;
- (void)startAccelerometerUpdates;
- (void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startAmbientPressureUpdates;
- (void)startAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startCompensatedAmbientPressureUpdates;
- (void)startCompensatedAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startCompensatedAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startDeviceMotionLiteFusedUpdatesForDeviceID:(id)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startDeviceMotionLiteUpdatesForDeviceID:(id)arg1 usingConfiguration:(struct { int x1; })arg2 toQueue:(id)arg3 withFusedHandler:(id /* block */)arg4;
- (void)startDeviceMotionUpdates;
- (void)startDeviceMotionUpdatesForKeyboardMotionPrivateToQueue:(id)arg1 withGravityDeltaThreshold:(double)arg2 notificationFrequency:(double)arg3 andHandler:(id /* block */)arg4;
- (void)startDeviceMotionUpdatesForKeyboardMotionToQueue:(id)arg1 withGravityDeltaThreshold:(double)arg2 sendFrequency:(double)arg3 andHandler:(id /* block */)arg4;
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1;
- (void)startFactoryGyroUpdatesPrivateToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(id /* block */)arg3;
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(id /* block */)arg3;
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startGyroUpdates;
- (void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startMagnetometerUpdates;
- (void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)stopAccelerometerUpdatesPrivate;
- (void)stopAmbientPressureUpdates;
- (void)stopAmbientPressureUpdatesPrivate;
- (void)stopCompensatedAmbientPressureUpdates;
- (void)stopCompensatedAmbientPressureUpdatesPrivate;
- (void)stopDeviceMotionLiteUpdatesForDeviceID:(id)arg1;
- (void)stopDeviceMotionUpdates;
- (void)stopDeviceMotionUpdatesForKeyboardMotion;
- (void)stopDeviceMotionUpdatesForKeyboardMotionPrivate;
- (void)stopDeviceMotionUpdatesPrivate;
- (void)stopFactoryGyroUpdates;
- (void)stopFactoryGyroUpdatesPrivate;
- (void)stopGyroUpdatesPrivate;
- (void)stopMagnetometerUpdatesPrivate;
- (bool)useAccelerometer;
- (void)willResignActive:(id)arg1;
- (void)willResignActivePrivate:(id)arg1;

// Image: /Library/MobileSubstrate/DynamicLibraries/motion_support.dylib

+ (void)load;
+ (id)targetClasses;

- (id)accelerometerData;
- (id)deviceMotion;
- (id)gyroData;
- (id)magnetometerData;
- (void)setAccelerometerUpdateInterval:(double)arg1;
- (void)setGyroUpdateInterval:(double)arg1;
- (void)setMagnetometerUpdateInterval:(double)arg1;
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(id /* block */)arg3;
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(id /* block */)arg2;
- (void)stopAccelerometerUpdates;
- (void)stopGyroUpdates;
- (void)stopMagnetometerUpdates;

@end
