
@interface _INPBPlayMediaIntent : PBCodable <NSCopying, NSSecureCoding, _INPBPlayMediaIntent> {
    NSArray * _alternativeResults;
    NSArray * _audioSearchResults;
    _INPBString * _audiobookAuthor;
    _INPBString * _audiobookTitle;
    NSArray * _buckets;
    _INPBTimestamp * _expirationDate;
    struct { 
        unsigned int parsecCategory : 1; 
        unsigned int playShuffled : 1; 
        unsigned int playbackQueueLocation : 1; 
        unsigned int playbackRepeatMode : 1; 
        unsigned int playbackSpeed : 1; 
        unsigned int resumePlayback : 1; 
    }  _has;
    NSArray * _hashedRouteUIDs;
    _INPBIntentMetadata * _intentMetadata;
    _INPBMediaItemValue * _mediaContainer;
    NSArray * _mediaItems;
    _INPBMediaSearch * _mediaSearch;
    _INPBString * _mediaUserContext;
    _INPBString * _musicArtistName;
    int  _parsecCategory;
    bool  _playShuffled;
    int  _playbackQueueLocation;
    int  _playbackRepeatMode;
    double  _playbackSpeed;
    _INPBString * _playlistTitle;
    _INPBPrivatePlayMediaIntentData * _privatePlayMediaIntentData;
    NSString * _proxiedBundleIdentifier;
    NSString * _recoID;
    bool  _resumePlayback;
    _INPBString * _showTitle;
}

@property (nonatomic, copy) NSArray *alternativeResults;
@property (nonatomic, readonly) unsigned long long alternativeResultsCount;
@property (nonatomic, copy) NSArray *audioSearchResults;
@property (nonatomic, readonly) unsigned long long audioSearchResultsCount;
@property (nonatomic, retain) _INPBString *audiobookAuthor;
@property (nonatomic, retain) _INPBString *audiobookTitle;
@property (nonatomic, copy) NSArray *buckets;
@property (nonatomic, readonly) unsigned long long bucketsCount;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) _INPBTimestamp *expirationDate;
@property (nonatomic, readonly) bool hasAudiobookAuthor;
@property (nonatomic, readonly) bool hasAudiobookTitle;
@property (nonatomic, readonly) bool hasExpirationDate;
@property (nonatomic, readonly) bool hasIntentMetadata;
@property (nonatomic, readonly) bool hasMediaContainer;
@property (nonatomic, readonly) bool hasMediaSearch;
@property (nonatomic, readonly) bool hasMediaUserContext;
@property (nonatomic, readonly) bool hasMusicArtistName;
@property (nonatomic) bool hasParsecCategory;
@property (nonatomic) bool hasPlayShuffled;
@property (nonatomic) bool hasPlaybackQueueLocation;
@property (nonatomic) bool hasPlaybackRepeatMode;
@property (nonatomic) bool hasPlaybackSpeed;
@property (nonatomic, readonly) bool hasPlaylistTitle;
@property (nonatomic, readonly) bool hasPrivatePlayMediaIntentData;
@property (nonatomic, readonly) bool hasProxiedBundleIdentifier;
@property (nonatomic, readonly) bool hasRecoID;
@property (nonatomic) bool hasResumePlayback;
@property (nonatomic, readonly) bool hasShowTitle;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSArray *hashedRouteUIDs;
@property (nonatomic, readonly) unsigned long long hashedRouteUIDsCount;
@property (nonatomic, retain) _INPBIntentMetadata *intentMetadata;
@property (nonatomic, retain) _INPBMediaItemValue *mediaContainer;
@property (nonatomic, copy) NSArray *mediaItems;
@property (nonatomic, readonly) unsigned long long mediaItemsCount;
@property (nonatomic, retain) _INPBMediaSearch *mediaSearch;
@property (nonatomic, retain) _INPBString *mediaUserContext;
@property (nonatomic, retain) _INPBString *musicArtistName;
@property (nonatomic) int parsecCategory;
@property (nonatomic) bool playShuffled;
@property (nonatomic) int playbackQueueLocation;
@property (nonatomic) int playbackRepeatMode;
@property (nonatomic) double playbackSpeed;
@property (nonatomic, retain) _INPBString *playlistTitle;
@property (nonatomic, retain) _INPBPrivatePlayMediaIntentData *privatePlayMediaIntentData;
@property (nonatomic, copy) NSString *proxiedBundleIdentifier;
@property (nonatomic, copy) NSString *recoID;
@property (nonatomic) bool resumePlayback;
@property (nonatomic, retain) _INPBString *showTitle;
@property (readonly) Class superclass;

+ (Class)alternativeResultsType;
+ (Class)audioSearchResultsType;
+ (Class)bucketType;
+ (Class)hashedRouteUIDsType;
+ (Class)mediaItemsType;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (int)StringAsParsecCategory:(id)arg1;
- (int)StringAsPlaybackQueueLocation:(id)arg1;
- (int)StringAsPlaybackRepeatMode:(id)arg1;
- (void)addAlternativeResults:(id)arg1;
- (void)addAudioSearchResults:(id)arg1;
- (void)addBucket:(id)arg1;
- (void)addHashedRouteUIDs:(id)arg1;
- (void)addMediaItems:(id)arg1;
- (id)alternativeResults;
- (id)alternativeResultsAtIndex:(unsigned long long)arg1;
- (unsigned long long)alternativeResultsCount;
- (id)audioSearchResults;
- (id)audioSearchResultsAtIndex:(unsigned long long)arg1;
- (unsigned long long)audioSearchResultsCount;
- (id)audiobookAuthor;
- (id)audiobookTitle;
- (id)bucketAtIndex:(unsigned long long)arg1;
- (id)buckets;
- (unsigned long long)bucketsCount;
- (void)clearAlternativeResults;
- (void)clearAudioSearchResults;
- (void)clearBuckets;
- (void)clearHashedRouteUIDs;
- (void)clearMediaItems;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dictionaryRepresentation;
- (void)encodeWithCoder:(id)arg1;
- (id)expirationDate;
- (bool)hasAudiobookAuthor;
- (bool)hasAudiobookTitle;
- (bool)hasExpirationDate;
- (bool)hasIntentMetadata;
- (bool)hasMediaContainer;
- (bool)hasMediaSearch;
- (bool)hasMediaUserContext;
- (bool)hasMusicArtistName;
- (bool)hasParsecCategory;
- (bool)hasPlayShuffled;
- (bool)hasPlaybackQueueLocation;
- (bool)hasPlaybackRepeatMode;
- (bool)hasPlaybackSpeed;
- (bool)hasPlaylistTitle;
- (bool)hasPrivatePlayMediaIntentData;
- (bool)hasProxiedBundleIdentifier;
- (bool)hasRecoID;
- (bool)hasResumePlayback;
- (bool)hasShowTitle;
- (unsigned long long)hash;
- (id)hashedRouteUIDs;
- (id)hashedRouteUIDsAtIndex:(unsigned long long)arg1;
- (unsigned long long)hashedRouteUIDsCount;
- (id)initWithCoder:(id)arg1;
- (id)intentMetadata;
- (bool)isEqual:(id)arg1;
- (id)mediaContainer;
- (id)mediaItems;
- (id)mediaItemsAtIndex:(unsigned long long)arg1;
- (unsigned long long)mediaItemsCount;
- (id)mediaSearch;
- (id)mediaUserContext;
- (id)musicArtistName;
- (int)parsecCategory;
- (id)parsecCategoryAsString:(int)arg1;
- (bool)playShuffled;
- (int)playbackQueueLocation;
- (id)playbackQueueLocationAsString:(int)arg1;
- (int)playbackRepeatMode;
- (id)playbackRepeatModeAsString:(int)arg1;
- (double)playbackSpeed;
- (id)playlistTitle;
- (id)privatePlayMediaIntentData;
- (id)proxiedBundleIdentifier;
- (bool)readFrom:(id)arg1;
- (id)recoID;
- (bool)resumePlayback;
- (void)setAlternativeResults:(id)arg1;
- (void)setAudioSearchResults:(id)arg1;
- (void)setAudiobookAuthor:(id)arg1;
- (void)setAudiobookTitle:(id)arg1;
- (void)setBuckets:(id)arg1;
- (void)setExpirationDate:(id)arg1;
- (void)setHasParsecCategory:(bool)arg1;
- (void)setHasPlayShuffled:(bool)arg1;
- (void)setHasPlaybackQueueLocation:(bool)arg1;
- (void)setHasPlaybackRepeatMode:(bool)arg1;
- (void)setHasPlaybackSpeed:(bool)arg1;
- (void)setHasResumePlayback:(bool)arg1;
- (void)setHashedRouteUIDs:(id)arg1;
- (void)setIntentMetadata:(id)arg1;
- (void)setMediaContainer:(id)arg1;
- (void)setMediaItems:(id)arg1;
- (void)setMediaSearch:(id)arg1;
- (void)setMediaUserContext:(id)arg1;
- (void)setMusicArtistName:(id)arg1;
- (void)setParsecCategory:(int)arg1;
- (void)setPlayShuffled:(bool)arg1;
- (void)setPlaybackQueueLocation:(int)arg1;
- (void)setPlaybackRepeatMode:(int)arg1;
- (void)setPlaybackSpeed:(double)arg1;
- (void)setPlaylistTitle:(id)arg1;
- (void)setPrivatePlayMediaIntentData:(id)arg1;
- (void)setProxiedBundleIdentifier:(id)arg1;
- (void)setRecoID:(id)arg1;
- (void)setResumePlayback:(bool)arg1;
- (void)setShowTitle:(id)arg1;
- (id)showTitle;
- (void)writeTo:(id)arg1;

@end
