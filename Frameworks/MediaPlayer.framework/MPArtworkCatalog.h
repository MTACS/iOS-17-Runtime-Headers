
@interface MPArtworkCatalog : NSObject {
    NSUUID * _UUID;
    bool  _allowsVideoConstrainedNetworkAccess;
    MPArtworkRepresentationCollection * _bestAvailableRepresentationCollection;
    NSString * _cacheIdentifier;
    id /* block */  _configurationBlock;
    <MPArtworkDataSource> * _dataSource;
    id  _destination;
    double  _destinationScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _fittingSize;
    <NSCopying> * _loadingKey;
    bool  _loadingRepresentation;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    bool  _mainThreadBound;
    long long  _modelRevisionID;
    <_MPArtworkCatalogOverlayDelegate> * _overlayDelegate;
    id  _overlayStorage;
    id  _overlayToken;
    long long  _preferredVideoFormat;
    unsigned long long  _renderHint;
    unsigned long long  _representationKinds;
    id  _requestingContext;
    id  _token;
    unsigned long long  _videoCacheStoragePolicy;
}

@property (nonatomic, readonly) long long MP_artworkType;
@property (nonatomic, readonly) NSUUID *UUID;
@property (nonatomic) bool allowsVideoConstrainedNetworkAccess;
@property (nonatomic, retain) MPArtworkRepresentationCollection *bestAvailableRepresentationCollection;
@property (nonatomic, readonly) NSCache *cache;
@property (nonatomic, copy) NSString *cacheIdentifier;
@property (nonatomic, copy) id /* block */ configurationBlock;
@property (nonatomic, readonly) <MPArtworkDataSource> *dataSource;
@property (nonatomic, readonly) id destination;
@property (nonatomic) double destinationScale;
@property (nonatomic) struct CGSize { double x1; double x2; } fittingSize;
@property (nonatomic, readonly) bool hasExportableArtworkProperties;
@property (nonatomic, readonly) bool hasImageOnDisk;
@property (nonatomic, readonly) MPArtworkImageAttachments *imageAttachments;
@property (nonatomic, copy) <NSCopying> *loadingKey;
@property (getter=isLoadingRepresentation) bool loadingRepresentation;
@property (getter=isMainThreadBound, nonatomic, readonly) bool mainThreadBound;
@property (nonatomic) <_MPArtworkCatalogOverlayDelegate> *overlayDelegate;
@property (nonatomic, retain) id overlayStorage;
@property (nonatomic, retain) id overlayToken;
@property (nonatomic) long long preferredVideoFormat;
@property (nonatomic) unsigned long long renderHint;
@property (nonatomic) unsigned long long representationKinds;
@property (nonatomic) id requestingContext;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } scaledFittingSize;
@property (nonatomic, readonly) id token;
@property (nonatomic, readonly) NSCache *videoCache;
@property (nonatomic) unsigned long long videoCacheStoragePolicy;
@property (nonatomic, readonly) <MPArtworkDataSourceVisualIdenticality> *visualIdenticalityIdentifier;

+ (id)_artworkCacheForIdentifier:(id)arg1 requestingContext:(id)arg2 representationKind:(long long)arg3;
+ (id)_artworkLoadQueue;
+ (id)_registeredIdentifiableDataSourceAndTokenClasses;
+ (void)_setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)_setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (void)_setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)_setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (id)artworkCacheForIdentifier:(id)arg1 requestingContext:(id)arg2 representationKind:(long long)arg3;
+ (id)artworkCatalogWithDataSourceShortDescription:(id)arg1 dataSourceIdentifier:(id)arg2 tokenParameters:(id)arg3;
+ (id)placeholderCatalogWithSymbolName:(id)arg1;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3 representationKind:(long long)arg4;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (void)setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3;
+ (void)setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3 representationKind:(long long)arg4;
+ (void)setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)setCachePurgesWhenEnteringBackground:(bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (id)staticArtworkCatalogWithImage:(id)arg1;
+ (id)staticArtworkCatalogWithRepresentationCollection:(id)arg1;

- (void).cxx_destruct;
- (long long)MP_artworkType;
- (id)UUID;
- (void)_callConfigurationWithRevisionID:(long long)arg1;
- (void)_clearDestination;
- (id)_existingRepresentationOfKind:(long long)arg1;
- (void)_loadBestRepresentationIfNeededOfKind:(long long)arg1;
- (void)_loadRepresentationOfKind:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_requestBestRepresentationOfKind:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;
- (void)_setDestination:(id)arg1 isMainThreadBound:(bool)arg2;
- (void)_setDestination:(id)arg1 isMainThreadBound:(bool)arg2 forRepresentationKinds:(unsigned long long)arg3 configurationBlock:(id /* block */)arg4;
- (void)_updateRepresentationOfKind:(long long)arg1;
- (void)_updateRepresentations;
- (void)_updateWithRepresentation:(id)arg1 isBestRepresentation:(bool)arg2 modelRevisionID:(long long)arg3;
- (bool)allowsVideoConstrainedNetworkAccess;
- (id)bestAvailableRepresentationCollection;
- (id)bestImageFromDisk;
- (id)cache;
- (id)cacheIdentifier;
- (id /* block */)configurationBlock;
- (id)dataSource;
- (void)dealloc;
- (id)description;
- (id)destination;
- (double)destinationScale;
- (id)existingColorAnalysisWithAlgorithm:(long long)arg1;
- (struct CGSize { double x1; double x2; })fittingSize;
- (bool)hasExportableArtworkProperties;
- (bool)hasImageOnDisk;
- (unsigned long long)hash;
- (id)imageAttachments;
- (id)initWithToken:(id)arg1 dataSource:(id)arg2;
- (bool)isArtworkVisuallyIdenticalToCatalog:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isLoadingRepresentation;
- (bool)isMainThreadBound;
- (id)loadingKey;
- (id)overlayDelegate;
- (id)overlayStorage;
- (id)overlayToken;
- (long long)preferredVideoFormat;
- (unsigned long long)renderHint;
- (unsigned long long)representationKinds;
- (void)requestColorAnalysisWithAlgorithm:(long long)arg1 completion:(id /* block */)arg2;
- (void)requestColorAnalysisWithAlgorithm:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)requestExportableArtworkPropertiesWithCompletion:(id /* block */)arg1;
- (void)requestImageWithCompletion:(id /* block */)arg1;
- (void)requestImageWithCompletionHandler:(id /* block */)arg1;
- (void)requestRadiosityImageWithCompletionHandler:(id /* block */)arg1;
- (void)requestVideoWithCompletionHandler:(id /* block */)arg1;
- (id)requestingContext;
- (struct CGSize { double x1; double x2; })scaledFittingSize;
- (void)setAllowsVideoConstrainedNetworkAccess:(bool)arg1;
- (void)setBestAvailableRepresentationCollection:(id)arg1;
- (void)setCacheIdentifier:(id)arg1;
- (void)setCacheIdentifier:(id)arg1 forCacheReference:(id)arg2;
- (void)setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;
- (void)setConfigurationBlock:(id /* block */)arg1;
- (void)setDestination:(id)arg1 configurationBlock:(id /* block */)arg2;
- (void)setDestination:(id)arg1 forRepresentationKinds:(unsigned long long)arg2 configurationBlock:(id /* block */)arg3;
- (void)setDestination:(id)arg1 progressiveConfigurationBlock:(id /* block */)arg2;
- (void)setDestinationScale:(double)arg1;
- (void)setFittingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLoadingKey:(id)arg1;
- (void)setLoadingRepresentation:(bool)arg1;
- (void)setMainThreadBoundDestination:(id)arg1 forRepresentationKinds:(unsigned long long)arg2 configurationBlock:(id /* block */)arg3;
- (void)setOverlayDelegate:(id)arg1;
- (void)setOverlayStorage:(id)arg1;
- (void)setOverlayToken:(id)arg1;
- (void)setPreferredVideoFormat:(long long)arg1;
- (void)setPreferredVideoKind:(long long)arg1;
- (void)setRenderHint:(unsigned long long)arg1;
- (void)setRepresentationKinds:(unsigned long long)arg1;
- (void)setRequestingContext:(id)arg1;
- (void)setVideoCacheStoragePolicy:(unsigned long long)arg1;
- (id)token;
- (id)videoCache;
- (unsigned long long)videoCacheStoragePolicy;
- (id)visualIdenticalityIdentifier;

@end
