
@interface MPAVRoute : NSObject <NSSecureCoding> {
    bool  _appleAccessory;
    NSArray * _auxiliaryDevices;
    NSDictionary * _avRouteDescription;
    bool  _b520Route;
    MPAVBatteryLevel * _batteryLevel;
    bool  _canAccessRemoteAssets;
    bool  _canFetchMediaDataFromSender;
    bool  _canPlayEncryptedProgressiveDownloadAssets;
    bool  _carplayRoute;
    NSArray * _clusterComposition;
    NSArray * _clusterCompositionRoutes;
    bool  _clusterRoute;
    long long  _clusterType;
    MPAVRouteConnection * _connection;
    NSString * _designatedGroupLeaderRouteUID;
    long long  _displayRouteType;
    void * _externalDevice;
    NSString * _groupUID;
    bool  _homePodRoute;
    bool  _homeTheaterRoute;
    bool  _lowFidelityRoute;
    long long  _originalRouteSubtype;
    MPAVRoute * _parentRoute;
    bool  _pickable;
    long long  _pickableRouteType;
    bool  _picked;
    bool  _pickedOnPairedDevice;
    bool  _playingOnPairedDevice;
    NSString * _playingPairedDeviceName;
    bool  _presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets;
    NSString * _productIdentifier;
    bool  _requiresPassword;
    NSString * _routeName;
    long long  _routeSubtype;
    long long  _routeType;
    NSString * _routeUID;
    NSArray * _subRoutes;
    bool  _supportsPicking;
    MPAVRoute * _wirelessDisplayRoute;
}

@property (getter=isAirPlayRoute, nonatomic, readonly) bool airPlayRoute;
@property (getter=isAirPlayingToDevice, nonatomic, readonly) bool airPlayingToDevice;
@property (getter=isAirpodsRoute, nonatomic, readonly) bool airpodsRoute;
@property (getter=isAppleAccessory, nonatomic, readonly) bool appleAccessory;
@property (getter=isAppleTVRoute, nonatomic, readonly) bool appleTVRoute;
@property (nonatomic, readonly) NSArray *auxiliaryDevices;
@property (nonatomic, readonly) NSDictionary *avRouteDescription;
@property (getter=isB298Route, nonatomic, readonly) bool b298Route;
@property (getter=isB364Route, nonatomic, readonly) bool b364Route;
@property (getter=isB372Route, nonatomic, readonly) bool b372Route;
@property (getter=isB419Route, nonatomic, readonly) bool b419Route;
@property (getter=isB444Route, nonatomic, readonly) bool b444Route;
@property (getter=isB494Route, nonatomic, readonly) bool b494Route;
@property (getter=isB507Route, nonatomic, readonly) bool b507Route;
@property (getter=isB515Route, nonatomic, readonly) bool b515Route;
@property (getter=isB520Route, nonatomic, readonly) bool b520Route;
@property (getter=isB607Route, nonatomic, readonly) bool b607Route;
@property (getter=isB688Route, nonatomic, readonly) bool b688Route;
@property (getter=isB698CRoute, nonatomic, readonly) bool b698CRoute;
@property (getter=isB698Route, nonatomic, readonly) bool b698Route;
@property (nonatomic, readonly) MPAVBatteryLevel *batteryLevel;
@property (getter=isBeatsLegacyRoute, nonatomic, readonly) bool beatsLegacyRoute;
@property (getter=isBeatsRoute, nonatomic, readonly) bool beatsRoute;
@property (getter=isBeatsSoloRoute, nonatomic, readonly) bool beatsSoloRoute;
@property (getter=isBeatsStudioProRoute, nonatomic, readonly) bool beatsStudioProRoute;
@property (getter=isBeatsStudioRoute, nonatomic, readonly) bool beatsStudioRoute;
@property (getter=isBeatsXRoute, nonatomic, readonly) bool beatsXRoute;
@property (nonatomic, readonly) bool canAccessRemoteAssets;
@property (nonatomic, readonly) bool canFetchMediaDataFromSender;
@property (nonatomic, readonly) bool canPlayEncryptedProgressiveDownloadAssets;
@property (getter=isCarplayRoute, nonatomic, readonly) bool carplayRoute;
@property (nonatomic, readonly) NSArray *clusterComposition;
@property (nonatomic, readonly) NSArray *clusterCompositionRoutes;
@property (getter=isClusterRoute, nonatomic, readonly) bool clusterRoute;
@property (nonatomic, readonly) long long clusterType;
@property (nonatomic, readonly) MPAVRouteConnection *connection;
@property (nonatomic, readonly) NSString *designatedGroupLeaderName;
@property (nonatomic, readonly) NSString *designatedGroupLeaderRouteUID;
@property (getter=isDeviceSpeakerPhoneRoute, nonatomic, readonly) bool deviceSpeakerPhoneRoute;
@property (getter=isDeviceSpeakerRoute, nonatomic, readonly) bool deviceSpeakerRoute;
@property (getter=isDisplayedAsPicked, nonatomic, readonly) bool displayAsPicked;
@property (nonatomic) long long displayRouteType;
@property (getter=_externalDevice, nonatomic, readonly) void*externalDevice;
@property (nonatomic, readonly) NSString *groupLeaderAirplayIdentifier;
@property (nonatomic, readonly) NSString *groupUID;
@property (getter=isH1Route, nonatomic, readonly) bool h1Route;
@property (nonatomic, readonly) bool headTrackedSpatialAudioEnabled;
@property (getter=isHeadphonesRoute, nonatomic, readonly) bool headphonesRoute;
@property (getter=isHearingDeviceRoute, nonatomic, readonly) bool hearingDeviceRoute;
@property (getter=isHomePodRoute, nonatomic, readonly) bool homePodRoute;
@property (getter=isHomeTheaterB520Route, nonatomic, readonly) bool homeTheaterB520Route;
@property (getter=isHomeTheaterRoute, nonatomic, readonly) bool homeTheaterRoute;
@property (getter=isiOSRoute, nonatomic, readonly) bool iOSRoute;
@property (nonatomic, readonly) bool isDeviceRoute;
@property (nonatomic, readonly) bool isSplitRoute;
@property (nonatomic, readonly) bool isSubRoute;
@property (getter=isJ327Route, nonatomic, readonly) bool j327Route;
@property (getter=isKnown, nonatomic, readonly) bool known;
@property (getter=isLowFidelityRoute, nonatomic, readonly) bool lowFidelityRoute;
@property (getter=isLowLatencyRoute, nonatomic, readonly) bool lowLatencyRoute;
@property (getter=isMacRoute, nonatomic, readonly) bool macRoute;
@property (getter=isNearby, nonatomic, readonly) bool nearby;
@property (nonatomic, readonly) long long numberOfOutputDevices;
@property (nonatomic, readonly) long long originalRouteSubtype;
@property (nonatomic) MPAVRoute *parentRoute;
@property (nonatomic, readonly) long long passwordType;
@property (getter=isPhoneRoute, nonatomic, readonly) bool phoneRoute;
@property (getter=isPickable, nonatomic, readonly) bool pickable;
@property (nonatomic, readonly) long long pickableRouteType;
@property (getter=isPicked, nonatomic) bool picked;
@property (getter=isPickedOnPairedDevice, nonatomic, readonly) bool pickedOnPairedDevice;
@property (getter=isPlayingOnPairedDevice, nonatomic, readonly) bool playingOnPairedDevice;
@property (nonatomic, readonly) NSString *playingPairedDeviceName;
@property (getter=isPowerbeatsRoute, nonatomic, readonly) bool powerbeatsRoute;
@property (nonatomic, readonly) bool presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets;
@property (nonatomic, readonly) NSString *productIdentifier;
@property (getter=isProxyGroupPlayer, nonatomic, readonly) bool proxyGroupPlayer;
@property (nonatomic, readonly) bool requiresPassword;
@property (nonatomic, copy) NSString *routeName;
@property (nonatomic, readonly) NSArray *routeNames;
@property (nonatomic, readonly) long long routeSubtype;
@property (nonatomic, readonly) long long routeType;
@property (nonatomic, readonly) NSString *routeUID;
@property (getter=isRoutingToWirelessDevice, nonatomic, readonly) bool routingToWirelessDevice;
@property (getter=isSetTopBoxRoute, nonatomic, readonly) bool setTopBoxRoute;
@property (getter=isShareableRoute, nonatomic, readonly) bool shareableRoute;
@property (getter=isSmartAudio, nonatomic, readonly) bool smartAudio;
@property (getter=isSplitRoute, nonatomic, readonly) bool splitRoute;
@property (getter=isSplitterCapable, nonatomic, readonly) bool splitterCapable;
@property (getter=isStereoPair, nonatomic, readonly) bool stereoPair;
@property (nonatomic, readonly) NSArray *subRoutes;
@property (nonatomic, readonly) bool supportsAirPlayGrouping;
@property (nonatomic, readonly) bool supportsGrouping;
@property (nonatomic, readonly) bool supportsHeadTrackedSpatialAudio;
@property (nonatomic, readonly) bool supportsPicking;
@property (nonatomic, readonly) bool supportsRemoteControl;
@property (nonatomic, readonly) bool supportsWirelessDisplay;
@property (getter=isTVRoute, nonatomic, readonly) bool tvRoute;
@property (getter=isTVStickRoute, nonatomic, readonly) bool tvStickRoute;
@property (getter=isVolumeControlAvailable, nonatomic, readonly) bool volumeControlAvailable;
@property (getter=isW1Route, nonatomic, readonly) bool w1Route;
@property (getter=isW2Route, nonatomic, readonly) bool w2Route;
@property (getter=isW3Route, nonatomic, readonly) bool w3Route;
@property (nonatomic, retain) MPAVRoute *wirelessDisplayRoute;

// Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer

+ (id)clusterCompositionForOutputDevice:(id)arg1;
+ (long long)clusterTypeForMRClusterType:(unsigned int)arg1;
+ (long long)routeSubtypeForMRSubtype:(unsigned int)arg1 mrType:(unsigned int)arg2;
+ (long long)routeSubtypeForMRSubtype:(unsigned int)arg1 withOverridesFromMRType:(unsigned int)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void*)_externalDevice;
- (id)auxiliaryDevices;
- (id)avRouteDescription;
- (id)batteryLevel;
- (bool)canAccessRemoteAssets;
- (bool)canFetchMediaDataFromSender;
- (bool)canPlayEncryptedProgressiveDownloadAssets;
- (id)clusterComposition;
- (id)clusterCompositionRoutes;
- (long long)clusterType;
- (id)connection;
- (bool)containsDeviceWithSubtype:(long long)arg1;
- (id)debugDescription;
- (id)description;
- (id)designatedGroupLeaderName;
- (id)designatedGroupLeaderRouteUID;
- (long long)displayRouteType;
- (void)encodeWithCoder:(id)arg1;
- (id)groupLeaderAirplayIdentifier;
- (id)groupUID;
- (unsigned long long)hash;
- (bool)headTrackedSpatialAudioEnabled;
- (id)initWithCoder:(id)arg1;
- (bool)isAirPlayRoute;
- (bool)isAirPlayingToDevice;
- (bool)isAirpodsRoute;
- (bool)isAppleAccessory;
- (bool)isAppleTVRoute;
- (bool)isB298Route;
- (bool)isB364Route;
- (bool)isB372Route;
- (bool)isB419Route;
- (bool)isB444Route;
- (bool)isB494Route;
- (bool)isB507Route;
- (bool)isB515Route;
- (bool)isB520Route;
- (bool)isB607Route;
- (bool)isB688Route;
- (bool)isB698CRoute;
- (bool)isB698Route;
- (bool)isBeatsLegacyRoute;
- (bool)isBeatsRoute;
- (bool)isBeatsSoloRoute;
- (bool)isBeatsStudioProRoute;
- (bool)isBeatsStudioRoute;
- (bool)isBeatsXRoute;
- (bool)isCarplayRoute;
- (bool)isClusterRoute;
- (bool)isDeviceRoute;
- (bool)isDeviceSpeakerPhoneRoute;
- (bool)isDeviceSpeakerRoute;
- (bool)isDisplayedAsPicked;
- (bool)isEqual:(id)arg1;
- (bool)isH1Route;
- (bool)isHeadphonesRoute;
- (bool)isHearingDeviceRoute;
- (bool)isHomePodRoute;
- (bool)isHomeTheaterB520Route;
- (bool)isHomeTheaterRoute;
- (bool)isJ327Route;
- (bool)isKnown;
- (bool)isLowFidelityRoute;
- (bool)isLowLatencyRoute;
- (bool)isMacRoute;
- (bool)isNearby;
- (bool)isPhoneRoute;
- (bool)isPickable;
- (bool)isPicked;
- (bool)isPickedOnPairedDevice;
- (bool)isPlayingOnPairedDevice;
- (bool)isPowerbeatsRoute;
- (bool)isProxyGroupPlayer;
- (bool)isRoutingToWirelessDevice;
- (bool)isSetTopBoxRoute;
- (bool)isShareableRoute;
- (bool)isSmartAudio;
- (bool)isSplitRoute;
- (bool)isSplitterCapable;
- (bool)isStereoPair;
- (bool)isSubRoute;
- (bool)isTVRoute;
- (bool)isTVStickRoute;
- (bool)isVolumeControlAvailable;
- (bool)isW1Route;
- (bool)isW2Route;
- (bool)isW3Route;
- (bool)isiOSRoute;
- (long long)numberOfOutputDevices;
- (long long)originalRouteSubtype;
- (id)parentRoute;
- (long long)passwordType;
- (long long)pickableRouteType;
- (id)playingPairedDeviceName;
- (bool)presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets;
- (id)productIdentifier;
- (bool)requiresPassword;
- (id)routeName;
- (id)routeNames;
- (long long)routeSubtype;
- (long long)routeType;
- (id)routeUID;
- (void)setAVRouteDescription:(id)arg1;
- (void)setDisplayRouteType:(long long)arg1;
- (void)setParentRoute:(id)arg1;
- (void)setPicked:(bool)arg1;
- (void)setRouteName:(id)arg1;
- (void)setWirelessDisplayRoute:(id)arg1;
- (id)subRoutes;
- (bool)supportsAirPlayGrouping;
- (bool)supportsGrouping;
- (bool)supportsHeadTrackedSpatialAudio;
- (bool)supportsPicking;
- (bool)supportsRemoteControl;
- (bool)supportsWirelessDisplay;
- (id)wirelessDisplayRoute;

// Image: /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls

- (bool)isActiveGroupSession;
- (bool)isDiscoveredGroupSession;
- (bool)isGroupSession;
- (bool)isHostedGroupSession;
- (bool)isLocalDeviceOrHeadphone;
- (id)routingBatteryTextWithFormatter:(id)arg1;
- (id)routingPairedDeviceText;

@end
