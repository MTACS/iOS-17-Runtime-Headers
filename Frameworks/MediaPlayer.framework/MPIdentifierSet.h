
@interface MPIdentifierSet : NSObject <MPCPlaybackEngineEventPayloadValueJSONConvertible, MPMusicKitIdentifiers, MPMutableIdentifierSet, MPMutableLocalLibraryIdentifiers, MPMutableMusicKitIdentifiers, MPMutablePersonalStoreIdentifiers, MPMutableRadioIdentifiers, MPMutableUniversalStoreIdentifiers, NSCopying, NSSecureCoding> {
    long long  _adamID;
    long long  _assetAdamID;
    NSString * _cloudAlbumID;
    NSString * _cloudArtistID;
    unsigned long long  _cloudID;
    long long  _containedPersistentID;
    NSString * _containerUniqueID;
    NSString * _contentItemID;
    NSString * _databaseID;
    NSArray * _formerAdamIDs;
    NSString * _globalPlaylistID;
    NSString * _handoffCorrelationID;
    NSString * _informalMediaClipID;
    NSString * _informalStaticAssetID;
    long long  _lyricsAdamID;
    NSString * _lyricsID;
    MPModelKind * _modelKind;
    long long  _musicKit_possibleLibraryPersistentID;
    NSString * _opaqueID;
    long long  _persistentID;
    NSString * _personID;
    bool  _placeholder;
    NSString * _playbackAuthorizationToken;
    long long  _purchasedAdamID;
    NSString * _recommendationID;
    long long  _reportingAdamID;
    bool  _shouldExcludeFromShuffle;
    NSString * _socialProfileID;
    NSArray * _sources;
    NSString * _stationEventID;
    NSString * _stationHash;
    long long  _stationID;
    NSString * _stationStringID;
    long long  _subscriptionAdamID;
    long long  _syncID;
    NSString * _universalCloudLibraryID;
    NSString * _vendorID;
    NSString * _versionHash;
}

@property (nonatomic) long long adamID;
@property (nonatomic) long long assetAdamID;
@property (nonatomic, copy) NSString *cloudAlbumID;
@property (nonatomic, copy) NSString *cloudArtistID;
@property (nonatomic) unsigned long long cloudID;
@property (nonatomic, copy) NSString *cloudUniversalLibraryID;
@property (nonatomic) long long containedPersistentID;
@property (nonatomic, copy) NSString *containerUniqueID;
@property (nonatomic, copy) NSString *contentItemID;
@property (nonatomic, readonly) NSString *databaseID;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long deviceLibraryPersistentID;
@property (nonatomic, copy) NSArray *formerAdamIDs;
@property (nonatomic, copy) NSArray *formerStoreAdamIDs;
@property (nonatomic, copy) NSString *globalPlaylistID;
@property (nonatomic, copy) NSString *handoffCorrelationID;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *humanDescription;
@property (nonatomic, copy) NSString *informalMediaClipID;
@property (nonatomic, copy) NSString *informalStaticAssetID;
@property (nonatomic, readonly) <MPLocalLibraryIdentifiers> *library;
@property (nonatomic) long long lyricsAdamID;
@property (nonatomic, copy) NSString *lyricsID;
@property (nonatomic, readonly) MPModelKind *modelKind;
@property (setter=musicKit_setPossibleLibraryPersistentID:, nonatomic) long long musicKit_possibleLibraryPersistentID;
@property (nonatomic, copy) NSString *opaqueID;
@property (nonatomic) long long persistentID;
@property (nonatomic, readonly) NSString *personID;
@property (nonatomic, readonly) <MPPersonalStoreIdentifiers> *personalizedStore;
@property (getter=isPlaceholder, nonatomic) bool placeholder;
@property (nonatomic, copy) NSString *playbackAuthorizationToken;
@property (nonatomic) long long purchasedAdamID;
@property (nonatomic, readonly) <MPRadioIdentifiers> *radio;
@property (nonatomic, copy) NSString *radioStationHash;
@property (nonatomic) long long radioStationID;
@property (nonatomic, copy) NSString *radioStationStringID;
@property (nonatomic, copy) NSString *recommendationID;
@property (nonatomic) long long reportingAdamID;
@property (nonatomic) bool shouldExcludeFromShuffle;
@property (nonatomic, copy) NSString *socialProfileID;
@property (nonatomic, readonly, copy) NSArray *sources;
@property (nonatomic, copy) NSString *stationEventID;
@property (nonatomic, copy) NSString *stationHash;
@property (nonatomic) long long stationID;
@property (nonatomic, copy) NSString *stationStringID;
@property (nonatomic) long long storeAdamID;
@property (nonatomic, copy) NSString *storeCloudAlbumID;
@property (nonatomic) unsigned long long storeCloudID;
@property (nonatomic) long long storePurchasedAdamID;
@property (nonatomic, copy) NSString *storeRecommendationID;
@property (nonatomic) long long storeSubscriptionAdamID;
@property (nonatomic) long long subscriptionAdamID;
@property (readonly) Class superclass;
@property (nonatomic) long long syncID;
@property (nonatomic, copy) NSString *universalCloudLibraryID;
@property (nonatomic, readonly) <MPUniversalStoreIdentifiers> *universalStore;
@property (nonatomic, copy) NSString *vendorID;
@property (nonatomic, copy) NSString *versionHash;

// Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer

+ (id)emptyIdentifierSet;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_copyWithSources:(id)arg1 block:(id /* block */)arg2;
- (id)_initWithSources:(id)arg1 modelKind:(id)arg2 block:(id /* block */)arg3;
- (void)_setDefaultDatabaseIDIfNeeded;
- (void)_setDefaultPersonIDIfNeeded;
- (id)_stateDumpObject;
- (long long)adamID;
- (long long)assetAdamID;
- (void)clearLibraryIdentifiers;
- (void)clearPersonalStoreIdentifiers;
- (void)clearRadioIdentifiers;
- (void)clearUniversalStoreIdentifiers;
- (id)cloudAlbumID;
- (id)cloudArtistID;
- (unsigned long long)cloudID;
- (id)cloudUniversalLibraryID;
- (long long)containedPersistentID;
- (id)containerUniqueID;
- (id)contentItemID;
- (id)copyWithBlock:(id /* block */)arg1;
- (id)copyWithMusicKitBlock:(id /* block */)arg1;
- (id)copyWithSource:(id)arg1 block:(id /* block */)arg2;
- (id)copyWithSource:(id)arg1 musicKitBlock:(id /* block */)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)databaseID;
- (id)description;
- (long long)deviceLibraryPersistentID;
- (void)encodeWithCoder:(id)arg1;
- (id)formerAdamIDs;
- (id)formerStoreAdamIDs;
- (id)globalPlaylistID;
- (id)handoffCorrelationID;
- (bool)hasCommonIdentifierWithIdentifierSet:(id)arg1;
- (unsigned long long)hash;
- (id)humanDescription;
- (id)identifierDescriptions:(bool)arg1;
- (id)informalMediaClipID;
- (id)informalStaticAssetID;
- (id)initWithBlock:(id /* block */)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithModelKind:(id)arg1 block:(id /* block */)arg2;
- (id)initWithModelKind:(id)arg1 musicKitBlock:(id /* block */)arg2;
- (id)initWithSource:(id)arg1 modelKind:(id)arg2 block:(id /* block */)arg3;
- (id)initWithSource:(id)arg1 modelKind:(id)arg2 musicKitBlock:(id /* block */)arg3;
- (bool)intersectsSet:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isPlaceholder;
- (id)library;
- (long long)lyricsAdamID;
- (id)lyricsID;
- (id)modelKind;
- (long long)musicKit_possibleLibraryPersistentID;
- (void)musicKit_setPossibleLibraryPersistentID:(long long)arg1;
- (id)opaqueID;
- (long long)persistentID;
- (id)personID;
- (id)personalizedStore;
- (id)playbackAuthorizationToken;
- (id)preferredStoreStringIdentifierForPersonID:(id)arg1;
- (id)prioritizedStoreStringIdentifiersForPersonID:(id)arg1;
- (long long)purchasedAdamID;
- (id)radio;
- (id)radioStationHash;
- (long long)radioStationID;
- (id)radioStationStringID;
- (id)recommendationID;
- (long long)reportingAdamID;
- (void)setAdamID:(long long)arg1;
- (void)setAssetAdamID:(long long)arg1;
- (void)setCloudAlbumID:(id)arg1;
- (void)setCloudArtistID:(id)arg1;
- (void)setCloudID:(unsigned long long)arg1;
- (void)setCloudUniversalLibraryID:(id)arg1;
- (void)setContainedPersistentID:(long long)arg1;
- (void)setContainerUniqueID:(id)arg1;
- (void)setContentItemID:(id)arg1;
- (void)setDeviceLibraryPersistentID:(long long)arg1;
- (void)setFormerAdamIDs:(id)arg1;
- (void)setFormerStoreAdamIDs:(id)arg1;
- (void)setGlobalPlaylistID:(id)arg1;
- (void)setHandoffCorrelationID:(id)arg1;
- (void)setInformalMediaClipID:(id)arg1;
- (void)setInformalStaticAssetID:(id)arg1;
- (void)setLibraryIdentifiersWithDatabaseID:(id)arg1 block:(id /* block */)arg2;
- (void)setLyricsAdamID:(long long)arg1;
- (void)setLyricsID:(id)arg1;
- (void)setOpaqueID:(id)arg1;
- (void)setPersistentID:(long long)arg1;
- (void)setPersonalStoreIdentifiersWithPersonID:(id)arg1 block:(id /* block */)arg2;
- (void)setPlaceholder:(bool)arg1;
- (void)setPlaybackAuthorizationToken:(id)arg1;
- (void)setPurchasedAdamID:(long long)arg1;
- (void)setRadioIdentifiersWithBlock:(id /* block */)arg1;
- (void)setRadioStationHash:(id)arg1;
- (void)setRadioStationID:(long long)arg1;
- (void)setRadioStationStringID:(id)arg1;
- (void)setRecommendationID:(id)arg1;
- (void)setReportingAdamID:(long long)arg1;
- (void)setShouldExcludeFromShuffle:(bool)arg1;
- (void)setSocialProfileID:(id)arg1;
- (void)setStationEventID:(id)arg1;
- (void)setStationHash:(id)arg1;
- (void)setStationID:(long long)arg1;
- (void)setStationStringID:(id)arg1;
- (void)setStoreAdamID:(long long)arg1;
- (void)setStoreCloudAlbumID:(id)arg1;
- (void)setStoreCloudArtistID:(id)arg1;
- (void)setStoreCloudID:(unsigned long long)arg1;
- (void)setStorePurchasedAdamID:(long long)arg1;
- (void)setStoreRecommendationID:(id)arg1;
- (void)setStoreSubscriptionAdamID:(long long)arg1;
- (void)setSubscriptionAdamID:(long long)arg1;
- (void)setSyncID:(long long)arg1;
- (void)setUniversalCloudLibraryID:(id)arg1;
- (void)setUniversalStoreIdentifiersWithBlock:(id /* block */)arg1;
- (void)setVendorID:(id)arg1;
- (void)setVersionHash:(id)arg1;
- (bool)shouldExcludeFromShuffle;
- (id)socialProfileID;
- (id)sources;
- (id)stationEventID;
- (id)stationHash;
- (long long)stationID;
- (id)stationStringID;
- (long long)storeAdamID;
- (id)storeCloudAlbumID;
- (id)storeCloudArtistID;
- (unsigned long long)storeCloudID;
- (long long)storePurchasedAdamID;
- (id)storeRecommendationID;
- (long long)storeSubscriptionAdamID;
- (long long)subscriptionAdamID;
- (long long)syncID;
- (id)unionSet:(id)arg1;
- (id)unionSet:(id)arg1 block:(id /* block */)arg2;
- (id)universalCloudLibraryID;
- (id)universalStore;
- (id)vendorID;
- (id)versionHash;

// Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore

+ (id)identifierSetWithVendorID:(id)arg1;
+ (id)payloadValueFromJSONValue:(id)arg1;

- (id)mpc_jsonValue;

// Image: /System/Library/PrivateFrameworks/NanoMusicSync.framework/NanoMusicSync

+ (id)nms_identifierSetWithLibraryPersistentID:(long long)arg1 modelKind:(id)arg2;

- (id)nms_syncInfoAlbumIdentifier;
- (id)nms_syncInfoPlaylistIdentifier;
- (id)nms_universalStoreLookupID;

@end
