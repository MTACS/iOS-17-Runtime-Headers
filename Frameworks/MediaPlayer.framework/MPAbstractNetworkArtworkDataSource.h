
@interface MPAbstractNetworkArtworkDataSource : NSObject <AVAssetResourceLoaderDelegate, MPArtworkDataSource, NSURLSessionDataDelegate> {
    NSURLSessionConfiguration * _URLSessionConfiguration;
    <NSURLSessionDataDelegate> * _URLSessionDataDelegateProxy;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    NSCache * _fallbackImageArtworkRepresentationCache;
    NSObject<OS_dispatch_queue> * _imageAccessQueue;
    NSURLSession * _imageURLSession;
    NSMutableDictionary * _loadingContexts;
    NSObject<OS_dispatch_source> * _memoryPressureNotificationSource;
    NSMapTable * _resourceLoaderStoragePolicyMap;
    bool  _usesFallbackCache;
    NSObject<OS_dispatch_queue> * _videoAccessQueue;
    NSURL * _videoArtworkCacheURL;
    NSMutableDictionary * _videoTaskToCacheStoragePolicy;
    NSMutableDictionary * _videoTaskToData;
    NSMutableDictionary * _videoTaskToResourceLoadingRequest;
    NSURLCache * _videoURLCache;
    NSURLSession * _videoURLSession;
}

@property (nonatomic, readonly) NSURLSessionConfiguration *URLSessionConfiguration;
@property (nonatomic) <NSURLSessionDataDelegate> *URLSessionDataDelegateProxy;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSCache *fallbackImageArtworkRepresentationCache;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *imageAccessQueue;
@property (nonatomic, retain) NSURLSession *imageURLSession;
@property (nonatomic, retain) NSMutableDictionary *loadingContexts;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *memoryPressureNotificationSource;
@property (nonatomic, retain) NSMapTable *resourceLoaderStoragePolicyMap;
@property (readonly) Class superclass;
@property (nonatomic) bool usesFallbackCache;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *videoAccessQueue;
@property (nonatomic, retain) NSURL *videoArtworkCacheURL;
@property (nonatomic, retain) NSMutableDictionary *videoTaskToCacheStoragePolicy;
@property (nonatomic, retain) NSMutableDictionary *videoTaskToData;
@property (nonatomic, retain) NSMutableDictionary *videoTaskToResourceLoadingRequest;
@property (nonatomic) NSURLCache *videoURLCache;
@property (nonatomic, retain) NSURLSession *videoURLSession;

+ (void)_applyImageURLCachePolicy:(unsigned long long)arg1 cacheDiskPath:(id)arg2 toConfiguration:(id)arg3;
+ (void)_applyVideoCacheURL:(id)arg1 toConfiguration:(id)arg2;

- (void).cxx_destruct;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (id)URLSessionConfiguration;
- (id)URLSessionDataDelegateProxy;
- (id)_artworkRepresentationWithImageFromData:(id)arg1 forURLResponse:(id)arg2 catalog:(id)arg3 size:(struct CGSize { double x1; double x2; })arg4 immediateImageDecompressionAllowed:(bool)arg5;
- (struct CGSize { double x1; double x2; })_bestAvailableSizeForCatalog:(id)arg1 kind:(long long)arg2;
- (id)_bestVideoArtworkRepresentationForCatalog:(id)arg1;
- (id)_cacheKeyForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (void)_didReceiveMemoryWarningNotification:(id)arg1;
- (void)_didReceiveWillEnterForegroundNotification:(id)arg1;
- (void)_disableVideoCache;
- (id)_existingRepresentationFromURLCacheForArtworkCatalog:(id)arg1 immediateImageDecompressionAllowed:(bool)arg2;
- (id)_existingRepresentativeObjectForArtworkCatalog:(id)arg1 kind:(long long)arg2 handler:(id /* block */)arg3;
- (bool)_isRepresentationSize:(struct CGSize { double x1; double x2; })arg1 validForCatalog:(id)arg2;
- (void)_onImageAccessQueue_cancelLoadingContextForCatalogUUID:(id)arg1 withLoadingURL:(id)arg2;
- (void)_performAsyncBarrierBlockOnQueue:(id)arg1 block:(id /* block */)arg2;
- (void)_performSyncBlockOnQueue:(id)arg1 block:(id /* block */)arg2;
- (void)_reEnableVideoCache;
- (id)_requestForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (bool)_subclassImplementsSelector:(SEL)arg1;
- (bool)areRepresentationsAvailableForCatalog:(id)arg1;
- (bool)areRepresentationsOfKind:(long long)arg1 availableForCatalog:(id)arg2;
- (struct CGSize { double x1; double x2; })bestAvailableSizeForCatalog:(id)arg1;
- (id)cacheKeyForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (id)cacheKeyForCatalog:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (id)callbackQueue;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;
- (void)dealloc;
- (id)existingArtworkEffectResultForEffectType:(long long)arg1 catalog:(id)arg2 options:(id)arg3;
- (id)existingRepresentationForArtworkCatalog:(id)arg1;
- (id)existingRepresentationOfKind:(long long)arg1 forArtworkCatalog:(id)arg2;
- (id)fallbackImageArtworkRepresentationCache;
- (id)imageAccessQueue;
- (id)imageURLSession;
- (id)init;
- (bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;
- (void)loadArtworkEffectResultForEffectType:(long long)arg1 catalog:(id)arg2 options:(id)arg3 systemEffectHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)loadRepresentationOfKind:(long long)arg1 forArtworkCatalog:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)loadingContexts;
- (id)memoryPressureNotificationSource;
- (id)requestForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (id)requestForCatalog:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2;
- (bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (id)resourceLoaderStoragePolicyMap;
- (bool)respondsToSelector:(SEL)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setFallbackImageArtworkRepresentationCache:(id)arg1;
- (void)setImageAccessQueue:(id)arg1;
- (void)setImageURLSession:(id)arg1;
- (void)setLoadingContexts:(id)arg1;
- (void)setMemoryPressureNotificationSource:(id)arg1;
- (void)setResourceLoaderStoragePolicyMap:(id)arg1;
- (void)setURLSessionDataDelegateProxy:(id)arg1;
- (void)setUsesFallbackCache:(bool)arg1;
- (void)setVideoAccessQueue:(id)arg1;
- (void)setVideoArtworkCacheURL:(id)arg1;
- (void)setVideoTaskToCacheStoragePolicy:(id)arg1;
- (void)setVideoTaskToData:(id)arg1;
- (void)setVideoTaskToResourceLoadingRequest:(id)arg1;
- (void)setVideoURLCache:(id)arg1;
- (void)setVideoURLSession:(id)arg1;
- (bool)shouldLookForLargerImageRepresentationsWhenBestRepresentationIsUnavailable;
- (id)sortedSupportedSizesForCatalog:(id)arg1;
- (void)startListeningForMemoryPressureNotifications;
- (void)stopListeningForMemoryPressureNotifications;
- (id)supportedSizesForCatalog:(id)arg1;
- (void)updateURLSessionWithCachePolicy:(unsigned long long)arg1 cachePath:(id)arg2;
- (bool)usesFallbackCache;
- (id)videoAccessQueue;
- (id)videoArtworkCacheURL;
- (id)videoTaskToCacheStoragePolicy;
- (id)videoTaskToData;
- (id)videoTaskToResourceLoadingRequest;
- (id)videoURLCache;
- (id)videoURLSession;
- (id)visualIdenticalityIdentifierForCatalog:(id)arg1;
- (bool)wantsBackgroundImageDecompression;

@end
