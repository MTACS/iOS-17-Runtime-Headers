
@interface CBPeripheral : CBPeer {
    NSString * _BDAddress;
    NSNumber * _RSSI;
    bool  _ancsAuthorized;
    unsigned short  _appearance;
    NSMutableDictionary * _attributes;
    bool  _canSendWriteWithoutResponse;
    bool  _connectedToSystem;
    <CBPeripheralDelegate> * _delegate;
    struct { 
        unsigned int didUpdateName : 1; 
        unsigned int didModifyServices : 1; 
        unsigned int didReadRSSI : 1; 
        unsigned int didUpdateRSSI : 1; 
        unsigned int didDiscoverServices : 1; 
        unsigned int didDiscoverIncludedServices : 1; 
        unsigned int didDiscoverCharacteristics : 1; 
        unsigned int didUpdateCharacteristicValue : 1; 
        unsigned int didWriteCharacteristicValue : 1; 
        unsigned int didNotifyCharacteristicValue : 1; 
        unsigned int didDiscoverDescriptors : 1; 
        unsigned int didUpdateDescriptorValue : 1; 
        unsigned int didWriteDescriptorValue : 1; 
        unsigned int didReceiveTimeSync : 1; 
        unsigned int didOpenL2CAPChannel : 1; 
    }  _delegateFlags;
    NSUUID * _findMyBeaconIdentifier;
    NSArray * _findMyGroupMembers;
    unsigned char  _findMyPartIdentifier;
    NSString * _findMySerialNumberString;
    NSUUID * _findMyUserIdentifier;
    bool  _isConnectedToSystem;
    NSHashTable * _l2capChannels;
    bool  _managedByFindMy;
    NSString * _name;
    NSString * _remoteControllerId;
    NSArray * _services;
    NSString * _stableIdentifier;
    long long  _state;
    bool  _visibleInSettings;
    unsigned int  _writesPending;
}

@property (retain) NSString *BDAddress;
@property (retain) NSNumber *RSSI;
@property bool ancsAuthorized;
@property unsigned short appearance;
@property bool canSendWriteWithoutResponse;
@property (getter=isConnectedToSystem, nonatomic, readonly) bool connectedToSystem;
@property (nonatomic) <CBPeripheralDelegate> *delegate;
@property (nonatomic, readonly, copy) NSUUID *findMyBeaconIdentifier;
@property (nonatomic, readonly, copy) NSArray *findMyGroupMembers;
@property (nonatomic, readonly) unsigned char findMyPartIdentifier;
@property (nonatomic, readonly, copy) NSString *findMySerialNumberString;
@property (nonatomic, readonly, copy) NSUUID *findMyUserIdentifier;
@property (nonatomic, readonly) bool isConnectedToSystem;
@property (nonatomic, readonly, retain) NSHashTable *l2capChannels;
@property (readonly) bool managedByFindMy;
@property (retain) NSString *name;
@property (retain) NSString *remoteControllerId;
@property (retain) NSArray *services;
@property (retain) NSString *stableIdentifier;
@property long long state;
@property (readonly) bool visibleInSettings;
@property unsigned int writesPending;

// Image: /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth

- (void).cxx_destruct;
- (id)BDAddress;
- (id)RSSI;
- (bool)ancsAuthorized;
- (unsigned short)appearance;
- (id)attributeForHandle:(id)arg1;
- (bool)canSendWriteWithoutResponse;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)discoverCharacteristics:(id)arg1 forService:(id)arg2;
- (void)discoverDescriptorsForCharacteristic:(id)arg1;
- (void)discoverIncludedServices:(id)arg1 forService:(id)arg2;
- (void)discoverServices:(id)arg1;
- (void)enableFastLeConnection:(bool)arg1 withInfo:(id)arg2 completion:(id /* block */)arg3;
- (id)extendedDescription;
- (id)findMyBeaconIdentifier;
- (id)findMyGroupMembers;
- (unsigned char)findMyPartIdentifier;
- (id)findMySerialNumberString;
- (id)findMyUserIdentifier;
- (void)getTimeSyncData;
- (void)handleAttributeEvent:(id)arg1 args:(id)arg2 attributeSelector:(SEL)arg3 delegateSelector:(SEL)arg4 delegateFlag:(bool)arg5;
- (void)handleCharacteristicDescriptorsDiscovered:(id)arg1;
- (void)handleCharacteristicEvent:(id)arg1 characteristicSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleCharacteristicValueNotifying:(id)arg1;
- (void)handleCharacteristicValueUpdated:(id)arg1;
- (void)handleCharacteristicValueWritten:(id)arg1;
- (void)handleConnectionStateUpdated:(bool)arg1;
- (void)handleDescriptorEvent:(id)arg1 descriptorSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleDescriptorValueUpdated:(id)arg1;
- (void)handleDescriptorValueWritten:(id)arg1;
- (void)handleDisconnection;
- (void)handleFailedConnection;
- (void)handleL2CAPChannelClosed:(id)arg1;
- (void)handleL2CAPChannelOpened:(id)arg1;
- (void)handleMsg:(int)arg1 args:(id)arg2;
- (void)handleNameUpdated:(id)arg1;
- (void)handleRSSIUpdated:(id)arg1;
- (void)handleServiceCharacteristicsDiscovered:(id)arg1;
- (void)handleServiceEvent:(id)arg1 serviceSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleServiceIncludedServicesDiscovered:(id)arg1;
- (void)handleServicesChanged:(id)arg1;
- (void)handleServicesDiscovered:(id)arg1;
- (void)handleSuccessfulConnection:(id)arg1;
- (void)handleTimeSyncResponse:(id)arg1;
- (void)handleVisibilityChanged:(id)arg1;
- (id)initWithCentralManager:(id)arg1 info:(id)arg2;
- (void)invalidateAllAttributes;
- (bool)isConnected;
- (bool)isConnectedToSystem;
- (bool)isConnectedToSystem;
- (void)isReadyForUpdates;
- (id)l2capChannelForPeer:(id)arg1 withPsm:(unsigned short)arg2;
- (id)l2capChannels;
- (bool)managedByFindMy;
- (unsigned long long)maximumWriteValueLengthForType:(long long)arg1;
- (id)name;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)openL2CAPChannel:(unsigned short)arg1;
- (void)openL2CAPChannel:(unsigned short)arg1 options:(id)arg2;
- (void)openL2CAPChannel:(unsigned short)arg1 priority:(long long)arg2;
- (void)readRSSI;
- (void)readValueForCharacteristic:(id)arg1;
- (void)readValueForDescriptor:(id)arg1;
- (id)remoteControllerId;
- (void)removeAllL2CAPChannels;
- (void)removeAttributeForHandle:(id)arg1;
- (void)sendMsg:(int)arg1 args:(id)arg2;
- (bool)sendMsg:(int)arg1 args:(id)arg2 withReply:(id /* block */)arg3;
- (void)sendMsg:(int)arg1 requiresConnected:(bool)arg2 args:(id)arg3;
- (id)sendSyncMsg:(int)arg1 args:(id)arg2;
- (id)services;
- (void)setAncsAuthorized:(bool)arg1;
- (void)setAppearance:(unsigned short)arg1;
- (void)setAttribute:(id)arg1 forHandle:(id)arg2;
- (void)setBDAddress:(id)arg1;
- (void)setBroadcastValue:(bool)arg1 forCharacteristic:(id)arg2;
- (void)setCanSendWriteWithoutResponse:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHighPriorityStream:(bool)arg1 duration:(id)arg2;
- (void)setName:(id)arg1;
- (void)setNotifyValue:(bool)arg1 forCharacteristic:(id)arg2;
- (void)setOrphan;
- (void)setPeripheralName:(id)arg1;
- (void)setRSSI:(id)arg1;
- (void)setRemoteControllerId:(id)arg1;
- (void)setServices:(id)arg1;
- (void)setStableIdentifier:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setVisibleInSettings:(bool)arg1;
- (void)setWritesPending:(unsigned int)arg1;
- (id)stableIdentifier;
- (long long)state;
- (void)updateFindMyInfo:(id)arg1;
- (bool)visibleInSettings;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 type:(long long)arg3;
- (void)writeValue:(id)arg1 forDescriptor:(id)arg2;
- (unsigned int)writesPending;

// Image: /System/Library/PrivateFrameworks/HearingUtilities.framework/HearingUtilities

- (void)axTag:(id)arg1;
- (void)axUntag:(id)arg1;

@end
