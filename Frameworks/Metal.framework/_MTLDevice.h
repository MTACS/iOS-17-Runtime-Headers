
@interface _MTLDevice : NSObject {
    MTLGPUBVHBuilder * _GPUBVHBuilder;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _GPUBVHBuilderLock;
    MTLResourceListPool * _akIOResourceListPool;
    MTLArchitecture * _architecture;
    struct MTLArchiveUsageDB { struct MDB_env {} *x1; unsigned int x2; bool x3; bool x4; } * _binaryArchiveUsage;
    bool  _collectAllLibraries;
    unsigned long long  _commandBufferErrorOptions;
    _Atomic int  _commandQueueCount;
    struct MTLCompilerConnectionManager { int (**x1)(); bool x2; int x3; } * _compilerConnectionManager;
    NSObject<OS_dispatch_queue> * _concurrentQueue;
    MTLLoader * _dynamicLoader;
    bool  _enableAssetUpgraderDaemon;
    MTLDeviceFeatureQueries * _featureQueries;
    unsigned long long  _globalTraceObjectID;
    bool  _gpuAssertionsEnabled;
    bool  _hasInitSerializationPaths;
    struct once_flag { 
        unsigned long long __state_; 
    }  _initConnectionOnceToken;
    struct once_flag { 
        unsigned long long __state_; 
    }  _initProgressTrackingOnceToken;
    bool  _isFirstParty;
    NSString * _librariesOutputDirectory;
    void * _libraryBuilder;
    struct { 
        unsigned int maxFramebufferStorageBits; 
        unsigned int linearTextureArrayAlignmentBytes; 
        unsigned int linearTextureArrayAlignmentSlice; 
        unsigned int maxTileBuffers; 
        unsigned int maxTileTextures; 
        unsigned int maxTileSamplers; 
        unsigned int maxTileInlineDataSize; 
        unsigned int minTilePixels; 
        unsigned int maxColorAttachments; 
        unsigned int maxVertexAttributes; 
        unsigned int maxVertexBuffers; 
        unsigned int maxVertexTextures; 
        unsigned int maxVertexSamplers; 
        unsigned int maxVertexInlineDataSize; 
        unsigned int maxInterpolants; 
        unsigned int maxFragmentBuffers; 
        unsigned int maxFragmentTextures; 
        unsigned int maxFragmentSamplers; 
        unsigned int maxFragmentInlineDataSize; 
        unsigned int maxComputeBuffers; 
        unsigned int maxComputeTextures; 
        unsigned int maxComputeSamplers; 
        unsigned int maxComputeInlineDataSize; 
        unsigned int maxComputeLocalMemorySizes; 
        unsigned int maxTotalComputeThreadsPerThreadgroup; 
        unsigned int maxComputeThreadgroupMemory; 
        float maxLineWidth; 
        float maxPointSize; 
        unsigned int maxVisibilityQueryOffset; 
        unsigned int padmaxBufferLength; 
        unsigned int minConstantBufferAlignmentBytes; 
        unsigned int minBufferNoCopyAlignmentBytes; 
        unsigned int maxTextureWidth1D; 
        unsigned int maxTextureWidth2D; 
        unsigned int maxTextureHeight2D; 
        unsigned int maxTextureWidth3D; 
        unsigned int maxTextureHeight3D; 
        unsigned int maxTextureDepth3D; 
        unsigned int maxTextureDimensionCube; 
        unsigned int maxTextureLayers; 
        unsigned int linearTextureAlignmentBytes; 
        unsigned int iosurfaceTextureAlignmentBytes; 
        unsigned int iosurfaceReadOnlyTextureAlignmentBytes; 
        unsigned int deviceLinearTextureAlignmentBytes; 
        unsigned int deviceLinearReadOnlyTextureAlignmentBytes; 
        unsigned int maxFunctionConstantIndices; 
        unsigned int maxComputeThreadgroupMemoryAlignmentBytes; 
        unsigned int maxInterpolatedComponents; 
        unsigned int maxTessellationFactor; 
        unsigned int maxIndirectBuffers; 
        unsigned int maxIndirectTextures; 
        unsigned int maxIndirectSamplers; 
        unsigned int maxIndirectSamplersPerDevice; 
        unsigned int maxFenceInstances; 
        unsigned int maxViewportCount; 
        unsigned int maxCustomSamplePositions; 
        unsigned int maxVertexAmplificationFactor; 
        unsigned int maxVertexAmplificationCount; 
        unsigned int maxTextureBufferWidth; 
        unsigned int maxComputeAttributes; 
        unsigned int maxIOCommandsInFlight; 
        unsigned int maxPredicatedNestingDepth; 
        unsigned int maxAccelerationStructureLevels; 
        unsigned int maxConstantBufferArguments; 
        unsigned long long maxBufferLength; 
    }  _limits;
    bool  _needsEncoderTypeMatchingProgressBlits;
    void * _pipelineCollection;
    NSString * _pipelineDescriptorsOutputFile;
    struct MTLPipelineLibraryBuilder { id x1; id x2; } * _pipelineLibraryBuilder;
    NSObject<OS_dispatch_queue> * _pipelineSerializationQueue;
    NSDictionary * _pluginData;
    NSMutableArray * _progressTrackBufferStack;
    <MTLComputePipelineState> * _progressTrackComputePipeline;
    <MTLRenderPipelineState> * _progressTrackRenderPipeline;
    struct MTLArchiveMapDB { struct MDB_env {} *x1; unsigned int x2; bool x3; bool x4; } * _recompiledBinaryArchiveMap;
    NSObject<OS_dispatch_queue> * _serialQueue;
    NSObject<OS_dispatch_data> * _serializedPluginData;
    bool  _shaderDebugInfoCaching;
    void * _supportedGPUFamilies;
    bool  _workaroundNewLibraryWithSourceImplicitInvariantPosition;
}

@property (getter=isAnisoSampleFixSupported, readonly) bool AnisoSampleFixSupported;
@property (getter=isBCTextureCompressionSupported, readonly) bool BCTextureCompressionSupported;
@property (getter=isFixedLinePointFillDepthGradientSupported, readonly) bool FixedLinePointFillDepthGradientSupported;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (getter=isRGB10A2GammaSupported, readonly) bool RGB10A2GammaSupported;
@property (getter=isRTZRoundingSupported, readonly) bool RTZRoundingSupported;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (getter=areBarycentricCoordsSupported, readonly) bool barycentricCoordsSupported;
@property (readonly) unsigned long long bufferRobustnessSupport;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly) MTLCompiler *compiler;
@property (readonly) NSObject<OS_dispatch_queue> *concurrentQueue;
@property (readonly) NSArray *counterSets;
@property (nonatomic, readonly) long long currentPerformanceState;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly) unsigned long long deviceCreationFlags;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (getter=isFloat32FilteringSupported, readonly) bool float32FilteringSupported;
@property (readonly) unsigned long long globalTraceObjectID;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) bool gpuAssertionsEnabled;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 29; } indirectArgumentBufferCapabilities;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (getter=isLargeMRTSupported, readonly) bool largeMRTSupported;
@property (readonly) const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; float x27; float x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; }*limits;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxAccelerationStructureLevels;
@property (readonly) unsigned long long maxAccelerationStructureTraversalDepth;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxIOCommandsInFlight;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxPredicatedNestingDepth;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minTilePixels;
@property (getter=isMsaa32bSupported, readonly) bool msaa32bSupported;
@property (readonly) NSString *name;
@property (getter=isPlacementHeapSupported, readonly) bool placementHeapSupported;
@property (nonatomic, copy) NSDictionary *pluginData;
@property (getter=areRasterOrderGroupsSupported, readonly) bool rasterOrderGroupsSupported;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) bool requiresBFloat16Emulation;
@property (readonly) bool requiresRaytracingEmulation;
@property (readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property bool shaderDebugInfoCaching;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (nonatomic, readonly) bool supports2DLinearTexArraySPI;
@property (nonatomic, readonly) bool supports32BitFloatFiltering;
@property (nonatomic, readonly) bool supports32BitMSAA;
@property (nonatomic, readonly) bool supports32bpcMSAATextures;
@property (nonatomic, readonly) bool supports3DASTCTextures;
@property (nonatomic, readonly) bool supports3DBCTextures;
@property (nonatomic, readonly) bool supportsASTCHDRTextureCompression;
@property (nonatomic, readonly) bool supportsASTCTextureCompression;
@property (nonatomic, readonly) bool supportsAlphaYUVFormats;
@property (nonatomic, readonly) bool supportsAnisoSampleFix;
@property (nonatomic, readonly) bool supportsArgumentBuffersTier2;
@property (nonatomic, readonly) bool supportsArrayOfSamplers;
@property (nonatomic, readonly) bool supportsArrayOfTextures;
@property (nonatomic, readonly) bool supportsAtomicUlongVoidMinMax;
@property (nonatomic, readonly) bool supportsAtomicWaitNotify;
@property (nonatomic, readonly) bool supportsBCTextureCompression;
@property (nonatomic, readonly) bool supportsBGR10A2;
@property (nonatomic, readonly) bool supportsBaseVertexInstanceDrawing;
@property (nonatomic, readonly) bool supportsBfloat16Buffers;
@property (nonatomic, readonly) bool supportsBfloat16Format;
@property (nonatomic, readonly) bool supportsBinaryArchives;
@property (nonatomic, readonly) bool supportsBinaryLibraries;
@property (nonatomic, readonly) bool supportsBlackOrWhiteSamplerBorderColors;
@property (nonatomic, readonly) bool supportsBufferBoundsChecking;
@property (nonatomic, readonly) bool supportsBufferPrefetchStatistics;
@property (nonatomic, readonly) bool supportsBufferWithIOSurface;
@property (nonatomic, readonly) bool supportsBufferlessClientStorageTexture;
@property (nonatomic, readonly) bool supportsCMPIndirectCommandBuffers;
@property (nonatomic, readonly) bool supportsColorSpaceConversionMatrixSelection;
@property (nonatomic, readonly) bool supportsCombinedMSAAStoreAndResolveAction;
@property (nonatomic, readonly) bool supportsCommandBufferJump;
@property (nonatomic, readonly) bool supportsCompressedTextureViewSPI;
@property (nonatomic, readonly) bool supportsComputeCompressedTextureWrite;
@property (nonatomic, readonly) bool supportsComputeMemoryBarrier;
@property (nonatomic, readonly) bool supportsConcurrentComputeDispatch;
@property (nonatomic, readonly) bool supportsConditionalLoadStore;
@property (nonatomic, readonly) bool supportsCountingOcclusionQuery;
@property (nonatomic, readonly) bool supportsCustomBorderColor;
@property (nonatomic, readonly) bool supportsDeadlineProfile;
@property (nonatomic, readonly) bool supportsDepthClipMode;
@property (nonatomic, readonly) bool supportsDepthClipModeClampExtended;
@property (nonatomic, readonly) bool supportsDevicePartitioning;
@property (nonatomic, readonly) bool supportsDynamicAttributeStride;
@property (nonatomic, readonly) bool supportsDynamicControlPointCount;
@property (nonatomic, readonly) bool supportsDynamicLibraries;
@property (nonatomic, readonly) bool supportsExplicitVisibilityGroups;
@property (nonatomic, readonly) bool supportsExtendedVertexFormats;
@property (nonatomic, readonly) bool supportsExtendedXR10Formats;
@property (nonatomic, readonly) bool supportsExtendedYUVFormats;
@property (nonatomic, readonly) bool supportsFP32TessFactors;
@property (nonatomic, readonly) bool supportsFastMathInfNaNPropagation;
@property (nonatomic, readonly) bool supportsFillTexture;
@property (nonatomic, readonly) bool supportsFixedLinePointFillDepthGradient;
@property (nonatomic, readonly) bool supportsFloat16BCubicFiltering;
@property (nonatomic, readonly) bool supportsFloat16InfNanFiltering;
@property (nonatomic, readonly) bool supportsForceSeamsOnCubemaps;
@property (nonatomic, readonly) bool supportsForkJoin;
@property (nonatomic, readonly) bool supportsFragmentBufferWrites;
@property (nonatomic, readonly) bool supportsFragmentOnlyEncoders;
@property (nonatomic, readonly) bool supportsFunctionPointers;
@property (nonatomic, readonly) bool supportsFunctionPointersFromMesh;
@property (nonatomic, readonly) bool supportsFunctionPointersFromRender;
@property (nonatomic, readonly) bool supportsGFXIndirectCommandBuffers;
@property (nonatomic, readonly) bool supportsGPUStatistics;
@property (nonatomic, readonly) bool supportsGlobalVariableRelocation;
@property (nonatomic, readonly) bool supportsGlobalVariableRelocationCompute;
@property (nonatomic, readonly) bool supportsGlobalVariableRelocationRender;
@property (nonatomic, readonly) bool supportsHeapAccelerationStructureAllocation;
@property (nonatomic, readonly) bool supportsIABHashForTools;
@property (nonatomic, readonly) bool supportsImageBlockSampleCoverageControl;
@property (nonatomic, readonly) bool supportsImageBlocks;
@property (nonatomic, readonly) bool supportsIndirectDrawAndDispatch;
@property (nonatomic, readonly) bool supportsIndirectStageInRegion;
@property (nonatomic, readonly) bool supportsIndirectTessellation;
@property (nonatomic, readonly) bool supportsIndirectTextures;
@property (nonatomic, readonly) bool supportsIndirectWritableTextures;
@property (nonatomic, readonly) bool supportsInt64;
@property (nonatomic, readonly) bool supportsInterchangeTiled;
@property (nonatomic, readonly) bool supportsInvariantVertexPosition;
@property (nonatomic, readonly) bool supportsLargeFramebufferConfigs;
@property (nonatomic, readonly) bool supportsLateEvalEvent;
@property (nonatomic, readonly) bool supportsLayeredRendering;
@property (nonatomic, readonly) bool supportsLimitedYUVFormats;
@property (nonatomic, readonly) bool supportsLinearTexture2DArray;
@property (nonatomic, readonly) bool supportsLinearTextureFromSharedBuffer;
@property (nonatomic, readonly) bool supportsLossyCompression;
@property (nonatomic, readonly) bool supportsMSAADepthResolve;
@property (nonatomic, readonly) bool supportsMSAADepthResolveFilter;
@property (nonatomic, readonly) bool supportsMSAAStencilResolve;
@property (nonatomic, readonly) bool supportsMSAAStencilResolveFilter;
@property (nonatomic, readonly) bool supportsMemoryOrderAtomics;
@property (nonatomic, readonly) bool supportsMemorylessRenderTargets;
@property (nonatomic, readonly) bool supportsMeshShaders;
@property (nonatomic, readonly) bool supportsMeshShadersInICB;
@property (nonatomic, readonly) bool supportsMipLevelsSmallerThanBlockSize;
@property (nonatomic, readonly) bool supportsMirrorClampToEdgeSamplerMode;
@property (nonatomic, readonly) bool supportsMutableTier1ArgumentBuffers;
@property (nonatomic, readonly) bool supportsNativeHardwareFP16;
@property (nonatomic, readonly) bool supportsNonPrivateDepthStencilTextures;
@property (nonatomic, readonly) bool supportsNonPrivateMSAATextures;
@property (nonatomic, readonly) bool supportsNonSquareTileShaders;
@property (nonatomic, readonly) bool supportsNonUniformThreadgroupSize;
@property (nonatomic, readonly) bool supportsNonZeroTextureWriteLOD;
@property (nonatomic, readonly) bool supportsNorm16BCubicFiltering;
@property (nonatomic, readonly) bool supportsOpenCLTextureWriteSwizzles;
@property (nonatomic, readonly) bool supportsPacked32TextureBufferWrites;
@property (nonatomic, readonly) bool supportsPerPlaneCompression;
@property (nonatomic, readonly) bool supportsPerformanceStateAssertion;
@property (nonatomic, readonly) bool supportsPipelineLibraries;
@property (nonatomic, readonly) bool supportsPlacementHeaps;
@property (nonatomic, readonly) bool supportsPostDepthCoverage;
@property (nonatomic, readonly) bool supportsPrimitiveMotionBlur;
@property (nonatomic, readonly) bool supportsPrimitiveRestartOverride;
@property (nonatomic, readonly) bool supportsProgrammableBlending;
@property (nonatomic, readonly) bool supportsProgrammableSamplePositions;
@property (nonatomic, readonly) bool supportsPublicXR10Formats;
@property (nonatomic, readonly) bool supportsPullModelInterpolation;
@property (nonatomic, readonly) bool supportsQuadGroup;
@property (nonatomic, readonly) bool supportsQuadReduction;
@property (nonatomic, readonly) bool supportsQuadShufflesAndBroadcast;
@property (nonatomic, readonly) bool supportsQueryTextureLOD;
@property (nonatomic, readonly) bool supportsRGBA10A2Gamma;
@property (nonatomic, readonly) bool supportsRTZRounding;
@property (nonatomic, readonly) bool supportsRasterOrderGroups;
@property (nonatomic, readonly) bool supportsRasterOrderGroupsColorAttachment;
@property (nonatomic, readonly) bool supportsRayTracingAccelerationStructureCPUDeserialization;
@property (nonatomic, readonly) bool supportsRayTracingBuffersFromTables;
@property (nonatomic, readonly) bool supportsRayTracingCurves;
@property (nonatomic, readonly) bool supportsRayTracingExtendedVertexFormats;
@property (nonatomic, readonly) bool supportsRayTracingGPUTableUpdateBuffers;
@property (nonatomic, readonly) bool supportsRayTracingICBs;
@property (nonatomic, readonly) bool supportsRayTracingIndirectInstanceAccelerationStructureBuild;
@property (nonatomic, readonly) bool supportsRayTracingMultiLevelInstancing;
@property (nonatomic, readonly) bool supportsRayTracingPerPrimitiveData;
@property (nonatomic, readonly) bool supportsRayTracingTraversalMetrics;
@property (readonly) bool supportsRaytracing;
@property (nonatomic, readonly) bool supportsRaytracingFromRender;
@property (nonatomic, readonly) bool supportsReadWriteBufferArguments;
@property (nonatomic, readonly) bool supportsReadWriteTextureArguments;
@property (nonatomic, readonly) bool supportsReadWriteTextureArgumentsTier2;
@property (nonatomic, readonly) bool supportsReadWriteTextureCubeArguments;
@property (nonatomic, readonly) bool supportsRelaxedTextureViewRequirements;
@property (nonatomic, readonly) bool supportsRenderDynamicLibraries;
@property (nonatomic, readonly) bool supportsRenderMemoryBarrier;
@property (nonatomic, readonly) bool supportsRenderPassWithoutRenderTarget;
@property (nonatomic, readonly) bool supportsRenderTargetTextureRotation;
@property (nonatomic, readonly) bool supportsRenderTextureWrites;
@property (nonatomic, readonly) bool supportsRenderToLinearTextures;
@property (nonatomic, readonly) bool supportsSIMDGroup;
@property (nonatomic, readonly) bool supportsSIMDGroupMatrix;
@property (nonatomic, readonly) bool supportsSIMDReduction;
@property (nonatomic, readonly) bool supportsSIMDShuffleAndFill;
@property (nonatomic, readonly) bool supportsSIMDShufflesAndBroadcast;
@property (nonatomic, readonly) bool supportsSRGBwrites;
@property (nonatomic, readonly) bool supportsSamplerAddressModeClampToHalfBorder;
@property (nonatomic, readonly) bool supportsSamplerCompareFunction;
@property (nonatomic, readonly) bool supportsSeparateDepthStencil;
@property (nonatomic, readonly) bool supportsSeparateVisibilityAndShadingRate;
@property (nonatomic, readonly) bool supportsSetThreadgroupPackingDisabled;
@property (nonatomic, readonly) bool supportsShaderBarycentricCoordinates;
@property (nonatomic, readonly) bool supportsShaderLODAverage;
@property (nonatomic, readonly) bool supportsShaderMinLODClamp;
@property (nonatomic, readonly) bool supportsSharedFunctionTables;
@property (nonatomic, readonly) bool supportsSharedStorageHeapResources;
@property (nonatomic, readonly) bool supportsSharedStorageTextures;
@property (nonatomic, readonly) bool supportsSharedTextureHandles;
@property (nonatomic, readonly) bool supportsSparseDepthAttachments;
@property (nonatomic, readonly) bool supportsSparseHeaps;
@property (nonatomic, readonly) bool supportsSparseTextures;
@property (nonatomic, readonly) bool supportsStackOverflowErrorCode;
@property (nonatomic, readonly) bool supportsStatefulDynamicLibraries;
@property (nonatomic, readonly) bool supportsStencilFeedback;
@property (nonatomic, readonly) bool supportsStreamingCodecSignaling;
@property (nonatomic, readonly) bool supportsTLS;
@property (nonatomic, readonly) bool supportsTessellation;
@property (nonatomic, readonly) bool supportsTexture2DMultisampleArray;
@property (nonatomic, readonly) bool supportsTextureCubeArray;
@property (nonatomic, readonly) bool supportsTextureOutOfBoundsReads;
@property (nonatomic, readonly) bool supportsTextureSwizzle;
@property (nonatomic, readonly) bool supportsTileShaders;
@property (nonatomic, readonly) bool supportsUnalignedVertexFetch;
@property (nonatomic, readonly) bool supportsVariableRateRasterization;
@property (nonatomic, readonly) bool supportsVertexAmplification;
@property (nonatomic, readonly) bool supportsViewportAndScissorArray;
@property (nonatomic, readonly) bool supportsVirtualSubstreams;
@property (nonatomic, readonly) bool supportsWritableArrayOfTextures;
@property (nonatomic, readonly) bool supportsYCBCRFormats;
@property (nonatomic, readonly) bool supportsYCBCRFormats12;
@property (nonatomic, readonly) bool supportsYCBCRFormatsPQ;
@property (nonatomic, readonly) bool supportsYCBCRFormatsXR;
@property (nonatomic, readonly) bool supportsYCBCRPackedFormats12;
@property (nonatomic, readonly) bool supportsYCBCRPackedFormatsPQ;
@property (nonatomic, readonly) bool supportsYCBCRPackedFormatsXR;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x1; unsigned int x2; char *x3; }*targetDeviceInfo;
@property (readonly) bool workaroundNewLibraryWithSourceImplicitInvariantPosition;

+ (bool)featureProfile:(unsigned long long)arg1 supportsFeatureSet:(unsigned long long)arg2;
+ (bool)useNewPrimitiveRestartBehavior;

- (id).cxx_construct;
- (id)GPUBVHBuilder;
- (void)_decrementCommandQueueCount;
- (id)_deviceWrapper;
- (void)_incrementCommandQueueCount;
- (id)_newDynamicLibraryWithDescriptor:(id)arg1 computeDescriptor:(id)arg2 error:(id*)arg3;
- (void)_purgeDevice;
- (void)_setDeviceWrapper:(id)arg1;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })accelerationStructureSizesWithDescriptor:(id)arg1;
- (unsigned int)acceleratorPort;
- (id)akIOResourceListPool;
- (void)allowLibrariesFromOtherPlatforms;
- (id)architecture;
- (bool)areBarycentricCoordsSupported;
- (bool)areGPUAssertionsEnabled;
- (bool)areProgrammableSamplePositionsSupported;
- (bool)areRasterOrderGroupsSupported;
- (unsigned long long)argumentBuffersSupport;
- (unsigned long long)bufferRobustnessSupport;
- (unsigned long long)commandBufferErrorOptions;
- (void)compileVisibleFunction:(id)arg1 withDescriptor:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)compileVisibleFunction:(id)arg1 withDescriptor:(id)arg2 destinationBinaryArchive:(id)arg3 error:(id*)arg4;
- (void)compileVisibleFunction:(id)arg1 withDescriptor:(id)arg2 error:(id*)arg3;
- (id)compiler;
- (void)compilerPropagatesThreadPriority:(bool)arg1;
- (void*)computeFunctionKeyWithComputePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long*)arg3;
- (id)computeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)concurrentQueue;
- (void)convertSparsePixelRegions:(const struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg1 toTileRegions:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg2 withTileSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg3 alignmentMode:(unsigned long long)arg4 numRegions:(unsigned long long)arg5;
- (void)convertSparseTileRegions:(const struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg1 toPixelRegions:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg2 withTileSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg3 numRegions:(unsigned long long)arg4;
- (bool)copyShaderCacheToPath:(id)arg1;
- (id)counterSets;
- (long long)currentPerformanceState;
- (void)dealloc;
- (long long)defaultTextureWriteRoundingMode;
- (id)description;
- (void)deserializeCompileTimeStats:(id)arg1 addToDictionary:(id)arg2;
- (void)deserializeInstanceAccelerationStructure:(id)arg1 fromBytes:(const void*)arg2 primitiveAccelerationStructures:(id)arg3 withDescriptor:(id)arg4;
- (id)deserializeInstanceAccelerationStructureFromBytes:(void*)arg1 primitiveAccelerationStructures:(id)arg2 withDescriptor:(id)arg3;
- (void)deserializeInstanceAccelerationStructureFromBytes:(const void*)arg1 toBuffer:(id)arg2 primitiveAccelerationStructures:(id)arg3 forAccelerationStructure:(id)arg4;
- (void)deserializePrimitiveAccelerationStructure:(id)arg1 fromBytes:(const void*)arg2 withDescriptor:(id)arg3;
- (void)deserializePrimitiveAccelerationStructureFromBytes:(const void*)arg1 toBuffer:(id)arg2 forAccelerationStructure:(id)arg3;
- (id)deserializePrimitiveAccelerationStructureFromBytes:(void*)arg1 withDescriptor:(id)arg2;
- (unsigned long long)deviceCreationFlags;
- (unsigned long long)deviceLinearReadOnlyTextureAlignmentBytes;
- (unsigned long long)deviceLinearTextureAlignmentBytes;
- (bool)deviceOrFeatureProfileSupportsFeatureSet:(unsigned long long)arg1;
- (bool)deviceSupportsFeatureSet:(unsigned long long)arg1;
- (void)dumpPipelineDescriptorsIfRequested;
- (id)endCollectingPipelineDescriptors;
- (id)familyName;
- (id)formattedDescription:(unsigned long long)arg1;
- (void*)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 previousStateVariant:(id)arg3 fragmentKeySize:(unsigned long long*)arg4;
- (id)fragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (void)freeComputeFunctionKey:(void*)arg1 keySize:(unsigned long long)arg2;
- (void)freeComputeLibraryKey:(void*)arg1 libraryKeySize:(unsigned long long)arg2;
- (void)freeFragmentFunctionKey:(void*)arg1 fragmentKeySize:(unsigned long long)arg2;
- (void)freeMeshFunctionDriverData:(void*)arg1 meshFunctionDriverDataSize:(unsigned long long)arg2;
- (void)freeMeshFunctionKey:(void*)arg1 meshKeySize:(unsigned long long)arg2;
- (void)freeObjectFunctionDriverData:(void*)arg1 objectFunctionDriverDataSize:(unsigned long long)arg2;
- (void)freeObjectFunctionKey:(void*)arg1 objectKeySize:(unsigned long long)arg2;
- (void)freeTileFunctionKey:(void*)arg1 keySize:(unsigned long long)arg2;
- (void)freeTranslatedDriverCompilerOptions:(char **)arg1 compilerOptionsSize:(unsigned long long)arg2;
- (void)freeVertexFunctionDriverData:(void*)arg1 vertexFunctionDriverDataSize:(unsigned long long)arg2;
- (void)freeVertexFunctionKey:(void*)arg1 vertexKeySize:(unsigned long long)arg2;
- (void)freeVisibleFunctionKey:(void*)arg1 keySize:(unsigned long long)arg2;
- (struct os_unfair_lock_s { unsigned int x1; }*)getBVHBuilderLock;
- (struct MTLCompilerConnectionManager { int (**x1)(); bool x2; int x3; }*)getCompilerConnectionManager:(int)arg1;
- (char *)getComputeFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (char *)getComputeFunctionId:(const void*)arg1 function:(id)arg2 compilerOptions:(char **)arg3 compilerOptionsSize:(unsigned long long)arg4;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forComputeVariant:(id)arg4;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forObjectVariant:(id)arg4 meshVariant:(id)arg5 fragmentVariant:(id)arg6;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forTileVariant:(id)arg4;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forVertexVariant:(id)arg4 fragmentVariant:(id)arg5;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 stride:(unsigned int*)arg4 forComputeVariant:(id)arg5;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 stride:(unsigned int*)arg4 forObjectVariant:(id)arg5 meshVariant:(id)arg6 fragmentVariant:(id)arg7;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 stride:(unsigned int*)arg4 forTileVariant:(id)arg5;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 stride:(unsigned int*)arg4 forVertexVariant:(id)arg5 fragmentVariant:(id)arg6;
- (void)getDefaultSamplePositions:(struct { float x1; float x2; }*)arg1 count:(unsigned long long)arg2;
- (char *)getFragmentFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (char *)getIntersectionFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (void*)getMeshFunctionDriverData:(const void*)arg1 function:(id)arg2 compilerOptions:(char **)arg3 nextStageVariant:(id)arg4 driverDataSize:(unsigned long long*)arg5;
- (char *)getMeshFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (id)getMostCompatibleArchitecture:(id)arg1;
- (void*)getObjectFunctionDriverData:(const void*)arg1 function:(id)arg2 compilerOptions:(char **)arg3 nextStageVariant:(id)arg4 driverDataSize:(unsigned long long*)arg5;
- (char *)getObjectFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (id)getRawBVHBuilderPtr;
- (void*)getShaderCacheKeys;
- (unsigned long long)getSupportedCommandBufferErrorOptions;
- (void*)getVertexFunctionDriverData:(const void*)arg1 function:(id)arg2 compilerOptions:(char **)arg3 nextStageVariant:(id)arg4 driverDataSize:(unsigned long long*)arg5;
- (char *)getVertexFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (char *)getVertexFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3 compiledFragmentVariant:(id)arg4;
- (char *)getVertexFunctionId:(const void*)arg1 function:(id)arg2 compilerOptions:(char **)arg3 compilerOptionsSize:(unsigned long long)arg4 compiledFragmentVariant:(id)arg5;
- (char *)getVisibleFunctionId:(const void*)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;
- (unsigned long long)globalTraceObjectID;
- (struct { unsigned long long x1; unsigned long long x2; })heapAccelerationStructureSizeAndAlignWithDescriptor:(id)arg1;
- (struct { unsigned long long x1; unsigned long long x2; })heapAccelerationStructureSizeAndAlignWithSize:(unsigned long long)arg1;
- (struct IndirectArgumentBufferCapabilities { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 29; })indirectArgumentBufferCapabilities;
- (id)init;
- (void)initFeatureQueries;
- (void)initGPUFamilySupport;
- (void)initLimits;
- (void)initProgressTracking;
- (void)initSerializationPaths;
- (id)initWithAcceleratorPort:(unsigned int)arg1;
- (void)initWorkarounds;
- (unsigned long long)iosurfaceReadOnlyTextureAlignmentBytes;
- (unsigned long long)iosurfaceTextureAlignmentBytes;
- (bool)isAnisoSampleFixSupported;
- (bool)isBCTextureCompressionSupported;
- (bool)isClampToHalfBorderSupported;
- (bool)isCollectingLibraries;
- (bool)isCollectingPipelines;
- (bool)isCompatibleWithAccelerationStructure:(struct { unsigned int x1; unsigned int x2; })arg1;
- (bool)isCustomBorderColorSupported;
- (bool)isFixedLinePointFillDepthGradientSupported;
- (bool)isFloat32FilteringSupported;
- (bool)isLargeMRTSupported;
- (bool)isMagicMipmapSupported;
- (bool)isMsaa32bSupported;
- (bool)isPlacementHeapSupported;
- (bool)isQuadDataSharingSupported;
- (bool)isRGB10A2GammaSupported;
- (bool)isRTZRoundingSupported;
- (bool)isVendorSliceCompatibleWithDeploymentTarget:(unsigned int)arg1 platform:(unsigned int)arg2 sdkVersion:(unsigned int)arg3 compilerPluginVersion:(unsigned int)arg4;
- (struct { unsigned int x1; unsigned int x2; })libraryCacheStats;
- (void*)libraryKeyWithComputePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long*)arg3;
- (const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; float x27; float x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; }*)limits;
- (unsigned long long)linearTextureAlignmentBytes;
- (unsigned long long)linearTextureArrayAlignmentBytes;
- (unsigned long long)linearTextureArrayAlignmentSlice;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)arg1 error:(id*)arg2;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)loadDynamicLibrariesForFunction:(id)arg1 insertLibraries:(id)arg2 error:(id*)arg3;
- (id)loadDynamicLibrariesForFunction:(id)arg1 insertLibraries:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (id)lookupRecompiledBinaryArchive:(id)arg1;
- (unsigned long long)maxAccelerationStructureLevels;
- (unsigned long long)maxAccelerationStructureTraversalDepth;
- (unsigned long long)maxArgumentBufferSamplerCount;
- (unsigned long long)maxColorAttachments;
- (unsigned long long)maxComputeAttributes;
- (unsigned long long)maxComputeBuffers;
- (unsigned long long)maxComputeInlineDataSize;
- (unsigned long long)maxComputeLocalMemorySizes;
- (unsigned long long)maxComputeSamplers;
- (unsigned long long)maxComputeTextures;
- (unsigned long long)maxComputeThreadgroupMemory;
- (unsigned long long)maxComputeThreadgroupMemoryAlignmentBytes;
- (unsigned long long)maxConstantBufferArguments;
- (unsigned long long)maxCustomSamplePositions;
- (unsigned long long)maxFenceInstances;
- (unsigned long long)maxFragmentBuffers;
- (unsigned long long)maxFragmentInlineDataSize;
- (unsigned long long)maxFragmentSamplers;
- (unsigned long long)maxFragmentTextures;
- (unsigned long long)maxFramebufferStorageBits;
- (unsigned long long)maxFunctionConstantIndices;
- (unsigned long long)maxIOCommandsInFlight;
- (unsigned long long)maxIndirectBuffers;
- (unsigned long long)maxIndirectSamplers;
- (unsigned long long)maxIndirectSamplersPerDevice;
- (unsigned long long)maxIndirectTextures;
- (unsigned long long)maxInterpolants;
- (unsigned long long)maxInterpolatedComponents;
- (float)maxLineWidth;
- (float)maxPointSize;
- (unsigned long long)maxPredicatedNestingDepth;
- (unsigned long long)maxRasterizationRateLayerCount;
- (unsigned long long)maxTessellationFactor;
- (unsigned long long)maxTextureBufferWidth;
- (unsigned long long)maxTextureDepth3D;
- (unsigned long long)maxTextureDimensionCube;
- (unsigned long long)maxTextureHeight2D;
- (unsigned long long)maxTextureHeight3D;
- (unsigned long long)maxTextureLayers;
- (unsigned long long)maxTextureWidth1D;
- (unsigned long long)maxTextureWidth2D;
- (unsigned long long)maxTextureWidth3D;
- (unsigned long long)maxTileBuffers;
- (unsigned long long)maxTileInlineDataSize;
- (unsigned long long)maxTileSamplers;
- (unsigned long long)maxTileTextures;
- (unsigned long long)maxTotalComputeThreadsPerThreadgroup;
- (unsigned long long)maxVertexAmplificationCount;
- (unsigned long long)maxVertexAmplificationFactor;
- (unsigned long long)maxVertexAttributes;
- (unsigned long long)maxVertexBuffers;
- (unsigned long long)maxVertexInlineDataSize;
- (unsigned long long)maxVertexSamplers;
- (unsigned long long)maxVertexTextures;
- (unsigned long long)maxViewportCount;
- (unsigned long long)maxVisibilityQueryOffset;
- (unsigned int)maximumComputeSubstreams;
- (void*)meshFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 nextStageVariant:(id)arg3 meshKeySize:(unsigned long long*)arg4;
- (unsigned long long)minBufferNoCopyAlignmentBytes;
- (unsigned long long)minConstantBufferAlignmentBytes;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;
- (unsigned long long)minTilePixels;
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;
- (id)name;
- (id)newAccelerationStructureWithBuffer:(id)arg1 offset:(unsigned long long)arg2;
- (id)newAccelerationStructureWithBuffer:(id)arg1 offset:(unsigned long long)arg2 resourceIndex:(unsigned long long)arg3;
- (id)newAccelerationStructureWithDescriptor:(id)arg1;
- (id)newAccelerationStructureWithSize:(unsigned long long)arg1;
- (id)newAccelerationStructureWithSize:(unsigned long long)arg1 resourceIndex:(unsigned long long)arg2;
- (id)newAccelerationStructureWithSize:(unsigned long long)arg1 withDescriptor:(id)arg2;
- (id)newArgumentEncoderWithArguments:(id)arg1;
- (id)newArgumentEncoderWithArguments:(id)arg1 structType:(id*)arg2;
- (id)newArgumentEncoderWithBufferBinding:(id)arg1;
- (id)newArgumentEncoderWithLayout:(id)arg1;
- (id)newBinaryArchiveWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)newBinaryLibraryWithOptions:(unsigned long long)arg1 url:(id)arg2 error:(id*)arg3;
- (id)newCommandQueue;
- (id)newCommandQueueWithDescriptor:(id)arg1;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)arg1;
- (id)newComputePipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (void)newComputePipelineStateWithDescriptor:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newComputePipelineStateWithDescriptor:(id)arg1 error:(id*)arg2;
- (void)newComputePipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newComputePipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (void)newComputePipelineStateWithFunction:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newComputePipelineStateWithFunction:(id)arg1 error:(id*)arg2;
- (void)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2;
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2 errorMessage:(id*)arg3;
- (id)newComputeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newCounterSampleBufferWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)newDagStringWithGraphs:(id)arg1;
- (id)newDefaultLibrary;
- (id)newDefaultLibraryWithBundle:(id)arg1 error:(id*)arg2;
- (id)newDynamicLibrary:(id)arg1 computeDescriptor:(id)arg2 error:(id*)arg3;
- (id)newDynamicLibrary:(id)arg1 error:(id*)arg2;
- (id)newDynamicLibraryError:(unsigned long long)arg1 message:(id)arg2;
- (id)newDynamicLibraryFromURL:(id)arg1 error:(id*)arg2;
- (id)newDynamicLibraryWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)newDynamicLibraryWithURL:(id)arg1 error:(id*)arg2;
- (id)newDynamicLibraryWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)newEvent;
- (id)newEventWithOptions:(long long)arg1;
- (id)newFragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newFunctionWithGLCoreIR:(void*)arg1 functionType:(unsigned long long)arg2;
- (id)newFunctionWithGLCoreIR:(void*)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;
- (id)newFunctionWithGLESIR:(void*)arg1 functionType:(unsigned long long)arg2;
- (id)newFunctionWithGLESIR:(void*)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;
- (id)newFunctionWithGLIR:(void*)arg1 functionType:(unsigned long long)arg2;
- (id)newFunctionWithGLIR:(void*)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;
- (id)newIOCommandQueueWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)newIOFileHandleWithURL:(id)arg1 compressionMethod:(long long)arg2 error:(id*)arg3;
- (id)newIOFileHandleWithURL:(id)arg1 error:(id*)arg2;
- (id)newIOHandleWithURL:(id)arg1 compressionMethod:(long long)arg2 error:(id*)arg3;
- (id)newIOHandleWithURL:(id)arg1 compressionType:(long long)arg2 error:(id*)arg3;
- (id)newIOHandleWithURL:(id)arg1 error:(id*)arg2;
- (id)newLateEvalEvent;
- (id)newLibraryWithCIFilters:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (id)newLibraryWithDAG:(id)arg1 functions:(id)arg2 error:(id*)arg3;
- (id)newLibraryWithData:(id)arg1 error:(id*)arg2;
- (void)newLibraryWithDescriptor:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newLibraryWithDescriptor:(id)arg1 destinationBinaryArchive:(id)arg2 error:(id*)arg3;
- (id)newLibraryWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithDescriptorSPI:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithFile:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (void)newLibraryWithSource:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)newLibraryWithSource:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (void)newLibraryWithStitchedDescriptor:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newLibraryWithStitchedDescriptor:(id)arg1 destinationBinaryArchive:(id)arg2 error:(id*)arg3;
- (id)newLibraryWithStitchedDescriptor:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithStitchedDescriptorSPI:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithURL:(id)arg1 error:(id*)arg2;
- (id)newMeshRenderPipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (id)newMeshVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newObjectVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newPerformanceStateAssertion:(long long)arg1 error:(id*)arg2;
- (id)newPipelineLibraryWithFilePath:(id)arg1 error:(id*)arg2;
- (id)newProfileWithExecutionSize:(unsigned long long)arg1;
- (id)newRasterizationRateMapWithDescriptor:(id)arg1;
- (id)newRasterizationRateMapWithScreenSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1 layerCount:(unsigned long long)arg2 layers:(const id*)arg3;
- (id)newRenderPipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (void)newRenderPipelineStateWithDescriptor:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newRenderPipelineStateWithDescriptor:(id)arg1 error:(id*)arg2;
- (void)newRenderPipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newRenderPipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)arg1 error:(id*)arg2;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (void)newRenderPipelineStateWithTileDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newRenderPipelineStateWithTileDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (id)newRenderPipelineWithDescriptor:(id)arg1 objectVariant:(id)arg2 meshVariant:(id)arg3 fragmentVariant:(id)arg4 errorMessage:(id*)arg5;
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3;
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3 errorMessage:(id*)arg4;
- (id)newRenderPipelineWithTileDescriptor:(id)arg1 tileVariant:(id)arg2 errorMessage:(id*)arg3;
- (id)newSharedEvent;
- (id)newSharedEventWithHandle:(id)arg1;
- (id)newSharedEventWithMachPort:(unsigned int)arg1;
- (id)newSharedEventWithOptions:(long long)arg1;
- (id)newSharedTextureWithDescriptor:(id)arg1;
- (id)newSharedTextureWithHandle:(id)arg1;
- (id)newStructTypeWithSerializedData:(id)arg1;
- (id)newTextureWithDescriptor:(id)arg1 iosurface:(struct __IOSurface { }*)arg2 plane:(unsigned long long)arg3 slice:(unsigned long long)arg4;
- (id)newTileRenderPipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (id)newTileVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2 functionType:(unsigned long long)arg3;
- (char **)newTranslatedDriverCompilerOptions:(id)arg1 compilerOptionsSize:(unsigned long long*)arg2;
- (id)newUncachedIOFileHandleWithURL:(id)arg1 compressionMethod:(long long)arg2 error:(id*)arg3;
- (id)newUncachedIOFileHandleWithURL:(id)arg1 error:(id*)arg2;
- (id)newUncachedIOHandleWithURL:(id)arg1 compressionType:(long long)arg2 error:(id*)arg3;
- (id)newUncachedIOHandleWithURL:(id)arg1 error:(id*)arg2;
- (id)newVertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (void*)objectFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 nextStageVariant:(id)arg3 objectKeySize:(unsigned long long*)arg4;
- (unsigned long long)optionsForPipelineLibrarySerialization;
- (struct { unsigned int x1; unsigned int x2; })pipelineCacheStats;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 59; })pipelineFlagsWithComputeVariant:(id)arg1;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 53; })pipelineFlagsWithObjectVariant:(id)arg1 meshVariant:(id)arg2 fragmentVariant:(id)arg3;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 53; })pipelineFlagsWithTileVariant:(id)arg1;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 53; })pipelineFlagsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1 compileTimeOutput:(id)arg2;
- (id)pipelinePerformanceStatisticsWithObjectVariant:(id)arg1 meshVariant:(id)arg2 fragmentVariant:(id)arg3 objectCompileTimeOutput:(id)arg4 meshCompileTimeOutput:(id)arg5 fragmentCompileTimeOutput:(id)arg6;
- (id)pipelinePerformanceStatisticsWithTileVariant:(id)arg1 compileTimeOutput:(id)arg2;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2 vertexCompileTimeOutput:(id)arg3 fragmentCompileTimeOutput:(id)arg4;
- (id)pluginData;
- (id)productName;
- (unsigned long long)readWriteTextureSupport;
- (void)recordBinaryArchiveUsage:(id)arg1;
- (void)registerComputePipelineDescriptor:(id)arg1;
- (void)registerMeshRenderPipelineDescriptor:(id)arg1;
- (void)registerRenderPipelineDescriptor:(id)arg1;
- (void)registerTileRenderPipelineDescriptor:(id)arg1;
- (void)releaseCacheEntry:(struct MTLLibraryContainer { struct MTLPipelineCollection {} *x1; _Atomic int x2; struct { unsigned char x_3_1_1[32]; } x3; struct MTLLibraryData {} *x4; id x5; id x6; id x7; id x8; id x9; }*)arg1;
- (bool)requiresBFloat16Emulation;
- (bool)requiresRaytracingEmulation;
- (id)resolveCounters:(id)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)sampleTimestamps:(unsigned long long*)arg1 gpuTimestamp:(unsigned long long*)arg2;
- (id)serialQueue;
- (id)serializeComputePipelineDescriptor:(id)arg1;
- (id)serializeMeshRenderPipelineDescriptor:(id)arg1;
- (id)serializeRenderPipelineDescriptor:(id)arg1;
- (id)serializeStructType:(id)arg1;
- (id)serializeStructType:(id)arg1 version:(unsigned int)arg2;
- (id)serializeTileRenderPipelineDescriptor:(id)arg1;
- (void)setCommandBufferErrorOptions:(unsigned long long)arg1;
- (bool)setCompilerProcessesCount:(int)arg1;
- (void)setGPUAssertionsEnabled:(bool)arg1;
- (void)setPluginData:(id)arg1;
- (void)setRawBVHBuilderPtr:(id)arg1;
- (void)setShaderDebugInfoCaching:(bool)arg1;
- (bool)shaderDebugInfoCaching;
- (unsigned long long)sparseTexturesSupport;
- (unsigned long long)sparseTileSizeInBytes;
- (unsigned long long)sparseTileSizeInBytesForSparsePageSize:(long long)arg1;
- (void)startCollectingPipelineDescriptors;
- (void)startCollectingPipelineDescriptorsFromLibrary:(id)arg1 filePath:(id)arg2;
- (void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)arg1;
- (bool)supports2DLinearTexArraySPI;
- (bool)supports32BitFloatFiltering;
- (bool)supports32BitMSAA;
- (bool)supports32bpcMSAATextures;
- (bool)supports3DASTCTextures;
- (bool)supports3DBCTextures;
- (bool)supportsASTCHDRTextureCompression;
- (bool)supportsASTCTextureCompression;
- (bool)supportsAlphaYUVFormats;
- (bool)supportsAnisoSampleFix;
- (bool)supportsArgumentBuffersTier2;
- (bool)supportsArrayOfSamplers;
- (bool)supportsArrayOfTextures;
- (bool)supportsAtomicUlongVoidMinMax;
- (bool)supportsAtomicWaitNotify;
- (bool)supportsBCTextureCompression;
- (bool)supportsBGR10A2;
- (bool)supportsBaseVertexInstanceDrawing;
- (bool)supportsBfloat16Buffers;
- (bool)supportsBfloat16Format;
- (bool)supportsBinaryArchives;
- (bool)supportsBinaryLibraries;
- (bool)supportsBlackOrWhiteSamplerBorderColors;
- (bool)supportsBufferBoundsChecking;
- (bool)supportsBufferPrefetchStatistics;
- (bool)supportsBufferWithIOSurface;
- (bool)supportsBufferlessClientStorageTexture;
- (bool)supportsCMPIndirectCommandBuffers;
- (bool)supportsColorSpaceConversionMatrixSelection;
- (bool)supportsCombinedMSAAStoreAndResolveAction;
- (bool)supportsCommandBufferJump;
- (bool)supportsCompressedTextureViewSPI;
- (bool)supportsComputeCompressedTextureWrite;
- (bool)supportsComputeMemoryBarrier;
- (bool)supportsConcurrentComputeDispatch;
- (bool)supportsConditionalLoadStore;
- (bool)supportsCounterSampling:(unsigned long long)arg1;
- (bool)supportsCountingOcclusionQuery;
- (bool)supportsCustomBorderColor;
- (bool)supportsDeadlineProfile;
- (bool)supportsDepthClipMode;
- (bool)supportsDepthClipModeClampExtended;
- (bool)supportsDevicePartitioning;
- (bool)supportsDynamicAttributeStride;
- (bool)supportsDynamicControlPointCount;
- (bool)supportsDynamicLibraries;
- (bool)supportsExplicitVisibilityGroups;
- (bool)supportsExtendedVertexFormats;
- (bool)supportsExtendedXR10Formats;
- (bool)supportsExtendedYUVFormats;
- (bool)supportsFP32TessFactors;
- (bool)supportsFamily:(long long)arg1;
- (bool)supportsFastMathInfNaNPropagation;
- (bool)supportsFeatureSet:(unsigned long long)arg1;
- (bool)supportsFillTexture;
- (bool)supportsFixedLinePointFillDepthGradient;
- (bool)supportsFloat16BCubicFiltering;
- (bool)supportsFloat16InfNanFiltering;
- (bool)supportsForceSeamsOnCubemaps;
- (bool)supportsForkJoin;
- (bool)supportsFragmentBufferWrites;
- (bool)supportsFragmentOnlyEncoders;
- (bool)supportsFunctionPointers;
- (bool)supportsFunctionPointersFromMesh;
- (bool)supportsFunctionPointersFromRender;
- (bool)supportsGFXIndirectCommandBuffers;
- (bool)supportsGPUStatistics;
- (bool)supportsGlobalVariableRelocation;
- (bool)supportsGlobalVariableRelocationCompute;
- (bool)supportsGlobalVariableRelocationRender;
- (bool)supportsHeapAccelerationStructureAllocation;
- (bool)supportsIABHashForTools;
- (bool)supportsImageBlockSampleCoverageControl;
- (bool)supportsImageBlocks;
- (bool)supportsIndirectDrawAndDispatch;
- (bool)supportsIndirectStageInRegion;
- (bool)supportsIndirectTessellation;
- (bool)supportsIndirectTextures;
- (bool)supportsIndirectWritableTextures;
- (bool)supportsInt64;
- (bool)supportsInterchangeTiled;
- (bool)supportsInvariantVertexPosition;
- (bool)supportsLargeFramebufferConfigs;
- (bool)supportsLateEvalEvent;
- (bool)supportsLayeredRendering;
- (bool)supportsLimitedYUVFormats;
- (bool)supportsLinearTexture2DArray;
- (bool)supportsLinearTextureFromSharedBuffer;
- (bool)supportsLossyCompression;
- (bool)supportsMSAADepthResolve;
- (bool)supportsMSAADepthResolveFilter;
- (bool)supportsMSAAStencilResolve;
- (bool)supportsMSAAStencilResolveFilter;
- (bool)supportsMemoryOrderAtomics;
- (bool)supportsMemorylessRenderTargets;
- (bool)supportsMeshShaders;
- (bool)supportsMeshShadersInICB;
- (bool)supportsMipLevelsSmallerThanBlockSize;
- (bool)supportsMirrorClampToEdgeSamplerMode;
- (bool)supportsMutableTier1ArgumentBuffers;
- (bool)supportsNativeHardwareFP16;
- (bool)supportsNonPrivateDepthStencilTextures;
- (bool)supportsNonPrivateMSAATextures;
- (bool)supportsNonSquareTileShaders;
- (bool)supportsNonUniformThreadgroupSize;
- (bool)supportsNonZeroTextureWriteLOD;
- (bool)supportsNorm16BCubicFiltering;
- (bool)supportsOpenCLTextureWriteSwizzles;
- (bool)supportsPacked32TextureBufferWrites;
- (bool)supportsPerPlaneCompression;
- (bool)supportsPerformanceStateAssertion;
- (bool)supportsPipelineLibraries;
- (bool)supportsPlacementHeaps;
- (bool)supportsPostDepthCoverage;
- (bool)supportsPrimitiveMotionBlur;
- (bool)supportsPrimitiveRestartOverride;
- (bool)supportsPrimitiveType:(unsigned long long)arg1;
- (bool)supportsProgrammableBlending;
- (bool)supportsProgrammableSamplePositions;
- (bool)supportsPublicXR10Formats;
- (bool)supportsPullModelInterpolation;
- (bool)supportsQuadGroup;
- (bool)supportsQuadReduction;
- (bool)supportsQuadShufflesAndBroadcast;
- (bool)supportsQueryTextureLOD;
- (bool)supportsRGBA10A2Gamma;
- (bool)supportsRTZRounding;
- (bool)supportsRasterOrderGroups;
- (bool)supportsRasterOrderGroupsColorAttachment;
- (bool)supportsRasterizationRateMapWithLayerCount:(unsigned long long)arg1;
- (bool)supportsRayTracingAccelerationStructureCPUDeserialization;
- (bool)supportsRayTracingBuffersFromTables;
- (bool)supportsRayTracingCurves;
- (bool)supportsRayTracingExtendedVertexFormats;
- (bool)supportsRayTracingGPUTableUpdateBuffers;
- (bool)supportsRayTracingICBs;
- (bool)supportsRayTracingIndirectInstanceAccelerationStructureBuild;
- (bool)supportsRayTracingMultiLevelInstancing;
- (bool)supportsRayTracingPerPrimitiveData;
- (bool)supportsRayTracingTraversalMetrics;
- (bool)supportsRaytracing;
- (bool)supportsRaytracingFromRender;
- (bool)supportsReadWriteBufferArguments;
- (bool)supportsReadWriteTextureArguments;
- (bool)supportsReadWriteTextureArgumentsTier2;
- (bool)supportsReadWriteTextureCubeArguments;
- (bool)supportsRelaxedTextureViewRequirements;
- (bool)supportsRenderDynamicLibraries;
- (bool)supportsRenderMemoryBarrier;
- (bool)supportsRenderPassWithoutRenderTarget;
- (bool)supportsRenderTargetTextureRotation;
- (bool)supportsRenderTextureWrites;
- (bool)supportsRenderToLinearTextures;
- (bool)supportsSIMDGroup;
- (bool)supportsSIMDGroupMatrix;
- (bool)supportsSIMDReduction;
- (bool)supportsSIMDShuffleAndFill;
- (bool)supportsSIMDShufflesAndBroadcast;
- (bool)supportsSRGBwrites;
- (bool)supportsSamplerAddressModeClampToHalfBorder;
- (bool)supportsSamplerCompareFunction;
- (bool)supportsSeparateDepthStencil;
- (bool)supportsSeparateVisibilityAndShadingRate;
- (bool)supportsSetThreadgroupPackingDisabled;
- (bool)supportsShaderBarycentricCoordinates;
- (bool)supportsShaderLODAverage;
- (bool)supportsShaderMinLODClamp;
- (bool)supportsSharedFunctionTables;
- (bool)supportsSharedStorageHeapResources;
- (bool)supportsSharedStorageTextures;
- (bool)supportsSharedTextureHandles;
- (bool)supportsSparseDepthAttachments;
- (bool)supportsSparseHeaps;
- (bool)supportsSparseTextures;
- (bool)supportsStackOverflowErrorCode;
- (bool)supportsStatefulDynamicLibraries;
- (bool)supportsStencilFeedback;
- (bool)supportsStreamingCodecSignaling;
- (bool)supportsTLS;
- (bool)supportsTessellation;
- (bool)supportsTexture2DMultisampleArray;
- (bool)supportsTextureCubeArray;
- (bool)supportsTextureOutOfBoundsReads;
- (bool)supportsTextureSampleCount:(unsigned long long)arg1;
- (bool)supportsTextureSwizzle;
- (bool)supportsTextureWriteFPRoundingMode:(long long)arg1;
- (bool)supportsTextureWriteRoundingMode:(long long)arg1;
- (bool)supportsTileShaders;
- (bool)supportsUnalignedVertexFetch;
- (bool)supportsVariableRateRasterization;
- (bool)supportsVertexAmplification;
- (bool)supportsViewportAndScissorArray;
- (bool)supportsVirtualSubstreams;
- (bool)supportsWritableArrayOfTextures;
- (bool)supportsYCBCRFormats;
- (bool)supportsYCBCRFormats12;
- (bool)supportsYCBCRFormatsPQ;
- (bool)supportsYCBCRFormatsXR;
- (bool)supportsYCBCRPackedFormats12;
- (bool)supportsYCBCRPackedFormatsPQ;
- (bool)supportsYCBCRPackedFormatsXR;
- (id)targetDeviceArchitecture;
- (const struct MTLTargetDeviceArch { unsigned long long x1; unsigned int x2; char *x3; }*)targetDeviceInfo;
- (void*)tileFunctionKeyWithTilePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long*)arg3;
- (void)unloadShaderCaches;
- (bool)validateDynamicLibrary:(id)arg1 state:(bool)arg2 error:(id*)arg3;
- (bool)validateDynamicLibraryDescriptor:(id)arg1 error:(id*)arg2;
- (bool)validateDynamicLibraryURL:(id)arg1 error:(id*)arg2;
- (id)vendorName;
- (void*)vertexFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 nextStageVariant:(id)arg3 vertexKeySize:(unsigned long long*)arg4;
- (id)vertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (void*)visibleFunctionKey:(id)arg1 withFunctionDescriptor:(id)arg2 keySize:(unsigned long long*)arg3;
- (bool)workaroundNewLibraryWithSourceImplicitInvariantPosition;

@end
