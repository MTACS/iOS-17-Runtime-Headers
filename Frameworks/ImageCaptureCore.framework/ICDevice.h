
@interface ICDevice : NSObject {
    NSString * _UUIDString;
    bool  _autoOpenSession;
    NSString * _autolaunchApplicationPath;
    bool  _autolaunchDevice;
    bool  _canCancelSoftwareInstallation;
    bool  _closeSessionPending;
    id /* block */  _completionBlock;
    NSNumber * _connectionID;
    NSMutableSet * _deviceCapabilities;
    id  _deviceDelegate;
    NSNumber * _deviceHandle;
    NSNumber * _deviceID;
    ICDeviceManager * _deviceManager;
    NSNumber * _deviceRef;
    long long  _fwGUID;
    bool  _hasOpenSession;
    struct CGImage { } * _icon;
    NSString * _iconPath;
    NSString * _internalUUID;
    NSString * _locationDescription;
    int  _moduleExecutableArchitecture;
    NSString * _modulePath;
    NSString * _moduleVersion;
    NSString * _name;
    bool  _openSessionPending;
    NSString * _persistentIDString;
    bool  _preferred;
    NSString * _productKind;
    bool  _ready;
    NSString * _serialNumberString;
    int  _sessionID;
    long long  _sessionState;
    double  _softwareInstallPercentDone;
    bool  _systemReportsEjectable;
    NSString * _systemSymbolName;
    NSString * _transportType;
    unsigned long long  _type;
    int  _usbIntefaceClass;
    int  _usbInterfaceProtocol;
    int  _usbInterfaceSubClass;
    int  _usbLocationID;
    int  _usbProductID;
    int  _usbVendorID;
    NSMutableDictionary * _userData;
    NSString * _volumePath;
}

@property (nonatomic, copy) NSString *UUIDString;
@property bool autoOpenSession;
@property (nonatomic, copy) NSString *autolaunchApplicationPath;
@property (nonatomic) bool autolaunchDevice;
@property (readonly) bool canCancelSoftwareInstallation;
@property (nonatomic, readonly) NSArray *capabilities;
@property bool closeSessionPending;
@property (copy) id /* block */ completionBlock;
@property (nonatomic, readonly) NSNumber *connectionID;
@property (nonatomic) <ICDeviceDelegate> *delegate;
@property (nonatomic, retain) NSMutableSet *deviceCapabilities;
@property (nonatomic) id deviceDelegate;
@property (nonatomic, copy) NSNumber *deviceHandle;
@property (nonatomic, readonly) NSNumber *deviceID;
@property (nonatomic, retain) ICDeviceManager *deviceManager;
@property (nonatomic, readonly) NSNumber *deviceRef;
@property (nonatomic) long long fwGUID;
@property (nonatomic) bool hasOpenSession;
@property (nonatomic, retain) struct CGImage { }*icon;
@property (nonatomic, readonly) NSString *iconPath;
@property (nonatomic, copy) NSString *internalUUID;
@property (nonatomic, readonly) bool isAppleDevice;
@property (nonatomic, copy) NSString *locationDescription;
@property (readonly) int moduleExecutableArchitecture;
@property (nonatomic, copy) NSString *modulePath;
@property (nonatomic, copy) NSString *moduleVersion;
@property (nonatomic, copy) NSString *name;
@property bool openSessionPending;
@property (nonatomic, copy) NSString *persistentIDString;
@property (readonly) bool preferred;
@property (nonatomic, copy) NSString *productKind;
@property (nonatomic) bool ready;
@property (getter=isRemote, readonly) bool remote;
@property (nonatomic, copy) NSString *serialNumberString;
@property (nonatomic) int sessionID;
@property (nonatomic) long long sessionState;
@property (readonly) double softwareInstallPercentDone;
@property (nonatomic) bool systemReportsEjectable;
@property (nonatomic, copy) NSString *systemSymbolName;
@property (nonatomic, copy) NSString *transportType;
@property (nonatomic) unsigned long long type;
@property (nonatomic) int usbIntefaceClass;
@property (nonatomic) int usbInterfaceProtocol;
@property (nonatomic) int usbInterfaceSubClass;
@property (nonatomic) int usbLocationID;
@property (nonatomic) int usbProductID;
@property (nonatomic) int usbVendorID;
@property (nonatomic, retain) NSMutableDictionary *userData;
@property (nonatomic, copy) NSString *volumePath;

+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;

- (id)UUIDString;
- (void)addCapability:(id)arg1;
- (bool)autoOpenSession;
- (id)autolaunchApplicationPath;
- (bool)autolaunchDevice;
- (bool)canCancelSoftwareInstallation;
- (id)capabilities;
- (void)cleanupDeviceWithErrorCode:(id)arg1 completionBlock:(id /* block */)arg2;
- (bool)closeSessionPending;
- (id /* block */)completionBlock;
- (id)connectionID;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (id)deviceCapabilities;
- (id)deviceDelegate;
- (id)deviceHandle;
- (id)deviceID;
- (id)deviceManager;
- (id)deviceRef;
- (void)fetchAutolaunchApplicationPath;
- (long long)fwGUID;
- (bool)handleCommandCompletion:(id)arg1;
- (void)handleCommandCompletionNotification:(id)arg1;
- (void)handleImageCaptureEventNotification:(id)arg1;
- (void)handleImageCaptureEventNotification:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasOpenSession;
- (struct CGImage { }*)icon;
- (id)iconPath;
- (void)imageCaptureEventNotification:(id)arg1 completion:(id /* block */)arg2;
- (id)init;
- (id)initWithDictionary:(id)arg1;
- (id)internalUUID;
- (bool)isAppleDevice;
- (bool)isRemote;
- (id)locationDescription;
- (int)moduleExecutableArchitecture;
- (id)modulePath;
- (id)moduleVersion;
- (id)name;
- (void)notifyObservers:(id)arg1;
- (bool)openSessionPending;
- (id)persistentIDString;
- (bool)preferred;
- (id)productKind;
- (bool)ready;
- (void)removeCapabilities;
- (void)removeCapability:(id)arg1;
- (void)requestCloseSession;
- (void)requestCloseSessionWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)requestEject;
- (void)requestEjectOrDisconnect;
- (void)requestEjectWithCompletion:(id /* block */)arg1;
- (void)requestOpenSession;
- (void)requestOpenSessionWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)requestSendMessage:(unsigned int)arg1 outData:(id)arg2 maxReturnedDataSize:(unsigned int)arg3 sendMessageDelegate:(id)arg4 didSendMessageSelector:(SEL)arg5 contextInfo:(void*)arg6;
- (void)requestYield;
- (id)serialNumberString;
- (int)sessionID;
- (long long)sessionState;
- (void)setAutoOpenSession:(bool)arg1;
- (void)setAutolaunchApplicationPath:(id)arg1;
- (void)setAutolaunchDevice:(bool)arg1;
- (void)setCloseSessionPending:(bool)arg1;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceCapabilities:(id)arg1;
- (void)setDeviceDelegate:(id)arg1;
- (void)setDeviceHandle:(id)arg1;
- (void)setDeviceID:(id)arg1;
- (void)setDeviceManager:(id)arg1;
- (void)setFwGUID:(long long)arg1;
- (void)setHasOpenSession:(bool)arg1;
- (void)setIcon:(struct CGImage { }*)arg1;
- (void)setIconPath:(id)arg1;
- (void)setInternalUUID:(id)arg1;
- (void)setLocationDescription:(id)arg1;
- (void)setModulePath:(id)arg1;
- (void)setModuleVersion:(id)arg1;
- (void)setName:(id)arg1;
- (void)setOpenSessionPending:(bool)arg1;
- (void)setPersistentIDString:(id)arg1;
- (void)setPreferred:(bool)arg1;
- (void)setProductKind:(id)arg1;
- (void)setReady:(bool)arg1;
- (void)setSerialNumberString:(id)arg1;
- (void)setSessionID:(int)arg1;
- (void)setSessionState:(long long)arg1;
- (void)setSystemReportsEjectable:(bool)arg1;
- (void)setSystemSymbolName:(id)arg1;
- (void)setTransportType:(id)arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setUUIDString:(id)arg1;
- (void)setUsbIntefaceClass:(int)arg1;
- (void)setUsbInterfaceProtocol:(int)arg1;
- (void)setUsbInterfaceSubClass:(int)arg1;
- (void)setUsbLocationID:(int)arg1;
- (void)setUsbProductID:(int)arg1;
- (void)setUsbVendorID:(int)arg1;
- (void)setUserData:(id)arg1;
- (void)setVolumePath:(id)arg1;
- (double)softwareInstallPercentDone;
- (bool)systemReportsEjectable;
- (id)systemSymbolName;
- (id)transportType;
- (unsigned long long)type;
- (void)updateCapabilities:(id)arg1;
- (bool)updateProperties:(id)arg1;
- (int)usbIntefaceClass;
- (int)usbInterfaceProtocol;
- (int)usbInterfaceSubClass;
- (int)usbLocationID;
- (int)usbProductID;
- (int)usbVendorID;
- (id)userData;
- (id)valueForUndefinedKey:(id)arg1;
- (id)volumePath;

@end
