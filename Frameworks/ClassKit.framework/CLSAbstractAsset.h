
@interface CLSAbstractAsset : CLSObject <CLSAssetDownloadObservable, CLSAssetDownloadProgressNotifiable, NSCopying> {
    NSURL * _URL;
    bool  _URLIsSecurityScoped;
    struct atomic_flag { 
        _Atomic bool _Value; 
    }  _URLRequested;
    NSString * _brItemID;
    NSString * _brOwnerName;
    NSString * _brShareName;
    NSString * _brZoneName;
    long long  _displayOrder;
    NSError * _downloadError;
    NSMutableArray * _downloadObservers;
    bool  _downloaded;
    double  _durationInSeconds;
    long long  _fileSizeInBytes;
    UTType * _fileUTType;
    NSString * _filenameExtension;
    double  _fractionDownloaded;
    bool  _original;
    NSString * _originalFilename;
    NSString * _ownerPersonID;
    long long  _parentEntityType;
    NSMutableArray * _pendingStreamingURLCompletions;
    NSMutableArray * _pendingThumbnailURLCompletions;
    NSMutableArray * _pendingURLCompletions;
    NSString * _relativePathWithinContainer;
    long long  _schoolworkSyncStatus;
    struct atomic_flag { 
        _Atomic bool _Value; 
    }  _streamingURLRequested;
    NSURL * _thumbnailURL;
    struct atomic_flag { 
        _Atomic bool _Value; 
    }  _thumbnailURLRequested;
    NSString * _title;
    long long  _type;
    NSString * _ubiquitousContainerName;
    NSDate * _urlExpirationDate;
}

@property (nonatomic, copy) NSURL *URL;
@property (nonatomic, copy) NSString *brItemID;
@property (nonatomic, copy) NSString *brOwnerName;
@property (nonatomic, copy) NSString *brShareName;
@property (nonatomic, copy) NSString *brZoneName;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long displayOrder;
@property (nonatomic, copy) NSError *downloadError;
@property (getter=isDownloaded, nonatomic) bool downloaded;
@property (nonatomic) double durationInSeconds;
@property (nonatomic) long long fileSizeInBytes;
@property (nonatomic, copy) UTType *fileUTType;
@property (nonatomic, copy) NSString *filenameExtension;
@property (nonatomic) double fractionDownloaded;
@property (readonly) unsigned long long hash;
@property (getter=isOriginal, nonatomic) bool original;
@property (nonatomic, copy) NSString *originalFilename;
@property (nonatomic, copy) NSString *ownerPersonID;
@property (nonatomic, readonly) Class parentEntityClass;
@property (nonatomic) long long parentEntityType;
@property (nonatomic, copy) NSString *relativePathWithinContainer;
@property (nonatomic) long long schoolworkSyncStatus;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSURL *thumbnailURL;
@property (nonatomic, copy) NSString *title;
@property (nonatomic) long long type;
@property (nonatomic, copy) NSString *ubiquitousContainerName;
@property (nonatomic, retain) NSDate *urlExpirationDate;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)URL;
- (id)_init;
- (void)addDownloadObserver:(id)arg1;
- (void)addToPendingStreamingURLCompletions:(id /* block */)arg1;
- (void)addToPendingThumbnailURLCompletions:(id /* block */)arg1;
- (void)addToPendingURLCompletions:(id /* block */)arg1;
- (void)becomeChildOf:(id)arg1;
- (id)brItemID;
- (id)brOwnerName;
- (id)brShareName;
- (id)brZoneName;
- (oneway void)clientRemote_downloadCompleted:(bool)arg1 error:(id)arg2;
- (oneway void)clientRemote_downloadProgressFraction:(double)arg1 error:(id)arg2;
- (oneway void)clientRemote_invalidate;
- (void)cloudKitAssetUrlSuitableForOpeningWithCompletion:(id /* block */)arg1;
- (void)cloudKitThumbnailUrlSuitableForOpeningWithCompletion:(id /* block */)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)devModeOn;
- (long long)displayOrder;
- (id)downloadError;
- (id)downloadObservers;
- (void)driveAssetUrlSuitableForOpeningWithCompletion:(id /* block */)arg1;
- (double)durationInSeconds;
- (void)encodeWithCoder:(id)arg1;
- (long long)fileSizeInBytes;
- (id)fileUTType;
- (id)filenameExtension;
- (id)filenameForCKContentStoreCache;
- (double)fractionDownloaded;
- (bool)hasNotBeenRereferencedByServer;
- (id)initWithCoder:(id)arg1;
- (bool)isDownloaded;
- (bool)isEqual:(id)arg1;
- (bool)isOriginal;
- (bool)isValidFileURL:(id)arg1 isThumbnail:(bool)arg2;
- (bool)isValidStreamingURL:(id)arg1;
- (void)mergeWithObject:(id)arg1;
- (id)originalFilename;
- (id)ownerPersonID;
- (Class)parentEntityClass;
- (long long)parentEntityType;
- (id)pendingStreamingURLCompletions;
- (id)pendingThumbnailURLCompletions;
- (id)pendingURLCompletions;
- (void)queued_notifyDownloadCompletion;
- (void)queued_notifyDownloadProgressFraction:(double)arg1;
- (id)relativePathWithinContainer;
- (void)removeDownloadObserver:(id)arg1;
- (long long)schoolworkSyncStatus;
- (void)setBrItemID:(id)arg1;
- (void)setBrOwnerName:(id)arg1;
- (void)setBrShareName:(id)arg1;
- (void)setBrZoneName:(id)arg1;
- (void)setDisplayOrder:(long long)arg1;
- (void)setDownloadError:(id)arg1;
- (void)setDownloaded:(bool)arg1;
- (void)setDurationInSeconds:(double)arg1;
- (void)setFileSizeInBytes:(long long)arg1;
- (void)setFileSizeInBytesFromURL:(id)arg1;
- (void)setFileUTType:(id)arg1;
- (void)setFileUTTypeFromURL:(id)arg1;
- (void)setFilenameExtension:(id)arg1;
- (void)setFractionDownloaded:(double)arg1;
- (void)setOriginal:(bool)arg1;
- (void)setOriginalFilename:(id)arg1;
- (void)setOwnerPersonID:(id)arg1;
- (void)setParentEntityType:(long long)arg1;
- (void)setRelativePathWithinContainer:(id)arg1;
- (void)setSchoolworkSyncStatus:(long long)arg1;
- (void)setThumbnailURL:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setType:(long long)arg1;
- (void)setURL:(id)arg1;
- (void)setUbiquitousContainerName:(id)arg1;
- (void)setUrlExpirationDate:(id)arg1;
- (id)thumbnailFilenameForCKContentStoreCache;
- (id)thumbnailURL;
- (void)thumbnailURLSuitableForOpeningWithCompletion:(id /* block */)arg1;
- (id)title;
- (long long)type;
- (id)ubiquitousContainerName;
- (id)urlExpirationDate;
- (void)urlSuitableForOpeningWithCompletion:(id /* block */)arg1;
- (void)urlSuitableForStreamingWithCompletion:(id /* block */)arg1;
- (bool)validateObject:(id*)arg1;
- (void)willSaveObject;

@end
