
@interface _GCControllerManager : NSObject <GameControllerClientProtocol, _GCHIDEventSource, _GCIPCObjectMaterializationContext, _GCIPCObjectRegistry, _GCIPCServiceRegistry, _GCImplicitIPCObject> {
    GCController * __controller_genericBTRemote;
    NSXPCConnection * _connection;
    NSMutableDictionary * _controllersByRegistryID;
    NSMutableDictionary * _controllersByUDID;
    NSObject<OS_dispatch_queue> * _controllersQueue;
    GCController * _currentController;
    GCExtendedGamepad * _currentExtendedGamepad;
    long long  _currentMediaRemoteInputMode;
    GCMicroGamepad * _currentMicroGamepad;
    NSXPCConnection * _daemonConnection;
    GCController * _firstMicroGamepad;
    bool  _gameControllerActive;
    id  _hidEventObservation;
    _GCHIDEventSubject * _hidEventSource;
    NSThread * _hidInputThread;
    struct __CFRunLoop { } * _hidInputThreadRunLoop;
    struct __IOHIDManager { } * _hidManager;
    struct __IOHIDEventSystemClient { } * _hidSystemClient;
    NSObject<OS_dispatch_queue> * _hidSystemClientQueue;
    NSObject<OS_dispatch_queue> * _hidSystemPropertyQueue;
    NSMutableArray * _hidThreadExecutionBlocks;
    struct __CFRunLoopSource { } * _hidThreadRunLoopSource;
    NSTimer * _idleWatchTimer;
    NSMapTable * _ipcObjectRegistry;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _ipcRegistryLock;
    bool  _isAppInBackground;
    GCKeyboardAndMouseManager * _keyboardAndMouseManager;
    NSObject<GCRemoteDaemonProxy> * _remote;
    id /* block */  _requestConnectedHostsCallback;
    bool  _shouldKeepRunning;
    bool  _shouldMonitorBackgroundEvents;
    unsigned int  _usbAddedIterator;
    struct IONotificationPort { } * _usbNotify;
    unsigned int  _usbRemovedIterator;
}

@property (readonly) <_GCIPCObjectRegistry> *IPCObjectRegistry;
@property (readonly) <_GCIPCServiceRegistry> *IPCServiceRegistry;
@property (nonatomic, retain) NSXPCConnection *connection;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *controllersQueue;
@property (retain) GCController *currentController;
@property (retain) GCExtendedGamepad *currentExtendedGamepad;
@property (retain) GCMicroGamepad *currentMicroGamepad;
@property (retain) GCMouse *currentMouse;
@property (nonatomic, retain) NSXPCConnection *daemonConnection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) GCController *firstMicroGamepad;
@property (nonatomic) bool gameControllerActive;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSThread *hidInputThread;
@property (nonatomic, readonly) struct __CFRunLoop { }*hidInputThreadRunLoop;
@property (nonatomic) struct __IOHIDManager { }*hidManager;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *hidSystemPropertyQueue;
@property (nonatomic, readonly) NSMutableArray *hidThreadExecutionBlocks;
@property (nonatomic, readonly) struct __CFRunLoopSource { }*hidThreadRunLoopSource;
@property (readonly) <NSObject><NSCopying><NSSecureCoding> *identifier;
@property (nonatomic, readonly) bool isAppInBackground;
@property (nonatomic, retain) NSObject<GCRemoteDaemonProxy> *remote;
@property (nonatomic) bool shouldMonitorBackgroundEvents;
@property (readonly) Class superclass;

+ (void)initialize;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (id)HIDDeviceMatchingAttributes;
- (id)IPCObjectRegistry;
- (id)IPCObjectWithIdentifier:(id)arg1;
- (id)IPCServiceRegistry;
- (void)_legacy_addControllerWithServiceRef:(struct __IOHIDServiceClient { }*)arg1;
- (id)_legacy_coalescedKeyboard;
- (id)_legacy_controllers;
- (void)_legacy_dealloc;
- (void)_legacy_init;
- (id)_legacy_makeHIDEventSource:(struct __IOHIDEventSystemClient { }*)arg1;
- (id)_legacy_mice;
- (void)_legacy_publishController:(id)arg1;
- (void)_legacy_removeControllerWithServiceRef:(struct __IOHIDServiceClient { }*)arg1;
- (void)_legacy_startHIDDeviceMonitor;
- (void)_legacy_startHIDEventMonitor;
- (void)_legacy_stopHIDDeviceMonitor;
- (void)_legacy_stopHIDEventMonitor;
- (void)_legacy_unpublishController:(id)arg1;
- (void)_legacy_updateControllerWithEvent:(struct __IOHIDEvent { }*)arg1;
- (void)_queue_removeController:(id)arg1 registryID:(id)arg2;
- (void)addController:(id)arg1;
- (void)addControllerForAppStoreRemote:(id)arg1;
- (void)async_HIDBlock:(id /* block */)arg1;
- (id)coalescedKeyboard;
- (bool)combineSiriRemoteHIDDevicesWithNewController:(id)arg1 existingController:(id)arg2;
- (int)connectedATVRemoteCount;
- (id)connection;
- (void)controller:(id)arg1 setValue:(float)arg2 forElement:(int)arg3;
- (void)controllerWithUDID:(unsigned long long)arg1 setData:(id)arg2;
- (void)controllerWithUDID:(unsigned long long)arg1 setValue0:(float)arg2 setValue1:(float)arg3 setValue2:(float)arg4 setValue3:(float)arg5 forElement:(int)arg6;
- (void)controllerWithUDID:(unsigned long long)arg1 setValue:(float)arg2 forElement:(int)arg3;
- (id)controllers;
- (id)controllersQueue;
- (id)currentController;
- (id)currentExtendedGamepad;
- (id)currentMicroGamepad;
- (id)currentMouse;
- (id)daemonConnection;
- (void)dealloc;
- (void)enableKeyboardAndMouseSupport;
- (id)firstMicroGamepad;
- (bool)gameControllerActive;
- (id)hidInputThread;
- (struct __CFRunLoop { }*)hidInputThreadRunLoop;
- (struct __IOHIDManager { }*)hidManager;
- (id)hidSystemPropertyQueue;
- (id)hidThreadExecutionBlocks;
- (struct __CFRunLoopSource { }*)hidThreadRunLoopSource;
- (id)identifier;
- (id)init;
- (bool)isAppInBackground;
- (bool)isExistingController:(id)arg1;
- (void)launchHIDInputThread;
- (id)makeHIDEventSource:(struct __IOHIDEventSystemClient { }*)arg1;
- (id)mice;
- (void)microControllerWithDigitizerX:(float)arg1 withY:(float)arg2 withTimeStamp:(unsigned long long)arg3 touchDown:(bool)arg4;
- (void)microControllerWithUDID:(unsigned long long)arg1 setDigitizerX:(float)arg2 digitizerY:(float)arg3 withTimeStamp:(unsigned long long)arg4 touchDown:(bool)arg5;
- (id)observeHIDEvents:(id /* block */)arg1;
- (id)observeHIDEvents:(id /* block */)arg1 forService:(id)arg2;
- (void)onHIDDeviceAdded:(struct __IOHIDServiceClient { }*)arg1;
- (void)onHIDDeviceRemoved:(struct __IOHIDServiceClient { }*)arg1;
- (void)onScreenshotTriggeredWithController:(id)arg1;
- (void)onVideoRecordingToggledWithController:(id)arg1;
- (void)onVideoRecordingToggledWithController:(id)arg1 mode:(long long)arg2;
- (void)open;
- (void)registerIPCObject:(id)arg1;
- (id)remote;
- (void)removeCoalescedControllerComponent:(id)arg1;
- (void)removeController:(id)arg1;
- (void)removeController:(id)arg1 registryID:(id)arg2;
- (id)serviceClientForIPCService:(id)arg1;
- (void)setConnection:(id)arg1;
- (void)setCurrentController:(id)arg1;
- (void)setCurrentExtendedGamepad:(id)arg1;
- (void)setCurrentMicroGamepad:(id)arg1;
- (void)setCurrentMouse:(id)arg1;
- (void)setDaemonConnection:(id)arg1;
- (void)setFirstMicroGamepad:(id)arg1;
- (void)setGameControllerActive:(bool)arg1;
- (void)setHidManager:(struct __IOHIDManager { }*)arg1;
- (void)setRemote:(id)arg1;
- (void)setShouldMonitorBackgroundEvents:(bool)arg1;
- (void)setupHIDMonitor:(bool)arg1;
- (bool)shouldMonitorBackgroundEvents;
- (void)startIdleWatchTimer;
- (void)startVideoRecordingBuffering;
- (void)stopVideoRecordingBuffering;
- (void)storeController:(id)arg1;
- (void)teardownHIDMonitor:(bool)arg1;
- (void)threadHIDInputOffMain:(id)arg1;
- (void)threadHIDInputOnMain:(id)arg1;
- (void)updateCurrentControllerAndProfileForUnpublishedController:(id)arg1;
- (void)updateIdleTimer:(id)arg1;

@end
