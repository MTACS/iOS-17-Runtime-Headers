
@interface GCExtendedGamepad : GCPhysicalInputProfile <NSSecureCoding, _GCGamepadEventSink> {
    GCControllerButtonInput * __buttonShare;
    GCControllerButtonInput * _button0;
    GCControllerButtonInput * _button1;
    GCControllerButtonInput * _button2;
    GCControllerButtonInput * _button3;
    GCControllerButtonInput * _buttonHome;
    long long  _buttonHomeUsage;
    GCControllerButtonInput * _buttonMenu;
    long long  _buttonMenuUsage;
    GCControllerButtonInput * _buttonOptions;
    long long  _buttonOptionsUsage;
    GCControllerDirectionPad * _dpad;
    id  _gamepadEventObservation;
    GCControllerButtonInput * _leftShoulder;
    GCControllerDirectionPad * _leftThumbstick;
    GCControllerButtonInput * _leftThumbstickButton;
    GCControllerButtonInput * _leftTrigger;
    bool  _recordUsagePresent;
    GCControllerButtonInput * _rightShoulder;
    GCControllerDirectionPad * _rightThumbstick;
    GCControllerButtonInput * _rightThumbstickButton;
    GCControllerButtonInput * _rightTrigger;
    bool  _snapshotUsagePresent;
    id /* block */  _valueChangedHandler;
    _GCWebKitUserIntentRecognizer * _webKitUserIntentRecognizer;
}

@property (nonatomic, readonly) GCControllerButtonInput *_buttonHome;
@property (nonatomic, readonly) GCControllerButtonInput *_buttonShare;
@property (nonatomic, readonly) GCControllerButtonInput *button0;
@property (nonatomic, readonly) GCControllerButtonInput *button1;
@property (nonatomic, readonly) GCControllerButtonInput *button2;
@property (nonatomic, readonly) GCControllerButtonInput *button3;
@property (nonatomic, readonly) GCControllerButtonInput *buttonA;
@property (nonatomic, readonly) GCControllerButtonInput *buttonB;
@property (nonatomic, readonly) GCControllerButtonInput *buttonHome;
@property (nonatomic, readonly) GCControllerButtonInput *buttonMenu;
@property (nonatomic, readonly) GCControllerButtonInput *buttonOptions;
@property (nonatomic, readonly) GCControllerButtonInput *buttonX;
@property (nonatomic, readonly) GCControllerButtonInput *buttonY;
@property (nonatomic, readonly) GCController *controller;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) GCControllerDirectionPad *dpad;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) GCControllerButtonInput *leftShoulder;
@property (nonatomic, readonly) GCControllerDirectionPad *leftThumbstick;
@property (nonatomic, readonly) GCControllerButtonInput *leftThumbstickButton;
@property (nonatomic, readonly) GCControllerButtonInput *leftTrigger;
@property (nonatomic, readonly) bool recordUsagePresent;
@property (nonatomic, readonly) GCControllerButtonInput *rightShoulder;
@property (nonatomic, readonly) GCControllerDirectionPad *rightThumbstick;
@property (nonatomic, readonly) GCControllerButtonInput *rightThumbstickButton;
@property (nonatomic, readonly) GCControllerButtonInput *rightTrigger;
@property (nonatomic, readonly) bool snapshotUsagePresent;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ valueChangedHandler;

+ (id)_current;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_buttonHome;
- (id)_buttonShare;
- (void)_legacy_handleEvent:(struct __IOHIDEvent { }*)arg1;
- (void)_triggerValueChangedHandlerForElement:(id)arg1 queue:(id)arg2;
- (bool)allowsRotation;
- (void)applyGlyphFlags;
- (id)button0;
- (id)button1;
- (id)button2;
- (id)button3;
- (id)buttonA;
- (id)buttonB;
- (id)buttonHome;
- (id)buttonMenu;
- (id)buttonOptions;
- (id)buttonX;
- (id)buttonY;
- (id)dpad;
- (void)encodeWithCoder:(id)arg1;
- (void)handleGamepadEvent:(id)arg1;
- (void)initAuxiliaryButtonsWithInitInfo:(const struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg1;
- (void)initShareFunctionalityWithInitInfo:(const struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithController:(id)arg1;
- (id)initWithController:(id)arg1 initInfo:(const struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg2;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 info:(const struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg2;
- (id)initWithInfo:(const struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg1;
- (id)leftShoulder;
- (id)leftThumbstick;
- (id)leftThumbstickButton;
- (id)leftTrigger;
- (id)name;
- (void)populateEncodedInitInfo:(struct { struct { id x_1_1_1; bool x_1_1_2; bool x_1_1_3; union { struct { int x_1_3_1; bool x_1_3_2; float x_1_3_3; long long x_1_3_4; } x_4_2_1; struct { int x_2_3_1; int x_2_3_2; int x_2_3_3; int x_2_3_4; } x_4_2_2; } x_1_1_4; int x_1_1_5; bool x_1_1_6; bool x_1_1_7; bool x_1_1_8; id x_1_1_9; id x_1_1_10; } x1[16]; bool x2; bool x3; }*)arg1;
- (id)productCategory;
- (bool)recordUsagePresent;
- (bool)reportsAbsoluteDpadValues;
- (id)rightShoulder;
- (id)rightThumbstick;
- (id)rightThumbstickButton;
- (id)rightTrigger;
- (id)saveSnapshot;
- (void)setAllowsRotation:(bool)arg1;
- (id)setElementValuesFromExtendedGamepad:(id)arg1;
- (void)setGamepadEventSource:(id)arg1;
- (void)setReportsAbsoluteDpadValues:(bool)arg1;
- (void)setStateFromExtendedGamepad:(id)arg1;
- (void)setThumbstickUserIntentHandler:(id /* block */)arg1;
- (void)setThumbstickUserIntentHandler:(id /* block */)arg1 slidingWindowTotalDuration:(double)arg2 slidingWindowSegmentDuration:(double)arg3 deadzone:(double)arg4 sensitivity:(int)arg5;
- (void)setValueChangedHandler:(id /* block */)arg1;
- (bool)snapshotUsagePresent;
- (id /* block */)thumbstickUserIntentHandler;
- (id /* block */)valueChangedHandler;

@end
