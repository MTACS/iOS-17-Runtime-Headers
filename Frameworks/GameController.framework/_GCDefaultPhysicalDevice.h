
@interface _GCDefaultPhysicalDevice : NSObject <GCAdaptiveTriggersServiceClientInterface, GCBatteryServiceClientInterface, GCGameIntentServiceClientInterface, _GCDeviceAdaptiveTriggersComponent, _GCDeviceBatteryComponent, _GCDeviceGameIntentComponent, _GCDeviceGamepadComponent, _GCDeviceHapticCapabilitiesComponent, _GCDeviceLightComponent, _GCDeviceMotionComponent, _GCDevicePlayerIndexIndicatorComponent, _GCExternalAccessory, _GCPhysicalDevice> {
    id /* block */  _adaptiveTriggersComponentServiceConnectedHandler;
    id /* block */  _adaptiveTriggersComponentStatusUpdatedHandler;
    <GCAdaptiveTriggersServiceServerInterface> * _adaptiveTriggersServiceServer;
    id /* block */  _batteryComponentBatteryUpdatedHandler;
    id /* block */  _batteryComponentServiceConnectedHandler;
    <GCBatteryServiceServerInterface> * _batteryServiceServer;
    unsigned long long  _cachedGlyphFlags;
    long long  _cachedIntentEvent;
    <_GCDefaultPhysicalDeviceDelegate> * _delegate;
    <_GCDeviceDriverConnection> * _driverConnection;
    id  _driverConnectionInvalidationRegistration;
    <_GCDeviceDriverConnection> * _filterConnection;
    id  _filterConnectionInvalidationRegistration;
    id /* block */  _gameIntentComponentGameIntentTriggeredHandler;
    <GCGameIntentServiceServerInterface> * _gameIntentServiceServer;
    <NSObject><NSCopying><NSSecureCoding> * _identifier;
    id /* block */  _lightComponentServiceConnectedHandler;
    <GCLightServiceServerInterface> * _lightServiceServer;
    <_GCDeviceManager> * _manager;
    id /* block */  _motionComponentServiceConnectedHandler;
    <GCMotionServiceServerInterface> * _motionServiceServer;
    _GCHIDServiceInfo * _serviceInfo;
}

@property (nonatomic, readonly) <GCAdaptiveTriggersServiceServerInterface> *adaptiveTriggersServiceServer;
@property (nonatomic, readonly) GCDeviceBattery *battery;
@property (nonatomic, readonly) <GCBatteryServiceServerInterface> *batteryServiceServer;
@property (readonly) NSSet *components;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_GCDefaultPhysicalDeviceDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ deviceAdaptiveTriggersComponentStatusUpdatedHandler;
@property (nonatomic, copy) id /* block */ deviceAdaptiveTriggersServiceConnectedHandler;
@property (nonatomic, copy) id /* block */ deviceBatteryComponentBatteryUpdatedHandler;
@property (nonatomic, copy) id /* block */ deviceBatteryServiceConnectedHandler;
@property (nonatomic, copy) id /* block */ deviceGameIntentComponentGameIntentTriggeredHandler;
@property (nonatomic, copy) id /* block */ deviceLightServiceConnectedHandler;
@property (nonatomic, copy) id /* block */ deviceMotionServiceConnectedHandler;
@property (nonatomic, readonly) <GCGameIntentServiceServerInterface> *gameIntentServiceServer;
@property (readonly) <_GCGamepadEventSourceDescription> *gamepadEventSource;
@property (nonatomic, readonly) GCHapticCapabilityGraph *hapticCapabilityGraph;
@property (nonatomic, readonly) NSArray *hapticEngines;
@property (readonly) unsigned long long hash;
@property (readonly, copy) <NSObject><NSCopying><NSSecureCoding> *identifier;
@property long long indicatedPlayerIndex;
@property (nonatomic, retain) GCDeviceLight *light;
@property (nonatomic, readonly) <GCLightServiceServerInterface> *lightServiceServer;
@property (readonly) <_GCDeviceManager> *manager;
@property (nonatomic, readonly) <_GCMotionEventSourceDescription> *motionEventSource;
@property (nonatomic, readonly) <GCMotionServiceServerInterface> *motionServiceServer;
@property (nonatomic) bool sensorsActive;
@property (nonatomic, readonly) _GCHIDServiceInfo *serviceInfo;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *triggerStatuses;

+ (id)identifierForService:(id)arg1;

- (void).cxx_destruct;
- (void)_workaround_backbone_97462229:(id)arg1;
- (id)adaptiveTriggersServiceServer;
- (id)battery;
- (id)batteryServiceServer;
- (id)components;
- (bool)conformsToProtocol:(id)arg1;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (id)description;
- (id /* block */)deviceAdaptiveTriggersComponentStatusUpdatedHandler;
- (id /* block */)deviceAdaptiveTriggersServiceConnectedHandler;
- (id /* block */)deviceBatteryComponentBatteryUpdatedHandler;
- (id /* block */)deviceBatteryServiceConnectedHandler;
- (id /* block */)deviceGameIntentComponentGameIntentTriggeredHandler;
- (id /* block */)deviceLightServiceConnectedHandler;
- (id /* block */)deviceMotionServiceConnectedHandler;
- (id)driverConnection;
- (void)eaAccessoriesDidChange;
- (id)gameIntentServiceServer;
- (id)gamepadEventSource;
- (unsigned long long)getGlyphFlags;
- (id)hapticCapabilityGraph;
- (id)hapticEngines;
- (id)identifier;
- (long long)indicatedPlayerIndex;
- (id)init;
- (id)initWithHIDDevice:(id)arg1 manager:(id)arg2;
- (id)light;
- (id)lightServiceServer;
- (id)manager;
- (id)motionEventSource;
- (id)motionServiceServer;
- (id)propertyForKey:(id)arg1;
- (id)redactedDescription;
- (bool)sensorsActive;
- (id)serviceInfo;
- (void)setAdaptiveTriggersPayload:(id)arg1 forIndex:(int)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDeviceAdaptiveTriggersComponentStatusUpdatedHandler:(id /* block */)arg1;
- (void)setDeviceAdaptiveTriggersServiceConnectedHandler:(id /* block */)arg1;
- (void)setDeviceBatteryComponentBatteryUpdatedHandler:(id /* block */)arg1;
- (void)setDeviceBatteryServiceConnectedHandler:(id /* block */)arg1;
- (void)setDeviceGameIntentComponentGameIntentTriggeredHandler:(id /* block */)arg1;
- (void)setDeviceLightServiceConnectedHandler:(id /* block */)arg1;
- (void)setDeviceMotionServiceConnectedHandler:(id /* block */)arg1;
- (void)setDriverConnection:(id)arg1;
- (void)setEnableGlobalGameControllerFunctionality:(bool)arg1;
- (void)setFilterConnection:(id)arg1;
- (void)setIndicatedPlayerIndex:(long long)arg1;
- (void)setLight:(id)arg1;
- (void)setSensorsActive:(bool)arg1;
- (bool)supportsAdaptiveTriggers;
- (bool)supportsBattery;
- (bool)supportsGamepad;
- (bool)supportsHapticCapabilities;
- (bool)supportsLight;
- (bool)supportsMotion;
- (bool)supportsPlayerIndicator;
- (void)triggerGameIntentWithEvent:(long long)arg1;
- (id)triggerStatuses;
- (void)updateAdaptiveTriggerStatusWithLeftMode:(unsigned char)arg1 leftStatus:(unsigned char)arg2 leftArmPosition:(unsigned char)arg3 rightMode:(unsigned char)arg4 rightStatus:(unsigned char)arg5 rightArmPosition:(unsigned char)arg6;
- (void)updateBattery:(unsigned char)arg1 isCharging:(bool)arg2;
- (void)updateGlyphFlags;

@end
