
@interface _GCHapticClientProxy : NSObject <CHHapticServerInterface> {
    double  _activeLifetimeInSeconds;
    GCSProfile * _activeProfile;
    NSArray * _actuators;
    unsigned int  _applicationState;
    NSString * _bundleIdentifier;
    unsigned long long  _clientID;
    bool  _complete;
    <_GCIPCIncomingConnection> * _connection;
    id  _connectionInterruptedRegistration;
    id  _connectionInvalidationRegistration;
    NSString * _controllerProductCategory;
    bool  _dirtyMuteState;
    NSMutableDictionary * _hapticPlayers;
    float  _hapticStrength;
    <NSCopying><NSObject><NSSecureCoding> * _identifier;
    double  _initializationTime;
    _Atomic bool  _invalid;
    NSArray * _invalidationHandlers;
    bool  _mockClient;
    int  _muteReasons;
    bool  _muted;
    bool  _neverMute;
    NSString * _persistentControllerIdentifier;
    bool  _playersPlayedHapticsThisSlice;
    bool  _running;
    _GCControllerManagerServer * _server;
    <GCSSettingsStoreService> * _settingsStore;
    struct HapticSharedMemory { 
        int (**_vptr$SharableMemoryBase)(); 
        bool mIsOwner; 
        bool mWasMapped; 
        unsigned long long mSize; 
        void *mBuffer; 
        unsigned int mPort; 
        int mFileDesc; 
        int mSerial; 
        NSObject<OS_xpc_object> *mXPCObject; 
    }  _sharedMemory;
    bool  _shouldSquareContinuousIntensity;
    bool  _stopping;
    int  _totalPlayers;
}

@property (nonatomic, readonly) double activeLifetimeInSeconds;
@property (nonatomic, readonly, copy) NSArray *actuators;
@property (nonatomic) unsigned int applicationState;
@property (nonatomic, copy) NSString *bundleIdentifier;
@property (nonatomic) unsigned long long clientID;
@property (nonatomic) bool complete;
@property (nonatomic, readonly, copy) NSString *controllerProductCategory;
@property (nonatomic, copy) NSMutableDictionary *hapticPlayers;
@property (nonatomic, readonly, copy) <NSCopying><NSObject><NSSecureCoding> *identifier;
@property (getter=isInvalid, nonatomic, readonly) bool invalid;
@property (nonatomic, copy) NSArray *invalidationHandlers;
@property (getter=isMockClient, nonatomic) bool mockClient;
@property (nonatomic, readonly, copy) NSString *persistentControllerIdentifier;
@property (nonatomic) bool shouldSquareContinuousIntensity;
@property (nonatomic, readonly) double totalLifetimeInSeconds;
@property (nonatomic, readonly) int totalPlayers;

+ (id)clientProxyWithConnection:(id)arg1 server:(id)arg2 clientID:(unsigned long long)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_configureActuatorsLegacyWithOptions:(id)arg1;
- (id)_initWithConnection:(id)arg1 server:(id)arg2 clientID:(unsigned long long)arg3;
- (double)activeLifetimeInSeconds;
- (id)actuators;
- (void)addActiveTime:(double)arg1;
- (id)addInvalidationHandler:(id /* block */)arg1;
- (void)allocateClientResources:(id /* block */)arg1;
- (unsigned int)applicationState;
- (id)bundleIdentifier;
- (unsigned long long)clientID;
- (bool)complete;
- (void)configureWithOptions:(id)arg1 reply:(id /* block */)arg2;
- (id)controllerProductCategory;
- (void)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(id /* block */)arg3;
- (void)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(id /* block */)arg5;
- (void)dealloc;
- (void)debugEngineIsRunning:(id /* block */)arg1;
- (void)debugExpectNotifyOnFinishAfter:(double)arg1 reply:(id /* block */)arg2;
- (id)description;
- (void)detachSequence:(unsigned long long)arg1;
- (void)getHapticLatency:(id /* block */)arg1;
- (id)hapticPlayers;
- (float)hapticStrength;
- (id)identifier;
- (id)init;
- (void)invalidate;
- (void)invalidateDueToControllerDisconnect;
- (id)invalidationHandlers;
- (bool)isInvalid;
- (bool)isMockClient;
- (bool)isMuted;
- (bool)isMutedForReason:(unsigned long long)arg1;
- (void)loadHapticEvent:(id)arg1 reply:(id /* block */)arg2;
- (void)loadHapticSequenceFromData:(id)arg1 reply:(id /* block */)arg2;
- (void)loadHapticSequenceFromEvents:(id)arg1 reply:(id /* block */)arg2;
- (void)loadVibePattern:(id)arg1 reply:(id /* block */)arg2;
- (void)notifyClientCompletedWithError:(id)arg1;
- (void)notifyClientOnStopWithReason:(long long)arg1 error:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)persistentControllerIdentifier;
- (void)prepareHapticSequence:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)prewarm:(id /* block */)arg1;
- (void)queryCapabilities:(id)arg1 reply:(id /* block */)arg2;
- (void)referenceCustomAudioEvent:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)refreshUserSettingForMuteHaptics;
- (void)releaseChannels;
- (void)releaseClientResources;
- (void)releaseCustomAudioEvent:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)removeChannel:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)removeCustomAudioEvent:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)requestChannels:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (bool)running;
- (void)setApplicationState:(unsigned int)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setChannelEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)setClientID:(unsigned long long)arg1;
- (void)setComplete:(bool)arg1;
- (void)setHapticPlayers:(id)arg1;
- (void)setHapticStrength:(float)arg1;
- (void)setInvalidationHandlers:(id)arg1;
- (void)setMockClient:(bool)arg1;
- (void)setMute:(bool)arg1 forReason:(unsigned long long)arg2;
- (void)setPlayerBehavior:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channelIndex:(unsigned long long)arg3 reply:(id /* block */)arg4;
- (void)setShouldSquareContinuousIntensity:(bool)arg1;
- (void*)sharedMemory;
- (bool)shouldSquareContinuousIntensity;
- (void)startRunning:(id /* block */)arg1;
- (void)stopPrewarm;
- (void)stopRunning;
- (void)stopRunning:(id /* block */)arg1;
- (bool)stopping;
- (void)teardownAndReleaseChannels;
- (double)totalLifetimeInSeconds;
- (int)totalPlayers;

@end
