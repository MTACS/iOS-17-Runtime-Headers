
@interface RPScreenRecorder : NSObject <RPPreviewViewControllerDelegate, UINavigationControllerDelegate, UIPopoverPresentationControllerDelegate> {
    RPBroadcastController * _activeBroadcastController;
    bool  _available;
    NSURL * _broadcastURL;
    bool  _cameraEnabled;
    long long  _cameraPosition;
    UIView * _cameraPreviewView;
    id /* block */  _captureHandler;
    <RPScreenRecorderDelegate> * _delegate;
    bool  _hasUserConsentForCamera;
    bool  _hasUserConsentForMicrophone;
    bool  _microphoneEnabled;
    bool  _paused;
    RPPGPipViewController * _pgPipViewController;
    RPPipViewController * _pipViewController;
    NSString * _previousAudioCategory;
    unsigned long long  _previousAudioSessionOptions;
    <RPScreenRecorderPrivateDelegate> * _privateDelegate;
    int  _processIDForAudioCapture;
    bool  _recording;
    id /* block */  _saveVideoToCameraRollCompletionBlock;
    <RPScreenCaptureKitContentSharingPickerDelegate> * _screenCaptureKitContentSharingPickerDelegate;
    <RPScreenCaptureKitControlCenterManagerDelegate> * _screenCaptureKitControlCenterManagerDelegate;
    <RPScreenRecorderScreenCapureKitDelegate> * _screenCaptureKitDelegate;
    <RPScreenRecorderScreenCapureKitPreviewDelegate> * _screenCaptureKitPreviewDelegate;
    <RPScreenRecorderDelegate> * _secondDelegate;
    bool  _systemRecording;
    UIWindow * _windowToRecord;
}

@property (nonatomic, retain) RPBroadcastController *activeBroadcastController;
@property (getter=isAvailable, nonatomic) bool available;
@property (nonatomic, retain) NSURL *broadcastURL;
@property (getter=isCameraEnabled, nonatomic) bool cameraEnabled;
@property (nonatomic) long long cameraPosition;
@property (nonatomic, retain) UIView *cameraPreviewView;
@property (nonatomic, copy) id /* block */ captureHandler;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <RPScreenRecorderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasUserConsentForCamera;
@property (nonatomic) bool hasUserConsentForMicrophone;
@property (readonly) unsigned long long hash;
@property (getter=isMicrophoneEnabled, nonatomic) bool microphoneEnabled;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic, retain) RPPGPipViewController *pgPipViewController;
@property (nonatomic, retain) RPPipViewController *pipViewController;
@property (nonatomic, retain) NSString *previousAudioCategory;
@property (nonatomic) unsigned long long previousAudioSessionOptions;
@property (nonatomic, retain) <RPScreenRecorderPrivateDelegate> *privateDelegate;
@property (setter=updateProcessIDForAudioCapture:, nonatomic) int processIDForAudioCapture;
@property (getter=isRecording, nonatomic) bool recording;
@property (nonatomic, copy) id /* block */ saveVideoToCameraRollCompletionBlock;
@property (nonatomic, retain) <RPScreenCaptureKitContentSharingPickerDelegate> *screenCaptureKitContentSharingPickerDelegate;
@property (nonatomic, retain) <RPScreenCaptureKitControlCenterManagerDelegate> *screenCaptureKitControlCenterManagerDelegate;
@property (nonatomic, retain) <RPScreenRecorderScreenCapureKitDelegate> *screenCaptureKitDelegate;
@property (nonatomic, retain) <RPScreenRecorderScreenCapureKitPreviewDelegate> *screenCaptureKitPreviewDelegate;
@property (nonatomic, retain) <RPScreenRecorderDelegate> *secondDelegate;
@property (readonly) Class superclass;
@property (nonatomic) bool systemRecording;
@property (nonatomic, retain) UIWindow *windowToRecord;

+ (id)sharedRecorder;

- (void).cxx_destruct;
- (id)activeBroadcastController;
- (id)applicationWindow;
- (id)audioQueue;
- (id)broadcastURL;
- (long long)cameraPosition;
- (id)cameraPreviewView;
- (id /* block */)captureHandler;
- (void)captureHandlerWithAudioSample:(id)arg1 bufferType:(long long)arg2;
- (void)captureHandlerWithSample:(id)arg1 timingData:(id)arg2;
- (bool)checkContextID:(id)arg1 withHandler:(id /* block */)arg2;
- (void)clientDidUpdateBroadcastServiceInfo:(id)arg1;
- (id)currentWindowLayerContextID;
- (struct CGSize { double x1; double x2; })currentWindowSize;
- (void)dealloc;
- (id)delegate;
- (void)didStopRecordingWithError:(id)arg1 previewViewController:(id)arg2;
- (void)discardRecordingWithHandler:(id /* block */)arg1;
- (void)exportClipToURL:(id)arg1 duration:(double)arg2 completionHandler:(id /* block */)arg3;
- (id)handleUnavailableState;
- (bool)hasUserConsentForCamera;
- (bool)hasUserConsentForMicrophone;
- (id)init;
- (void)instantiatePipView;
- (bool)isAvailable;
- (bool)isCameraEnabled;
- (bool)isConnectionInterruptedOrInvalid:(id)arg1;
- (bool)isMicrophoneEnabled;
- (bool)isPaused;
- (bool)isRecording;
- (void)isScreenRecordingAvailable;
- (void)notifyDelegateOfUpdatedState;
- (void)pauseInAppBroadcast;
- (void)pauseInAppCapture;
- (void)pauseInAppRecording;
- (id)pgPipViewController;
- (id)pipViewController;
- (id)previousAudioCategory;
- (unsigned long long)previousAudioSessionOptions;
- (id)privateDelegate;
- (int)processIDForAudioCapture;
- (id)processQueue;
- (void)recordingDidPause;
- (void)recordingDidStopWithError:(id)arg1 movieURL:(id)arg2;
- (void)recordingLockInterrupted:(id)arg1;
- (void)recordingTimerDidUpdate:(id)arg1;
- (void)registerAppForStateChangeSetRotationLock:(bool)arg1;
- (void)removePipView;
- (void)resumeInAppBroadcast;
- (void)resumeInAppCapture;
- (void)resumeInAppClip;
- (void)resumeInAppRecording;
- (void)resumeSystemBroadcast;
- (void)resumeSystemRecording;
- (void)saveClipToCameraRoll:(id)arg1 handler:(id /* block */)arg2;
- (void)saveVideo:(id)arg1 handler:(id /* block */)arg2;
- (void)saveVideoToCameraRoll:(id)arg1 handler:(id /* block */)arg2;
- (id /* block */)saveVideoToCameraRollCompletionBlock;
- (id)screenCaptureKitContentSharingPickerDelegate;
- (id)screenCaptureKitControlCenterManagerDelegate;
- (id)screenCaptureKitDelegate;
- (id)screenCaptureKitPreviewDelegate;
- (bool)screenRecordingAllowed;
- (bool)screenRecordingSupportedOnDevice;
- (id)secondDelegate;
- (void)setActiveBroadcastController:(id)arg1;
- (void)setAvailable:(bool)arg1;
- (void)setBroadcastURL:(id)arg1;
- (void)setCameraEnabled:(bool)arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setCameraPreviewView:(id)arg1;
- (void)setCaptureHandler:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHasUserConsentForCamera:(bool)arg1;
- (void)setHasUserConsentForMicrophone:(bool)arg1;
- (void)setMicrophoneEnabled:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPgPipViewController:(id)arg1;
- (void)setPipViewController:(id)arg1;
- (void)setPreviousAudioCategory:(id)arg1;
- (void)setPreviousAudioSessionOptions:(unsigned long long)arg1;
- (void)setPrivateDelegate:(id)arg1;
- (void)setRecording:(bool)arg1;
- (void)setSaveVideoToCameraRollCompletionBlock:(id /* block */)arg1;
- (void)setScreenCaptureKitContentSharingPickerDelegate:(id)arg1;
- (void)setScreenCaptureKitControlCenterManagerDelegate:(id)arg1;
- (void)setScreenCaptureKitDelegate:(id)arg1;
- (void)setScreenCaptureKitPreviewDelegate:(id)arg1;
- (void)setSecondDelegate:(id)arg1;
- (void)setSystemRecording:(bool)arg1;
- (void)setWindowRotationLocked:(bool)arg1;
- (void)setWindowToRecord:(id)arg1;
- (void)setupSystemBroadcastWithExtension:(id)arg1 handler:(id /* block */)arg2;
- (bool)shouldNotifyDidStop;
- (void)shouldResumeSessionType:(id)arg1;
- (void)startCaptureWithHandler:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)startClipBufferingWithCompletionHandler:(id /* block */)arg1;
- (void)startInAppBroadcastWithHandler:(id /* block */)arg1;
- (void)startRecordingWithHandler:(id /* block */)arg1;
- (void)startRecordingWithMicrophoneEnabled:(bool)arg1 handler:(id /* block */)arg2;
- (void)startSystemBroadcastWithHandler:(id /* block */)arg1;
- (void)startSystemRecordingWithMicrophoneEnabled:(bool)arg1 handler:(id /* block */)arg2;
- (void)stopCaptureWithHandler:(id /* block */)arg1;
- (void)stopClipBufferingWithCompletionHandler:(id /* block */)arg1;
- (void)stopInAppBroadcastWithHandler:(id /* block */)arg1;
- (void)stopRecordingWithAdditionalShareFileAttachment:(id)arg1 overrideShareMessage:(id)arg2 previewViewControllerOverrideTintColor:(id)arg3 handler:(id /* block */)arg4;
- (void)stopRecordingWithHandler:(id /* block */)arg1;
- (void)stopRecordingWithOutputURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)stopRecordingWithVideoURLHandler:(id /* block */)arg1;
- (void)stopSystemBroadcastWithHandler:(id /* block */)arg1;
- (void)stopSystemRecording:(id /* block */)arg1;
- (void)stopSystemRecordingWithURLHandler:(id /* block */)arg1;
- (bool)systemRecording;
- (void)updateProcessIDForAudioCapture:(int)arg1;
- (void)updateRecordingAvailability:(id)arg1;
- (void)updateScreenRecordingStateWithCurrentState:(id)arg1;
- (void)updateStateWithActive:(bool)arg1 error:(id)arg2;
- (id)videoQueue;
- (id)windowToRecord;

@end
