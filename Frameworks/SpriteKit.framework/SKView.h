
@interface SKView : UIView {
    NSMutableDictionary * __info;
    void * __layerBackedRenderer;
    bool  _allowsTransparency;
    unsigned int  _colorRenderBuffer;
    struct SKCStats { 
        int (**_vptr$SKCStats)(); 
        double frameBeginTime; 
        double frameDuration; 
        double baseTime; 
        double currentTime; 
        int frameCount; 
        struct { 
            double beginTime; 
            double duration; 
        } clientUpdate; 
        struct { 
            double beginTime; 
            double duration; 
        } update; 
        struct { 
            double beginTime; 
            double duration; 
            int bodyCount; 
        } physics; 
        struct { 
            double beginTime; 
            double duration; 
            int constraintCount; 
        } constraints; 
        struct { 
            double beginTime; 
            double duration; 
            int opCount; 
            int quadCount; 
            int nodeTraversalCount; 
            int sknodeTraversalCount; 
            int nodeRenderCount; 
            int drawCallCount; 
            int passCount; 
            int maxBatchElementCount; 
        } render; 
    }  _currentStats;
    NSObject<SKViewDelegate> * _delegate;
    unsigned int  _depthStencilRenderBuffer;
    bool  _didRunOnce;
    bool  _disableInput;
    SKDisplayLink * _displayLink;
    id /* block */  _dynamicRenderBlock;
    CAEAGLLayer * _eaglLayer;
    struct shared_ptr<jet_texture> { 
        struct jet_texture {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _frameBufferColorTexture;
    struct shared_ptr<jet_texture> { 
        struct jet_texture {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _frameBufferDepthStencilTexture;
    unsigned long long  _frameInterval;
    struct SKCStats { 
        int (**_vptr$SKCStats)(); 
        double frameBeginTime; 
        double frameDuration; 
        double baseTime; 
        double currentTime; 
        int frameCount; 
        struct { 
            double beginTime; 
            double duration; 
        } clientUpdate; 
        struct { 
            double beginTime; 
            double duration; 
        } update; 
        struct { 
            double beginTime; 
            double duration; 
            int bodyCount; 
        } physics; 
        struct { 
            double beginTime; 
            double duration; 
            int constraintCount; 
        } constraints; 
        struct { 
            double beginTime; 
            double duration; 
            int opCount; 
            int quadCount; 
            int nodeTraversalCount; 
            int sknodeTraversalCount; 
            int nodeRenderCount; 
            int drawCallCount; 
            int passCount; 
            int maxBatchElementCount; 
        } render; 
    }  _frameStats;
    struct shared_ptr<jet_framebuffer> { 
        struct jet_framebuffer {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _framebuffer;
    bool  _hasRenderedForCurrentUpdate;
    bool  _hasRenderedOnce;
    bool  _isBackgrounded;
    CAMetalLayer * _metalLayer;
    bool  _mouseIsDown;
    bool  _needsInitialUpdate;
    SKScene * _nextScene;
    struct SKCStats { 
        int (**_vptr$SKCStats)(); 
        double frameBeginTime; 
        double frameDuration; 
        double baseTime; 
        double currentTime; 
        int frameCount; 
        struct { 
            double beginTime; 
            double duration; 
        } clientUpdate; 
        struct { 
            double beginTime; 
            double duration; 
        } update; 
        struct { 
            double beginTime; 
            double duration; 
            int bodyCount; 
        } physics; 
        struct { 
            double beginTime; 
            double duration; 
            int constraintCount; 
        } constraints; 
        struct { 
            double beginTime; 
            double duration; 
            int opCount; 
            int quadCount; 
            int nodeTraversalCount; 
            int sknodeTraversalCount; 
            int nodeRenderCount; 
            int drawCallCount; 
            int passCount; 
            int maxBatchElementCount; 
        } render; 
    }  _nextStats;
    bool  _paused;
    double  _physicsDebugStrokeWidth;
    struct CGSize { 
        double width; 
        double height; 
    }  _pixelSize;
    unsigned long long  _preferredFramesPerSecond;
    bool  _prefersLowPowerGPU;
    float  _prevBackingScaleFactor;
    double  _prevRenderTime;
    double  _prevVsyncRenderTime;
    bool  _priorResignActivePausedState;
    int  _queuedFrameCount;
    struct shared_ptr<jet_fence> { 
        struct jet_fence {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _renderFence;
    NSObject<OS_dispatch_queue> * _renderQueue;
    NSObject<OS_dispatch_semaphore> * _renderSemaphore;
    void * _renderer;
    bool  _rightMouseIsDown;
    SKScene * _scene;
    NSData * _spriteArrayHint;
    double  _timePreviousUpdate;
    NSMapTable * _touchMap;
    SKTransition * _transition;
    NSObject<OS_dispatch_queue> * _updateQueue;
    bool  _usesAsyncUpdateQueue;
    bool  _viewFramebufferIsValid;
    void _viewFramebufferPixelSize;
    NSMutableDictionary * _viewRenderOptions;
    void _viewScale;
    void _viewTranslation;
}

@property (nonatomic, retain) NSMutableDictionary *_info;
@property void*_layerBackedRenderer;
@property (nonatomic) bool allowsTransparency;
@property (getter=isAsynchronous, nonatomic) bool asynchronous;
@property (nonatomic) NSObject<SKViewDelegate> *delegate;
@property (nonatomic) bool disableDepthStencilBuffer;
@property (getter=disableDepthStencilBuffer, setter=setDisableDepthStencilBuffer:, nonatomic) bool disableStencilBuffers;
@property (nonatomic) long long frameInterval;
@property (nonatomic) bool ignoresSiblingOrder;
@property (readonly) NSMutableDictionary *options;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) double physicsDebugStrokeWidth;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pixelSize;
@property (nonatomic) float preferredFrameRate;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic, readonly) SKScene *scene;
@property (nonatomic) bool shouldCullNonVisibleNodes;
@property (nonatomic) bool showsDrawCount;
@property (nonatomic) bool showsFPS;
@property (nonatomic) bool showsFields;
@property (nonatomic) bool showsNodeCount;
@property (nonatomic) bool showsPhysics;
@property (nonatomic) bool showsQuadCount;

+ (void)_setCurrentTime:(double)arg1;
+ (id)debugHierarchyAdditionalGroupingIDs;
+ (id)debugHierarchyObjectsInGroupWithID:(id)arg1 onObject:(id)arg2 outOptions:(id*)arg3;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)arg1 onObject:(id)arg2 outOptions:(id*)arg3 outError:(id*)arg4;
+ (Class)layerClass;
+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (void)_commonInit;
- (void)_dispatchRenderToIOSurfaceID:(unsigned int)arg1 async:(bool)arg2 onQueue:(id)arg3 waitOnFence:(bool)arg4 preRender:(id /* block */)arg5 postRender:(id /* block */)arg6;
- (void)_endFrameStats;
- (void)_ensureRenderer;
- (id)_focusedItemRegionContainer;
- (double)_fps;
- (unsigned long long)_getEffectivePreferredFramesPerSecond;
- (id)_getPerformanceStats;
- (float)_getViewContentsScale;
- (id)_info;
- (void*)_layerBackedRenderer;
- (long long)_preferredFocusMovementStyle;
- (void)_renderContent;
- (void)_renderSynchronouslyForTime:(double)arg1 preRender:(id /* block */)arg2 postRender:(id /* block */)arg3;
- (void)_renderSynchronouslyForTime:(double)arg1 preRender:(id /* block */)arg2 postRender:(id /* block */)arg3 withMTLScheduleHandler:(id /* block */)arg4;
- (void)_renderToIOSurfaceID:(unsigned int)arg1 scaleFactor:(float)arg2 asynchronous:(bool)arg3 preRender:(id /* block */)arg4 postRender:(id /* block */)arg5;
- (void)_renderToIOSurfaceID:(unsigned int)arg1 scaleFactor:(float)arg2 asynchronous:(bool)arg3 waitOnFence:(bool)arg4 preRender:(id /* block */)arg5 postRender:(id /* block */)arg6;
- (bool)_renderUpdateEnabled;
- (void)_reshape;
- (void)_searchForFocusRegionsInContext:(id)arg1;
- (void)_setUpdateQueue:(id)arg1;
- (bool)_shouldRenderForTime:(double)arg1;
- (void)_showAllStats;
- (bool)_showsCPUStats;
- (bool)_showsGPUStats;
- (int)_spriteRenderCount;
- (int)_spriteSubmitCount;
- (void)_update:(double)arg1;
- (bool)_usesAsyncUpdateQueue;
- (double)_viewScale;
- (struct CGPoint { double x1; double x2; })_viewTranslation;
- (void)_vsyncRenderForTime:(double)arg1 preRender:(id /* block */)arg2 postRender:(id /* block */)arg3;
- (bool)allowsTransparency;
- (double)alphaValue;
- (id)archiveToFile:(id)arg1;
- (id)captureToFile:(id)arg1;
- (void*)chooseViewRenderer;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromScene:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toScene:(id)arg2;
- (void)dealloc;
- (void)debugPrint;
- (id)delegate;
- (void)didMoveToWindow;
- (bool)disableDepthStencilBuffer;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (long long)frameInterval;
- (id)getRenderOptions;
- (void*)getRootNode;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })getViewTransform;
- (void)getViewport;
- (bool)hasValidViewFramebuffer;
- (bool)ignoresSiblingOrder;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 updateQueue:(id)arg2;
- (bool)isAsynchronous;
- (bool)isEqualToView:(id)arg1;
- (bool)isOpaque;
- (bool)isPaused;
- (void)layoutSubviews;
- (struct shared_ptr<jet_framebuffer> { struct jet_framebuffer {} *x1; struct __shared_weak_count {} *x2; })nextFramebuffer;
- (void)notifyWillRenderContent;
- (void)onInit;
- (id)options;
- (void)overrideMetalCommandQueue:(id)arg1;
- (double)physicsDebugStrokeWidth;
- (struct CGSize { double x1; double x2; })pixelSize;
- (float)preferredFrameRate;
- (long long)preferredFramesPerSecond;
- (void)presentScene:(id)arg1;
- (void)presentScene:(id)arg1 transition:(id)arg2;
- (void)remakeFramebuffer;
- (void)remakeFramebuffer:(double)arg1;
- (void)renderContent;
- (void)renderForTime:(double)arg1 shouldBlock:(bool)arg2;
- (void)renderToIOSurfaceID:(unsigned int)arg1 withScaleFactor:(double)arg2;
- (void)runOnce;
- (id)scene;
- (void)setAllowsTransparency:(bool)arg1;
- (void)setAsynchronous:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableDepthStencilBuffer:(bool)arg1;
- (void)setDynamicRenderBlock:(id /* block */)arg1;
- (void)setFrameInterval:(long long)arg1;
- (void)setIgnoresSiblingOrder:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPhysicsDebugStrokeWidth:(double)arg1;
- (void)setPreferredFrameRate:(float)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setShouldCullNonVisibleNodes:(bool)arg1;
- (void)setShowsDrawCount:(bool)arg1;
- (void)setShowsFPS:(bool)arg1;
- (void)setShowsFields:(bool)arg1;
- (void)setShowsNodeCount:(bool)arg1;
- (void)setShowsPhysics:(bool)arg1;
- (void)setShowsQuadCount:(bool)arg1;
- (void)setUpRenderCallback;
- (void)set_info:(id)arg1;
- (void)set_layerBackedRenderer:(void*)arg1;
- (void)set_renderUpdateEnabled:(bool)arg1;
- (void)set_showsCPUStats:(bool)arg1;
- (void)set_showsGPUStats:(bool)arg1;
- (void)set_usesAsyncUpdateQueue:(bool)arg1;
- (void)set_viewScale:(double)arg1;
- (void)set_viewTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)shouldCullNonVisibleNodes;
- (bool)showsDrawCount;
- (bool)showsFPS;
- (bool)showsFields;
- (bool)showsNodeCount;
- (bool)showsPhysics;
- (bool)showsQuadCount;
- (id)snapshot;
- (void)startRenderCallbacks;
- (void)stopRenderCallbacks;
- (id)textureFromNode:(id)arg1;
- (id)textureFromNode:(id)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)textureFromNode:(id)arg1 withOptions:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)willRenderContent;
- (void)writeContentsToPNG:(id)arg1;

@end
