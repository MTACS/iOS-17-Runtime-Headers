
@interface CKSyncEngineState : NSObject <NSSecureCoding> {
    id /* block */  _changeHandler;
    bool  _didPerformInitialUserRecordIDFetch;
    NSString * _existingDatabaseSubscriptionID;
    NSOrderedSet * _fakeRecordIDsToDeleteForSerializationTests;
    NSOrderedSet * _fakeRecordIDsToSaveForSerializationTests;
    NSOrderedSet * _fakeZoneIDsToDeleteForSerializationTests;
    NSOrderedSet * _fakeZoneIDsToSaveForSerializationTests;
    NSDictionary * _fakeZonesToSaveForSerializationTests;
    bool  _hasInFlightUntrackedChanges;
    bool  _hasPendingUntrackedChanges;
    NSMutableOrderedSet * _inFlightRecordChangesSet;
    unsigned long long  _internalChangeCount;
    NSDate * _lastFetchDatabaseChangesDate;
    CKRecordID * _lastKnownUserRecordID;
    NSString * _loggingID;
    NSMutableDictionary * _mServerChangeTokensByZoneID;
    CKRecordID * _mockNextKnownUserRecordID;
    bool  _needsToFetchDatabaseChanges;
    bool  _needsToSaveDatabaseSubscription;
    NSMutableOrderedSet * _pendingDatabaseChangesSet;
    NSMutableOrderedSet * _pendingRecordZoneChangesSet;
    NSObject<OS_dispatch_queue> * _queue;
    CKServerChangeToken * _serverChangeTokenForDatabase;
    bool  _useMockNextKnownUserRecordID;
    NSMutableOrderedSet * _zoneIDsNeedingToFetchChangesSet;
}

@property (nonatomic, readonly) unsigned long long changeCount;
@property (nonatomic, copy) id /* block */ changeHandler;
@property bool didPerformInitialUserRecordIDFetch;
@property (nonatomic, copy) NSString *existingDatabaseSubscriptionID;
@property (copy) NSOrderedSet *fakeRecordIDsToDeleteForSerializationTests;
@property (copy) NSOrderedSet *fakeRecordIDsToSaveForSerializationTests;
@property (copy) NSOrderedSet *fakeZoneIDsToDeleteForSerializationTests;
@property (copy) NSOrderedSet *fakeZoneIDsToSaveForSerializationTests;
@property (copy) NSDictionary *fakeZonesToSaveForSerializationTests;
@property bool hasInFlightUntrackedChanges;
@property bool hasPendingUntrackedChanges;
@property (nonatomic, readonly) NSArray *inFlightRecordChanges;
@property (copy) NSDate *lastFetchDatabaseChangesDate;
@property (copy) CKRecordID *lastKnownUserRecordID;
@property (copy) NSString *loggingID;
@property (nonatomic, readonly) NSMutableDictionary *mServerChangeTokensByZoneID;
@property (copy) CKRecordID *mockNextKnownUserRecordID;
@property bool needsToFetchDatabaseChanges;
@property bool needsToSaveDatabaseSubscription;
@property (copy) NSArray *pendingDatabaseChanges;
@property (copy) NSArray *pendingRecordZoneChanges;
@property (retain) CKServerChangeToken *serverChangeTokenForDatabase;
@property bool useMockNextKnownUserRecordID;
@property (readonly, copy) NSArray *zoneIDsWithUnfetchedServerChanges;

+ (id)emptyState;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)CKDescriptionPropertiesWithPublic:(bool)arg1 private:(bool)arg2 shouldExpand:(bool)arg3;
- (void)addPendingDatabaseChanges:(id)arg1;
- (void)addPendingRecordZoneChanges:(id)arg1;
- (unsigned long long)changeCount;
- (id /* block */)changeHandler;
- (bool)containsInFlightRecordZoneChange:(id)arg1;
- (bool)containsPendingRecordZoneChange:(id)arg1;
- (id)description;
- (bool)didPerformInitialUserRecordIDFetch;
- (void)encodeWithCoder:(id)arg1;
- (id)existingDatabaseSubscriptionID;
- (id)fakeRecordIDsToDeleteForSerializationTests;
- (id)fakeRecordIDsToSaveForSerializationTests;
- (id)fakeZoneIDsToDeleteForSerializationTests;
- (id)fakeZoneIDsToSaveForSerializationTests;
- (id)fakeZonesToSaveForSerializationTests;
- (void)getDataRepresentation:(id /* block */)arg1;
- (bool)hasInFlightUntrackedChanges;
- (bool)hasPendingUntrackedChanges;
- (id)inFlightRecordChanges;
- (id)init;
- (id)initInternal;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1 error:(id*)arg2;
- (id)initWithStateSerialization:(id)arg1 error:(id*)arg2;
- (id)lastFetchDatabaseChangesDate;
- (id)lastKnownUserRecordID;
- (id)loggingID;
- (id)mServerChangeTokensByZoneID;
- (void)markRecordZoneChanges:(id)arg1 inFlight:(bool)arg2;
- (id)mockNextKnownUserRecordID;
- (bool)needsToDeleteZoneID:(id)arg1;
- (bool)needsToFetchChangesForZoneID:(id)arg1;
- (bool)needsToFetchDatabaseChanges;
- (bool)needsToSaveDatabaseSubscription;
- (bool)needsToSaveZoneID:(id)arg1;
- (void)notifyChangeHandlerWithCoalescing:(bool)arg1 scheduleSync:(bool)arg2;
- (id)pendingDatabaseChanges;
- (id)pendingRecordZoneChanges;
- (id)redactedDescription;
- (void)removeInFlightRecordChanges:(id)arg1;
- (void)removePendingDatabaseChanges:(id)arg1;
- (void)removePendingRecordZoneChanges:(id)arg1;
- (void)reset;
- (id)serverChangeTokenForDatabase;
- (id)serverChangeTokenForZoneID:(id)arg1;
- (id)serverChangeTokensByZoneID;
- (void)setChangeHandler:(id /* block */)arg1;
- (void)setDidPerformInitialUserRecordIDFetch:(bool)arg1;
- (void)setExistingDatabaseSubscriptionID:(id)arg1;
- (void)setFakeRecordIDsToDeleteForSerializationTests:(id)arg1;
- (void)setFakeRecordIDsToSaveForSerializationTests:(id)arg1;
- (void)setFakeZoneIDsToDeleteForSerializationTests:(id)arg1;
- (void)setFakeZoneIDsToSaveForSerializationTests:(id)arg1;
- (void)setFakeZonesToSaveForSerializationTests:(id)arg1;
- (void)setHasInFlightUntrackedChanges:(bool)arg1;
- (void)setHasPendingUntrackedChanges:(bool)arg1;
- (void)setInitialValues;
- (void)setLastFetchDatabaseChangesDate:(id)arg1;
- (void)setLastKnownUserRecordID:(id)arg1;
- (void)setLoggingID:(id)arg1;
- (void)setMockNextKnownUserRecordID:(id)arg1;
- (void)setNeedsToFetchChanges:(bool)arg1 forRecordZoneID:(id)arg2;
- (void)setNeedsToFetchDatabaseChanges:(bool)arg1;
- (void)setNeedsToSaveDatabaseSubscription:(bool)arg1;
- (void)setPendingDatabaseChanges:(id)arg1;
- (void)setPendingRecordZoneChanges:(id)arg1;
- (void)setServerChangeToken:(id)arg1 forZoneID:(id)arg2;
- (void)setServerChangeTokenForDatabase:(id)arg1;
- (void)setUseMockNextKnownUserRecordID:(bool)arg1;
- (id)shortDescription;
- (bool)useMockNextKnownUserRecordID;
- (id)zoneIDsWithUnfetchedServerChanges;

@end
