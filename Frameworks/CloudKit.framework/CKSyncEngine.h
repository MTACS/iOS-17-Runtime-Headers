
@interface CKSyncEngine : NSObject {
    CKCoalescer * _accountChangeCoalescer;
    bool  _allowFetchAndModifyConcurrently;
    NSString * _apsMachServiceName;
    CKAssetDownloadStagingManager * _assetDownloadStagingManager;
    <CKSyncEngineAsyncDelegate> * _asyncDelegate;
    bool  _automaticSyncingEnabled;
    id  _boxedSyncEngine;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    bool  _continueModifyingPendingChangesAfterFailure;
    CKSyncEngineDataSourceAdapter * _dataSourceAdapter;
    CKDatabase * _database;
    NSString * _databaseSubscriptionIDOverride;
    NSDate * _earliestStartDateForSchedulerActivities;
    bool  _ignoringSystemConditions;
    <CKSyncEngineDelegateInternal> * _internalDelegate;
    NSDate * _lastForegroundTriggeredFetchDate;
    CKAccountInfo * _lastKnownAccountInfo;
    unsigned long long  _lastNotifiedStateChangeCount;
    NSString * _loggingID;
    unsigned long long  _maxRecordBytesPerBatch;
    unsigned long long  _maxRecordCountPerBatch;
    unsigned long long  _maxZoneCountPerBatch;
    bool  _needsToReloadAccount;
    CKNotificationListener * _notificationListener;
    NSOperationQueue * _operationQueue;
    long long  _priority;
    CKCoalescer * _pushSyncCoalescer;
    NSObject<OS_dispatch_queue> * _queue;
    CKCoalescer * _schedulerSubmitCoalescer;
    CKSyncEngineState * _state;
    NSDate * _stateTelemetrySubmissionDate;
    id /* block */  _updateStateBlock;
    bool  _useOpportunisticPushTopic;
    bool  _useUniqueActivityIdentifiers;
    bool  _waitingForHSA2;
    bool  _waitingForIdentityUpdate;
    NSObject<OS_xpc_object> * _xpcActivityCriteriaOverrides;
}

@property (nonatomic, retain) CKCoalescer *accountChangeCoalescer;
@property (nonatomic, readonly) bool allowFetchAndModifyConcurrently;
@property (nonatomic, retain) NSString *apsMachServiceName;
@property (retain) CKAssetDownloadStagingManager *assetDownloadStagingManager;
@property (retain) <CKSyncEngineAsyncDelegate> *asyncDelegate;
@property (getter=isAutomaticSyncingEnabled) bool automaticSyncingEnabled;
@property id boxedSyncEngine;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, readonly) bool continueModifyingPendingChangesAfterFailure;
@property (nonatomic, readonly) <CKSyncEngineDataSource> *dataSource;
@property (retain) CKSyncEngineDataSourceAdapter *dataSourceAdapter;
@property (readonly) CKDatabase *database;
@property (nonatomic, readonly) NSString *databaseSubscriptionIDOverride;
@property (nonatomic, retain) NSDate *earliestStartDateForSchedulerActivities;
@property (nonatomic, readonly) bool hasPendingModifications;
@property (nonatomic) <CKSyncEngineDelegateInternal> *internalDelegate;
@property (nonatomic, retain) NSDate *lastForegroundTriggeredFetchDate;
@property (nonatomic, retain) CKAccountInfo *lastKnownAccountInfo;
@property (copy) NSString *loggingID;
@property (nonatomic, readonly) unsigned long long maxRecordCountPerBatch;
@property unsigned long long maxZoneCountPerBatch;
@property bool needsToReloadAccount;
@property (retain) CKNotificationListener *notificationListener;
@property (nonatomic, readonly) NSOperationQueue *operationQueue;
@property (nonatomic, readonly) long long priority;
@property (nonatomic, retain) CKCoalescer *pushSyncCoalescer;
@property (nonatomic, readonly) NSArray *recordIDsToDelete;
@property (nonatomic, readonly) NSArray *recordIDsToSave;
@property (nonatomic, retain) CKCoalescer *schedulerSubmitCoalescer;
@property (nonatomic, copy) CKServerChangeToken *serverChangeTokenForDatabase;
@property (retain) CKSyncEngineState *state;
@property (copy) NSDate *stateTelemetrySubmissionDate;
@property bool useOpportunisticPushTopic;
@property (getter=isWaitingForHSA2, nonatomic) bool waitingForHSA2;
@property (getter=isWaitingForIdentityUpdate, nonatomic) bool waitingForIdentityUpdate;
@property (nonatomic, readonly) NSObject<OS_xpc_object> *xpcActivityCriteriaOverrides;

+ (bool)_isFetchChangesErrorAdopterVisible:(id)arg1;
+ (id)_oldAdopterVisibleFetchChangesErrorForZoneID:(id)arg1 error:(id)arg2;
+ (void)addKnownEngine:(id)arg1;
+ (id)defaultManualOperationGroupNameWithType:(id)arg1 scope:(id)arg2;
+ (id)defaultOperationGroup;
+ (id)earliestStartDateAfterError:(id)arg1;
+ (bool)fastErrorRetry;
+ (void)populateLoggingIDsForSyncEngines:(id)arg1;
+ (void)setFastErrorRetry:(bool)arg1;
+ (bool)shouldDeferAfterError:(id)arg1;
+ (id)syncActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(bool)arg2;
+ (void)unregisterActivitiesWithDatabase:(id)arg1 ignoringSystemConditions:(bool)arg2;

- (void).cxx_destruct;
- (void)_fetchChangesWithContext:(id)arg1 osActivity:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)_queue_lastSyncWasLongAgo;
- (bool)_queue_shouldFetchChangesWithOptions:(id)arg1;
- (bool)_queue_shouldScheduleSyncActivity;
- (void)_sendChangesWithContext:(id)arg1 osActivity:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)accountChangeCoalescer;
- (void)accountChangedNotification:(id)arg1;
- (void)addRecordIDsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (void)addRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (bool)allowFetchAndModifyConcurrently;
- (bool)allowFetchAndModifyConcurrentlyForContainerID:(id)arg1;
- (void)applicationWillEnterForeground;
- (id)apsMachServiceName;
- (id)assetDownloadStagingManager;
- (id)asyncDelegate;
- (id)boxedSyncEngine;
- (id)callbackQueue;
- (void)cancelOperationsWithCompletionHandler:(id /* block */)arg1;
- (void)cancelPendingOperationsWithCompletionHandler:(id /* block */)arg1;
- (void)coalescePushSyncIfNecessary;
- (void)coalescedScheduleSync;
- (id)configurationTelemetryPayload;
- (bool)continueModifyingPendingChangesAfterFailure;
- (id)dataSource;
- (id)dataSourceAdapter;
- (id)database;
- (id)databaseSubscription;
- (id)databaseSubscriptionIDOverride;
- (id)databaseSubscriptionWithID:(id)arg1;
- (void)dealloc;
- (id)defaultDatabaseSubscription;
- (id)defaultDatabaseSubscriptionID;
- (id)description;
- (void)didReceiveDatabaseNotification:(id)arg1;
- (id)earliestStartDateForSchedulerActivities;
- (id)existingOperationToFetchChangesWithOptions:(id)arg1 includingExecutingOperations:(bool)arg2;
- (id)existingOperationToModifyPendingChangesWithOptions:(id)arg1 includingExecutingOperations:(bool)arg2;
- (void)fetchChangesForZoneIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchChangesWithCompletionHandler:(id /* block */)arg1;
- (void)fetchChangesWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fixConfigurationInOperationGroup:(id)arg1;
- (void)handleAccountChangeNotification;
- (bool)hasPendingModifications;
- (bool)hasSchedulerActivityWithIdentifier:(id)arg1;
- (void)identityUpdateNotification:(id)arg1;
- (id)init;
- (id)initWithConfiguration:(id)arg1;
- (id)initWithDeprecatedConfiguration:(id)arg1;
- (id)internalDelegate;
- (bool)isAccountReadyToSync:(id)arg1 unreadyDescription:(id*)arg2;
- (bool)isAutomaticSyncingEnabled;
- (bool)isReadyToSubmitSchedulerActivity;
- (bool)isWaitingForHSA2;
- (bool)isWaitingForIdentityUpdate;
- (id)lastForegroundTriggeredFetchDate;
- (id)lastKnownAccountInfo;
- (id)loggingID;
- (unsigned long long)maxRecordCountPerBatch;
- (unsigned long long)maxZoneCountPerBatch;
- (void)modifyPendingChangesInZoneIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)modifyPendingChangesWithCompletionHandler:(id /* block */)arg1;
- (bool)needsToReloadAccount;
- (void)networkAttributionBundleIDForZoneIDs:(id)arg1 recordIDs:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)nextBatchOfRecordsToModifyForContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)nonCoalescedScheduleSync;
- (id)notificationListener;
- (id)operationQueue;
- (void)performAsyncDelegateCallbackWithDescription:(id)arg1 block:(id /* block */)arg2;
- (void)performCoalescedPushSync;
- (void)performSyncWithOperationGroup:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)postEvent:(id)arg1;
- (void)postWillEnqueueOperation:(id)arg1;
- (long long)priority;
- (id)pushSyncCoalescer;
- (id)recordIDsToDelete;
- (id)recordIDsToSave;
- (id)redactedContainerIdentifierIfNecessaryFromContainerID:(id)arg1;
- (id)redactedDescription;
- (void)registerForApplicationLifecycleEvents;
- (void)relatedApplicationBundleIdentifiersForPendingWorkWithCompletionHandler:(id /* block */)arg1;
- (void)relatedApplicationBundleIdentifiersForZoneIDs:(id)arg1 recordIDs:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)removeRecordIDsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (void)removeRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:(id /* block */)arg1;
- (void)scheduleSync;
- (void)scheduleSyncIfNecessaryAfterError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)scheduleSyncWithEarliestStartDate:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)schedulerSubmitCoalescer;
- (void)sendChangesWithCompletionHandler:(id /* block */)arg1;
- (void)sendChangesWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)sendConfigurationTelemetry;
- (void)sendStateTelemetryIfNecessaryWithByteCount:(unsigned long long)arg1;
- (id)serverChangeTokenForDatabase;
- (id)serverChangeTokenForRecordZoneID:(id)arg1;
- (void)setAccountChangeCoalescer:(id)arg1;
- (void)setApsMachServiceName:(id)arg1;
- (void)setAssetDownloadStagingManager:(id)arg1;
- (void)setAsyncDelegate:(id)arg1;
- (void)setAutomaticSyncingEnabled:(bool)arg1;
- (void)setBoxedSyncEngine:(id)arg1;
- (void)setDataSourceAdapter:(id)arg1;
- (void)setEarliestStartDateForSchedulerActivities:(id)arg1;
- (void)setHasPendingModifications;
- (void)setInternalDelegate:(id)arg1;
- (void)setLastForegroundTriggeredFetchDate:(id)arg1;
- (void)setLastKnownAccountInfo:(id)arg1;
- (void)setLoggingID:(id)arg1;
- (void)setMaxZoneCountPerBatch:(unsigned long long)arg1;
- (void)setNeedsToDeleteRecordZones:(id)arg1 needsToDelete:(bool)arg2;
- (void)setNeedsToDeleteRecords:(id)arg1 needsToDelete:(bool)arg2;
- (void)setNeedsToFetchChanges;
- (void)setNeedsToReloadAccount:(bool)arg1;
- (void)setNeedsToSaveRecordZones:(id)arg1 needsToSave:(bool)arg2;
- (void)setNeedsToSaveRecords:(id)arg1 needsToSave:(bool)arg2;
- (void)setNotificationListener:(id)arg1;
- (void)setPushSyncCoalescer:(id)arg1;
- (void)setSchedulerSubmitCoalescer:(id)arg1;
- (void)setServerChangeToken:(id)arg1 forRecordZoneID:(id)arg2;
- (void)setServerChangeTokenForDatabase:(id)arg1;
- (void)setState:(id)arg1;
- (void)setStateTelemetrySubmissionDate:(id)arg1;
- (void)setUseOpportunisticPushTopic:(bool)arg1;
- (void)setWaitingForHSA2:(bool)arg1;
- (void)setWaitingForIdentityUpdate:(bool)arg1;
- (void)shareAcceptedNotification:(id)arg1;
- (bool)shouldFetchChangesWithOptions:(id)arg1;
- (bool)shouldScheduleSyncActivity;
- (bool)shouldSendTelemetry;
- (id)state;
- (id)stateTelemetryPayloadWithByteCount:(long long)arg1;
- (id)stateTelemetrySubmissionDate;
- (void)submitActivityIfNecessaryWithIdentifier:(id)arg1 earliestStartDate:(id)arg2 priority:(long long)arg3 userRequestedBackupTask:(bool)arg4 relatedApplicationBundleIdentifiers:(id)arg5 completionHandler:(id /* block */)arg6;
- (id)syncActivityIdentifier;
- (void)unregisterActivities;
- (void)updateAccountInfoWithCompletionHandler:(id /* block */)arg1;
- (void)updateStateAndNotifyDatasourceIfNecessaryForUserRecordID:(id)arg1;
- (bool)useOpportunisticPushTopic;
- (id)userRequestedBackupActivityIdentifier;
- (id)xpcActivityCriteriaOverrides;

@end
