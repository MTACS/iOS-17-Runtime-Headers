
@interface _UNNotificationContentExtensionHostContainerViewController : UIViewController <_UNNotificationContentExtensionHostContextDelegate> {
    NSArray * _actions;
    bool  _allowManualDismiss;
    UIView * _blockingView;
    double  _contentSizeRatio;
    bool  _defaultContentHidden;
    bool  _defaultTitleOverridden;
    <_UNNotificationContentExtensionHostContainerViewControllerDelegate> * _delegate;
    NSExtension * _extension;
    _UNNotificationContentExtensionHostContext * _extensionHostContext;
    _UIRemoteViewController * _extensionViewController;
    _UNMediaPlayPauseButton * _mediaPlayPauseButton;
    NSString * _notificationRequestIdentifier;
    NSMutableArray * _queuedNotifications;
    bool  _screenCaptureProhibited;
    bool  _shouldPlayMediaAfterPresented;
    bool  _userInteractionEnabled;
}

@property (nonatomic, copy) NSArray *actions;
@property (nonatomic) bool allowManualDismiss;
@property (nonatomic, retain) UIView *blockingView;
@property (nonatomic) double contentSizeRatio;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDefaultContentHidden, nonatomic) bool defaultContentHidden;
@property (getter=isDefaultTitleOverridden, nonatomic) bool defaultTitleOverridden;
@property (nonatomic) <_UNNotificationContentExtensionHostContainerViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSExtension *extension;
@property (nonatomic, retain) _UNNotificationContentExtensionHostContext *extensionHostContext;
@property (nonatomic, readonly, copy) NSString *extensionIdentifier;
@property (nonatomic, retain) _UIRemoteViewController *extensionViewController;
@property (nonatomic, readonly) bool extensionWantsToReceiveActionResponses;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) _UNMediaPlayPauseButton *mediaPlayPauseButton;
@property (nonatomic, copy) NSString *notificationRequestIdentifier;
@property (nonatomic, retain) NSMutableArray *queuedNotifications;
@property (nonatomic) bool screenCaptureProhibited;
@property (nonatomic) bool shouldPlayMediaAfterPresented;
@property (readonly) Class superclass;
@property (getter=isUserInteractionEnabled, nonatomic) bool userInteractionEnabled;

+ (bool)isMediaSafetyNetEnabled;

- (void).cxx_destruct;
- (void)_addExtensionViewFromViewController:(id)arg1;
- (bool)_canShowWhileLocked;
- (double)_contentHeightForWidth:(double)arg1;
- (void)_flushQueuedRequests;
- (void)_loadExtensionViewController;
- (void)_mediaPlayPauseButtonTapped:(id)arg1;
- (void)_pauseMediaIfPresented;
- (void)_playMediaIfPresented;
- (void)_setupExtensionViewController:(id)arg1;
- (void)_setupMediaButton;
- (void)_teardownExtension;
- (id)actions;
- (bool)allowManualDismiss;
- (bool)becomeFirstResponder;
- (id)blockingView;
- (bool)canBecomeFirstResponder;
- (bool)canResignFirstResponder;
- (id)cancelTouchesForCurrentEventInExtension;
- (double)contentSizeRatio;
- (void)dealloc;
- (id)delegate;
- (void)didReceiveNotification:(id)arg1;
- (void)didReceiveNotificationResponse:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)extension;
- (id)extensionHostContext;
- (id)extensionIdentifier;
- (id)extensionViewController;
- (bool)extensionWantsToReceiveActionResponses;
- (id)initWithExtension:(id)arg1 notification:(id)arg2 actions:(id)arg3;
- (bool)isDefaultContentHidden;
- (bool)isDefaultTitleOverridden;
- (bool)isUserInteractionEnabled;
- (id)mediaPlayPauseButton;
- (void)notificationExtension:(id)arg1 didUpdateNotificationActions:(id)arg2;
- (void)notificationExtension:(id)arg1 didUpdateTitle:(id)arg2;
- (void)notificationExtension:(id)arg1 extensionDidCompleteResponse:(id)arg2 withOption:(unsigned long long)arg3;
- (void)notificationExtensionDidUpdatePlayPauseMediaButton:(id)arg1;
- (void)notificationExtensionMediaPlayingDidPause:(id)arg1;
- (void)notificationExtensionMediaPlayingDidStart:(id)arg1;
- (void)notificationExtensionRequestsDefaultAction:(id)arg1;
- (void)notificationExtensionRequestsDismiss:(id)arg1;
- (id)notificationRequestIdentifier;
- (void)pauseMedia;
- (void)playMedia;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id)arg1;
- (void)preserveInputViews;
- (id)queuedNotifications;
- (bool)resignFirstResponder;
- (bool)restoreInputViews;
- (bool)screenCaptureProhibited;
- (void)setActions:(id)arg1;
- (void)setAllowManualDismiss:(bool)arg1;
- (void)setBlockingView:(id)arg1;
- (void)setContentSizeRatio:(double)arg1;
- (void)setDefaultContentHidden:(bool)arg1;
- (void)setDefaultTitleOverridden:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExtension:(id)arg1;
- (void)setExtensionHostContext:(id)arg1;
- (void)setExtensionViewController:(id)arg1;
- (void)setMediaPlayPauseButton:(id)arg1;
- (void)setNotificationRequestIdentifier:(id)arg1;
- (void)setQueuedNotifications:(id)arg1;
- (void)setScreenCaptureProhibited:(bool)arg1;
- (void)setShouldPlayMediaAfterPresented:(bool)arg1;
- (void)setTitle:(id)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (bool)shouldPlayMediaAfterPresented;
- (struct CGSize { double x1; double x2; })sizeForChildContentContainer:(id)arg1 withParentContainerSize:(struct CGSize { double x1; double x2; })arg2;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end
