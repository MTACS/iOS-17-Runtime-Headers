
@interface VNRequest : NSObject <NSCopying, VNAsyncStatusProviding, VNClassCodeProviding, VNCoreMLTransformerDetectionprintProviding, VNCoreMLTransformerSceneprintsProviding, VNObservationsRecipient, VNSequencedRequestSupporting, VNWarningRecorder> {
    VNAsyncStatus * _asyncStatus;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _asyncStatusLock;
    NSObject<OS_dispatch_queue> * _cancellationQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cancellationResourcesLock;
    NSObject<OS_dispatch_semaphore> * _cancellationSemaphore;
    bool  _cancellationTriggered;
    VNCanceller * _canceller;
    id /* block */  _completionHandler;
    VNRequestConfiguration * _configuration;
    unsigned long long  _executionNanoseconds;
    NSArray * _results;
    unsigned long long  _revision;
    unsigned long long  _serialNumber;
    VNWarningRecorder * _warningRecorder;
}

@property (readonly, copy) VNAsyncStatus *asyncStatus;
@property (retain) NSObject<OS_dispatch_semaphore> *cancellationSemaphore;
@property (readonly) bool cancellationTriggered;
@property (nonatomic, readonly, copy) id /* block */ completionHandler;
@property (nonatomic, readonly, copy) NSDictionary *computeStageDeviceAssignments;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long detectionLevel;
@property (readonly) unsigned long long executionNanoseconds;
@property (readonly) double executionTimeInternal;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long ioSurfaceMemoryPoolId;
@property (nonatomic) unsigned long long maximumProcessingDimensionOnTheLongSide;
@property (nonatomic) unsigned long long metalContextPriority;
@property (nonatomic) unsigned long long modelFileBackingStore;
@property (readonly) VNRequestSpecifier *originatingRequestSpecifier;
@property (nonatomic) bool preferBackgroundProcessing;
@property (nonatomic, retain) <MTLDevice> *preferredMetalContext;
@property (nonatomic, copy) VNProcessingDevice *processingDevice;
@property (nonatomic, readonly, copy) VNControlledCapacityTasksQueue *requestTasksQueue;
@property (nonatomic, readonly, copy) NSDictionary *resolvedComputeStageDeviceAssignments;
@property (nonatomic, readonly, copy) NSArray *results;
@property (nonatomic) unsigned long long revision;
@property (readonly) unsigned long long serialNumber;
@property (readonly) VNRequestSpecifier *specifier;
@property (readonly) Class superclass;
@property (nonatomic) bool usesCPUOnly;
@property (nonatomic, readonly) NSValue *vcp_idealDimension;

// Image: /System/Library/Frameworks/Vision.framework/Vision

+ (unsigned int)VNClassCode;
+ (unsigned long long)_defaultRevisionForBuildVersion:(int)arg1;
+ (id)_runtimeAvailableRevisionsOfRevisions:(id)arg1;
+ (id)allSupportedRevisions;
+ (unsigned long long)applicableRevisionForDependentRequestOfClass:(Class)arg1 beingPerformedByRevision:(unsigned long long)arg2;
+ (Class)configurationClass;
+ (id)createVNEntityIdentificationModelEntryPrintForRevision:(unsigned long long)arg1 fromDescriptorData:(const void*)arg2 length:(unsigned long long)arg3 elementCount:(unsigned long long)arg4 error:(id*)arg5;
+ (unsigned long long)currentRevision;
+ (unsigned long long)defaultRevision;
+ (const struct { unsigned long long x1; Class x2; unsigned long long x3; }*)dependentRequestCompatibility;
+ (const struct { unsigned long long x1; Class x2; unsigned long long x3; }*)dependentRequestMappingTable;
+ (id)descriptionForPrivateRevision:(unsigned long long)arg1;
+ (unsigned long long)firstSupportedRevisionInOrderedRevisionList:(unsigned long long)arg1;
+ (Class)frameworkClass;
+ (bool)getDoubleValue:(double*)arg1 forKey:(id)arg2 inOptions:(id)arg3 error:(id*)arg4;
+ (bool)getDoubleValue:(double*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withDefaultValue:(double)arg4 error:(id*)arg5;
+ (bool)getFloatValue:(float*)arg1 forKey:(id)arg2 inOptions:(id)arg3 error:(id*)arg4;
+ (bool)getFloatValue:(float*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withDefaultValue:(float)arg4 error:(id*)arg5;
+ (bool)getOptionalArray:(id*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withElementsOfClass:(Class)arg4 error:(id*)arg5;
+ (bool)getOptionalObject:(id*)arg1 ofClass:(Class)arg2 forKey:(id)arg3 inOptions:(id)arg4 error:(id*)arg5;
+ (bool)getRequiredObject:(id*)arg1 ofClass:(Class)arg2 forKey:(id)arg3 inOptions:(id)arg4 error:(id*)arg5;
+ (void)initialize;
+ (id)newConfigurationInstance;
+ (id)privateRevisionsSet;
+ (id)publicRevisionsSet;
+ (bool)recordSpecifierModelEquivalenciesInRegistrar:(id)arg1 error:(id*)arg2;
+ (unsigned long long)resolvedRevisionForRevision:(unsigned long long)arg1;
+ (bool)revision:(unsigned long long)arg1 mayAcceptResultsProducedByRevision:(unsigned long long)arg2;
+ (const struct { unsigned long long x1; struct { int x_2_1_1; int x_2_1_2; } x2; struct { int x_3_1_1; int x_3_1_2; } x3; struct { int x_4_1_1; int x_4_1_2; } x4; }*)revisionAvailability;
+ (bool)setsTimeRangeOnResults;
+ (id)supportedPrivateRevisions;
+ (id)supportedRevisions;
+ (bool)supportedRevisionsAreFilteredBasedOnAvailableComputeDevices;
+ (bool)supportsAnyRevision:(unsigned long long)arg1;
+ (bool)supportsPrivateRevision:(unsigned long long)arg1;
+ (bool)supportsRevision:(unsigned long long)arg1;
+ (bool)warmUpSession:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (id)VNCoreMLTransformerDetectionprintAndReturnError:(id*)arg1;
- (id)VNCoreMLTransformerSceneprintsAndReturnError:(id*)arg1;
- (id)VNImageProcessingSessionPrintAndReturnError:(id*)arg1;
- (id)VNImageProcessingSessionPrintKeyPath;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })VNImageProcessingSessionRegionOfInterest;
- (id)_alignFacesInContext:(id)arg1 faces:(id)arg2 qosClass:(unsigned int)arg3 options:(id)arg4 error:(id*)arg5;
- (void)_setResolvedRevision:(unsigned long long)arg1;
- (bool)allowsCachingOfResults;
- (id)applicableDetectorAndOptions:(id*)arg1 forRevision:(unsigned long long)arg2 loadedInSession:(id)arg3 error:(id*)arg4;
- (Class)applicableDetectorClassAndOptions:(id*)arg1 forRevision:(unsigned long long)arg2 error:(id*)arg3;
- (id)applicableDetectorTypeForRevision:(unsigned long long)arg1 error:(id*)arg2;
- (unsigned long long)applicableRevisionForDependentRequest:(id)arg1;
- (void)applyCompatibleComputeStageDeviceAssignmentsOfRequest:(id)arg1;
- (void)applyConfigurationOfRequest:(id)arg1;
- (id)asyncStatus;
- (void)cancel;
- (id)cancellationSemaphore;
- (bool)cancellationTriggered;
- (bool)cancellationTriggeredAndReturnError:(id*)arg1;
- (id)cancellerAndReturnError:(id*)arg1;
- (void)categorizeFaceObservations:(id)arg1 shouldRunDetectorBlock:(id /* block */)arg2 facesThatNeedNoProcessing:(id)arg3 facesThatNeedProcessing:(id)arg4 facesThatNeed2DLandmarks:(id)arg5;
- (id /* block */)completionHandler;
- (id)computeDeviceForComputeStage:(id)arg1;
- (id)computeStageDeviceAssignments;
- (id)configuration;
- (void)copyStateOfRequest:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)dependencyProcessingOrdinality;
- (id)description;
- (id)detectFaceLandmarksInContext:(id)arg1 faces:(id)arg2 error:(id*)arg3;
- (id)detectFacesInContext:(id)arg1 error:(id*)arg2;
- (unsigned long long)detectionLevel;
- (id /* block */)detectorProgressHandler;
- (unsigned long long)executionNanoseconds;
- (double)executionTimeInternal;
- (Class)frameworkClass;
- (bool)hasCancellationHook;
- (id)init;
- (id)initWithCompletionHandler:(id /* block */)arg1;
- (bool)internalCancelInContext:(id)arg1 error:(id*)arg2;
- (bool)internalPerformRevision:(unsigned long long)arg1 inContext:(id)arg2 error:(id*)arg3;
- (unsigned long long)ioSurfaceMemoryPoolId;
- (unsigned long long)maximumProcessingDimensionOnTheLongSide;
- (unsigned long long)metalContextPriority;
- (unsigned long long)modelFileBackingStore;
- (id)newDefaultDetectorOptionsForRequestRevision:(unsigned long long)arg1 session:(id)arg2;
- (id)newDefaultDetectorOptionsForSession:(id)arg1;
- (id)newDuplicateInstance;
- (id)originatingRequestSpecifier;
- (bool)performInContext:(id)arg1 error:(id*)arg2;
- (void)performInContextAsync:(id)arg1 asyncDispatchQueue:(id)arg2 asyncDispatchGroup:(id)arg3;
- (bool)preferBackgroundProcessing;
- (id)preferredMetalContext;
- (id)processFaceObservations:(id)arg1 revision:(unsigned long long)arg2 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 detectorType:(id)arg4 detectorOptions:(id)arg5 shouldAlignFaceBBox:(id /* block */)arg6 shouldRunDetectorBlock:(id /* block */)arg7 context:(id)arg8 error:(id*)arg9;
- (id)processingDevice;
- (void)receiveObservations:(id)arg1;
- (void)recordWarning:(id)arg1 value:(id)arg2;
- (id)requestTasksQueue;
- (void)resetAsyncStatus;
- (id)resolvedComputeStageDeviceAssignments;
- (unsigned long long)resolvedRevision;
- (void)resolvedRevisionDidChangeFromRevision:(unsigned long long)arg1;
- (id)results;
- (bool)resultsAreAssignedWithOriginatingRequestSpecifier;
- (unsigned long long)revision;
- (id)sequencedRequestPreviousObservationsKey;
- (unsigned long long)serialNumber;
- (void)setAsyncStatus:(bool)arg1 error:(id)arg2;
- (void)setCancellationSemaphore:(id)arg1;
- (void)setComputeDevice:(id)arg1 forComputeStage:(id)arg2;
- (void)setDetectionLevel:(unsigned long long)arg1;
- (void)setIoSurfaceMemoryPoolId:(unsigned long long)arg1;
- (void)setMaximumProcessingDimensionOnTheLongSide:(unsigned long long)arg1;
- (void)setMetalContextPriority:(unsigned long long)arg1;
- (void)setModelFileBackingStore:(unsigned long long)arg1;
- (void)setPreferBackgroundProcessing:(bool)arg1;
- (void)setPreferredMetalContext:(id)arg1;
- (void)setProcessedResults:(id)arg1;
- (void)setProcessingDevice:(id)arg1;
- (void)setResults:(id)arg1;
- (void)setResults:(id)arg1 assignedWithOriginatingSpecifier:(bool)arg2;
- (void)setRevision:(unsigned long long)arg1;
- (bool)setRevision:(unsigned long long)arg1 error:(id*)arg2;
- (void)setUsesCPUOnly:(bool)arg1;
- (id)specifier;
- (id)supportedComputeStageDevicesAndReturnError:(id*)arg1;
- (bool)usesCPUOnly;
- (id)utilizedResourcesWithError:(id*)arg1;
- (bool)validateConfigurationAndReturnError:(id*)arg1;
- (bool)validateImageBuffer:(id)arg1 ofNonZeroWidth:(unsigned long long*)arg2 andHeight:(unsigned long long*)arg3 error:(id*)arg4;
- (id)valueForWarning:(id)arg1;
- (bool)wantsSequencedRequestObservationsRecording;
- (bool)warmUpApplicableDetectorInSession:(id)arg1 error:(id*)arg2;
- (bool)warmUpSession:(id)arg1 error:(id*)arg2;
- (id)warnings;
- (bool)willAcceptCachedResultsFromRequestWithConfiguration:(id)arg1;

// Image: /System/Library/PrivateFrameworks/MediaAnalysis.framework/MediaAnalysis

+ (bool)mad_includeEntityNet;

- (id)vcp_idealDimension;

@end
