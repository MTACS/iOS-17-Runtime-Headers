
@interface VNFaceObservation : VNDetectedObjectObservation <VNEntityIdentificationModelObservation> {
    struct _Geometry2D_rect2D_ { 
        struct _Geometry2D_point2D_ { 
            float x; 
            float y; 
        } origin; 
        struct _Geometry2D_size2D_ { 
            float height; 
            float width; 
        } size; 
    }  _alignedBoundingBox;
    NSData * _alignedMeanShape;
    float  _alignedRotationAngle;
    float  _blinkScore;
    bool  _boundingBoxAligned;
    VNFaceLandmarks2D * _cachedLandmarks;
    VNFaceLandmarks3D * _cachedLandmarks3d;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cachedLandmarks3dLock;
    VNFaceLandmarks2D * _cachedLandmarks65;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cachedLandmarks65Lock;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cachedLandmarksLock;
    NSDictionary * _expressionsAndScores;
    VNFaceAttributes * _faceAttributes;
    NSNumber * _faceCaptureQuality;
    VNRequestSpecifier * _faceCaptureQualityOriginatingRequestSpecifier;
    unsigned long long  _faceId;
    float  _faceIdConfidence;
    float  _faceJunkinessIndex;
    float  _faceOrientationIndex;
    VNFaceRegionMap * _faceRegionMap;
    VNFaceScreenGaze * _faceScreenGaze;
    VNFaceSegments * _faceSegments;
    VNFaceTorsoprint * _faceTorsoprint;
    VNFaceprint * _faceprint;
    VNFaceGaze * _gaze;
    bool  _isBlinking;
    NSData * _landmarkPoints;
    NSData * _landmarkPoints3d;
    NSData * _landmarkPoints65;
    NSArray * _landmarkPrecisionEstimatesPerPoint;
    float  _landmarkScore;
    VNFaceLandmarks2D * _landmarks;
    VNRequestSpecifier * _landmarks3DOriginatingRequestSpecifier;
    unsigned long long  _landmarksConstellation;
    VNRequestSpecifier * _landmarksOriginatingRequestSpecifier;
    VNFaceLegacyFaceCore * _legacyFaceCore;
    NSNumber * _pitch;
    NSData * _poseData;
    VNRequestSpecifier * _poseOriginatingRequestSpecifier;
    NSNumber * _roll;
    VNTorsoprint * _torsoprint;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unalignedBoundingBox;
    NSNumber * _yaw;
}

@property (nonatomic) struct _Geometry2D_rect2D_ { struct _Geometry2D_point2D_ { float x_1_1_1; float x_1_1_2; } x1; struct _Geometry2D_size2D_ { float x_2_1_1; float x_2_1_2; } x2; } alignedBoundingBox;
@property (nonatomic, retain) NSData *alignedMeanShape;
@property (nonatomic) float alignedRotationAngle;
@property (readonly) float blinkScore;
@property (getter=isBoundingBoxAligned, nonatomic, readonly) bool boundingBoxAligned;
@property (nonatomic, readonly, copy) NSDictionary *expressionsAndConfidence;
@property (nonatomic, readonly) VNFaceAttributes *faceAttributes;
@property (nonatomic, readonly) NSNumber *faceCaptureQuality;
@property (nonatomic, readonly) VNRequestSpecifier *faceCaptureQualityOriginatingRequestSpecifier;
@property (nonatomic) unsigned long long faceId;
@property (nonatomic) float faceIdConfidence;
@property (getter=faceJunkinessIndex, nonatomic, readonly) float faceJunkinessIndex;
@property (getter=faceOrientationIndex, nonatomic, readonly) float faceOrientationIndex;
@property (nonatomic, readonly) VNFaceRegionMap *faceRegionMap;
@property (nonatomic, readonly) VNFaceScreenGaze *faceScreenGaze;
@property (nonatomic, readonly) VNFaceSegments *faceSegments;
@property (nonatomic, readonly) VNFaceGaze *gaze;
@property (nonatomic, readonly) NSData *landmarkPoints;
@property (nonatomic, readonly) NSData *landmarkPoints3d;
@property (nonatomic, readonly) NSData *landmarkPoints65;
@property (nonatomic, retain) NSArray *landmarkPrecisionEstimatesPerPoint;
@property (nonatomic, retain) VNFaceLandmarks2D *landmarks;
@property (nonatomic, readonly) VNRequestSpecifier *landmarks3DOriginatingRequestSpecifier;
@property (nonatomic, readonly) VNFaceLandmarks3D *landmarks3d;
@property (nonatomic, readonly) VNFaceLandmarks2D *landmarks65;
@property (nonatomic) unsigned long long landmarksConstellation;
@property (nonatomic, readonly) VNRequestSpecifier *landmarksOriginatingRequestSpecifier;
@property (nonatomic, readonly) VNFaceLegacyFaceCore *legacyFaceCore;
@property (nonatomic, readonly) float nameConfidence;
@property (nonatomic, retain) NSNumber *pitch;
@property (nonatomic, readonly) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } pose;
@property (nonatomic, readonly) NSData *poseData;
@property (nonatomic, readonly) VNRequestSpecifier *poseOriginatingRequestSpecifier;
@property (nonatomic, readonly) struct { } poseQuaternion;
@property (nonatomic, retain) NSNumber *roll;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unalignedBoundingBox;
@property (nonatomic, retain) NSNumber *yaw;

+ (bool)_exifOrientationFromFaceRollAngle:(float)arg1 exifOrientation:(int*)arg2 error:(id*)arg3;
+ (bool)computeYawPitchRollFromPoseMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 outputYaw:(float*)arg2 outputPitch:(float*)arg3 outputRoll:(float*)arg4;
+ (id)defaultOriginatingRequestClassNameForRequestRevision:(unsigned long long)arg1;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 alignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 roll:(id)arg4 yaw:(id)arg5;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 alignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 roll:(id)arg4 yaw:(id)arg5 pitch:(id)arg6;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andAlignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 faceprint:(id)arg3;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 roll:(id)arg3 yaw:(id)arg4;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 roll:(id)arg3 yaw:(id)arg4 pitch:(id)arg5;
+ (id)faceObservationWithRequestRevision:(unsigned long long)arg1 unalignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 alignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (id)observationWithRequestRevision:(unsigned long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)VNEntityIdentificationModelPrintWithOriginatingRequestSpecifier:(id)arg1 error:(id*)arg2;
- (id)VNPersonsModelFaceprintWithRequestRevision:(unsigned long long)arg1 error:(id*)arg2;
- (void)_addPointsOfNamedRegion:(id)arg1 inLandmarks:(id)arg2 toPath:(struct CGPath { }*)arg3 applyingAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4;
- (void)_initLocks;
- (struct _Geometry2D_rect2D_ { struct _Geometry2D_point2D_ { float x_1_1_1; float x_1_1_2; } x1; struct _Geometry2D_size2D_ { float x_2_1_1; float x_2_1_2; } x2; })alignedBoundingBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignedBoundingBoxAsCGRect;
- (id)alignedMeanShape;
- (float)alignedRotationAngle;
- (float)blinkScore;
- (id)debugQuickLookObject;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)expressionsAndConfidence;
- (id)expressionsAndDetections;
- (id)expressionsAndScores;
- (id)faceAttributes;
- (id)faceCaptureQuality;
- (id)faceCaptureQualityOriginatingRequestSpecifier;
- (unsigned long long)faceId;
- (float)faceIdConfidence;
- (float)faceJunkinessIndex;
- (float)faceOrientationIndex;
- (id)faceRegionMap;
- (id)faceScreenGaze;
- (id)faceSegments;
- (id)faceTorsoprint;
- (id)faceprint;
- (id)gaze;
- (bool)getComputedRectifyingTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg1;
- (bool)getFaceEXIFOrientation:(int*)arg1 error:(id*)arg2;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithRequestRevision:(unsigned long long)arg1;
- (bool)isBlinking;
- (bool)isBoundingBoxAligned;
- (bool)isEqual:(id)arg1;
- (bool)isRevision1DetectedRectanglesCompatible;
- (id)landmarkPoints;
- (id)landmarkPoints3d;
- (id)landmarkPoints65;
- (id)landmarkPrecisionEstimatesPerPoint;
- (float)landmarkScore;
- (id)landmarks;
- (id)landmarks3DOriginatingRequestSpecifier;
- (id)landmarks3d;
- (id)landmarks65;
- (unsigned long long)landmarksConstellation;
- (id)landmarksOriginatingRequestSpecifier;
- (id)legacyFaceCore;
- (float)nameConfidence;
- (id)pitch;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })pose;
- (id)poseData;
- (id)poseOriginatingRequestSpecifier;
- (struct { })poseQuaternion;
- (id)roll;
- (void)setAlignedBoundingBox:(struct _Geometry2D_rect2D_ { struct _Geometry2D_point2D_ { float x_1_1_1; float x_1_1_2; } x1; struct _Geometry2D_size2D_ { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setAlignedMeanShape:(id)arg1;
- (void)setAlignedRotationAngle:(float)arg1;
- (void)setBlinkScore:(float)arg1;
- (void)setBoundingBoxAligned:(bool)arg1;
- (void)setExpressionsAndScores:(id)arg1;
- (void)setFaceAttributes:(id)arg1;
- (void)setFaceCaptureQuality:(float)arg1 originatingRequestSpecifier:(id)arg2;
- (void)setFaceId:(unsigned long long)arg1;
- (void)setFaceIdConfidence:(float)arg1;
- (void)setFaceJunkinessIndex:(float)arg1;
- (void)setFaceOrientationIndex:(float)arg1;
- (void)setFaceRegionMap:(id)arg1;
- (void)setFaceScreenGaze:(id)arg1;
- (void)setFaceSegments:(id)arg1;
- (void)setFaceTorsoprint:(id)arg1;
- (void)setFaceprint:(id)arg1;
- (void)setGaze:(id)arg1;
- (void)setIsBlinking:(bool)arg1;
- (void)setLandmark3DPointsData:(id)arg1 originatingRequestSpecifier:(id)arg2;
- (void)setLandmarkPoints65Data:(id)arg1 originatingRequestSpecifier:(id)arg2;
- (void)setLandmarkPointsData:(id)arg1 originatingRequestSpecifier:(id)arg2;
- (void)setLandmarkPrecisionEstimatesPerPoint:(id)arg1;
- (void)setLandmarkScore:(float)arg1;
- (void)setLandmarks:(id)arg1;
- (void)setLandmarksConstellation:(unsigned long long)arg1;
- (void)setLegacyFaceCore:(id)arg1;
- (void)setPitch:(id)arg1;
- (void)setPoseData:(id)arg1 originatingRequestSpecifier:(id)arg2;
- (void)setRoll:(id)arg1;
- (void)setTorsoprint:(id)arg1;
- (void)setUnalignedBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setYaw:(id)arg1;
- (id)torsoprint;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unalignedBoundingBox;
- (void)updateFaceCaptureQuality:(id)arg1;
- (id)vn_cloneObject;
- (id)yaw;

@end
