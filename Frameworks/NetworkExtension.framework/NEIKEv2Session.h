
@interface NEIKEv2Session : NSObject <NEIKEv2TransportDelegate, NEIPSecSASessionDelegate> {
    id /* block */  _additionalAddressesUpdateBlock;
    NEIKEv2ConfigurationMessage * _assignedConfiguration;
    NSMutableArray * _childSAs;
    id /* block */  _childStateUpdateBlock;
    int (* _clientCallback;
    void * _clientCallbackInfo;
    NSObject<OS_dispatch_queue> * _clientQueue;
    <NEIKEv2ConfigurationDelegate> * _configurationDelegate;
    id /* block */  _configurationUpdateBlock;
    NSMutableDictionary * _databaseLarvalSAs;
    NSMutableDictionary * _databaseSAs;
    NEIPSecSASession * _databaseSession;
    NSObject<OS_dispatch_source> * _dpdDispatchTimer;
    SWWakingTimer * _dpdTimer;
    bool  _hasContactedConfigurationDelegate;
    bool  _hasOutboundRequestInFlight;
    NEIKEv2IKESAConfiguration * _ikeConfig;
    NSString * _ikeInterfaceName;
    NSObject<OS_dispatch_source> * _ikeLifetimeTimer;
    NEIKEv2IKESA * _ikeSA;
    id /* block */  _ikeSocketHandler;
    struct NEVirtualInterface_s { } * _ipsecInterface;
    bool  _isAborted;
    bool  _isExpectingConfigBlock;
    bool  _isInvalidated;
    bool  _isListening;
    int  _lastReceivedMessageID;
    int  _lastRequestMessageID;
    id /* block */  _lastRequestReplyHandler;
    NEIKEv2ChildSAConfiguration * _listenChildSAUserConfig;
    NWEndpoint * _localEndpoint;
    bool  _ownsDatabaseSession;
    bool  _ownsIPSecInterface;
    <NEIKEv2PacketDelegate> * _packetDelegate;
    NSMutableArray * _pendingRequestContexts;
    int  _previousMOBIKEMessageID;
    NEIKEv2Packet * _previousMOBIKERequest;
    id /* block */  _privateNotifyStatusEvent;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_source> * _receiveTimer;
    NSMutableDictionary * _receivedReplies;
    NSMutableDictionary * _receivedRequests;
    id /* block */  _redirectEventBlock;
    NWEndpoint * _remoteEndpoint;
    NSMutableDictionary * _replyFragmentMaps;
    NSMutableDictionary * _requestFragmentMaps;
    NEIKEv2RTT * _rttState;
    NSObject<OS_dispatch_source> * _sendTimer;
    NSMutableDictionary * _sentReplies;
    NSMutableDictionary * _sentRequests;
    id /* block */  _shortDPDEventBlock;
    unsigned long long  _state;
    id /* block */  _stateUpdateBlock;
    id /* block */  _trafficSelectorUpdateBlock;
    unsigned long long  _uniqueIndex;
    id /* block */  _waitingRequestHandler;
}

@property (copy) id /* block */ additionalAddressesUpdateBlock;
@property (readonly) NEIKEv2ConfigurationMessage *assignedConfiguration;
@property (copy) id /* block */ childStateUpdateBlock;
@property int (*clientCallback;
@property void*clientCallbackInfo;
@property (retain) NSObject<OS_dispatch_queue> *clientQueue;
@property (copy) id /* block */ configurationUpdateBlock;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) NSString *ikeInterfaceName;
@property (readonly) NWEndpoint *localEndpoint;
@property (readonly) bool peerAuthenticated;
@property (copy) id /* block */ privateNotifyStatusEvent;
@property (copy) id /* block */ redirectEventBlock;
@property (readonly) NWEndpoint *remoteEndpoint;
@property (copy) id /* block */ shortDPDEventBlock;
@property (readonly) unsigned long long state;
@property (copy) id /* block */ stateUpdateBlock;
@property (readonly) Class superclass;
@property (copy) id /* block */ trafficSelectorUpdateBlock;

- (void).cxx_destruct;
- (unsigned int)addChild:(id)arg1;
- (id /* block */)additionalAddressesUpdateBlock;
- (id)assignedConfiguration;
- (void)blackholeDetectedSA:(id)arg1;
- (bool)checkSelectedChildSAProposal:(id)arg1;
- (bool)checkSelectedIKEProposal:(id)arg1;
- (id /* block */)childStateUpdateBlock;
- (int (*)clientCallback;
- (void*)clientCallbackInfo;
- (id)clientQueue;
- (id /* block */)configurationUpdateBlock;
- (void)connect;
- (void)dealloc;
- (void)deleteSA:(id)arg1;
- (id)description;
- (void)disconnect;
- (void)expireSA:(id)arg1;
- (void)forceRekeyChild:(unsigned int)arg1;
- (void)forceRekeyIKE;
- (void)idleTimeoutSA:(id)arg1;
- (id)ikeInterfaceName;
- (id)initWithIKEConfig:(id)arg1 firstChildConfig:(id)arg2 sessionConfig:(id)arg3 queue:(id)arg4 ipsecInterface:(struct NEVirtualInterface_s { }*)arg5 ikeSocketHandler:(id /* block */)arg6 kernelSASessionName:(id)arg7 packetDelegate:(id)arg8;
- (id)initWithIKEConfig:(id)arg1 firstChildConfig:(id)arg2 sessionConfig:(id)arg3 queue:(id)arg4 ipsecInterface:(struct NEVirtualInterface_s { }*)arg5 ikeSocketHandler:(id /* block */)arg6 saSession:(id)arg7 packetDelegate:(id)arg8;
- (void)invalidate;
- (void)invalidateWithCompletionHandler:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)localEndpoint;
- (bool)peerAuthenticated;
- (id /* block */)privateNotifyStatusEvent;
- (void)receivePacket:(id)arg1;
- (id /* block */)redirectEventBlock;
- (id)remoteEndpoint;
- (void)removeChild:(unsigned int)arg1;
- (void)reportError:(int)arg1;
- (void)sendKeepaliveWithRetries:(unsigned int)arg1 retryIntervalInMilliseconds:(unsigned long long)arg2 callbackQueue:(id)arg3 callback:(id /* block */)arg4;
- (void)sendMOBIKEWithRetries:(unsigned int)arg1 retryInterval:(unsigned long long)arg2 interfaceName:(id)arg3 invalidateTransport:(bool)arg4 resetEndpoint:(id)arg5 callbackQueue:(id)arg6 callback:(id /* block */)arg7;
- (void)sendPrivateNotifies:(id)arg1 maxRetries:(unsigned int)arg2 retryIntervalInMilliseconds:(unsigned long long)arg3 callbackQueue:(id)arg4 callback:(id /* block */)arg5;
- (void)setAdditionalAddressesUpdateBlock:(id /* block */)arg1;
- (void)setChildStateUpdateBlock:(id /* block */)arg1;
- (void)setClientCallback:(int (*)arg1;
- (void)setClientCallbackInfo:(void*)arg1;
- (void)setClientQueue:(id)arg1;
- (void)setConfigurationUpdateBlock:(id /* block */)arg1;
- (void)setPrivateNotifyStatusEvent:(id /* block */)arg1;
- (void)setRedirectEventBlock:(id /* block */)arg1;
- (void)setShortDPDEventBlock:(id /* block */)arg1;
- (void)setStateUpdateBlock:(id /* block */)arg1;
- (void)setTrafficSelectorUpdateBlock:(id /* block */)arg1;
- (id /* block */)shortDPDEventBlock;
- (unsigned long long)state;
- (id /* block */)stateUpdateBlock;
- (id /* block */)trafficSelectorUpdateBlock;
- (bool)updateConfiguration:(id)arg1;

@end
