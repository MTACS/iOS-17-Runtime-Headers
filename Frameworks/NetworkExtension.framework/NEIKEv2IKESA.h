
@interface NEIKEv2IKESA : NSObject {
    NEIKEv2ConfigurationMessage * _activeConfiguration;
    NEIKEv2AuthenticationProtocol * _authProtocolFromPacket;
    NSData * _authenticationDataFromPacket;
    unsigned long long  _childSAModeFromPacket;
    NSArray * _childSAProposalsFromPacket;
    NEIKEv2IKESAProposal * _chosenProposal;
    NEIKEv2ConfigurationMessage * _configMessageFromPacket;
    NEIKEv2IKESAConfiguration * _configuration;
    <NEIKEv2ConfigurationDelegate> * _configurationDelegate;
    NSData * _cookie;
    bool  _detectedIncomingNAT;
    bool  _detectedOutgoingNAT;
    struct OpaqueSecDHContext { } * _dhContext;
    NSData * _dhPublicKey;
    unsigned long long  _dhPublicKeySize;
    NSData * _dhRemotePublicKey;
    bool  _eapAuthenticationSuccess;
    NEIKEv2EAP * _eapClient;
    bool  _eapInProgress;
    struct __SecKey { } * _ecdhPrivateKeyRef;
    NSMutableData * _encryptCryptoCtx;
    NSError * _error;
    NSData * _fetchedPassword;
    NSData * _fetchedSharedSecret;
    bool  _fragmentationSupported;
    unsigned long long  _ikeSAUniqueIndex;
    unsigned long long  _ikeSessionUniqueIndex;
    NSData * _initiatorCookie2;
    NEIKEv2InitiatorIdentifierPayload * _initiatorIdentifierPayload;
    NSArray * _initiatorTrafficSelectorsFromPacket;
    NEIKEv2Identifier * _internalRemoteIdentifier;
    bool  _isInitiator;
    bool  _isRekeying;
    double  _lastReceivedDPD;
    NWAddressEndpoint * _localAddress;
    NEIKEv2AuthenticationProtocol * _localAuthProtocolUsed;
    NSData * _localCertificateIdentity;
    bool  _localCertificateIsModernSystem;
    NSData * _localCertificateKey;
    NSData * _localFirstMessage;
    NEIKEv2Identifier * _localIdentifierFromPacket;
    NSData * _localNonce;
    NEIKEv2IKESPI * _localSPI;
    bool  _mobikeSupported;
    NEIKEv2Transport * _natTransport;
    NSString * _outgoingInterfaceName;
    <NEIKEv2PacketDelegate> * _packetDelegate;
    bool  _peerAuthenticated;
    NSObject<OS_dispatch_queue> * _queue;
    NSData * _receivedDestinationHash;
    NWAddressEndpoint * _remoteAddress;
    NEIKEv2AuthenticationProtocol * _remoteAuthProtocolUsed;
    NSData * _remoteFirstMessage;
    NEIKEv2Identifier * _remoteIdentifierFromPacket;
    NSData * _remoteNonce;
    NEIKEv2DHProtocol * _remotePreferredDHProtocol;
    NEIKEv2IKESPI * _remoteSPI;
    NSSet * _remoteSignHashSet;
    bool  _reportShortDPD;
    NSData * _responderCookie2;
    NSArray * _responderTrafficSelectorsFromPacket;
    NSData * _sKeySeed;
    NEIKEv2SessionConfiguration * _sessionConfiguration;
    unsigned short  _shortDPDCounter;
    bool  _shouldSendStateUpdate;
    NSData * _skAi;
    NSData * _skAr;
    NSData * _skD;
    NSData * _skEi;
    NSData * _skEr;
    NSData * _skPi;
    NSData * _skPr;
    id /* block */  _socketGetBlock;
    unsigned long long  _state;
    NEIKEv2Transport * _tcpTransport;
    NEIKEv2Transport * _transport;
    <NEIKEv2TransportDelegate> * _transportDelegate;
    bool  _useNATTraversal;
    bool  _useTCPEncapsulation;
    bool  _usesPacketDelegate;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)description;

@end
