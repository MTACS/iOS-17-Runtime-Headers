
@interface QLThumbnailGenerationRequest : NSObject <NSCopying, NSSecureCoding> {
    unsigned long long  _badgeType;
    QLCacheBasicVersionedFileIdentifier * _basicFileIdentifier;
    NSDate * _beginDate;
    bool  _cancelled;
    id /* block */  _completionBlock;
    UTType * _contentType;
    NSString * _contentTypeUTI;
    NSData * _data;
    bool  _downloadingAllowed;
    NSDictionary * _externalThumbnailGeneratorData;
    unsigned long long  _externalThumbnailGeneratorDataHash;
    QLCacheFileProviderVersionedFileIdentifier * _fileProviderFileIdentifier;
    NSURL * _fileURL;
    bool  _finished;
    long long  _generationBehavior;
    FPSandboxingURLWrapper * _genericSandboxWrapper;
    bool  _iconMode;
    long long  _iconVariant;
    int  _interpolationQuality;
    FPItem * _item;
    double  _minimumDimension;
    QLThumbnailRepresentation * _mostRepresentativeThumbnail;
    UTType * _overriddenContentType;
    NSString * _overriddenContentTypeIdentifier;
    FPSandboxingURLWrapper * _parentDirectorySandboxWrapper;
    FPSandboxingURLWrapper * _quicklookSandboxWrapper;
    unsigned long long  _representationTypes;
    NSError * _requestIsInvalidError;
    NSFileHandle * _saveFileHandle;
    NSString * _saveURLContentType;
    FPSandboxingURLWrapper * _saveURLSandboxWrapper;
    double  _scale;
    bool  _shouldUseRestrictedExtension;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    id /* block */  _statusBlock;
    bool  _thirdPartyVideoDecodersAllowed;
    unsigned long long  _typesForWhichUpdateBlockHasBeenCalled;
    id /* block */  _updateBlock;
    NSUUID * _uuid;
    bool  _wantsBaseline;
}

@property (nonatomic) unsigned long long badgeType;
@property (nonatomic, retain) QLCacheBasicVersionedFileIdentifier *basicFileIdentifier;
@property (nonatomic, retain) NSDate *beginDate;
@property (getter=isCancelled, nonatomic) bool cancelled;
@property (nonatomic, copy) id /* block */ completionBlock;
@property (nonatomic, copy) UTType *contentType;
@property (nonatomic, retain) NSString *contentTypeUTI;
@property (nonatomic, retain) NSData *data;
@property (getter=isDownloadingAllowed, nonatomic) bool downloadingAllowed;
@property (nonatomic, retain) NSDictionary *externalThumbnailGeneratorData;
@property (nonatomic) unsigned long long externalThumbnailGeneratorDataHash;
@property (nonatomic, retain) QLCacheFileProviderVersionedFileIdentifier *fileProviderFileIdentifier;
@property (nonatomic, retain) NSURL *fileURL;
@property (getter=isFinished, nonatomic) bool finished;
@property (nonatomic) long long generationBehavior;
@property (nonatomic, retain) FPSandboxingURLWrapper *genericSandboxWrapper;
@property (nonatomic) bool iconMode;
@property (nonatomic) long long iconVariant;
@property (nonatomic) int interpolationQuality;
@property (nonatomic, retain) FPItem *item;
@property (nonatomic) double minimumDimension;
@property (nonatomic, retain) QLThumbnailRepresentation *mostRepresentativeThumbnail;
@property (nonatomic, readonly) long long mostRepresentativeTypeForWhichUpdateBlockHasBeenCalled;
@property (nonatomic, retain) UTType *overriddenContentType;
@property (nonatomic, retain) NSString *overriddenContentTypeIdentifier;
@property (nonatomic, retain) FPSandboxingURLWrapper *parentDirectorySandboxWrapper;
@property (nonatomic, retain) FPSandboxingURLWrapper *quicklookSandboxWrapper;
@property (nonatomic) unsigned long long representationTypes;
@property (nonatomic, retain) NSError *requestIsInvalidError;
@property (nonatomic, retain) NSFileHandle *saveFileHandle;
@property (nonatomic, copy) NSString *saveURLContentType;
@property (nonatomic, retain) FPSandboxingURLWrapper *saveURLSandboxWrapper;
@property (nonatomic) double scale;
@property (nonatomic) bool shouldUseRestrictedExtension;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property (nonatomic, copy) id /* block */ statusBlock;
@property (nonatomic) bool thirdPartyVideoDecodersAllowed;
@property (nonatomic) unsigned long long typesForWhichUpdateBlockHasBeenCalled;
@property (nonatomic, copy) id /* block */ updateBlock;
@property (nonatomic, retain) NSUUID *uuid;
@property (nonatomic) bool wantsBaseline;

+ (id)_basicFileIdentifierForURL:(id)arg1 error:(id*)arg2;
+ (id)_fileProviderFileIdentifierForFPItem:(id)arg1;
+ (id)customExtensionCommunicationEncodedClasses;
+ (id)requestWithThumbnailRequest:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_stateDescription;
- (unsigned long long)badgeType;
- (id)basicFileIdentifier;
- (id)beginDate;
- (void)cancel;
- (long long)compare:(id)arg1;
- (id /* block */)completionBlock;
- (id)contentType;
- (id)contentTypeUTI;
- (id)copyWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)data;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)equivalentFPItemRequestWithItem:(id)arg1 representationTypes:(unsigned long long)arg2;
- (id)externalThumbnailGeneratorData;
- (unsigned long long)externalThumbnailGeneratorDataHash;
- (id)fileIdentifier;
- (id)fileProviderFileIdentifier;
- (id)fileURL;
- (void)finish;
- (bool)forceGeneration;
- (long long)generationBehavior;
- (id)genericSandboxWrapper;
- (unsigned long long)hash;
- (bool)iconMode;
- (long long)iconVariant;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1 contentType:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 scale:(double)arg4 representationTypes:(unsigned long long)arg5;
- (id)initWithFPItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 representationTypes:(unsigned long long)arg4;
- (id)initWithFileAtURL:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 representationTypes:(unsigned long long)arg4;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 representationTypes:(unsigned long long)arg3;
- (int)interpolationQuality;
- (bool)isCancelled;
- (bool)isDataBased;
- (bool)isDownloadingAllowed;
- (bool)isEqual:(id)arg1;
- (bool)isFileBased;
- (bool)isFinished;
- (bool)isUbiquitous;
- (bool)isValid;
- (id)item;
- (void)markDidBegin;
- (float)maximumPixelSize;
- (double)minimumDimension;
- (id)mostRepresentativeThumbnail;
- (long long)mostRepresentativeTypeForWhichUpdateBlockHasBeenCalled;
- (void)noteUpdateBlockHasBeenCalledForType:(long long)arg1;
- (id)overriddenContentType;
- (id)overriddenContentTypeIdentifier;
- (id)parentDirectorySandboxWrapper;
- (bool)prepareForSending;
- (bool)provideCachedResultsOnly;
- (bool)provideFullResolutionThumbnail;
- (bool)provideGenericIcon;
- (bool)provideLowQualityThumbnail;
- (id)quicklookSandboxWrapper;
- (unsigned long long)representationTypes;
- (id)requestIsInvalidError;
- (long long)requestedMostRepresentativeType;
- (bool)resultShouldBeSavedToDisk;
- (id)saveFileHandle;
- (id)saveURL;
- (id)saveURLContentType;
- (id)saveURLSandboxWrapper;
- (double)scale;
- (void)setBadgeType:(unsigned long long)arg1;
- (void)setBasicFileIdentifier:(id)arg1;
- (void)setBeginDate:(id)arg1;
- (void)setCancelled:(bool)arg1;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setContentType:(id)arg1;
- (void)setContentTypeUTI:(id)arg1;
- (void)setData:(id)arg1;
- (void)setDownloadingAllowed:(bool)arg1;
- (void)setExternalThumbnailGeneratorData:(id)arg1;
- (void)setExternalThumbnailGeneratorDataHash:(unsigned long long)arg1;
- (void)setFileProviderFileIdentifier:(id)arg1;
- (void)setFileURL:(id)arg1;
- (void)setFinished:(bool)arg1;
- (void)setGenerationBehavior:(long long)arg1;
- (void)setGenericSandboxWrapper:(id)arg1;
- (void)setIconMode:(bool)arg1;
- (void)setIconVariant:(long long)arg1;
- (void)setInterpolationQuality:(int)arg1;
- (void)setItem:(id)arg1;
- (void)setMinimumDimension:(double)arg1;
- (void)setMostRepresentativeThumbnail:(id)arg1;
- (void)setOverriddenContentType:(id)arg1;
- (void)setOverriddenContentTypeIdentifier:(id)arg1;
- (void)setParentDirectorySandboxWrapper:(id)arg1;
- (void)setQuicklookSandboxWrapper:(id)arg1;
- (void)setRepresentationTypes:(unsigned long long)arg1;
- (void)setRequestIsInvalidError:(id)arg1;
- (void)setSaveFileHandle:(id)arg1;
- (void)setSaveURL:(id)arg1;
- (void)setSaveURLContentType:(id)arg1;
- (void)setSaveURLSandboxWrapper:(id)arg1;
- (void)setScale:(double)arg1;
- (void)setShouldUseRestrictedExtension:(bool)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setStatusBlock:(id /* block */)arg1;
- (void)setThirdPartyVideoDecodersAllowed:(bool)arg1;
- (void)setTypesForWhichUpdateBlockHasBeenCalled:(unsigned long long)arg1;
- (void)setUpdateBlock:(id /* block */)arg1;
- (void)setUuid:(id)arg1;
- (void)setWantsBaseline:(bool)arg1;
- (bool)shouldUseRestrictedExtension;
- (struct CGSize { double x1; double x2; })size;
- (id /* block */)statusBlock;
- (bool)thirdPartyVideoDecodersAllowed;
- (bool)thumbnailRepresentationTypeMatchesRequestedMostRepresentativeType:(long long)arg1;
- (unsigned long long)typesForWhichUpdateBlockHasBeenCalled;
- (id /* block */)updateBlock;
- (id)uuid;
- (bool)wantsBaseline;

@end
