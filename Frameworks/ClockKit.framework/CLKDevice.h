
@interface CLKDevice : NSObject {
    int  _cachedKeybagLockState;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _capabilitiesLock;
    unsigned long long  _collectionType;
    NSNumber * _deviceBrand;
    unsigned long long  _deviceCategory;
    bool  _hasRichMediaComplications;
    bool  _isBridgeActive;
    bool  _isExplorer;
    bool  _isLuxo;
    bool  _isRunningDaytonaOrLater;
    bool  _isRunningGloryFOrLater;
    bool  _isRunningGloryGMOrLater;
    bool  _isTinker;
    bool  _isZeusBlack;
    bool  _limitedToPreGlory;
    bool  _limitedToPreHunter;
    unsigned long long  _materialType;
    NRDevice * _nrDevice;
    int  _pairedDeviceCapabilitiesChangeNotificationToken;
    long long  _productType;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _protectedLock;
    bool  _runningGraceOrLater;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _screenBounds;
    double  _screenCornerRadius;
    double  _screenScale;
    unsigned long long  _sizeClass;
    NSMutableDictionary * _supportedCapabilitiesCache;
    bool  _supportsCompanionSync;
    bool  _supportsPolaris;
    bool  _supportsTritium;
    bool  _supportsUrsa;
    bool  _supportsVictoryFaces;
    unsigned long long  _version;
}

@property (nonatomic) int cachedKeybagLockState;
@property (nonatomic, readonly) bool canCustomize;
@property (nonatomic, readonly) struct os_unfair_lock_s { unsigned int x1; } capabilitiesLock;
@property (nonatomic) unsigned long long collectionType;
@property (nonatomic, readonly) CLKDeviceDescriptor *descriptor;
@property (nonatomic, readonly) NSNumber *deviceBrand;
@property (nonatomic, readonly) unsigned long long deviceCategory;
@property (nonatomic) bool hasRichMediaComplications;
@property (nonatomic, readonly) bool isBridgeActive;
@property (nonatomic) bool isBridgeActive;
@property (nonatomic, readonly) bool isEcgPhoneComplicationEnabled;
@property (nonatomic) bool isExplorer;
@property (nonatomic, readonly) bool isLocked;
@property (nonatomic) bool isLuxo;
@property (nonatomic, readonly) bool isPaired;
@property (nonatomic, readonly) bool isRadioPhoneComplicationEnabled;
@property (nonatomic, readonly) bool isRunningDaytonaOrLater;
@property (nonatomic, readonly) bool isRunningGloryFOrLater;
@property (nonatomic, readonly) bool isRunningGloryGMOrLater;
@property (nonatomic) bool isTinker;
@property (nonatomic, readonly) bool isZeusBlack;
@property (nonatomic, readonly) bool limitedToPreGlory;
@property (nonatomic, readonly) bool limitedToPreHunter;
@property (nonatomic) unsigned long long materialType;
@property (nonatomic, retain) NRDevice *nrDevice;
@property (nonatomic, readonly) NSUUID *nrDeviceUUID;
@property (nonatomic, readonly) unsigned int nrDeviceVersion;
@property (nonatomic, readonly) int pairedDeviceCapabilitiesChangeNotificationToken;
@property (nonatomic, readonly) long long productFamilyType;
@property (nonatomic) long long productType;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } protectedLock;
@property (getter=isRunningGraceOrLater, nonatomic, readonly) bool runningGraceOrLater;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } screenBounds;
@property (nonatomic) double screenCornerRadius;
@property (nonatomic) double screenScale;
@property (nonatomic) unsigned long long sizeClass;
@property (nonatomic, retain) NSMutableDictionary *supportedCapabilitiesCache;
@property (nonatomic) bool supportsCompanionSync;
@property (nonatomic) bool supportsPolaris;
@property (nonatomic, readonly) bool supportsTritium;
@property (nonatomic) bool supportsUrsa;
@property (nonatomic, readonly) bool supportsVictoryFaces;
@property (nonatomic, readonly) bool supportsWidgetMigration;
@property (nonatomic, readonly) bool unlockedSinceBoot;
@property (nonatomic, readonly) unsigned long long version;

// Image: /System/Library/Frameworks/ClockKit.framework/ClockKit

+ (id)CLKDeviceUUIDForNRDevice:(id)arg1;
+ (bool)NRDeviceIsRunningDaytonaOrLater:(id)arg1;
+ (unsigned int)NRProductVersionForNRDevice:(id)arg1;
+ (id)_cachedDeviceForUUID:(id)arg1;
+ (id)_createCurrentDeviceWithNRDevice:(id)arg1;
+ (void)_deviceDidBecomeActive:(id)arg1;
+ (void)_handleNRDeviceChanged:(id)arg1;
+ (void)_removeCachedDeviceForUUID:(id)arg1;
+ (id)activeNRDevice;
+ (id)currentDevice;
+ (id)deviceForDescriptor:(id)arg1;
+ (id)deviceForNRDevice:(id)arg1;
+ (id)deviceForNRDevice:(id)arg1 forced:(bool)arg2;
+ (id)deviceForNRDeviceUUID:(id)arg1;
+ (void)enumerateSizeClasses:(id /* block */)arg1;
+ (void)initialize;
+ (id)nrDeviceForNRDeviceUUID:(id)arg1;
+ (void)resetCurrentDevice;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })screenBoundsForSizeClass:(unsigned long long)arg1;
+ (double)screenCornerRadiusForSizeClass:(unsigned long long)arg1;
+ (double)screenScaleForSizeClass:(unsigned long long)arg1;
+ (void)setCurrentDevice:(id)arg1;

- (void).cxx_destruct;
- (bool)_checkUpdateFlushCapabilitiesCache_locked;
- (void)_loadDeviceInfo;
- (void)_loadSupportsVictoryFaces;
- (bool)_queryAndCacheNanoRegistryDeviceCapabilities;
- (bool)_supportsCapabilityUncached:(id)arg1;
- (int)cachedKeybagLockState;
- (struct os_unfair_lock_s { unsigned int x1; })capabilitiesLock;
- (unsigned long long)collectionType;
- (void)customCompanionSetup;
- (void)customWatchSetup;
- (void)dealloc;
- (id)descriptor;
- (id)deviceBrand;
- (unsigned long long)deviceCategory;
- (void)handleDeviceDidPairNotification;
- (bool)hasRichMediaComplications;
- (unsigned long long)hash;
- (id)initWithNRDevice:(id)arg1;
- (id)initWithSizeClass:(unsigned long long)arg1;
- (bool)isBridgeActive;
- (bool)isEqual:(id)arg1;
- (bool)isExplorer;
- (bool)isLimitedToPreGloryDeviceOfProductType:(long long)arg1;
- (bool)isLocked;
- (bool)isLuxo;
- (bool)isM8SOCInDeviceOfProductType:(long long)arg1;
- (bool)isPaired;
- (bool)isRunningDaytonaOrLater;
- (bool)isRunningGloryFOrLater;
- (bool)isRunningGloryGMOrLater;
- (bool)isRunningGraceOrLater;
- (bool)isTinker;
- (bool)isZeusBlack;
- (bool)limitedToPreGlory;
- (bool)limitedToPreHunter;
- (unsigned long long)materialType;
- (id)nrDevice;
- (id)nrDeviceUUID;
- (unsigned int)nrDeviceVersion;
- (int)pairedDeviceCapabilitiesChangeNotificationToken;
- (long long)productFamilyType;
- (long long)productType;
- (long long)productTypeFromProductTypeString:(id)arg1;
- (struct os_unfair_lock_s { unsigned int x1; })protectedLock;
- (long long)retrieveProductType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })screenBounds;
- (double)screenCornerRadius;
- (double)screenScale;
- (void)setCachedKeybagLockState:(int)arg1;
- (void)setCollectionType:(unsigned long long)arg1;
- (void)setHasRichMediaComplications:(bool)arg1;
- (void)setIsBridgeActive:(bool)arg1;
- (void)setIsExplorer:(bool)arg1;
- (void)setIsLuxo:(bool)arg1;
- (void)setIsTinker:(bool)arg1;
- (void)setMaterialType:(unsigned long long)arg1;
- (void)setNrDevice:(id)arg1;
- (void)setProductType:(long long)arg1;
- (void)setProtectedLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setScreenBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setScreenCornerRadius:(double)arg1;
- (void)setScreenScale:(double)arg1;
- (void)setSizeClass:(unsigned long long)arg1;
- (void)setSupportedCapabilitiesCache:(id)arg1;
- (void)setSupportsCompanionSync:(bool)arg1;
- (void)setSupportsPolaris:(bool)arg1;
- (void)setSupportsUrsa:(bool)arg1;
- (unsigned long long)sizeClass;
- (id)supportedCapabilitiesCache;
- (bool)supportsCapability:(id)arg1;
- (bool)supportsCompanionSync;
- (bool)supportsPolaris;
- (bool)supportsTritium;
- (bool)supportsUrsa;
- (bool)supportsVictoryFaces;
- (bool)supportsWidgetMigration;
- (bool)unlockedSinceBoot;
- (void)updateKeybagLockStateCacheWithState:(int)arg1;
- (void)updateTinkerState;
- (unsigned long long)version;

// Image: /System/Library/PrivateFrameworks/NanoTimeKit.framework/NanoTimeKit

+ (void)setBridgeActiveNRDevice:(id)arg1;

- (bool)canCustomize;
- (bool)isEcgPhoneComplicationEnabled;
- (bool)isRadioPhoneComplicationEnabled;

@end
