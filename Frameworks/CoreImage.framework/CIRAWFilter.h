
@interface CIRAWFilter : CIFilter {
    CIRAWFilterImpl * filterImplementation;
    NSData * imageData;
    NSString * imageDataHint;
    NSURL * imageURL;
}

@property float baselineExposure;
@property float boostAmount;
@property float boostShadowAmount;
@property float colorNoiseReductionAmount;
@property (getter=isColorNoiseReductionSupported, readonly) bool colorNoiseReductionSupported;
@property float contrastAmount;
@property (getter=isContrastSupported, readonly) bool contrastSupported;
@property (retain) NSString *decoderVersion;
@property float detailAmount;
@property (getter=isDetailSupported, readonly) bool detailSupported;
@property (getter=isDraftModeEnabled) bool draftModeEnabled;
@property float exposure;
@property float extendedDynamicRangeAmount;
@property (retain) CIRAWFilterImpl *filterImplementation;
@property (getter=isGamutMappingEnabled) bool gamutMappingEnabled;
@property (readonly) NSData *imageData;
@property (readonly) NSString *imageDataHint;
@property (readonly) NSURL *imageURL;
@property (getter=isLensCorrectionEnabled) bool lensCorrectionEnabled;
@property (getter=isLensCorrectionSupported, readonly) bool lensCorrectionSupported;
@property (retain) CIFilter *linearSpaceFilter;
@property float localToneMapAmount;
@property (getter=isLocalToneMapSupported, readonly) bool localToneMapSupported;
@property float luminanceNoiseReductionAmount;
@property (getter=isLuminanceNoiseReductionSupported, readonly) bool luminanceNoiseReductionSupported;
@property float moireReductionAmount;
@property (getter=isMoireReductionSupported, readonly) bool moireReductionSupported;
@property (readonly) struct CGSize { double x1; double x2; } nativeSize;
@property struct CGPoint { double x1; double x2; } neutralChromaticity;
@property struct CGPoint { double x1; double x2; } neutralLocation;
@property float neutralTemperature;
@property float neutralTint;
@property unsigned int orientation;
@property (readonly) CIImage *portraitEffectsMatte;
@property (readonly) CIImage *previewImage;
@property (readonly) NSDictionary *properties;
@property float scaleFactor;
@property (readonly) CIImage *semanticSegmentationGlassesMatte;
@property (readonly) CIImage *semanticSegmentationHairMatte;
@property (readonly) CIImage *semanticSegmentationSkinMatte;
@property (readonly) CIImage *semanticSegmentationSkyMatte;
@property (readonly) CIImage *semanticSegmentationTeethMatte;
@property float shadowBias;
@property float sharpnessAmount;
@property (getter=isSharpnessSupported, readonly) bool sharpnessSupported;
@property (readonly) NSArray *supportedDecoderVersions;

+ (id)customAttributes;
+ (id)filterWithCVPixelBuffer:(struct __CVBuffer { }*)arg1 properties:(id)arg2;
+ (id)filterWithImageData:(id)arg1 identifierHint:(id)arg2;
+ (id)filterWithImageURL:(id)arg1;
+ (id)supportedCameraModels;

- (id)attributes;
- (id)auxImageWithKey:(id)arg1;
- (float)baselineExposure;
- (float)boostAmount;
- (float)boostShadowAmount;
- (float)colorNoiseReductionAmount;
- (float)contrastAmount;
- (void)dealloc;
- (id)decoderVersion;
- (float)detailAmount;
- (float)exposure;
- (float)extendedDynamicRangeAmount;
- (id)filterImplementation;
- (id)imageData;
- (id)imageDataHint;
- (id)imageURL;
- (id)initWithCVPixelBuffer:(struct __CVBuffer { }*)arg1 properties:(id)arg2;
- (id)initWithImageData:(id)arg1 identifierHint:(id)arg2;
- (id)initWithImageURL:(id)arg1;
- (bool)isColorNoiseReductionSupported;
- (bool)isContrastSupported;
- (bool)isDetailSupported;
- (bool)isDraftModeEnabled;
- (bool)isGamutMappingEnabled;
- (bool)isLensCorrectionEnabled;
- (bool)isLensCorrectionSupported;
- (bool)isLocalToneMapSupported;
- (bool)isLuminanceNoiseReductionSupported;
- (bool)isMoireReductionSupported;
- (bool)isSharpnessSupported;
- (id)linearSpaceFilter;
- (float)localToneMapAmount;
- (float)luminanceNoiseReductionAmount;
- (float)moireReductionAmount;
- (struct CGSize { double x1; double x2; })nativeSize;
- (struct CGPoint { double x1; double x2; })neutralChromaticity;
- (struct CGPoint { double x1; double x2; })neutralLocation;
- (float)neutralTemperature;
- (float)neutralTint;
- (unsigned int)orientation;
- (id)outputImage;
- (id)portraitEffectsMatte;
- (id)previewImage;
- (id)properties;
- (float)scaleFactor;
- (id)semanticSegmentationGlassesMatte;
- (id)semanticSegmentationHairMatte;
- (id)semanticSegmentationSkinMatte;
- (id)semanticSegmentationSkyMatte;
- (id)semanticSegmentationTeethMatte;
- (void)setBaselineExposure:(float)arg1;
- (void)setBoostAmount:(float)arg1;
- (void)setBoostShadowAmount:(float)arg1;
- (void)setColorNoiseReductionAmount:(float)arg1;
- (void)setContrastAmount:(float)arg1;
- (void)setDecoderVersion:(id)arg1;
- (void)setDetailAmount:(float)arg1;
- (void)setDraftModeEnabled:(bool)arg1;
- (void)setExposure:(float)arg1;
- (void)setExtendedDynamicRangeAmount:(float)arg1;
- (void)setFilterImplementation:(id)arg1;
- (void)setGamutMappingEnabled:(bool)arg1;
- (void)setLensCorrectionEnabled:(bool)arg1;
- (void)setLinearSpaceFilter:(id)arg1;
- (void)setLocalToneMapAmount:(float)arg1;
- (void)setLuminanceNoiseReductionAmount:(float)arg1;
- (void)setMoireReductionAmount:(float)arg1;
- (void)setNeutralChromaticity:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNeutralLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNeutralTemperature:(float)arg1;
- (void)setNeutralTint:(float)arg1;
- (void)setOrientation:(unsigned int)arg1;
- (void)setScaleFactor:(float)arg1;
- (void)setShadowBias:(float)arg1;
- (void)setSharpnessAmount:(float)arg1;
- (float)shadowBias;
- (float)sharpnessAmount;
- (id)supportedDecoderVersions;

@end
