
@interface CAWindowServerDisplay : NSObject <CABrightnessControl, CAPresetTransaction> {
    struct CAWindowServerDisplayImpl { struct Mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_1_1_1; } x1; struct Server {} *x2; struct CABrightnessTransaction { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; float x_3_1_5; float x_3_1_6; float x_3_1_7; float x_3_1_8; float x_3_1_9; struct { float x_10_2_1[9]; } x_3_1_10; float x_3_1_11; bool x_3_1_12; unsigned int x_3_1_13; } x3; id /* block */ x4; id x5; id x6; id x7; id x8; bool x9; bool x10; } * _impl;
    unsigned long long  _maximumFrameTime;
    unsigned long long  _maximumVRRVBLDelta;
    unsigned long long  _minimumFrameTime;
    unsigned long long  _minimumVRRVBLDelta;
    bool  _mirroringEnabled;
}

@property (copy) NSString *TVMode;
@property (copy) NSString *TVSignalType;
@property bool accessibilityFrameRateLimitEnabled;
@property bool allowsDisplayCompositing;
@property bool allowsExtendedDynamicRange;
@property bool allowsVirtualModes;
@property (readonly) <CAPixelConstraints> *averagePixelConstraints;
@property struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; } blackpointAdaptation;
@property (getter=isBlanked) bool blanked;
@property bool blankingRemovesPower;
@property (retain) struct CGColorSpace { }*blendColorSpace;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) bool brightnessAvailable;
@property (copy) id /* block */ brightnessCallback;
@property (nonatomic, retain) NSDictionary *brightnessCapabilities;
@property (readonly) struct { struct { float x_1_1_1; float x_1_1_2; } x1; struct { float x_2_1_1; float x_2_1_2; } x2; struct { float x_3_1_1; float x_3_1_2; } x3; struct { float x_4_1_1; float x_4_1_2; } x4; } chromaticities;
@property (readonly) CAWindowServerDisplay *cloneMaster;
@property (readonly) NSSet *clones;
@property (nonatomic, copy) NSString *colorMode;
@property float contrast;
@property (copy) NSDictionary *cursorDictionary;
@property bool cursorEnabled;
@property bool cursorHidden;
@property struct CGPoint { double x1; double x2; } cursorPosition;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDetaching, readonly) bool detaching;
@property (readonly) void*detachingDisplay;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } detachingRect;
@property (readonly) NSString *deviceName;
@property bool disabled;
@property bool disablesUpdates;
@property (retain) struct CGColorSpace { }*displayColorSpace;
@property (readonly) unsigned int displayId;
@property (readonly) long long displayType;
@property bool enabled;
@property (getter=isFlipBookActive, readonly) bool flipBookActive;
@property (getter=isFlipBookEnabled) bool flipBookEnabled;
@property (getter=isFlipBookSuppressed) bool flipBookSuppressed;
@property (copy) id /* block */ frameInfoCallback;
@property (readonly) long long frameInfoCallbackVersion;
@property (readonly) unsigned int framebufferFormat;
@property (readonly) float gamma;
@property (getter=isGrayscale) bool grayscale;
@property (readonly) unsigned long long hash;
@property (copy) id /* block */ hotPlugCallback;
@property float idealRefreshRate;
@property bool invertsColors;
@property (nonatomic) bool isReferencePreset;
@property (readonly) unsigned long long maxLayerBandwidth;
@property float maximumBrightness;
@property (readonly) struct CGSize { double x1; double x2; } maximumCursorSize;
@property (readonly) unsigned long long maximumFrameTime;
@property (nonatomic) double maximumHDRLuminance;
@property (readonly) float maximumLuminance;
@property (nonatomic) double maximumReferenceLuminance;
@property (nonatomic) double maximumSDRLuminance;
@property (readonly) double maximumScale;
@property (readonly) unsigned long long maximumSourceRectPixels;
@property (readonly) unsigned long long maximumSourceRectWidth;
@property (readonly) unsigned long long maximumVRRVBLDelta;
@property (readonly) unsigned long long minimumFrameTime;
@property (nonatomic) double minimumLuminance;
@property (readonly) double minimumScale;
@property (readonly) unsigned long long minimumSourceRectSize;
@property (readonly) unsigned long long minimumVRRVBLDelta;
@property (getter=isMirroringEnabled) bool mirroringEnabled;
@property (readonly) NSString *name;
@property (readonly) struct CGSize { double x1; double x2; } nativeSize;
@property (readonly) bool needsUpdate;
@property (readonly) double nextWakeupTime;
@property float nits;
@property (copy) NSString *orientation;
@property (copy) NSString *overscanAdjustment;
@property double overscanAmount;
@property struct CGSize { double x1; double x2; } overscanAmounts;
@property (readonly) struct CGSize { double x1; double x2; } panelPhysicalSize;
@property (readonly) unsigned long long panelPointsPerInch;
@property (nonatomic) bool preserveAppleSRGBGammaResponse;
@property (readonly) unsigned long long previousVBL;
@property int processId;
@property (nonatomic, readonly) unsigned long long productId;
@property (readonly) unsigned int rendererFlags;
@property double scale;
@property bool scalePreservesAspect;
@property struct CGSize { double x1; double x2; } scales;
@property (getter=isSecure) bool secure;
@property (nonatomic, readonly) unsigned int serviceObject;
@property (readonly) Class superclass;
@property (readonly) bool supportsColorSpaces;
@property (readonly) bool supportsCursor;
@property (readonly) bool supportsExtendedColors;
@property (readonly) bool supportsGamutRemap;
@property struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; } systemGamma;
@property long long tag;
@property (readonly) struct CGSize { double x1; double x2; } touchScales;
@property bool tracksCarPlayRegions;
@property (readonly) long long transportType;
@property (nonatomic) long long trinityCabalConfig;
@property (readonly) bool tripleBuffered;
@property (readonly) NSString *uniqueId;
@property (copy) id /* block */ updateRequestCallback;
@property bool usesPreferredModeRefreshRate;
@property (nonatomic, readonly) NSUUID *uuid;
@property (readonly) unsigned long long vblDelta;
@property (nonatomic, readonly) unsigned long long vendorId;
@property (readonly) NSDictionary *virtualDisplayMode;
@property (nonatomic, readonly) bool whitePointAvailable;
@property (nonatomic, readonly) bool whitePointD50XYZ;
@property (readonly) struct { float x1; float x2; } whitepoint;

- (id)TVMode;
- (id)TVSignalType;
- (id)_initWithCADisplayServer:(void*)arg1;
- (void)abortColorMatrixRamp:(float*)arg1 scale:(float*)arg2;
- (void)abortContrastEnhancerRamp:(float*)arg1;
- (bool)abortWhitePointRamp:(struct { float x1[9]; }*)arg1 error:(id*)arg2;
- (bool)accessibilityFrameRateLimitEnabled;
- (struct __IOSurface { }*)acquireFrozenSurface;
- (void)activateReplay;
- (void)addClone:(id)arg1;
- (void)addClone:(id)arg1 options:(id)arg2;
- (void)addFramePresentationTimestamp:(unsigned long long)arg1;
- (bool)allowsDisplayCompositing;
- (bool)allowsExtendedDynamicRange;
- (bool)allowsVirtualModes;
- (double)apertureOffset;
- (id)averagePixelConstraints;
- (void)beginExternalUpdate:(void*)arg1 usingSoftwareRenderer:(bool)arg2;
- (struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; })blackpointAdaptation;
- (bool)blankingRemovesPower;
- (struct CGColorSpace { }*)blendColorSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)brightnessAvailable;
- (id /* block */)brightnessCallback;
- (id)brightnessCapabilities;
- (bool)canUpdate:(bool)arg1;
- (bool)canUpdateWithFlags:(unsigned int)arg1;
- (struct { struct { float x_1_1_1; float x_1_1_2; } x1; struct { float x_2_1_1; float x_2_1_2; } x2; struct { float x_3_1_1; float x_3_1_2; } x3; struct { float x_4_1_1; float x_4_1_2; } x4; })chromaticities;
- (unsigned int)clientPortAtPosition:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned int)clientPortOfContextId:(unsigned int)arg1;
- (id)cloneMaster;
- (id)clones;
- (id)colorMode;
- (bool)commitBrightness:(id*)arg1;
- (bool)commitBrightness:(id*)arg1 withBlock:(id /* block */)arg2;
- (bool)commitPreset;
- (unsigned int)contextIdAtPosition:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned int)contextIdAtPosition:(struct CGPoint { double x1; double x2; })arg1 excludingContextIds:(id)arg2;
- (float)contrast;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromContextId:(unsigned int)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toContextId:(unsigned int)arg2;
- (void)copyDisplayTimingsFromDisplay:(id)arg1;
- (id)cursorDictionary;
- (bool)cursorEnabled;
- (bool)cursorHidden;
- (struct CGPoint { double x1; double x2; })cursorPosition;
- (void)dealloc;
- (id)description;
- (void*)detachingDisplay;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })detachingRect;
- (id)deviceName;
- (bool)disabled;
- (bool)disablesUpdates;
- (struct CGColorSpace { }*)displayColorSpace;
- (unsigned int)displayId;
- (long long)displayType;
- (void)emitBrightnessError:(id*)arg1;
- (void)emitWhitePointError:(id*)arg1;
- (bool)enabled;
- (bool)finishExternalUpdate:(void*)arg1 withFlags:(unsigned int)arg2;
- (bool)finishExternalUpdate:(void*)arg1 withFlags:(unsigned int)arg2 debugInfo:(unsigned long long)arg3;
- (bool)forceCommitBrightness:(id*)arg1 withBlock:(id /* block */)arg2;
- (id /* block */)frameInfoCallback;
- (long long)frameInfoCallbackVersion;
- (unsigned int)framebufferFormat;
- (void)freeze;
- (float)gamma;
- (id)hitTestAtPosition:(struct CGPoint { double x1; double x2; })arg1 options:(id)arg2;
- (id /* block */)hotPlugCallback;
- (float)idealRefreshRate;
- (void)invalidate;
- (bool)invertsColors;
- (bool)isBlanked;
- (bool)isDetaching;
- (bool)isFlipBookActive;
- (bool)isFlipBookEnabled;
- (bool)isFlipBookSuppressed;
- (bool)isGrayscale;
- (bool)isMirroringEnabled;
- (bool)isReferencePreset;
- (bool)isSecure;
- (unsigned long long)maxLayerBandwidth;
- (float)maximumBrightness;
- (struct CGSize { double x1; double x2; })maximumCursorSize;
- (unsigned long long)maximumFrameTime;
- (double)maximumHDRLuminance;
- (float)maximumLuminance;
- (double)maximumReferenceLuminance;
- (float)maximumRefreshRate;
- (double)maximumSDRLuminance;
- (double)maximumScale;
- (unsigned long long)maximumSourceRectPixels;
- (unsigned long long)maximumSourceRectWidth;
- (unsigned long long)maximumVRRVBLDelta;
- (unsigned long long)minimumFrameTime;
- (double)minimumLuminance;
- (float)minimumRefreshRate;
- (double)minimumScale;
- (unsigned long long)minimumSourceRectSize;
- (unsigned long long)minimumVRRVBLDelta;
- (id)name;
- (struct CGSize { double x1; double x2; })nativeSize;
- (bool)needsUpdate;
- (double)nextWakeupTime;
- (float)nits;
- (id)notificationQueue;
- (id)orientation;
- (id)overscanAdjustment;
- (double)overscanAmount;
- (struct CGSize { double x1; double x2; })overscanAmounts;
- (struct CGSize { double x1; double x2; })panelPhysicalSize;
- (unsigned long long)panelPointsPerInch;
- (void)postNotification:(id)arg1 payload:(id)arg2;
- (void)postSyncNotification:(id)arg1 payload:(id)arg2;
- (void)powerStateDidChange:(id)arg1;
- (void)presentSurface:(struct __IOSurface { }*)arg1 withOptions:(id)arg2;
- (bool)preserveAppleSRGBGammaResponse;
- (unsigned long long)previousVBL;
- (int)processId;
- (unsigned long long)productId;
- (void)registerForNotifications:(id)arg1 withBlock:(id /* block */)arg2;
- (void)registerForSyncNotifications:(id)arg1 withBlock:(id /* block */)arg2;
- (void)removeAllClones;
- (void)removeClone:(id)arg1;
- (void)renderForTime:(double)arg1;
- (unsigned int)rendererFlags;
- (void)resetConfiguration;
- (double)scale;
- (bool)scalePreservesAspect;
- (struct CGSize { double x1; double x2; })scales;
- (unsigned int)serviceObject;
- (void)setAccessibilityColorMatrix:(float*)arg1 scale:(float)arg2;
- (void)setAccessibilityFrameRateLimitEnabled:(bool)arg1;
- (void)setAllowsDisplayCompositing:(bool)arg1;
- (void)setAllowsExtendedDynamicRange:(bool)arg1;
- (void)setAllowsVirtualModes:(bool)arg1;
- (void)setAmbient:(float)arg1;
- (void)setApertureOffset:(double)arg1;
- (void)setBlackpointAdaptation:(struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; })arg1;
- (void)setBlanked:(bool)arg1;
- (void)setBlankingRemovesPower:(bool)arg1;
- (void)setBlendColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setBrightnessCallback:(id /* block */)arg1;
- (void)setBrightnessCapabilities:(id)arg1;
- (void)setBrightnessControlDisabled:(bool)arg1;
- (void)setBrightnessLimit:(float)arg1;
- (void)setCalibrationPhase:(unsigned int)arg1 forIdentifier:(unsigned int)arg2;
- (void)setColorMatrix:(const float*)arg1 scale:(float)arg2 rampDuration:(double)arg3;
- (void)setColorMode:(id)arg1;
- (void)setContrast:(float)arg1;
- (void)setContrastEnhancer:(float)arg1;
- (void)setContrastEnhancer:(float)arg1 rampDuration:(double)arg2;
- (void)setCursorDictionary:(id)arg1;
- (void)setCursorEnabled:(bool)arg1;
- (void)setCursorHidden:(bool)arg1;
- (void)setCursorPosition:(struct CGPoint { double x1; double x2; })arg1;
- (bool)setDigitalModes:(id)arg1;
- (bool)setDigitalModes:(id)arg1 withTimings:(id)arg2;
- (void)setDisabled:(bool)arg1;
- (void)setDisablesUpdates:(bool)arg1;
- (void)setDisplayColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFilteredAmbient:(float)arg1;
- (void)setFlipBookEnabled:(bool)arg1;
- (void)setFlipBookSuppressed:(bool)arg1;
- (void)setFrameInfoCallback:(id /* block */)arg1;
- (void)setGammaAdjustment:(struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; })arg1;
- (void)setGamutRemapConfigPlanes:(const struct { float x1; float x2; float x3; float x4; unsigned short x5; unsigned short x6; bool x7; bool x8; }*)arg1 planeCount:(unsigned long long)arg2 XYZToYuvCoefficients:(const float*)arg3 YuvToXYZCoefficients:(const float*)arg4;
- (void)setGamutRemapMatrices:(const float*)arg1 count:(unsigned long long)arg2;
- (void)setGrayscale:(bool)arg1;
- (void)setHeadroom:(float)arg1;
- (void)setHighAmbientAdaptation:(float)arg1;
- (void)setHotPlugCallback:(id /* block */)arg1;
- (void)setIdealRefreshRate:(float)arg1;
- (void)setInvertsColors:(bool)arg1;
- (void)setIsReferencePreset:(bool)arg1;
- (void)setLowAmbientAdaptation:(float)arg1;
- (void)setMaximumBrightness:(float)arg1;
- (void)setMaximumHDRLuminance:(double)arg1;
- (void)setMaximumReferenceLuminance:(double)arg1;
- (void)setMaximumRefreshRate:(float)arg1;
- (void)setMaximumSDRLuminance:(double)arg1;
- (void)setMinimumLuminance:(double)arg1;
- (void)setMinimumRefreshRate:(float)arg1;
- (void)setMirroringEnabled:(bool)arg1;
- (void)setNits:(float)arg1;
- (void)setNotificationQueue:(id)arg1;
- (void)setOrientation:(id)arg1;
- (void)setOverscanAdjustment:(id)arg1;
- (void)setOverscanAmount:(double)arg1;
- (void)setOverscanAmounts:(struct CGSize { double x1; double x2; })arg1;
- (void)setPotentialHeadroom:(float)arg1;
- (void)setPreserveAppleSRGBGammaResponse:(bool)arg1;
- (void)setProcessId:(int)arg1;
- (void)setSDRBrightness:(float)arg1;
- (void)setScale:(double)arg1;
- (void)setScalePreservesAspect:(bool)arg1;
- (void)setScales:(struct CGSize { double x1; double x2; })arg1;
- (void)setSecure:(bool)arg1;
- (void)setSyncNotificationQueue:(id)arg1;
- (void)setSystemGamma:(struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; })arg1;
- (void)setTVMode:(id)arg1;
- (void)setTVSignalType:(id)arg1;
- (void)setTag:(long long)arg1;
- (void)setTracksCarPlayRegions:(bool)arg1;
- (void)setTrinityCabalConfig:(long long)arg1;
- (void)setUpdateRequestCallback:(id /* block */)arg1;
- (void)setUserAdjustment:(float*)arg1 scale:(float)arg2;
- (void)setUsesPreferredModeRefreshRate:(bool)arg1;
- (bool)setWhitePoint:(const struct { float x1[9]; }*)arg1 rampDuration:(double)arg2 error:(id*)arg3;
- (void)setWhitePointMatrix:(const struct { float x1[9]; }*)arg1 scale:(float)arg2;
- (bool)supportsColorSpaces;
- (bool)supportsCursor;
- (bool)supportsExtendedColors;
- (bool)supportsGamutRemap;
- (id)syncNotificationQueue;
- (struct CGColorTRC { int x1; union { struct CGColorTRCParametric { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; } x_2_1_1; struct CGColorTRCTable { unsigned long long x_2_2_1; float *x_2_2_2; struct CGColorTRCBoundaryExtension { float x_3_3_1; float x_3_3_2; } x_2_2_3; struct CGColorTRCBoundaryExtension { float x_4_3_1; float x_4_3_2; } x_2_2_4; } x_2_1_2; } x2; })systemGamma;
- (long long)tag;
- (unsigned int)taskNamePortOfContextId:(unsigned int)arg1;
- (struct CGSize { double x1; double x2; })touchScales;
- (bool)tracksCarPlayRegions;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })transformFromLayerId:(unsigned long long)arg1 inContextId:(unsigned int)arg2;
- (long long)transportType;
- (long long)trinityCabalConfig;
- (bool)tripleBuffered;
- (id)uniqueId;
- (void)unregisterNotificationBlocks;
- (void)unregisterSyncNotificationBlocks;
- (void)update;
- (id /* block */)updateRequestCallback;
- (bool)usesPreferredModeRefreshRate;
- (id)uuid;
- (unsigned long long)vblDelta;
- (unsigned long long)vendorId;
- (id)virtualDisplayMode;
- (bool)whitePointAvailable;
- (bool)whitePointD50XYZ;
- (struct { float x1; float x2; })whitepoint;
- (void)willUnblank;

@end
