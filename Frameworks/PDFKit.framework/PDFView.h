
@interface PDFView : UIView <AKSignaturesControllerDelegate, PDFPasswordViewControllerDelegate, UIFindInteractionDelegate, UIGestureRecognizerDelegate> {
    bool  _annotationEditingAllowed;
    unsigned long long  _currentPageIndex;
    PDFDetectedFormField * _detectedFormField;
    PDFPage * _detectedFormFieldPage;
    bool  _findInteractionEnabled;
    bool  _formDetectionEnabled;
    UIButton * _formFieldButton;
    id  _formFieldButtonHideKeyboardNotification;
    id  _formFieldButtonShowKeyboardNotification;
    bool  _inMarkupMode;
    PDFOverlayViewsController * _overlayViewController;
    PDFPageBackgroundManager * _pageBackgroundManager;
    <PDFPageOverlayViewProvider> * _pageOverlayViewProvider;
    PDFViewPrivate * _private;
}

@property (nonatomic) bool autoScales;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic, readonly) bool canGoBack;
@property (nonatomic, readonly) bool canGoForward;
@property (nonatomic, readonly) bool canGoToFirstPage;
@property (nonatomic, readonly) bool canGoToLastPage;
@property (nonatomic, readonly) bool canGoToNextPage;
@property (nonatomic, readonly) bool canGoToPreviousPage;
@property (nonatomic, readonly) bool canZoomIn;
@property (nonatomic, readonly) bool canZoomOut;
@property (nonatomic, readonly) PDFDestination *currentDestination;
@property (nonatomic, readonly) PDFPage *currentPage;
@property (nonatomic, retain) PDFSelection *currentSelection;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PDFViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long displayBox;
@property (nonatomic) long long displayDirection;
@property (nonatomic) long long displayMode;
@property (nonatomic) bool displaysAsBook;
@property (nonatomic) bool displaysPageBreaks;
@property (nonatomic) bool displaysRTL;
@property (nonatomic, retain) PDFDocument *document;
@property (nonatomic, readonly) UIView *documentView;
@property (nonatomic) bool enableDataDetectors;
@property (nonatomic, readonly) UIFindInteraction *findInteraction;
@property (getter=isFindInteractionEnabled, nonatomic) bool findInteractionEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSArray *highlightedSelections;
@property (getter=isInMarkupMode, nonatomic) bool inMarkupMode;
@property (nonatomic) long long interpolationQuality;
@property (nonatomic, readonly) bool isUsingPageViewController;
@property (nonatomic) double maxScaleFactor;
@property (nonatomic) double minScaleFactor;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } pageBreakMargins;
@property (nonatomic) <PDFPageOverlayViewProvider> *pageOverlayViewProvider;
@property (setter=enablePageShadows:, nonatomic) bool pageShadowsEnabled;
@property (nonatomic) double scaleFactor;
@property (nonatomic, readonly) double scaleFactorForSizeToFit;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *visiblePages;

// Image: /System/Library/Frameworks/PDFKit.framework/PDFKit

+ (void)DisableAnnotationKit;
+ (void)EnableAnnotationKit;
+ (void)setUseIOSurfaceForTiles:(bool)arg1;
+ (bool)useIOSurfaceForTiles;

- (void).cxx_destruct;
- (bool)PDFKitHandleBackTabInTextWidget:(id)arg1;
- (bool)PDFKitHandleTabInTextWidget:(id)arg1;
- (id)PDFLayout;
- (double)PDFViewWillChangeScaleFactor:(id)arg1 toScale:(double)arg2;
- (void)PDFViewWillClickOnLink:(id)arg1 withURL:(id)arg2;
- (void)_commonInit;
- (void)_doNotQueryScaleFactor;
- (long long)_dragInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (id)_dragItemsAtLocationInView:(struct CGPoint { double x1; double x2; })arg1;
- (void)_ensureOverlayViewController;
- (void)_findVisiblePages;
- (id)_getDocumentAKController;
- (void)_goToPage:(id)arg1 animated:(bool)arg2 withBackgroundUpdate:(bool)arg3;
- (void)_internalSetAutoScaleFactor;
- (void)_internalSetScaleFactor:(double)arg1;
- (void)_lookup:(id)arg1;
- (double)_pageViewHeight:(id)arg1;
- (void)_reflectNewPageOn;
- (void)_releaseDocument;
- (void)_releaseDocumentViewController;
- (void)_releaseScrollView;
- (void)_removePasswordView;
- (void)_resizeDisplayView:(id)arg1;
- (void)_scrollByPage:(bool)arg1;
- (void)_scrollHorizontalBy:(double)arg1;
- (struct CGPoint { double x1; double x2; })_scrollOriginForPageTopLeft:(id)arg1;
- (void)_scrollVerticalBy:(double)arg1;
- (void)_selfDidResize:(id)arg1;
- (void)_setupDocumentViewController;
- (void)_setupPasswordView;
- (void)_setupScrollView;
- (bool)_shouldHandleAnnotationAtLocation:(struct CGPoint { double x1; double x2; })arg1 forGestureType:(unsigned long long)arg2;
- (void)_showFormFillingButton:(bool)arg1;
- (void)_syncPageIndexToScrollView;
- (void)_tileRefresh;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromPageToPageView:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromPageViewToPage:(id)arg1;
- (double)_unboundAutoScaleFactorForPage:(id)arg1;
- (double)_unboundAutoScaleFactorForPageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_updateAnnotations;
- (void)_updateBookmarksForPages;
- (void)_updateCurrentPageUsingViewCenter;
- (void)_updatePasswordView;
- (bool)acceptSingleTouch:(id)arg1;
- (id)activeAnnotation;
- (unsigned long long)activeMarkupStyle;
- (void)addGestureRecognizer:(id)arg1;
- (void)addMarkupWithStyle:(unsigned long long)arg1 fromSelection:(id)arg2;
- (bool)akAnnotationEditingEnabled;
- (id)akRedoToolbarItem;
- (id)akToolbarView;
- (id)akToolbarViewItemTintColor;
- (id)akToolbarViewTintColor;
- (id)akUndoToolbarItem;
- (bool)allowsMarkupAnnotationEditing;
- (bool)allowsUndo;
- (void)annotationsChangedOnPage:(id)arg1;
- (long long)areaOfInterestForMouse:(id)arg1;
- (long long)areaOfInterestForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)autoScaleFactor;
- (double)autoScaleFactorForPage:(id)arg1;
- (double)autoScaleFactorForPageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)autoScales;
- (id)backgroundColor;
- (bool)backgroundImagesEnabled;
- (void)beginPDFViewRotation;
- (void)callPageVisibilityDelegateMethod:(int)arg1 forPageView:(id)arg2 atPageIndex:(unsigned long long)arg3;
- (void)callPageVisibilityDelegateMethodForOverlayAdaptorOnly:(int)arg1 forPageView:(id)arg2 atPageIndex:(unsigned long long)arg3;
- (bool)canBecomeFirstResponder;
- (bool)canGoBack;
- (bool)canGoForward;
- (bool)canGoToFirstPage;
- (bool)canGoToLastPage;
- (bool)canGoToNextPage;
- (bool)canGoToPreviousPage;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canZoomIn;
- (bool)canZoomOut;
- (struct CGPoint { double x1; double x2; })centerPointOfVisibleRectOfPage:(id)arg1;
- (void)clearSelection;
- (void)colorWidgetBackgrounds:(bool)arg1;
- (void)constrainedScrollToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)controller;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromPage:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toPage:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromPage:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toPage:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToRootView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromPageLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRootViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toPageLayer:(id)arg2;
- (void)copy:(id)arg1;
- (id)currentDestination;
- (id)currentPage;
- (id)currentSelection;
- (void)dealloc;
- (double)defaultGutterWidth;
- (id)delegate;
- (void)delete:(id)arg1;
- (id)determineCurrentPage;
- (long long)displayBox;
- (long long)displayDirection;
- (long long)displayMode;
- (bool)displaysAsBook;
- (bool)displaysBookmarksForPages;
- (bool)displaysPageBreaks;
- (bool)displaysRTL;
- (id)document;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })documentMargins;
- (id)documentScrollView;
- (id)documentView;
- (id)documentViewController;
- (void)documentWasUnlocked;
- (id)doubleTapGestureRecognizer;
- (id)dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)drawAccessibilityNodeType:(int)arg1 enableDrawing:(bool)arg2;
- (void)drawDetectedAnnotationBounds:(bool)arg1;
- (void)drawNodeBoundingBoxesType:(int)arg1 enableDrawing:(bool)arg2;
- (void)drawPage:(id)arg1 toContext:(struct CGContext { }*)arg2;
- (void)drawPagePost:(id)arg1 toContext:(struct CGContext { }*)arg2;
- (void)drawTextBoundingBoxesType:(int)arg1 enableDrawing:(bool)arg2;
- (void)drawTextPreciseBoundingBoxes:(bool)arg1;
- (void)drawTextSelectionBoundingBoxes:(bool)arg1;
- (void)enableBackgroundImages:(bool)arg1;
- (bool)enableDataDetectors;
- (void)enablePageShadows:(bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)endPDFViewRotation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendedRootViewBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extensionViewBoundsInDocument;
- (double)extensionViewZoomScale;
- (void)find:(id)arg1;
- (id)findInteraction;
- (void)findInteraction:(id)arg1 didBeginFindSession:(id)arg2;
- (void)findInteraction:(id)arg1 didEndFindSession:(id)arg2;
- (id)findInteraction:(id)arg1 sessionForView:(id)arg2;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (bool)flipsTileContents;
- (bool)focusOnColumnAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)forceTileRefresh;
- (bool)formFillingUpdatesAnnotationOnEveryTextChange;
- (void)gestureInit;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)goBack:(id)arg1;
- (void)goForward:(id)arg1;
- (void)goToDestination:(id)arg1;
- (void)goToDestinationNoPush:(id)arg1;
- (void)goToFirstPage:(id)arg1;
- (void)goToLastPage:(id)arg1;
- (void)goToNextPage:(id)arg1;
- (void)goToPage:(id)arg1;
- (void)goToPage:(id)arg1 animated:(bool)arg2;
- (void)goToPageNoPush:(id)arg1;
- (void)goToPageNoPush:(id)arg1 animated:(bool)arg2;
- (void)goToPageWithoutBackgroundUpdate:(id)arg1;
- (void)goToPreviousPage:(id)arg1;
- (void)goToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onPage:(id)arg2;
- (void)goToSelection:(id)arg1;
- (double)greekingThreshold;
- (double)gutterWidth;
- (bool)handleBackTabInDetectedFormField;
- (bool)handleBackTabInTextWidget:(id)arg1;
- (void)handleGesture:(unsigned long long)arg1 state:(long long)arg2 location:(struct CGPoint { double x1; double x2; })arg3 locationOfFirstTouch:(struct CGPoint { double x1; double x2; })arg4 isIndirectTouch:(bool)arg5;
- (bool)handleTabInDetectedFormField;
- (bool)handleTabInTextWidget:(id)arg1;
- (void)handleTextSuggestion:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)highlight:(id)arg1;
- (void)highlightDetectedFormFields:(bool)arg1;
- (void)highlightPDFRedactions:(bool)arg1;
- (id)highlightedSelections;
- (void)hintScrollDirectionHorizontal:(unsigned long long)arg1 andVertical:(unsigned long long)arg2;
- (id)hitTestForSubviewsOfView:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 withEvent:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)insertFormFieldAtDefaultLocation;
- (void)insertFormFieldAtPoint:(struct CGPoint { double x1; double x2; })arg1 onPage:(id)arg2;
- (void)interactWithAnnotation:(id)arg1;
- (void)internalForceAnnotationRefresh;
- (void)internalForceTileRefresh;
- (long long)interpolationQuality;
- (bool)isAnnotationEditingEnabled;
- (bool)isDrawingAccessibilityNodeType:(int)arg1;
- (bool)isFindInteractionEnabled;
- (bool)isFormDetectionEnabled;
- (bool)isInFormFillingMode;
- (bool)isInMarkupMode;
- (bool)isOverLinkAnnotation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isRectVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onPage:(id)arg2;
- (bool)isTextSelectionEnabled;
- (bool)isUpdatingSelectionMarkups;
- (bool)isUsingPageViewController;
- (unsigned long long)lastPageIndex;
- (void)layoutDocumentView;
- (void)layoutSubviews;
- (double)lineWidthThreshold;
- (id)longPressGestureRecognizer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })mainScreenBounds;
- (double)mainScreenScale;
- (double)maxScaleFactor;
- (double)minScaleFactor;
- (id)nextPage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedPageBounds:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })pageBreakMargins;
- (id)pageColor;
- (id)pageForPoint:(struct CGPoint { double x1; double x2; })arg1 nearest:(bool)arg2;
- (id)pageOverlayViewProvider;
- (bool)pageShadowsEnabled;
- (void)pageViewControllerSaysPageChanged:(id)arg1;
- (id)pageViewForPageAtIndex:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })pageViewSizeForPage:(id)arg1;
- (id)parentViewController;
- (id)pdfDocumentView;
- (struct CGSize { double x1; double x2; })pdfDocumentViewSize;
- (void)pdfViewDidChangePage:(id)arg1;
- (void)pdfViewDidChangeScale:(id)arg1;
- (void)performAction:(id)arg1;
- (void)performBeep;
- (void)performOverlayAdaptorPageVisibilityTrueUpAfterSettingDocument;
- (id)pointerRegionForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)positionInternalViews:(id)arg1;
- (id)previousPage;
- (void)printActivePageText;
- (void)pushDestination:(id)arg1;
- (void)removeControlForAnnotation:(id)arg1;
- (void)removeFromSuperview;
- (id)renderingProperties;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rootViewBounds;
- (struct CGSize { double x1; double x2; })rowSizeForPage:(id)arg1;
- (double)scaleFactor;
- (double)scaleFactorForSizeToFit;
- (void)scrollSelectionToVisible:(id)arg1;
- (unsigned long long)scrollViewMinimumNumberOfTouches;
- (void)scrollViewSaysPageMayHaveChanged:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)setActiveAnnotation:(id)arg1;
- (void)setActiveMarkupStyle:(unsigned long long)arg1;
- (void)setAkAnnotationEditingEnabled:(bool)arg1;
- (void)setAkToolbarViewItemTintColor:(id)arg1;
- (void)setAkToolbarViewTintColor:(id)arg1;
- (void)setAllowsMarkupAnnotationEditing:(bool)arg1;
- (void)setAllowsUndo:(bool)arg1;
- (void)setAnnotationEditingEnabled:(bool)arg1;
- (void)setAutoScales:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundImage:(id)arg1 forPage:(id)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentPageIndex:(unsigned long long)arg1 withNotification:(bool)arg2;
- (void)setCurrentSelection:(id)arg1;
- (void)setCurrentSelection:(id)arg1 animate:(bool)arg2;
- (void)setCurrentSelection:(id)arg1 updateTextInput:(bool)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDisplayBox:(long long)arg1;
- (void)setDisplayDirection:(long long)arg1;
- (void)setDisplayMode:(long long)arg1;
- (void)setDisplaysAsBook:(bool)arg1;
- (void)setDisplaysBookmarksForPages:(bool)arg1;
- (void)setDisplaysPageBreaks:(bool)arg1;
- (void)setDisplaysRTL:(bool)arg1;
- (void)setDocument:(id)arg1;
- (void)setDocument:(id)arg1 waitDuration:(double)arg2;
- (void)setDocument:(id)arg1 withInitialPageIndex:(unsigned long long)arg2;
- (void)setDocumentMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setEnableDataDetectors:(bool)arg1;
- (void)setEnableTileUpdates:(bool)arg1;
- (void)setFindInteractionEnabled:(bool)arg1;
- (void)setForcesTopAlignment:(bool)arg1;
- (void)setFormDetectionEnabled:(bool)arg1;
- (void)setFormFillingUpdatesAnnotationOnEveryTextChange:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGreekingThreshold:(double)arg1;
- (void)setGutterWidth:(double)arg1;
- (void)setHighlightedSelections:(id)arg1;
- (void)setInFormFillingMode:(bool)arg1;
- (void)setInMarkupMode:(bool)arg1;
- (void)setInterpolationQuality:(long long)arg1;
- (void)setIsUsingPDFExtensionView:(bool)arg1;
- (void)setLineWidthThreshold:(double)arg1;
- (void)setMaxScaleFactor:(double)arg1;
- (void)setMinScaleFactor:(double)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNewPageVisibilityDelegate:(id)arg1 withOldDelegate:(id)arg2;
- (void)setPageBreakMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPageColor:(id)arg1;
- (void)setPageOverlayViewProvider:(id)arg1;
- (void)setScaleFactor:(double)arg1;
- (void)setScaleFactor:(double)arg1 anchorPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setScrollViewScrollEnabled:(bool)arg1;
- (void)setShouldAntiAlias:(bool)arg1;
- (void)setShowsScrollIndicators:(bool)arg1;
- (void)setTextSelectionEnabled:(bool)arg1;
- (bool)shouldAcceptTouch:(id)arg1 ofGestureRecognizer:(id)arg2;
- (bool)shouldAntiAlias;
- (void)showMarkupMenu:(id)arg1;
- (bool)showsScrollIndicators;
- (void)signaturesController:(id)arg1 didSelectSignatureWithAnnotation:(id)arg2;
- (void)startEditingTextWidgetAnnotation:(id)arg1;
- (void)syncPageIndexToScrollView;
- (void)takeBackgroundColorFrom:(id)arg1;
- (void)takePasswordFrom:(id)arg1;
- (id)tapGestureRecognizer;
- (double)targetBackingScaleFactor;
- (unsigned long long)typeForGestureRecognizer:(id)arg1;
- (void)updateNodeBoundingBoxes;
- (void)updatePDFViewLayout:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scrollViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomScale:(double)arg3;
- (void)usePageViewController:(bool)arg1 withViewOptions:(id)arg2;
- (bool)userDidEnterPassword:(id)arg1 forPasswordViewController:(id)arg2;
- (id)viewForPage:(id)arg1;
- (id)visibleAnnotations;
- (id)visiblePageViews;
- (id)visiblePages;
- (void)visiblePagesChanged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectForPageView:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NewsArticles.framework/NewsArticles

- (id)na_documentScrollView;
- (void)na_setBackgroundImage:(id)arg1 forPage:(id)arg2;

@end
