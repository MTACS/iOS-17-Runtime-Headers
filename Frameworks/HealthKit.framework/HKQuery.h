
@interface HKQuery : NSObject <HKQueryClientInterface, _HKXPCExportable> {
    _Atomic int  _activationState;
    double  _activationTime;
    NSUUID * _activationUUID;
    unsigned int  _applicationSDKVersion;
    NSObject<OS_dispatch_queue> * _clientQueue;
    _Atomic int  _deactivateCallCount;
    NSString * _debugIdentifier;
    <HKQueryDelegate> * _delegate;
    _HKFilter * _filter;
    bool  _hasBeenExecuted;
    HKObjectType * _objectType;
    NSPredicate * _predicate;
    HKQueryServerProxyProvider * _proxyProvider;
    long long  _qualityOfService;
    NSArray * _queryDescriptors;
    NSObject<OS_dispatch_queue> * _queue;
    <HKQueryServerInterface> * _serverProxy;
    bool  _shouldSuppressDataCollection;
    HKHealthStore * _strongHealthStore;
}

@property (readonly) long long activationState;
@property (copy) NSUUID *activationUUID;
@property (nonatomic, readonly) unsigned int applicationSDKVersion;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *clientQueue;
@property (readonly) long long deactivateCallCount;
@property (readonly) bool deactivating;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSString *debugIdentifier;
@property (nonatomic, readonly) <HKQueryDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=_filter, nonatomic, readonly) _HKFilter *filter;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) HKObjectType *objectType;
@property (nonatomic, retain) NSPredicate *predicate;
@property (nonatomic) long long qualityOfService;
@property (nonatomic, readonly, copy) NSArray *queryDescriptors;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (readonly) HKSampleType *sampleType;
@property (nonatomic) bool shouldSuppressDataCollection;
@property (readonly) Class superclass;

// Image: /System/Library/Frameworks/HealthKit.framework/HealthKit

+ (id)_cachedInterfaceForProtocol:(id)arg1 configurationHandler:(id /* block */)arg2;
+ (id)_predicateForObjectsFromAppleWatches;
+ (id)_predicateForObjectsWithMinOSBuildVersion:(id)arg1 maxOSBuildVersion:(id)arg2;
+ (id)_predicateForWorkoutStatisticsWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 keyPathPrefix:(id)arg3 quantity:(id)arg4;
+ (id)clientInterface;
+ (id)clientInterfaceProtocol;
+ (Class)configurationClass;
+ (void)configureClientInterface:(id)arg1;
+ (void)configureServerInterface:(id)arg1;
+ (id)predicateForActivityCachesBetweenStartDateComponents:(id)arg1 endDateComponents:(id)arg2;
+ (id)predicateForActivitySummariesBetweenStartDateComponents:(id)arg1 endDateComponents:(id)arg2;
+ (id)predicateForActivitySummariesWithActivityMoveMode:(long long)arg1;
+ (id)predicateForActivitySummaryWithDateComponents:(id)arg1;
+ (id)predicateForCategorySamplesEqualToValues:(id)arg1;
+ (id)predicateForCategorySamplesWithOperatorType:(unsigned long long)arg1 value:(long long)arg2;
+ (id)predicateForClinicalRecordsFromSource:(id)arg1 FHIRResourceType:(id)arg2 identifier:(id)arg3;
+ (id)predicateForClinicalRecordsWithFHIRResourceType:(id)arg1;
+ (id)predicateForCreationDateWithTodayViewRange:(id)arg1;
+ (id)predicateForDiagnosticTestResultCategory:(id)arg1;
+ (id)predicateForDiagnosticTestResultWithReferenceRangeStatus:(long long)arg1;
+ (id)predicateForElectrocardiogramsWithClassification:(long long)arg1;
+ (id)predicateForElectrocardiogramsWithPrivateClassification:(unsigned long long)arg1;
+ (id)predicateForElectrocardiogramsWithSymptomsStatus:(long long)arg1;
+ (id)predicateForFitnessFriendAchievementsForFriendUUID:(id)arg1;
+ (id)predicateForFitnessFriendActivitySnapshotsForFriendUUID:(id)arg1;
+ (id)predicateForFitnessFriendWorkoutsForFriendUUID:(id)arg1;
+ (id)predicateForListUserDomainConceptWithListType:(unsigned long long)arg1;
+ (id)predicateForListUserDomainConceptsWithListTypes:(id)arg1;
+ (id)predicateForMedicalRecordWithOriginType:(unsigned long long)arg1;
+ (id)predicateForMedicalRecordWithState:(unsigned long long)arg1;
+ (id)predicateForMedicalRecordsAssociatedWithMedicalUserDomainConcept:(id)arg1;
+ (id)predicateForMedicalRecordsWithSignedClinicalDataOriginIdentifier:(id)arg1;
+ (id)predicateForMedicalUserDomainConceptWithCategoryType:(long long)arg1;
+ (id)predicateForMedicalUserDomainConceptsByResolvingConceptResolutionDefinition:(id)arg1;
+ (id)predicateForMedicalUserDomainConceptsMappingToSampleWithUUID:(id)arg1;
+ (id)predicateForMedicalUserDomainConceptsMappingToSampleWithUUIDs:(id)arg1;
+ (id)predicateForMedicalUserDomainConceptsWithCategoryTypes:(id)arg1;
+ (id)predicateForMedicationDoseEventWithHashedMedicationIdentifier:(id)arg1;
+ (id)predicateForMedicationDoseEventWithHashedMedicationIdentifiers:(id)arg1;
+ (id)predicateForMedicationDoseEventWithMedicationIdentifier:(id)arg1;
+ (id)predicateForMedicationDoseEventWithMedicationIdentifiers:(id)arg1;
+ (id)predicateForMedicationDoseEventWithScheduleItemIdentifier:(id)arg1;
+ (id)predicateForMedicationDoseEventWithScheduleItemIdentifiers:(id)arg1;
+ (id)predicateForMedicationDoseEventWithStatus:(long long)arg1;
+ (id)predicateForMedicationDoseEventWithStatuses:(id)arg1;
+ (id)predicateForObjectWithUUID:(id)arg1;
+ (id)predicateForObjectsAssociatedWithElectrocardiogram:(id)arg1;
+ (id)predicateForObjectsFromContributorWithUUID:(id)arg1;
+ (id)predicateForObjectsFromDevices:(id)arg1;
+ (id)predicateForObjectsFromSource:(id)arg1;
+ (id)predicateForObjectsFromSourceRevisions:(id)arg1;
+ (id)predicateForObjectsFromSources:(id)arg1;
+ (id)predicateForObjectsFromWorkout:(id)arg1;
+ (id)predicateForObjectsWithDeviceProperty:(id)arg1 allowedValues:(id)arg2;
+ (id)predicateForObjectsWithMetadataKey:(id)arg1;
+ (id)predicateForObjectsWithMetadataKey:(id)arg1 allowedValues:(id)arg2;
+ (id)predicateForObjectsWithMetadataKey:(id)arg1 operatorType:(unsigned long long)arg2 value:(id)arg3;
+ (id)predicateForObjectsWithNoCorrelation;
+ (id)predicateForObjectsWithUUIDs:(id)arg1;
+ (id)predicateForQuantitySamplesWithOperatorType:(unsigned long long)arg1 quantity:(id)arg2;
+ (id)predicateForRecordsFromClinicalAccountIdentifier:(id)arg1;
+ (id)predicateForRecordsFromGatewayWithExternalIdentifier:(id)arg1;
+ (id)predicateForRecordsWithSortDateFromStartDateComponents:(id)arg1 endDateComponents:(id)arg2;
+ (id)predicateForSamplesAssociatedWithSample:(id)arg1;
+ (id)predicateForSamplesForDayFromDate:(id)arg1 calendar:(id)arg2 options:(unsigned long long)arg3;
+ (id)predicateForSamplesWithConceptIdentifier:(id)arg1 keyPath:(id)arg2;
+ (id)predicateForSamplesWithConceptIdentifiers:(id)arg1 keyPath:(id)arg2;
+ (id)predicateForSamplesWithStartDate:(id)arg1 endDate:(id)arg2 inclusiveEndDates:(bool)arg3 options:(unsigned long long)arg4;
+ (id)predicateForSamplesWithStartDate:(id)arg1 endDate:(id)arg2 options:(unsigned long long)arg3;
+ (id)predicateForSamplesWithinDateInterval:(id)arg1 options:(unsigned long long)arg2;
+ (id)predicateForStateOfMindWithDomain:(long long)arg1;
+ (id)predicateForStateOfMindWithDomains:(id)arg1;
+ (id)predicateForStateOfMindWithLabel:(long long)arg1;
+ (id)predicateForStateOfMindWithLabels:(id)arg1;
+ (id)predicateForStateOfMindWithReflectiveInterval:(long long)arg1;
+ (id)predicateForStateOfMindWithValence:(double)arg1 operatorType:(unsigned long long)arg2;
+ (id)predicateForUserDomainConceptWithUUID:(id)arg1;
+ (id)predicateForUserDomainConceptsWithSemanticIdentifier:(id)arg1;
+ (id)predicateForUserDomainConceptsWithTypeIdentifier:(id)arg1;
+ (id)predicateForUserDomainConceptsWithTypeIdentifiers:(id)arg1;
+ (id)predicateForUserDomainConceptsWithUUIDs:(id)arg1;
+ (id)predicateForVerifiableClinicalRecordsWithRelevantDateWithinDateInterval:(id)arg1;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)arg1 duration:(double)arg2;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 averageQuantity:(id)arg3;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 maximumQuantity:(id)arg3;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 minimumQuantity:(id)arg3;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 sumQuantity:(id)arg3;
+ (id)predicateForWorkoutActivitiesWithStartDate:(id)arg1 endDate:(id)arg2 options:(unsigned long long)arg3;
+ (id)predicateForWorkoutActivitiesWithWorkoutActivityType:(unsigned long long)arg1;
+ (id)predicateForWorkoutsWithActivityPredicate:(id)arg1;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 duration:(double)arg2;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 averageQuantity:(id)arg3;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 maximumQuantity:(id)arg3;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 minimumQuantity:(id)arg3;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 quantityType:(id)arg2 sumQuantity:(id)arg3;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalDistance:(id)arg2;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalEnergyBurned:(id)arg2;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalFlightsClimbed:(id)arg2;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)arg1 totalSwimmingStrokeCount:(id)arg2;
+ (id)predicateForWorkoutsWithWorkoutActivityType:(unsigned long long)arg1;
+ (id)serverInterface;
+ (id)serverInterfaceProtocol;
+ (bool)shouldApplyAdditionalPredicateForObjectType:(id)arg1;
+ (id)taskIdentifier;

- (void).cxx_destruct;
- (id)_filter;
- (id)_filterForPredicate:(id)arg1 objectType:(id)arg2;
- (id)_initWithObjectType:(id)arg1 predicate:(id)arg2;
- (id)_initWithQueryDescriptors:(id)arg1;
- (void)_queue_activateWithHealthStore:(id)arg1 activationUUID:(id)arg2 isReactivating:(bool)arg3 completion:(id /* block */)arg4;
- (bool)_queue_deactivateWithError:(id)arg1;
- (void)_queue_finishActivationWithServerProxy:(id)arg1 activationUUID:(id)arg2 error:(id)arg3 completion:(id /* block */)arg4;
- (void)_throwInvalidArgumentExceptionIfHasBeenExecuted:(SEL)arg1;
- (void)activateWithClientQueue:(id)arg1 healthStore:(id)arg2 delegate:(id)arg3 time:(double)arg4 completion:(id /* block */)arg5;
- (long long)activationState;
- (id)activationUUID;
- (unsigned int)applicationSDKVersion;
- (id)clientQueue;
- (void)client_deliverError:(id)arg1 forQuery:(id)arg2;
- (void)connectionInterrupted;
- (void)connectionInvalidated;
- (bool)deactivate;
- (long long)deactivateCallCount;
- (bool)deactivating;
- (id)debugIdentifier;
- (id)delegate;
- (id)description;
- (id)exportedInterface;
- (bool)hasQueryUUID:(id)arg1;
- (id)objectType;
- (id)predicate;
- (long long)qualityOfService;
- (id)queryDescriptors;
- (id)queue;
- (void)queue_deactivate;
- (void)queue_deliverError:(id)arg1;
- (void)queue_dispatchToClientForUUID:(id)arg1 shouldDeactivate:(bool)arg2 block:(id /* block */)arg3;
- (void)queue_populateConfiguration:(id)arg1;
- (void)queue_queryDidDeactivate:(id)arg1;
- (void)queue_queryDidFinishActivation:(id)arg1 success:(bool)arg2 error:(id)arg3;
- (bool)queue_shouldDeactivateAfterInitialResults;
- (void)queue_validate;
- (void)reactivateWithHealthStore:(id)arg1;
- (id)remoteInterface;
- (id)sampleType;
- (void)setActivationUUID:(id)arg1;
- (void)setDebugIdentifier:(id)arg1;
- (void)setObjectType:(id)arg1;
- (void)setPredicate:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setShouldSuppressDataCollection:(bool)arg1;
- (bool)shouldSuppressDataCollection;

// Image: /System/Library/PrivateFrameworks/FitnessUI.framework/FitnessUI

+ (id)fiui_predicateForWorkoutsWithMetadataIndoor:(bool)arg1;
+ (id)fiui_predicateForWorkoutsWithMetadataSwimmingLocationType:(long long)arg1;

@end
