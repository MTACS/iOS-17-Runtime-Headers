
@interface EXConcreteExtension : NSExtension {
    NSSet * __allowedErrorClasses;
    NSBundle * __extensionBundle;
    NSMutableDictionary * __extensionContexts;
    NSMutableDictionary * __extensionExpirationIdentifiers;
    NSMutableDictionary * __extensionServiceConnections;
    NSArray * __internalPersonas;
    NSString * __localizedName;
    NSString * __localizedShortName;
    <PKPlugIn> * __plugIn;
    id /* block */  __requestPostCompletionBlock;
    id /* block */  __requestPostCompletionBlockWithItems;
    id  __stashedPlugInConnection;
    NSDictionary * _attributes;
    NSUUID * _connectionUUID;
    NSString * _extensionPointIdentifier;
    NSString * _identifier;
    NSDictionary * _infoDictionary;
    bool  _observingHostAppStateChanges;
    id /* block */  _requestCancellationBlock;
    id /* block */  _requestCompletionBlock;
    id /* block */  _requestInterruptionBlock;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _unfairLock;
    NSString * _version;
    long long  _wantsDedicatedQueue;
}

@property (setter=_setAllowedErrorClasses:, nonatomic, copy) NSSet *_allowedErrorClasses;
@property (nonatomic, readonly, retain) NSBundle *_extensionBundle;
@property (setter=_setExtensionContexts:, nonatomic, retain) NSMutableDictionary *_extensionContexts;
@property (setter=_setExtensionExpirationsIdentifiers:, nonatomic, retain) NSMutableDictionary *_extensionExpirationIdentifiers;
@property (setter=_setExtensionServiceConnections:, nonatomic, retain) NSMutableDictionary *_extensionServiceConnections;
@property (getter=_extensionState, setter=_setExtensionState:, nonatomic, copy) NSDictionary *_extensionState;
@property (readonly) NSArray *_internalPersonas;
@property (readonly, copy) NSString *_localizedName;
@property (readonly, copy) NSString *_localizedShortName;
@property (setter=_setPlugIn:, retain) <PKPlugIn> *_plugIn;
@property (copy) id /* block */ _requestPostCompletionBlock;
@property (copy) id /* block */ _requestPostCompletionBlockWithItems;
@property (retain) id _stashedPlugInConnection;
@property (nonatomic, copy) NSUUID *connectionUUID;
@property (getter=_isObservingHostAppStateChanges, setter=_setObservingHostAppStateChanges:, nonatomic) bool observingHostAppStateChanges;
@property (readonly) double requestTeardownDelay;
@property (nonatomic) long long wantsDedicatedQueue;

+ (id)_dictionaryIncludingOnlyItemsWithRegisteredTypeIdentifier:(id)arg1 fromMatchingDictionary:(id)arg2;
+ (bool)_evaluateActivationRule:(id)arg1 withDictionaryIfItMatchesActiveWebPageAlternative:(id)arg2 matchResult:(out long long*)arg3;
+ (bool)_evaluateActivationRule:(id)arg1 withInputItemsIfTheyMatchActiveWebPageAlternative:(id)arg2 matchResult:(out long long*)arg3;
+ (bool)_evaluateActivationRuleWithoutWorkarounds:(id)arg1 withExtensionItemsRepresentation:(id)arg2;
+ (bool)_genericValuesMatchActiveWebPageAlternativeWithExtensionItems:(id)arg1 attachmentsLens:(id /* block */)arg2 registeredTypeIdentifiersLens:(id /* block */)arg3 isActiveWebPageAttachmentCheck:(id /* block */)arg4;
+ (id)_inputItemsByApplyingActiveWebPageAlternative:(id)arg1 ifNeededByActivationRule:(id)arg2;
+ (bool)_inputItemsMatchActiveWebPageAlternative:(id)arg1;
+ (bool)_matchingDictionaryMatchesActiveWebPageAlternative:(id)arg1;
+ (bool)_shouldLogExtensionDiscovery;
+ (id)beginMatchingExtensionsWithAttributes:(id)arg1 completion:(id /* block */)arg2;
+ (void)endMatchingExtensions:(id)arg1;
+ (bool)evaluateActivationRule:(id)arg1 withExtensionItemsRepresentation:(id)arg2;
+ (id)extensionWithIdentifier:(id)arg1 error:(id*)arg2;
+ (id)extensionWithIdentifier:(id)arg1 excludingDisabledExtensions:(bool)arg2 error:(id*)arg3;
+ (void)extensionWithURL:(id)arg1 completion:(id /* block */)arg2;
+ (void)extensionWithUUID:(id)arg1 completion:(id /* block */)arg2;
+ (void)extensionsWithMatchingAttributes:(id)arg1 completion:(id /* block */)arg2;
+ (id)extensionsWithMatchingAttributes:(id)arg1 error:(id*)arg2;
+ (void)extensionsWithMatchingAttributes:(id)arg1 synchronously:(bool)arg2 completion:(id /* block */)arg3;
+ (id)globalStateQueueForExtension:(id)arg1;
+ (void)initialize;
+ (void)initializeFiltering;
+ (id)predicateForActivationRule:(id)arg1;

- (void).cxx_destruct;
- (id)_allowedErrorClasses;
- (id)_bareExtensionServiceConnection;
- (void)_beginExtensionRequest:(id)arg1 completion:(id /* block */)arg2;
- (id)_beginExtensionRequest:(id)arg1 error:(id*)arg2;
- (bool)_beginUsingAndCreateExtensionAssertionWithRequest:(id)arg1 error:(id*)arg2;
- (void)_cancelRequestWithError:(id)arg1 forExtensionContextWithUUID:(id)arg2 completion:(id /* block */)arg3;
- (void)_completeRequestReturningItems:(id)arg1 forExtensionContextWithUUID:(id)arg2 completion:(id /* block */)arg3;
- (void)_didCreateExtensionContext:(id)arg1;
- (void)_didShowExtensionManagementInterface;
- (void)_didShowNewExtensionIndicator;
- (void)_dropAssertion;
- (id)_extensionBundle;
- (id)_extensionContextForUUID:(id)arg1;
- (id)_extensionContexts;
- (id)_extensionExpirationIdentifiers;
- (id)_extensionServiceConnections;
- (id)_extensionState;
- (Class)_hostContextClass;
- (void)_hostDidBecomeActiveNote:(id)arg1;
- (void)_hostDidEnterBackgroundNote:(id)arg1;
- (void)_hostWillEnterForegroundNote:(id)arg1;
- (void)_hostWillResignActiveNote:(id)arg1;
- (id)_initWithPKPlugin:(id)arg1;
- (id)_internalPersonas;
- (bool)_isMarkedNew;
- (bool)_isObservingHostAppStateChanges;
- (bool)_isPhotoServiceAccessGranted;
- (bool)_isSystemExtension;
- (id)_itemProviderForPayload:(id)arg1 extensionContext:(id)arg2;
- (void)_kill:(int)arg1;
- (void)_loadItemForPayload:(id)arg1 contextIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_loadPreviewImageForPayload:(id)arg1 contextIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_localizedName;
- (id)_localizedShortName;
- (void)_openURL:(id)arg1 completion:(id /* block */)arg2;
- (id)_personas;
- (id)_plugIn;
- (int)_plugInProcessIdentifier;
- (void)_reallyBeginExtensionRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)_reallyBeginExtensionRequest:(id)arg1 synchronously:(bool)arg2 completion:(id /* block */)arg3;
- (id /* block */)_requestPostCompletionBlock;
- (id /* block */)_requestPostCompletionBlockWithItems;
- (void)_resetExtensionState;
- (void)_safelyBeginUsing:(id /* block */)arg1;
- (void)_safelyBeginUsingSynchronously:(bool)arg1 request:(id)arg2 readyHandler:(id /* block */)arg3;
- (void)_safelyBeginUsingWithRequest:(id)arg1 readyHandler:(id /* block */)arg2;
- (void)_safelyEndUsing:(id /* block */)arg1;
- (void)_safelyEndUsingRequestWithPKUUID:(id)arg1 processAssertion:(id)arg2 continuation:(id /* block */)arg3;
- (void)_setAllowedErrorClasses:(id)arg1;
- (void)_setExtensionContexts:(id)arg1;
- (void)_setExtensionExpirationsIdentifiers:(id)arg1;
- (void)_setExtensionServiceConnections:(id)arg1;
- (void)_setExtensionState:(id)arg1;
- (void)_setObservingHostAppStateChanges:(bool)arg1;
- (void)_setPlugIn:(id)arg1;
- (id)_stashedPlugInConnection;
- (bool)_wantsProcessPerRequest;
- (bool)attemptOptIn:(id*)arg1;
- (bool)attemptOptOut:(id*)arg1;
- (id)attributes;
- (void)beginExtensionRequestWithInputItems:(id)arg1 completion:(id /* block */)arg2;
- (id)beginExtensionRequestWithInputItems:(id)arg1 error:(id*)arg2;
- (void)beginExtensionRequestWithInputItems:(id)arg1 listenerEndpoint:(id)arg2 completion:(id /* block */)arg3;
- (id)beginExtensionRequestWithInputItems:(id)arg1 listenerEndpoint:(id)arg2 error:(id*)arg3;
- (void)beginExtensionRequestWithOptions:(unsigned long long)arg1 inputItems:(id)arg2 completion:(id /* block */)arg3;
- (id)beginExtensionRequestWithOptions:(unsigned long long)arg1 inputItems:(id)arg2 error:(id*)arg3;
- (void)beginExtensionRequestWithOptions:(unsigned long long)arg1 inputItems:(id)arg2 listenerEndpoint:(id)arg3 completion:(id /* block */)arg4;
- (id)beginExtensionRequestWithOptions:(unsigned long long)arg1 inputItems:(id)arg2 listenerEndpoint:(id)arg3 error:(id*)arg4;
- (void)cancelExtensionRequestWithIdentifier:(id)arg1;
- (id)connectionUUID;
- (void)dealloc;
- (id)description;
- (id)extensionContexts;
- (id)extensionPointIdentifier;
- (unsigned long long)hash;
- (id)icons;
- (id)identifier;
- (id)infoDictionary;
- (id)init;
- (bool)isEqual:(id)arg1;
- (bool)makeExtensionContextAndXPCConnectionForRequest:(id)arg1 error:(id*)arg2;
- (id)objectForInfoDictionaryKey:(id)arg1;
- (bool)optedIn;
- (int)pidForRequestIdentifier:(id)arg1;
- (id /* block */)requestCancellationBlock;
- (id /* block */)requestCompletionBlock;
- (id /* block */)requestInterruptionBlock;
- (double)requestTeardownDelay;
- (void)setConnectionUUID:(id)arg1;
- (void)setRequestCancellationBlock:(id /* block */)arg1;
- (void)setRequestCompletionBlock:(id /* block */)arg1;
- (void)setRequestInterruptionBlock:(id /* block */)arg1;
- (void)setWantsDedicatedQueue:(long long)arg1;
- (void)set_requestPostCompletionBlock:(id /* block */)arg1;
- (void)set_requestPostCompletionBlockWithItems:(id /* block */)arg1;
- (void)set_stashedPlugInConnection:(id)arg1;
- (id)version;
- (long long)wantsDedicatedQueue;

@end
