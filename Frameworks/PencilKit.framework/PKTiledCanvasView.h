
@interface PKTiledCanvasView : UIView <PKControllerDelegate, PKDrawingGestureRecognizerDelegate, PKDrawingGestureTarget, PKShapeDrawingControllerDelegate> {
    double  __fixedDrawingScale;
    struct CGSize { 
        double width; 
        double height; 
    }  __fixedPixelSize;
    struct CGPoint { 
        double x; 
        double y; 
    }  __oldEraseLocation;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  __replayCoordinateSystemTransform;
    PKAlternativeStrokesAnimation * _alternativeStrokesAnimation;
    UIColor * _canvasBackgroundColor;
    struct CGPoint { 
        double x; 
        double y; 
    }  _canvasOffset;
    struct { 
        unsigned int delegateSupportsDrawingDidChange : 1; 
        unsigned int delegateSupportsWillBeginNewStrokeWithTouchLocation : 1; 
        unsigned int delegateSupportsBeganStroke : 1; 
        unsigned int delegateSupportsCancelledStroke : 1; 
        unsigned int delegateSupportsEndedStroke : 1; 
        unsigned int delegateSupportsEndedStrokeShapeStrokes : 1; 
        unsigned int delegateSupportsWillBeginDrawing : 1; 
        unsigned int delegateSupportsDidBeginDrawing : 1; 
        unsigned int delegateSupportsDrawingMovedWithTouch : 1; 
        unsigned int delegateSupportsReplayDrawingMovedInputPoint : 1; 
        unsigned int delegateSupportsDidEndDrawing : 1; 
        unsigned int delegateSupportsDidFinishRenderingNewStrokes : 1; 
        unsigned int delegateSupportsShouldBeginDrawingWithTouch : 1; 
        unsigned int delegateSupportsDidEraseStrokes : 1; 
        unsigned int delegateSupportsRegisterUndoCommands : 1; 
        unsigned long long delegateSupportsTouchView; 
        unsigned int delegateSupportsDidPresentWithCanvasOffset : 1; 
        unsigned int delegateSupportsInvalidateTiles : 1; 
        unsigned int delegateSupportsHasVisibleStrokesChanged : 1; 
        unsigned int delegateSupportsShouldDisableShapeRecognition : 1; 
        unsigned int delegateSupportsInkForStroke : 1; 
        unsigned int delegateSupportsTransformForStroke : 1; 
        unsigned int delegateSupportsShouldDelayDrawingBeganWithTouch : 1; 
        unsigned int delegateSupportsShouldCombineStrokes : 1; 
        unsigned int delegateSupportsContentCoordinateSpace : 1; 
    }  _canvasViewFlags;
    bool  _captureLiveData;
    NSUUID * _combineStrokesDrawingID;
    NSUUID * _combineStrokesRenderGroupID;
    id /* block */  _combineTimeoutBlock;
    unsigned long long  _combiningStrokesCount;
    PKDrawing * _currentDrawingBeingCopiedToCanvas;
    UITouch * _currentStrokeTouch;
    <PKTiledCanvasViewDelegate> * _delegate;
    bool  _disableAXDrawingAnnouncements;
    CADisplayLink * _displayLink;
    bool  _drawBitmapEraserMask;
    PKDrawing * _drawing;
    PKController * _drawingController;
    UIGestureRecognizer<PKDrawingGestureRecognizerProtocol> * _drawingGestureRecognizer;
    double  _drawingStartTimestamp;
    bool  _enableCanvasOffsetSupport;
    NSMutableArray * _fadeOutStrokeAnimations;
    PKStrokeGenerator * _fallbackStrokeGenerator;
    NSMutableArray * _finishedStrokes;
    bool  _generateLiveDrawing;
    bool  _hasSnapshot;
    bool  _hasVisibleStrokes;
    PKInk * _ink;
    double  _inputScale;
    bool  _isCombiningStrokes;
    bool  _isDrawing;
    bool  _isErasingObjects;
    bool  _isPreviewing;
    bool  _isUnderBlendedContent;
    PKLinedPaper * _linedPaper;
    double  _liveAnimationStartTime;
    long long  _liveInteractionCount;
    UIColor * _liveRenderingOverrideColor;
    PKInterpolateColorAnimation * _liveRenderingOverrideColorAnimation;
    struct CGSize { 
        double width; 
        double height; 
    }  _liveStrokeMaxSize;
    bool  _liveStrokeMode;
    long long  _maxNumPredictionPoints;
    PKMetalConfig * _metalConfig;
    double  _metalLayerContentsScaleOverride;
    PKMetalView * _metalView;
    unsigned long long  _numSkippedDoubleBufferedFrames;
    UIImage * _paperTexture;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _paperTransform;
    NSMutableArray * _particlesToDestinationAnimations;
    PKDrawingPowerSavingController * _powerSavingController;
    bool  _predictionDisabled;
    id /* block */  _purgeResourcesBlock;
    unsigned long long  _resourceCacheSize;
    PKRulerController * _rulerController;
    PKSelectionController * _selectionController;
    PKShapeDrawingController * _shapeDrawingController;
    bool  _shouldPause;
    bool  _singleComponent;
    bool  _sixChannelBlending;
    PKInk * _sixChannelInk;
    PKMetalFramebuffer * _snapshotFramebuffer;
    NSMutableSet * _strokeIDsToErase;
    NSMutableArray * _strokeRenderCachesToPurge;
    NSMutableSet * _strokeUUIDsAboutToBeRemoved;
    NSMutableArray * _strokesToErase;
    NSMutableArray * _transformStrokesAnimations;
    struct _UIUpdateSequenceItemInternal { } * _updateSequenceItem;
    bool  _useLuminanceColorFilter;
    bool  _usePrivateResourceHandler;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewScissor;
}

@property (nonatomic, readonly) PKController *_drawingController;
@property (nonatomic) double _fixedDrawingScale;
@property (nonatomic) struct CGSize { double x1; double x2; } _fixedPixelSize;
@property (nonatomic) struct CGPoint { double x1; double x2; } _oldEraseLocation;
@property (nonatomic, readonly) PKMetalRendererController *_rendererController;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } _replayCoordinateSystemTransform;
@property (nonatomic, readonly) PKDrawing *activeDrawing;
@property (nonatomic, retain) PKAlternativeStrokesAnimation *alternativeStrokesAnimation;
@property (nonatomic) struct CGPoint { double x1; double x2; } canvasOffset;
@property (nonatomic) bool captureLiveData;
@property (nonatomic) PKDrawing *currentDrawingBeingCopiedToCanvas;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKTiledCanvasViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableAXDrawingAnnouncements;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic) bool drawBitmapEraserMask;
@property (nonatomic, retain) PKDrawing *drawing;
@property (nonatomic, retain) UIGestureRecognizer<PKDrawingGestureRecognizerProtocol> *drawingGestureRecognizer;
@property double drawingStartTimestamp;
@property (nonatomic) bool enableCanvasOffsetSupport;
@property (nonatomic, retain) NSMutableArray *fadeOutStrokeAnimations;
@property (nonatomic) bool generateLiveDrawing;
@property (nonatomic) bool hasSnapshot;
@property (nonatomic, readonly) bool hasVisibleStrokes;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PKInk *ink;
@property (nonatomic) bool isDrawing;
@property (nonatomic) bool isErasingObjects;
@property (nonatomic) bool isPreviewing;
@property (nonatomic) bool isUnderBlendedContent;
@property (nonatomic, retain) PKLinedPaper *linedPaper;
@property (nonatomic) double liveAnimationStartTime;
@property (nonatomic, retain) UIColor *liveRenderingOverrideColor;
@property (nonatomic, retain) PKInterpolateColorAnimation *liveRenderingOverrideColorAnimation;
@property (nonatomic) struct CGSize { double x1; double x2; } liveStrokeMaxSize;
@property (nonatomic) bool liveStrokeMode;
@property (nonatomic) long long maxNumPredictionPoints;
@property (nonatomic, readonly) PKMetalConfig *metalConfig;
@property (nonatomic, readonly) CAMetalLayer *metalLayer;
@property (nonatomic) double metalLayerContentsScaleOverride;
@property (nonatomic, retain) PKMetalView *metalView;
@property (nonatomic, retain) UIImage *paperTexture;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } paperTransform;
@property (nonatomic, retain) NSMutableArray *particlesToDestinationAnimations;
@property (nonatomic, retain) PKDrawingPowerSavingController *powerSavingController;
@property (nonatomic) bool predictionDisabled;
@property (nonatomic, copy) id /* block */ purgeResourcesBlock;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } renderedStrokesBounds;
@property (nonatomic) unsigned long long resourceCacheSize;
@property (nonatomic) PKRulerController *rulerController;
@property (nonatomic) PKSelectionController *selectionController;
@property (nonatomic, retain) PKShapeDrawingController *shapeDrawingController;
@property (nonatomic) bool shouldPause;
@property (nonatomic) bool singleComponent;
@property (nonatomic) bool sixChannelBlending;
@property (nonatomic, retain) PKInk *sixChannelInk;
@property (nonatomic, retain) PKMetalFramebuffer *snapshotFramebuffer;
@property (nonatomic, readonly) PKStrokeGenerator *strokeGenerator;
@property (nonatomic, retain) NSMutableSet *strokeIDsToErase;
@property (nonatomic, retain) NSMutableArray *strokeRenderCachesToPurge;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } strokeTransform;
@property (nonatomic, retain) NSMutableSet *strokeUUIDsAboutToBeRemoved;
@property (nonatomic, retain) NSMutableArray *strokesToErase;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableArray *transformStrokesAnimations;
@property (nonatomic) bool useLuminanceColorFilter;
@property (nonatomic) bool usePrivateResourceHandler;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } viewScissor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleStrokesBounds;
@property (nonatomic, readonly) bool wantsCanvasVisible;

+ (void)initialize;
+ (void)prewarmFutureCanvasesIfNecessarySecureRendering:(bool)arg1 prewarmSharedResourceHandler:(bool)arg2;
+ (void)setupDefaults;

- (void).cxx_destruct;
- (void)_callOptionalDrawingEndedCompletion:(id /* block */)arg1 withStroke:(id)arg2 shapeStrokes:(id)arg3;
- (id)_combineStrokesDrawingUUID;
- (void)_didFinishErasingStrokes:(bool)arg1;
- (void)_didFinishHideCanvasTransaction;
- (void)_drawingBegan:(id)arg1 inputPoint:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg2 locationInView:(struct CGPoint { double x1; double x2; })arg3 forPreview:(bool)arg4 disableDetachedRendering:(bool)arg5 activeInputProperties:(unsigned long long)arg6 inputType:(long long)arg7;
- (id)_drawingController;
- (void)_drawingDisplay:(double)arg1;
- (void)_drawingEnded:(id)arg1 estimatesTimeout:(double)arg2 completion:(id /* block */)arg3;
- (void)_endAlternativeStrokeIfNecessaryAccepted:(bool)arg1;
- (void)_finishCombiningStrokesIfNecessary;
- (double)_fixedDrawingScale;
- (struct CGSize { double x1; double x2; })_fixedPixelSize;
- (void)_gestureRecognizerFailed:(id)arg1;
- (void)_handleEndOfStroke:(id)arg1 shapeStrokes:(id)arg2 groupedUndoCommands:(id)arg3 invalidateTiles:(bool)arg4;
- (bool)_hasStrokeTransformChanged;
- (id)_inkForNewStroke;
- (double)_inputScale;
- (bool)_isCombiningStrokes;
- (bool)_isLiveAnimating;
- (bool)_isShapeRecognitionEnabled;
- (struct CGSize { double x1; double x2; })_metalViewDrawableSize;
- (struct CGPoint { double x1; double x2; })_oldEraseLocation;
- (void)_postAXAnnouncement:(id)arg1;
- (void)_postBeganErasingAXAnnouncement;
- (void)_postBeganSketchingAXAnnouncement;
- (void)_postEndedErasingAXAnnouncement;
- (void)_postEndedSketchingAXAnnouncement;
- (void)_previewDrawingBegan:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 tiledViewLocation:(struct CGPoint { double x1; double x2; })arg2 disableDetachedRendering:(bool)arg3;
- (void)_previewDrawingEnded;
- (void)_previewDrawingMoved:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 tiledViewLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)_rendererController;
- (struct CGSize { double x1; double x2; })_rendererControllerPixelSize;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_replayCoordinateSystemTransform;
- (void)_replayDrawingBegan:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1;
- (void)_replayDrawingBegan:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 coordinateSpace:(id)arg2 activeInputProperties:(unsigned long long)arg3 inputType:(long long)arg4;
- (void)_replayDrawingCancelled;
- (void)_replayDrawingEnded;
- (void)_replayDrawingEndedEstimatesTimeout:(double)arg1 withBackgroundQueueCompletion:(id /* block */)arg2;
- (void)_replayDrawingEndedWithBackgroundQueueCompletion:(id /* block */)arg1;
- (void)_replayDrawingMoved:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1;
- (void)_replayDrawingMoved:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 coordinateSpace:(id)arg2;
- (void)_replayEstimatedPropertiesUpdated:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1;
- (void)_setDrawing:(id)arg1 tiles:(id)arg2 image:(struct CGImage { }*)arg3 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 completionBlock:(id /* block */)arg5;
- (void)_setDrawing:(id)arg1 tiles:(id)arg2 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 snapshotTexture:(id)arg4 snapshotTextureTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 completionBlock:(id /* block */)arg6;
- (void)_setFixedPointSize:(struct CGSize { double x1; double x2; })arg1 drawingScale:(double)arg2;
- (void)_startDisplayLink;
- (void)_stopDisplayLink;
- (id)_strokeUUIDsForStrokes:(id)arg1;
- (id)_touchView;
- (void)_updateMetalLayerOpacity;
- (void)_updateMetalLayerOpacityForceNonOpaqueSixChannel:(bool)arg1;
- (id)activeDrawing;
- (void)adjustedPixelSize:(struct CGSize { double x1; double x2; }*)arg1 drawingSize:(struct CGSize { double x1; double x2; }*)arg2;
- (id)alternativeStrokesAnimation;
- (void)animateStrokes:(id)arg1 destinationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 duration:(double)arg3 particles:(bool)arg4;
- (struct CGPoint { double x1; double x2; })applyTransformToTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)cancelCurrentStroke;
- (void)cancelPurgeResourcesBlock;
- (struct CGPoint { double x1; double x2; })canvasOffset;
- (bool)captureLiveData;
- (void)checkAnimationsDidEndAtTime:(double)arg1;
- (id)currentDrawingBeingCopiedToCanvas;
- (id)currentStroke;
- (id)currentStrokeWithStrokeDataCopy;
- (void)dealloc;
- (void)delayCompletionBlockUntilPresentation:(id /* block */)arg1;
- (id)delegate;
- (void)didEndLiveInteractionWithStrokes:(id)arg1 drawing:(id)arg2 cancelled:(bool)arg3;
- (void)didEndLiveInteractionWithStrokes:(id)arg1 drawing:(id)arg2 cancelled:(bool)arg3 forPreview:(bool)arg4;
- (bool)disableAXDrawingAnnouncements;
- (id)displayLink;
- (bool)drawBitmapEraserMask;
- (id)drawing;
- (void)drawingBegan:(id)arg1;
- (void)drawingCancelled;
- (void)drawingCancelledForPreview:(bool)arg1;
- (void)drawingChanged:(id)arg1;
- (void)drawingEnded:(id)arg1;
- (void)drawingEstimatedPropertiesUpdated:(id)arg1;
- (id)drawingGestureRecognizer;
- (bool)drawingGestureRecognizer:(id)arg1 shouldBeginDrawingWithTouches:(id)arg2 event:(id)arg3;
- (bool)drawingGestureRecognizer:(id)arg1 shouldDelayDrawingBeganWithTouch:(id)arg2;
- (void)drawingGestureRecognizer:(id)arg1 touchesEndedWithDrawingTouch:(id)arg2;
- (void)drawingMoved:(id)arg1 withEvent:(id)arg2;
- (double)drawingStartTimestamp;
- (bool)enableCanvasOffsetSupport;
- (void)enumerateRenderedStrokesBounds:(id /* block */)arg1;
- (void)eraseStrokesForPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)eraserBegan:(id)arg1;
- (void)eraserCancelled;
- (void)eraserEnded:(id)arg1;
- (void)eraserMoved:(id)arg1;
- (void)fadeOutAndHideStrokes:(id)arg1 duration:(double)arg2;
- (id)fadeOutStrokeAnimations;
- (bool)generateLiveDrawing;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)handleDrawingShouldPause:(bool)arg1;
- (bool)hasSnapshot;
- (bool)hasVisibleStrokes;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usePrivateResourceHandler:(bool)arg2 singleComponent:(bool)arg3 sixChannelBlending:(bool)arg4;
- (id)ink;
- (bool)isDrawing;
- (bool)isErasingObjects;
- (bool)isPreviewing;
- (bool)isUnderBlendedContent;
- (double)layerContentsScale;
- (void)layoutSubviews;
- (id)linedPaper;
- (double)liveAnimationStartTime;
- (id)liveDrawing;
- (id)liveRenderingOverrideColor;
- (id)liveRenderingOverrideColorAnimation;
- (struct CGSize { double x1; double x2; })liveStrokeMaxSize;
- (bool)liveStrokeMode;
- (void)liveStrokeParticlesToDestinationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)maxNumPredictionPoints;
- (id)metalConfig;
- (id)metalLayer;
- (double)metalLayerContentsScaleOverride;
- (id)metalView;
- (id)paperTexture;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })paperTransform;
- (id)particlesToDestinationAnimations;
- (id)powerSavingController;
- (bool)predictionDisabled;
- (id /* block */)purgeResourcesBlock;
- (void)removeStuckStrokesAndSimulateCrashIfNecessary;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })renderedStrokesBounds;
- (void)resizeBackingBuffersForPixelSize:(struct CGSize { double x1; double x2; })arg1 drawingScale:(double)arg2;
- (unsigned long long)resourceCacheSize;
- (id)rulerController;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })scaledStrokeTransform;
- (void)schedulePurgeResourcesBlock;
- (id)selectionController;
- (void)setAlternativeStrokesAnimation:(id)arg1;
- (void)setCanvasBackgroundColor:(id)arg1;
- (void)setCanvasOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCaptureLiveData:(bool)arg1;
- (void)setCurrentDrawingBeingCopiedToCanvas:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableAXDrawingAnnouncements:(bool)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setDrawBitmapEraserMask:(bool)arg1;
- (void)setDrawing:(id)arg1;
- (void)setDrawingGestureRecognizer:(id)arg1;
- (void)setDrawingStartTimestamp:(double)arg1;
- (void)setEnableCanvasOffsetSupport:(bool)arg1;
- (void)setFadeOutStrokeAnimations:(id)arg1;
- (void)setGenerateLiveDrawing:(bool)arg1;
- (void)setHasSnapshot:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setInk:(id)arg1;
- (void)setIsDrawing:(bool)arg1;
- (void)setIsDrawing:(bool)arg1 forPreview:(bool)arg2;
- (void)setIsErasingObjects:(bool)arg1;
- (void)setIsPreviewing:(bool)arg1;
- (void)setIsUnderBlendedContent:(bool)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setLiveAnimationStartTime:(double)arg1;
- (void)setLiveRenderingOverrideColor:(id)arg1;
- (void)setLiveRenderingOverrideColor:(id)arg1 animated:(bool)arg2;
- (void)setLiveRenderingOverrideColorAnimation:(id)arg1;
- (void)setLiveStrokeMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLiveStrokeMode:(bool)arg1;
- (void)setMaxNumPredictionPoints:(long long)arg1;
- (void)setMetalLayerContentsScaleOverride:(double)arg1;
- (void)setMetalView:(id)arg1;
- (void)setNeedsDrawingDisplay;
- (void)setOpaque:(bool)arg1;
- (void)setPaperTexture:(id)arg1;
- (void)setPaperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setParticlesToDestinationAnimations:(id)arg1;
- (void)setPowerSavingController:(id)arg1;
- (void)setPredictionDisabled:(bool)arg1;
- (void)setPurgeResourcesBlock:(id /* block */)arg1;
- (void)setResourceCacheSize:(unsigned long long)arg1;
- (void)setRulerController:(id)arg1;
- (void)setSelectionController:(id)arg1;
- (void)setShapeDrawingController:(id)arg1;
- (void)setShouldPause:(bool)arg1;
- (void)setSingleComponent:(bool)arg1;
- (void)setSixChannelBlending:(bool)arg1;
- (void)setSixChannelInk:(id)arg1;
- (void)setSnapshotFramebuffer:(id)arg1;
- (void)setStrokeIDsToErase:(id)arg1;
- (void)setStrokeRenderCachesToPurge:(id)arg1;
- (void)setStrokeUUIDsAboutToBeRemoved:(id)arg1;
- (void)setStrokesToErase:(id)arg1;
- (void)setTransformStrokesAnimations:(id)arg1;
- (void)setUseLuminanceColorFilter:(bool)arg1;
- (void)setUsePrivateResourceHandler:(bool)arg1;
- (void)setViewScissor:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)set_fixedDrawingScale:(double)arg1;
- (void)set_fixedPixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)set_oldEraseLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setupDisplayLink;
- (void)setupDrawing;
- (void)setupGestures;
- (void)setupMetalViewForPixelFormat:(unsigned long long)arg1 withPixelSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setupMetalViewIfNecessary;
- (void)setupViewWithPixelSize:(struct CGSize { double x1; double x2; })arg1 drawingSize:(struct CGSize { double x1; double x2; })arg2;
- (id)shapeDrawingController;
- (id)shapeDrawingControllerRendererController:(id)arg1;
- (void)shapeDrawingControllerShapeDetectionCancelled:(id)arg1;
- (void)shapeDrawingControllerShapeGestureDetected:(id)arg1;
- (bool)shouldPause;
- (bool)singleComponent;
- (bool)sixChannelBlending;
- (id)sixChannelInk;
- (id)snapshotFramebuffer;
- (id)snapshotFramebufferWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)strokeGenerator;
- (id)strokeIDsToErase;
- (id)strokeRenderCachesToPurge;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (id)strokeUUIDsAboutToBeRemoved;
- (id)strokesToErase;
- (void)testHideOldestStroke;
- (id)transformStrokesAnimations;
- (void)updateHasVisibleStrokes;
- (bool)useLuminanceColorFilter;
- (bool)usePrivateResourceHandler;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewScissor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleStrokesBounds;
- (bool)wantsCanvasVisible;
- (void)willBeginLiveInteractionWithTouch:(id)arg1;

@end
