
@interface PKPaletteView : UIView <PKPaletteHostViewDelegate, PKPaletteHostingWindowSceneObserver, PKPalettePopoverDismissing, PKPalettePopoverPresenting, PKPaletteViewStateSubject> {
    bool  __shouldTrackHoverLocationForPencilTapActions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _adjustedWindowSceneBounds;
    unsigned long long  _autoHideCorner;
    bool  _autoHideEnabled;
    UIView * _backgroundMaterialView;
    UIView * _clippingView;
    double  _compactPaletteHeight;
    PKPaletteContainerView * _containerView;
    UIScrollView * _contentScrollView;
    <PKPaletteViewDelegate> * _delegate;
    bool  _draggingEnabled;
    struct NSDirectionalEdgeInsets { 
        double top; 
        double leading; 
        double bottom; 
        double trailing; 
    }  _edgeInsetsInCompactSize;
    <PKPaletteViewHoverDelegate> * _hoverDelegate;
    bool  _ignoresSafeAreaInsetsInCompactSize;
    <PKPaletteViewInternalDelegate> * _internalDelegate;
    unsigned long long  _lastEdgeLocation;
    unsigned long long  _lastPaletteEdgePositionWhileDragging;
    NSLayoutConstraint * _paletteContainerCenterXConstraint;
    NSLayoutConstraint * _paletteContainerCenterYConstraint;
    NSLayoutConstraint * _paletteContainerCompactBottomConstraint;
    NSLayoutConstraint * _paletteContainerCompactLeftConstraint;
    NSLayoutConstraint * _paletteContainerCompactRightConstraint;
    NSLayoutConstraint * _paletteContainerCompactTopConstraint;
    NSLayoutConstraint * _paletteContainerHeightConstraint;
    NSLayoutConstraint * _paletteContainerWidthConstraint;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _palettePopoverLayoutSceneMargins;
    UIViewController * _palettePopoverPresentingController;
    long long  _palettePosition;
    double  _paletteScaleFactor;
    PKPaletteScaleFactorPolicy * _paletteScaleFactorPolicy;
    <PKPaletteViewHosting> * _paletteViewHosting;
    UIViewController * _presentationController;
    double  _shadowOpacity;
    double  _shadowRadius;
    bool  _shadowVisible;
    bool  _shouldAdjustShadowRadiusForMinimized;
    bool  _shouldExpandFromCorner;
    bool  _shouldStartUpMinimized;
    PKPaletteToolPreview * _toolPreview;
    NSLayoutConstraint * _toolPreviewCenterXConstraint;
    NSLayoutConstraint * _toolPreviewCenterYConstraint;
    NSLayoutConstraint * _toolPreviewHeightConstraint;
    bool  _toolPreviewMinimized;
    NSLayoutConstraint * _toolPreviewWidthConstraint;
}

@property (setter=_setShouldTrackHoverLocationForPencilTapActions:, nonatomic) bool _shouldTrackHoverLocationForPencilTapActions;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } adjustedWindowSceneBounds;
@property (nonatomic) unsigned long long autoHideCorner;
@property (getter=isAutoHideEnabled, nonatomic) bool autoHideEnabled;
@property (nonatomic, readonly) UIView *backgroundMaterialView;
@property (nonatomic, readonly) UIView *clippingView;
@property (nonatomic, readonly) double compactPaletteHeight;
@property (nonatomic, readonly) PKPaletteContainerView *containerView;
@property (nonatomic, readonly) UIScrollView *contentScrollView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKPaletteViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool draggingEnabled;
@property (nonatomic) struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsetsInCompactSize;
@property (readonly) unsigned long long hash;
@property (nonatomic) <PKPaletteViewHoverDelegate> *hoverDelegate;
@property (nonatomic) bool ignoresSafeAreaInsetsInCompactSize;
@property (nonatomic) <PKPaletteViewInternalDelegate> *internalDelegate;
@property (nonatomic) unsigned long long lastEdgeLocation;
@property (nonatomic, readonly) unsigned long long lastPaletteEdgePositionWhileDragging;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCenterXConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCenterYConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCompactBottomConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCompactLeftConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCompactRightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerCompactTopConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *paletteContainerWidthConstraint;
@property (nonatomic) double paletteContentAlpha;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } palettePopoverLayoutSceneMargins;
@property (nonatomic, retain) UIViewController *palettePopoverPresentingController;
@property (nonatomic, readonly) long long palettePosition;
@property (nonatomic, readonly) double paletteScaleFactor;
@property (nonatomic, readonly) PKPaletteScaleFactorPolicy *paletteScaleFactorPolicy;
@property (nonatomic) <PKPaletteViewHosting> *paletteViewHosting;
@property (nonatomic, readonly) unsigned long long paletteViewType;
@property (nonatomic) UIViewController *presentationController;
@property (nonatomic, readonly) double shadowOpacity;
@property (nonatomic, readonly) double shadowRadius;
@property (nonatomic) bool shadowVisible;
@property (nonatomic, readonly) bool shouldAdjustShadowRadiusForMinimized;
@property (nonatomic, readonly) bool shouldExpandFromCorner;
@property (nonatomic, readonly) bool shouldStartUpMinimized;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PKPaletteToolPreview *toolPreview;
@property (nonatomic, retain) NSLayoutConstraint *toolPreviewCenterXConstraint;
@property (nonatomic, retain) NSLayoutConstraint *toolPreviewCenterYConstraint;
@property (nonatomic, retain) NSLayoutConstraint *toolPreviewHeightConstraint;
@property (getter=isToolPreviewInstalled, nonatomic, readonly) bool toolPreviewInstalled;
@property (nonatomic, readonly) bool toolPreviewMatchesExpandedTool;
@property (getter=isToolPreviewMinimized, nonatomic) bool toolPreviewMinimized;
@property (nonatomic, retain) NSLayoutConstraint *toolPreviewWidthConstraint;
@property (nonatomic, readonly) bool useCompactSize;
@property (getter=isVisible, nonatomic, readonly) bool visible;

+ (id)makeBackgroundView;

- (void).cxx_destruct;
- (void)_didChangeAutoHideEnabled;
- (void)_installBackgroundViewInView:(id)arg1;
- (void)_installClippingViewInView:(id)arg1;
- (void)_installContainerViewInView:(id)arg1;
- (void)_installToolPreviewInView:(id)arg1;
- (bool)_isCompactInSmallestQuickNoteWindowScene;
- (bool)_isPaletteContentViewHidden;
- (bool)_loadOptions;
- (unsigned long long)_nextAutoHideCorner;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_palettePopoverSourceRect;
- (struct CGPoint { double x1; double x2; })_paletteViewHoverLocation;
- (id)_paletteViewHoverView;
- (void)_saveOptions;
- (void)_setContinuousCornerRadius:(double)arg1;
- (void)_setCornerRadius:(double)arg1;
- (void)_setPaletteScaleFactor:(double)arg1 notifyDidChange:(bool)arg2;
- (void)_setShouldTrackHoverLocationForPencilTapActions:(bool)arg1;
- (bool)_shouldTrackHoverLocationForPencilTapActions;
- (id)_stateDictionary;
- (void)_uninstallToolPreview;
- (void)_updateContainerSizeConstraints;
- (void)_updateContainerSizeConstraintsForEdge:(unsigned long long)arg1;
- (void)_updateContainerViewConstraints;
- (void)_updateToolPreviewScalingAnimated:(bool)arg1;
- (void)_updateToolPreviewVisibility;
- (void)_willDockPaletteToCorner:(unsigned long long)arg1;
- (void)_willDockPaletteToEdge:(unsigned long long)arg1 prepareForExpansion:(bool)arg2 isPaletteChangingOrientation:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustedWindowSceneBounds;
- (unsigned long long)autoHideCorner;
- (id)backgroundMaterialView;
- (id)borderColorForTraitCollection:(id)arg1;
- (double)borderWidthForTraitCollection:(id)arg1;
- (id)clippingView;
- (double)compactPaletteHeight;
- (void)configureForDockedAtCorner;
- (void)configureForDockedAtEdge:(unsigned long long)arg1;
- (id)containerView;
- (id)contentScrollView;
- (double)dampingRatioForThrowingFromPosition:(long long)arg1 toPosition:(long long)arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (id)delegate;
- (void)didChangePalettePositionFromPosition:(long long)arg1 toPosition:(long long)arg2;
- (void)didChangePaletteScaleFactor;
- (void)didEndAppearanceAnimation;
- (void)dismissPalettePopoverWithCompletion:(id /* block */)arg1;
- (bool)draggingEnabled;
- (struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsetsInCompactSize;
- (unsigned long long)edgeLocationToDockFromCorner:(unsigned long long)arg1;
- (void)hostView:(id)arg1 didDockPaletteToPosition:(long long)arg2;
- (void)hostView:(id)arg1 willDockPaletteToPosition:(long long)arg2 prepareForExpansion:(bool)arg3;
- (id)hoverDelegate;
- (bool)ignoresSafeAreaInsetsInCompactSize;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)internalDelegate;
- (bool)isAutoHideEnabled;
- (bool)isPalettePresentingPopover;
- (bool)isToolPreviewInstalled;
- (bool)isToolPreviewMinimized;
- (bool)isVisible;
- (unsigned long long)lastEdgeLocation;
- (unsigned long long)lastPaletteEdgePositionWhileDragging;
- (void)layoutSubviews;
- (struct CGSize { double x1; double x2; })minimizedPaletteSize;
- (id)paletteContainerCenterXConstraint;
- (id)paletteContainerCenterYConstraint;
- (id)paletteContainerCompactBottomConstraint;
- (id)paletteContainerCompactLeftConstraint;
- (id)paletteContainerCompactRightConstraint;
- (id)paletteContainerCompactTopConstraint;
- (id)paletteContainerHeightConstraint;
- (id)paletteContainerWidthConstraint;
- (double)paletteContentAlpha;
- (void)paletteHostingWindowSceneDidChangeBounds:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })palettePopoverLayoutMargins;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })palettePopoverLayoutSceneMargins;
- (id)palettePopoverPassthroughViews;
- (unsigned long long)palettePopoverPermittedArrowDirections;
- (id)palettePopoverPresentingController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })palettePopoverSourceRectToPresentViewController:(id)arg1;
- (id)palettePopoverSourceView;
- (long long)palettePosition;
- (double)paletteScaleFactor;
- (id)paletteScaleFactorPolicy;
- (struct CGSize { double x1; double x2; })paletteSizeForEdge:(unsigned long long)arg1;
- (id)paletteViewHosting;
- (unsigned long long)paletteViewType;
- (id)presentationController;
- (double)responseForThrowingFromPosition:(long long)arg1 toPosition:(long long)arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)saveOptionsIfNecessary;
- (double)scalingFactor;
- (void)setAdjustedWindowSceneBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAutoHideCorner:(unsigned long long)arg1;
- (void)setAutoHideEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDraggingEnabled:(bool)arg1;
- (void)setEdgeInsetsInCompactSize:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setHoverDelegate:(id)arg1;
- (void)setIgnoresSafeAreaInsetsInCompactSize:(bool)arg1;
- (void)setInternalDelegate:(id)arg1;
- (void)setLastEdgeLocation:(unsigned long long)arg1;
- (void)setPaletteContainerCenterXConstraint:(id)arg1;
- (void)setPaletteContainerCenterYConstraint:(id)arg1;
- (void)setPaletteContainerCompactBottomConstraint:(id)arg1;
- (void)setPaletteContainerCompactLeftConstraint:(id)arg1;
- (void)setPaletteContainerCompactRightConstraint:(id)arg1;
- (void)setPaletteContainerCompactTopConstraint:(id)arg1;
- (void)setPaletteContainerHeightConstraint:(id)arg1;
- (void)setPaletteContainerWidthConstraint:(id)arg1;
- (void)setPaletteContentAlpha:(double)arg1;
- (void)setPalettePopoverLayoutSceneMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPalettePopoverPresentingController:(id)arg1;
- (void)setPalettePosition:(long long)arg1;
- (void)setPaletteScaleFactor:(double)arg1;
- (void)setPaletteViewHosting:(id)arg1;
- (void)setPresentationController:(id)arg1;
- (void)setShadowVisible:(bool)arg1;
- (void)setToolPreviewCenterXConstraint:(id)arg1;
- (void)setToolPreviewCenterYConstraint:(id)arg1;
- (void)setToolPreviewHeightConstraint:(id)arg1;
- (void)setToolPreviewMinimized:(bool)arg1;
- (void)setToolPreviewMinimized:(bool)arg1 animated:(bool)arg2;
- (void)setToolPreviewWidthConstraint:(id)arg1;
- (double)shadowOpacity;
- (double)shadowRadius;
- (bool)shadowVisible;
- (bool)shouldAdjustShadowRadiusForMinimized;
- (bool)shouldExpandFromCorner;
- (bool)shouldPalettePresentPopover;
- (bool)shouldStartUpMinimized;
- (id)toolPreview;
- (id)toolPreviewCenterXConstraint;
- (id)toolPreviewCenterYConstraint;
- (id)toolPreviewHeightConstraint;
- (bool)toolPreviewMatchesExpandedTool;
- (id)toolPreviewView;
- (id)toolPreviewWidthConstraint;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updatePalettePopover:(id)arg1;
- (void)updatePopoverUI;
- (bool)useCompactSize;
- (bool)wantsCustomPalettePopoverPresentationSource;
- (bool)wantsToolPreviewForTraitCollection:(id)arg1;
- (void)willStartAppearanceAnimation:(bool)arg1;

@end
