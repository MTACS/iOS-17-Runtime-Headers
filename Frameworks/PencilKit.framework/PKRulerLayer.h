
@interface PKRulerLayer : CALayer <UIGestureRecognizerDelegate> {
    double  _currentTValueForSnappedDrawing;
    NSTimer * _imageTransformTimer;
    double  _initialDrawingBoundsYOrigin;
    bool  _isExpandedInline;
    bool  _isInlineResizing;
    bool  _isRulerDrawingMovingToEndOfRuler;
    double  _maxTValueForSnappedDrawing;
    double  _minTValueForSnappedDrawing;
    double  _originTValueForSnappedDrawing;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _previousRulerTransform;
    double  _rulerAlpha;
    CALayer * _rulerAngleMarker;
    CATextLayer * _rulerAngleText;
    CALayer * _rulerAngleTick;
    PKRulerController * _rulerController;
    CALayer * _rulerDistanceHUD;
    CATextLayer * _rulerDistanceText;
    CALayer * _rulerLayer;
    double  _rulerZoomStartCenterTValueOnScreen;
    double  _rulerZoomStartScale;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerZoomStartTransform;
    bool  _zooming;
}

@property (nonatomic) double currentTValueForSnappedDrawing;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSTimer *imageTransformTimer;
@property (nonatomic) double initialDrawingBoundsYOrigin;
@property (nonatomic) bool isExpandedInline;
@property (nonatomic) bool isInlineResizing;
@property (nonatomic) bool isRulerDrawingMovingToEndOfRuler;
@property (nonatomic) double maxTValueForSnappedDrawing;
@property (nonatomic) double minTValueForSnappedDrawing;
@property (nonatomic) double originTValueForSnappedDrawing;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } previousRulerTransform;
@property (nonatomic) double rulerAlpha;
@property (nonatomic, retain) CALayer *rulerAngleMarker;
@property (nonatomic, retain) CATextLayer *rulerAngleText;
@property (nonatomic, retain) CALayer *rulerAngleTick;
@property (nonatomic) PKRulerController *rulerController;
@property (nonatomic, retain) CALayer *rulerDistanceHUD;
@property (nonatomic, retain) CATextLayer *rulerDistanceText;
@property (nonatomic, retain) CALayer *rulerLayer;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerTransform;
@property (nonatomic) double rulerZoomStartCenterTValueOnScreen;
@property (nonatomic) double rulerZoomStartScale;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerZoomStartTransform;
@property (readonly) Class superclass;
@property (nonatomic) bool zooming;

- (void).cxx_destruct;
- (double)_distanceMarkerFontSize;
- (double)_fontSizeForRulerTextHUD:(id)arg1;
- (id)_rulerImage;
- (id)_textForRulerHUD:(double)arg1;
- (id)addOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 toOpacity:(double)arg3;
- (void)addScaleAndOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4 fromAlpha:(double)arg5 toAlpha:(double)arg6;
- (id)addScaleAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4;
- (void)animationDidStop:(id)arg1 finished:(bool)arg2;
- (bool)compactRuler;
- (long long)currentAngle;
- (double)currentTValueForSnappedDrawing;
- (struct CGPoint { double x1; double x2; })getRulerCenterLineOriginAndTangent:(struct CGPoint { double x1; double x2; }*)arg1;
- (void)hideRulerAngleMarker;
- (void)hideRulerAnimated:(bool)arg1;
- (id)imageTransformTimer;
- (id)initWithRulerController:(id)arg1;
- (double)initialDrawingBoundsYOrigin;
- (bool)isExpandedInline;
- (bool)isInlineResizing;
- (bool)isRulerDrawingMovingToEndOfRuler;
- (double)maxTValueForSnappedDrawing;
- (double)minTValueForSnappedDrawing;
- (double)originTValueForSnappedDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })previousRulerTransform;
- (void)removeRulerMarkers;
- (double)rulerAlignInset;
- (double)rulerAlpha;
- (id)rulerAngleMarker;
- (id)rulerAngleText;
- (id)rulerAngleTick;
- (id)rulerController;
- (id)rulerDialImage;
- (id)rulerDialLevelImage;
- (id)rulerDistanceHUD;
- (id)rulerDistanceText;
- (id)rulerLayer;
- (double)rulerTickMarkInset;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerTransform;
- (double)rulerWidth;
- (double)rulerZoomStartCenterTValueOnScreen;
- (double)rulerZoomStartScale;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerZoomStartTransform;
- (void)setCurrentTValueForSnappedDrawing:(double)arg1;
- (void)setImageTransformFrom:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 toTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 animated:(bool)arg3 duration:(double)arg4;
- (void)setImageTransformTimer:(id)arg1;
- (void)setInitialDrawingBoundsYOrigin:(double)arg1;
- (void)setIsExpandedInline:(bool)arg1;
- (void)setIsInlineResizing:(bool)arg1;
- (void)setIsRulerDrawingMovingToEndOfRuler:(bool)arg1;
- (void)setMaxTValueForSnappedDrawing:(double)arg1;
- (void)setMinTValueForSnappedDrawing:(double)arg1;
- (void)setOriginTValueForSnappedDrawing:(double)arg1;
- (void)setPreviousRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerAlpha:(double)arg1;
- (void)setRulerAngleMarker:(id)arg1;
- (void)setRulerAngleText:(id)arg1;
- (void)setRulerAngleTick:(id)arg1;
- (void)setRulerController:(id)arg1;
- (void)setRulerDistanceHUD:(id)arg1;
- (void)setRulerDistanceText:(id)arg1;
- (void)setRulerLayer:(id)arg1;
- (void)setRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerZoomStartCenterTValueOnScreen:(double)arg1;
- (void)setRulerZoomStartScale:(double)arg1;
- (void)setRulerZoomStartTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setZooming:(bool)arg1;
- (bool)shouldUseLargestRulerTextFontSize;
- (void)showRuler;
- (void)updateAngleWithAngleMarkerPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateDistanceMarkerWithSpacing:(double)arg1;
- (void)updateImageTransform:(id)arg1;
- (void)updateRulerAlpha:(double)arg1;
- (void)updateRulerMarkerForLocation:(struct CGPoint { double x1; double x2; })arg1 firstTouch:(bool)arg2;
- (void)updateRulerTickMarkImage;
- (long long)userAngle;
- (bool)viewPointInRuler:(struct CGPoint { double x1; double x2; })arg1;
- (bool)zooming;

@end
