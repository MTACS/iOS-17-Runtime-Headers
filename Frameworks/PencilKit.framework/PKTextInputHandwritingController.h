
@interface PKTextInputHandwritingController : NSObject <PKTextInputCanvasControllerChangeObserver, PKTextInputDebugStateReporting, PKTextInputHandwritingShotDelegate, PKTextInputResultCommandDelegate, PKTextInputWritingSessionDelegate> {
    PKTextInputHandwritingShot * __activeHandwritingShot;
    PKTextInputTargetState * __activeInputTargetState;
    PKTextInputResultCommand * __activeResultCommand;
    double  __floatingBackgroundLastUpdateTime;
    NSUUID * __lastInProgressStrokeUUID;
    double  __lastInProgressStrokeUpdateTime;
    PKDrawing * __lastKnownDrawing;
    PKTextInputHandwritingShot * __possibleHandwritingShot;
    PKTextInputRecognitionManager * __recognitionManager;
    NSMutableArray * __resultCommandsQueue;
    PKTextInputWritingSession * __writingSession;
    PKTextInputCanvasController * _canvasController;
    PKTextInputCursorController * _cursorController;
    PKTextInputDebugLogController * _debugLogController;
    <PKTextInputHandwritingControllerDelegate> * _delegate;
    PKTextInputElementsController * _elementsController;
    PKTextInputFeedbackController * _feedbackController;
    PKTextInputReserveSpaceController * _reserveSpaceController;
    double  _strokeAlphaOverride;
}

@property (setter=_setActiveHandwritingShot:, nonatomic, retain) PKTextInputHandwritingShot *_activeHandwritingShot;
@property (setter=_setActiveInputTargetState:, nonatomic, retain) PKTextInputTargetState *_activeInputTargetState;
@property (setter=_setActiveResultCommand:, nonatomic, retain) PKTextInputResultCommand *_activeResultCommand;
@property (nonatomic) double _floatingBackgroundLastUpdateTime;
@property (nonatomic, copy) NSUUID *_lastInProgressStrokeUUID;
@property (nonatomic) double _lastInProgressStrokeUpdateTime;
@property (setter=_setLastKnownDrawing:, nonatomic, copy) PKDrawing *_lastKnownDrawing;
@property (setter=_setPossibleHandwritingShot:, nonatomic, retain) PKTextInputHandwritingShot *_possibleHandwritingShot;
@property (nonatomic, retain) PKTextInputRecognitionManager *_recognitionManager;
@property (nonatomic, readonly) NSMutableArray *_resultCommandsQueue;
@property (setter=_setWritingSession:, nonatomic, retain) PKTextInputWritingSession *_writingSession;
@property (nonatomic, readonly) PKTextInputCanvasController *canvasController;
@property (nonatomic, readonly) PKTextInputCursorController *cursorController;
@property (nonatomic, readonly) PKTextInputTargetState *debugActiveInputTargetState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) PKTextInputDebugLogController *debugLogController;
@property (nonatomic, readonly) PKTextInputRecognitionManager *debugRecognitionManager;
@property (nonatomic) <PKTextInputHandwritingControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) PKTextInputElementsController *elementsController;
@property (nonatomic, readonly) PKTextInputFeedbackController *feedbackController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PKTextInputReserveSpaceController *reserveSpaceController;
@property (nonatomic, readonly) double strokeAlphaOverride;
@property (readonly) Class superclass;
@property (nonatomic, readonly) long long writingState;

+ (bool)_isCorrectionResultGesture:(id)arg1;

- (void).cxx_destruct;
- (id)_activeHandwritingShot;
- (id)_activeInputTargetState;
- (id)_activeResultCommand;
- (void)_cancelInProgressStrokeFromHandwritingShots;
- (void)_cancelPendingResultCommand;
- (double)_continuousRecognitionInterval;
- (void)_createPossibleHandwritingShotIfNeeded;
- (void)_evaluateAndProcessResultCommandsQueue;
- (void)_evaluateAndProcessResultCommandsQueueImmediateCommit:(bool)arg1;
- (double)_floatingBackgroundLastUpdateTime;
- (void)_handleActiveHandwritingShotRecognitionFinished;
- (void)_handleResultCommandFinished:(id)arg1;
- (long long)_immediateCommitTypeForQueryItem:(id)arg1 handwritingShot:(id)arg2;
- (id)_lastInProgressStrokeUUID;
- (double)_lastInProgressStrokeUpdateTime;
- (id)_lastKnownDrawing;
- (void)_notifyDelegateOfResultCommandState;
- (id)_pendingResultCommand;
- (id)_possibleHandwritingShot;
- (void)_processPossibleShotIfReady;
- (id)_recognitionManager;
- (id)_resultCommandToProcessQueryItem:(id)arg1 handwritingShot:(id)arg2;
- (id)_resultCommandsQueue;
- (void)_scheduleCommitForResultCommandIfNeeded:(id)arg1;
- (void)_setActiveHandwritingShot:(id)arg1;
- (void)_setActiveInputTargetState:(id)arg1;
- (void)_setActiveResultCommand:(id)arg1;
- (void)_setLastKnownDrawing:(id)arg1;
- (void)_setPossibleHandwritingShot:(id)arg1;
- (void)_setWritingSession:(id)arg1;
- (void)_updateFloatingBackground;
- (void)_updateRecognitionManager;
- (void)_updateStrokeAlphaOverride;
- (void)_updateWritingSession;
- (bool)_wantsFloatingBackground;
- (id)_writingSession;
- (id)canvasController;
- (void)canvasController:(id)arg1 drawingDidChange:(id)arg2;
- (void)canvasControllerDidBeginDrawing:(id)arg1;
- (void)canvasControllerDidCancelStroke:(id)arg1 strokeAcceptanceState:(long long)arg2;
- (void)canvasControllerDidEndDrawing:(id)arg1;
- (void)canvasControllerEndedStroke:(id)arg1;
- (void)canvasControllerInProgressStrokeDidChange:(id)arg1;
- (void)cleanUpFromCancelledReplay;
- (void)commitNowIfPossible;
- (id)cursorController;
- (id)debugActiveInputTargetState;
- (id)debugLogController;
- (id)debugRecognitionManager;
- (id)delegate;
- (id)elementsController;
- (id)feedbackController;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })handwritingShot:(id)arg1 activePreviewRangeForElementRecognitionIdentifier:(id)arg2 queryItemStableIdentifier:(id)arg3;
- (bool)handwritingShot:(id)arg1 hasCommittedResultsInSessionToElementRecognitionIdentifier:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })handwritingShot:(id)arg1 inProgressGestureInitialSelectedRangeForElementRecognitionIdentifier:(id)arg2;
- (long long)handwritingShot:(id)arg1 lastCharacterLevelPositionForElementRecognitionIdentifier:(id)arg2;
- (id)handwritingShot:(id)arg1 preferredTargetElementForQueryItemStableIdentifier:(id)arg2 simultaneousItemStableIdentifiers:(id)arg3 proposedTargetElement:(id)arg4;
- (bool)handwritingShot:(id)arg1 shouldSuppressGesturesForStrokesBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 coordinateSpace:(id)arg3;
- (void)handwritingShot:(id)arg1 willFocusAndLoadDataForTargetElement:(id)arg2;
- (void)handwritingShotDidChangeState:(id)arg1;
- (void)handwritingShotDidOverrideStrongCursor:(id)arg1;
- (id)handwritingShotStrokeIdentifiersToExcludeFromRecognition:(id)arg1;
- (id)initWithCanvasController:(id)arg1 elementsController:(id)arg2 feedbackController:(id)arg3 reserveSpaceController:(id)arg4 debugLogController:(id)arg5 cursorController:(id)arg6;
- (void)reportDebugStateDescription:(id /* block */)arg1;
- (id)reserveSpaceController;
- (void)reserveSpaceControllerIsActiveChanged;
- (void)reserveSpaceControllerWillFocusElement:(id)arg1;
- (id)resultCommandCanvasController:(id)arg1;
- (id)resultCommandCursorController:(id)arg1;
- (id)resultCommandFeedbackController:(id)arg1;
- (void)resultCommandStateDidChange:(id)arg1;
- (id)resultCommandSupportedElementDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)set_floatingBackgroundLastUpdateTime:(double)arg1;
- (void)set_lastInProgressStrokeUUID:(id)arg1;
- (void)set_lastInProgressStrokeUpdateTime:(double)arg1;
- (void)set_recognitionManager:(id)arg1;
- (double)strokeAlphaOverride;
- (void)writingSession:(id)arg1 didEndWritingInElement:(id)arg2;
- (void)writingSession:(id)arg1 didInsertTextInElement:(id)arg2;
- (bool)writingSession:(id)arg1 elementHasPendingOperations:(id)arg2;
- (void)writingSession:(id)arg1 willBeginWritingInElement:(id)arg2;
- (long long)writingState;

@end
