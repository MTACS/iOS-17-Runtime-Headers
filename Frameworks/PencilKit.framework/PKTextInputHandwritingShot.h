
@interface PKTextInputHandwritingShot : NSObject <PKTextInputDebugStateReporting, PKTextInputRecognitionManagerDataSource> {
    bool  __didRequestTextInputElements;
    NSDictionary * __inputElementsByRecognitionID;
    NSMutableDictionary * __inputElementsContentByRecognitionID;
    double  __lastDrawingUpdateTimestamp;
    NSMutableIndexSet * __potentiallyTargetedElementRecognitionIDs;
    NSDictionary * __submittedTargetContentInfoByTargetID;
    NSArray * __submittedTextInputTargets;
    bool  _cancelled;
    PKTextInputCanvasController * _canvasController;
    bool  _cursorIsForcedStrongAtStart;
    bool  _cursorIsWeakAtStart;
    <PKTextInputHandwritingShotDelegate> * _delegate;
    PKTextInputElementsController * _elementsController;
    PKDrawing * _inputDrawing;
    PKStroke * _inputInProgressStroke;
    PKTextInputLanguageSpec * _languageSpec;
    double  _recognitionDuration;
    NSArray * _resultQueryItems;
    long long  _shotState;
    PKTextInputStrokeProvider * _strokeProvider;
    bool  _writingIsActiveAtStart;
    NSNumber * _writingSessionIdentifier;
}

@property (setter=_setDidRequestTextInputElements:, nonatomic) bool _didRequestTextInputElements;
@property (setter=_setInputElementsByRecognitionID:, nonatomic, copy) NSDictionary *_inputElementsByRecognitionID;
@property (nonatomic, readonly) NSMutableDictionary *_inputElementsContentByRecognitionID;
@property (nonatomic) double _lastDrawingUpdateTimestamp;
@property (nonatomic, retain) NSMutableIndexSet *_potentiallyTargetedElementRecognitionIDs;
@property (nonatomic, copy) NSDictionary *_submittedTargetContentInfoByTargetID;
@property (nonatomic, copy) NSArray *_submittedTextInputTargets;
@property (getter=isCancelled, nonatomic) bool cancelled;
@property (nonatomic, readonly) PKTextInputCanvasController *canvasController;
@property (nonatomic) bool cursorIsForcedStrongAtStart;
@property (nonatomic) bool cursorIsWeakAtStart;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKTextInputHandwritingShotDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) PKTextInputElementsController *elementsController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) PKDrawing *inputDrawing;
@property (nonatomic, readonly, copy) PKStroke *inputInProgressStroke;
@property (nonatomic, readonly) PKTextInputLanguageSpec *languageSpec;
@property (nonatomic) double recognitionDuration;
@property (setter=_setResultQueryItems:, nonatomic, copy) NSArray *resultQueryItems;
@property (setter=_setShotState:, nonatomic) long long shotState;
@property (nonatomic, retain) PKTextInputStrokeProvider *strokeProvider;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSArray *textInputTargets;
@property (nonatomic) bool writingIsActiveAtStart;
@property (nonatomic, copy) NSNumber *writingSessionIdentifier;

+ (int)_contentTypeFromKeyboardType:(long long)arg1;
+ (int)_contentTypeFromTextContentType:(id)arg1;

- (void).cxx_destruct;
- (int)_autoCapitalizationModeForTextInputTraits:(id)arg1;
- (int)_autoCorrectionModeForTextInputTraits:(id)arg1;
- (id)_closestInputElementForStrokeIdentifiers:(id)arg1;
- (id)_contentInfoFromElementContent:(id)arg1 textInputTarget:(id)arg2 strokeIdentifiers:(id)arg3;
- (int)_contentTypeForElementContent:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_correctableTextRangeIntersectingStrokesWithIdentifiers:(id)arg1 inInputTarget:(id)arg2 elementContent:(id)arg3;
- (bool)_didRequestTextInputElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_editingGestureCorrectableRangeForStrokeBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 InInputTarget:(id)arg2 elementContent:(id)arg3;
- (void)_evaluateSubmissionReadyness;
- (void)_fetchTextInputElementsIfNeededWithReferenceHitPoint:(struct CGPoint { double x1; double x2; })arg1 referenceSearchArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 referenceCoordSpace:(id)arg3;
- (id)_inputElementsByRecognitionID;
- (id)_inputElementsContentByRecognitionID;
- (double)_lastDrawingUpdateTimestamp;
- (void)_loadAndSaveContentFocusingIfNeededForElement:(id)arg1 referenceCanvasPoint:(struct CGPoint { double x1; double x2; })arg2 strokesBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completion:(id /* block */)arg4;
- (id)_potentiallyTargetedElementRecognitionIDs;
- (id)_protectedCharacterIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 forElementContent:(id)arg2;
- (void)_saveSubmittedTargetContentInfo:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedTextRangeForElementContent:(id)arg1 textInputTarget:(id)arg2 strokeSliceIdentifiers:(id)arg3;
- (void)_setDidRequestTextInputElements:(bool)arg1;
- (void)_setInputElementsByRecognitionID:(id)arg1;
- (void)_setResultQueryItems:(id)arg1;
- (void)_setShotState:(long long)arg1;
- (void)_setupStrokeProvider;
- (bool)_shouldTargetFirstResponderElement:(id)arg1 strokeIdentifiers:(id)arg2;
- (id)_submittedTargetContentInfoByTargetID;
- (id)_submittedTextInputTargets;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_substringReferenceRangeForStrokeCoveredRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 contentLength:(long long)arg2 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)_textContentSubstringInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 forElementContent:(id)arg2;
- (void)beginRecognitionWithRecognitionManager:(id)arg1;
- (id)canvasController;
- (int)chWritingDirectionFrom:(long long)arg1 useDefault:(bool)arg2;
- (bool)cursorIsForcedStrongAtStart;
- (bool)cursorIsWeakAtStart;
- (id)delegate;
- (id)description;
- (id)elementsController;
- (id)initWithCanvasController:(id)arg1 elementsController:(id)arg2 languageSpec:(id)arg3;
- (id)inputDrawing;
- (id)inputInProgressStroke;
- (bool)isCancelled;
- (bool)isPotentiallyTargetingElement:(id)arg1;
- (id)languageSpec;
- (double)recognitionDuration;
- (void)recognitionManager:(id)arg1 fetchContentInfoForTextInputTarget:(id)arg2 strokeIdentifiers:(id)arg3 completion:(id /* block */)arg4;
- (void)recognitionManager:(id)arg1 recognitionDidFinishWithQueryItems:(id)arg2 duration:(double)arg3;
- (id)recognitionManager:(id)arg1 textInputTargetForItemStableIdentifier:(id)arg2 strokeIdentifiers:(id)arg3 simultaneousItemStableIdentifiers:(id)arg4;
- (id)recognitionManagerStrokeProvider:(id)arg1;
- (id)recognitionManagerTextInputTargets:(id)arg1;
- (void)reportDebugStateDescription:(id /* block */)arg1;
- (id)resultQueryItems;
- (void)setCancelled:(bool)arg1;
- (void)setCursorIsForcedStrongAtStart:(bool)arg1;
- (void)setCursorIsWeakAtStart:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setInputDrawing:(id)arg1 inputInProgressStroke:(id)arg2;
- (void)setRecognitionDuration:(double)arg1;
- (void)setStrokeProvider:(id)arg1;
- (void)setWritingIsActiveAtStart:(bool)arg1;
- (void)setWritingSessionIdentifier:(id)arg1;
- (void)set_lastDrawingUpdateTimestamp:(double)arg1;
- (void)set_potentiallyTargetedElementRecognitionIDs:(id)arg1;
- (void)set_submittedTargetContentInfoByTargetID:(id)arg1;
- (void)set_submittedTextInputTargets:(id)arg1;
- (long long)shotState;
- (id)strokeProvider;
- (id)submittedTargetContentInfoForRecognitionIdentifier:(id)arg1;
- (id)textInputElementContentForRecognitionIdentifier:(id)arg1;
- (id)textInputElementForRecognitionIdentifier:(id)arg1;
- (id)textInputTargets;
- (bool)writingIsActiveAtStart;
- (id)writingSessionIdentifier;

@end
