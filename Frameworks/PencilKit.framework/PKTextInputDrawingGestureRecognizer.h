
@interface PKTextInputDrawingGestureRecognizer : UIGestureRecognizer <PKDrawingGestureRecognizerProtocol, PKDrawingReplaySupport, PKTextInputDebugStateReporting> {
    unsigned long long  _activeInputProperties;
    double  _drawStartTime;
    struct CGPoint { 
        double x; 
        double y; 
    }  _drawTouchStartPoint;
    bool  _drawingTargetIsDrawing;
    UITouch * _drawingTouch;
    id /* block */  _gestureEnvironmentResetTimeoutBlock;
    bool  _isReplaying;
    long long  _longPressState;
    id /* block */  _longPressSuccessBlock;
    id /* block */  _longPressTentativeBlock;
    id /* block */  _notMovingCancelBlock;
    long long  _panDirection;
    long long  _panState;
    bool  _requiresPastTapToBegin;
    bool  _requiresTargetElementToBegin;
    long long  _strokeAcceptanceState;
    PKTextInputElement * _targetElement;
    id /* block */  _timeoutBlock;
    double  _touchesBeganTimestamp;
    bool  _waitingForTargetElementSearch;
    <PKDrawingGestureTarget> * drawingTarget;
}

@property (nonatomic, readonly) unsigned long long activeInputProperties;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKTextInputDrawingGestureRecognizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) <PKDrawingGestureTarget> *drawingTarget;
@property (setter=_setDrawingTargetIsDrawing:, nonatomic) bool drawingTargetIsDrawing;
@property (nonatomic, retain) UITouch *drawingTouch;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isReplaying;
@property (setter=_setLongPressState:, nonatomic) long long longPressState;
@property (setter=_setPanDirection:, nonatomic) long long panDirection;
@property (setter=_setPanState:, nonatomic) long long panState;
@property (setter=_setStrokeAcceptanceState:, nonatomic) long long strokeAcceptanceState;
@property (readonly) Class superclass;
@property (nonatomic, retain) PKTextInputElement *targetElement;

+ (id)_systemGestureClassesToAvoid;

- (void).cxx_destruct;
- (void)_acceptStrokeTimeoutTriggered;
- (void)_beginDrawingIfNeeded;
- (void)_cancelLongPressTimerBlocks;
- (void)_cancelNotMovingCancellationBlock;
- (void)_cancelOrFailGesture;
- (void)_cancelScheduledStrokeAcceptanceBlock;
- (double)_distanceFromStartPositionForTouch:(id)arg1;
- (void)_drawingBegan;
- (void)_drawingEnded;
- (void)_drawingMoved:(id)arg1;
- (void)_endDrawing;
- (void)_enumerateTouchesForUpdateWithEvent:(id)arg1 block:(id /* block */)arg2;
- (void)_evaluateCancelIfNotMoving;
- (void)_evaluateMovingToBeganStateUseTimestampFromTouch:(bool)arg1;
- (bool)_gestureStartedInsideTargetElement;
- (bool)_hasMovedPastMinimumPanThresholdForTouch:(id)arg1;
- (bool)_hasMovedPastScrollThresholdForTouch:(id)arg1;
- (bool)_isValidLongPress;
- (bool)_isValidLongPressOverDuration:(double)arg1;
- (bool)_isWithinLongPressDistanceForTouch:(id)arg1;
- (void)_longPressSuccessTimerFired;
- (void)_longPressTentativeTimerFired;
- (long long)_panDirectionForTouch:(id)arg1;
- (void)_replayDrawingBegan:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1;
- (void)_replayDrawingBegan:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 coordinateSpace:(id)arg2 activeInputProperties:(unsigned long long)arg3 inputType:(long long)arg4;
- (void)_replayDrawingCancelled;
- (void)_replayDrawingEnded;
- (void)_replayDrawingMoved:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1;
- (void)_replayDrawingMoved:(struct { union { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; bool x9; long long x10; double x11; bool x12; })arg1 coordinateSpace:(id)arg2;
- (void)_scheduleLongPressTimerBlocks;
- (void)_setDrawingTargetIsDrawing:(bool)arg1;
- (void)_setLongPressState:(long long)arg1;
- (void)_setPanDirection:(long long)arg1;
- (void)_setPanState:(long long)arg1;
- (void)_setStrokeAcceptanceState:(long long)arg1;
- (void)_updateLongPressValidityForTouch:(id)arg1;
- (void)_updatePanGestureStateForTouch:(id)arg1;
- (void)_updatePanStateForCandidateElements:(id)arg1;
- (void)_updateStrokeAcceptanceStateUseTimestampFromTouch:(bool)arg1;
- (unsigned long long)activeInputProperties;
- (void)cancel;
- (void)cancelDrawing;
- (id)description;
- (id)drawingTarget;
- (bool)drawingTargetIsDrawing;
- (id)drawingTouch;
- (void)end;
- (void)finishedElementFindingWithElement:(id)arg1 candidateElements:(id)arg2;
- (bool)hasMovedPastTapUseTimestampFromTouch:(bool)arg1;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;
- (bool)isReplaying;
- (struct CGPoint { double x1; double x2; })locationInView:(id)arg1;
- (long long)longPressState;
- (long long)panDirection;
- (long long)panState;
- (void)reportDebugStateDescription:(id /* block */)arg1;
- (void)reset;
- (void)setDrawingTarget:(id)arg1;
- (void)setDrawingTouch:(id)arg1;
- (void)setIsReplaying:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setTargetElement:(id)arg1;
- (bool)shouldBeRequiredToFailByGestureRecognizer:(id)arg1;
- (long long)strokeAcceptanceState;
- (id)targetElement;
- (double)timeIntervalSinceStartOfGesture;
- (double)timeIntervalSinceTouchesBeganForTouch:(id)arg1;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesEstimatedPropertiesUpdated:(id)arg1;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;

@end
