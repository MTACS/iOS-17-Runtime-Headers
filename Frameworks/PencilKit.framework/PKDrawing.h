
@interface PKDrawing : NSObject <CHQueryDelegate, NSCopying, NSSecureCoding> {
    NSMutableArray * _cachedVisibleStrokes;
    NSArray * _forcedRecognitionLocales;
    NSUUID * _listenerID;
    NSMapTable * _ongoingQueries;
    bool  _recognitionEnabled;
    PKRecognitionSessionManager * _recognitionManager;
    CHRecognitionSession * _recognitionSession;
    PKVisualizationManager * _visualizationManager;
}

@property (nonatomic, retain) NSMutableArray *_cachedVisibleStrokes;
@property (nonatomic) long long _orientation;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <PKDrawingUUID> *ic_drawingUUID;
@property (nonatomic, retain) NSMapTable *ongoingQueries;
@property (nonatomic, retain) PKRecognitionSessionManager *recognitionManager;
@property (nonatomic, retain) CHRecognitionSession *recognitionSession;
@property (nonatomic, readonly) long long requiredContentVersion;
@property (nonatomic, readonly) NSArray *strokes;
@property (readonly) Class superclass;
@property (setter=_setUUID:, nonatomic, retain) NSUUID *uuid;
@property (nonatomic, retain) PKVisualizationManager *visualizationManager;

// Image: /System/Library/Frameworks/PencilKit.framework/PencilKit

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingBoxForStrokeArray:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingBoxForStrokes:(id)arg1;
+ (long long)_currentSerializationVersion;
+ (id)_findLeftmostStrokes:(id)arg1;
+ (id)_findRightmostStrokes:(id)arg1;
+ (id)_otherStrokesCloseToLeft:(bool)arg1 forStrokes:(id)arg2 withClosestStroke:(id)arg3;
+ (id)_upgradeDrawingData:(id)arg1 queue:(id)arg2 completionBlock:(id /* block */)arg3;
+ (id)_uuidDescriptionForStrokes:(id)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (Class)drawingClassForPaper;
+ (id)drawingStrokesFromStrokes:(id)arg1 inDrawing:(id)arg2;
+ (id)drawingWithData:(id)arg1;
+ (id)fileType;
+ (void)sortStrokes:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)visibleStrokesFromStrokes:(id)arg1 inDrawing:(id)arg2;

- (void).cxx_destruct;
- (id)CHDrawing;
- (id)_addStroke:(id)arg1;
- (id)_allStrokes;
- (id)_ascii;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bounds;
- (id)_cachedVisibleStrokes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_canvasBounds;
- (id)_clipAgainstLegacyCanvas:(id)arg1;
- (void)_clipMaskedStrokes;
- (id)_clipStroke:(id)arg1 againstPaths:(const void*)arg2;
- (id)_clipStroke:(id)arg1 newRootStroke:(id*)arg2;
- (id)_copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)_copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 ink:(id)arg3 newParent:(id*)arg4;
- (void)_copyAndAddStrokes:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)_eraseWithEraserStroke:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_eraserStrokeBounds;
- (void)_imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scale:(double)arg2 completionHandler:(id /* block */)arg3;
- (bool)_isEmpty;
- (long long)_minimumSerializationVersion;
- (bool*)_newAsciiBitfield;
- (long long)_orientation;
- (struct CGSize { double x1; double x2; })_orientedDrawingSize;
- (void)_removeStroke:(id)arg1;
- (id)_rootStrokes;
- (long long)_rootStrokesCount;
- (void)_setAllStrokes:(id)arg1;
- (void)_setUUID:(id)arg1;
- (id)_strokeForIdentifier:(id)arg1;
- (id)_strokes;
- (id)_strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3;
- (void)_teardownRecognitionObjects;
- (void)_transformAllStrokes:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformForImageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_unclippedStroke:(id)arg1;
- (void)_updateRecognitionSession;
- (void)_upgradeLegacyPenInks;
- (id)_visibleStrokeForIdentifier:(id)arg1;
- (id)_visibleStrokes;
- (void)addNewStroke:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateStrokeBounds;
- (void)cancelOngoingRecognitionRequests;
- (Class)classForCoder;
- (id)clipStroke:(id)arg1 onPlane:(id)arg2 renderMask:(id)arg3;
- (void)clipStrokesIfNeededOnQueue:(id)arg1 completion:(id /* block */)arg2;
- (bool)containsInternalStrokes;
- (id)copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyWithoutInternalStrokes;
- (id)data;
- (id)dataRepresentation;
- (void)dealloc;
- (id)debugQuickLookObject;
- (void)deleteStrokes:(id)arg1;
- (id)description;
- (void)didUpdate;
- (id)drawingByAppendingDrawing:(id)arg1;
- (id)drawingByAppendingStrokes:(id)arg1;
- (id)drawingByApplyingTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)fetchIntersectedStrokesBetweenPoint:(struct CGPoint { double x1; double x2; })arg1 otherPoint:(struct CGPoint { double x1; double x2; })arg2 visibleOnscreenStrokes:(id)arg3 completion:(id /* block */)arg4;
- (id)forcedRecognitionLocales;
- (unsigned long long)hash;
- (id)imageFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scale:(double)arg2;
- (id)indexableContent;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1 error:(id*)arg2;
- (id)initWithData:(id)arg1 loadNonInkingStrokes:(bool)arg2 error:(id*)arg3;
- (id)initWithDrawing:(id)arg1;
- (id)initWithStrokes:(id)arg1;
- (id)initWithStrokes:(id)arg1 fromDrawing:(id)arg2;
- (id)insertNewTestStroke;
- (id)intersectedStrokesAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectionType:(long long)arg2 inputType:(long long)arg3 visibleOnscreenStrokes:(id)arg4;
- (id)intersectedStrokesFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 visibleOnscreenStrokes:(id)arg2;
- (id)intersectedStrokesFromStroke:(id)arg1 visibleOnscreenStrokes:(id)arg2;
- (id)intersectedStrokesTest:(id /* block */)arg1 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 visibleOnscreenStrokes:(id)arg3;
- (void)invalidateVisibleStrokes;
- (bool)isEqual:(id)arg1;
- (unsigned long long)mergeWithDrawing:(id)arg1;
- (id)newStroke;
- (id)ongoingQueries;
- (void)performSearchQuery:(id)arg1 fullWordsOnly:(bool)arg2 caseMatchingOnly:(bool)arg3 withBlock:(id /* block */)arg4;
- (void)performSearchQuery:(id)arg1 withBlock:(id /* block */)arg2;
- (void)queryDidUpdateResult:(id)arg1;
- (bool)recognitionEnabled;
- (id)recognitionManager;
- (id)recognitionSession;
- (long long)requiredContentVersion;
- (void)setForcedRecognitionLocales:(id)arg1;
- (void)setNeedsRecognitionUpdate;
- (void)setOngoingQueries:(id)arg1;
- (void)setRecognitionEnabled:(bool)arg1;
- (void)setRecognitionManager:(id)arg1;
- (void)setRecognitionSession:(id)arg1;
- (id)setStroke:(id)arg1 hidden:(bool)arg2;
- (id)setStroke:(id)arg1 ink:(id)arg2;
- (id)setStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (void)setStrokeSubstrokes:(id)arg1;
- (void)setStrokes:(id)arg1 groupID:(id)arg2;
- (void)setStrokes:(id)arg1 hidden:(bool)arg2;
- (void)setStrokes:(id)arg1 inks:(id)arg2;
- (void)setStrokes:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (void)setVisualizationManager:(id)arg1;
- (void)set_cachedVisibleStrokes:(id)arg1;
- (void)set_canvasBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)set_orientation:(long long)arg1;
- (bool)shouldClearSelectionAfterStraightening;
- (id)sliceWithEraseStroke:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })strokeBounds;
- (Class)strokeClass;
- (Class)strokeSelectionClass;
- (id)strokes;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 minThreshold:(double)arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 onscreenVisibleStrokes:(id)arg5;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 onscreenVisibleStrokes:(id)arg3;
- (id)transformStrokes:(id)arg1 paths:(id)arg2 masks:(id)arg3;
- (void)transformStrokes:(id)arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (void)transformStrokes:(id)arg1 withTransforms:(id)arg2 concat:(bool)arg3;
- (id)undoableAddNewStrokes:(id)arg1;
- (id)undoableDeleteStrokes:(id)arg1;
- (id)undoableSetStrokes:(id)arg1 groupID:(id)arg2 actionName:(id)arg3;
- (id)undoableSetStrokes:(id)arg1 inks:(id)arg2;
- (id)undoableTransformStrokes:(id)arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (id)updateFromSlicedIntersectingIndexes:(long long*)arg1 resultNewRoots:(const id*)arg2 resultUpdatedStrokes:(const id*)arg3 count:(long long)arg4;
- (void)updateStroke:(id)arg1 indexHint:(unsigned long long)arg2;
- (id)updateStroke:(id)arg1 updater:(id /* block */)arg2;
- (void)updateStrokes:(id /* block */)arg1;
- (id)uuid;
- (id)version;
- (id)visibleStrokeForInsertingStroke:(id)arg1;
- (id)visibleStrokes;
- (id)visualizationManager;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (id)ic_drawingUUID;

@end
