
@interface PKSelectionInteraction : NSObject <UIGestureRecognizerDelegate, UIInteraction> {
    bool  __didCancelSelection;
    struct CGPoint { 
        double x; 
        double y; 
    }  __drawingBeganLocation;
    PKDrawing * _currentDrawing;
    struct CGPoint { 
        double x; 
        double y; 
    }  _currentScrollOffset;
    long long  _currentTapCount;
    long long  _currentlyDraggedKnob;
    <PKSelectionInteractionDelegate> * _delegate;
    bool  _enabled;
    NSArray * _firstStrokesInInitialStrokes;
    PKSelectionGlowRenderer * _glowRenderer;
    NSOrderedSet * _initialStrokeSelectionBeforeModification;
    PKDrawingAdjustmentKnob * _insertSpaceAffordance;
    UIPanGestureRecognizer * _insertSpaceAffordanceGesture;
    bool  _insertSpaceEnabled;
    UILongPressGestureRecognizer * _knobBrushGestureRecognizer;
    UIPanGestureRecognizer * _knobDragGestureRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _knobDragInitialLocation;
    double  _knobDragInitialTimestamp;
    long long  _knobDragMode;
    UIPanGestureRecognizer * _lassoGestureRecognizer;
    UIBezierPath * _lassoPath;
    <PKSelectionRendering> * _lassoRenderer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastDoubleTapAndDragLocation;
    double  _lastDoubleTapAndDragTimestamp;
    NSArray * _lastStrokesInInitialStrokes;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastTapLocation;
    double  _lastTapTimestamp;
    long long  _modificationType;
    UITapAndAHalfRecognizer * _modifySelectionRecognizer;
    UITapGestureRecognizer * _noOpTapGestureRecognizer;
    UITapGestureRecognizer * _progressiveTapGestureRecognizer;
    PKSelectionController * _selectionController;
    NSMutableArray * _selectionViewGestures;
    NSMutableOrderedSet * _smartSelectedStrokes;
    NSMutableArray * _tapAndDragVelocityArray;
    long long  _tapAndDragVelocityCount;
    UILongPressGestureRecognizer * _tapAndHoldToSelectLongPressGestureRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _undraggedKnobLocationInStrokeSpace;
    UIView * _view;
}

@property (nonatomic) bool _didCancelSelection;
@property (nonatomic) struct CGPoint { double x1; double x2; } _drawingBeganLocation;
@property (nonatomic, retain) PKDrawing *currentDrawing;
@property (nonatomic, readonly) bool currentSelectionHasStrokes;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKSelectionInteractionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, readonly) bool hasCurrentSelection;
@property (nonatomic, readonly) bool hasStrokesOrElementsSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSOrderedSet *initialStrokeSelectionBeforeModification;
@property (nonatomic) bool insertSpaceEnabled;
@property (nonatomic, retain) UILongPressGestureRecognizer *knobBrushGestureRecognizer;
@property (nonatomic, retain) UIPanGestureRecognizer *knobDragGestureRecognizer;
@property (nonatomic, retain) UIPanGestureRecognizer *lassoGestureRecognizer;
@property (nonatomic, retain) UITapAndAHalfRecognizer *modifySelectionRecognizer;
@property (nonatomic, retain) UITapGestureRecognizer *noOpTapGestureRecognizer;
@property (nonatomic, retain) UITapGestureRecognizer *progressiveTapGestureRecognizer;
@property (nonatomic) PKSelectionController *selectionController;
@property (nonatomic, retain) NSMutableOrderedSet *smartSelectedStrokes;
@property (readonly) Class superclass;
@property (nonatomic, retain) UILongPressGestureRecognizer *tapAndHoldToSelectLongPressGestureRecognizer;
@property (nonatomic) UIView *view;

- (void).cxx_destruct;
- (void)_addInsertSpaceAffordance;
- (void)_addInsertSpaceAffordanceGestureIfNecessary;
- (id)_adornmentLayers;
- (void)_calculateFirstAndLastStrokeForKnobPlacement;
- (void)_cancelDeferredPasteFromTappingAction;
- (void)_cleanupInsertSpaceAffordance;
- (void)_clearLiveSelectionPath;
- (id)_closestStrokesToCorner:(unsigned long long)arg1 fromStrokes:(id)arg2;
- (void)_didAddSelectionView:(id)arg1;
- (void)_didBeginDraggingSelection:(id)arg1;
- (void)_didBeginSelection:(id)arg1;
- (void)_didBrushWithKnob:(id)arg1;
- (bool)_didCancelSelection;
- (void)_didDragKnob:(id)arg1;
- (void)_didEndDraggingSelection:(id)arg1;
- (void)_didEndLassoAddingSpaceAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_didEndLassoSelectionWithPath:(id)arg1;
- (void)_didGrabInsertSpaceAffordance:(id)arg1;
- (bool)_didLongPressExternalElementAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_didSmartSelectTap:(id)arg1;
- (void)_didTapAndDrag:(id)arg1;
- (void)_dismissEditMenuIfNecessary;
- (bool)_dragShouldBeginForSession:(id)arg1;
- (struct CGPoint { double x1; double x2; })_drawingBeganLocation;
- (id)_drawingForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_eatGesture:(id)arg1;
- (id)_firstStrokesInStrokes:(id)arg1;
- (id)_gestures;
- (id)_gesturesForLiveSelection;
- (void)_handleSingleTap:(id)arg1;
- (bool)_insertSpaceAffordanceEnabled;
- (void)_intersectedStrokesInDrawing:(id)arg1 forSelectionInput:(id)arg2 existingSelection:(id)arg3 completion:(id /* block */)arg4;
- (bool)_isLassoAddingSpace:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isRepeatedTap:(id)arg1;
- (bool)_isWithinRepeatedTapTimeForGesture:(id)arg1;
- (id)_knobForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)_knobForLocation:(struct CGPoint { double x1; double x2; })arg1 forInputType:(long long)arg2;
- (id)_lastStrokesInStrokes:(id)arg1;
- (bool)_liveSelectionGestureStillActive;
- (bool)_locationShouldFlipOverLeftKnob:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_locationShouldFlipOverLeftKnob_LTR:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_locationShouldFlipOverLeftKnob_RTL:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_locationShouldFlipOverRightKnob:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_locationShouldFlipOverRightKnob_LTR:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_locationShouldFlipOverRightKnob_RTL:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_pointFromViewToStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)_pressAndHoldLinearExpand:(id)arg1;
- (void)_resetVelocityWindow;
- (void)_selectViaContinuousTapWithInput:(id)arg1;
- (bool)_selectionInteractionShouldBeginAtPoint:(struct CGPoint { double x1; double x2; })arg1 forEvent:(id)arg2 orGestureRecognizer:(id)arg3;
- (bool)_selectionInteractionShouldForwardAtPoint:(struct CGPoint { double x1; double x2; })arg1 forEvent:(id)arg2;
- (id)_selectionModifierGestures;
- (bool)_selectionShouldReceiveTouchForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)_selectionTypeForTapCount:(long long)arg1;
- (long long)_selectionTypeForVelocity:(double)arg1;
- (void)_setupGestures;
- (double)_timestampForGestureRecognizer:(id)arg1;
- (double)_timestampForTouch:(id)arg1;
- (void)_toolPickerDidShowHide:(id)arg1;
- (struct CGPoint { double x1; double x2; })_undraggedKnobLocation:(long long)arg1 forInitialStrokeBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_updateAllowedTouchTypesForLassoGR;
- (void)_updateAllowedTouchTypesForSelectedInk:(id)arg1;
- (void)_updateAllowedTouchTypesForSelectedInk:(id)arg1 hasCurrentSelection:(bool)arg2;
- (void)_updateInsertSpaceAffordancePosition;
- (void)_updateLiveLassoPath:(struct CGPath { }*)arg1;
- (void)_updateProgressiveTapSelectionWithSelectionInput:(id)arg1 existingSelection:(id)arg2;
- (void)_updateSmartSelectionWithDragToLocation:(struct CGPoint { double x1; double x2; })arg1 liveScrollOffset:(struct CGPoint { double x1; double x2; })arg2 completion:(id /* block */)arg3;
- (void)_updateSmartSelectionWithDragToLocation:(struct CGPoint { double x1; double x2; })arg1 liveScrollOffset:(struct CGPoint { double x1; double x2; })arg2 initialSelectedWord:(id)arg3 completion:(id /* block */)arg4;
- (long long)_updateSmartSelectionWithInput:(id)arg1 modificationType:(long long)arg2;
- (long long)_updateSmartSelectionWithInput:(id)arg1 modificationType:(long long)arg2 completion:(id /* block */)arg3;
- (long long)_updateSmartSelectionWithInput:(id)arg1 modificationType:(long long)arg2 liveScrollOffset:(struct CGPoint { double x1; double x2; })arg3 completion:(id /* block */)arg4;
- (void)_updateStateIfNecessaryWithOldModificationType:(long long)arg1 newModificationType:(long long)arg2;
- (void)_updateTapGestureHistoryWithLocation:(struct CGPoint { double x1; double x2; })arg1 gesture:(id)arg2;
- (void)_updateUndraggedKnobLocationForKnobDrag;
- (double)_updateVelocityWindowWithTimestamp:(double)arg1 location:(struct CGPoint { double x1; double x2; })arg2;
- (double)_updateVelocityWindowWithTouch:(id)arg1 location:(struct CGPoint { double x1; double x2; })arg2;
- (id)_visibleOnscreenStrokesForDrawing:(id)arg1;
- (void)_willRemoveSelectionView:(id)arg1;
- (struct CGPoint { double x1; double x2; })clampInputPointForSelection:(struct CGPoint { double x1; double x2; })arg1 forDrawing:(id)arg2;
- (id)currentDrawing;
- (bool)currentSelectionHasStrokes;
- (id)delegate;
- (void)didMoveToView:(id)arg1;
- (void)didResizeExternalElements;
- (void)dismissEditMenuIfNecessary;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)gesturesAllowedForPaletteState;
- (bool)hasCurrentSelection;
- (bool)hasStrokesAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)hasStrokesOrElementsSelection;
- (id)initWithSelectionController:(id)arg1;
- (id)initialStrokeSelectionBeforeModification;
- (bool)insertSpaceEnabled;
- (bool)isEnabled;
- (bool)isLTR;
- (id)knobBrushGestureRecognizer;
- (id)knobDragGestureRecognizer;
- (bool)knobsContainPoint:(struct CGPoint { double x1; double x2; })arg1 forInputType:(long long)arg2;
- (id)lassoGestureRecognizer;
- (id)modifySelectionRecognizer;
- (id)noOpTapGestureRecognizer;
- (id)progressiveTapGestureRecognizer;
- (id)selectionController;
- (void)setCurrentDrawing:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setInitialStrokeSelectionBeforeModification:(id)arg1;
- (void)setInsertSpaceEnabled:(bool)arg1;
- (void)setKnobBrushGestureRecognizer:(id)arg1;
- (void)setKnobDragGestureRecognizer:(id)arg1;
- (void)setLassoGestureRecognizer:(id)arg1;
- (void)setModifySelectionRecognizer:(id)arg1;
- (void)setNoOpTapGestureRecognizer:(id)arg1;
- (void)setProgressiveTapGestureRecognizer:(id)arg1;
- (void)setSelectionController:(id)arg1;
- (void)setSmartSelectedStrokes:(id)arg1;
- (void)setTapAndHoldToSelectLongPressGestureRecognizer:(id)arg1;
- (void)setView:(id)arg1;
- (void)set_didCancelSelection:(bool)arg1;
- (void)set_drawingBeganLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)smartSelectedStrokes;
- (id)tapAndHoldToSelectLongPressGestureRecognizer;
- (id)view;
- (void)willMoveToView:(id)arg1;

@end
