
@interface PKCanvasView : UIScrollView <PKRulerHostingDelegate, PKSelectionInteractionDelegate, PKTiledViewDelegate, PKToolPickerObserver, PKToolPickerObserverPrivate> {
    NSHashTable * __observers;
    struct { 
        unsigned int delegateCanvasViewDrawingDidChange : 1; 
        unsigned int delegateCanvasViewDidFinishRendering : 1; 
        unsigned int delegateCanvasViewDidBeginDrawing : 1; 
        unsigned int delegateCanvasViewDidEndDrawing : 1; 
        unsigned int delegateCanvasViewDidBeginUsingTool : 1; 
        unsigned int delegateCanvasViewDidEndUsingTool : 1; 
        unsigned int delegateCanvasViewBeganStroke : 1; 
        unsigned int delegateCanvasViewUpdatedStroke : 1; 
        unsigned int delegateCanvasViewEndedStroke : 1; 
        unsigned int delegateCanvasViewEndedStrokeShapeStrokes : 1; 
        unsigned int delegateCanvasViewCancelledStroke : 1; 
        unsigned int delegateShouldBeginDrawingWithTouch : 1; 
        unsigned int delegateCanvasViewDidChangeHiddenState : 1; 
        unsigned int delegateCanvasViewWillBeginDrawing : 1; 
        unsigned int delegateCanvasViewRulerHostingView : 1; 
        unsigned int delegateCanvasViewHoverShouldBeActiveAt : 1; 
        unsigned int delegateCanvasViewWillCreateSnapshot : 1; 
        unsigned int delegateCanvasViewSnapshottingDisabled : 1; 
    }  _canvasViewFlags;
    UIView * _contentView;
    bool  _disableWideGamut;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _drawingTransform;
    UIScrollView * _fixedPixelSizeScrollView;
    UIView * _fixedPixelSizeScrollViewWrapper;
    long long  _maximumSupportedContentVersion;
    PKCanvasAttachmentView * _pageView;
    <PKRulerHostingDelegate> * _rulerHostingDelegate;
    PKTiledView * _tiledView;
}

@property (setter=_setContentCoordinateSpace:, nonatomic, retain) <UICoordinateSpace> *_contentCoordinateSpace;
@property (setter=_setDisableTileRendering:, nonatomic) bool _disableTileRendering;
@property (nonatomic) bool _disableUndoManager;
@property (setter=_setDrawBitmapEraserMask:, nonatomic) bool _drawBitmapEraserMask;
@property (nonatomic, readonly) UIGestureRecognizer *_drawingGestureRecognizer;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _fixedPixelSize;
@property (nonatomic, readonly) UIHoverGestureRecognizer *_hoverGestureRecognizer;
@property (nonatomic) long long _maxFileFormatVersion;
@property (nonatomic, retain) NSHashTable *_observers;
@property (nonatomic, readonly) PKTiledView *_tiledView;
@property (nonatomic) bool allowsFingerDrawing;
@property (nonatomic, readonly) UIView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKCanvasViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableWideGamut;
@property (nonatomic, copy) PKDrawing *drawing;
@property (nonatomic, readonly) UIGestureRecognizer *drawingGestureRecognizer;
@property (nonatomic) unsigned long long drawingPolicy;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } drawingTransform;
@property (nonatomic) SEL drawingUndoSelector;
@property (nonatomic) id drawingUndoTarget;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PKInk *ink;
@property (nonatomic) long long maximumSupportedContentVersion;
@property (nonatomic, copy) PKDrawing *nonNullDrawing;
@property (nonatomic) bool predictionDisabled;
@property (getter=isRulerActive, nonatomic) bool rulerActive;
@property (nonatomic) bool rulerEnabled;
@property (nonatomic) <PKRulerHostingDelegate> *rulerHostingDelegate;
@property (nonatomic, readonly) UIView *rulerView;
@property (nonatomic, readonly) UIView *selectionView;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } strokeTransform;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsCopyAsText;
@property (nonatomic, copy) PKTool *tool;

- (void).cxx_destruct;
- (void)_addObserver:(id)arg1;
- (id)_adornmentViewsToHitTest;
- (id)_allowedDrawingTouchTypes;
- (bool)_canvasViewSnapshottingDisabled:(id)arg1;
- (void)_canvasViewWillBeginDrawing:(id)arg1;
- (void)_canvasViewWillCreateSnapshot:(id)arg1;
- (id)_contentCoordinateSpace;
- (id)_currentStroke;
- (bool)_disableTileRendering;
- (bool)_disableUndoManager;
- (bool)_drawBitmapEraserMask;
- (void)_drawingDidChange;
- (id)_drawingGestureRecognizer;
- (struct CGSize { double x1; double x2; })_fixedPixelSize;
- (void)_flushCaches;
- (void)_fullyRendered;
- (id)_getDelegateZoomView;
- (bool)_hasObserver:(id)arg1;
- (bool)_hasSelection;
- (id)_hoverGestureRecognizer;
- (double)_latestLatency;
- (long long)_maxFileFormatVersion;
- (struct CGSize { double x1; double x2; })_metalViewDrawableSize;
- (id)_observers;
- (id)_pinchGestureRecognizer;
- (void)_removeObserver:(id)arg1;
- (struct CGSize { double x1; double x2; })_rendererControllerPixelSize;
- (id)_selectionController;
- (id)_selectionInteraction;
- (void)_setChildrenBackgroundColor:(id)arg1;
- (void)_setContentCoordinateSpace:(id)arg1;
- (void)_setContentViewOpaqueBackgroundColorIfApplicable;
- (void)_setDisableTileRendering:(bool)arg1;
- (void)_setDrawBitmapEraserMask:(bool)arg1;
- (void)_setDrawing:(id)arg1 alreadyRenderedDrawing:(id)arg2 imageForAlreadyRenderedDrawing:(id)arg3 fullyRenderedCompletionBlock:(id /* block */)arg4;
- (void)_setDrawing:(id)arg1 fullyRenderedCompletionBlock:(id /* block */)arg2;
- (void)_setFixedPixelSize:(struct CGSize { double x1; double x2; })arg1 drawingScale:(double)arg2;
- (void)_setSelectedStrokesColor:(id)arg1;
- (id)_tiledView;
- (void)_toolPicker:(id)arg1 didChangeColor:(id)arg2;
- (void)_updateCanvas;
- (void)_updateChildrenOpaque;
- (bool)allowsFingerDrawing;
- (void)awakeFromNib;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)canvasView:(id)arg1 beganStroke:(id)arg2;
- (void)canvasView:(id)arg1 cancelledStroke:(id)arg2;
- (void)canvasView:(id)arg1 didChangeHiddenState:(bool)arg2;
- (void)canvasView:(id)arg1 endedStroke:(id)arg2 shapeStrokes:(id)arg3;
- (bool)canvasView:(id)arg1 hoverShouldBeActiveAt:(struct CGPoint { double x1; double x2; })arg2;
- (bool)canvasView:(id)arg1 shouldBeginDrawingWithTouch:(id)arg2;
- (void)canvasViewDidBeginDrawing:(id)arg1;
- (void)canvasViewDidEndDrawing:(id)arg1;
- (void)canvasViewDidEraseStrokes:(id)arg1;
- (void)commitSelectionIfNecessaryWithCompletion:(id /* block */)arg1;
- (id)contentView;
- (bool)disableWideGamut;
- (id)drawing;
- (id)drawingGestureRecognizer;
- (unsigned long long)drawingPolicy;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })drawingTransform;
- (SEL)drawingUndoSelector;
- (id)drawingUndoTarget;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)imageWithCompletionBlock:(id /* block */)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 drawingWidth:(double)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 drawingWidth:(double)arg2 fixedPixelSizeScrollView:(id)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fixedPixelSize:(struct CGSize { double x1; double x2; })arg2 drawingScale:(double)arg3 layerFixedPixelSize:(bool)arg4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 sixChannelBlend:(bool)arg2 snapshotView:(id)arg3;
- (id)ink;
- (bool)isRulerActive;
- (void)layoutSubviews;
- (long long)maximumSupportedContentVersion;
- (id)nonNullDrawing;
- (void)paste:(id)arg1;
- (void)performUndo:(id)arg1;
- (bool)predictionDisabled;
- (bool)rulerEnabled;
- (bool)rulerHostWantsSharedRuler;
- (id)rulerHostingDelegate;
- (id)rulerHostingView;
- (struct CGPoint { double x1; double x2; })rulerSnapLineOriginAndNormal:(struct CGPoint { double x1; double x2; }*)arg1 topSide:(bool)arg2;
- (id)rulerView;
- (id)selectionView;
- (void)setAllowsFingerDrawing:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableWideGamut:(bool)arg1;
- (void)setDrawing:(id)arg1;
- (void)setDrawingPolicy:(unsigned long long)arg1;
- (void)setDrawingTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setDrawingUndoSelector:(SEL)arg1;
- (void)setDrawingUndoTarget:(id)arg1;
- (void)setInk:(id)arg1;
- (void)setMaximumSupportedContentVersion:(long long)arg1;
- (void)setMaximumZoomScale:(double)arg1;
- (void)setNonNullDrawing:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (void)setPredictionDisabled:(bool)arg1;
- (void)setRulerActive:(bool)arg1;
- (void)setRulerEnabled:(bool)arg1;
- (void)setRulerHostingDelegate:(id)arg1;
- (void)setSupportsCopyAsText:(bool)arg1;
- (void)setTool:(id)arg1;
- (void)set_disableUndoManager:(bool)arg1;
- (void)set_fixedPixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)set_maxFileFormatVersion:(long long)arg1;
- (void)set_observers:(id)arg1;
- (void)setupDrawingWidth:(double)arg1 fixedPixelSizeScrollView:(id)arg2;
- (void)setupDrawingWidth:(double)arg1 fixedPixelSizeScrollView:(id)arg2 sixChannelBlend:(bool)arg3 drawBitmapEraserMask:(bool)arg4;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (bool)supportsCopyAsText;
- (id)tool;
- (void)toolPickerIsRulerActiveDidChange:(id)arg1;
- (void)toolPickerSelectedToolDidChange:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateFixedPixelSizeViewForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)updateSubviewsForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
