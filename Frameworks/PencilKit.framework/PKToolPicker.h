
@interface PKToolPicker : NSObject <PKCanvasViewObserver, PKPaletteViewInteractionDelegate, PKToolPickerPopoverPresentationConfiguring, PKToolPickerSelectionContext> {
    bool  __animatingToVisible;
    <PKPaletteViewAnnotationDelegate> * __annotationDelegate;
    bool  __backgroundVisible;
    bool  __canShowEllipsisButtonInCompactSize;
    bool  __contextMenuPresented;
    <PKToolPickerPrivateDelegate> * __delegate;
    bool  __doneActionResignsFirstResponder;
    struct NSDirectionalEdgeInsets { 
        double top; 
        double leading; 
        double bottom; 
        double trailing; 
    }  __edgeInsetsInCompactSize;
    NSMapTable * __firstRespondersForVisibleUI;
    bool  __ignoresSafeAreaInsetsInCompactSize;
    bool  __inputViewVisible;
    double  __interItemToolsSpacingInCompactSize;
    double  __interItemUndoRedoButtonsSpacingInCompactSize;
    PKPaletteViewInteraction * __interaction;
    long long  __numberOfToolsAfterRuler;
    NSHashTable * __observers;
    bool  __overlapsMainWindow;
    bool  __pencilInteractionEnabledWhenNotVisible;
    UIMenu * __plusButtonMenu;
    UIViewController * __plusButtonViewController;
    UIViewController * __presentationController;
    bool  __presentsDetached;
    bool  __shadowVisible;
    UIViewController * __shapeButtonViewController;
    bool  __shouldHideHoverPreviewToggle;
    bool  __shouldTrackHoverLocationForPencilTapActions;
    bool  __showsHandwritingTool;
    bool  __showsPlusButton;
    bool  __showsRuler;
    bool  __showsShapeButton;
    bool  __showsTextButton;
    <PKToolPickerPrivateDelegate> * __temporarySelectionDelegate;
    UIViewController * __textButtonViewController;
    bool  __toolPickerVisible;
    bool  __useEqualSpacingLayoutInCompactSize;
    bool  __visibilityUpdatesEnabled;
    bool  __wantsBottomLineDividerVisibleInCompactSize;
    bool  __wantsClearBackgroundColorInCompactSize;
    bool  __wantsEllipsisButtonVisibleInCompactSize;
    bool  __wantsExternalVisibility;
    bool  __wantsUndoRedoButtonsVisibleInCompactSize;
    bool  _colorSwatchesVisible;
    long long  _colorUserInterfaceStyle;
    bool  _didCalculateVisibleBeforeResponderChanges;
    NSString * _lassoToolEditingViewIdentifier;
    bool  _lassoToolEditingViewVisible;
    long long  _maximumSupportedContentVersion;
    NSMutableArray * _mutableTools;
    long long  _overrideUserInterfaceStyle;
    PKToolPickerPaletteViewDelegateProxy * _paletteViewDelegateProxy;
    bool  _prefersLargeContextualEditingUI;
    bool  _rulerActive;
    PKTool * _selectedTool;
    unsigned long long  _selectionMask;
    bool  _showsDrawingPolicyControls;
    NSString * _stateAutosaveName;
    <PKToolPickerVisibility> * _toolPickerVisibility;
    bool  _toolStatePersistenceEnabled;
    long long  _wantsToolPickerHiddenCount;
    bool  _wasVisibleBeforeResponderChanges;
}

@property (getter=_isAnimatingToVisible, nonatomic, readonly) bool _animatingToVisible;
@property (setter=_setAnnotationDelegate:, nonatomic) <PKPaletteViewAnnotationDelegate> *_annotationDelegate;
@property (setter=_setBackgroundVisible:, nonatomic) bool _backgroundVisible;
@property (nonatomic, readonly) bool _canShowEllipsisButtonInCompactSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _contentSize;
@property (getter=_isContextMenuPresented, setter=_setContextMenuPresented:, nonatomic) bool _contextMenuPresented;
@property (nonatomic, readonly) UIView *_contextualEditingView;
@property (nonatomic) <PKToolPickerPrivateDelegate> *_delegate;
@property (nonatomic) bool _didCalculateVisibleBeforeResponderChanges;
@property (setter=_setDoneActionResignsFirstResponder:, nonatomic) bool _doneActionResignsFirstResponder;
@property (setter=_setEdgeInsetsInCompactSize:, nonatomic) struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; } _edgeInsetsInCompactSize;
@property (nonatomic, retain) NSMapTable *_firstRespondersForVisibleUI;
@property (getter=_isHandwritingToolSelected, nonatomic, readonly) bool _handwritingToolSelected;
@property (setter=_setIgnoresSafeAreaInsetsInCompactSize:, nonatomic) bool _ignoresSafeAreaInsetsInCompactSize;
@property (getter=_isInputViewVisible, setter=_setInputViewVisible:, nonatomic) bool _inputViewVisible;
@property (setter=_setInterItemToolsSpacingInCompactSize:, nonatomic) double _interItemToolsSpacingInCompactSize;
@property (setter=_setInterItemUndoRedoButtonsSpacingInCompactSize:, nonatomic) double _interItemUndoRedoButtonsSpacingInCompactSize;
@property (setter=_setInteraction:, nonatomic, retain) PKPaletteViewInteraction *_interaction;
@property (nonatomic, readonly) bool _interactionIsValid;
@property (nonatomic, readonly) UIView *_lassoToolEditingView;
@property (getter=_isLassoToolEditingViewVisible, setter=_setLassoToolEditingViewVisible:, nonatomic) bool _lassoToolEditingViewVisible;
@property (getter=_isLockedHidden, nonatomic, readonly) bool _lockedHidden;
@property (setter=_setNumberOfToolsAfterRuler:, nonatomic) long long _numberOfToolsAfterRuler;
@property (nonatomic, retain) NSHashTable *_observers;
@property (setter=_setOverlapsWindow:, nonatomic) bool _overlapsMainWindow;
@property (nonatomic, readonly) PKPaletteHostView *_paletteHostView;
@property (nonatomic, readonly) long long _palettePosition;
@property (nonatomic, readonly) PKDrawingPaletteView *_paletteView;
@property (nonatomic, readonly) NSString *_paletteViewStateRestorationDefaultsKey;
@property (getter=_isPencilInteractionEnabledWhenNotVisible, nonatomic) bool _pencilInteractionEnabledWhenNotVisible;
@property (setter=_setPlusButtonMenu:, nonatomic, retain) UIMenu *_plusButtonMenu;
@property (setter=_setPlusButtonViewController:, nonatomic, retain) UIViewController *_plusButtonViewController;
@property (nonatomic, readonly) <PKToolPickerPopoverPresentationConfiguring> *_popoverPresentationConfiguration;
@property (setter=_setPresentationController:, nonatomic) UIViewController *_presentationController;
@property (setter=_setPresentsDetached:, nonatomic) bool _presentsDetached;
@property (nonatomic, readonly) double _scalingFactor;
@property (nonatomic, readonly) <PKToolPickerSelectionContext> *_selectionContext;
@property (setter=_setShadowVisible:, nonatomic) bool _shadowVisible;
@property (setter=_setShapeButtonViewController:, nonatomic, retain) UIViewController *_shapeButtonViewController;
@property (setter=_setShouldHideHoverPreviewToggle:, nonatomic) bool _shouldHideHoverPreviewToggle;
@property (setter=_setShouldTrackHoverLocationForPencilTapActions:, nonatomic) bool _shouldTrackHoverLocationForPencilTapActions;
@property (setter=_setShowsHandwritingTool:, nonatomic) bool _showsHandwritingTool;
@property (setter=_setShowsPlusButton:, nonatomic) bool _showsPlusButton;
@property (setter=_setShowsRuler:, nonatomic) bool _showsRuler;
@property (setter=_setShowsShapeButton:, nonatomic) bool _showsShapeButton;
@property (setter=_setShowsTextButton:, nonatomic) bool _showsTextButton;
@property (nonatomic) <PKToolPickerPrivateDelegate> *_temporarySelectionDelegate;
@property (setter=_setTextButtonViewController:, nonatomic, retain) UIViewController *_textButtonViewController;
@property (nonatomic) bool _toolPickerVisible;
@property (getter=_isToolStatePersistenceEnabled, setter=_setToolStatePersistenceEnabled:, nonatomic) bool _toolStatePersistenceEnabled;
@property (nonatomic, readonly) NSArray *_tools;
@property (setter=_setUseEqualSpacingLayoutInCompactSize:, nonatomic) bool _useEqualSpacingLayoutInCompactSize;
@property (setter=_setVisibilityUpdatesEnabled:, nonatomic) bool _visibilityUpdatesEnabled;
@property (setter=_setWantsBottomLineDividerVisibleInCompactSize:, nonatomic) bool _wantsBottomLineDividerVisibleInCompactSize;
@property (setter=_setWantsClearBackgroundColorInCompactSize:, nonatomic) bool _wantsClearBackgroundColorInCompactSize;
@property (setter=_setWantsEllipsisButtonVisibleInCompactSize:, nonatomic) bool _wantsEllipsisButtonVisibleInCompactSize;
@property (setter=_setWantsExternalVisibility:, nonatomic) bool _wantsExternalVisibility;
@property (setter=_setWantsUndoRedoButtonsVisibleInCompactSize:, nonatomic) bool _wantsUndoRedoButtonsVisibleInCompactSize;
@property (nonatomic) bool _wasVisibleBeforeResponderChanges;
@property (nonatomic) bool colorSwatchesVisible;
@property (nonatomic) long long colorUserInterfaceStyle;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isVisible;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } layoutSceneMargins;
@property (nonatomic) long long maximumSupportedContentVersion;
@property (nonatomic) long long overrideUserInterfaceStyle;
@property (nonatomic, retain) PKToolPickerPaletteViewDelegateProxy *paletteViewDelegateProxy;
@property (nonatomic, readonly) NSArray *passthroughViews;
@property (nonatomic, readonly) unsigned long long permittedArrowDirections;
@property (nonatomic) bool prefersLargeContextualEditingUI;
@property (getter=isRulerActive, nonatomic) bool rulerActive;
@property (nonatomic, retain) PKTool *selectedTool;
@property (nonatomic) unsigned long long selectionMask;
@property (nonatomic) bool showsDrawingPolicyControls;
@property (nonatomic, copy) NSString *stateAutosaveName;
@property (readonly) Class superclass;

+ (bool)_canBecomeVisible;
+ (bool)_canShowHandwritingTool;
+ (bool)_defaultValueForToolStatePersistenceEnabled;
+ (id)_groupByTypeEncodedTools:(id)arg1;
+ (id)_groupingIdentifierForCustomToolWithCustomIdentifier:(id)arg1;
+ (id)_groupingIdentifierForTool:(id)arg1;
+ (id)_groupingIdentifierForToolDictionary:(id)arg1;
+ (bool)_internalClassWantsToolPicker:(id)arg1 visibleForResponder:(id)arg2;
+ (void)_performWithVisibilityUpdatesEnabled:(bool)arg1 window:(id)arg2 block:(id /* block */)arg3;
+ (bool)_prefersPencilHoverPreviewEnabled;
+ (void)_setCanBecomeVisible:(bool)arg1;
+ (void)_setPrefersHoverPreviewEnabled:(bool)arg1 withCompletion:(id /* block */)arg2;
+ (void)_setPrefersPencilOnlyDrawingForiWork:(bool)arg1;
+ (bool)_textInputWantsToolPickerVisible:(id)arg1 forFirstResponder:(id)arg2;
+ (id)_toolPickerForWindow:(id)arg1;
+ (id)_windowForToolPicker:(id)arg1;
+ (id)_windowSceneForToolPicker:(id)arg1;
+ (id)activeToolPickerForWindow:(id)arg1;
+ (id)existingPaletteViewForWindow:(id)arg1;
+ (bool)isActiveToolPickerVisibleForWindow:(id)arg1;
+ (id)sharedToolPickerForWindow:(id)arg1;

- (void).cxx_destruct;
- (void)_addTool:(id)arg1;
- (void)_addTool:(id)arg1 atIndex:(long long)arg2;
- (void)_addTool:(id)arg1 updateUI:(bool)arg2;
- (id)_annotationDelegate;
- (bool)_backgroundVisible;
- (bool)_canFitOneMoreTool;
- (bool)_canInsertTool:(id)arg1;
- (bool)_canRemoveTool:(id)arg1;
- (bool)_canResetToolsFrom:(id)arg1;
- (bool)_canShowEllipsisButtonInCompactSize;
- (void)_canvasViewWillBeginDrawing:(id)arg1;
- (struct CGSize { double x1; double x2; })_contentSize;
- (id)_contextualEditingView;
- (id)_currentFirstResponder;
- (id)_delegate;
- (id)_delegateForSelector:(SEL)arg1;
- (bool)_didCalculateVisibleBeforeResponderChanges;
- (void)_disableTapInteractionWhenNotVisible;
- (void)_dismissPopovers;
- (bool)_doneActionResignsFirstResponder;
- (unsigned long long)_edgeForContextualEditingViewFromPosition:(long long)arg1;
- (struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsInCompactSize;
- (void)_enableTapInteractionForWindow:(id)arg1;
- (void)_endOpacityEditing;
- (id)_firstRespondersForVisibleUI;
- (id)_handwritingTool;
- (bool)_hasEraserTool;
- (bool)_hasHandwritingTool;
- (bool)_hasLassoTool;
- (void)_hasSeenPencilPairingUIDidChange:(id)arg1;
- (bool)_hasToolPassingTest:(id /* block */)arg1;
- (bool)_ignoresSafeAreaInsetsInCompactSize;
- (unsigned long long)_indexOfMarkerTool;
- (unsigned long long)_indexOfPencilTool;
- (void)_insertTool:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)_insertTool:(id)arg1 atIndex:(unsigned long long)arg2 updateUI:(bool)arg3;
- (double)_interItemToolsSpacingInCompactSize;
- (double)_interItemUndoRedoButtonsSpacingInCompactSize;
- (id)_interaction;
- (bool)_interactionIsValid;
- (bool)_internalClassesAcceptingFirstResponderContainsObject:(id)arg1;
- (bool)_isActiveToolPickerForWindow:(id)arg1;
- (bool)_isAnimatingToVisible;
- (bool)_isContextMenuPresented;
- (bool)_isHandwritingToolSelected;
- (bool)_isInputViewVisible;
- (bool)_isLassoToolEditingViewVisible;
- (bool)_isLockedHidden;
- (bool)_isPencilInteractionEnabledWhenNotVisible;
- (bool)_isToolStatePersistenceEnabled;
- (id)_lassoToolEditingView;
- (void)_lockHidden;
- (void)_notifyScaleFactorDidChange;
- (void)_notifySelectedToolDidChange;
- (void)_notifyVisibilityDidChangeIsAnimationFinished:(bool)arg1;
- (long long)_numberOfToolsAfterRuler;
- (id)_observers;
- (bool)_overlapsMainWindow;
- (id)_paletteAccessibilityIdentifier;
- (id)_paletteHostView;
- (long long)_palettePosition;
- (id)_paletteView;
- (id)_paletteViewStateRestorationDefaultsKey;
- (void)_performPencilPreferredActionShowColorPalette;
- (void)_performPencilPreferredActionSwitchEraser;
- (void)_performPencilPreferredActionSwitchPrevious;
- (void)_performWithVisibilityUpdatesEnabled:(bool)arg1 block:(id /* block */)arg2;
- (id)_plusButtonMenu;
- (id)_plusButtonViewController;
- (id)_popoverPresentationConfiguration;
- (id)_presentationController;
- (bool)_presentsDetached;
- (void)_recognitionLocaleIdentifierDidChange:(id)arg1;
- (void)_removeNewInks;
- (void)_removeTool:(id)arg1;
- (void)_removeTool:(id)arg1 updateUI:(bool)arg2;
- (void)_removeToolsAtIndexes:(id)arg1;
- (void)_removeToolsAtIndexes:(id)arg1 updateUI:(bool)arg2;
- (void)_resetTools:(id)arg1 selectedTool:(id)arg2;
- (void)_restoreToolPickerState;
- (void)_saveStateIfNecessary;
- (void)_saveToolPickerState;
- (double)_scalingFactor;
- (id)_selectionContext;
- (void)_setAnnotationDelegate:(id)arg1;
- (void)_setBackgroundVisible:(bool)arg1;
- (void)_setContextMenuPresented:(bool)arg1;
- (void)_setDoneActionResignsFirstResponder:(bool)arg1;
- (void)_setEdgeInsetsInCompactSize:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setIgnoresSafeAreaInsetsInCompactSize:(bool)arg1;
- (void)_setInputViewVisible:(bool)arg1;
- (void)_setInterItemToolsSpacingInCompactSize:(double)arg1;
- (void)_setInterItemUndoRedoButtonsSpacingInCompactSize:(double)arg1;
- (void)_setInteraction:(id)arg1;
- (void)_setLassoToolEditingViewVisible:(bool)arg1;
- (void)_setNumberOfToolsAfterRuler:(long long)arg1;
- (void)_setOverlapsWindow:(bool)arg1;
- (void)_setPlusButtonMenu:(id)arg1;
- (void)_setPlusButtonViewController:(id)arg1;
- (void)_setPresentationController:(id)arg1;
- (void)_setPresentsDetached:(bool)arg1;
- (void)_setSelectedTool:(id)arg1 saveState:(bool)arg2 updateUI:(bool)arg3;
- (void)_setShadowVisible:(bool)arg1;
- (void)_setShapeButtonViewController:(id)arg1;
- (void)_setShouldHideHoverPreviewToggle:(bool)arg1;
- (void)_setShouldTrackHoverLocationForPencilTapActions:(bool)arg1;
- (void)_setShowsHandwritingTool:(bool)arg1;
- (void)_setShowsPlusButton:(bool)arg1;
- (void)_setShowsRuler:(bool)arg1;
- (void)_setShowsShapeButton:(bool)arg1;
- (void)_setShowsTextButton:(bool)arg1;
- (void)_setTextButtonViewController:(id)arg1;
- (void)_setToolStatePersistenceEnabled:(bool)arg1;
- (void)_setUseEqualSpacingLayoutInCompactSize:(bool)arg1;
- (void)_setVisibilityUpdatesEnabled:(bool)arg1;
- (void)_setVisibleInWindow:(id)arg1;
- (void)_setVisibleInWindow:(id)arg1 animated:(bool)arg2 notify:(bool)arg3;
- (void)_setWantsBottomLineDividerVisibleInCompactSize:(bool)arg1;
- (void)_setWantsClearBackgroundColorInCompactSize:(bool)arg1;
- (void)_setWantsEllipsisButtonVisibleInCompactSize:(bool)arg1;
- (void)_setWantsExternalVisibility:(bool)arg1;
- (void)_setWantsUndoRedoButtonsVisibleInCompactSize:(bool)arg1;
- (bool)_shadowVisible;
- (id)_shapeButtonViewController;
- (bool)_shouldHideHoverPreviewToggle;
- (bool)_shouldTrackHoverLocationForPencilTapActions;
- (bool)_showsHandwritingTool;
- (bool)_showsPlusButton;
- (bool)_showsRuler;
- (bool)_showsShapeButton;
- (bool)_showsTextButton;
- (bool)_startOpacityEditing;
- (void)_tellDelegateToHideToolPicker;
- (id)_temporarySelectionDelegate;
- (id)_textButtonViewController;
- (void)_textInputResponderDidReloadNotification:(id)arg1;
- (bool)_toolPickerVisible;
- (id)_tools;
- (id)_toolsState;
- (void)_unlockHidden;
- (void)_updateHandwritingInputAssistantItems;
- (void)_updateNewInks;
- (void)_updatePaletteTraitCollection:(id)arg1;
- (void)_updatePaletteUserInterfaceStyle:(long long)arg1;
- (void)_updateToolPickerVisibility;
- (void)_updateToolPickerVisibilityContextMenuPresentedDidChange:(bool)arg1;
- (void)_updateUI;
- (void)_updateVisibilityForFirstResponder:(id)arg1;
- (bool)_useEqualSpacingLayoutInCompactSize;
- (id)_validatedEncodedToolsArray:(id)arg1;
- (bool)_visibilityUpdatesEnabled;
- (bool)_wantsBottomLineDividerVisibleInCompactSize;
- (bool)_wantsClearBackgroundColorInCompactSize;
- (bool)_wantsEllipsisButtonVisibleInCompactSize;
- (bool)_wantsExternalVisibility;
- (bool)_wantsUndoRedoButtonsVisibleInCompactSize;
- (bool)_wantsVisibleForFirstResponder:(id)arg1;
- (bool)_wasVisibleBeforeResponderChanges;
- (id)_windowScene;
- (void)addObserver:(id)arg1;
- (void)calculateIsVisibleBeforeResponderChangesForCurrentRunLoopIfNecessary;
- (bool)colorSwatchesVisible;
- (long long)colorUserInterfaceStyle;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameObscuredInView:(id)arg1;
- (id)init;
- (bool)isRulerActive;
- (bool)isVisible;
- (void)keyboardSceneDelegate:(id)arg1 inputViewSetVisibilityDidChange:(bool)arg2 includedReset:(bool)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })layoutSceneMargins;
- (long long)maximumSupportedContentVersion;
- (long long)overrideUserInterfaceStyle;
- (id)paletteViewDelegateProxy;
- (void)paletteViewInteractionDidActivate:(id)arg1;
- (void)paletteViewInteractionWillEnterForeground:(id)arg1;
- (id)passthroughViews;
- (unsigned long long)permittedArrowDirections;
- (bool)prefersLargeContextualEditingUI;
- (void)removeObserver:(id)arg1;
- (id)selectedTool;
- (unsigned long long)selectionMask;
- (void)setColorSwatchesVisible:(bool)arg1;
- (void)setColorUserInterfaceStyle:(long long)arg1;
- (void)setMaximumSupportedContentVersion:(long long)arg1;
- (void)setOverrideUserInterfaceStyle:(long long)arg1;
- (void)setPaletteViewDelegateProxy:(id)arg1;
- (void)setPrefersLargeContextualEditingUI:(bool)arg1;
- (void)setRulerActive:(bool)arg1;
- (void)setSelectedTool:(id)arg1;
- (void)setSelectionMask:(unsigned long long)arg1;
- (void)setShowsDrawingPolicyControls:(bool)arg1;
- (void)setStateAutosaveName:(id)arg1;
- (void)setVisibility:(long long)arg1 whenFirstResponderIsDescendantOf:(id)arg2;
- (void)setVisible:(bool)arg1 forFirstResponder:(id)arg2;
- (void)set_delegate:(id)arg1;
- (void)set_didCalculateVisibleBeforeResponderChanges:(bool)arg1;
- (void)set_firstRespondersForVisibleUI:(id)arg1;
- (void)set_observers:(id)arg1;
- (void)set_pencilInteractionEnabledWhenNotVisible:(bool)arg1;
- (void)set_temporarySelectionDelegate:(id)arg1;
- (void)set_toolPickerVisible:(bool)arg1;
- (void)set_wasVisibleBeforeResponderChanges:(bool)arg1;
- (bool)showsDrawingPolicyControls;
- (id)stateAutosaveName;

@end
