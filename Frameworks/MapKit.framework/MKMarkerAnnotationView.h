
@interface MKMarkerAnnotationView : MKAnnotationView {
    bool  _animatesWhenAdded;
    UIView * _contentMaskView;
    GEOFeatureStyleAttributes * _customStyleAttributes;
    UIImage * _glyphImage;
    UIImageView * _glyphImageView;
    _MKUILabel * _glyphLabel;
    NSString * _glyphText;
    UIColor * _glyphTintColor;
    bool  _isObserving;
    UIColor * _markerStrokeTintColor;
    double  _markerStrokeWidth;
    UIColor * _markerTintColor;
    _MKMarkerAnnotationBaseImageView * _markerView;
    _MKMarkerAnnotationBaseImageView * _selectedDotView;
    UIImage * _selectedGlyphImage;
    UIImageView * _selectedGlyphImageView;
    _MKUILabel * _selectedGlyphLabel;
    _MKMarkerAnnotationBaseImageView * _selectedMarkerView;
    UIImageView * _shadow;
    MKWalletMerchantStylingInfo * _walletMerchantStylingInfo;
}

@property (nonatomic) bool animatesWhenAdded;
@property (nonatomic, copy) UIImage *glyphImage;
@property (nonatomic, copy) NSString *glyphText;
@property (nonatomic, copy) UIColor *glyphTintColor;
@property (nonatomic, copy) UIColor *markerStrokeTintColor;
@property (nonatomic) double markerStrokeWidth;
@property (nonatomic, copy) UIColor *markerTintColor;
@property (nonatomic, retain) UIView *selectedContentView;
@property (nonatomic, copy) UIImage *selectedGlyphImage;
@property (getter=_styleAttributes, setter=_setStyleAttributes:, nonatomic, retain) GEOFeatureStyleAttributes *styleAttributes;
@property (nonatomic) long long subtitleVisibility;
@property (nonatomic) long long titleVisibility;
@property (getter=_walletMerchantStylingInfo, setter=_setWalletMerchantStylingInfo:, nonatomic, retain) MKWalletMerchantStylingInfo *walletMerchantStylingInfo;

+ (float)_defaultDisplayPriority;
+ (Class)_mapkitLeafClass;

- (void).cxx_destruct;
- (int)_blendMode;
- (void)_configureAnimated:(bool)arg1 fromState:(long long)arg2 toState:(long long)arg3;
- (void)_configureViewsForState:(long long)arg1 usesCallout:(bool)arg2 animated:(bool)arg3;
- (long long)_currentMarkerState;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_defaultCollisionAlignmentRectInsets;
- (void)_didDragWithVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (id)_effectiveGlyphImageForState:(long long)arg1 isSystemProvided:(bool*)arg2;
- (id)_effectiveGlyphText;
- (id)_effectiveGlyphTintColorForState:(long long)arg1;
- (id)_effectiveMarkerStrokeTintColorForState:(long long)arg1;
- (double)_effectiveMarkerStrokeWidthForState:(long long)arg1;
- (id)_effectiveMarkerTintColorForState:(long long)arg1;
- (double)_effectiveShadowAlphaForState:(long long)arg1;
- (id)_effectiveSubtitlesIsCollidable:(bool*)arg1;
- (bool)_hasDataRequiringCallout;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; struct CGSize { double x_7_1_1; double x_7_1_2; } x7; })_metricsForState:(long long)arg1;
- (void)_setSelected:(bool)arg1 animated:(bool)arg2;
- (void)_setShadowAlpha:(double)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 duration:(double)arg3;
- (void)_setStyleAttributes:(id)arg1;
- (void)_setWalletMerchantStylingInfo:(id)arg1;
- (void)_setupNormalViewsIfNeeded;
- (void)_setupSelectedViewsIfNeededUsesCallout:(bool)arg1;
- (bool)_shouldDeselectWhenDragged;
- (bool)_shouldRenderGradient;
- (long long)_stateForIsSelected:(bool)arg1;
- (id)_styleAttributes;
- (void)_swayAnimation;
- (void)_unhideForDisplay;
- (void)_updateContentForState:(long long)arg1;
- (void)_updateContentForState:(long long)arg1 forceUpdate:(bool)arg2;
- (void)_updateFromMap;
- (void)_updateStyle;
- (id)_walletMerchantStylingInfo;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)animatesWhenAdded;
- (bool)canShowCallout;
- (void)dealloc;
- (id)glyphImage;
- (id)glyphText;
- (id)glyphTintColor;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (bool)isProvidingCustomFeature;
- (void)layoutSublayersOfLayer:(id)arg1;
- (void)layoutSubviews;
- (id)markerStrokeTintColor;
- (double)markerStrokeWidth;
- (id)markerTintColor;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)prepareForDisplay;
- (void)prepareForReuse;
- (void)prepareForSnapshotting;
- (id)selectedContentView;
- (id)selectedGlyphImage;
- (void)setAnimatesWhenAdded:(bool)arg1;
- (void)setAnnotation:(id)arg1;
- (void)setDragState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGlyphImage:(id)arg1;
- (void)setGlyphText:(id)arg1;
- (void)setGlyphTintColor:(id)arg1;
- (void)setMarkerStrokeTintColor:(id)arg1;
- (void)setMarkerStrokeWidth:(double)arg1;
- (void)setMarkerTintColor:(id)arg1;
- (void)setSelectedContentView:(id)arg1;
- (void)setSelectedGlyphImage:(id)arg1;
- (void)setSubtitleVisibility:(long long)arg1;
- (void)setTitleVisibility:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)traitEnvironment:(id)arg1 didChangeTraitCollection:(id)arg2;
- (bool)updateCalloutViewIfNeededAnimated:(bool)arg1;

@end
