
@interface MKLookAroundViewController : UIViewController <MKLookAroundFullScreenViewControllerDelegate, MKLookAroundViewDelegate, NSCoding, NSSecureCoding> {
    UIImageView * _appleLogoImageView;
    UIButton * _attributionButton;
    UILabel * _badgeLabel;
    long long  _badgePosition;
    UIVisualEffectView * _badgeView;
    NSLayoutConstraint * _badgeViewHorizontalConstraint;
    NSLayoutConstraint * _badgeViewVerticalConstraint;
    UIButton * _closeButton;
    UIVisualEffectView * _closeButtonView;
    NSDateFormatter * _dateFormatter;
    <MKLookAroundViewControllerDelegate> * _delegate;
    bool  _didBecomeFullyDrawn;
    <NSObject> * _didBecomeFullyDrawnObserver;
    bool  _fullScreenCover;
    MKLookAroundFullScreenViewController * _fullScreenViewController;
    _MKGradientView * _gradientView;
    UILabel * _imageryCollectionDateLabel;
    UIStackView * _infoStackView;
    bool  _initialScene;
    UILabel * _localityLabel;
    UILabel * _locationLabel;
    MKLookAroundView * _lookAroundView;
    bool  _navigationEnabled;
    bool  _needsLookAroundViewUpdate;
    bool  _needsSceneUpdate;
    MKPointOfInterestFilter * _pointOfInterestFilter;
    unsigned long long  _presentationType;
    MKLookAroundScene * _scene;
    UITapGestureRecognizer * _selectGestureRecognizer;
    bool  _showsRoadLabels;
    UIStackView * _tertiaryLineStackView;
    MKLookAroundTransitionController * _transitionController;
}

@property (nonatomic, readonly) UIFont *attributionButtonFont;
@property (nonatomic, readonly) NSAttributedString *badgeLabelGlyph;
@property (nonatomic, readonly) NSAttributedString *badgeLabelTitle;
@property (nonatomic) long long badgePosition;
@property (nonatomic, readonly) UIFont *buttonFont;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MKLookAroundViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didBecomeFullyDrawn;
@property (getter=_isFullScreenCover, setter=_setFullScreenCover:, nonatomic) bool fullScreenCover;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIFont *labelFont;
@property (getter=isNavigationEnabled, nonatomic) bool navigationEnabled;
@property (nonatomic, copy) MKPointOfInterestFilter *pointOfInterestFilter;
@property (nonatomic, copy) MKLookAroundScene *scene;
@property (nonatomic, readonly) UIFont *secondaryLabelFont;
@property (nonatomic) bool showsRoadLabels;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIFont *tertiaryLabelFont;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_contentSizeDidChange;
- (id)_contentView;
- (void)_didSelectView:(id)arg1;
- (void)_didTapAttributionButton:(id)arg1;
- (void)_didTapCloseButton:(id)arg1;
- (id)_fullScreenViewController;
- (id)_fullScreenViewControllerIfLoaded;
- (bool)_isDescendantOfRootViewController;
- (bool)_isFullScreenCover;
- (bool)_isPresentedFullScreen;
- (bool)_isPresentingFullScreen;
- (bool)_isTransitioningToOrFromFullScreen;
- (bool)_modalPresentationStyleIsFullScreen;
- (long long)_preferredModalPresentationStyle;
- (void)_setFullScreenCover:(bool)arg1;
- (void)_setupConstraints;
- (void)_setupSubviews;
- (bool)_shouldRestrictLookAroundViewOptionsForPreview;
- (id)_transitionController;
- (void)_transitionFromFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_transitionToFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_updateBadgeViewIfNeeded;
- (void)_updateCloseButtonIfNeeded;
- (void)_updateGradientIfNeeded;
- (void)_updateLookAroundViewIfNeeded;
- (void)_updateSceneIfNeeded;
- (void)_updateStackViewIfNeeded;
- (id)_urlForMapAttribution;
- (void)applyShadowToView:(id)arg1 withRadius:(double)arg2 offset:(struct CGSize { double x1; double x2; })arg3 opacity:(float)arg4;
- (id)attributionButtonFont;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })attributionButtonFrame;
- (id)badgeLabelGlyph;
- (id)badgeLabelTitle;
- (long long)badgePosition;
- (id)buttonFont;
- (void)dealloc;
- (id)delegate;
- (bool)didBecomeFullyDrawn;
- (void)encodeWithCoder:(id)arg1;
- (void)fullScreenViewController:(id)arg1 viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg2 coordinator:(id)arg3;
- (void)fullScreenViewControllerDidDismiss:(id)arg1;
- (void)fullScreenViewControllerDidPresent:(id)arg1;
- (void)fullScreenViewControllerWillDismiss:(id)arg1;
- (void)fullScreenViewControllerWillPresent:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithScene:(id)arg1;
- (bool)isNavigationEnabled;
- (id)labelFont;
- (void)lookAroundView:(id)arg1 didChangeCameraFrame:(id)arg2;
- (void)lookAroundView:(id)arg1 didChangeLocationInfo:(id)arg2;
- (void)lookAroundView:(id)arg1 didDeselectLabelMarker:(id)arg2;
- (void)lookAroundView:(id)arg1 didSelectLabelMarker:(id)arg2;
- (void)lookAroundView:(id)arg1 didTapAtPoint:(struct CGPoint { double x1; double x2; })arg2 areaAvailable:(bool)arg3;
- (void)lookAroundView:(id)arg1 didTapLabelMarker:(id)arg2;
- (void)lookAroundView:(id)arg1 didZoomWithDirection:(long long)arg2 type:(long long)arg3;
- (bool)lookAroundView:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)lookAroundViewDidChangeRegion:(id)arg1;
- (void)lookAroundViewDidPan:(id)arg1;
- (void)lookAroundViewDidStartUserInteraction:(id)arg1;
- (void)lookAroundViewDidStopUserInteraction:(id)arg1;
- (void)lookAroundViewWillChangeLocationInfo:(id)arg1;
- (void)lookAroundViewWillChangeRegion:(id)arg1;
- (long long)overrideUserInterfaceStyle;
- (id)pointOfInterestFilter;
- (id)scene;
- (id)secondaryLabelFont;
- (void)setBadgePosition:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidBecomeFullyDrawn:(bool)arg1;
- (void)setNavigationEnabled:(bool)arg1;
- (void)setPointOfInterestFilter:(id)arg1;
- (void)setScene:(id)arg1;
- (void)setShowsRoadLabels:(bool)arg1;
- (bool)showsRoadLabels;
- (id)tertiaryLabelFont;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (id)viewForFullScreenViewController:(id)arg1;
- (void)viewWillAppear:(bool)arg1;

@end
