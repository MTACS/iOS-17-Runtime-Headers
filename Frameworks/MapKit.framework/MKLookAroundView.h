
@interface MKLookAroundView : UIView <MKLookAroundGestureControllerDelegate, NSCoding, VKMapViewCameraDelegate, VKMapViewDelegate> {
    MKLookAroundBumpFlash * _bumpFlashView;
    bool  _changingViewSize;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _compassInsets;
    UITapGestureRecognizer * _compassSelectGestureRecognizer;
    NSLayoutConstraint * _compassTopOrBottomConstraint;
    NSLayoutConstraint * _compassTrailingConstraint;
    UIView<MKCompassView> * _compassView;
    <MKLookAroundViewDelegate> * _delegate;
    bool  _didChangeCameraFrame;
    bool  _didStartRegionChange;
    bool  _didTriggerAdequatelyDrawnNotification;
    MKLookAroundGestureController * _gestureController;
    MKHapticEngine * _hapticEngine;
    bool  _hasEnteredLookAround;
    bool  _hasValidViewState;
    _MKLookAroundLayerHostingView * _hostView;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _lastCoordinate;
    NSArray * _lastGroundViews;
    NSString * _lastJunctionName;
    VKMapView * _lookAroundView;
    MKMapItem * _mapItem;
    bool  _moveToStorefrontViewInProgress;
    GEOMuninViewState * _muninViewState;
    bool  _navigatingEnabled;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _oldRect;
    UIView * _overlayView;
    bool  _panningEnabled;
    MKPointOfInterestFilter * _pointOfInterestFilter;
    <MKMapServiceTicket> * _refineTicket;
    GEOStorefrontView * _requestedStorefrontView;
    MKMapItem * _revGeoMapItem;
    <MKMapServiceTicket> * _revGeoTicket;
    NSDate * _startTime;
    bool  _storefrontFullyDrawn;
    UIImageView * _transitionEndImageview;
    UIImageView * _transitionGridImageview;
    UIImageView * _transitionStartImageview;
    int  _triggerAction;
    bool  _wantsCompassShown;
    bool  _wantsStorefrontCloseUpView;
    bool  _zoomingEnabled;
}

@property (nonatomic, readonly) bool adequatelyDrawn;
@property (nonatomic) struct CLLocationCoordinate2D { double x1; double x2; } centerCoordinate;
@property (nonatomic, readonly) NSDate *collectionDate;
@property (getter=isCompassHidden, nonatomic) bool compassHidden;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } compassInsets;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MKLookAroundViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasEnteredLookAround;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *imageResources;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic, retain) VKMapView *lookAroundView;
@property (nonatomic, readonly) MKMapItem *mapItem;
@property (nonatomic, readonly) VKMuninMarker *muninMarker;
@property (nonatomic, readonly) GEOMuninViewState *muninViewState;
@property (nonatomic) bool navigatingEnabled;
@property (nonatomic, readonly) UIView *overlayView;
@property (nonatomic) bool panningEnabled;
@property (nonatomic, copy) MKPointOfInterestFilter *pointOfInterestFilter;
@property (nonatomic) double presentationYaw;
@property (nonatomic, readonly) MKMapItem *revGeoMapItem;
@property (nonatomic, readonly) VKLabelMarker *selectedLabelMarker;
@property (nonatomic, readonly) NSURL *sharingURL;
@property (nonatomic) bool showsPointLabels;
@property (nonatomic) bool showsRoadLabels;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *visiblePlaceMUIDs;
@property (nonatomic, readonly) NSArray *visibleRoadLabels;
@property (nonatomic) bool zoomingEnabled;

- (void).cxx_destruct;
- (void)_animateCanvasForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_enterLookAroundForMapItem:(id)arg1 wantsCloseUpView:(bool)arg2 cameraFrameOverride:(id)arg3;
- (void)_enterLookAroundForMuninMarker:(id)arg1 withHeading:(double)arg2;
- (void)_enterLookAroundForMuninViewState:(id)arg1;
- (void)_handleCompassSelect;
- (id)_imageFromLookAroundView;
- (id)_locationInfoWithHeading:(double)arg1;
- (id)_mapkit_locationSubtitle;
- (id)_mapkit_locationTitle;
- (void)_maps_initCommon;
- (bool)_moveToStorefrontView:(id)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (bool)_pointContainedInCompassView:(struct CGPoint { double x1; double x2; })arg1;
- (void)_refineLabelMarker:(id)arg1;
- (void)_resetViewState;
- (void)_reverseGeocodeCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)_setInitialLocationInfo;
- (void)_updateCameraFrame;
- (void)_updateCompass;
- (void)_updateCompassInsets;
- (void)_updateLocationInfo;
- (void)_updateLocationInfoForCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 allowReverseGeocodeIfNeeded:(bool)arg2;
- (void)addCustomFeatureDataSource:(id)arg1;
- (bool)adequatelyDrawn;
- (bool)cancelPendingMove;
- (struct CLLocationCoordinate2D { double x1; double x2; })centerCoordinate;
- (id)collectionDate;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })compassInsets;
- (void)dealloc;
- (id)delegate;
- (void)deselectLabelMarker;
- (void)encodeWithCoder:(id)arg1;
- (void)enterLookAroundWithEntryPoint:(id)arg1;
- (bool)hasEnteredLookAround;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)imageResources;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isCompassHidden;
- (bool)isLoading;
- (void)jumpToCloseUpView;
- (void)jumpToStandOffView;
- (id)labelMarkerForCustomFeatureAnnotation:(id)arg1;
- (void)lookAroundGestureController:(id)arg1 didTapAtPoint:(struct CGPoint { double x1; double x2; })arg2 areaAvailable:(bool)arg3;
- (void)lookAroundGestureController:(id)arg1 didTapLabelMarker:(id)arg2;
- (void)lookAroundGestureController:(id)arg1 didZoomWithDirection:(long long)arg2 type:(long long)arg3;
- (void)lookAroundGestureControllerDidPan:(id)arg1;
- (void)lookAroundGestureControllerDidStartUserInteraction:(id)arg1;
- (void)lookAroundGestureControllerDidStopUserInteraction:(id)arg1;
- (bool)lookAroundGestureControllerShouldReceive:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)lookAroundView;
- (id)mapItem;
- (void)mapLayer:(id)arg1 nearestJunctionDidChange:(id)arg2 currentRoad:(id)arg3;
- (void)mapLayerDidChangeRegionAnimated:(bool)arg1;
- (void)mapLayerDidChangeSceneState:(id)arg1 withState:(unsigned long long)arg2;
- (void)mapLayerDidChangeVisibleRegion;
- (void)mapLayerWasUnableToAnimate;
- (void)mapLayerWillAnimateToLocation:(struct { double x1; double x2; })arg1;
- (void)mapLayerWillChangeRegionAnimated:(bool)arg1;
- (void)moveToCloseUpView;
- (void)moveToCloseUpViewAnimated:(bool)arg1;
- (bool)moveToMapItem:(id)arg1 wantsCloseUpView:(bool)arg2 orMuninMarker:(id)arg3 withHeading:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)moveToStandOffView;
- (void)moveToStandOffViewAnimated:(bool)arg1;
- (id)muninMarker;
- (id)muninViewState;
- (bool)navigatingEnabled;
- (void)openInMapsWithCompletionHandler:(id /* block */)arg1;
- (id)overlayView;
- (bool)panningEnabled;
- (id)pointOfInterestFilter;
- (double)presentationYaw;
- (void)recordTriggerAction:(int)arg1;
- (void)removeCustomFeatureDataSource:(id)arg1;
- (void)reset;
- (id)revGeoMapItem;
- (void)selectLabelMarker:(id)arg1;
- (id)selectedLabelMarker;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)setCompassHidden:(bool)arg1;
- (void)setCompassHidden:(bool)arg1 animated:(bool)arg2;
- (void)setCompassInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasEnteredLookAround:(bool)arg1;
- (void)setLookAroundView:(id)arg1;
- (void)setNavigatingEnabled:(bool)arg1;
- (void)setPanningEnabled:(bool)arg1;
- (void)setPointOfInterestFilter:(id)arg1;
- (void)setPresentationYaw:(double)arg1;
- (void)setPresentationYaw:(double)arg1 animated:(bool)arg2;
- (void)setPresentationYaw:(double)arg1 pitch:(double)arg2 animated:(bool)arg3;
- (void)setShowsPointLabels:(bool)arg1;
- (void)setShowsRoadLabels:(bool)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setZoomingEnabled:(bool)arg1;
- (id)sharingURL;
- (bool)showsPointLabels;
- (bool)showsRoadLabels;
- (void)snapToNorth:(id)arg1;
- (bool)tapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)visiblePlaceMUIDs;
- (id)visibleRoadLabels;
- (void)willMoveToWindow:(id)arg1;
- (bool)zoomingEnabled;

@end
