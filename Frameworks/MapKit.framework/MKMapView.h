
@interface MKMapView : UIView <GEOConfigChangeListenerDelegate, GEOLogContextDelegate, GEOOfflineServiceViewportReporter, GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, MKAnnotationManagerDelegate, MKAnnotationMarkerContainer, MKLocationManagerObserver, MKMapGestureControllerDelegate, MKMapViewRouteContextUpdates, MKOverlayContainerViewDelegate, MKRotationFilterDelegate, MKVariableDelayTapRecognizerDelegate, NSCoding, UIGestureRecognizerDelegate, VKMapViewCameraDelegate, VKMapViewDelegate> {
    MKAnnotationContainerView * _annotationContainer;
    id /* block */  _annotationCoordinateTest;
    MKAnnotationManager * _annotationManager;
    id /* block */  _annotationRectTest;
    struct { 
        bool shouldZoomToFit; 
        double idealCenterCoordinateDistance; 
        bool shouldPreserveUserSpecifiedZoomLevel; 
        bool resetAfterTracking; 
    }  _annotationTrackingBehavior;
    NSMutableSet * _annotationViewEventSet;
    _MKCustomFeatureStore * _annotationsCustomFeatureStore;
    UIView<MKAppleLogoView> * _appleLogoImageView;
    double  _appleLogoImageWidth;
    bool  _attributionBadgeClickable;
    UIImageView * _attributionBadgeView;
    int  _attributionCorner;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _attributionInsets;
    MKAttributionLabel * _attributionLabel;
    long long  _attributionLinkDisplayStyle;
    bool  _automaticallySnapsToNorth;
    MKBasicMapView * _basicMapView;
    id  _bottomLayoutGuide;
    short  _cachedDisplayedFloorOrdinalForVenueWithFocus;
    long long  _cachedLookAroundAvailability;
    unsigned long long  _cachedVenueIDWithFocus;
    NSObject<OS_dispatch_group> * _calloutShowAnimationGroup;
    MKMapCamera * _camera;
    MKMapCameraBoundary * _cameraBoundary;
    MKMapCameraZoomRange * _cameraZoomRange;
    struct { 
        long long style; 
        long long emphasis; 
        long long projection; 
        long long terrainMode; 
        long long mapkitUsage; 
        long long mapkitClientMode; 
        bool gridOnly; 
    }  _cartographicConfiguration;
    unsigned long long  _compassInsetEdges;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _compassInsets;
    bool  _compassSuppressedForFloorPicker;
    unsigned long long  _compassUpdateNotificationObserversCount;
    UIView<MKCompassView> * _compassView;
    long long  _compassViewSize;
    long long  _compassViewStyle;
    bool  _compassVisible;
    UIView * _contentView;
    unsigned long long  _controlBackgroundStyle;
    unsigned long long  _controlSize;
    NSLayoutConstraint * _controlStackHorizontalPositionConstraint;
    NSLayoutConstraint * _controlStackVerticalPositionConstraint;
    UIStackView * _controlStackView;
    NSLayoutConstraint * _controlStackWidthConstraint;
    unsigned long long  _currentFlyoverAnimationID;
    id /* block */  _debugConsoleAdditionalInfoProvider;
    _MKEnvironmentLabel * _debugCurrentEnvironmentLabel;
    MKDebugLocationConsole * _debugLocationConsole;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _edgeInsets;
    NSLayoutConstraint * _edgeInsetsBottomConstraint;
    UILayoutGuide * _edgeInsetsGuide;
    NSLayoutConstraint * _edgeInsetsLeftConstraint;
    NSLayoutConstraint * _edgeInsetsRightConstraint;
    NSLayoutConstraint * _edgeInsetsTopConstraint;
    bool  _explicitCompassInsetEdges;
    struct { 
        unsigned int changingRegion : 1; 
        unsigned int debugViewHeading : 1; 
        unsigned int draggingInterrupted : 1; 
        unsigned int didStartSmoothScrolling : 1; 
        unsigned int hasRenderedSomething : 1; 
        unsigned int hasSignaledWillStartRendering : 1; 
        unsigned int ignoreHeadingUpdates : 1; 
        unsigned int ignoreLocationUpdates : 1; 
        unsigned int isSuspended : 1; 
        unsigned int longPressing : 1; 
        unsigned int persistFixedUserLocation : 1; 
        unsigned int regionChangeIsAnimated : 1; 
        unsigned int rotationSupported : 1; 
        unsigned int scrollEnabled : 1; 
        unsigned int scrolling : 1; 
        unsigned int showHeadingIndicator : 1; 
        unsigned int alwaysShowHeadingIndicator : 1; 
        unsigned int showHeadingIndicatorForStepping : 1; 
        unsigned int useVehicleHeading : 1; 
        unsigned int showsUserLocation : 1; 
        unsigned int zoomEnabled : 1; 
        unsigned int zoomIsAnimated : 1; 
        unsigned int zooming : 1; 
        unsigned int isChangingViewSize : 1; 
        unsigned int isChangingEdgeInsets : 1; 
        unsigned int showsAttribution : 1; 
        unsigned int showsAppleLogo : 1; 
        unsigned int canShowAttributionBadge : 1; 
        unsigned int showsVenues : 1; 
        unsigned int rotating : 1; 
        unsigned int pitching : 1; 
        unsigned int rotateEnabled : 1; 
        unsigned int pitchEnabled : 1; 
        unsigned int showsBuildings : 1; 
        unsigned int hasPendingCameraChange : 1; 
        unsigned int currentRegionChangeShouldUpdateAnnotationsMidstream : 1; 
        unsigned int backdropViewQualityChangingDisabled : 1; 
        unsigned int canSelectPOIs : 1; 
        unsigned int canSelectAllLabels : 1; 
        unsigned int vectorKitConsoleEnabled : 1; 
        unsigned int edgeInsetsAreExplicit : 1; 
        unsigned int locationPropagationEnabled : 1; 
        unsigned int userInteractionPausesLocationUpdates : 1; 
        unsigned int locationPulseEnabled : 1; 
        unsigned int shouldSplitRouteLine : 1; 
        unsigned int shouldAnimatePositionWithRouteMatch : 1; 
        unsigned int clearUserLocationOnLocationReset : 1; 
        unsigned int showsCurrentEnvironmentName : 1; 
        unsigned int processingUserLocationUpdate : 1; 
        unsigned int changingMapType : 1; 
        unsigned int userRotatedAwayFromVerticalYaw : 1; 
        unsigned int goingToDefaultLocation : 1; 
        unsigned int isDraggingAnnotationView : 1; 
        unsigned int showsPressedLabelMarkerEffect : 1; 
        unsigned int shouldLoadFallbackTiles : 1; 
        unsigned int iconPixelAlignmentExplicitlyDisabled : 1; 
        unsigned int userDidRotateDuringCurrentRegionChange : 1; 
        unsigned int isTwoFingerLongPressing : 1; 
        unsigned int useTopBottomLayoutGuides : 1; 
        unsigned int useLayoutMargins : 1; 
        unsigned int delegateShouldReceiveTouch : 1; 
        unsigned int delegateShouldDelayTapResponse : 1; 
        unsigned int delegateDidUpdateUserLocation : 1; 
        unsigned int delegateWillChangeRegion : 1; 
        unsigned int delegateDidChangeUserTrackingModeButton : 1; 
        unsigned int delegateDidChangeUserTrackingMode : 1; 
    }  _flags;
    bool  _forceLayoutOnBoundsChange;
    MKMapGestureController * _gestureController;
    bool  _hasPendingEdgeInsetsChange;
    bool  _hasSetLayoutMargins;
    double  _heading;
    long long  _interactionMode;
    MKMapViewInternal * _internal;
    id /* block */  _labelsDidLayoutCallback;
    NSObject<OS_dispatch_queue> * _lastEffectiveTraitCollectionIsolationQueue;
    double  _lastNotifiedZoomSize;
    bool  _lastPossiblyVisible;
    UITraitCollection * _lastTraitCollection;
    double  _lastYaw;
    UIGestureRecognizer * _locationConsoleGesture;
    MKLocationManager * _locationManager;
    UILongPressGestureRecognizer * _longPressGestureRecognizer;
    MKAnnotationView * _longPressedAnnotationView;
    unsigned long long  _mapType;
    VKMapView * _mapView;
    unsigned long long  _mapViewDidFinishRenderingSignpostID;
    VKNavContext * _navContext;
    UITapGestureRecognizer * _nonselectingTapGestureRecognizer;
    _MKOfflineRegionsOverlayManager * _offlineRegionsOverlayManager;
    double  _oldAltitude;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _oldCenterCoordinate;
    double  _oldHeading;
    double  _oldPitch;
    long long  _originalLoopRate;
    MKOverlayContainerView * _overlayContainer;
    NSMutableDictionary * _overlayRendererEventDictionary;
    MKPitchButton * _pitchButton;
    unsigned long long  _pitchButtonBackgroundStyle;
    unsigned long long  _pitchButtonControlSize;
    long long  _pitchButtonVisibility;
    bool  _pitchButtonVisible;
    bool  _pitchSliderVisible;
    long long  _preGesturingLoopRate;
    MKMapConfiguration * _preferredConfiguration;
    VKLabelMarker * _pressedLabelMarker;
    MKRotationFilter * _rotationFilter;
    VKRouteContext * _routeContext;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> * _safeDelegate;
    unsigned long long  _scaleControlSize;
    unsigned long long  _scaleUpdateNotificationObserversCount;
    MKScaleView * _scaleView;
    long long  _scaleVisibility;
    bool  _scaleVisible;
    UIView * _scrollContainerView;
    id /* block */  _selectAnnotationViewAfterRedrawBlock;
    long long  _selectableMapFeatures;
    MKMapViewLabelMarkerState * _selectedLabelMarkerState;
    UITapGestureRecognizer * _selectingTapGestureRecognizer;
    id  _shelbyvilleListener;
    id /* block */  _showCalloutAfterRegionChangeBlock;
    bool  _showsCompass;
    bool  _showsPitchControl;
    bool  _showsUserTrackingButton;
    bool  _showsZoomControls;
    NSTimer * _startEffectsTimer;
    unsigned long long  _suspendPropagatingEdgeInsetsCount;
    unsigned long long  _suspendedEffectsCount;
    id  _topLayoutGuide;
    MKUserTrackingButton * _trackingButton;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> * _unsafeDelegate;
    MKUsageCounter * _usageCounter;
    unsigned long long  _userInteractionDisabledCount;
    MKUserLocation * _userLocation;
    unsigned long long  _userTrackingButtonBackgroundStyle;
    unsigned long long  _userTrackingControlSize;
    long long  _userTrackingMode;
    bool  _userTrackingModeShouldAnimate;
    bool  _userTrackingVisible;
    UITextView * _vectorKitDebugView;
    UIPanGestureRecognizer * _vectorKitStyleDebugGestureRecognizer;
    double  _verticalYawOverride;
    NSMutableArray * _whenSizedBlocks;
    UINotificationFeedbackGenerator * _zoomBounceFeedbackGenerator;
    unsigned long long  _zoomUpdateNotificationObserversCount;
}

@property (nonatomic) bool _annotationViewsAreAddedImmediately;
@property (nonatomic, readonly) struct { double x1; double x2; } _centerMapPoint;
@property (nonatomic, readonly) long long _interfaceOrientation;
@property (getter=_safeDelegate, setter=_setSafeDelegate:, nonatomic) <MKMapViewDelegate> *_safeDelegate;
@property (nonatomic, retain) NSTimer *_startEffectsTimer;
@property (nonatomic, readonly) double _zoomLevel;
@property (nonatomic, readonly) double _zoomScale;
@property (getter=_allowsPopoverWhenNotInWindow, setter=_setAllowsPopoverWhenNotInWindow:, nonatomic) bool allowsPopoverWhenNotInWindow;
@property (getter=_alwaysShowHeadingIndicator, setter=_setAlwaysShowHeadingIndicatorIfSupported:, nonatomic) bool alwaysShowHeadingIndicator;
@property (getter=_isAnimating, nonatomic, readonly) bool animating;
@property (getter=_annotationViews, nonatomic, readonly) NSArray *annotationViews;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } annotationVisibleRect;
@property (nonatomic, readonly) NSArray *annotations;
@property (getter=_applicationState, setter=_setApplicationState:, nonatomic) int applicationState;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } attributionBadgeBounds;
@property (getter=_isAttributionBadgeClickable, setter=_setAttributionBadgeClickable:, nonatomic) bool attributionBadgeClickable;
@property (nonatomic) int attributionCorner;
@property (getter=_attributionInsets, setter=_setAttributionInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } attributionInsets;
@property (getter=_attributionLinkDisplayStyle, setter=_setAttributionLinkDisplayStyle:, nonatomic) long long attributionLinkDisplayStyle;
@property (getter=_automaticallySnapsToNorth, setter=_setAutomaticallySnapsToNorth:, nonatomic) bool automaticallySnapsToNorth;
@property (getter=_calloutShowAnimationGroup, nonatomic, readonly) NSObject<OS_dispatch_group> *calloutShowAnimationGroup;
@property (nonatomic, copy) MKMapCamera *camera;
@property (nonatomic, copy) MKMapCameraBoundary *cameraBoundary;
@property (nonatomic, copy) MKMapCameraZoomRange *cameraZoomRange;
@property (getter=_canEnter3DMode, nonatomic, readonly) bool canEnter3DMode;
@property (getter=_canEnter3DModeFlyover, nonatomic, readonly) bool canEnter3DModeFlyover;
@property (getter=_canEnterNightMode, nonatomic, readonly) bool canEnterNightMode;
@property (nonatomic, readonly) bool canRotateForHeading;
@property (getter=_canSelectAllLabels, setter=_setCanSelectAllLabels:, nonatomic) bool canSelectAllLabels;
@property (getter=_canSelectPOIs, setter=_setCanSelectPOIs:, nonatomic) bool canSelectPOIs;
@property (nonatomic) bool canShowAttributionBadge;
@property (nonatomic, readonly) bool canShowCompass;
@property (getter=_canShowControls, nonatomic, readonly) bool canShowControls;
@property (getter=_canShowFlyover, nonatomic, readonly) bool canShowFlyover;
@property (nonatomic, readonly) bool canShowPitch;
@property (nonatomic, readonly) bool canShowZoom;
@property (getter=_cartographicConfiguration, setter=_setCartographicConfiguration:, nonatomic) struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; bool x7; } cartographicConfiguration;
@property (nonatomic) struct CLLocationCoordinate2D { double x1; double x2; } centerCoordinate;
@property (getter=_isChangingRegionForGesture, nonatomic, readonly) bool changingRegionForGesture;
@property (getter=_compassDiameter, nonatomic, readonly) double compassDiameter;
@property (getter=isCompassEnabled, nonatomic) bool compassEnabled;
@property (getter=_compassInsetEdges, setter=_setCompassInsetEdges:, nonatomic) unsigned long long compassInsetEdges;
@property (getter=_compassInsets, setter=_setCompassInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } compassInsets;
@property (getter=_isCompassSuppressedForFloorPicker, setter=_setCompassSuppressedForFloorPicker:, nonatomic) bool compassSuppressedForFloorPicker;
@property (nonatomic) long long compassViewSize;
@property (nonatomic, readonly) long long compassViewStyle;
@property (nonatomic, copy) MKMapConfiguration *configuration;
@property (getter=_controlBackgroundStyle, setter=_setControlBackgroundStyle:, nonatomic) unsigned long long controlBackgroundStyle;
@property (getter=_controlSize, setter=_setControlSize:, nonatomic) unsigned long long controlSize;
@property (getter=_currentEnvironmentLabelFrame, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentEnvironmentLabelFrame;
@property (getter=_currentFlyoverAnimationID, setter=_setCurrentFlyoverAnimationID:, nonatomic) unsigned long long currentFlyoverAnimationID;
@property (getter=_debugConsole, nonatomic, readonly) MKDebugLocationConsole *debugConsole;
@property (getter=_debugConsoleAdditionalInfoProvider, setter=_setDebugConsoleAdditionalInfoProvider:, nonatomic, copy) id /* block */ debugConsoleAdditionalInfoProvider;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MKMapViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=_detailedDescription, nonatomic, readonly) NSString *detailedDescription;
@property (getter=_detailedDescriptionDictionaryRepresentation, nonatomic, readonly) NSDictionary *detailedDescriptionDictionaryRepresentation;
@property (getter=_isDimmingOutsideVenueWithFocus, nonatomic) bool dimmingOutsideVenueWithFocus;
@property (getter=_displayedSearchResultsType, setter=_setDisplayedSearchResultsType:, nonatomic) long long displayedSearchResultsType;
@property (getter=_doubleTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (getter=_edgeInsets, setter=_setEdgeInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsets;
@property (getter=_edgeInsetsLayoutGuide, nonatomic, readonly) UILayoutGuide *edgeInsetsLayoutGuide;
@property (nonatomic, readonly) bool effectsEnabled;
@property (getter=_isHandlingNonselectingTap, nonatomic, readonly) bool handlingNonselectingTap;
@property (nonatomic, readonly) bool hasRenderedSomething;
@property (nonatomic, readonly) bool hasUserLocation;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreLocationUpdates;
@property (getter=_isInactive, setter=_setInactive:, nonatomic) bool inactive;
@property (getter=_interactionMode, setter=_setInteractionMode:, nonatomic) long long interactionMode;
@property (getter=_isHybridMap, nonatomic, readonly) bool isHybridMap;
@property (nonatomic, readonly) bool isWithinHikingBoundary;
@property (nonatomic, readonly) bool isWithinHikingBufferRegion;
@property (getter=_labelEdgeInsets, setter=_setLabelEdgeInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } labelEdgeInsets;
@property (getter=_labelEdgeWidths, setter=_setLabelEdgeWidths:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } labelEdgeWidths;
@property (nonatomic) long long labelTextSize;
@property (getter=_labelsDidLayoutCallback, setter=_setLabelsDidLayoutCallback:, nonatomic, copy) id /* block */ labelsDidLayoutCallback;
@property (getter=_loadLookAroundAvailability, setter=_setLoadLookAroundAvailability:, nonatomic) bool loadLookAroundAvailability;
@property (getter=_localizeLabels, setter=_setLocalizeLabels:, nonatomic) bool localizeLabels;
@property (getter=_locationManager, nonatomic, readonly) MKLocationManager *locationManager;
@property (getter=_isLocationPulseEnabled, setter=_setLocationPulseEnabled:, nonatomic) bool locationPulseEnabled;
@property (getter=_longPressGestureRecognizer, nonatomic, readonly) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (getter=_lookAroundAvailability, nonatomic, readonly) long long lookAroundAvailability;
@property (getter=_mapLayer, nonatomic, readonly) VKMapView *mapLayer;
@property (nonatomic, readonly) GEOMapRegion *mapRegion;
@property (nonatomic) unsigned long long mapType;
@property (getter=_maximumZoomLevel, nonatomic, readonly) double maximumZoomLevel;
@property (getter=_minimumZoomLevel, nonatomic, readonly) double minimumZoomLevel;
@property (getter=_nonselectingTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *nonselectingTapGestureRecognizer;
@property (getter=_offlineRegionVisibility, setter=_setOfflineRegionVisibility:, nonatomic) long long offlineRegionVisibility;
@property (getter=_oneHandedZoomGestureRecognizer, nonatomic, readonly) UIGestureRecognizer *oneHandedZoomGestureRecognizer;
@property (nonatomic, readonly) NSArray *overlays;
@property (getter=_panWithMomentum, setter=_setPanWithMomentum:, nonatomic) bool panWithMomentum;
@property (getter=_panningGestureRecognizer, nonatomic, readonly) UIPanGestureRecognizer *panningGestureRecognizer;
@property (getter=_pinchGestureRecognizer, nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (getter=_pitchButtonBackgroundStyle, setter=_setPitchButtonBackgroundStyle:, nonatomic) unsigned long long pitchButtonBackgroundStyle;
@property (getter=_pitchButtonControlSize, setter=_setPitchButtonControlSize:, nonatomic) unsigned long long pitchButtonControlSize;
@property (nonatomic) long long pitchButtonVisibility;
@property (getter=isPitchEnabled, nonatomic) bool pitchEnabled;
@property (getter=_isPitched, nonatomic, readonly) bool pitched;
@property (nonatomic, copy) MKPointOfInterestFilter *pointOfInterestFilter;
@property (nonatomic, retain) CLLocation *predictedUserLocation;
@property (nonatomic, copy) MKMapConfiguration *preferredConfiguration;
@property (nonatomic, readonly) double presentationYaw;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } region;
@property (getter=isRegionChanging, nonatomic, readonly) bool regionChanging;
@property (nonatomic) bool rendersInBackground;
@property (getter=isRotateEnabled, nonatomic) bool rotateEnabled;
@property (getter=_rotationGestureRecognizer, nonatomic, readonly) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (getter=_scaleControlSize, setter=_setScaleControlSize:, nonatomic) unsigned long long scaleControlSize;
@property (getter=isScaleEnabled, nonatomic) bool scaleEnabled;
@property (getter=_scaleVisibility, setter=_setScaleVisibility:, nonatomic) long long scaleVisibility;
@property (getter=isScrollEnabled, nonatomic) bool scrollEnabled;
@property (nonatomic) long long selectableMapFeatures;
@property (nonatomic, copy) NSArray *selectedAnnotations;
@property (getter=_selectedFeatureID, setter=_setSelectedFeatureID:, nonatomic) unsigned long long selectedFeatureID;
@property (getter=_selectedLabelMarker, nonatomic, readonly) VKLabelMarker *selectedLabelMarker;
@property (getter=_selectingTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *selectingTapGestureRecognizer;
@property (getter=_shouldAnimatePositionWithRouteMatch, setter=_setShouldAnimatePositionWithRouteMatch:, nonatomic) bool shouldAnimatePositionWithRouteMatch;
@property (getter=_shouldLoadFallbackTiles, setter=_setShouldLoadFallbackTiles:, nonatomic) bool shouldLoadFallbackTiles;
@property (getter=_shouldSplitRouteLine, setter=_setShouldSplitRouteLine:, nonatomic) bool shouldSplitRouteLine;
@property (getter=_showHeadingIndicator, setter=_setShowHeadingIndicator:, nonatomic) bool showHeadingIndicator;
@property (getter=_showHeadingIndicatorForStepping, setter=_setShowHeadingIndicatorForStepping:, nonatomic) bool showHeadingIndicatorForStepping;
@property (getter=_isShowingAttributionBadge, nonatomic, readonly) bool showingAttributionBadge;
@property (getter=_isShowingCuratedElevatedGround, nonatomic, readonly) bool showingCuratedElevatedGround;
@property (getter=_isShowingFlyover, nonatomic, readonly) bool showingFlyover;
@property (getter=_showsAppleLogo, setter=_setShowsAppleLogo:, nonatomic) bool showsAppleLogo;
@property (nonatomic) bool showsAttribution;
@property (nonatomic) bool showsBuildings;
@property (nonatomic) bool showsCompass;
@property (getter=_showsCurrentEnvironmentName, setter=_setShowsCurrentEnvironmentName:, nonatomic) bool showsCurrentEnvironmentName;
@property (getter=_showsNightMode, setter=_setShowsNightMode:, nonatomic) bool showsNightMode;
@property (nonatomic) bool showsPitchControl;
@property (getter=_showsPointLabels, setter=_setShowsPointLabels:, nonatomic) bool showsPointLabels;
@property (nonatomic) bool showsPointsOfInterest;
@property (getter=_showsPressedLabelMarkerEffect, setter=_setShowsPressedLabelMarkerEffect:, nonatomic) bool showsPressedLabelMarkerEffect;
@property (getter=_showsRoadLabels, setter=_setShowsRoadLabels:, nonatomic) bool showsRoadLabels;
@property (getter=_showsRoadShields, setter=_setShowsRoadShields:, nonatomic) bool showsRoadShields;
@property (nonatomic) bool showsScale;
@property (getter=_showsScaleDuringZoom, setter=_setShowsScaleDuringZoom:, nonatomic) bool showsScaleDuringZoom;
@property (nonatomic) bool showsTraffic;
@property (getter=_showsTrafficIncidents, setter=_setShowsTrafficIncidents:, nonatomic) bool showsTrafficIncidents;
@property (nonatomic) bool showsUserLocation;
@property (nonatomic) bool showsUserTrackingButton;
@property (getter=_showsVenues, setter=_setShowsVenues:, nonatomic) bool showsVenues;
@property (nonatomic) bool showsZoomControls;
@property (readonly) Class superclass;
@property (getter=isSuspended, nonatomic) bool suspended;
@property (getter=_transitLineMarkersInCurrentViewport, nonatomic, readonly) NSArray *transitLineMarkersInCurrentViewport;
@property (getter=_twoFingerTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *twoFingerTapGestureRecognizer;
@property (getter=_useBalloonCalloutsForLabels, setter=_setUseBalloonCalloutsForLabels:, nonatomic) bool useBalloonCalloutsForLabels;
@property (getter=_userInteractionPausesLocationUpdates, setter=_setUserInteractionPausesLocationUpdates:, nonatomic) bool userInteractionPausesLocationUpdates;
@property (nonatomic, readonly) MKUserLocation *userLocation;
@property (nonatomic, readonly, retain) MKAnnotationView *userLocationView;
@property (getter=isUserLocationVisible, nonatomic, readonly) bool userLocationVisible;
@property (getter=_userTrackingBehavior, setter=_setUserTrackingBehavior:, nonatomic) struct { bool x1; double x2; bool x3; bool x4; } userTrackingBehavior;
@property (getter=_userTrackingButtonBackgroundStyle, setter=_setUserTrackingButtonBackgroundStyle:, nonatomic) unsigned long long userTrackingButtonBackgroundStyle;
@property (getter=_userTrackingControlSize, setter=_setUserTrackingControlSize:, nonatomic) unsigned long long userTrackingControlSize;
@property (nonatomic) long long userTrackingMode;
@property (getter=_isVectorKitConsoleEnabled, setter=_setVectorKitConsoleEnabled:, nonatomic) bool vectorKitConsoleEnabled;
@property (nonatomic, readonly) VKVenueBuildingFeatureMarker *venueBuildingWithFocus;
@property (nonatomic, readonly) VKVenueFeatureMarker *venueWithFocus;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } visibleMapRect;
@property (getter=_visibleTileSets, nonatomic, readonly) NSArray *visibleTileSets;
@property (getter=isZoomEnabled, nonatomic) bool zoomEnabled;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

+ (long long)_defaultOverlayLevel;
+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectThatFitsViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 mapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2 viewInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4 minZoomLevel:(double)arg5 maxZoomLevel:(double)arg6 snapToZoomLevel:(bool)arg7;
+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 viewInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg5 minZoomLevel:(double)arg6 maxZoomLevel:(double)arg7 snapToZoomLevel:(bool)arg8;
+ (unsigned long long)minZoomLevelForMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 edgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg4;
+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (void)setRendersInBackgroundByDefault:(bool)arg1;

- (void).cxx_destruct;
- (void)_addAnnotation:(id)arg1 allowAnimation:(bool)arg2;
- (void)_addAnnotations:(id)arg1 allowAnimation:(bool)arg2;
- (void)_addAnnotationsCustomFeatureStoreIfNeeded;
- (void)_addCustomFeatureDataSource:(id)arg1;
- (void)_addDebugGesture;
- (void)_addDependentAuxiliaryBlock:(id /* block */)arg1;
- (void)_addDependentSetRegionBlock:(id /* block */)arg1;
- (void)_addDependentSetRegionBlock:(id /* block */)arg1 completion:(id /* block */)arg2;
- (void)_addInternalOverlay:(id)arg1 level:(long long)arg2 provider:(id)arg3;
- (void)_addPersistentVectorOverlay:(id)arg1;
- (void)_addSetRegionBlock:(id /* block */)arg1;
- (void)_addSetRegionBlock:(id /* block */)arg1 completion:(id /* block */)arg2;
- (void)_addVectorOverlay:(id)arg1;
- (void)_addViewsForAnnotations:(id)arg1;
- (bool)_allowsPopoverWhenNotInWindow;
- (bool)_alwaysShowHeadingIndicator;
- (double)_animationDurationWhenSettingCameraBoundary:(id)arg1;
- (id)_annotationAtPoint:(struct CGPoint { double x1; double x2; })arg1 avoidCurrent:(bool)arg2;
- (void)_annotationViewDragStateChanged:(id)arg1;
- (id)_annotationViews;
- (bool)_annotationViewsAreAddedImmediately;
- (int)_applicationState;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_attributionInsets;
- (long long)_attributionLinkDisplayStyle;
- (bool)_automaticallySnapsToNorth;
- (double)_boundedZoomLevel:(double)arg1;
- (id)_calloutShowAnimationGroup;
- (id)_camera;
- (double)_cameraAltitudeClampedToZoomRange:(id)arg1;
- (bool)_canEnter3DMode;
- (bool)_canEnter3DModeFlyover;
- (bool)_canEnterNightMode;
- (bool)_canSelectAllLabels;
- (bool)_canSelectPOIs;
- (bool)_canShowAppleLogo;
- (bool)_canShowControls;
- (bool)_canShowFlyover;
- (bool)_canZoomIn;
- (bool)_canZoomOut;
- (struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; bool x7; })_cartographicConfiguration;
- (struct { double x1; double x2; })_centerMapPoint;
- (struct CGPoint { double x1; double x2; })_centerPoint;
- (void)_clearFixedUserLocation;
- (void)_clearGestureRecognizers;
- (void)_clearGesturesAndAnimations;
- (void)_clearLayoutGuides;
- (void)_clearRouteContext;
- (bool)_clearUserLocationOnLocationReset;
- (id)_commonInitFromIB:(bool)arg1 gestureRecognizerHostView:(id)arg2 locationManager:(id)arg3 showsAttribution:(bool)arg4 showsAppleLogo:(bool)arg5 allowsAntialiasing:(bool)arg6 carDisplayType:(long long)arg7;
- (id)_commonVisibilityAnimation:(bool)arg1;
- (double)_compassDiameter;
- (unsigned long long)_compassInsetEdges;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_compassInsets;
- (void)_configureGestureRecognizers:(id)arg1;
- (unsigned long long)_controlBackgroundStyle;
- (unsigned long long)_controlSize;
- (id)_controlStackView;
- (long long)_controlsUserInterfaceStyleOverride;
- (struct CGPoint { double x1; double x2; })_convertCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertMapPoint:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toMapPointFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (void)_countUsageForAnnotationViewsIfNeeded:(id)arg1;
- (void)_countUsageForRendererIfNeeded:(id)arg1;
- (void)_countUsageOfTypeIfNeeded:(unsigned long long)arg1 forAnnotationView:(id)arg2 countedEventTypes:(id)arg3;
- (void)_createAnnotationViewSetIfNeeded;
- (void)_createOverlayRendererDictionaryIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentEnvironmentLabelFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentEnvironmentNameFrame;
- (unsigned long long)_currentFlyoverAnimationID;
- (id)_debugConsole;
- (id /* block */)_debugConsoleAdditionalInfoProvider;
- (double)_defaultAnimationDurationForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)_deselectLabelMarkerAnimated:(bool)arg1;
- (void)_deselectTransitLineMarker;
- (id)_detailedDescription;
- (id)_detailedDescriptionDictionaryRepresentation;
- (void)_didChangeRegionMidstream:(bool)arg1;
- (void)_didEndZoom;
- (void)_displayWorld;
- (long long)_displayedSearchResultsType;
- (double)_distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 fromView:(id)arg3 withPrecision:(long long)arg4;
- (id)_doubleTapGestureRecognizer;
- (void)_dropDraggingAnnotationView:(bool)arg1;
- (double)_durationForCamera:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsets;
- (id)_edgeInsetsLayoutGuide;
- (void)_endZoomForExternalGesture;
- (void)_enter3DMode;
- (void)_enterARMode;
- (void)_enterARModeWithLocation:(id)arg1;
- (void)_exit3DMode;
- (void)_exitARMode;
- (void)_fixUserLocationFromPresentationValue;
- (id)_flattenedAnnotationsForAnnotationViews:(id)arg1 maxDisplayPriority:(float*)arg2;
- (long long)_focusItemDeferralMode;
- (void)_forceFrame;
- (void)_forceManifestUpdateIfNecessary;
- (double)_goToCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomLevel:(double)arg2 animated:(bool)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(bool)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 timingFunction:(id)arg3 animated:(bool)arg4 completionHandler:(id /* block */)arg5;
- (void)_handleCompassTap:(id)arg1;
- (void)_handleLongPressGesture:(id)arg1;
- (void)_handleSelectGestureToDeselect:(id)arg1;
- (void)_handleSelectGestureToSelect:(id)arg1;
- (void)_handleSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_hasSelectedTransitLines;
- (bool)_iconsShouldAlignToPixels;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 allowsAntialiasing:(bool)arg2;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(bool)arg3 showsAppleLogo:(bool)arg4 allowsAntialiasing:(bool)arg5 carDisplayType:(long long)arg6;
- (void)_insertSubview:(id)arg1;
- (void)_insertSubviewBelowAnnotationContainerView:(id)arg1;
- (long long)_interactionMode;
- (long long)_interfaceOrientation;
- (void)_invalidateAllOverlayRendererColors;
- (bool)_isAnimating;
- (bool)_isAttributionBadgeClickable;
- (bool)_isChangingRegionForGesture;
- (bool)_isCompassSuppressedForFloorPicker;
- (bool)_isDimmingOutsideVenueWithFocus;
- (bool)_isHandlingNonselectingTap;
- (bool)_isHandlingUserEvent;
- (bool)_isHybridMap;
- (bool)_isInactive;
- (bool)_isLocationPropagationEnabled;
- (bool)_isLocationPulseEnabled;
- (bool)_isPitched;
- (bool)_isPoint:(struct CGPoint { double x1; double x2; })arg1 nearUserLocationView:(double)arg2;
- (bool)_isShowingAttributionBadge;
- (bool)_isShowingCuratedElevatedGround;
- (bool)_isShowingFlyover;
- (bool)_isUserLocationInView:(bool)arg1;
- (bool)_isUserLocationViewCentered:(double)arg1;
- (bool)_isUsingDevResourceStyleSheet;
- (bool)_isVectorKitConsoleEnabled;
- (bool)_isZooming;
- (void)_issueDatasetCheckinCall;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_labelEdgeInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_labelEdgeWidths;
- (id)_labelMarkerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_labelMarkerForCustomFeatureAnnotation:(id)arg1;
- (id)_labelMarkersInCurrentViewport;
- (id)_labelMarkersInCurrentViewportForType:(int)arg1;
- (id /* block */)_labelsDidLayoutCallback;
- (void)_layoutAttribution;
- (bool)_loadLookAroundAvailability;
- (bool)_localizeLabels;
- (id)_locationManager;
- (void)_locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (id)_longPressGestureRecognizer;
- (long long)_lookAroundAvailability;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })_mapDisplayStyle;
- (double)_mapKitZoomLevelForVectorKitTileZoomLevel:(double)arg1;
- (id)_mapLayer;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectWithFraction:(double)arg1 ofVisible:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_mapRegionWithCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomScale:(double)arg2;
- (bool)_mapViewHasUpdatedCamera;
- (double)_maximumZoomLevel;
- (double)_minimumZoomLevel;
- (bool)_mustWaitUntilSized;
- (id)_nonselectingTapGestureRecognizer;
- (long long)_offlineRegionVisibility;
- (id)_oneHandedZoomGestureRecognizer;
- (double)_panDurationFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)_panWithMomentum;
- (id)_panningGestureRecognizer;
- (void)_pauseFlyoverAnimation;
- (void)_pauseUserLocationUpdates;
- (void)_performActionAsIfGoingToDefaultLocation:(id /* block */)arg1;
- (void)_performFlyoverAnimation:(id)arg1;
- (void)_performFlyoverAnimation:(id)arg1 animateToStart:(bool)arg2;
- (void)_performWhenSizedBlocks;
- (id)_pinchGestureRecognizer;
- (id)_pitchButton;
- (unsigned long long)_pitchButtonBackgroundStyle;
- (unsigned long long)_pitchButtonControlSize;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_postDidChangeZoomNotificationIfNeeded;
- (void)_postDidUpdateYawNotification;
- (void)_prepareFlyoverAnimation:(id)arg1 completion:(id /* block */)arg2;
- (bool)_pressEnded:(id)arg1;
- (void)_registerConfigurationObservers;
- (void)_registerSceneLifecycleNotifications;
- (void)_registerTraitCollectionObservation;
- (void)_removeCustomFeatureDataSource:(id)arg1;
- (void)_removePersistentVectorOverlay:(id)arg1;
- (void)_removeVectorOverlay:(id)arg1;
- (void)_replaceAnnotation:(id)arg1 withAnnotation:(id)arg2;
- (void)_resumeFlyoverAnimation;
- (void)_resumePropagatingEdgeInsets;
- (void)_resumeUserInteraction;
- (void)_resumeUserLocationUpdates:(bool)arg1;
- (bool)_roomForCompass;
- (id)_rotationGestureRecognizer;
- (bool)_rotationPossible;
- (long long)_roundedZoomLevel;
- (id)_routeInfoForRoute:(id)arg1;
- (id)_safeDelegate;
- (unsigned long long)_scaleControlSize;
- (long long)_scaleVisibility;
- (void)_sceneDidActivate:(id)arg1;
- (void)_sceneDidEnterBackground:(id)arg1;
- (void)_sceneDidFinishSuspensionSnapshot:(id)arg1;
- (void)_sceneWillEnterForeground:(id)arg1;
- (void)_selectAnnotation:(id)arg1 animated:(bool)arg2;
- (void)_selectLabelMarker:(id)arg1 animated:(bool)arg2;
- (void)_selectTransitLineMarker:(id)arg1;
- (void)_selectTransitLineMarkerWithIdentifier:(id)arg1;
- (void)_selectUserLocationTypeWithDeltaZoomLevel:(double)arg1;
- (unsigned long long)_selectedFeatureID;
- (id)_selectedLabelMarker;
- (id)_selectedTransitLineIDs;
- (id)_selectingTapGestureRecognizer;
- (void)_setAllowsPopoverWhenNotInWindow:(bool)arg1;
- (void)_setAlternateRouteContextAnnotationETAComparison:(unsigned char)arg1 forRoute:(id)arg2;
- (void)_setAlwaysShowHeadingIndicatorIfSupported:(bool)arg1;
- (void)_setApplicationState:(int)arg1;
- (void)_setAttributionBadgeClickable:(bool)arg1;
- (void)_setAttributionInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setAttributionLinkDisplayStyle:(long long)arg1;
- (void)_setAutomaticallySnapsToNorth:(bool)arg1;
- (void)_setCamera:(id)arg1;
- (void)_setCamera:(id)arg1 animated:(bool)arg2;
- (void)_setCamera:(id)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)_setCamera:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id /* block */)arg7;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timing:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timingCurve:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)_setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)_setCameraBoundary:(id)arg1 animated:(bool)arg2;
- (void)_setCameraZoomRange:(id)arg1 animated:(bool)arg2;
- (void)_setCanSelectAllLabels:(bool)arg1;
- (void)_setCanSelectPOIs:(bool)arg1;
- (void)_setCartographicConfiguration:(struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; bool x7; })arg1;
- (void)_setCartographicConfiguration:(struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; bool x7; })arg1 animated:(bool)arg2;
- (void)_setCartographicConfiguration:(struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; bool x7; })arg1 onInit:(bool)arg2 animated:(bool)arg3;
- (void)_setClearUserLocationOnLocationReset:(bool)arg1;
- (void)_setCompassInsetEdges:(unsigned long long)arg1;
- (void)_setCompassInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setCompassInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 animated:(bool)arg2;
- (void)_setCompassSuppressedForFloorPicker:(bool)arg1;
- (void)_setCompassViewSize:(long long)arg1 style:(long long)arg2;
- (void)_setCompassVisible:(bool)arg1 animationAllowed:(bool)arg2 force:(bool)arg3;
- (void)_setControlBackgroundStyle:(unsigned long long)arg1;
- (void)_setControlSize:(unsigned long long)arg1;
- (void)_setCurrentFlyoverAnimationID:(unsigned long long)arg1;
- (void)_setDebugConsoleAdditionalInfoProvider:(id /* block */)arg1;
- (void)_setDisplayedSearchResultsType:(long long)arg1;
- (void)_setEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 explicit:(bool)arg2;
- (void)_setInactive:(bool)arg1;
- (void)_setInteractionMode:(long long)arg1;
- (void)_setLabelEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setLabelEdgeWidths:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setLabelsDidLayoutCallback:(id /* block */)arg1;
- (void)_setLoadLookAroundAvailability:(bool)arg1;
- (void)_setLocalizeLabels:(bool)arg1;
- (void)_setLocationPropagationEnabled:(bool)arg1;
- (void)_setLocationPulseEnabled:(bool)arg1;
- (void)_setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (void)_setMapType:(unsigned long long)arg1 animated:(bool)arg2;
- (void)_setOfflineRegionVisibility:(long long)arg1;
- (void)_setPanWithMomentum:(bool)arg1;
- (void)_setPitchButtonBackgroundStyle:(unsigned long long)arg1;
- (void)_setPitchButtonControlSize:(unsigned long long)arg1;
- (void)_setPitchButtonVisible:(bool)arg1 animationAllowed:(bool)arg2;
- (void)_setPreferredConfiguration:(id)arg1 onInit:(bool)arg2;
- (void)_setRouteContext:(id)arg1;
- (void)_setRouteContextAnnotationFocus:(bool)arg1 forRoute:(id)arg2;
- (void)_setRouteContextAnnotationText:(id)arg1 etaType:(long long)arg2 tollCurrency:(unsigned char)arg3 advisoryStyleAttributes:(id)arg4 forRoute:(id)arg5;
- (void)_setRouteContextAnnotationTexts:(id)arg1 forLegsInRoute:(id)arg2;
- (void)_setRouteContextForRoute:(id)arg1;
- (void)_setRouteContextForRoutes:(id)arg1 selectedRouteIndex:(unsigned long long)arg2;
- (void)_setRouteContextInspectedSegmentIndex:(unsigned long long)arg1 inspectedStepIndex:(unsigned long long)arg2;
- (void)_setSafeDelegate:(id)arg1;
- (void)_setScaleControlSize:(unsigned long long)arg1;
- (void)_setScaleVisibility:(long long)arg1;
- (void)_setSelectedFeatureID:(unsigned long long)arg1;
- (void)_setShouldAnimatePositionWithRouteMatch:(bool)arg1;
- (void)_setShouldLoadFallbackTiles:(bool)arg1;
- (void)_setShouldSplitRouteLine:(bool)arg1;
- (void)_setShowHeadingIndicator:(bool)arg1;
- (void)_setShowHeadingIndicatorForStepping:(bool)arg1;
- (void)_setShowsAppleLogo:(bool)arg1;
- (void)_setShowsAppleLogo:(bool)arg1 force:(bool)arg2;
- (void)_setShowsCurrentEnvironmentName:(bool)arg1;
- (void)_setShowsNightMode:(bool)arg1;
- (void)_setShowsPointLabels:(bool)arg1;
- (void)_setShowsPressedLabelMarkerEffect:(bool)arg1;
- (void)_setShowsRoadLabels:(bool)arg1;
- (void)_setShowsRoadShields:(bool)arg1;
- (void)_setShowsScaleDuringZoom:(bool)arg1;
- (void)_setShowsTrafficIncidents:(bool)arg1;
- (void)_setShowsVenues:(bool)arg1;
- (void)_setTracePlaybackSpeedMultiplier:(double)arg1;
- (void)_setTrackingButtonVisible:(bool)arg1 animationAllowed:(bool)arg2;
- (void)_setUseBalloonCalloutsForLabels:(bool)arg1;
- (void)_setUseVehicleHeading:(bool)arg1;
- (void)_setUserInteractionPausesLocationUpdates:(bool)arg1;
- (void)_setUserTrackingBehavior:(struct { bool x1; double x2; bool x3; bool x4; })arg1;
- (void)_setUserTrackingButtonBackgroundStyle:(unsigned long long)arg1;
- (void)_setUserTrackingControlSize:(unsigned long long)arg1;
- (void)_setUserTrackingMode:(long long)arg1 animated:(bool)arg2 fromTrackingButton:(bool)arg3;
- (void)_setVectorKitConsoleEnabled:(bool)arg1;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 duration:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)_setZoomScale:(double)arg1 centerCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 duration:(double)arg3 animated:(bool)arg4;
- (void)_setZoomScale:(double)arg1 centerCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 duration:(double)arg3 timingFunction:(id)arg4 animated:(bool)arg5;
- (void)_setZoomScale:(double)arg1 centerMapPoint:(struct { double x1; double x2; })arg2 duration:(double)arg3 animated:(bool)arg4;
- (void)_setZoomScale:(double)arg1 centerMapPoint:(struct { double x1; double x2; })arg2 duration:(double)arg3 timingFunction:(id)arg4 animated:(bool)arg5;
- (bool)_shouldAnimatePositionWithRouteMatch;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (bool)_shouldCallAnnotationViewCallback:(id)arg1;
- (bool)_shouldDisplayScaleForCurrentRegion;
- (bool)_shouldLoadFallbackTiles;
- (bool)_shouldSelectMapFeature:(id)arg1;
- (bool)_shouldSplitRouteLine;
- (bool)_shouldSupportAlwaysShowHeadingIndicator;
- (bool)_shouldUpdateSelectedRouteFromRoutes:(id)arg1 selectedRouteIndex:(unsigned long long)arg2;
- (bool)_showHeadingIndicator;
- (bool)_showHeadingIndicatorForStepping;
- (void)_showOrHideScaleIfNecessary:(bool)arg1;
- (bool)_showsAppleLogo;
- (bool)_showsCurrentEnvironmentName;
- (bool)_showsNightMode;
- (bool)_showsPointLabels;
- (bool)_showsPointsOfInterest;
- (bool)_showsPressedLabelMarkerEffect;
- (bool)_showsRoadLabels;
- (bool)_showsRoadShields;
- (bool)_showsScaleDuringZoom;
- (bool)_showsTrafficIncidents;
- (bool)_showsVenues;
- (void)_sizeDidChangeWithCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)_sizeWillChange;
- (void)_snapToNorthIfNecessary;
- (void)_snapToTrueNorthAndCallBack:(bool)arg1;
- (void)_startEffects;
- (id)_startEffectsTimer;
- (void)_startFlyoverTourAnimation:(unsigned long long)arg1 duration:(double)arg2 completion:(id /* block */)arg3;
- (void)_startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_startTrackingHeading;
- (void)_startZoomForExternalGesture;
- (void)_stopEffects;
- (void)_stopFlyoverAnimation;
- (void)_stopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_stopTrackingHeading;
- (bool)_supportsVKMapType:(int)arg1;
- (void)_suspendPropagatingEdgeInsets;
- (void)_suspendUserInteraction;
- (void)_traitEnvironment:(id)arg1 didChangeTraitCollection:(id)arg2;
- (id)_transitLineMarkerForIdentifier:(id)arg1;
- (id)_transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_transitLineMarkersInCurrentViewport;
- (id)_twoFingerTapGestureRecognizer;
- (void)_unregisterConfigurationObservers;
- (void)_unregisterSceneLifecycleNotifications;
- (void)_updateAppearanceIfNeeded;
- (void)_updateAppleLogoVisibility;
- (void)_updateAttribution;
- (void)_updateCameraState;
- (void)_updateCartographicConfiguration;
- (void)_updateCartographicConfigurationOnInit:(bool)arg1;
- (void)_updateCompassPositionClassic;
- (void)_updateCompassVisibility;
- (void)_updateContentBounds;
- (void)_updateControlsPosition:(bool)arg1;
- (void)_updateCourseForMapViewHeading:(id)arg1;
- (void)_updateEffects;
- (void)_updateEnvironmentLabelText;
- (void)_updateFallbackTileLoading;
- (void)_updateFromCamera:(id)arg1;
- (void)_updateFromCamera:(id)arg1 duration:(double)arg2 timing:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (void)_updateHeading:(id)arg1 animated:(bool)arg2;
- (void)_updateHeadingIndicatorAnimated:(bool)arg1;
- (void)_updateHeadingOrientation;
- (void)_updateIconsShouldAlignToPixels;
- (void)_updateInsets;
- (void)_updateInsetsWithForce:(bool)arg1;
- (void)_updateLocationConsole;
- (void)_updatePanWithTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updatePitchButtonVisibility;
- (void)_updatePointOfInterestFilter;
- (void)_updateRotationAttributes;
- (bool)_updateRotationSupported;
- (void)_updateScale;
- (void)_updateScalePosition;
- (void)_updateScrollContainerView:(bool)arg1 forReason:(long long)arg2;
- (void)_updateScrollingAndGestures;
- (void)_updateShouldDisplayEffects;
- (void)_updateShowHeadingIndicator;
- (void)_updateShowsHiking;
- (void)_updateShowsTraffic;
- (void)_updateStackViewPosition;
- (void)_updateTrackingVisibility;
- (void)_updateUserLocation:(id)arg1 routeMatch:(id)arg2;
- (void)_updateUserLocationViewWithLocation:(id)arg1 hadUserLocation:(bool)arg2;
- (void)_updateVectorKitConsoleFrameWithEdgeInsets;
- (void)_updateWaypointCaptions;
- (bool)_useBalloonCalloutsForLabels;
- (bool)_useVehicleHeading;
- (bool)_userInteractionPausesLocationUpdates;
- (bool)_userLocationWithinVisibleMapBounds;
- (struct { bool x1; double x2; bool x3; bool x4; })_userTrackingBehavior;
- (id)_userTrackingButton;
- (unsigned long long)_userTrackingButtonBackgroundStyle;
- (unsigned long long)_userTrackingControlSize;
- (double)_vectorKitTileZoomLevelForMapKitZoomLevel:(double)arg1;
- (int)_viewIndexForSubview:(id)arg1;
- (id)_visibleTileSets;
- (id /* block */)_vkTimingFunctionForUIViewAnimationCurve:(long long)arg1;
- (void)_willChangeRegionAnimated:(bool)arg1;
- (void)_willChangeStatusBarFrame:(id)arg1;
- (void)_willStartZoom:(bool)arg1;
- (void)_withEffectiveTraitCollection:(id /* block */)arg1;
- (void)_zoomIn;
- (void)_zoomInWithCompletionHandler:(id /* block */)arg1;
- (double)_zoomLevel;
- (double)_zoomLevelForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(bool)arg2;
- (double)_zoomLevelForRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(bool)arg2;
- (void)_zoomOut;
- (void)_zoomOutWithCompletionHandler:(id /* block */)arg1;
- (struct { double x1; struct CLLocationCoordinate2D { double x_2_1_1; double x_2_1_2; } x2; })_zoomRegionForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 maxZoomLevel:(long long)arg3 minZoomLevel:(long long)arg4;
- (double)_zoomScale;
- (double)_zoomScaleForMapRegion:(id)arg1;
- (void)_zoomWithAmount:(double)arg1;
- (void)_zoomWithAmount:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(bool)arg2;
- (void)addAnnotations:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)annotationContainer:(id)arg1 annotationView:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)annotationContainer:(id)arg1 calloutPrimaryActionTriggeredForAnnotationView:(id)arg2;
- (bool)annotationContainer:(id)arg1 isAnnotationView:(id)arg2 validForDisplayAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (double)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 maxDistance:(double*)arg3;
- (id)annotationContainer:(id)arg1 requestAddingClusterForAnnotationViews:(id)arg2;
- (void)annotationContainer:(id)arg1 requestRemovingClusterAnnotationView:(id)arg2 updateVisible:(bool)arg3;
- (void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(struct CGPoint { double x1; double x2; })arg2 annotationCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)annotationContainerDidAnimateBubble:(id)arg1;
- (void)annotationContainerDidDropPins:(id)arg1;
- (void)annotationContainerDidFinishMapsTransitionExpanding:(id)arg1;
- (bool)annotationContainerIsRotated:(id)arg1;
- (bool)annotationContainerShouldAlignToPixels:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotationContainerVisibleRect:(id)arg1;
- (void)annotationContainerWillAnimateBubble:(id)arg1;
- (void)annotationContainerWillDropPins:(id)arg1;
- (id /* block */)annotationCoordinateTest;
- (bool)annotationManager:(id)arg1 canSelectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didRemoveAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (bool)annotationManager:(id)arg1 shouldAnimateDeselectionOfAnnotation:(id)arg2 forSelectionOfAnnotation:(id)arg3;
- (void)annotationManager:(id)arg1 willDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManagerDidChangeVisibleAnnotationRepresentations:(id)arg1;
- (id /* block */)annotationRectTest;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotationVisibleRect;
- (id)annotations;
- (id)annotationsInMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })attributionBadgeBounds;
- (int)attributionCorner;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })attributionFrame;
- (id)beginStoppingEffects;
- (void)calloutDidAppearForAnnotationView:(id)arg1 inContainer:(id)arg2;
- (bool)calloutViewContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)camera;
- (id)cameraBoundary;
- (id)cameraZoomRange;
- (bool)canBecomeFocused;
- (bool)canPossiblyShowCompassForInternalControl:(bool)arg1;
- (bool)canRotateForHeading;
- (bool)canShowAttributionBadge;
- (bool)canShowCompass;
- (bool)canShowPitch;
- (bool)canShowZoom;
- (struct CLLocationCoordinate2D { double x1; double x2; })centerCoordinate;
- (id)compassView;
- (long long)compassViewSize;
- (long long)compassViewStyle;
- (bool)compassVisible;
- (id)configuration;
- (struct CGPoint { double x1; double x2; })convertCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (id)createDrawableForOverlay:(id)arg1;
- (int)currentMapViewTargetForAnalytics;
- (int)currentUITargetForAnalytics;
- (void)dealloc;
- (short)defaultFloorForBuildingsInVenue:(id)arg1;
- (id)delegate;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1 forAnnotation:(id)arg2;
- (void)deselectAnnotation:(id)arg1 animated:(bool)arg2;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(bool)arg2;
- (void)deselectTrails;
- (void)deselectVenuePoiFeatureId;
- (void)deviceOrientationDidChange:(id)arg1;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (bool)displayedFloorIsDefaultForBuildingsInVenue:(id)arg1;
- (short)displayedFloorOrdinalForBuildingsInVenue:(id)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forViewPrintFormatter:(id)arg2;
- (bool)effectsEnabled;
- (void)encodeWithCoder:(id)arg1;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (id)focusEffect;
- (struct CGPoint { double x1; double x2; })gestureController:(id)arg1 focusPointForPoint:(struct CGPoint { double x1; double x2; })arg2 gestureKind:(long long)arg3;
- (bool)gestureController:(id)arg1 shouldReceiveTouch:(id)arg2;
- (double)gestureController:(id)arg1 shouldWaitForNextTapForDuration:(double)arg2 afterTouch:(id)arg3;
- (void)gestureControllerDidStopPanning:(id)arg1 willDecelerate:(bool)arg2;
- (void)gestureControllerDidStopPanningDecelerating:(id)arg1;
- (void)gestureControllerDidStopRotating:(id)arg1 willDecelerate:(bool)arg2;
- (void)gestureControllerDidStopRotatingDecelerating:(id)arg1;
- (void)gestureControllerDidStopTilting:(id)arg1 willDecelerate:(bool)arg2 tiltDirection:(long long)arg3;
- (void)gestureControllerDidStopTiltingDecelerating:(id)arg1;
- (void)gestureControllerDidStopTwoFingerLongPress:(id)arg1;
- (void)gestureControllerDidStopUserInteraction:(id)arg1;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 type:(long long)arg3 willDecelerate:(bool)arg4;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 willDecelerate:(bool)arg3;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2 type:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })gestureControllerSignificantViewFrame:(id)arg1;
- (void)gestureControllerWillStartPanning:(id)arg1;
- (void)gestureControllerWillStartRotating:(id)arg1;
- (void)gestureControllerWillStartTilting:(id)arg1;
- (void)gestureControllerWillStartTwoFingerLongPress:(id)arg1;
- (void)gestureControllerWillStartUserInteraction:(id)arg1;
- (void)gestureControllerWillStartZooming:(id)arg1 animated:(bool)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)goToDefaultLocation;
- (bool)hasRenderedSomething;
- (bool)hasUserLocation;
- (bool)ignoreLocationUpdates;
- (id)initFromIBWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 locationManager:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (bool)isCompassEnabled;
- (bool)isCurrentlyRotated;
- (bool)isLocationConsoleEnabled;
- (bool)isPitchEnabled;
- (bool)isRegionChanging;
- (bool)isRotateEnabled;
- (bool)isScaleEnabled;
- (bool)isScrollEnabled;
- (bool)isShowingNoDataPlaceholders;
- (bool)isSuspended;
- (bool)isUserLocationVisible;
- (bool)isWithinHikingBoundary;
- (bool)isWithinHikingBufferRegion;
- (bool)isZoomEnabled;
- (long long)labelTextSize;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (void)locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationManagerApprovalDidChange:(id)arg1;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerFailedToUpdateHeading:(id)arg1 withError:(id)arg2;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (bool)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedHeading:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (void)makeZoomButtonsIfNeeded;
- (id)mapAttributionWithStringAttributes:(id)arg1;
- (id)mapAttributionWithStringAttributes:(id)arg1 allowMultiLine:(bool)arg2;
- (id)mapAttributionWithStringAttributes:(id)arg1 underlineText:(bool)arg2;
- (id)mapAttributionWithStringAttributes:(id)arg1 underlineText:(bool)arg2 linkAttribution:(bool)arg3;
- (void)mapLayer:(id)arg1 arSessionWasInterrupted:(unsigned long long)arg2;
- (void)mapLayer:(id)arg1 arTrackingStateDidChange:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (void)mapLayer:(id)arg1 canShowFlyoverDidChange:(bool)arg2;
- (void)mapLayer:(id)arg1 didEncounterARError:(id)arg2;
- (void)mapLayer:(id)arg1 didStopFlyoverTourCompleted:(bool)arg2;
- (void)mapLayer:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)mapLayer:(id)arg1 flyoverModeDidChange:(int)arg2;
- (void)mapLayer:(id)arg1 flyoverModeWillChange:(int)arg2;
- (void)mapLayer:(id)arg1 flyoverTourLabelDidChange:(id)arg2;
- (void)mapLayer:(id)arg1 locationInHikingToolTipRegion:(unsigned long long)arg2;
- (void)mapLayer:(id)arg1 puckLocationTracingEvent:(id)arg2;
- (void)mapLayer:(id)arg1 selectedLabelMarkerDidChangeState:(id)arg2;
- (void)mapLayer:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapLayer:(id)arg1 showingFlyoverDidChange:(bool)arg2;
- (void)mapLayer:(id)arg1 venueWithFocusDidChange:(id)arg2 building:(id)arg3;
- (void)mapLayer:(id)arg1 willTransitionTo:(long long)arg2;
- (void)mapLayerARSessionInterruptionEnded:(id)arg1;
- (void)mapLayerCanEnter3DModeDidChange:(bool)arg1;
- (void)mapLayerCanZoomInDidChange:(bool)arg1;
- (void)mapLayerCanZoomOutDidChange:(bool)arg1;
- (void)mapLayerDidBecomePitched:(bool)arg1;
- (void)mapLayerDidChangeRegionAnimated:(bool)arg1;
- (void)mapLayerDidChangeSceneState:(id)arg1 withState:(unsigned long long)arg2;
- (void)mapLayerDidChangeVisibleRegion;
- (void)mapLayerDidDraw:(id)arg1;
- (void)mapLayerDidEnterAR:(id)arg1;
- (void)mapLayerDidExitAR:(id)arg1;
- (void)mapLayerDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapLayerDidFinishInitialTrackingAnimation;
- (void)mapLayerDidFinishLoadingTiles:(id)arg1;
- (void)mapLayerDidStartLoadingTiles:(id)arg1;
- (void)mapLayerLabelsDidLayout:(id)arg1;
- (void)mapLayerMuninAvailabilityDidChange:(long long)arg1;
- (void)mapLayerNavigationCameraDidLeaveDefaultZoom;
- (void)mapLayerNavigationCameraDidReturnToDefaultZoom;
- (void)mapLayerNavigationCameraHasStartedPanning;
- (void)mapLayerNavigationCameraHasStoppedPanning;
- (id)mapLayerPresentationForAnnotation:(id)arg1;
- (void)mapLayerWillChangeRegionAnimated:(bool)arg1;
- (void)mapLayerWillEnterAR:(id)arg1;
- (void)mapLayerWillPerformZoomBounceAnimation;
- (void)mapLayerWillStartFlyoverTour:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (id)mapRegion;
- (unsigned long long)mapType;
- (void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4;
- (void)navigationCameraReturnToPuck;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlayContainer;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })overlayContainerVisibleMapRect:(id)arg1;
- (id)overlays;
- (id)overlaysInLevel:(long long)arg1;
- (void)pauseUserHeadingUpdates;
- (void)pauseUserLocationUpdates;
- (long long)pitchButtonVisibility;
- (id)pointOfInterestFilter;
- (bool)postsMapViewInitialRenderingNotification;
- (id)predictedUserLocation;
- (id)preferredConfiguration;
- (double)presentationYaw;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFits:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)registerClass:(Class)arg1 forAnnotationViewWithReuseIdentifier:(id)arg2;
- (void)removeAnnotation:(id)arg1;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)removeAnnotations:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removeOverlays:(id)arg1;
- (void)removeUserLocation;
- (id)rendererForOverlay:(id)arg1;
- (bool)rendersInBackground;
- (void)requestHikingToolTipRegionIDForLocation:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)resetDisplayedFloorOrdinalForAllVenues;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)resumeUserHeadingUpdates;
- (void)resumeUserLocationUpdates;
- (void)rotationFilter:(id)arg1 didChangeSnapping:(bool)arg2;
- (void)safeAreaInsetsDidChange;
- (id)scaleView;
- (void)selectAnnotation:(id)arg1 animated:(bool)arg2;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(bool)arg2;
- (long long)selectableMapFeatures;
- (id)selectedAnnotations;
- (void)setAttributionCorner:(int)arg1;
- (void)setBackdropViewQualityChangingDisabled:(bool)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCamera:(id)arg1;
- (void)setCamera:(id)arg1 animated:(bool)arg2;
- (void)setCamera:(id)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id /* block */)arg7;
- (void)setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)setCameraBoundary:(id)arg1;
- (void)setCameraBoundary:(id)arg1 animated:(bool)arg2;
- (void)setCameraZoomRange:(id)arg1;
- (void)setCameraZoomRange:(id)arg1 animated:(bool)arg2;
- (void)setCanShowAttributionBadge:(bool)arg1;
- (void)setCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomLevel:(double)arg2 animated:(bool)arg3;
- (void)setCompassEnabled:(bool)arg1;
- (void)setCompassViewSize:(long long)arg1;
- (void)setConfiguration:(id)arg1;
- (void)setCustomOverrideInterfaceStyle:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimmingOutsideVenueWithFocus:(bool)arg1;
- (void)setDisplayedFloorOrdinal:(short)arg1 forBuildingsInVenue:(id)arg2;
- (void)setFlyoverMode:(int)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHidden:(bool)arg1;
- (void)setIgnoreLocationUpdates:(bool)arg1;
- (void)setLabelTextSize:(long long)arg1;
- (void)setLayoutMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setLocationConsoleEnabled:(bool)arg1;
- (void)setMapType:(unsigned long long)arg1;
- (void)setPitchButtonVisibility:(long long)arg1;
- (void)setPitchEnabled:(bool)arg1;
- (void)setPointOfInterestFilter:(id)arg1;
- (void)setPredictedUserLocation:(id)arg1;
- (void)setPreferredConfiguration:(id)arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)setRendersInBackground:(bool)arg1;
- (void)setRotateEnabled:(bool)arg1;
- (void)setScaleEnabled:(bool)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setSelectableMapFeatures:(long long)arg1;
- (void)setSelectedAnnotations:(id)arg1;
- (void)setSelectedTrailId:(unsigned long long)arg1;
- (void)setSelectedTrailWithId:(unsigned long long)arg1 name:(id)arg2 locale:(id)arg3;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)arg1;
- (void)setShowsAttribution:(bool)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsCompass:(bool)arg1;
- (void)setShowsLiveEVData:(bool)arg1;
- (void)setShowsPitchControl:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setShowsScale:(bool)arg1;
- (void)setShowsTraffic:(bool)arg1;
- (void)setShowsUserLocation:(bool)arg1;
- (void)setShowsUserTrackingButton:(bool)arg1;
- (void)setShowsZoomControls:(bool)arg1;
- (void)setSupportedEVConnectorTypes:(id)arg1;
- (void)setSuspended:(bool)arg1;
- (void)setUserTrackingMode:(long long)arg1;
- (void)setUserTrackingMode:(long long)arg1 animated:(bool)arg2;
- (void)setVehicleState:(struct { bool x1; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 animated:(bool)arg3;
- (void)setZoomEnabled:(bool)arg1;
- (void)set_annotationViewsAreAddedImmediately:(bool)arg1;
- (void)set_startEffectsTimer:(id)arg1;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (void)showAnnotations:(id)arg1 animated:(bool)arg2;
- (bool)showsAttribution;
- (bool)showsBuildings;
- (bool)showsCompass;
- (bool)showsLiveEVData;
- (bool)showsPitchControl;
- (bool)showsPointsOfInterest;
- (bool)showsScale;
- (bool)showsTraffic;
- (bool)showsUserLocation;
- (bool)showsUserTrackingButton;
- (bool)showsZoomControls;
- (void)snapToNorth:(id)arg1;
- (void)startLinearZoomIn:(bool)arg1;
- (void)startUpdatingUserLocation;
- (void)stopUpdatingUserLocation;
- (void)stopZoomingWithInertia;
- (void)toggleLocationConsole:(id)arg1;
- (void)updateLayoutGuides;
- (id)urlForMapAttribution;
- (id)userLocation;
- (id)userLocationView;
- (long long)userTrackingMode;
- (void)valueChangedForGEOConfigKey:(struct { unsigned int x1; void *x2; })arg1;
- (id)venueBuildingWithFocus;
- (id)venueWithFocus;
- (id)venueWithID:(unsigned long long)arg1;
- (id)viewForAnnotation:(id)arg1;
- (id)viewForOverlay:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleCenteringRectInView:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })visibleMapRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectInView:(id)arg1;
- (id)vk_mapLayer;
- (void)willMoveToWindow:(id)arg1;
- (void)zoomControlMinusPressed:(id)arg1;
- (void)zoomControlMinusReleased:(id)arg1;
- (void)zoomControlPlusPressed:(id)arg1;
- (void)zoomControlPlusReleased:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (double)zoomToFocusVenue:(id)arg1;
- (double)zoomToFocusVenueBuilding:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CarPlaySupport.framework/CarPlaySupport

- (void)_CPS_setCamera:(id)arg1 animated:(bool)arg2 completionBlock:(id /* block */)arg3;

// Image: /System/Library/PrivateFrameworks/SlideshowKit.framework/Frameworks/OpusFoundation.framework/OpusFoundation

- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionToFitAnnotations;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionToFitLocations:(id)arg1;
- (void)zoomToFitAnnotations;
- (void)zoomToFitLocations:(id)arg1 animated:(bool)arg2;

// Image: /System/Library/PrivateFrameworks/WeatherMaps.framework/WeatherMaps

- (void)configureForMuted;
- (void)configureForWeather;
- (void)configureForWeatherWind;

@end
