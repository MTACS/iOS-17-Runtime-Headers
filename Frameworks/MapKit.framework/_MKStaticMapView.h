
@interface _MKStaticMapView : UIView <MKAnnotationContainerViewDelegate, MKAnnotationManagerDelegate, MKAnnotationMarkerContainer, MKLocationManagerObserver> {
    MKAnnotationContainerView * _annotationContainer;
    MKAnnotationManager * _annotationManager;
    bool  _batchHasChanges;
    bool  _batchingEnabled;
    MKMapSnapshotter * _currentSnapshotter;
    NSMutableArray * _currentUpdateAddedAnnotations;
    bool  _currentUpdateRemovedCustomFeatureAnnotation;
    <_MKStaticMapViewDelegate> * _delegate;
    MKMapSnapshot * _gridSnapshot;
    UIImageView * _imageView;
    bool  _isUpdatingUserLocation;
    bool  _loading;
    NSMutableOrderedSet * _overlays;
    NSMapTable * _overlaysToRenderers;
    MKMapConfiguration * _preferredConfiguration;
    bool  _showsUserLocation;
    MKMapSnapshot * _snapshot;
    unsigned long long  _snapshotGeneration;
    MKMapSnapshotOptions * _snapshotOptions;
    MKUserLocation * _userLocation;
    MKAnnotationView * _userLocationView;
}

@property (nonatomic, readonly) NSArray *annotations;
@property (nonatomic, copy) MKMapCamera *camera;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_MKStaticMapViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *overlays;
@property (nonatomic, copy) MKMapConfiguration *preferredConfiguration;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } region;
@property (nonatomic) bool showsUserLocation;
@property (readonly) Class superclass;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } visibleMapRect;

- (void).cxx_destruct;
- (void)_addKVOForOverlayRenderer:(id)arg1;
- (void)_displayGridWithCompletionHandler:(id /* block */)arg1;
- (void)_hideAllAnnotations;
- (unsigned long long)_incrementSnapshotGeneration;
- (void)_removeKVOForOverlayRenderer:(id)arg1;
- (void)_showAllAnnotations;
- (void)_startSnapshotRequest;
- (void)_startUpdatingUserLocation;
- (void)_stopUpdatingUserLocation;
- (void)_updateSnapshot:(bool)arg1;
- (void)_updateSnapshotOptionsWithOverlayRenderers;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(bool)arg2;
- (void)addAnnotations:(id)arg1;
- (void)addOverlays:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)annotationContainer:(id)arg1 annotationView:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)annotationContainer:(id)arg1 calloutPrimaryActionTriggeredForAnnotationView:(id)arg2;
- (bool)annotationContainer:(id)arg1 isAnnotationView:(id)arg2 validForDisplayAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (double)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 maxDistance:(double*)arg3;
- (id)annotationContainer:(id)arg1 requestAddingClusterForAnnotationViews:(id)arg2;
- (void)annotationContainer:(id)arg1 requestRemovingClusterAnnotationView:(id)arg2 updateVisible:(bool)arg3;
- (void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(struct CGPoint { double x1; double x2; })arg2 annotationCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)annotationContainerDidAnimateBubble:(id)arg1;
- (void)annotationContainerDidDropPins:(id)arg1;
- (bool)annotationContainerIsRotated:(id)arg1;
- (bool)annotationContainerShouldAlignToPixels:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotationContainerVisibleRect:(id)arg1;
- (void)annotationContainerWillAnimateBubble:(id)arg1;
- (void)annotationContainerWillDropPins:(id)arg1;
- (id /* block */)annotationCoordinateTest;
- (bool)annotationManager:(id)arg1 canSelectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didRemoveAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (void)annotationManagerDidChangeVisibleAnnotationRepresentations:(id)arg1;
- (id /* block */)annotationRectTest;
- (id)annotations;
- (void)beginUpdates;
- (void)calloutDidAppearForAnnotationView:(id)arg1 inContainer:(id)arg2;
- (id)camera;
- (struct CGPoint { double x1; double x2; })convertCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CLLocationCoordinate2D { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromView:(id)arg2;
- (id)delegate;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(bool)arg2;
- (void)endUpdates;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (bool)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedLimitsPrecisionState:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlays;
- (id)preferredConfiguration;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (void)removeAnnotation:(id)arg1;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)removeAnnotations:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removeOverlays:(id)arg1;
- (id)rendererForOverlay:(id)arg1;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(bool)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCamera:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setPreferredConfiguration:(id)arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSelectedTrailWithId:(id)arg1 name:(id)arg2 locale:(id)arg3;
- (void)setShowsUserLocation:(bool)arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (bool)showsUserLocation;
- (void)traitEnvironment:(id)arg1 didChangeTraitCollection:(id)arg2;
- (id)viewForAnnotation:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleCenteringRectInView:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })visibleMapRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectInView:(id)arg1;

@end
