
@interface EKSource : EKObject {
    EKAvailabilityCache * _availabilityCache;
    bool  _isFacebook;
    bool  _snoozeAlarmRequiresDetach;
    bool  _supportsAvailability;
    bool  _supportsTaskCalendarCreation;
}

@property (nonatomic, readonly) NSSet *allCalendars;
@property (nonatomic) bool allowsCalendarAddDeleteModify;
@property (nonatomic) bool allowsEvents;
@property (nonatomic) bool allowsPrivateEventAccessByDelegate;
@property (nonatomic) bool allowsProposeNewTime;
@property (nonatomic) bool allowsTasks;
@property (nonatomic, copy) NSString *appGroupIdentifier;
@property (nonatomic, retain) NSDictionary *cachedExternalInfo;
@property (nonatomic, readonly) NSSet *calendars;
@property (nonatomic, readonly) bool constraintSupportsAvailabilityRequests;
@property (nonatomic, readonly) EKSourceConstraints *constraints;
@property (nonatomic, retain) NSString *constraintsDescriptionPath;
@property (nonatomic, retain) NSString *constraintsDescriptionPathForUnitTesting;
@property (nonatomic, retain) NSString *constraintsName;
@property (nonatomic, copy) NSString *creatorBundleID;
@property (nonatomic, copy) NSString *creatorCodeSigningIdentity;
@property (nonatomic, copy) NSNumber *defaultAlarmOffset;
@property (nonatomic, copy) NSNumber *defaultAllDayAlarmOffset;
@property (nonatomic, copy) NSString *delegatedAccountOwnerStoreID;
@property (nonatomic) int displayOrder;
@property (nonatomic, readonly) int displayOrderForNewCalendar;
@property (nonatomic) bool doesSyncDefaultAlarmsToServer;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, copy) NSString *externalID;
@property (nonatomic, copy) NSString *externalModificationTag;
@property (nonatomic) int flags;
@property (nonatomic) int flags2;
@property (nonatomic, readonly) bool hasOwnerEmailAddress;
@property (nonatomic, readonly) bool isDelegate;
@property (nonatomic, readonly) bool isEnabledForEvents;
@property (nonatomic) bool isFacebook;
@property (nonatomic, readonly) bool isFacebookSource;
@property (nonatomic) bool isInMainWindow;
@property (nonatomic) bool isInSeparateWindow;
@property (nonatomic, readonly) bool isReadable;
@property (nonatomic, readonly) bool isSyncing;
@property (nonatomic, readonly) bool isWritable;
@property (nonatomic, retain) NSDate *lastSyncEndDate;
@property (nonatomic, readonly) unsigned long long lastSyncError;
@property (nonatomic, readonly, copy) NSDictionary *lastSyncErrorUserInfo;
@property (nonatomic, retain) NSDate *lastSyncStartDate;
@property (getter=isNestedLocalSource, nonatomic, readonly) bool nestedLocalSource;
@property (nonatomic, copy) NSString *notes;
@property (nonatomic) bool onlyCreatorCanModify;
@property (nonatomic, readonly) NSSet *ownerAddresses;
@property (nonatomic, copy) NSString *ownerName;
@property (nonatomic, readonly) NSString *personaIdentifier;
@property (nonatomic) long long preferredEventPrivateValue;
@property (nonatomic, readonly) NSString *preferredOwnerAddress;
@property (getter=isPrimaryLocalSource, nonatomic, readonly) bool primaryLocalSource;
@property (nonatomic) bool prohibitsDetachmentOnCommentChange;
@property (nonatomic) bool prohibitsICSImport;
@property (nonatomic) bool prohibitsMultipleDaysInMonthlyRecurrence;
@property (nonatomic) bool prohibitsMultipleMonthsInYearlyRecurrence;
@property (nonatomic) bool prohibitsPrivateEventsWithAttendees;
@property (nonatomic) bool prohibitsSlicingEventsWithAttendees;
@property (nonatomic) bool prohibitsYearlyRecurrenceInterval;
@property (nonatomic) bool readOnly;
@property (nonatomic, readonly) REMObjectID *remAccountObjectID;
@property (nonatomic) bool requiresOccurrencesConformToRecurrenceRule;
@property (nonatomic) bool requiresSamePrivacyLevelAcrossRecurrenceSeries;
@property (nonatomic, readonly) NSString *serverHost;
@property (nonatomic, readonly) long long serverPort;
@property (nonatomic, readonly) NSURL *serverURL;
@property (nonatomic, readonly) bool serverUsesSSL;
@property (nonatomic) bool showsNotifications;
@property (nonatomic) bool snoozeAlarmRequiresDetach;
@property (nonatomic, readonly) NSError *sourceError;
@property (nonatomic, retain) NSString *sourceIdentifier;
@property (nonatomic, readonly) NSError *sourceOrEventError;
@property (nonatomic) long long sourceType;
@property (nonatomic) long long sourceTypeRaw;
@property (nonatomic) long long strictestEventPrivateValue;
@property (nonatomic) bool supportsAlarmAcknowledgedDate;
@property (nonatomic) bool supportsAttachments;
@property (nonatomic, readonly) bool supportsAvailability;
@property (nonatomic) bool supportsAvailabilityRequests;
@property (nonatomic, readonly) bool supportsCalendarCreation;
@property (nonatomic) bool supportsDelegateEnumeration;
@property (nonatomic) bool supportsDelegation;
@property (nonatomic, readonly) bool supportsEventCalendarCreation;
@property (nonatomic) bool supportsEventForwarding;
@property (nonatomic) bool supportsIgnoringEventsInAvailabilityRequests;
@property (nonatomic) bool supportsInvitationModificationsWithoutNotification;
@property (nonatomic) bool supportsLocationDirectorySearches;
@property (nonatomic) bool supportsPrivateEvents;
@property (nonatomic) bool supportsPush;
@property (nonatomic, readonly) bool supportsReminderActions;
@property (nonatomic) bool supportsSharedCalendars;
@property (nonatomic, readonly) bool supportsTaskCalendarCreation;
@property (nonatomic) bool supportsTravelTime;
@property (nonatomic, readonly) NSString *symbolicColorForNewCalendar;
@property (nonatomic, retain) EKSyncError *syncError;
@property (nonatomic, readonly) bool syncs;
@property (nonatomic, copy) NSString *title;
@property (nonatomic) bool usesSelfAttendee;
@property (nonatomic, readonly) bool wantsCommentPromptWhenDeclining;
@property (nonatomic) bool wasMigrated;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (long long)_calEventPrivacyLevelToEKPrivacyLevel:(int)arg1;
+ (int)_ekPrivacyLevelToCalEventPrivacyLevel:(long long)arg1;
+ (id)_eventKitBundle;
+ (Class)frozenClass;
+ (bool)isWeakRelationship;
+ (id)knownIdentityKeysForComparison;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownSingleValueKeysForComparison;
+ (id)primaryLocalSourceID;
+ (id)sourceWithEventStore:(id)arg1;

- (void).cxx_destruct;
- (id)UUID;
- (unsigned int)_adjustedDisplayOrder;
- (id)_calDAVOfficeHoursFromEKOfficeHours:(id)arg1;
- (id)_constraintsInternal;
- (id)_convertTypeOfOwnerAddresses:(id)arg1 toSet:(bool)arg2;
- (void)_copyInitialDefaultAlarmSettingsIfNeeded;
- (void)_countCalendarItemsOfCalType:(int)arg1 resultHandler:(id /* block */)arg2;
- (id)_ekOfficeHoursFromCalDAVOfficeHours:(id)arg1;
- (id)_nsErrorFromSyncError:(id)arg1 event:(id)arg2;
- (bool)_reset;
- (void)_resetInternalStateWithForce:(bool)arg1;
- (void)_setConstraintsNameWithoutValidation:(id)arg1;
- (bool)_shouldCopyDefaultAlarmsFromLocalSource;
- (bool)_validateClientCanModifySources:(id*)arg1;
- (id)allCalendars;
- (bool)allowsCalendarAddDeleteModify;
- (bool)allowsEvents;
- (bool)allowsPrivateEventAccessByDelegate;
- (bool)allowsProposeNewTime;
- (bool)allowsTasks;
- (id)appGroupIdentifier;
- (id)availabilityCache;
- (id)cachedExternalInfo;
- (id)cachedExternalInfoData;
- (id)calendarWithExternalIdentifier:(id)arg1;
- (id)calendars;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (bool)constraintSupportsAvailabilityRequests;
- (id)constraints;
- (id)constraintsDescriptionPath;
- (id)constraintsDescriptionPathForUnitTesting;
- (id)constraintsName;
- (void)countCalendarItemsOfType:(unsigned long long)arg1 resultHandler:(id /* block */)arg2;
- (void)countCalendarItemsWithResultHandler:(id /* block */)arg1;
- (id)creatorBundleID;
- (id)creatorCodeSigningIdentity;
- (id)defaultAlarmOffset;
- (id)defaultAllDayAlarmOffset;
- (id)delegatedAccountOwnerStoreID;
- (id)description;
- (bool)disabled;
- (int)displayOrder;
- (int)displayOrderForNewCalendar;
- (bool)doesSyncDefaultAlarmsToServer;
- (id)externalID;
- (id)externalInfoForKey:(id)arg1;
- (id)externalModificationTag;
- (void)fetchOfficeHoursWithCompletion:(id /* block */)arg1 onQueue:(id)arg2;
- (bool)flag2:(int)arg1;
- (bool)flag:(int)arg1;
- (int)flags;
- (int)flags2;
- (bool)hasOwnerEmailAddress;
- (bool)isDelegate;
- (bool)isEnabled;
- (bool)isEnabledForEvents;
- (bool)isFacebook;
- (bool)isFacebookSource;
- (bool)isInMainWindow;
- (bool)isInSeparateWindow;
- (bool)isNestedLocalSource;
- (bool)isPrimaryLocalSource;
- (bool)isReadable;
- (bool)isSyncing;
- (bool)isWritable;
- (id)lastSyncEndDate;
- (unsigned long long)lastSyncError;
- (id)lastSyncErrorUserInfo;
- (id)lastSyncStartDate;
- (int)managedConfigurationAccountAccess;
- (id)notes;
- (bool)onlyCreatorCanModify;
- (id)ownerAddresses;
- (id)ownerName;
- (id)personaIdentifier;
- (long long)preferredEventPrivateValue;
- (int)preferredEventPrivateValueRaw;
- (id)preferredOwnerAddress;
- (bool)prohibitsDetachmentOnCommentChange;
- (bool)prohibitsICSImport;
- (bool)prohibitsMultipleDaysInMonthlyRecurrence;
- (bool)prohibitsMultipleMonthsInYearlyRecurrence;
- (bool)prohibitsPrivateEventsWithAttendees;
- (bool)prohibitsSlicingEventsWithAttendees;
- (bool)prohibitsYearlyRecurrenceInterval;
- (bool)readOnly;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (bool)refresh;
- (id)remAccountObjectID;
- (bool)remove:(id*)arg1;
- (bool)removeCalendarItemsOlderThanDate:(id)arg1 entityTypeMask:(unsigned long long)arg2 error:(id*)arg3;
- (bool)requiresOccurrencesConformToRecurrenceRule;
- (bool)requiresSamePrivacyLevelAcrossRecurrenceSeries;
- (bool)save:(id*)arg1;
- (id)serverHost;
- (long long)serverPort;
- (id)serverURL;
- (bool)serverUsesSSL;
- (void)setAllowsCalendarAddDeleteModify:(bool)arg1;
- (void)setAllowsEvents:(bool)arg1;
- (void)setAllowsPrivateEventAccessByDelegate:(bool)arg1;
- (void)setAllowsProposeNewTime:(bool)arg1;
- (void)setAllowsTasks:(bool)arg1;
- (void)setAppGroupIdentifier:(id)arg1;
- (void)setCachedExternalInfo:(id)arg1;
- (void)setCachedExternalInfoData:(id)arg1;
- (void)setConstraintsDescriptionPath:(id)arg1;
- (void)setConstraintsDescriptionPathForUnitTesting:(id)arg1;
- (void)setConstraintsName:(id)arg1;
- (void)setCreatorBundleID:(id)arg1;
- (void)setCreatorCodeSigningIdentity:(id)arg1;
- (void)setDefaultAlarmOffset:(id)arg1;
- (void)setDefaultAllDayAlarmOffset:(id)arg1;
- (void)setDelegatedAccountOwnerStoreID:(id)arg1;
- (void)setDisabled:(bool)arg1;
- (void)setDisplayOrder:(int)arg1;
- (void)setDoesSyncDefaultAlarmsToServer:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setExternalID:(id)arg1;
- (void)setExternalModificationTag:(id)arg1;
- (void)setFlag2:(int)arg1 value:(bool)arg2;
- (void)setFlag:(int)arg1 value:(bool)arg2;
- (void)setFlags2:(int)arg1;
- (void)setFlags:(int)arg1;
- (void)setIsFacebook:(bool)arg1;
- (void)setIsInMainWindow:(bool)arg1;
- (void)setIsInSeparateWindow:(bool)arg1;
- (void)setLastSyncEndDate:(id)arg1;
- (void)setLastSyncError:(unsigned long long)arg1 userInfo:(id)arg2;
- (void)setLastSyncStartDate:(id)arg1;
- (void)setNotes:(id)arg1;
- (void)setOfficeHours:(id)arg1 withCompletion:(id /* block */)arg2 onQueue:(id)arg3;
- (void)setOnlyCreatorCanModify:(bool)arg1;
- (void)setOwnerName:(id)arg1;
- (void)setPreferredEventPrivateValue:(long long)arg1;
- (void)setPreferredEventPrivateValueRaw:(int)arg1;
- (void)setProhibitsDetachmentOnCommentChange:(bool)arg1;
- (void)setProhibitsICSImport:(bool)arg1;
- (void)setProhibitsMultipleDaysInMonthlyRecurrence:(bool)arg1;
- (void)setProhibitsMultipleMonthsInYearlyRecurrence:(bool)arg1;
- (void)setProhibitsPrivateEventsWithAttendees:(bool)arg1;
- (void)setProhibitsSlicingEventsWithAttendees:(bool)arg1;
- (void)setProhibitsYearlyRecurrenceInterval:(bool)arg1;
- (void)setReadOnly:(bool)arg1;
- (void)setRequiresOccurrencesConformToRecurrenceRule:(bool)arg1;
- (void)setRequiresSamePrivacyLevelAcrossRecurrenceSeries:(bool)arg1;
- (void)setShowsNotifications:(bool)arg1;
- (void)setSnoozeAlarmRequiresDetach:(bool)arg1;
- (void)setSourceIdentifier:(id)arg1;
- (void)setSourceType:(long long)arg1;
- (void)setSourceTypeRaw:(long long)arg1;
- (void)setStrictestEventPrivateValue:(long long)arg1;
- (void)setStrictestEventPrivateValueRaw:(int)arg1;
- (void)setSupportsAlarmAcknowledgedDate:(bool)arg1;
- (void)setSupportsAttachments:(bool)arg1;
- (void)setSupportsAvailabilityRequests:(bool)arg1;
- (void)setSupportsDelegateEnumeration:(bool)arg1;
- (void)setSupportsDelegation:(bool)arg1;
- (void)setSupportsEventForwarding:(bool)arg1;
- (void)setSupportsIgnoringEventsInAvailabilityRequests:(bool)arg1;
- (void)setSupportsInvitationModificationsWithoutNotification:(bool)arg1;
- (void)setSupportsLocationDirectorySearches:(bool)arg1;
- (void)setSupportsPrivateEvents:(bool)arg1;
- (void)setSupportsPush:(bool)arg1;
- (void)setSupportsSharedCalendars:(bool)arg1;
- (void)setSupportsTravelTime:(bool)arg1;
- (void)setSyncError:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUUID:(id)arg1;
- (void)setUsesSelfAttendee:(bool)arg1;
- (void)setWasMigrated:(bool)arg1;
- (bool)showsNotifications;
- (bool)snoozeAlarmRequiresDetach;
- (id)sourceError;
- (id)sourceIdentifier;
- (id)sourceOrEventError;
- (long long)sourceType;
- (long long)sourceTypeRaw;
- (long long)strictestEventPrivateValue;
- (int)strictestEventPrivateValueRaw;
- (bool)supportsAlarmAcknowledgedDate;
- (bool)supportsAttachments;
- (bool)supportsAvailability;
- (bool)supportsAvailabilityRequests;
- (bool)supportsCalendarCreation;
- (bool)supportsCalendarTaskCreation;
- (bool)supportsDelegateEnumeration;
- (bool)supportsDelegation;
- (bool)supportsEventCalendarCreation;
- (bool)supportsEventForwarding;
- (bool)supportsIgnoringEventsInAvailabilityRequests;
- (bool)supportsInvitationModificationsWithoutNotification;
- (bool)supportsLocationDirectorySearches;
- (bool)supportsPrivateEvents;
- (bool)supportsPush;
- (bool)supportsReminderActions;
- (bool)supportsSharedCalendars;
- (bool)supportsTaskCalendarCreation;
- (bool)supportsTravelTime;
- (id)symbolicColorForNewCalendar;
- (id)syncError;
- (bool)syncs;
- (id)title;
- (bool)usesSelfAttendee;
- (bool)validate:(id*)arg1;
- (bool)wantsCommentPromptWhenDeclining;
- (bool)wasMigrated;

// Image: /System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit

- (bool)CUIKEditingContext_removeWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)CUIKEditingContext_saveWithSpan:(long long)arg1 error:(id*)arg2;
- (id)sortedCalendarsForEntityType:(unsigned long long)arg1;
- (id)sortedCalendarsForEntityType:(unsigned long long)arg1 passingTest:(id /* block */)arg2;

@end
