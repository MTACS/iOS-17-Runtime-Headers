
@interface EKEventStore : NSObject <EKDaemonConnectionDelegate> {
    NSMutableDictionary * __cachedConstraints;
    EKSourceConstraints * __cachedDefaultConstraints;
    NSMutableDictionary * __cachedNotificationCollections;
    bool  _allowsBirthdayCalendarModifications;
    NSObject<OS_dispatch_queue> * _asynchronousSearchQueue;
    <EKAuthStatusChecker> * _authStatusChecker;
    CADGenerationStampedObjectID * _birthdaySourceID;
    NSMutableDictionary * _cachedValidatedAddresses;
    NSObject<OS_dispatch_queue> * _calendarSourcesAndDefaultsQueue;
    NSMutableDictionary * _calendars;
    NSMutableDictionary * _calendarsByIdentifier;
    NSObject<OS_dispatch_queue> * _constraintsCacheQueue;
    EKDataProtectionObserver * _dataProtectionObserver;
    EKDaemonConnection * _database;
    NSMutableArray * _databaseWaitCallbacks;
    NSMutableArray * _databaseWaitTimestamps;
    NSObject<OS_dispatch_queue> * _dbChangedQueue;
    EKAlarm * _defaultAllDayAlarm;
    NSNumber * _defaultAllDayAlarmOffset;
    NSMutableDictionary * _defaultCalendarsForNewEventsIDBySourceID;
    double  _defaultDelayForThrottledNotifications;
    EKAlarm * _defaultTimedAlarm;
    NSNumber * _defaultTimedAlarmOffset;
    NSCache * _deletedEventUniqueIdentifiersCache;
    NSMutableSet * _deletedObjects;
    NSDictionary * _eventSourceIDToReminderSourceIDMapping;
    NSHashTable * _eventsNeedsGeocoding;
    struct { 
        unsigned int restoreGenerationChanged : 1; 
    }  _flags;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _flagsLock;
    EKImageCache * _imageCache;
    bool  _inboxRepliedSectionHasContent;
    CADDatabaseInitializationOptions * _initializationOptions;
    NSHashTable * _insertedObjects;
    NSMutableDictionary * _lastCommitTempToPermanentObjectIDMap;
    CADInMemoryChangeTimestamp * _lastDatabaseNotificationTimestamp;
    unsigned long long  _lastFiredEventStoreChangedNotificationTime;
    unsigned long long  _lastFiredNonSyncOnlyEventStoreChangedNotificationTime;
    EKSequenceToken * _lastSequenceToken;
    CADGenerationStampedObjectID * _naturalLanguageSuggestedEventCalendarID;
    CalAccumulatingQueue * _notificationAccumulatingQueue;
    NSObject<OS_dispatch_queue> * _notificationCollectionCacheQueue;
    NSMutableArray * _objectsPendingCommit;
    NSMutableSet * _objectsPendingSave;
    unsigned long long  _options;
    NSMutableDictionary * _rebaseTempObjectIDReverseMap;
    NSMutableDictionary * _registeredObjects;
    NSObject<OS_dispatch_queue> * _registeredQueue;
    NSDictionary * _reminderSourceIDToEventSourceIDMapping;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _reminderSourceMapLock;
    EKReminderStore * _reminderStore;
    NSNumber * _showDeclinedEventsNumber;
    NSNumber * _siriSuggestionsAllDayAlarmOffset;
    NSNumber * _siriSuggestionsTimedAlarmOffset;
    bool  _skipModificationValidation;
    NSMutableDictionary * _sources;
    CADGenerationStampedObjectID * _subscribedCalendarsSourceID;
    CADGenerationStampedObjectID * _suggestedEventCalendarID;
    NSTimeZone * _timeZone;
    NSObject<OS_dispatch_queue> * _unsavedChangesQueue;
    NSMutableSet * _updatedObjects;
}

@property (nonatomic, retain) NSMutableDictionary *_cachedConstraints;
@property (nonatomic, retain) EKSourceConstraints *_cachedDefaultConstraints;
@property (nonatomic, retain) NSMutableDictionary *_cachedNotificationCollections;
@property (nonatomic, readonly) bool allowsBirthdayModifications;
@property (nonatomic, readonly) bool automaticLocationGeocodingAllowed;
@property (nonatomic) bool birthdayCalendarEnabled;
@property (nonatomic) int birthdayCalendarVersion;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *calendarSourcesAndDefaultsQueue;
@property (nonatomic, readonly) NSArray *calendars;
@property (nonatomic, readonly) bool clientCanModifySources;
@property (readonly) EKDaemonConnection *connection;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *constraintsCacheQueue;
@property (nonatomic, retain) EKDataProtectionObserver *dataProtectionObserver;
@property (nonatomic, retain) EKDaemonConnection *database;
@property (nonatomic, readonly, copy) NSString *databasePath;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *dbChangedQueue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) EKAlarm *defaultAllDayAlarm;
@property (nonatomic, readonly) NSNumber *defaultAllDayAlarmOffset;
@property (nonatomic, retain) EKCalendar *defaultCalendarForNewEvents;
@property (nonatomic, readonly) EKCalendar *defaultCalendarForNewReminders;
@property (nonatomic, readonly) EKAlarm *defaultTimedAlarm;
@property (nonatomic, readonly) NSNumber *defaultTimedAlarmOffset;
@property (nonatomic, readonly) NSArray *delegateSources;
@property (nonatomic, readonly) NSSet *deletedObjectIDsPendingCommit;
@property (nonatomic, retain) NSMutableSet *deletedObjects;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long eventNotificationCount;
@property (nonatomic, readonly) NSArray *eventNotifications;
@property (nonatomic, retain) NSDictionary *eventSourceIDToReminderSourceIDMapping;
@property (nonatomic, readonly) NSString *eventStoreIdentifier;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) EKImageCache *imageCache;
@property (nonatomic, readonly) bool inboxRepliedSectionHasContent;
@property (nonatomic, readonly) NSArray *inboxRepliedSectionItems;
@property (nonatomic, retain) NSHashTable *insertedObjects;
@property (nonatomic, readonly) bool isDataProtected;
@property (nonatomic, readonly) unsigned long long lastConfirmedSplashScreenVersion;
@property (nonatomic, retain) CADInMemoryChangeTimestamp *lastDatabaseNotificationTimestamp;
@property (nonatomic, readonly) EKCalendar *naturalLanguageSuggestedEventCalendar;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *notificationCollectionCacheQueue;
@property (nonatomic, readonly) NSArray *objectsPendingCommit;
@property (nonatomic, retain) NSMutableSet *objectsPendingSave;
@property (nonatomic, retain) NSMutableDictionary *registeredObjects;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *registeredQueue;
@property (nonatomic, retain) NSDictionary *reminderSourceIDToEventSourceIDMapping;
@property (nonatomic, readonly) struct os_unfair_lock_s { unsigned int x1; }*reminderSourceMapLock;
@property (nonatomic, readonly) EKReminderStore *reminderStore;
@property (nonatomic) bool showDeclinedEvents;
@property (nonatomic, readonly) NSNumber *siriSuggestionsAllDayAlarmOffset;
@property (nonatomic, readonly) NSNumber *siriSuggestionsTimedAlarmOffset;
@property (nonatomic) bool skipModificationValidation;
@property (nonatomic, readonly) NSArray *sources;
@property (nonatomic, readonly) EKCalendar *suggestedEventCalendar;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSTimeZone *timeZone;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *unsavedChangesQueue;
@property (nonatomic, retain) NSMutableSet *updatedObjects;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (void)EKObjectIDsFromData:(id)arg1 deletedObjectIDOffsets:(id)arg2 outChangedIDs:(id*)arg3 outDeletedIDs:(id*)arg4;
+ (void)_addDaysSpannedByEvent:(id)arg1 toCountedSet:(id)arg2 inRange:(id)arg3 withNSCalendar:(id)arg4;
+ (id)_contextForNotificationWithChangeType:(unsigned long long)arg1 changedObjectIDs:(id)arg2;
+ (double)_defaultDelayForThrottledNotificationsWithInitializationOptions:(id)arg1;
+ (id)_filteredArrayWithIdentifiers:(id)arg1 fromObjects:(id)arg2;
+ (id)_filteredObjectsWithIdentifiers:(id)arg1 fromObjects:(id)arg2;
+ (id)_iMIPScheduledEvent:(id)arg1;
+ (bool)_isConfirmedSuggestedEvent:(id)arg1 uniqueKey:(id*)arg2;
+ (void)_refreshFolderListForSource:(id)arg1 isUserRequested:(bool)arg2;
+ (bool)_shouldRefreshSource:(id)arg1;
+ (bool)_staticAccessFlagSaysDeniedForEntityType:(unsigned long long)arg1;
+ (double)_throttleDelayForEventStoreChangedNotificationWithLastFiredTime:(unsigned long long)arg1 delay:(double)arg2;
+ (long long)authorizationStatusForEntityType:(unsigned long long)arg1;
+ (long long)authorizationStatusWithAuditToken:(struct { unsigned int x1[8]; })arg1 entityType:(unsigned long long)arg2;
+ (int)calDatabaseInitOptionsFromEKEventStoreInitOptions:(unsigned long long)arg1;
+ (id)calendarObjectIDsForPredicate:(id)arg1;
+ (Class)classForEntityName:(id)arg1;
+ (unsigned long long)ekEventStoreInitOptionsFromCalDatabaseInitOptions:(int)arg1;
+ (id)eventStoreChangedDistributedNotificationName;
+ (unsigned long long)predicatePropertyLoadMode;
+ (long long)realAuthorizationStatusForEntityType:(unsigned long long)arg1;
+ (id /* block */)reminderStoreContainerTokenProvider;
+ (void)setDenyAccessToEvents:(bool)arg1;
+ (void)setDenyAccessToReminders:(bool)arg1;
+ (void)setPredicatePropertyLoadMode:(unsigned long long)arg1;
+ (void)setReminderStoreContainerTokenProvider:(id /* block */)arg1;

- (void).cxx_destruct;
- (id)ICSDataForCalendarItems:(id)arg1 options:(unsigned long long)arg2;
- (id)ICSDataForCalendarItems:(id)arg1 preventLineFolding:(bool)arg2;
- (Class)_SGSuggestionsServiceClass;
- (void)_accessStatusChanged;
- (id)_addFetchedObjectWithID:(id)arg1;
- (void)_addObjectToPendingCommits:(id)arg1;
- (id)_allCalendars;
- (id)_apiExpectedEventForEvent:(id)arg1;
- (id)_apiExpectedEventsForEvents:(id)arg1;
- (void)_cacheCalendarWithCADObjectID:(id)arg1 withDefaultLoadedPropertyValues:(id)arg2 forKeys:(id)arg3;
- (void)_cacheDeletedEventIdentifierIfNeededForObject:(id)arg1;
- (void)_cacheSourceWithCADObjectID:(id)arg1 withDefaultLoadedPropertyValues:(id)arg2 forKeys:(id)arg3;
- (id)_cachedConstraints;
- (id)_cachedDefaultConstraints;
- (id)_cachedNotificationCollections;
- (bool)_calendar:(id)arg1 supportsEntityType:(unsigned long long)arg2;
- (id)_calendarItemsMatchingPredicate:(id)arg1;
- (id)_calendarItemsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2 entityTypes:(unsigned long long)arg3;
- (void)_clearAllCachedConstraints;
- (void)_clearAllCaches;
- (void)_clearCachedCalendars;
- (void)_clearCachedConstraintsForObjectWithCADObjectID:(id)arg1;
- (void)_clearCachedSources;
- (void)_clearEventsNeedingGeocodingWithCommittedObjects:(id)arg1;
- (void)_clearImageCache;
- (void)_clearPendingChangesForObjectsWithOwner:(id)arg1;
- (id)_combineEventSources:(id)arg1 withReminderSources:(id)arg2;
- (bool)_commit:(id*)arg1;
- (bool)_commitObjectsWithIdentifiers:(id)arg1 error:(id*)arg2;
- (void)_databaseChangedExternally:(unsigned long long)arg1 processSynchronously:(bool)arg2;
- (void)_defaultAlarmChangedExternally;
- (void)_defaultCalendarChangedExternally;
- (id)_deletableCalendars;
- (id)_deletableSources;
- (void)_deleteDraft:(id)arg1;
- (void)_deleteDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2;
- (void)_deleteObject:(id)arg1;
- (void)_detachObject:(id)arg1;
- (id)_draftPathForEventWithOccurrenceID:(id)arg1 draftDirectory:(id)arg2;
- (id)_entityWrappersForEventUUIDs:(id)arg1 inCalendars:(id)arg2 propertiesToLoad:(id)arg3;
- (id)_eventCalendarWithIdentifier:(id)arg1;
- (id)_eventOccurrenceWithURI:(id)arg1;
- (id)_eventWithEventIdentifier:(id)arg1;
- (id)_eventWithURI:(id)arg1 checkValid:(bool)arg2;
- (void)_fetchAndClearEventsNeedingGeocoding:(id*)arg1 withCommittedObjects:(id)arg2;
- (id)_fetchConstraintsForObjectWithCADObjectID:(id)arg1;
- (id)_fetchPersistentNotificationCollectionForSourceWithCADObjectID:(id)arg1;
- (void)_fetchProperties:(id)arg1 forObjects:(id)arg2;
- (void)_forgetRegisteredObjects;
- (void)_handleExternalDatabaseChangeNotification:(id)arg1 synchronously:(bool)arg2;
- (void)_handleExternalDatabaseChangedNotificationAsynchronously:(id)arg1;
- (id)_imageCache;
- (void)_implicitUpgradeToFullAccessIfNeededWithReason:(long long)arg1;
- (void)_implicitlyRequestEventAccessForOlderApps;
- (id)_importEventsWithExternalIDs:(id)arg1 fromICSData:(id)arg2 intoCalendarsWithIDs:(id)arg3 options:(unsigned long long)arg4 batchSize:(int)arg5;
- (void)_insertObject:(id)arg1;
- (id)_invalidCADObjectIDs:(id)arg1;
- (bool)_isRegisteredObject:(id)arg1;
- (bool)_isUnitTesting;
- (void)_loadCalendarsIfNeeded;
- (id)_loadDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2;
- (id)_loadDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2 withVersion:(id)arg3;
- (void)_loadSourcesIfNeeded;
- (id)_localSourceWithEnableIfNeeded:(bool)arg1;
- (id)_markObjectsWithIdentifiersAsCommitted:(id)arg1;
- (void)_mimicCommitWithOldToNewObjectIDMap:(id)arg1 insertedObjectsToCommit:(id)arg2 updatedObjectsToCommit:(id)arg3 deletedObjectsToCommit:(id)arg4;
- (id)_nextEventsWithFetchBlock:(id /* block */)arg1 steps:(id)arg2 limit:(unsigned long long)arg3;
- (void)_objectDidReset:(id)arg1;
- (bool)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id*)arg3 options:(id*)arg4;
- (void)_populateCalendarsByIdentifierIfNeeded;
- (void)_postEventStoreChangedNotificationWithChangeType:(unsigned long long)arg1 changedObjectIDs:(id)arg2 forceImmediate:(bool)arg3;
- (void)_postEventStoreChangedNotificationWithTags:(id)arg1 context:(id)arg2;
- (void)_processChangedObjectIDsWithErrorCode:(int)arg1 changesTruncated:(bool)arg2 latestToken:(id)arg3 changeData:(id)arg4 resultHandler:(id /* block */)arg5;
- (void)_processExternalChangesWithLatestTimestamp:(id)arg1 changedObjectIDsData:(id)arg2 deletedObjectIDOffsets:(id)arg3 changesWereSyncStatusOnly:(bool)arg4 forceImmediateNotification:(bool)arg5;
- (void)_rebuildSourceMapsWithEventSources:(id)arg1 reminderSources:(id)arg2;
- (bool)_refreshDASource:(id)arg1 isUserRequested:(bool)arg2;
- (void)_registerObject:(id)arg1;
- (void)_registerObjectImmediate:(id)arg1;
- (void)_removeCachedCalendarFromSource:(id)arg1;
- (void)_removeCachedCalendarWithCADID:(id)arg1;
- (bool)_removeCalendar:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)_removeEvent:(id)arg1 span:(long long)arg2 commit:(bool)arg3 error:(id*)arg4;
- (bool)_removeEventCalendar:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)_removeReminder:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (void)_reregisterObject:(id)arg1 oldID:(id)arg2;
- (void)_resetAndApplyChangesForRedactedMimicCommitOnObject:(id)arg1 usingModifiedObject:(id)arg2;
- (void)_resetAndNotifyAfterDatabaseRestoreGenerationChanged;
- (void)_resetForMimicCommitOnObject:(id)arg1 oldToNewObjectIDMap:(id)arg2;
- (bool)_saveCalendar:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)_saveCalendar:(id)arg1 error:(id*)arg2;
- (bool)_saveDraftOfEvent:(id)arg1 toDirectory:(id)arg2;
- (bool)_saveDraftOfEvent:(id)arg1 toDirectory:(id)arg2 withVersion:(id)arg3;
- (bool)_saveEvent:(id)arg1 span:(long long)arg2 commit:(bool)arg3 error:(id*)arg4;
- (bool)_saveReminder:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (void)_setIsUnitTesting:(bool)arg1;
- (void)_setMockPermissions:(id)arg1;
- (void)_simulateDaemonCrashForUnitTests;
- (id)_sourceWithID:(id)arg1;
- (double)_throttleDelayForEventStoreChangedNotificationWithTags:(id)arg1 context:(id)arg2;
- (void)_trackModifiedObject:(id)arg1;
- (void)_uncacheImage:(id)arg1;
- (void)_unregisterObject:(id)arg1;
- (void)_updateDefaultDelayForThrottleEventStoreChangedNotifications;
- (void)_validateEventPredicate:(id)arg1;
- (void)acceptSuggestedEvent:(id)arg1;
- (void)acceptSuggestedEvent:(id)arg1 placeOnCalendar:(id)arg2;
- (bool)accessGrantedForEntityType:(unsigned long long)arg1;
- (bool)acknowledgeNotifications:(id)arg1 error:(id*)arg2;
- (id)acquireDefaultCalendarForNewEvents;
- (id)acquireDefaultCalendarForNewReminders;
- (void)addExchangeDelegateWithName:(id)arg1 emailAddress:(id)arg2 toSource:(id)arg3 completion:(id /* block */)arg4;
- (unsigned long long)addressValidationStatus:(id)arg1;
- (void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 inCalendars:(id)arg3 completion:(id /* block */)arg4;
- (id)alarmWithExternalID:(id)arg1;
- (id)alarmWithUUID:(id)arg1;
- (id)allEventsWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (bool)allowAccessToEventsOnly;
- (bool)allowDelegateSources;
- (bool)allowsBirthdayModifications;
- (void)analyticsSendEvent:(id)arg1 appendingClientBundleIDToPayload:(id)arg2;
- (id)attachmentWithUUID:(id)arg1;
- (bool)automaticLocationGeocodingAllowed;
- (bool)backupDatabaseToDestination:(id)arg1 withFormat:(unsigned long long)arg2 error:(id*)arg3;
- (id)beginCalDAVServerSimulationWithHostname:(id)arg1;
- (bool)birthdayCalendarEnabled;
- (int)birthdayCalendarVersion;
- (void)cacheConstraints:(id)arg1 forObjectWithCADObjectID:(id)arg2;
- (void)cacheValidationStatusForAddress:(id)arg1 status:(unsigned long long)arg2;
- (id)cachedConstraintsForCalendar:(id)arg1;
- (id)cachedConstraintsForEvent:(id)arg1;
- (id)cachedConstraintsForEventOrSourceWithCADObjectID:(id)arg1;
- (id)cachedConstraintsForReminder:(id)arg1;
- (id)cachedConstraintsForSource:(id)arg1;
- (id)calendarItemWithIdentifier:(id)arg1;
- (id)calendarItemsWithExternalIdentifier:(id)arg1;
- (id)calendarItemsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (id)calendarItemsWithUniqueIdentifier:(id)arg1 inCalendar:(id)arg2;
- (id)calendarSourcesAndDefaultsQueue;
- (id)calendarWithCADID:(id)arg1;
- (id)calendarWithExternalID:(id)arg1;
- (id)calendarWithExternalURI:(id)arg1;
- (id)calendarWithID:(id)arg1;
- (id)calendarWithIdentifier:(id)arg1;
- (id)calendarWithUniqueID:(id)arg1;
- (id)calendars;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (id)calendarsForEntityType:(unsigned long long)arg1 inSource:(id)arg2;
- (id)calendarsWithIdentifiers:(id)arg1;
- (id)calendarsWithObjectIDs:(id)arg1;
- (bool)canModifyCalendarDatabase;
- (bool)canModifySuggestedEventCalendar;
- (void)cancelFetchRequest:(id)arg1;
- (void)changedObjectIDsSinceToken:(long long)arg1 resultHandler:(id /* block */)arg2;
- (void)changesSinceSequenceToken:(id)arg1 completion:(id /* block */)arg2;
- (void)clearSuperfluousChanges;
- (bool)clientCanModifySources;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventObjectID:(id)arg2;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventObjectID:(id)arg2 prefersForwardSearch:(bool)arg3;
- (id)colorStringForNewCalendar;
- (id)combineEventCalendars:(id)arg1 withReminderCalendars:(id)arg2;
- (id)combinedReminderAndEventSources;
- (bool)commit:(id*)arg1;
- (bool)commitObjects:(id)arg1 error:(id*)arg2;
- (bool)commitWithRollback:(id*)arg1;
- (bool)commitWithRollbackForNewClients:(id*)arg1;
- (void)confirmSuggestedEvent:(id)arg1;
- (id)connection;
- (id)constraintsCacheQueue;
- (void)consumeAllChangesUpToToken:(id)arg1;
- (bool)consumeAllChangesUpToToken:(id)arg1 except:(id)arg2 error:(id*)arg3;
- (struct CGColor { }*)copyCGColorForNewCalendar;
- (int)countOfEventsFromStartDate:(id)arg1 toEndDate:(id)arg2;
- (id)creatorTeamIdentifierForEvent:(id)arg1;
- (void)daemonRestarted;
- (id)dataProtectionObserver;
- (id)database;
- (id)databasePath;
- (void)databaseRestoreGenerationChangedExternally:(int)arg1;
- (id)dbChangedQueue;
- (id)dbStatsBySource;
- (void)dealloc;
- (id)defaultAllDayAlarm;
- (id)defaultAllDayAlarmOffset;
- (id)defaultCalendarForNewEvents;
- (id)defaultCalendarForNewEventsInDelegateSource:(id)arg1;
- (id)defaultCalendarForNewReminders;
- (id)defaultLocalCalendar;
- (id)defaultTimedAlarm;
- (id)defaultTimedAlarmOffset;
- (id)delegateSources;
- (id)delegateSourcesForSource:(id)arg1;
- (bool)deleteCalendar:(id)arg1 forEntityType:(unsigned long long)arg2 error:(id*)arg3;
- (void)deleteDraftOfEventWithOccurrenceID:(id)arg1;
- (void)deleteSuggestedEvent:(id)arg1;
- (id)deletedObjectIDs;
- (id)deletedObjectIDsPendingCommit;
- (id)deletedObjects;
- (id)doEvents:(id)arg1 haveOccurrencesAfterDate:(id)arg2;
- (bool)enableSourceSyncStatusChanges;
- (void)endCalDAVServerSimulation:(id)arg1;
- (void)ensureLoadedProperties:(id)arg1 forObjects:(id)arg2;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(id /* block */)arg2;
- (int)eventAccessLevel;
- (id)eventForObjectID:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventForObjectID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(bool)arg3;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(bool)arg3;
- (unsigned long long)eventNotificationCount;
- (unsigned long long)eventNotificationCountExcludingUncheckedCalendars:(bool)arg1 expanded:(bool)arg2;
- (unsigned long long)eventNotificationCountExpanded:(bool)arg1;
- (unsigned long long)eventNotificationCountForSource:(id)arg1 excludingDelegateSources:(bool)arg2 filteredByShowsNotificationsFlag:(bool)arg3 excludeObjectIDs:(id)arg4;
- (unsigned long long)eventNotificationCountForSource:(id)arg1 excludingDelegateSources:(bool)arg2 filteredByShowsNotificationsFlag:(bool)arg3 excludeObjectIDs:(id)arg4 expanded:(bool)arg5;
- (id)eventNotifications;
- (id)eventNotificationsAfterDate:(id)arg1;
- (id)eventNotificationsAfterDate:(id)arg1 excludingUncheckedCalendars:(bool)arg2 filteredByShowsNotificationsFlag:(bool)arg3 earliestExpiringNotification:(id*)arg4;
- (id)eventNotificationsAfterDate:(id)arg1 filteredByShowsNotificationsFlag:(bool)arg2 earliestExpiringNotification:(id*)arg3;
- (id)eventNotificationsExcludingUncheckedCalendars:(bool)arg1 filteredByShowsNotificationsFlag:(bool)arg2 earliestExpiringNotification:(id*)arg3;
- (id)eventObjectIDsMatchingPredicate:(id)arg1;
- (id)eventSourceForReminderSource:(id)arg1;
- (id)eventSourceIDForReminderSourceID:(id)arg1;
- (id)eventSourceIDToReminderSourceIDMapping;
- (id)eventSourceMap;
- (id)eventSources;
- (id)eventStoreIdentifier;
- (id)eventWithExternalURI:(id)arg1;
- (id)eventWithIdentifier:(id)arg1;
- (id)eventWithRecurrenceIdentifier:(id)arg1;
- (id)eventWithUUID:(id)arg1;
- (bool)eventWithUUID:(id)arg1 isInCalendars:(id)arg2;
- (id)eventWithUUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUniqueId:(id)arg1;
- (id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUniqueIdentifier:(id)arg1;
- (bool)eventsExistOnCalendar:(id)arg1;
- (bool)eventsMarkedScheduleAgentClientExistOnCalendar:(id)arg1;
- (id)eventsMatchingPredicate:(id)arg1;
- (id)eventsWithErrorsPerSourceID;
- (id)eventsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (id)eventsWithIdentifiers:(id)arg1;
- (id)eventsWithUUIDToOccurrenceDateMap:(id)arg1 inCalendars:(id)arg2;
- (void)fetchChangedObjectIDs:(id /* block */)arg1;
- (void)fetchChangedObjectIDsSinceToken:(long long)arg1 resultHandler:(id /* block */)arg2;
- (void)fetchEventCountsInRange:(id)arg1 inCalendars:(id)arg2 exclusionOptions:(long long)arg3 completion:(id /* block */)arg4;
- (id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(id /* block */)arg2;
- (void)fetchGrantedDelegatesForSource:(id)arg1 results:(id /* block */)arg2;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completion:(id /* block */)arg2;
- (id)fetchStorageUsage;
- (bool)futureScheduledEventsExistOnCalendar:(id)arg1;
- (void)getMapsWithReminderSourceMap:(id*)arg1 eventSourceMap:(id*)arg2;
- (id)getSubscribedCalendarsSourceCreateIfNeededWithError:(id*)arg1;
- (void)handleExternalDatabaseChangeNotification:(id)arg1;
- (bool)hasImmediatelyEligibleTravelEvents;
- (bool)hideCalendarsFromNotificationCenter:(id)arg1 error:(id*)arg2;
- (bool)ignoreExternalChanges;
- (id)imageCache;
- (id)importEventsWithExternalIDs:(id)arg1 fromICSData:(id)arg2 intoCalendars:(id)arg3 options:(unsigned long long)arg4 batchSize:(int)arg5;
- (id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (id)importICSData:(id)arg1 intoCalendars:(id)arg2 options:(unsigned long long)arg3;
- (id)importVCSData:(id)arg1 intoCalendars:(id)arg2 error:(id*)arg3;
- (bool)inboxRepliedSectionHasContent;
- (id)inboxRepliedSectionItems;
- (id)init;
- (id)initWithBirthdayCalendarModifications;
- (id)initWithEKOptions:(unsigned long long)arg1;
- (id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(bool)arg4 allowDelegateSources:(bool)arg5;
- (id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(bool)arg4 allowDelegateSources:(bool)arg5 allowedSourceIdentifiers:(id)arg6;
- (id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 conainerProvider:(id)arg3 changeTrackingClientId:(id)arg4 enablePropertyModificationLogging:(bool)arg5 allowDelegateSources:(bool)arg6 allowedSourceIdentifiers:(id)arg7;
- (id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 sources:(id)arg3;
- (id)initWithOptions:(int)arg1 path:(id)arg2;
- (id)initWithOptions:(int)arg1 path:(id)arg2 allowDelegateSources:(bool)arg3;
- (id)initWithOptions:(int)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(bool)arg4 allowDelegateSources:(bool)arg5;
- (id)initWithSources:(id)arg1;
- (void)initializeEKEventStorePlusReminders;
- (void)insertSuggestedEventCalendar;
- (id)insertedObjectIDs;
- (id)insertedObjects;
- (id)insertedPersistentObjectWithEntityName:(id)arg1;
- (void)invalidateReminderSourceMaps;
- (bool)isCurrentProcessCreatorOfEvent:(id)arg1;
- (bool)isDataProtected;
- (bool)isObjectInserted:(id)arg1;
- (bool)isSourceManaged:(id)arg1;
- (id)lastCommitTempToPermanentObjectIDMap;
- (unsigned long long)lastConfirmedSplashScreenVersion;
- (id)lastDatabaseNotificationTimestamp;
- (id)lastDatabaseTimestampForOOPToWaitOn;
- (id)loadDraftOfEventWithOccurrenceID:(id)arg1;
- (id)localBirthdayCalendarCreateIfNeededWithError:(id*)arg1;
- (id)localBirthdayCalendarSource;
- (id)localSource;
- (id)localSourceEnableIfNeeded;
- (void)markChangedObjectIDsConsumedUpToToken:(long long)arg1;
- (bool)markIndividualChangesConsumed:(id)arg1 error:(id*)arg2;
- (bool)markResourceChangeAlertedAndSave:(id)arg1 error:(id*)arg2;
- (id)mimicSaveAndCommitEvent:(id)arg1 oldToNewObjectIDMap:(id)arg2 insertedObjectIDs:(id)arg3 updatedObjectIDs:(id)arg4 deletedObjectIDs:(id)arg5;
- (id)naturalLanguageSuggestedEventCalendar;
- (bool)needsGeocodingForEvent:(id)arg1;
- (id)nextEventWithCalendarIdentifiers:(id)arg1 exclusionOptions:(long long)arg2;
- (id)nextEventWithCalendars:(id)arg1 exclusionOptions:(long long)arg2;
- (id)nextEventsWithCalendars:(id)arg1 limit:(unsigned long long)arg2 exclusionOptions:(long long)arg3;
- (id)notificationCollectionCacheQueue;
- (id)notificationCollectionForSource:(id)arg1;
- (bool)objectWithIDExists:(id)arg1;
- (id)objectWithObjectID:(id)arg1;
- (bool)objectsHaveChangesToCommit:(id)arg1;
- (id)objectsMatchingPredicate:(id)arg1;
- (id)objectsPendingCommit;
- (id)objectsPendingSave;
- (id)occurrenceCacheGetOccurrenceCountsForCalendars:(id)arg1;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 onDay:(id)arg2;
- (bool)occurrencesExistInRangeForEvent:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 mustStartInInterval:(bool)arg4 timezone:(id)arg5;
- (id)parentSourceForDelegateSource:(id)arg1;
- (void)performHoldingReminderSourceMapLock:(id /* block */)arg1;
- (id)persistentObjectWithEntityName:(id)arg1;
- (void)postSyntheticRouteHypothesis:(id)arg1 forEventWithExternalURL:(id)arg2;
- (id)predicateForAssistantEventSearchWithTimeZone:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 title:(id)arg4 location:(id)arg5 notes:(id)arg6 participants:(id)arg7 calendars:(id)arg8 limit:(long long)arg9;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 inCalendar:(id)arg2;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withExternalID:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withExternalID:(id)arg2 inSource:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withUniqueIdentifier:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withUniqueIdentifier:(id)arg2 inSource:(id)arg3;
- (id)predicateForCalendarStoreForRemindersInCalendars:(id)arg1;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1;
- (id)predicateForEventsCreatedFromSuggestion;
- (id)predicateForEventsCreatedFromSuggestionWithExtractionGroupIdentifier:(id)arg1;
- (id)predicateForEventsInSubscribedCalendar:(id)arg1;
- (id)predicateForEventsWithAttendeesInCalendar:(id)arg1;
- (id)predicateForEventsWithConferenceURL:(id)arg1 limit:(long long)arg2;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 exclusionOptions:(long long)arg4 filterdOutTitles:(id)arg5 randomize:(bool)arg6 limit:(long long)arg7;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(bool)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 matchingContacts:(id)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 prefetchHint:(long long)arg4 exclusionOptions:(long long)arg5;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 uniqueID:(id)arg3 calendars:(id)arg4;
- (id)predicateForIncompleteRemindersAndRemindersCompletedAfter:(id)arg1 inCalendar:(id)arg2;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForMasterEventsInCalendar:(id)arg1;
- (id)predicateForMasterEventsInCalendars:(id)arg1;
- (id)predicateForMasterEventsWithExternalTrackingStatusInCalendar:(id)arg1;
- (id)predicateForMasterEventsWithInvitationsAndOccurrencesAfter:(id)arg1 inCalendar:(id)arg2;
- (id)predicateForMasterEventsWithOccurrencesWithStartDate:(id)arg1 endDate:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForMasterEventsWithStartDate:(id)arg1 title:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)arg1;
- (id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)arg1 startDate:(id)arg2;
- (id)predicateForNonrecurringEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (id)predicateForNotifiableEvents;
- (id)predicateForNotificationCenterVisibleEvents;
- (id)predicateForPotentialTravelEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)predicateForPreloadedCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4 maxResults:(unsigned long long)arg5;
- (id)predicateForRandomMasterEventsWithStartDate:(id)arg1 endDate:(id)arg2 needToHaveAttendee:(bool)arg3 needToHaveLocation:(bool)arg4 allDay:(bool)arg5 filteredOutTitles:(id)arg6 limit:(long long)arg7 calendars:(id)arg8;
- (id)predicateForRemindersInCalendars:(id)arg1;
- (id)predicateForRemindersInCalendars:(id)arg1 preloadProperties:(id)arg2;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(bool)arg3 completed:(bool)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9;
- (id)predicateForScheduleAgentClientEventsInCalendar:(id)arg1;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForUnalertedEvents;
- (id)predicateForUpNextEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 startDateRestrictionThreshold:(double)arg4;
- (id)predicateForUpcomingEventsWithLimit:(int)arg1;
- (id)publicObjectWithFetchedObjectID:(id)arg1;
- (id)publicObjectWithObjectID:(id)arg1;
- (id)publicObjectWithPersistentObject:(id)arg1;
- (void)purgeChangelog;
- (int)readWriteCalendarCountForEntityType:(unsigned long long)arg1;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (void)rebuildOccurrenceCache;
- (void)recordObjectRebaseWithOldObjectID:(id)arg1 newObjectID:(id)arg2;
- (void)recordSequenceTokenForLegacyClients:(id)arg1;
- (id)redactedMimicSaveEvent:(id)arg1 oldToNewObjectIDMap:(id)arg2 serializedDictionary:(id)arg3 objectIDToChangeSetDictionaryMap:(id)arg4 objectIDToPersistentDictionaryMap:(id)arg5;
- (id)refreshEverythingIfNecessary:(bool)arg1;
- (id)refreshFolderListsIfNecessary:(bool)arg1;
- (bool)refreshSource:(id)arg1 userRequested:(bool)arg2;
- (void)refreshSourcesIfNecessary;
- (id)refreshSourcesIfNecessary:(bool)arg1;
- (id)registerFetchedObjectWithID:(id)arg1;
- (id)registerFetchedObjectWithID:(id)arg1 withDefaultLoadedPropertyKeys:(id)arg2 values:(id)arg3;
- (long long)registerForDetailedChangeTracking:(id*)arg1;
- (long long)registerForDetailedChangeTrackingInSource:(id)arg1 error:(id*)arg2;
- (id)registeredObjects;
- (id)registeredQueue;
- (id)reminderObjectIDsMatchingPredicate:(id)arg1;
- (id)reminderSourceForEventSource:(id)arg1;
- (id)reminderSourceIDToEventSourceIDMapping;
- (id)reminderSourceMap;
- (struct os_unfair_lock_s { unsigned int x1; }*)reminderSourceMapLock;
- (id)reminderSources;
- (id)reminderStore;
- (void)reminderStoreChanged;
- (id)reminderWithExternalURI:(id)arg1;
- (id)reminderWithIdentifier:(id)arg1;
- (id)reminderWithUniqueId:(id)arg1;
- (id)remindersMatchingPredicate:(id)arg1;
- (id)remindersWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (bool)removeCalendar:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)removeCalendar:(id)arg1 error:(id*)arg2;
- (bool)removeEvent:(id)arg1 span:(long long)arg2 commit:(bool)arg3 error:(id*)arg4;
- (bool)removeEvent:(id)arg1 span:(long long)arg2 error:(id*)arg3;
- (void)removeExchangeDelegate:(id)arg1 completion:(id /* block */)arg2;
- (bool)removeInviteReplyNotification:(id)arg1 error:(id*)arg2;
- (bool)removeInviteReplyNotifications:(id)arg1 error:(id*)arg2;
- (bool)removeReminder:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)removeReminder:(id)arg1 error:(id*)arg2;
- (bool)removeResourceChange:(id)arg1 error:(id*)arg2;
- (bool)removeResourceChanges:(id)arg1 error:(id*)arg2;
- (bool)removeResourceChangesForCalendarItem:(id)arg1 error:(id*)arg2;
- (bool)removeSource:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (void)removeSuggestedEventCalendar;
- (void)requestAccessToEntityType:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)requestAccessToEntityType:(unsigned long long)arg1 desiredFullAccess:(bool)arg2 testing:(bool)arg3 synchronous:(bool)arg4 reason:(long long)arg5 completion:(id /* block */)arg6;
- (void)requestFullAccessToEventsWithCompletion:(id /* block */)arg1;
- (void)requestFullAccessToRemindersWithCompletion:(id /* block */)arg1;
- (void)requestWriteOnlyAccessToEventsWithCompletion:(id /* block */)arg1;
- (void)reset;
- (id)resourceChangesForEntityTypes:(unsigned long long)arg1;
- (void)respondToSharedCalendarInvitation:(id)arg1 withStatus:(unsigned long long)arg2;
- (bool)restoreDatabaseFromBackup:(id)arg1 withFormat:(unsigned long long)arg2 error:(id*)arg3;
- (bool)restoreGenerationChanged;
- (bool)returnEventResults;
- (bool)returnReminderResults;
- (void)rollback;
- (void)rollbackObjectsWithIdentifiers:(id)arg1;
- (bool)save:(id*)arg1;
- (bool)saveAttachment:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)saveCalendar:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)saveCalendar:(id)arg1 error:(id*)arg2;
- (bool)saveDraftOfEvent:(id)arg1;
- (bool)saveEvent:(id)arg1 span:(long long)arg2 commit:(bool)arg3 error:(id*)arg4;
- (bool)saveEvent:(id)arg1 span:(long long)arg2 error:(id*)arg3;
- (bool)saveNotification:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)saveNotificationCollection:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)saveReminder:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (bool)saveReminder:(id)arg1 error:(id*)arg2;
- (bool)saveSource:(id)arg1 commit:(bool)arg2 error:(id*)arg3;
- (int)sequenceNumber;
- (id)sequenceToken;
- (void)setBirthdayCalendarEnabled:(bool)arg1;
- (void)setBirthdayCalendarVersion:(int)arg1;
- (void)setCachedDefaultAlarmOffsetsToNSNotFound;
- (void)setCachedEKSourceConstraintObject:(id)arg1 forKey:(id)arg2;
- (void)setDataProtectionObserver:(id)arg1;
- (void)setDatabase:(id)arg1;
- (void)setDefaultCalendar:(id)arg1 forNewEventsInDelegateSource:(id)arg2;
- (void)setDefaultCalendarForNewEvents:(id)arg1;
- (void)setDefaultCalendarForNewReminders:(id)arg1;
- (void)setDeletedObjects:(id)arg1;
- (void)setEventSourceIDToReminderSourceIDMapping:(id)arg1;
- (void)setInsertedObjects:(id)arg1;
- (bool)setInvitationStatus:(unsigned long long)arg1 forEvent:(id)arg2 error:(id*)arg3;
- (bool)setInvitationStatus:(unsigned long long)arg1 forEvents:(id)arg2 error:(id*)arg3;
- (void)setLastDatabaseNotificationTimestamp:(id)arg1;
- (void)setNeedsGeocoding:(bool)arg1 forEvent:(id)arg2;
- (void)setObjectsPendingSave:(id)arg1;
- (void)setPrivacyClientIdentity:(id)arg1;
- (void)setRegisteredObjects:(id)arg1;
- (void)setReminderSourceIDToEventSourceIDMapping:(id)arg1;
- (void)setRemoteClientIdentity:(id)arg1;
- (void)setRestoreGenerationChanged:(bool)arg1;
- (bool)setRestoreGenerationChangedAndGetPreviousValue:(bool)arg1;
- (void)setShowDeclinedEvents:(bool)arg1;
- (void)setSkipModificationValidation:(bool)arg1;
- (void)setSourceAccountManagement:(int)arg1;
- (void)setSourceAccountManagement:(int)arg1 withBundleID:(id)arg2;
- (void)setTimeZone:(id)arg1;
- (void)setUpdatedObjects:(id)arg1;
- (void)set_cachedConstraints:(id)arg1;
- (void)set_cachedDefaultConstraints:(id)arg1;
- (void)set_cachedNotificationCollections:(id)arg1;
- (id)sharedCalendarInvitationsForEntityTypes:(unsigned long long)arg1;
- (bool)shouldPermitOrganizerEmailFromJunkChecks:(id)arg1;
- (bool)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)arg1;
- (bool)shouldRecordObjectIDMap;
- (bool)shouldSaveCalendarAsEventCalendar:(id)arg1;
- (bool)shouldSaveCalendarAsReminderCalendar:(id)arg1;
- (bool)showDeclinedEvents;
- (void)showDeclinedEventsChanged:(id)arg1;
- (id)siriSuggestionsAllDayAlarmOffset;
- (id)siriSuggestionsTimedAlarmOffset;
- (bool)skipModificationValidation;
- (id)sourceIdentifierForEvent:(id)arg1;
- (id)sourceWithExternalID:(id)arg1;
- (id)sourceWithIdentifier:(id)arg1;
- (id)sources;
- (id)sourcesEnabledForEntityType:(unsigned long long)arg1;
- (void)startRecordingObjectIDChangeMap;
- (void)stopRecordingObjectIDChangeMap;
- (id)suggestedEventCalendar;
- (int)syncErrorCount;
- (unsigned long long)timeToLeaveLocationAuthorizationStatus;
- (id)timeZone;
- (id)travelEligibleEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)uniqueIdentifiersForAllObjectsWithChangesRelatedToObjects:(id)arg1;
- (id)uniqueIdentifiersForEventsWithObjectIDs:(id)arg1;
- (bool)unregisterForDetailedChangeTracking:(id*)arg1;
- (id)unsavedChangesQueue;
- (void)updateGrantedDelegate:(id)arg1 action:(long long)arg2 source:(id)arg3 completion:(id /* block */)arg4;
- (id)updatedObjectIDs;
- (id)updatedObjects;
- (id)validatedNonDeletedPersistentObjectWithObjectID:(id)arg1;
- (id)validatedNonDeletedPublicObjectWithObjectID:(id)arg1;
- (void)waitUntilDatabaseUpdatedToTimestamp:(id)arg1 callback:(id /* block */)arg2;

// Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI

- (id)_uicolorFromString:(id)arg1;
- (id)colorForCalendar:(id)arg1;
- (id)colorNamesInRainbowOrder;
- (id)defaultCalendarColorsInRainbowOrder;
- (id)localizedStringForSymbolicColorName:(id)arg1;
- (id)stringForColor:(id)arg1;
- (id)symbolicNameForColor:(id)arg1;
- (id)symbolicNameToUIColors;

// Image: /System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit

- (id)sortedCalendarsForEntityType:(unsigned long long)arg1;
- (id)sortedCalendarsForEntityType:(unsigned long long)arg1 passingTest:(id /* block */)arg2;
- (id)sortedSourcesEnabledForEntityType:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals

+ (id)sg_newStore;
+ (void)sg_usingSharedStoreForReadingOnly:(id /* block */)arg1;

- (id)_sg_fetchEKEventsForPseudoNLEvent:(id)arg1 title:(id)arg2 participants:(id)arg3;
- (id)eventWithExternalID:(id)arg1;
- (double)eventsPerWeekAroundDate:(id)arg1;
- (id)eventsWithSameAlternativeOpaqueKeyAsDuplicateKey:(id)arg1 harvestStore:(id)arg2;
- (id)eventsWithSameAlternativeOpaqueKeyAsPseudoEvent:(id)arg1 harvestStore:(id)arg2;
- (id)eventsWithSameAlternativeOpaqueKeyAsStorageEvent:(id)arg1 harvestStore:(id)arg2;
- (id)eventsWithSameOpaqueKeyAsDuplicateKey:(id)arg1 extraKey:(id)arg2 harvestStore:(id)arg3;
- (id)eventsWithSameOpaqueKeyAsPseudoEvent:(id)arg1 harvestStore:(id)arg2;
- (id)eventsWithSameOpaqueKeyAsStorageEvent:(id)arg1 harvestStore:(id)arg2;
- (void)sg_bumpTimeToLiveForZeroKeywordNLEventOnInteraction:(id)arg1;
- (id)sg_confirmedEKEventForSGEvent:(id)arg1;
- (id)sg_fetchEKEventsForPseudoEventBySimilarTitleAndStartTime:(id)arg1;
- (id)sg_fetchEKEventsForPseudoNLEvent:(id)arg1 entity:(id)arg2;
- (id)sg_fetchEKEventsForPseudoNLEvent:(id)arg1 message:(id)arg2;

@end
