
@interface EKObject : NSObject <EKFrozenMeltedPair> {
    NSMutableDictionary * __cachedMeltedObjects;
    NSMutableDictionary * __cachedValues;
    EKObjectValidationContext * __validationContext;
    NSDictionary * _additionalFrozenProperties;
    NSDictionary * _additionalMeltedObjects;
    NSDictionary * _cachedMeltedObjects;
    EKChangeSet * _changeSet;
    EKPersistentObject * _persistentObject;
}

@property (nonatomic, readonly) CADGenerationStampedObjectID *CADObjectID;
@property (nonatomic, retain) NSMutableDictionary *_cachedMeltedObjects;
@property (nonatomic, retain) NSMutableDictionary *_cachedValues;
@property (nonatomic, retain) EKObjectValidationContext *_validationContext;
@property (nonatomic, retain) NSDictionary *additionalFrozenProperties;
@property (nonatomic, retain) NSDictionary *additionalMeltedObjects;
@property (nonatomic, retain) EKPersistentObject *backingObject;
@property (nonatomic, retain) NSDictionary *cachedMeltedObjects;
@property (nonatomic, retain) EKChangeSet *changeSet;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) EKEventStore *eventStore;
@property (nonatomic, readonly) bool hasChanges;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isFrozen;
@property (nonatomic, readonly) bool isPartialObject;
@property (getter=isNew, nonatomic, readonly) bool new;
@property (nonatomic, readonly) EKObjectID *objectID;
@property (nonatomic, retain) EKPersistentObject *persistentObject;
@property (nonatomic, readonly) CADGenerationStampedObjectID *rebasedFrom;
@property (nonatomic, readonly) NSString *semanticIdentifier;
@property (nonatomic, readonly) NSString *specificIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *uniqueIdentifier;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (void)_addChangesFromObject:(id)arg1 toObjects:(id)arg2 passingTest:(id /* block */)arg3 copyingBackingObjects:(bool)arg4;
+ (id)_array:(id)arg1 intersectedWithSet:(id)arg2 minusSet:(id)arg3;
+ (id)_changeSetForDiff:(id)arg1;
+ (bool)_compareAllKnownKeysExceptKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3;
+ (bool)_compareAllKnownKeysExceptKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareIdentityKeys:(bool)arg4;
+ (bool)_compareIdentityKeysForObject:(id)arg1 againstObject:(id)arg2 propertiesToIgnore:(id)arg3;
+ (bool)_compareIdentityKeysForObject:(id)arg1 againstObject:(id)arg2 propertiesToIgnore:(id)arg3;
+ (bool)_compareKnownKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3;
+ (bool)_compareKnownKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareIdentityKeys:(bool)arg4 compareImmutableKeys:(bool)arg5 propertiesToIgnore:(id)arg6;
+ (bool)_compareKnownKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareIdentityKeys:(bool)arg4 compareImmutableKeys:(bool)arg5 propertiesToIgnore:(id)arg6;
+ (bool)_compareKnownKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareImmutableKeys:(bool)arg4 propertiesToIgnore:(id)arg5;
+ (bool)_compareKnownKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareImmutableKeys:(bool)arg4 propertiesToIgnore:(id)arg5;
+ (bool)_compareMultiValueRelationshipKey:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareMultiValueRelationshipKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareMultiValueRelationshipKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareMutliValueRelationshipKey:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareNonIdentityKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareImmutableKeys:(bool)arg4 propertiesToIgnore:(id)arg5;
+ (bool)_compareNonIdentityKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 compareImmutableKeys:(bool)arg4 propertiesToIgnore:(id)arg5;
+ (bool)_compareNonIdentityKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareNonRelationshipKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareRelationshipObject1:(id)arg1 againstRelationshipObject2:(id)arg2 propertiesToIgnore:(id)arg3;
+ (bool)_compareRelationshipObject1:(id)arg1 againstRelationshipObject2:(id)arg2 propertiesToIgnore:(id)arg3 relationshipObjectKey:(id)arg4;
+ (bool)_compareSingleValueRelationshipKey:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareSingleValueRelationshipKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (bool)_compareSingleValueRelationshipKeys:(id)arg1 forObject:(id)arg2 againstObject:(id)arg3 propertiesToIgnore:(id)arg4;
+ (id)_createNonPartialObjectFromObject:(id)arg1 ifPropertyIsUnavailable:(id)arg2;
+ (unsigned long long)_numberOfSharedLocksForUnitTesting;
+ (bool)_object:(id)arg1 equalsObject:(id)arg2 forKeys:(id)arg3 compareImmutableKeys:(bool)arg4 ignoringProperties:(id)arg5;
+ (bool)_objects:(id)arg1 haveSameMeltedClass:(Class)arg2 frozenClass:(Class)arg3;
+ (void)addChangesFromObject:(id)arg1 toObjects:(id)arg2 except:(id)arg3;
+ (void)addChangesFromObject:(id)arg1 toObjects:(id)arg2 keep:(id)arg3;
+ (void)addChangesFromObject:(id)arg1 toObjects:(id)arg2 passingTest:(id /* block */)arg3;
+ (bool)canonicalizedEqualityTestValue1:(id)arg1 value2:(id)arg2 key:(id)arg3 object1:(id)arg4 object2:(id)arg5;
+ (id)defaultPropertyKeysToSkipForRecursiveSnapshotCopies;
+ (id)duplicatedPersistentObjectForObject:(id)arg1 alreadyCopiedObjects:(id)arg2;
+ (Class)frozenClass;
+ (bool)isDerivedRelationship;
+ (bool)isMeltedAndNotWeakRelationshipObject:(id)arg1 forKey:(id)arg2;
+ (bool)isWeakRelationObject:(id)arg1 forKey:(id)arg2;
+ (bool)isWeakRelationship;
+ (id)keysToIgnoreForApplyingChanges;
+ (id)knownDerivedAndSingleValueRelationshipKeys;
+ (id)knownDerivedRelationshipKeys;
+ (id)knownIdentityKeysForComparison;
+ (id)knownImmutableKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipMultiValueKeysForValidation;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRelationshipSingleValueKeysForValidation;
+ (id)knownRelationshipWeakKeys;
+ (id)knownSingleValueKeysForComparison;
+ (id)knownSummaryKeys;
+ (Class)meltedClass;
+ (id)objectsIDsExistingInStoreFromObjects:(id)arg1 eventStore:(id)arg2;
+ (id)propertiesUnavailableForPartialObjects;

- (void).cxx_destruct;
- (id)CADObjectID;
- (void)_addCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)_addChanges:(id)arg1 copyingBackingObjects:(bool)arg2;
- (void)_addChangesFromObject:(id)arg1 passingTest:(id /* block */)arg2 ignoreRelations:(id)arg3 copyingBackingObjects:(bool)arg4;
- (void)_addSummaryWithDepth:(long long)arg1 toMutableString:(id)arg2 indentFirstLine:(bool)arg3;
- (void)_applyDefinedAfterFirstSaveFrom:(id)arg1;
- (void)_applyKnownImmutableValuesFrom:(id)arg1;
- (bool)_areOnlyChangedKeys:(id)arg1;
- (id)_basicSummaryWithDepth:(long long)arg1;
- (void)_cachedMeltedChildIdentifierToParentMap:(id)arg1;
- (id)_cachedMeltedObjects;
- (unsigned long long)_cachedMeltedObjectsCount;
- (id)_cachedValues;
- (id)_convertBackingObjectsWithPath:(id)arg1 updateBackingObjects:(bool)arg2 allChangedBackingObjects:(id)arg3 eventStore:(id)arg4 updatedBackingObjectProvider:(id)arg5;
- (id)_copyWithoutChangesInZone:(struct _NSZone { }*)arg1;
- (bool)_hasChangeHelperInKeys:(id)arg1 ignoreKeys:(id)arg2 checkUnsaved:(bool)arg3;
- (bool)_hasChanges;
- (bool)_hasChangesForKey:(id)arg1;
- (bool)_hasChangesForKey:(id)arg1 checkUnsaved:(bool)arg2;
- (bool)_hasUnsavedChangesInKeys:(id)arg1 ignoreKeys:(id)arg2;
- (void)_initChangeSetIfNone;
- (bool)_isNew;
- (bool)_isOnlyChangedKey:(id)arg1;
- (bool)_isPropertyUnavailable:(id)arg1 convertToFullObjectIfUnavailable:(bool)arg2;
- (struct os_unfair_lock_s { unsigned int x1; }*)_lock;
- (void)_markAsCommittedCommon;
- (void)_markAsDeletedCommon;
- (void)_markAsNewCommon;
- (void)_markAsNotNewCommon;
- (void)_markAsSavedCommon;
- (void)_markAsUndeletedCommon;
- (id)_multiRelationshipKeysToCheckForChanges;
- (void)_performBlockOnOwnedCachedRelatedObjects:(id /* block */)arg1;
- (void)_performWithLock:(id /* block */)arg1;
- (id)_previousValueForKey:(id)arg1;
- (id)_propertyValueForKey:(id)arg1;
- (id)_recursiveSnapshotCopyWithPropertyAccessor:(id /* block */)arg1 propertyKeysToCopy:(id)arg2 propertyKeysToSkip:(id)arg3 recurseOnWeakRelations:(bool)arg4;
- (bool)_refreshCommon;
- (bool)_refreshable;
- (void)_removeCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (bool)_reset;
- (void)_resetAfterUpdatingChangeSetOrBackingObject;
- (void)_resetAfterUpdatingChangeSetOrBackingObjectWithForce:(bool)arg1;
- (bool)_resetCommon;
- (bool)_resetIfBackingObjectIsOfClass:(Class)arg1 fetchResetFrozenObjectBlock:(id /* block */)arg2;
- (void)_resetInternalStateWithForce:(bool)arg1;
- (void)_resetMeltedCache;
- (void)_resetWithFrozenObject:(id)arg1;
- (void)_rollbackCommon;
- (void)_sharedInit;
- (id)_singleRelationshipKeysToCheckForChanges;
- (id)_summaryWithDepth:(long long)arg1;
- (void)_updateCachedMeltedObjectSetForMultiValueKey:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)_updatePersistentValueForKey:(id)arg1;
- (id)_validationContext;
- (void)addCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)addChanges:(id)arg1;
- (void)addChangesFromObject:(id)arg1;
- (void)addChangesFromObject:(id)arg1 copyingBackingObjects:(bool)arg2;
- (void)addCoCommitObject:(id)arg1;
- (void)addMultiChangedObjectValue:(id)arg1 forKey:(id)arg2;
- (void)addMultiChangedObjectValues:(id)arg1 forKey:(id)arg2;
- (id)additionalFrozenProperties;
- (id)additionalMeltedObjects;
- (void)applyChanges:(id)arg1;
- (void)augmentMeltedObjectCache:(id)arg1;
- (id)backingObject;
- (id)backingObjectOfChildObject:(id)arg1 withRelationshipKey:(id)arg2;
- (id)cachedMeltedChildIdentifierToParentMap;
- (id)cachedMeltedObjectForSingleValueKey:(id)arg1;
- (id)cachedMeltedObjects;
- (id)cachedMeltedObjects;
- (id)cachedMeltedObjectsForMultiValueKey:(id)arg1;
- (id)cachedValueForKey:(id)arg1;
- (id)cachedValueForKey:(id)arg1 expectingCachedValue:(id)arg2 forMasterKey:(id)arg3 relatedKeys:(id)arg4 populateBlock:(id /* block */)arg5;
- (id)cachedValueForKey:(id)arg1 populateBlock:(id /* block */)arg2;
- (bool)canBeConvertedToFullObject;
- (id)changeSet;
- (id)changedKeys;
- (void)clearCachedValueForKey:(id)arg1;
- (void)clearCachedValuesForKeys:(id)arg1;
- (id)committedCopy;
- (id)committedValueForKey:(id)arg1;
- (id)copyMeltedObjectCache;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)deletePersistentObject;
- (id)diffWithObject:(id)arg1;
- (id)duplicate;
- (id)duplicateToEventStore:(id)arg1;
- (void)emptyMeltedCache;
- (void)emptyMeltedCacheForKey:(id)arg1;
- (void)emptyMeltedCacheForKeys:(id)arg1;
- (id)eventStore;
- (id)existingMeltedObject;
- (bool)existsInStore;
- (Class)frozenClass;
- (id)frozenObject;
- (id)frozenObjectInStore:(id)arg1;
- (id)frozenOrMeltedCachedMultiRelationObjectsForKey:(id)arg1;
- (id)frozenOrMeltedCachedSingleRelationObjectForKey:(id)arg1;
- (bool)hasChanges;
- (bool)hasEverBeenCommitted;
- (bool)hasNeverBeenCommitted;
- (bool)hasUnsavedChanges;
- (bool)hasUnsavedChangesIgnoreKeys:(id)arg1;
- (bool)hasUnsavedChangesInKeys:(id)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 objectForCopy:(id)arg2;
- (void)insertPersistentObjectIfNeeded;
- (id)inverseObjectWithObject:(id)arg1 diff:(id*)arg2;
- (bool)isCompletelyEqual:(id)arg1;
- (bool)isDeleted;
- (bool)isDifferentFromCommitted;
- (bool)isEqual:(id)arg1;
- (bool)isEqual:(id)arg1 comparingKeys:(id)arg2 compareImmutableKeys:(bool)arg3 ignoringProperties:(id)arg4;
- (bool)isEqual:(id)arg1 ignoringProperties:(id)arg2;
- (bool)isFrozen;
- (bool)isNew;
- (bool)isPartialObject;
- (bool)isPropertyUnavailable:(id)arg1;
- (bool)isSaved;
- (bool)isUndeleted;
- (void)markAsCommitted;
- (void)markAsDeleted;
- (void)markAsNew;
- (void)markAsNotNew;
- (void)markAsSaved;
- (void)markAsUndeleted;
- (unsigned long long)meltedAndCachedMultiRelationCountForKey:(id)arg1;
- (id)meltedAndCachedMultiRelationObjectsForKey:(id)arg1;
- (id)meltedAndCachedSingleRelationObjectForKey:(id)arg1;
- (id)meltedObjectInStore:(id)arg1;
- (id)multiChangedObjectValuesForKey:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)objectID;
- (id)persistentObject;
- (id)preFrozenRelationshipObjects;
- (id)prepareReminderKitObjectForSaveWithUpdatedBackingObjectProvider:(id)arg1;
- (id)previouslySavedCopy;
- (id)privacyDescription;
- (void)rebase;
- (void)rebaseSkippingRelationProperties:(id)arg1;
- (void)rebaseSkippingRelationProperties:(id)arg1 toEventStore:(id)arg2;
- (void)rebaseToEventStore:(id)arg1;
- (id)rebasedFrom;
- (void)refetch;
- (bool)refresh;
- (bool)refreshAndNotify:(bool)arg1;
- (void)removeCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)removeMultiChangedObjectValue:(id)arg1 forKey:(id)arg2;
- (void)removeMultiChangedObjectValues:(id)arg1 forKey:(id)arg2;
- (void)replaceMultiChangedObjectValuesWithObjectValues:(id)arg1 forKey:(id)arg2;
- (void)reset;
- (bool)revert;
- (void)rollback;
- (int)rowID;
- (id)semanticIdentifier;
- (void)setAdditionalFrozenProperties:(id)arg1;
- (void)setAdditionalMeltedObjects:(id)arg1;
- (void)setBackingObject:(id)arg1;
- (void)setCachedMeltedObject:(id)arg1 forSingleValueKey:(id)arg2;
- (void)setCachedMeltedObjects:(id)arg1;
- (void)setCachedMeltedObjects:(id)arg1;
- (void)setCachedMeltedObjects:(id)arg1 forMultiValueKey:(id)arg2;
- (void)setCachedValue:(id)arg1 forKey:(id)arg2;
- (void)setChangeSet:(id)arg1;
- (void)setEventStore:(id)arg1;
- (void)setPersistentObject:(id)arg1;
- (void)setSingleChangedValue:(id)arg1 forKey:(id)arg2;
- (void)set_cachedMeltedObjects:(id)arg1;
- (void)set_cachedValues:(id)arg1;
- (void)set_validationContext:(id)arg1;
- (id)shallowCopyWithoutChanges;
- (bool)shouldLoadRelationshipForValidation:(id)arg1;
- (id)singleChangedValueForKey:(id)arg1;
- (id)snapshotCopy;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)arg1;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)arg1 propertyKeysToSkip:(id)arg2;
- (id)specificIdentifier;
- (id)uniqueIdentifier;
- (void)updateAfterApplyingChanges:(id)arg1;
- (void)updateMeltedAndCachedMultiRelationObjects:(id)arg1 forKey:(id)arg2;
- (void)updateMeltedAndCachedSingleRelationObject:(id)arg1 forKey:(id)arg2 frozenClass:(Class)arg3;
- (void)updateMeltedCacheForChangeSet:(id)arg1;
- (void)updateMultiValueCacheForChangeSet:(id)arg1 preservingExistingAdds:(bool)arg2;
- (void)updatePersistentObject;
- (void)updatePersistentObjectSkippingProperties:(id)arg1;
- (void)updatePersistentValueForKeyIfNeeded:(id)arg1;
- (bool)validate:(id*)arg1;
- (bool)validateWithOwner:(id)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit

+ (id)actionStringsDisplayName;
+ (id)actionStringsPluralDisplayName;

- (void)CUIKEditingContext_removeWithSpan:(long long)arg1;
- (bool)CUIKEditingContext_removeWithSpan:(long long)arg1 error:(id*)arg2;
- (void)CUIKEditingContext_saveWithSpan:(long long)arg1;
- (bool)CUIKEditingContext_saveWithSpan:(long long)arg1 error:(id*)arg2;
- (id)actionStringsDisplayTitle;

@end
