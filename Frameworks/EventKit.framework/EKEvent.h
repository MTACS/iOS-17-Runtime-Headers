
@interface EKEvent : EKCalendarItem <CalDateRangeProtocol, EKJunkInvitationProtocol_Private> {
    NSString * _birthdayPersonUniqueID;
    EKStructuredLocation * _cachedLocationPrediction;
    NSDate * _cachedLocationPredictionExpirationDate;
    int  _clearModifiedFlags;
    bool  _isMainOccurrence;
    bool  _locationPredictionAllowed;
    bool  _locationPredictionFrozen;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _locationPredictionLock;
    EKCalendarDate * _occurrenceEndDate;
    bool  _occurrenceIsAllDay;
    EKCalendarDate * _occurrenceStartDate;
    EKCalendarDate * _originalOccurrenceEndDate;
    NSNumber * _originalOccurrenceIsAllDay;
    EKCalendarDate * _originalOccurrenceStartDate;
    bool  _preventConferenceURLDetection;
    bool  _requiresDetachDueToSnoozedAlarm;
    NSString * _showEventURLString;
    NSString * _virtualConferenceTextRepresentation;
    NSMutableArray * _virtualConferenceURLsToInvalidateOnCommit;
}

@property (nonatomic, readonly) NSString *UUID;
@property (nonatomic, copy) NSSet *actions;
@property (getter=isAllDay, nonatomic) bool allDay;
@property (nonatomic, readonly) bool allowsAllDayModifications;
@property (nonatomic, readonly) bool allowsAvailabilityModifications;
@property (nonatomic, readonly) bool allowsParticipationStatusModifications;
@property (nonatomic, readonly) bool allowsPrivacyLevelModifications;
@property (nonatomic, readonly) bool allowsProposedTimeModifications;
@property (nonatomic, readonly) bool allowsResponseCommentModifications;
@property (nonatomic, readonly) bool allowsTravelTimeModifications;
@property (nonatomic) bool attendeeComment;
@property (nonatomic) bool attendeeDeclinedStartDate;
@property (nonatomic) bool attendeeProposedStartDate;
@property (nonatomic) bool attendeeReplyChanged;
@property (nonatomic) bool attendeeStatus;
@property (nonatomic, readonly) bool automaticLocationGeocodingAllowed;
@property (nonatomic) long long availability;
@property (nonatomic, readonly) NSString *birthdayContactIdentifier;
@property (nonatomic, readonly) NSString *birthdayContactName;
@property (nonatomic, readonly) long long birthdayPersonID;
@property (nonatomic, readonly) NSString *birthdayPersonUniqueID;
@property (nonatomic) unsigned long long cachedJunkStatus;
@property (nonatomic, readonly) bool canBeRespondedTo;
@property (nonatomic, readonly) bool canDetachSingleOccurrence;
@property (nonatomic) int clearModifiedFlags;
@property (nonatomic) bool completed;
@property (nonatomic, retain) NSURL *conferenceURL;
@property (nonatomic, readonly) long long currentUserGeneralizedParticipantRole;
@property (getter=isCurrentUserInvitedAttendee, nonatomic, readonly) bool currentUserInvitedAttendee;
@property (nonatomic) bool dateChanged;
@property (nonatomic, readonly) NSString *db_ShortDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) double durationIncludingTravel;
@property (nonatomic, readonly) bool eligibleForTravelAdvisories;
@property (nonatomic, readonly) EKCalendarDate *endCalendarDate;
@property (nonatomic, copy) NSDate *endDate;
@property (nonatomic, retain) NSDate *endDateUnadjustedForLegacyClients;
@property (nonatomic, retain) EKStructuredLocation *endLocation;
@property (nonatomic, readonly) NSString *eventIdentifier;
@property (nonatomic, readonly) NSString *eventOccurrenceID;
@property (nonatomic, readonly) EKEventStore *eventStore;
@property (nonatomic) int externalTrackingStatus;
@property (nonatomic, readonly) NSURL *externalURL;
@property (nonatomic) bool firedTTL;
@property (nonatomic) int flags;
@property (nonatomic, readonly) bool hasAttachmentChanges;
@property (nonatomic, readonly) bool hasComplexRecurrence;
@property (nonatomic, readonly) bool hasPredictedLocation;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) EKImage *image;
@property (nonatomic, readonly, copy) NSDate *initialEndDate;
@property (nonatomic, readonly, copy) NSDate *initialStartDate;
@property (nonatomic) unsigned long long invitationStatus;
@property bool ipsos_allDayPreferred;
@property double ipsos_confidence;
@property (retain) NSArray *ipsos_dataFeatures;
@property bool ipsos_disableTimeAdjustment;
@property (readonly) double ipsos_duration;
@property unsigned long long ipsos_eventAttributes;
@property (retain) IPEventClassificationType *ipsos_eventClassificationType;
@property unsigned long long ipsos_eventStatus;
@property double ipsos_experimentalConfidence;
@property bool ipsos_isDateTimeTenseDependent;
@property bool ipsos_isEndTimeApproximate;
@property bool ipsos_isEventTimeOnlyAndReferrengingToSentDate;
@property bool ipsos_isTimeApproximate;
@property bool ipsos_isTimeOffset;
@property (retain) IPMessageUnit *ipsos_messageUnit;
@property bool ipsos_timeNeedsMeridianGuess;
@property unsigned long long ipsos_usedBubblesCount;
@property bool ipsos_usesDefaultClassificationTypeStartTime;
@property (nonatomic) bool isAlerted;
@property (nonatomic, readonly) bool isAllDayDirty;
@property (nonatomic, readonly) bool isDetached;
@property (nonatomic, readonly) bool isEditable;
@property (nonatomic, readonly) bool isEndDateDirty;
@property (nonatomic, readonly) bool isMainOccurrence;
@property (nonatomic, readonly) bool isMaster;
@property (nonatomic, readonly) bool isMasterOrDetachedOccurrence;
@property (nonatomic) bool isPhantom;
@property (nonatomic, readonly) bool isPrivateEventSharedToMe;
@property (nonatomic, readonly) bool isSignificantlyDetached;
@property (nonatomic, readonly) bool isSignificantlyDetachedIgnoringParticipation;
@property (nonatomic, readonly) bool isStartDateDirty;
@property (nonatomic, readonly) bool isStatusDirty;
@property (nonatomic, readonly) bool isUndetached;
@property (nonatomic) unsigned long long junkStatus;
@property (nonatomic, readonly) NSURL *launchURL;
@property (nonatomic) bool locationChanged;
@property (nonatomic, readonly) bool locationIsAConferenceRoom;
@property (nonatomic) long long locationPredictionState;
@property (nonatomic, readonly) NSString *locationWithoutPrediction;
@property (nonatomic, retain) NSArray *locations;
@property (nonatomic, readonly) NSArray *locationsWithoutPrediction;
@property (nonatomic) bool needsGeocoding;
@property (nonatomic, readonly) NSDate *occurrenceDate;
@property (nonatomic, copy) EKCalendarDate *occurrenceEndDate;
@property (nonatomic) bool occurrenceIsAllDay;
@property (nonatomic, copy) EKCalendarDate *occurrenceStartDate;
@property (nonatomic, readonly) EKParticipant *organizer;
@property (nonatomic, copy) EKCalendarDate *originalOccurrenceEndDate;
@property (nonatomic, copy) NSNumber *originalOccurrenceIsAllDay;
@property (nonatomic, copy) EKCalendarDate *originalOccurrenceStartDate;
@property (nonatomic, readonly) NSDate *originalStartDate;
@property (nonatomic) long long participationStatus;
@property (nonatomic, retain) NSDate *participationStatusModifiedDate;
@property (nonatomic, readonly) long long pendingParticipationStatus;
@property (nonatomic, readonly) bool potentiallyEligibleForTravelAdvisories;
@property (nonatomic, readonly) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (nonatomic) bool preventConferenceURLDetection;
@property (nonatomic) long long privacyLevel;
@property (getter=isPrivacySet, nonatomic, readonly) bool privacySet;
@property (nonatomic, readonly) NSDate *proposedEndDate;
@property (nonatomic, retain) NSDate *proposedStartDate;
@property (nonatomic) bool recurrenceChanged;
@property (nonatomic, readonly) NSDate *recurrenceDate;
@property (nonatomic, readonly) EKRecurrenceIdentifier *recurrenceIdentifier;
@property (nonatomic, copy) NSString *recurrenceSet;
@property (nonatomic) bool requiresDetachDueToSnoozedAlarm;
@property (nonatomic, readonly) bool responseMustApplyToAll;
@property (nonatomic, readonly) NSString *sendersEmail;
@property (nonatomic, readonly) NSString *sendersPhoneNumber;
@property (nonatomic, readonly) NSString *showEventURLString;
@property (nonatomic) long long specialDayType;
@property (nonatomic, readonly) EKCalendarDate *startCalendarDate;
@property (nonatomic, readonly) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (nonatomic, copy) NSDate *startDate;
@property (nonatomic, readonly) NSDate *startDateIncludingTravel;
@property (nonatomic) long long status;
@property (nonatomic, copy) EKStructuredLocation *structuredLocation;
@property (nonatomic, retain) EKSuggestedEventInfo *suggestionInfo;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsJunkReporting;
@property (nonatomic, readonly) bool supportsParticipationStatusModificationsWithoutNotification;
@property (nonatomic) bool timeChanged;
@property (nonatomic) bool titleChanged;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (nonatomic, readonly) bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (nonatomic, readonly) long long travelRoutingMode;
@property (nonatomic, retain) EKStructuredLocation *travelStartLocation;
@property (nonatomic) double travelTime;
@property (nonatomic) bool videoConferenceChanged;
@property (nonatomic, retain) EKVirtualConference *virtualConference;
@property (nonatomic, retain) NSString *virtualConferenceTextRepresentation;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (bool)_allowSlicingFromDetachedOccurrence;
+ (id)_basicChangesRequiringSpanAll;
+ (bool)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2;
+ (void)_detachOrSliceEvent:(id)arg1 withSpan:(long long)arg2 savingEvent:(id)arg3 withOriginalStartDate:(id)arg4 newStartDate:(id)arg5;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(bool)arg3;
+ (id)_locationStringForLocations:(id)arg1;
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)arg1 forRevert:(bool)arg2;
+ (bool)_notDetachedOccurrenceOfEvent:(id)arg1 existsInDateRangeWithStartDate:(id)arg2 endDate:(id)arg3 inTimeZone:(id)arg4;
+ (id)_relatedCachedTimeKeys;
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id*)arg2;
+ (bool)_validateSpanForRemove:(long long)arg1 error:(id*)arg2;
+ (long long)ekWeekDayFromVCSWeekDay:(unsigned long long)arg1;
+ (id)eventFromICSEvent:(id)arg1 inStore:(id)arg2;
+ (id)eventWithEventStore:(id)arg1;
+ (id)externalUriScheme;
+ (Class)frozenClass;
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;
+ (bool)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(bool)arg3 inCalendar:(id)arg4;
+ (id)knownKeysToSkipForFutureChanges;
+ (id)knownKeysToUseForFutureChanges;
+ (id)knownPerUserPropertyKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRequireRSVPKeys;
+ (id)knownSingleValueKeysForComparison;

- (void).cxx_destruct;
- (id)URL;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_adjustAfterMovingOrCopyingFromOldCalendar:(id)arg1 toNewCalendar:(id)arg2 cachedConstraintsForOldCalendar:(id)arg3 savingItem:(id)arg4;
- (void)_adjustAlarmsAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (void)_adjustAttachmentsAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2 cachedConstraintsForOldCalendar:(id)arg3 savingItem:(id)arg4;
- (void)_adjustAttendeesAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (void)_adjustAvailabilityAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (id)_adjustDateIfFloatingForDate:(id)arg1;
- (void)_adjustExternalFieldsAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2 cachedConstraintsForOldCalendar:(id)arg3;
- (void)_adjustPrivacyAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2 cachedConstraintsForOldCalendar:(id)arg3 savingItem:(id)arg4;
- (void)_adjustRecurrenceRulesAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2 notes:(id)arg3;
- (void)_adjustScheduleAgentAfterMovingOrCopyingFromCalendar:(id)arg1 toCalendar:(id)arg2 cachedConstraintsForOldCalendar:(id)arg3;
- (void)_adjustTimeZoneAfterMovingOrCopyingToCalendar:(id)arg1 notes:(id)arg2;
- (void)_adjustURLAfterMovingOrCopyingToCalendar:(id)arg1 notes:(id)arg2;
- (void)_applyTimeChangesToMaster;
- (void)_assignAllAttachmentsNewIdentities;
- (id)_buildConferenceStringFromNotesWithoutConference:(id)arg1 serializedConference:(id)arg2;
- (id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(bool)arg3;
- (bool)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4;
- (void)_cancelDetachedEvents;
- (bool)_cancelWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)_changesRequireDetachOrSlice;
- (bool)_checkStartDateConstraintAgainstDate:(struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 timeZone:(id)arg2 error:(id*)arg3;
- (void)_clearAttendeeChangedFlags;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates:(id)arg1;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (void)_clearOriginalDateFields;
- (id)_committedEndDate;
- (id)_committedStartDate;
- (id)_conferenceRoomDisplayStrings;
- (bool)_couldBeJunkCommon;
- (id)_defaultAlarmOffset;
- (void)_deleteErrorIfInvalid;
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;
- (void)_deleteThisOccurrence;
- (void)_deleteWithSpan:(long long)arg1;
- (void)_detachOrSliceWithSpan:(long long)arg1 withOriginalStartDate:(id)arg2 newStartDate:(id)arg3;
- (id)_detectConferenceURL;
- (bool)_detectedConferenceURLOnBackingObjectMayBeInvalid;
- (bool)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(bool)arg2;
- (void)_duplicateAddedAttachmentsToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2;
- (id)_ekRecurrenceRuleFromICSRecurrenceRule:(id)arg1;
- (id)_ekRecurrenceRuleFromVCSRecurrenceRule:(id)arg1;
- (bool)_eligibleForTravelAdvisoriesIncludePotential:(bool)arg1;
- (bool)_eventIsTheOnlyRemainingOccurrence;
- (id)_eventKitPropertyKeyForCalendarItemErrorPropertyKey:(id)arg1;
- (void)_extendConferenceURLExpirationDateToDate:(id)arg1;
- (bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (void)_filterExceptionDatesAndDetachments;
- (id)_firstNonConferenceRoomLocationTitle;
- (id)_generateNewUniqueID;
- (bool)_hasAbsoluteAlarms;
- (bool)_hasBasicChangesRequiringSpanAll;
- (bool)_hasExternalIDOrDeliverySource;
- (bool)_hasOrHadRecurrenceRule;
- (bool)_hasRecurrenceRuleChangeRequiringSpanAll;
- (void)_invalidateRecurrenceIdentifier;
- (bool)_invitationChangedPropertyForFlag:(unsigned int)arg1;
- (bool)_isAllDay;
- (bool)_isOnlyChangeToAttendeesSelfAttendeeParticipationStatus;
- (bool)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (bool)_isParticipationStatusDirty;
- (bool)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(bool)arg2;
- (bool)_isSimpleRepeatingEvent;
- (bool)_isValidAttendee:(id)arg1 forCalendar:(id)arg2 selfAttendeeIsValid:(bool)arg3;
- (id)_keysToChangeForDuplicateWithOptions:(long long)arg1;
- (id)_lastRecurrenceDate;
- (id)_leftoversInDates:(id)arg1 withGeneratedDates:(id)arg2;
- (bool)_needsAttendeePartStatReset;
- (bool)_needsPredictedLocationCacheUpdateHoldingLock;
- (bool)_noRemainingEarlierOccurrences;
- (id)_nsCalendar;
- (id)_occurrenceDatesForCount:(unsigned long long)arg1;
- (bool)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2;
- (id)_originallyCommittedVirtualConference;
- (long long)_parentParticipationStatus;
- (id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2;
- (id)_prioritizedConferencesSources;
- (void)_propagateAlarmChangesToDetachedEvents:(id)arg1;
- (void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5;
- (void)_recursivelyAssignAllAttachmentsNewIdentities;
- (void)_removeInvalidAlarmsDuringSave;
- (bool)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)_reset;
- (void)_resetInternalStateWithForce:(bool)arg1;
- (void)_respondToProposedTimeFromAttendee:(id)arg1 shouldAccept:(bool)arg2;
- (void)_saveUndeletedDetachedOccurrence;
- (bool)_saveUndetachedOccurrenceWithError:(id*)arg1;
- (void)_setEndDateUnadjustedForLegacyClients:(id)arg1 allowSettingIfNotEditable:(bool)arg2;
- (void)_setInvitationChangedProperty:(bool)arg1 forFlag:(unsigned int)arg2;
- (void)_setInvitationStatusAlertedIfNecessary;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(bool)arg2 allowSettingIfNotEditable:(bool)arg3;
- (bool)_settingTimeZoneChangesStartEndDates;
- (bool)_shouldAlertInviteeDeclines;
- (bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (bool)_shouldDeclineInsteadOfDelete;
- (bool)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2;
- (void)_snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2 orTargetDate:(id)arg3 pinsTriggerToStartDate:(bool)arg4;
- (bool)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2;
- (id)_travelTimeInternalDescription;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 adjustStartDate:(bool)arg3;
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;
- (void)_updateModifiedProperties;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (id)_updatePredictedLocationCacheIfNeeded;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (void)_updateRecurrenceEndDatesWithAdjustmentMode:(unsigned long long)arg1;
- (void)_updateSelfAttendeeToMatchSelfAttendee:(id)arg1;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 adjustEndDate:(bool)arg3;
- (void)_updateUUIDForNewParticipants;
- (void)_updateVideoConferenceOnlyModified;
- (bool)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(bool)arg2;
- (bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id*)arg2;
- (void)_willSave;
- (void)acceptProposedTimeNotificationFromAttendee:(id)arg1;
- (id)actions;
- (void)addConferenceRooms:(id)arg1;
- (void)addEventAction:(id)arg1;
- (id)adjustedPersistedDateForDate:(id)arg1 persistedDateIsInUTC:(bool)arg2 withAdjustmentMode:(unsigned long long)arg3 pinMode:(unsigned long long)arg4 clientCalendarDate:(id*)arg5;
- (id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id*)arg4;
- (bool)allowsAlarmModifications;
- (bool)allowsAllDayModifications;
- (bool)allowsAttendeesModifications;
- (bool)allowsAvailabilityModifications;
- (bool)allowsCalendarModifications;
- (bool)allowsParticipationStatusModifications;
- (bool)allowsPrivacyLevelModifications;
- (bool)allowsProposedTimeModifications;
- (bool)allowsRecurrenceModifications;
- (bool)allowsResponseCommentModifications;
- (bool)allowsSpansOtherThanThisEvent;
- (bool)allowsTravelTimeModifications;
- (bool)attendeeComment;
- (bool)attendeeDeclinedStartDate;
- (bool)attendeeProposedStartDate;
- (bool)attendeeReplyChanged;
- (bool)attendeeStatus;
- (id)attendeesNotIncludingOrganizer;
- (bool)automaticLocationGeocodingAllowed;
- (long long)availability;
- (id)birthdayContactIdentifier;
- (id)birthdayContactName;
- (id)birthdayID;
- (long long)birthdayPersonID;
- (id)birthdayPersonUniqueID;
- (unsigned long long)cachedJunkStatus;
- (bool)canBeRespondedTo;
- (bool)canDetachSingleOccurrence;
- (bool)canForward;
- (bool)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3;
- (bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4;
- (bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3;
- (bool)changingAllDayPropertyIsAllowed;
- (void)clearCachedTimeValues;
- (void)clearDetectedConferenceURL;
- (void)clearInvitationStatus;
- (int)clearModifiedFlags;
- (void)clearParsedConference;
- (void)clearVirtualConferenceURLsQueuedForInvalidation;
- (id)committedConstraints;
- (id)committedCopy;
- (id)committedValueForKey:(id)arg1;
- (long long)compareOriginalStartDateWithEvent:(id)arg1;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (bool)completed;
- (id)conferenceURL;
- (id)conferenceURLDetected;
- (id)conferenceURLDetectedString;
- (id)conferenceURLForDisplay;
- (bool)conferenceURLForDisplayCached;
- (id)conferenceURLString;
- (void)confirmPredictedLocation:(id)arg1;
- (bool)conformsToRecurrenceRules:(id)arg1;
- (id)constraints;
- (id)copyToCalendar:(id)arg1 withOptions:(long long)arg2;
- (bool)couldBeJunk;
- (unsigned long long)countOfAttendeeProposedTimes;
- (long long)currentUserGeneralizedParticipantRole;
- (bool)currentUserMayActAsOrganizer;
- (bool)dateChanged;
- (long long)daysSpannedInCalendar:(id)arg1;
- (void)declineProposedTimeNotificationFromAttendee:(id)arg1;
- (id)defaultAlarm;
- (id)defaultAlarms;
- (id)description;
- (id)diffFromCommitted;
- (bool)disallowProposeNewTime;
- (void)dismissAcceptedProposeNewTimeNotification;
- (void)dismissAttendeeRepliedNotification;
- (id)displayNotes;
- (id)duplicateWithOptions:(long long)arg1;
- (double)duration;
- (double)durationIncludingTravel;
- (bool)durationOverlapsRecurrenceInterval;
- (id)earliestOccurrenceEndingAfter:(id)arg1;
- (id)earliestOccurrenceEndingAfter:(id)arg1 excludeSignificantDetachments:(bool)arg2 excludeCanceledDetachments:(bool)arg3 excludeDeclinedDetachments:(bool)arg4;
- (id)effectiveTimeZone;
- (bool)eligibleForTravelAdvisories;
- (id)endCalendarDate;
- (id)endDate;
- (id)endDateRaw;
- (id)endDateUnadjustedForLegacyClients;
- (id)endLocation;
- (unsigned long long)entityType;
- (id)eventIdentifier;
- (id)eventOccurrenceID;
- (int)externalTrackingStatus;
- (id)externalURI;
- (id)externalURL;
- (bool)firedTTL;
- (bool)flag:(int)arg1;
- (int)flags;
- (void)forceLocationPredictionUpdate;
- (void)forceSetTimeZone:(id)arg1;
- (bool)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)arg1;
- (bool)hasAttachmentChanges;
- (bool)hasAttendeeProposedTimes;
- (bool)hasChangesRequiringSpanAll;
- (bool)hasComplexRecurrence;
- (bool)hasPredictedLocation;
- (bool)hasValidEventAction;
- (unsigned long long)hash;
- (id)image;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 objectForCopy:(id)arg2;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initialEndDate;
- (id)initialStartDate;
- (void)invalidateRemovedVirtualConferences;
- (void)invalidateVirtualConferenceURLIfNeededOnCommit:(id)arg1;
- (unsigned int)invitationChangedProperties;
- (unsigned long long)invitationStatus;
- (bool)isAlerted;
- (bool)isAllDay;
- (bool)isAllDayDirty;
- (bool)isAttendeeSameAsOrganizer:(id)arg1;
- (bool)isBirthday;
- (bool)isCurrentUserInvitedAttendee;
- (bool)isDetached;
- (bool)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1;
- (bool)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1;
- (bool)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1;
- (bool)isDifferentAndModifiedAttendeesWithDiff:(id)arg1;
- (bool)isDifferentAndRequiresRSVPWithDiff:(id)arg1;
- (bool)isDifferentAndRequiresRescheduleWithDiff:(id)arg1;
- (bool)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1;
- (bool)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (bool)isDifferentFromCommittedEventAndRequiresRSVP;
- (bool)isDifferentFromCommittedEventAndRequiresReschedule;
- (bool)isDifferentWithDiff:(id)arg1;
- (bool)isEditable;
- (bool)isEndDateDirty;
- (bool)isEqual:(id)arg1;
- (bool)isEqual:(id)arg1 comparingKeys:(id)arg2;
- (bool)isFirstOccurrence;
- (bool)isFloating;
- (bool)isMainOccurrence;
- (bool)isMaster;
- (bool)isMasterOrDetachedOccurrence;
- (bool)isMultiDayTimedEventInCalendar:(id)arg1;
- (bool)isOnlyOccurrence;
- (bool)isOutOfOrderWithEventInSeries;
- (bool)isPartOfExistingRecurringSeries;
- (bool)isPhantom;
- (bool)isPrivacySet;
- (bool)isPrivateEventSharedToMe;
- (bool)isProposedTimeEvent;
- (bool)isSignificantlyDetached;
- (bool)isSignificantlyDetachedIgnoringParticipation;
- (bool)isStartDateDirty;
- (bool)isStatusDirty;
- (bool)isTentative;
- (bool)isUndetached;
- (bool)isValidAttendee:(id)arg1 forCalendar:(id)arg2;
- (unsigned long long)junkStatus;
- (id)launchURL;
- (bool)locationChanged;
- (bool)locationIsAConferenceRoom;
- (long long)locationPredictionState;
- (id)locationWithoutPrediction;
- (id)locations;
- (id)locationsWithoutPrediction;
- (id)lunarCalendarString;
- (void)makeRecurrenceEndCountBased;
- (void)makeRecurrenceEndDateBased;
- (void)markAsCommitted;
- (void)markAsSaved;
- (void)markAsUndeleted;
- (void)markAsUndetachedWithStartDate:(id)arg1 endDate:(id)arg2;
- (void)markEventAsAttendeeForward;
- (id)masterEvent;
- (bool)needsGeocoding;
- (id)nextOccurrenceOrDetachmentAfter:(id)arg1;
- (id)occurrenceDate;
- (id)occurrenceEndDate;
- (bool)occurrenceIsAllDay;
- (id)occurrenceStartDate;
- (id)originalOccurrenceEndDate;
- (id)originalOccurrenceIsAllDay;
- (id)originalOccurrenceStartDate;
- (id)originalStartDate;
- (bool)overlapsWithOrIsSameDayAsEventInSeries;
- (void)overrideEndDate:(id)arg1;
- (void)overrideStartDate:(id)arg1;
- (void)parsedConference:(id*)arg1 andNotes:(id*)arg2;
- (long long)participationStatus;
- (id)participationStatusModifiedDate;
- (long long)pendingParticipationStatus;
- (bool)phantomMaster;
- (void)postModifiedNotification;
- (void)postModifiedNotificationWithUserInfo:(id)arg1;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double*)arg1;
- (bool)potentiallyEligibleForTravelAdvisories;
- (id)preferredLocationWithoutPrediction;
- (bool)preventConferenceURLDetection;
- (id)previouslySavedCopy;
- (id)privacyDescription;
- (long long)privacyLevel;
- (id)privacyLevelString;
- (id)proposedEndDate;
- (id)proposedStartDate;
- (void)rebaseSkippingRelationProperties:(id)arg1;
- (void)rebaseToEventStore:(id)arg1;
- (bool)recurrenceChanged;
- (id)recurrenceDate;
- (id)recurrenceIdentifier;
- (id)recurrenceRule;
- (id)recurrenceSet;
- (bool)refresh;
- (bool)refreshAndNotify:(bool)arg1;
- (void)rejectPredictedLocation;
- (void)removeConferenceRooms:(id)arg1;
- (void)removeEventAction:(id)arg1;
- (void)removeServerRefreshRelatedProperties;
- (bool)removeWithSpan:(long long)arg1 error:(id*)arg2;
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (long long)requirementsToMoveToCalendar:(id)arg1;
- (bool)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (bool)requiresDetach;
- (bool)requiresDetachDueToSnoozedAlarm;
- (void)reset;
- (id)responseComment;
- (bool)responseMustApplyToAll;
- (bool)revert;
- (void)rollback;
- (id)roomAttendees;
- (bool)saveWithSpan:(long long)arg1 error:(id*)arg2;
- (id)scanForConflicts;
- (long long)selfParticipantStatus;
- (id)sendersEmail;
- (id)sendersPhoneNumber;
- (bool)seriesHasOutOfOrderEvents;
- (bool)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (bool)serverSupportedProposeNewTime;
- (void)setActions:(id)arg1;
- (void)setAllDay:(bool)arg1;
- (void)setAttendeeComment:(bool)arg1;
- (void)setAttendeeDeclinedStartDate:(bool)arg1;
- (void)setAttendeeProposedStartDate:(bool)arg1;
- (void)setAttendeeStatus:(bool)arg1;
- (void)setAvailability:(long long)arg1;
- (void)setBirthdayContact:(id)arg1;
- (void)setBirthdayContactIdentifier:(id)arg1;
- (void)setCachedJunkStatus:(unsigned long long)arg1;
- (void)setCalendar:(id)arg1;
- (void)setClearModifiedFlags:(int)arg1;
- (void)setCompleted:(bool)arg1;
- (void)setConferenceURL:(id)arg1;
- (void)setConferenceURLString:(id)arg1;
- (void)setDateChanged:(bool)arg1;
- (void)setDisplayNotes:(id)arg1;
- (void)setEndDate:(id)arg1;
- (void)setEndDateRaw:(id)arg1;
- (void)setEndDateUnadjustedForLegacyClients:(id)arg1;
- (void)setEndLocation:(id)arg1;
- (void)setExternalTrackingStatus:(int)arg1;
- (void)setFiredTTL:(bool)arg1;
- (void)setFlag:(int)arg1 value:(bool)arg2;
- (void)setFlags:(int)arg1;
- (void)setImage:(id)arg1;
- (void)setInvitationChangedProperties:(unsigned int)arg1;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (void)setIsAlerted:(bool)arg1;
- (void)setIsJunk:(bool)arg1 shouldSave:(bool)arg2;
- (void)setIsPhantom:(bool)arg1;
- (void)setJunkStatus:(unsigned long long)arg1;
- (void)setLocationChanged:(bool)arg1;
- (void)setLocationPredictionAllowed:(bool)arg1;
- (void)setLocationPredictionState:(long long)arg1;
- (void)setLocations:(id)arg1;
- (void)setLunarCalendarString:(id)arg1;
- (void)setNeedsGeocoding:(bool)arg1;
- (void)setNotes:(id)arg1;
- (void)setNotesCommon:(id)arg1;
- (void)setOccurrenceEndDate:(id)arg1;
- (void)setOccurrenceIsAllDay:(bool)arg1;
- (void)setOccurrenceStartDate:(id)arg1;
- (void)setOriginalOccurrenceEndDate:(id)arg1;
- (void)setOriginalOccurrenceIsAllDay:(id)arg1;
- (void)setOriginalOccurrenceStartDate:(id)arg1;
- (void)setOriginalStartDate:(id)arg1;
- (void)setParticipationStatus:(long long)arg1;
- (void)setParticipationStatusModifiedDate:(id)arg1;
- (void)setPhantomMaster:(bool)arg1;
- (void)setPredictedLocationFrozen:(bool)arg1;
- (void)setPreventConferenceURLDetection:(bool)arg1;
- (void)setPrivacyLevel:(long long)arg1;
- (void)setPrivacyLevelWithoutVerifyingPrivacyModificationsAllowed:(long long)arg1;
- (void)setProposedStartDate:(id)arg1;
- (void)setRecurrenceChanged:(bool)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setRecurrenceRuleString:(id)arg1;
- (void)setRecurrenceSet:(id)arg1;
- (void)setRequiresDetachDueToSnoozedAlarm:(bool)arg1;
- (void)setResponseComment:(id)arg1;
- (void)setSpecialDayString:(id)arg1;
- (void)setSpecialDayType:(long long)arg1;
- (void)setStartDate:(id)arg1;
- (void)setStartDateRaw:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setStructuredLocation:(id)arg1;
- (void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(bool)arg2;
- (void)setSuggestionInfo:(id)arg1;
- (void)setTimeChanged:(bool)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleChanged:(bool)arg1;
- (void)setTravelAdvisoryBehavior:(long long)arg1;
- (void)setTravelTime:(double)arg1;
- (void)setURL:(id)arg1;
- (void)setURLCommon:(id)arg1;
- (void)setVideoConferenceChanged:(bool)arg1;
- (void)setVirtualConference:(id)arg1;
- (void)setVirtualConferenceTextRepresentation:(id)arg1;
- (bool)shouldHaveDefaultAlarms;
- (id)showEventURLString;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)arg1 propertyKeysToSkip:(id)arg2;
- (void)snoozeAlarm:(id)arg1 untilTargetDate:(id)arg2;
- (void)snoozeAlarm:(id)arg1 untilTargetDate:(id)arg2 pinsTriggerToStartDate:(bool)arg3;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2 pinsTriggerToStartDate:(bool)arg3;
- (id)specialDayString;
- (long long)specialDayType;
- (id)specificIdentifier;
- (id)startCalendarDate;
- (id)startCalendarDateIncludingTravelTime;
- (id)startDate;
- (id)startDateForRecurrence;
- (id)startDateIncludingTravel;
- (id)startDateRaw;
- (id)startOfDayForEndDateInCalendar:(id)arg1;
- (id)startOfDayForStartDateInCalendar:(id)arg1;
- (long long)status;
- (id)structuredLocation;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (id)suggestedStartDateForCurrentRecurrenceRuleWithSimulatedNowDate:(id)arg1;
- (id)suggestionInfo;
- (bool)supportsAddingAttachments;
- (bool)supportsJunkReporting;
- (bool)supportsParticipationStatusModificationsWithoutNotification;
- (bool)timeChanged;
- (id)title;
- (bool)titleChanged;
- (long long)travelAdvisoryBehavior;
- (bool)travelAdvisoryBehaviorIsEffectivelyEnabled;
- (long long)travelRoutingMode;
- (double)travelTime;
- (id)uniqueId;
- (void)updateDefaultAlarms;
- (bool)updateEventToEvent:(id)arg1;
- (bool)updateEventToEvent:(id)arg1 commit:(bool)arg2;
- (bool)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id*)arg3;
- (void)updateWithVCSEntity:(id)arg1 inCalendar:(id)arg2;
- (bool)validate:(id*)arg1;
- (bool)validateOccurrenceDateStillMatchesRecurrenceRules;
- (bool)validateRecurrenceRule:(id)arg1 error:(id*)arg2;
- (bool)validateWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)videoConferenceChanged;
- (id)virtualConference;
- (id)virtualConferenceTextRepresentation;

// Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI

- (id)attendeesWithoutOrganizerAndLocations;
- (long long)daySpan;
- (bool)hasHumanInviteesToDisplay;
- (id)sortEKParticipantsIgnoringNonHumans:(id)arg1;
- (id)sortedEKAttachmentsDisplayStrings;
- (id)sortedEKParticipantsDisplayStringsIgnoringNonHumans:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit

+ (id)actionStringsDisplayName;
+ (id)actionStringsPluralDisplayName;
+ (bool)updateVirtualConference:(id)arg1 replacing:(id)arg2 with:(id)arg3;

- (bool)CUIKEditingContext_removeWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)CUIKEditingContext_saveWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)CUIK_deleteActionShouldDeclineEvent;
- (id)CUIK_symbolName;
- (id)actionStringsDisplayTitle;
- (void)fixInvalidatedVirtualConferenceURLs:(long long)arg1;

// Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals

- (id)sg_eventMetadata;
- (id)sg_fallbackURL;
- (bool)sg_isCuratedEventFromSuggestionNewerThan:(struct SGUnixTimestamp_ { double x1; })arg1;
- (id)sg_schemas;

// Image: /System/Library/PrivateFrameworks/DashBoard.framework/DashBoard

- (id)db_ShortDescription;

// Image: /System/Library/PrivateFrameworks/DataDetectorsNaturalLanguage.framework/DataDetectorsNaturalLanguage

- (bool)ipsos_allDayPreferred;
- (id)ipsos_betterDescription;
- (double)ipsos_confidence;
- (id)ipsos_dataFeatures;
- (bool)ipsos_disableTimeAdjustment;
- (double)ipsos_duration;
- (unsigned long long)ipsos_eventAttributes;
- (id)ipsos_eventClassificationType;
- (unsigned long long)ipsos_eventStatus;
- (double)ipsos_experimentalConfidence;
- (bool)ipsos_isDateTimeTenseDependent;
- (bool)ipsos_isEndTimeApproximate;
- (bool)ipsos_isEventTimeOnlyAndReferrengingToSentDate;
- (bool)ipsos_isTimeApproximate;
- (bool)ipsos_isTimeOffset;
- (id)ipsos_messageUnit;
- (bool)ipsos_timeNeedsMeridianGuess;
- (unsigned long long)ipsos_usedBubblesCount;
- (bool)ipsos_usesDefaultClassificationTypeStartTime;
- (void)setIpsos_allDayPreferred:(bool)arg1;
- (void)setIpsos_confidence:(double)arg1;
- (void)setIpsos_dataFeatures:(id)arg1;
- (void)setIpsos_disableTimeAdjustment:(bool)arg1;
- (void)setIpsos_eventAttributes:(unsigned long long)arg1;
- (void)setIpsos_eventClassificationType:(id)arg1;
- (void)setIpsos_eventStatus:(unsigned long long)arg1;
- (void)setIpsos_experimentalConfidence:(double)arg1;
- (void)setIpsos_isDateTimeTenseDependent:(bool)arg1;
- (void)setIpsos_isEndTimeApproximate:(bool)arg1;
- (void)setIpsos_isEventTimeOnlyAndReferrengingToSentDate:(bool)arg1;
- (void)setIpsos_isTimeApproximate:(bool)arg1;
- (void)setIpsos_isTimeOffset:(bool)arg1;
- (void)setIpsos_messageUnit:(id)arg1;
- (void)setIpsos_timeNeedsMeridianGuess:(bool)arg1;
- (void)setIpsos_usedBubblesCount:(unsigned long long)arg1;
- (void)setIpsos_usesDefaultClassificationTypeStartTime:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/PersonalizationPortraitInternals.framework/PersonalizationPortraitInternals

- (id)pp_airports;
- (id)pp_boatReservationTitle;
- (id)pp_busReservationTitle;
- (id)pp_carRentalDropoffReservationTitle;
- (id)pp_carRentalPickupReservationTitle;
- (id)pp_foodReservationTitle;
- (bool)pp_isConnectionFromFlight:(id)arg1;
- (bool)pp_isDupeOfBoatEvent:(id)arg1;
- (bool)pp_isDupeOfBusEvent:(id)arg1;
- (bool)pp_isDupeOfCarRentalDropoffEvent:(id)arg1;
- (bool)pp_isDupeOfCarRentalPickupEvent:(id)arg1;
- (bool)pp_isDupeOfEvent:(id)arg1 forCategory:(unsigned char)arg2;
- (bool)pp_isDupeOfFlightEvent:(id)arg1;
- (bool)pp_isDupeOfFoodEvent:(id)arg1;
- (bool)pp_isDupeOfLodgingEvent:(id)arg1;
- (bool)pp_isDupeOfTrainEvent:(id)arg1;
- (id)pp_locationString;
- (id)pp_lodgingName;
- (unsigned char)pp_suggestedCategory;
- (id)pp_trainReservationTitle;

// Image: /System/Library/PrivateFrameworks/StocksCore.framework/StocksCore

- (id)eventLaunchURL;

@end
