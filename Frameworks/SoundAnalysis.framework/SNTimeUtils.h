
@interface SNTimeUtils : NSObject

+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })addOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
+ (id)addOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toTimeRanges:(id)arg2;
+ (id)addOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toTimes:(id)arg2;
+ (id)audioTimeAdvancedByFrames:(unsigned int)arg1 fromTime:(id)arg2;
+ (bool)checkTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 hasTimescale:(int)arg2;
+ (bool)checkTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 isEqualToOther:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
+ (bool)checkTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 isIdenticalToOther:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })clipTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toBounds:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
+ (void)clipTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toBounds:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 handler:(id /* block */)arg3;
+ (id /* block */)comparatorOrderingTimeValuesEarliestToLatest;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })convertScaleForTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toValue:(int)arg2 preferShrinkingWhenRounding:(bool)arg3;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })convertScaleForTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toValue:(int)arg2 startRoundingMethod:(unsigned int)arg3 durationRoundingMethod:(unsigned int)arg4;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })divideTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 byTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (id)endTimesFromTimeRangeCollection:(id)arg1;
+ (id)integerDivideTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 byTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 roundingMethod:(unsigned int)arg3 error:(id*)arg4;
+ (id)latestEndTimeInTimeRangeCollection:(id)arg1;
+ (id)latestTimeInTimeCollection:(id)arg1;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })loopTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 withinTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 error:(id*)arg3;
+ (id)loopTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 withinTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 error:(id*)arg3;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })makeInvalidTimeRange;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })moveInStepsFromTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 towardTargetTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 stepSize:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 roundingMethod:(unsigned int)arg4 movementHandler:(id /* block */)arg5 error:(id*)arg6;
+ (id)multiplesOfTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 count:(unsigned long long)arg2;
+ (id)multiplesOfTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 fromOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 count:(unsigned long long)arg3;
+ (id)multiplesOfTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 withinTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 error:(id*)arg3;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })negateTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
+ (long long)orderingFromEarliestToLatestCompareTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toOther:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (long long)orderingFromEarliestToLatestCompareTimeValue:(id)arg1 toOther:(id)arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })remainderOfDividingTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 byTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })roundTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toMultipleOf:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeTo:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 roundingMethod:(unsigned int)arg4 error:(id*)arg5;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })selectEarliestBetweenTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 andTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })selectLatestBetweenTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 andTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (id)splitTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 atEachMultipleOf:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (id)splitTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 atEachMultipleOf:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 fromOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 error:(id*)arg4;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })standardizeTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 negativeShouldResideInTimescale:(bool)arg2;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })standardizeTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 directionShouldBePositive:(bool)arg2;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })standardizeTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 directionShouldBePositive:(bool)arg2 negativeShouldResideInTimescale:(bool)arg3;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })standardizeTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 negativeShouldResideInTimeScale:(bool)arg2;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })subtractOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 fromTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeFromAVAudioTime:(id)arg1;
+ (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })timeRangeSteppingFromTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 towardTargetTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 stepSize:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 roundingMethod:(unsigned int)arg4 error:(id*)arg5;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeSinceBeginningOfTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeSinceBeginningOfTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 toTimeWithinRange:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeToEndOfTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 fromTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeToEndOfTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 fromTimeWithinRange:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })timeWithinTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 precedingEndByMaxTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (bool)validateTimeContainedInTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
+ (bool)validateTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 hasTimescale:(int)arg2 error:(id*)arg3;

- (id)init;

@end
