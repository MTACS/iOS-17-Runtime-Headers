
@interface SNCollectionUtils : NSObject

+ (bool)allInCollection:(id)arg1 satisfyPredicate:(id /* block */)arg2;
+ (bool)anyInCollection:(id)arg1 satisfyPredicate:(id /* block */)arg2;
+ (void)applyToEachInCollection:(id)arg1 apply:(id /* block */)arg2;
+ (bool)applyToEachInCollection:(id)arg1 apply:(id /* block */)arg2 error:(id*)arg3;
+ (void)applyToEachKeyValuePairInDictionary:(id)arg1 apply:(id /* block */)arg2;
+ (bool)applyToEachKeyValuePairInDictionary:(id)arg1 apply:(id /* block */)arg2 error:(id*)arg3;
+ (id)arrayFromCollection:(id)arg1;
+ (bool)checkSetEqualityBetweenCollection:(id)arg1 expected:(id)arg2;
+ (long long)comparisonResultFromInt32:(int)arg1;
+ (id)concatenateDictionaries:(id)arg1 error:(id*)arg2;
+ (id)filterKeyValuePairsInDictionary:(id)arg1 keepingKeys:(id)arg2;
+ (id)filterKeyValuePairsInDictionary:(id)arg1 removingKeys:(id)arg2;
+ (id)filterKeyValuePairsInDictionary:(id)arg1 withKeyValuePredicate:(id /* block */)arg2;
+ (id)filterToArrayFromCollection:(id)arg1 predicate:(id /* block */)arg2;
+ (id)filterToArrayFromCollection:(id)arg1 removingObjects:(id)arg2;
+ (id)filterToSetFromCollection:(id)arg1 predicate:(id /* block */)arg2;
+ (id)filterToSetFromCollection:(id)arg1 removingObjects:(id)arg2;
+ (id)firstInCollection:(id)arg1 satisfyingPredicate:(id /* block */)arg2;
+ (id)generateArrayWithRangeFrom:(long long)arg1 step:(long long)arg2 count:(long long)arg3;
+ (id)groupIntoArraysFromCollection:(id)arg1 usingKeyGenerator:(id /* block */)arg2;
+ (id /* block */)iteratorForCollection:(id)arg1;
+ (id)lastItemsFromArraysInCollection:(id)arg1;
+ (id)mapKeysInDictionary:(id)arg1 fallablePairTransform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapKeysInDictionary:(id)arg1 fallableTransform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapKeysInDictionary:(id)arg1 keyMappings:(id)arg2 error:(id*)arg3;
+ (id)mapKeysInDictionary:(id)arg1 pairTransform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapKeysInDictionary:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapToArrayFromCollection:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapToArrayFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapToSetArrayFromCollection:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapToSetArrayFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapToSetFromCollection:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapToSetFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapValuesInDictionary:(id)arg1 pairTransform:(id /* block */)arg2;
+ (id)mapValuesInDictionary:(id)arg1 pairTransform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapValuesInDictionary:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapValuesInDictionary:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapcatToArrayFromCollection:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapcatToArrayFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapcatToDictionaryFromCollection:(id)arg1 fallableTransform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapcatToDictionaryFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)mapcatToSetFromCollection:(id)arg1 transform:(id /* block */)arg2;
+ (id)mapcatToSetFromCollection:(id)arg1 transform:(id /* block */)arg2 error:(id*)arg3;
+ (id)maxInCollection:(id)arg1 compare:(id /* block */)arg2;
+ (id)maxNumberInCollection:(id)arg1;
+ (id)objectsFromArray:(id)arg1 atIndices:(id)arg2 error:(id*)arg3;
+ (id)optionalObjectAtIndexNumber:(id)arg1 inArray:(id)arg2 error:(id*)arg3;
+ (id)partitionToArraysFromCollection:(id)arg1 memberCountPerPartition:(unsigned long long)arg2;
+ (id)partitionToArraysFromCollection:(id)arg1 memberCountPerPartition:(unsigned long long)arg2 error:(id*)arg3;
+ (id)reduceCollection:(id)arg1 from:(id)arg2 reducer:(id /* block */)arg3;
+ (id)reduceCollection:(id)arg1 from:(id)arg2 reducer:(id /* block */)arg3 error:(id*)arg4;
+ (id)requiredObjectAtIndexNumber:(id)arg1 inArray:(id)arg2 error:(id*)arg3;
+ (id)reverseDictionary:(id)arg1 error:(id*)arg2;
+ (id)setArrayFromCollection:(id)arg1;
+ (id)setFromCollection:(id)arg1;
+ (id)shapeCollection:(id)arg1 shape:(id)arg2 error:(id*)arg3;
+ (id)subtractSetArray:(id)arg1 fromSetArray:(id)arg2;
+ (id)toArrayConcatenateCollections:(id)arg1;
+ (id)toArrayKeepAllButFirstInCollection:(id)arg1;
+ (id)toArrayKeepAllButLastInCollection:(id)arg1;
+ (id)toSetArrayConcatenateCollections:(id)arg1;
+ (id)toSetConcatenateCollections:(id)arg1;
+ (id)uniqueMatchInCollection:(id)arg1 satisfyingPredicate:(id /* block */)arg2;
+ (bool)validateSetEqualityBetweenCollection:(id)arg1 expected:(id)arg2 error:(id*)arg3;
+ (id)zipPairsToArrayInCollection:(id)arg1 zip:(id /* block */)arg2;
+ (id)zipToArrayFromFirstCollection:(id)arg1 secondCollection:(id)arg2 zip:(id /* block */)arg3;
+ (id)zipToArrayFromFirstCollection:(id)arg1 secondCollection:(id)arg2 zip:(id /* block */)arg3 error:(id*)arg4;
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 keyedZip:(id /* block */)arg3;
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 keyedZip:(id /* block */)arg3 error:(id*)arg4;
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 zip:(id /* block */)arg3;
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 zip:(id /* block */)arg3 error:(id*)arg4;

- (void).cxx_destruct;
- (id)init;

@end
