
@interface CSUserQuery : CSSearchQuery {
    CSSearchQueryContext * _clientContext;
    NSMutableArray * _completions;
    _CSMultiQuery * _contactCountingQuerySearchFrom;
    _CSMultiQuery * _contactCountingQuerySearchTo;
    _CSContactSearch * _contactSearch;
    NSArray * _contactSearchResults;
    NSObject<OS_dispatch_semaphore> * _contactSearchSemaphore;
    unsigned long long  _contactSearchSemaphoreWaitTime;
    long long  _currentTokenKind;
    long long  _currentTokenScope;
    bool  _didProcessTopHits;
    id /* block */  _foundInstantAnswersHandler;
    id /* block */  _foundInstantAnswersHandlerOld;
    long long  _foundSuggestionCount;
    id /* block */  _foundSuggestionsHandler;
    NSMutableArray * _instantAnswers;
    NSMutableArray * _nlpSuggestions;
    NSDictionary * _parserOptions;
    bool  _queryIsTopHit;
    bool  _queryRewritten;
    NSString * _searchString;
    NSMutableArray * _suggestions;
    NSMutableArray * _templateSuggestions;
    long long  _tokenCount;
}

@property (nonatomic, copy) NSArray *contactSearchResults;
@property (nonatomic, readonly) NSObject<OS_dispatch_semaphore> *contactSearchSemaphore;
@property (nonatomic, readonly) unsigned long long contactSearchSemaphoreWaitTime;
@property (copy) id /* block */ foundInstantAnswersHandler;
@property (copy) id /* block */ foundInstantAnswersHandlerOld;
@property (readonly) long long foundSuggestionCount;
@property (copy) id /* block */ foundSuggestionsHandler;

+ (id)advancedComponentsWithSearchString:(id)arg1 parseResult:(id)arg2 parseOptions:(id)arg3 queryContext:(id)arg4;
+ (id)collectUnigrams:(id)arg1 locale:(id)arg2;
+ (id)computeEmailAddressTopicalityScore:(id)arg1 inputEmailAddress:(id)arg2 queryUnigrams:(id)arg3 locale:(id)arg4;
+ (id)computeRankingScoreForSuggestion:(id)arg1 queryString:(id)arg2 locale:(id)arg3;
+ (void)computeRankingScoreForSuggestions:(id)arg1 queryString:(id)arg2 locale:(id)arg3;
+ (double)computeScoreForNameUnigrams:(id)arg1 queryUnigrams:(id)arg2 queryString:(id)arg3 locale:(id)arg4 isContactsSuggestion:(bool)arg5;
+ (double)computeTopicalityScoreForName:(id)arg1 inputName:(id)arg2 numTokensInName:(unsigned long long)arg3 isContactsSuggestion:(bool)arg4 queryUnigrams:(id)arg5 isFirstName:(bool)arg6 locale:(id)arg7;
+ (id)dedupSuggestions:(id)arg1 seenContactInfoToSuggestion:(id)arg2;
+ (id)dedupedDateSuggestions:(id)arg1;
+ (id)dedupedNextTokenSuggestions:(id)arg1 context:(id)arg2;
+ (id)dedupedSuggestions:(id)arg1 options:(id)arg2;
+ (id)emailSpecialChars;
+ (void)filteredTemplateSuggestions:(id)arg1 nlpSuggestions:(id)arg2;
+ (id)flattenCSFieldSpecifications:(id)arg1;
+ (id)generateFilterQueriesBasedOnPreviousSuggestions:(id)arg1;
+ (id)normalizeAndTrimContacts:(id)arg1 maxCount:(long long)arg2;
+ (id)orderedSuggestions:(id)arg1 options:(id)arg2;
+ (id)orderedSuggestionsForPhotos:(id)arg1 options:(id)arg2;
+ (id)parseResultWithSearchString:(id)arg1 parseOptions:(id)arg2 queryContext:(id)arg3 isZKW:(bool)arg4;
+ (id)parseSearchString:(id)arg1 parseOptions:(id)arg2 queryContext:(id)arg3;
+ (id)queryContextWithUserQueryString:(id)arg1 searchString:(id)arg2 clientContext:(id)arg3;
+ (void)sortSearchableItemsByL2:(id)arg1;
+ (id)suggestionsByDetectingEmailIntentForPeopleSuggestions:(id)arg1;
+ (id)trimSuggestions:(id)arg1 options:(id)arg2 peopleSelectedScope:(long long)arg3 isShortQuery:(bool)arg4;
+ (void)updateWithTemplateSuggestions:(id)arg1 searchString:(id)arg2 currentSuggestion:(id)arg3;

- (void).cxx_destruct;
- (void)cancel;
- (id)clientContext;
- (id)contactSearchResults;
- (id)contactSearchSemaphore;
- (unsigned long long)contactSearchSemaphoreWaitTime;
- (void)filterContactPeopleSuggestions:(id)arg1 cachedSuggestionsEmailToScope:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)filterQueries;
- (id)foundCompletions;
- (id)foundInstantAnswers;
- (id /* block */)foundInstantAnswersHandler;
- (id /* block */)foundInstantAnswersHandlerOld;
- (id)foundNLPSuggestions;
- (long long)foundSuggestionCount;
- (id)foundSuggestions;
- (id /* block */)foundSuggestionsHandler;
- (id)foundTemplateSuggestions;
- (void)handleCompletion:(id)arg1;
- (void)handleFirstBatch:(id)arg1;
- (void)handleFoundCompletions:(id)arg1;
- (void)handleFoundInstantAnswer:(id)arg1;
- (void)handleFoundInstantAnswers:(id)arg1;
- (void)handleFoundItems:(id)arg1;
- (void)handleFoundNLPSuggestions:(id)arg1;
- (void)handleFoundSuggestions:(id)arg1;
- (void)handleFoundTemplateSuggestions:(id)arg1;
- (void)handleInstantAnswers;
- (void)handleQueryRewritten;
- (void)handleSuggestions;
- (id)initWithQueryString:(id)arg1 context:(id)arg2;
- (id)initWithQueryString:(id)arg1 queryContext:(id)arg2;
- (id)initWithSearchString:(id)arg1 keyboardLanguage:(id)arg2 attributes:(id)arg3;
- (id)initWithUserQueryString:(id)arg1 queryContext:(id)arg2;
- (id)initWithUserQueryString:(id)arg1 userQueryContext:(id)arg2;
- (id)initWithUserString:(id)arg1 queryContext:(id)arg2;
- (id)keyboardLanguage;
- (id)peopleSuggestionsWithContactSearchResults:(id)arg1;
- (void)prepareSearch;
- (id)processFromContacts:(id)arg1 resultsFromMultiQuery:(id)arg2 contactsFrom:(id)arg3 processedContacts:(id)arg4;
- (void)processInstantAnswersWithFoundItems:(id)arg1;
- (id)processToContacts:(id)arg1 resultsToMultiQuery:(id)arg2 contactsTo:(id)arg3 processedContacts:(id)arg4;
- (id)queryContext;
- (bool)queryRewritten;
- (id)queryStringWithQueryContext:(id)arg1 searchString:(id)arg2 options:(id)arg3;
- (void)setContactSearchResults:(id)arg1;
- (void)setFilterQueries:(id)arg1;
- (void)setFoundInstantAnswersHandler:(id /* block */)arg1;
- (void)setFoundInstantAnswersHandlerOld:(id /* block */)arg1;
- (void)setFoundSuggestionsHandler:(id /* block */)arg1;
- (void)start;
- (void)startContactSearchIfNeededWithSearchQuery:(id)arg1;
- (void)startContactSearchWithUserQuery:(id)arg1 maxCount:(long long)arg2;
- (void)updateRecentSuggestions:(id)arg1;
- (void)userEngagedWithResult:(id)arg1 interactionType:(int)arg2;
- (void)userEngagedWithResult:(id)arg1 visibleResults:(id)arg2 interactionType:(int)arg3;
- (void)userEngagedWithSuggestion:(id)arg1 visibleSuggestions:(id)arg2 interactionType:(int)arg3;
- (void)willStartQuery;

@end
