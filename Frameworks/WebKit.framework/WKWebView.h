
@interface WKWebView : UIView <UIFindInteractionDelegate, UIResponderStandardEditActions, UIScrollViewDelegate, UITextSearching, WBUFormAutoFillWebView, _UITextSearching> {
    unsigned long long  _activeFocusedStateRetainCount;
    bool  _allowsBackForwardNavigationGestures;
    bool  _allowsLinkPreview;
    bool  _allowsViewportShrinkToFit;
    bool  _alwaysSendNextVisibleContentRectUpdate;
    double  _animatedResizeOldMinimumEffectiveDeviceWidth;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _animatedResizeOldObscuredInsets;
    int  _animatedResizeOldOrientation;
    struct WeakObjCPtr<id<_WKAppHighlightDelegate>> { 
        id m_weakReference; 
    }  _appHighlightDelegate;
    struct Vector<WTF::Function<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^v"m_capacity"I"m_size"I {}  _callbacksDeferredDuringResize;
    struct RetainPtr<WKWebViewConfiguration> { 
        void *m_ptr; 
    }  _configuration;
    struct RetainPtr<WKContentView> { 
        void *m_ptr; 
    }  _contentView;
    bool  _contentViewShouldBecomeFirstResponderAfterNavigationGesture;
    unsigned long long  _currentDynamicViewportSizeUpdateID;
    struct optional<WebCore::WheelScrollGestureState> { 
        union { 
            BOOL __null_state_; 
            unsigned char __val_; 
        } ; 
        bool __engaged_; 
    }  _currentScrollGestureState;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _customContentFixedOverlayView;
    struct RetainPtr<UIView<WKWebViewContentProvider>> { 
        void *m_ptr; 
    }  _customContentView;
    bool  _didScrollSinceLastTimerFire;
    unsigned long long  _dragInteractionPolicy;
    struct RetainPtr<NSTimer> { 
        void *m_ptr; 
    }  _enclosingScrollViewScrollTimer;
    struct RetainPtr<id> { 
        void *m_ptr; 
    }  _endLiveResizeNotificationObserver;
    bool  _fastClickingIsDisabled;
    struct RetainPtr<UIFindInteraction> { 
        void *m_ptr; 
    }  _findInteraction;
    bool  _findInteractionEnabled;
    unsigned long long  _focusPreservationCount;
    struct RetainPtr<WKFullScreenWindowController> { 
        void *m_ptr; 
    }  _fullScreenWindowController;
    struct unique_ptr<WebKit::ViewGestureController, std::default_delete<WebKit::ViewGestureController>> { 
        struct __compressed_pair<WebKit::ViewGestureController *, std::default_delete<WebKit::ViewGestureController>> { 
            struct ViewGestureController {} *__value_; 
        } __ptr_; 
    }  _gestureController;
    bool  _haveSetObscuredInsets;
    bool  _haveSetUnobscuredSafeAreaInsets;
    struct unique_ptr<WebKit::IconLoadingDelegate, std::default_delete<WebKit::IconLoadingDelegate>> { 
        struct __compressed_pair<WebKit::IconLoadingDelegate *, std::default_delete<WebKit::IconLoadingDelegate>> { 
            struct IconLoadingDelegate {} *__value_; 
        } __ptr_; 
    }  _iconLoadingDelegate;
    struct WeakObjCPtr<id<_WKInputDelegate>> { 
        id m_weakReference; 
    }  _inputDelegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputViewBoundsInWindow;
    long long  _interfaceOrientationOverride;
    bool  _isChangingObscuredInsetsInteractively;
    double  _lastAdjustmentForScroller;
    struct optional<CGSize> { 
        union { 
            BOOL __null_state_; 
            struct CGSize { 
                double width; 
                double height; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _maximumUnobscuredSizeOverride;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _maximumViewportInset;
    struct optional<CGSize> { 
        union { 
            BOOL __null_state_; 
            struct CGSize { 
                double width; 
                double height; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _minimumUnobscuredSizeOverride;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _minimumViewportInset;
    struct unique_ptr<WebKit::NavigationState, std::default_delete<WebKit::NavigationState>> { 
        struct __compressed_pair<WebKit::NavigationState *, std::default_delete<WebKit::NavigationState>> { 
            struct NavigationState {} *__value_; 
        } __ptr_; 
    }  _navigationState;
    bool  _needsToPresentLockdownModeMessage;
    unsigned long long  _obscuredInsetEdgesAffectedBySafeArea;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _obscuredInsets;
    struct RectEdges<float> { 
        struct array<float, 4UL> { 
            float __elems_[4]; 
        } m_sides; 
    }  _obscuredInsetsWhenSaved;
    unsigned long long  _observedRenderingProgressEvents;
    bool  _overridesInterfaceOrientation;
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> { 
        struct WebPageProxy {} *m_ptr; 
    }  _page;
    struct RetainPtr<WKPasswordView> { 
        void *m_ptr; 
    }  _passwordView;
    struct PerWebProcessState { 
        double viewportMetaTagWidth; 
        double initialScaleFactor; 
        bool hasCommittedLoadForMainFrame; 
        bool needsResetViewStateAfterCommitLoadForMainFrame; 
        int dynamicViewportUpdateMode; 
        bool waitingForEndAnimatedResize; 
        bool waitingForCommitAfterAnimatedResize; 
        double animatedResizeOriginalContentWidth; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } animatedResizeOldBounds; 
        struct optional<WebCore::FloatPoint> { 
            union { 
                BOOL __null_state_; 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } scrollOffsetToRestore; 
        struct optional<WebCore::FloatPoint> { 
            union { 
                BOOL __null_state_; 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } unobscuredCenterToRestore; 
        struct Color { 
            unsigned long long m_colorAndFlags; 
        } scrollViewBackgroundColor; 
        bool invokingUIScrollViewDelegateCallback; 
        bool didDeferUpdateVisibleContentRectsForUIScrollViewDelegateCallback; 
        bool didDeferUpdateVisibleContentRectsForAnyReason; 
        bool didDeferUpdateVisibleContentRectsForUnstableScrollView; 
        bool currentlyAdjustingScrollViewInsetsForKeyboard; 
        bool hasScheduledVisibleRectUpdate; 
        bool commitDidRestoreScrollPosition; 
        bool avoidsUnsafeArea; 
        bool viewportMetaTagWidthWasExplicit; 
        bool viewportMetaTagCameFromImageDocument; 
        struct optional<WebCore::FloatSize> { 
            union { 
                BOOL __null_state_; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } lastSentViewLayoutSize; 
        struct optional<int> { 
            union { 
                BOOL __null_state_; 
                int __val_; 
            } ; 
            bool __engaged_; 
        } lastSentDeviceOrientation; 
        struct optional<int> { 
            union { 
                BOOL __null_state_; 
                int __val_; 
            } ; 
            bool __engaged_; 
        } lastSentOrientationForMediaCapture; 
        struct optional<double> { 
            union { 
                BOOL __null_state_; 
                double __val_; 
            } ; 
            bool __engaged_; 
        } lastSentMinimumEffectiveDeviceWidth; 
        struct optional<CGRect> { 
            union { 
                BOOL __null_state_; 
                struct CGRect { 
                    struct CGPoint { 
                        double x; 
                        double y; 
                    } origin; 
                    struct CGSize { 
                        double width; 
                        double height; 
                    } size; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } frozenVisibleContentRect; 
        struct optional<CGRect> { 
            union { 
                BOOL __null_state_; 
                struct CGRect { 
                    struct CGPoint { 
                        double x; 
                        double y; 
                    } origin; 
                    struct CGSize { 
                        double width; 
                        double height; 
                    } size; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } frozenUnobscuredContentRect; 
        struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
            unsigned long long m_identifier; 
        } firstPaintAfterCommitLoadTransactionID; 
        struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
            unsigned long long m_identifier; 
        } lastTransactionID; 
        struct optional<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>> { 
            union { 
                BOOL __null_state_; 
                struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
                    unsigned long long m_identifier; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } firstTransactionIDAfterPageRestore; 
        struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>> { 
            struct ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { 
                unsigned long long m_identifier; 
            } m_object; 
            struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { 
                unsigned long long m_identifier; 
            } m_processIdentifier; 
        } pendingFindLayerID; 
        struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>> { 
            struct ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { 
                unsigned long long m_identifier; 
            } m_object; 
            struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { 
                unsigned long long m_identifier; 
            } m_processIdentifier; 
        } committedFindLayerID; 
        struct optional<LiveResizeParameters> { 
            union { 
                BOOL __null_state_; 
                struct LiveResizeParameters { 
                    double viewWidth; 
                    struct CGPoint { 
                        double x; 
                        double y; 
                    } initialScrollPosition; 
                } __val_; 
            } ; 
            bool __engaged_; 
        } liveResizeParameters; 
    }  _perProcessState;
    struct RetainPtr<_WKRemoteObjectRegistry> { 
        void *m_ptr; 
    }  _remoteObjectRegistry;
    struct CATransform3D { 
        double m11; 
        double m12; 
        double m13; 
        double m14; 
        double m21; 
        double m22; 
        double m23; 
        double m24; 
        double m31; 
        double m32; 
        double m33; 
        double m34; 
        double m41; 
        double m42; 
        double m43; 
        double m44; 
    }  _resizeAnimationTransformAdjustments;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _resizeAnimationView;
    struct Vector<WTF::RetainPtr<id<_UIInvalidatable>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { 
        void *m_buffer; 
        unsigned int m_capacity; 
        unsigned int m_size; 
    }  _resizeAssertions;
    struct optional<bool> { 
        union { 
            BOOL __null_state_; 
            bool __val_; 
        } ; 
        bool __engaged_; 
    }  _resolutionForShareSheetImmediateCompletionForTesting;
    struct unique_ptr<WebKit::ResourceLoadDelegate, std::default_delete<WebKit::ResourceLoadDelegate>> { 
        struct __compressed_pair<WebKit::ResourceLoadDelegate *, std::default_delete<WebKit::ResourceLoadDelegate>> { 
            struct ResourceLoadDelegate {} *__value_; 
        } __ptr_; 
    }  _resourceLoadDelegate;
    struct RetainPtr<WKSafeBrowsingWarning> { 
        void *m_ptr; 
    }  _safeBrowsingWarning;
    double  _scaleToRestore;
    struct RetainPtr<WKScrollView> { 
        void *m_ptr; 
    }  _scrollView;
    struct RetainPtr<NSArray<NSNumber *>> { 
        void *m_ptr; 
    }  _scrollViewDefaultAllowedTouchTypes;
    unsigned long long  _selectionAttributes;
    struct RetainPtr<NSMutableArray> { 
        void *m_ptr; 
    }  _stableStatePresentationUpdateCallbacks;
    unsigned long long  _supportedInterfaceOrientations;
    struct WeakObjCPtr<id<_WKTextManipulationDelegate>> { 
        id m_weakReference; 
    }  _textManipulationDelegate;
    struct optional<WTF::MonotonicTime> { 
        union { 
            BOOL __null_state_; 
            struct MonotonicTime { 
                double m_value; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _timeOfFirstVisibleContentRectUpdateWithPendingCommit;
    struct MonotonicTime { 
        double m_value; 
    }  _timeOfLastVisibleContentRectUpdate;
    struct MonotonicTime { 
        double m_value; 
    }  _timeOfRequestForVisibleContentRectUpdate;
    double  _totalScrollViewBottomInsetAdjustmentForKeyboard;
    struct unique_ptr<WebKit::UIDelegate, std::default_delete<WebKit::UIDelegate>> { 
        struct __compressed_pair<WebKit::UIDelegate *, std::default_delete<WebKit::UIDelegate>> { 
            struct UIDelegate {} *__value_; 
        } __ptr_; 
    }  _uiDelegate;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _unobscuredSafeAreaInsets;
    bool  _usePlatformFindUI;
    struct optional<CGSize> { 
        union { 
            BOOL __null_state_; 
            struct CGSize { 
                double width; 
                double height; 
            } __val_; 
        } ; 
        bool __engaged_; 
    }  _viewLayoutSizeOverride;
    struct OptionSet<WebKit::ViewStabilityFlag> { 
        unsigned char m_storage; 
    }  _viewStabilityWhenVisibleContentRectUpdateScheduled;
    struct Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^v"m_capacity"I"m_size"I {}  _visibleContentRectUpdateCallbacks;
    unsigned long long  _wheelEventCountInCurrentScrollGesture;
}

@property (nonatomic) <WKUIDelegate> *UIDelegate;
@property (nonatomic, readonly, copy) NSURL *URL;
@property (nonatomic, readonly) NSString *_MIMEType;
@property (setter=_setAddsVisitedLinks:, nonatomic) bool _addsVisitedLinks;
@property (nonatomic, readonly) bool _allowsAnyAnimationToPlay;
@property (nonatomic, readonly) bool _allowsDoubleTapGestures;
@property (getter=_allowsMediaDocumentInlinePlayback, setter=_setAllowsMediaDocumentInlinePlayback:, nonatomic) bool _allowsMediaDocumentInlinePlayback;
@property (setter=_setAllowsRemoteInspection:, nonatomic) bool _allowsRemoteInspection;
@property (setter=_setAllowsViewportShrinkToFit:, nonatomic) bool _allowsViewportShrinkToFit;
@property (getter=_isAnimatingDragCancel, nonatomic, readonly) bool _animatingDragCancel;
@property (setter=_setAppHighlightDelegate:, nonatomic) <_WKAppHighlightDelegate> *_appHighlightDelegate;
@property (setter=_setApplicationNameForUserAgent:, copy) NSString *_applicationNameForUserAgent;
@property (setter=_setBackgroundExtendsBeyondPage:, nonatomic) bool _backgroundExtendsBeyondPage;
@property (nonatomic, readonly) NSString *_caLayerTreeAsText;
@property (nonatomic, readonly) bool _canTogglePictureInPicture;
@property (setter=_setCanUseCredentialStorage:, nonatomic) bool _canUseCredentialStorage;
@property (nonatomic, readonly) NSArray *_certificateChain;
@property (nonatomic, readonly) NSURL *_committedURL;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _computedObscuredInset;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _computedUnobscuredSafeAreaInset;
@property (nonatomic, readonly) WKWebViewContentProviderRegistry *_contentProviderRegistry;
@property (nonatomic, readonly) bool _contentViewIsFirstResponder;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _contentVisibleRect;
@property (nonatomic, readonly) unsigned long long _countOfUpdatesWithLayerChanges;
@property (setter=_setCustomUserAgent:, copy) NSString *_customUserAgent;
@property (nonatomic, readonly) NSData *_dataForDisplayedPDF;
@property (nonatomic, readonly) bool _deferrableUserScriptsNeedNotification;
@property (nonatomic, readonly) int _deviceOrientationIgnoringOverrides;
@property (setter=_setDiagnosticLoggingDelegate:, nonatomic) <_WKDiagnosticLoggingDelegate> *_diagnosticLoggingDelegate;
@property (nonatomic, readonly) long long _displayCaptureState;
@property (nonatomic, readonly) unsigned long long _displayCaptureSurfaces;
@property (getter=_isDisplayingPDF, nonatomic, readonly) bool _displayingPDF;
@property (getter=_isDisplayingStandaloneImageDocument, nonatomic, readonly) bool _displayingStandaloneImageDocument;
@property (getter=_isDisplayingStandaloneMediaDocument, nonatomic, readonly) bool _displayingStandaloneMediaDocument;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _dragCaretRect;
@property (setter=_setDragInteractionPolicy:, nonatomic) unsigned long long _dragInteractionPolicy;
@property (getter=_isEditable, setter=_setEditable:, nonatomic) bool _editable;
@property (nonatomic, readonly) UIView *_enclosingViewForExposedRectComputation;
@property (setter=_setEphemeralUIEventAttribution:, nonatomic, copy) UIEventAttribution *_ephemeralUIEventAttribution;
@property (setter=_setFindDelegate:, nonatomic) <_WKFindDelegate> *_findDelegate;
@property (nonatomic, readonly) _UIFindInteraction *_findInteraction;
@property (setter=_setFindInteractionEnabled:, nonatomic) bool _findInteractionEnabled;
@property (setter=_setFixedLayoutSize:, nonatomic) struct CGSize { double x1; double x2; } _fixedLayoutSize;
@property (setter=_setFullscreenDelegate:, nonatomic) <_WKFullscreenDelegate> *_fullscreenDelegate;
@property (setter=_setGapBetweenPages:, nonatomic) double _gapBetweenPages;
@property (nonatomic, readonly) int _gpuProcessIdentifier;
@property (nonatomic, readonly) WKBrowsingContextHandle *_handle;
@property (nonatomic, readonly) bool _hasServiceWorkerBackgroundActivityForTesting;
@property (nonatomic, readonly) bool _hasServiceWorkerForegroundActivityForTesting;
@property (nonatomic, readonly) bool _haveSetObscuredInsets;
@property (setter=_setHistoryDelegate:, nonatomic) <WKHistoryDelegatePrivate> *_historyDelegate;
@property (setter=_setIconLoadingDelegate:, nonatomic) <_WKIconLoadingDelegate> *_iconLoadingDelegate;
@property (nonatomic, readonly) UIGestureRecognizer *_imageAnalysisGestureRecognizer;
@property (setter=_setInputDelegate:, nonatomic) <_WKInputDelegate> *_inputDelegate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _inputViewBoundsInWindow;
@property (nonatomic, readonly) _WKInspector *_inspector;
@property (setter=_setInterfaceOrientationOverride:, nonatomic) long long _interfaceOrientationOverride;
@property (nonatomic, readonly) bool _isBackground;
@property (nonatomic, readonly) bool _isBeingInspected;
@property (nonatomic, readonly) bool _isInFullscreen;
@property (nonatomic, readonly) bool _isPictureInPictureActive;
@property (nonatomic, readonly) bool _isWindowResizingEnabled;
@property (nonatomic, readonly) CALayer *_layerForFindOverlay;
@property (setter=_setLayoutMode:, nonatomic) unsigned long long _layoutMode;
@property (nonatomic, readonly) _WKFrameHandle *_mainFrame;
@property (nonatomic, readonly) NSURL *_mainFrameURL;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _maximumUnobscuredSizeOverride;
@property (setter=_setMediaCaptureEnabled:, nonatomic) bool _mediaCaptureEnabled;
@property (setter=_setMediaCaptureReportingDelayForTesting:, nonatomic) double _mediaCaptureReportingDelayForTesting;
@property (nonatomic, readonly) unsigned long long _mediaCaptureState;
@property (nonatomic, readonly) unsigned long long _mediaMutedState;
@property (setter=_setMinimumEffectiveDeviceWidth:, nonatomic) double _minimumEffectiveDeviceWidth;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverride;
@property (nonatomic, readonly) bool _negotiatedLegacyTLS;
@property (nonatomic, readonly) int _networkProcessIdentifier;
@property (nonatomic, readonly) bool _networkRequestsInProgress;
@property (setter=_setObscuredInsetEdgesAffectedBySafeArea:, nonatomic) unsigned long long _obscuredInsetEdgesAffectedBySafeArea;
@property (setter=_setObscuredInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _obscuredInsets;
@property (setter=_setObservedRenderingProgressEvents:, nonatomic) unsigned long long _observedRenderingProgressEvents;
@property (setter=_setOverrideDeviceScaleFactor:, nonatomic) double _overrideDeviceScaleFactor;
@property (readonly) unsigned long long _pageCount;
@property (nonatomic, readonly) UIColor *_pageExtendedBackgroundColor;
@property (setter=_setPageLength:, nonatomic) double _pageLength;
@property (setter=_setPageZoomFactor:, nonatomic) double _pageZoomFactor;
@property (setter=_setPaginationBehavesLikeColumns:, nonatomic) bool _paginationBehavesLikeColumns;
@property (setter=_setPaginationLineGridEnabled:, nonatomic) bool _paginationLineGridEnabled;
@property (setter=_setPaginationMode:, nonatomic) long long _paginationMode;
@property (nonatomic, readonly) WKPasswordView *_passwordView;
@property (getter=_isPlayingAudio, nonatomic, readonly) bool _playingAudio;
@property (nonatomic, readonly) <_WKWebViewPrintProvider> *_printProvider;
@property (nonatomic, readonly) int _provisionalWebProcessIdentifier;
@property (setter=_setRemoteInspectionNameOverride:, nonatomic, copy) NSString *_remoteInspectionNameOverride;
@property (nonatomic, readonly) id _remoteObjectRegistry;
@property (nonatomic, readonly) NSURL *_resourceDirectoryURL;
@property (setter=_setResourceLoadDelegate:, nonatomic) <_WKResourceLoadDelegate> *_resourceLoadDelegate;
@property (getter=_isRetainingActiveFocusedState, nonatomic, readonly) bool _retainingActiveFocusedState;
@property (nonatomic, readonly) bool _safeAreaShouldAffectObscuredInsets;
@property (nonatomic, readonly) UIView *_safeBrowsingWarning;
@property (nonatomic, readonly) UIColor *_sampledPageTopColor;
@property (nonatomic, readonly) NSArray *_scrollPerformanceData;
@property (setter=_setScrollPerformanceDataCollectionEnabled:, nonatomic) bool _scrollPerformanceDataCollectionEnabled;
@property (nonatomic, readonly) NSString *_scrollingTreeAsText;
@property (setter=_setScrollingUpdatesDisabledForTesting:, nonatomic) bool _scrollingUpdatesDisabledForTesting;
@property (nonatomic, readonly) unsigned long long _selectionAttributes;
@property (nonatomic, readonly) long long _selectionGranularity;
@property (nonatomic, readonly) _WKSessionState *_sessionState;
@property (nonatomic, readonly) NSData *_sessionStateData;
@property (nonatomic, readonly) UIView *_sf_effectiveViewToLayOut;
@property (setter=_sf_setSecurityInfo:, nonatomic, retain) _SFSecurityInfo *_sf_securityInfo;
@property (nonatomic, readonly) NSString *_sf_suggestedFilename;
@property (nonatomic, readonly) bool _shouldAvoidResizingWhenInputViewBoundsChange;
@property (nonatomic, readonly) bool _shouldAvoidSecurityHeuristicScoreUpdates;
@property (getter=_isShowingNavigationGestureSnapshot, nonatomic, readonly) bool _showingNavigationGestureSnapshot;
@property (nonatomic, readonly) UITapGestureRecognizer *_singleTapGestureRecognizer;
@property (nonatomic, readonly) NSNumber *_stableStateOverride;
@property (nonatomic, readonly) NSString *_suggestedFilenameForDisplayedPDF;
@property (nonatomic, readonly) bool _supportsTextZoom;
@property (nonatomic, readonly) long long _systemAudioCaptureState;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _tapHighlightViewRect;
@property (setter=_setTextManipulationDelegate:, nonatomic) <_WKTextManipulationDelegate> *_textManipulationDelegate;
@property (setter=_setTextZoomFactor:, nonatomic) double _textZoomFactor;
@property (nonatomic, readonly) UIColor *_themeColor;
@property (setter=_setUIEventAttribution:, nonatomic, copy) UIEventAttribution *_uiEventAttribution;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _uiTextCaretRect;
@property (nonatomic, readonly) NSString *_uiViewTreeAsText;
@property (setter=_setUnobscuredSafeAreaInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _unobscuredSafeAreaInsets;
@property (nonatomic, readonly) NSURL *_unreachableURL;
@property (nonatomic, readonly) NSString *_userAgent;
@property (setter=_setUserContentExtensionsEnabled:, nonatomic) bool _userContentExtensionsEnabled;
@property (setter=_setViewScale:, nonatomic) double _viewScale;
@property (setter=_setViewportSizeForCSSViewportUnits:, nonatomic) struct CGSize { double x1; double x2; } _viewportSizeForCSSViewportUnits;
@property (nonatomic, readonly) bool _wasPrivateRelayed;
@property (nonatomic, readonly) int _webProcessIdentifier;
@property (nonatomic, readonly) bool _webProcessIsResponsive;
@property (nonatomic, readonly) _WKWebViewPrintFormatter *_webViewPrintFormatter;
@property (nonatomic, readonly) bool _wirelessVideoPlaybackDisabled;
@property (nonatomic) bool allowsBackForwardNavigationGestures;
@property (nonatomic) bool allowsLinkPreview;
@property (nonatomic, readonly) WKBackForwardList *backForwardList;
@property (nonatomic, readonly) long long cameraCaptureState;
@property (nonatomic, readonly) bool canGoBack;
@property (nonatomic, readonly) bool canGoForward;
@property (nonatomic, readonly, copy) NSArray *certificateChain;
@property (nonatomic, readonly, copy) WKWebViewConfiguration *configuration;
@property (nonatomic, copy) NSString *customUserAgent;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, readonly) UIFindInteraction *findInteraction;
@property (getter=isFindInteractionEnabled, nonatomic) bool findInteractionEnabled;
@property (nonatomic, readonly) NSString *formInputLabel;
@property (nonatomic, readonly) long long fullscreenState;
@property (nonatomic, readonly) bool hasOnlySecureContent;
@property (readonly) unsigned long long hash;
@property (getter=isInspectable, nonatomic) bool inspectable;
@property (nonatomic, copy) id interactionState;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } maximumViewportInset;
@property (nonatomic, copy) NSString *mediaType;
@property (nonatomic, readonly) long long microphoneCaptureState;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } minimumViewportInset;
@property (nonatomic) <WKNavigationDelegate> *navigationDelegate;
@property (nonatomic) double pageZoom;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) NSString *selectFormPopoverTitle;
@property (readonly) UITextRange *selectedTextRange;
@property (readonly) <NSCoding><NSCopying> *selectedTextSearchDocument;
@property (nonatomic, readonly) struct __SecTrust { }*serverTrust;
@property (setter=sf_setDisplayedWebViewGeometry:, nonatomic) struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct UIEdgeInsets { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; } x2; struct UIEdgeInsets { double x_3_1_1; double x_3_1_2; double x_3_1_3; double x_3_1_4; } x3; struct SFScrollIndicatorInsets { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_4_1_1; struct UIEdgeInsets { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; } x_4_1_2; } x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; struct UIEdgeInsets { double x_7_1_1; double x_7_1_2; double x_7_1_3; double x_7_1_4; } x7; bool x8; double x9; } sf_displayedWebViewGeometry;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsTextReplacement;
@property (nonatomic, readonly) NSString *textContentTypeForTesting;
@property (nonatomic, readonly) UIColor *themeColor;
@property (nonatomic, readonly, copy) NSString *title;
@property (nonatomic, copy) UIColor *underPageBackgroundColor;
@property (setter=webui_setLastGeneratedPasswordForCurrentBackForwardItem:, nonatomic, copy) NSString *webui_lastGeneratedPasswordForCurrentBackForwardItem;
@property (nonatomic, readonly) UIViewController *webui_presentingViewController;
@property (nonatomic, readonly) bool webui_privateBrowsingEnabled;

// Image: /System/Library/Frameworks/WebKit.framework/WebKit

+ (void)_clearApplicationBundleIdentifierTestingOverride;
+ (void)_clearLockdownModeWarningNeeded;
+ (id)_confirmMalwareSentinel;
+ (bool)_handlesSafeBrowsing;
+ (void)_permissionChanged:(id)arg1 forOrigin:(id)arg2;
+ (void)_resetPresentLockdownModeMessage;
+ (void)_setApplicationBundleIdentifier:(id)arg1;
+ (void)_setStringForFind:(id)arg1;
+ (id)_stringForFind;
+ (id)_visitUnsafeWebsiteSentinel;
+ (bool)_willUpgradeToHTTPS:(id)arg1;
+ (bool)automaticallyNotifiesObserversOfUnderPageBackgroundColor;
+ (bool)handlesURLScheme:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)UIDelegate;
- (id)URL;
- (id)_MIMEType;
- (void)_accessibilityClearSelection;
- (void)_accessibilityDidGetSpeakSelectionContent:(id)arg1;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_accessibilityRetrieveSpeakSelectionContent;
- (void)_accessibilitySettingsDidChange:(id)arg1;
- (void)_accessibilityStoreSelection;
- (void)_acquireResizeAssertionForReason:(id)arg1;
- (void)_addAppHighlight;
- (void)_addAppHighlightInNewGroup:(bool)arg1 originatedInApp:(bool)arg2;
- (void)_addEventAttributionWithSourceID:(unsigned char)arg1 destinationURL:(id)arg2 sourceDescription:(id)arg3 purchaser:(id)arg4 reportEndpoint:(id)arg5 optionalNonce:(id)arg6 applicationBundleID:(id)arg7 ephemeral:(bool)arg8;
- (void)_addLayerForFindOverlay;
- (void)_addShortcut:(id)arg1;
- (void)_addUpdateVisibleContentRectPreCommitHandler;
- (bool)_addsVisitedLinks;
- (float)_adjustScrollRectToAvoidHighlightOverlay:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_adjustSelectionWithDelta:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)_alignCenter:(id)arg1;
- (void)_alignJustified:(id)arg1;
- (void)_alignLeft:(id)arg1;
- (void)_alignRight:(id)arg1;
- (bool)_allMediaPresentationsClosed;
- (bool)_allowAnimationControls;
- (bool)_allowsAnyAnimationToPlay;
- (bool)_allowsDoubleTapGestures;
- (bool)_allowsMediaDocumentInlinePlayback;
- (bool)_allowsRemoteInspection;
- (bool)_allowsViewportShrinkToFit;
- (id)_appHighlightDelegate;
- (void)_appPrivacyReportTestingData:(id /* block */)arg1;
- (id)_applicationNameForUserAgent;
- (id)_attachmentForIdentifier:(id)arg1;
- (int)_audioRoutingArbitrationStatus;
- (double)_audioRoutingArbitrationUpdateTime;
- (bool)_backgroundExtendsBeyondPage;
- (void)_becomeFirstResponderWithSelectionMovingForward:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_beginAnimatedResizeWithUpdates:(id /* block */)arg1;
- (void)_beginAutomaticLiveResizeIfNeeded;
- (bool)_beginBackSwipeForTesting;
- (void)_beginInteractiveObscuredInsetsChange;
- (void)_beginLiveResize;
- (id)_caLayerTreeAsText;
- (void)_callAsyncJavaScript:(id)arg1 arguments:(id)arg2 inFrame:(id)arg3 inContentWorld:(id)arg4 completionHandler:(id /* block */)arg5;
- (bool)_canTogglePictureInPicture;
- (bool)_canUseCredentialStorage;
- (void)_cancelAnimatedResize;
- (id)_certificateChain;
- (void)_changeListType:(id)arg1;
- (void)_clearAppPrivacyReportTestingData:(id /* block */)arg1;
- (void)_clearBackForwardCache;
- (void)_clearInterfaceOrientationOverride;
- (void)_clearOverrideLayoutParameters;
- (void)_clearSafeBrowsingWarning;
- (void)_clearSafeBrowsingWarningIfForMainFrameNavigation;
- (void)_clearServiceWorkerEntitlementOverride:(id /* block */)arg1;
- (void)_close;
- (void)_closeAllMediaPresentations;
- (id)_committedURL;
- (bool)_completeBackSwipeForTesting;
- (void)_completeTextManipulation:(id)arg1 completion:(id /* block */)arg2;
- (void)_completeTextManipulationForItems:(id)arg1 completion:(id /* block */)arg2;
- (void)_computePagesForPrinting:(id)arg1 completionHandler:(id /* block */)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedContentInset;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedObscuredInset;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedObscuredInsetForSafeBrowsingWarning;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedUnobscuredSafeAreaInset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentBoundsExtendedForRubberbandingWithScale:(double)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsetsFromSystemMinimumLayoutMargins;
- (struct CGPoint { double x1; double x2; })_contentOffsetAdjustedForObscuredInset:(struct CGPoint { double x1; double x2; })arg1;
- (id)_contentProviderRegistry;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectForUserInteraction;
- (id)_contentSizeCategory;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (bool)_contentViewIsFirstResponder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentVisibleRect;
- (double)_contentZoomScale;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromContentsToView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromViewToContents:(struct CGPoint { double x1; double x2; })arg1;
- (void)_couldNotRestorePageState;
- (unsigned long long)_countOfUpdatesWithLayerChanges;
- (void)_countStringMatches:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (void)_createMediaSessionCoordinatorForTesting:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_currentContentView;
- (id)_customUserAgent;
- (id)_dataDetectionResults;
- (id)_dataForDisplayedPDF;
- (void)_dataTaskWithRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_decreaseListLevel:(id)arg1;
- (void)_decrementFocusPreservationCount;
- (bool)_deferrableUserScriptsNeedNotification;
- (void)_define:(id)arg1;
- (void)_denyNextUserMediaRequest;
- (void)_destroyEndLiveResizeObserver;
- (void)_destroyResizeAnimationView;
- (void)_detectDataWithTypes:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (int)_deviceOrientationIgnoringOverrides;
- (id)_diagnosticLoggingDelegate;
- (void)_didChangeEditorState;
- (void)_didCommitLayerTree:(const void*)arg1;
- (void)_didCommitLayerTreeDuringAnimatedResize:(const void*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didCompleteAnimatedResize;
- (void)_didDisableBrowserExtensions:(id)arg1;
- (void)_didDismissContactPicker;
- (void)_didDismissContextMenu;
- (void)_didEnableBrowserExtensions:(id)arg1;
- (void)_didFailNavigation:(struct Navigation { }*)arg1;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const void*)arg1 data:(id)arg2;
- (void)_didFinishNavigation:(struct Navigation { }*)arg1;
- (void)_didFinishScrolling:(id)arg1;
- (void)_didFinishTextInteractionInTextInputContext:(id)arg1;
- (void)_didInsertAttachment:(void*)arg1 withSource:(id)arg2;
- (void)_didInvalidateDataForAttachment:(void*)arg1;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_didLoadAppInitiatedRequest:(id /* block */)arg1;
- (void)_didLoadNonAppInitiatedRequest:(id /* block */)arg1;
- (void)_didPresentContactPicker;
- (void)_didRelaunchProcess;
- (void)_didRemoveAttachment:(void*)arg1;
- (void)_didRequestPasswordForDocument;
- (void)_didSameDocumentNavigationForMainFrame:(unsigned char)arg1;
- (void)_didScroll;
- (void)_didShowContextMenu;
- (void)_didStartProvisionalLoadForMainFrame;
- (void)_didStopDeferringGeometryUpdates;
- (void)_didStopRequestingPasswordForDocument;
- (void)_disableBackForwardSnapshotVolatilityForTesting;
- (void)_disableURLSchemeCheckInDataDetectors;
- (void)_dismissContactPickerWithContacts:(id)arg1;
- (void)_dismissFilePicker;
- (void)_dispatchSetDeviceOrientation:(int)arg1;
- (void)_dispatchSetOrientationForMediaCapture:(int)arg1;
- (void)_dispatchSetViewLayoutSize:(struct FloatSize { float x1; float x2; })arg1;
- (long long)_displayCaptureState;
- (unsigned long long)_displayCaptureSurfaces;
- (void)_doAfterActivityStateUpdate:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForAnimatedResizeForTesting:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForPainting:(id /* block */)arg1;
- (void)_doAfterNextStablePresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextVisibleContentRectAndPresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextVisibleContentRectUpdate:(id /* block */)arg1;
- (void)_doAfterProcessingAllPendingMouseEvents:(id /* block */)arg1;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_dragCaretRect;
- (unsigned long long)_dragInteractionPolicy;
- (void)_dumpPrivateClickMeasurement:(id /* block */)arg1;
- (void)_dynamicUserInterfaceTraitDidChange;
- (bool)_effectiveAppearanceIsDark;
- (unsigned long long)_effectiveObscuredInsetEdgesAffectedBySafeArea;
- (bool)_effectiveUserInterfaceLevelIsElevated;
- (void)_enclosingScrollerScrollingEnded:(id)arg1;
- (id)_enclosingViewForExposedRectComputation;
- (void)_endAnimatedResize;
- (void)_endInteractiveObscuredInsetsChange;
- (void)_endLiveResize;
- (void)_enhancedWindowingToggled:(id)arg1;
- (void)_ensureResizeAnimationView;
- (id)_ephemeralUIEventAttribution;
- (void)_evaluateJavaScript:(id)arg1 asAsyncFunction:(bool)arg2 withSourceURL:(id)arg3 withArguments:(id)arg4 forceUserGesture:(bool)arg5 inFrame:(id)arg6 inWorld:(id)arg7 completionHandler:(id /* block */)arg8;
- (void)_evaluateJavaScript:(id)arg1 inFrame:(id)arg2 inContentWorld:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_evaluateJavaScript:(id)arg1 withSourceURL:(id)arg2 inFrame:(id)arg3 inContentWorld:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_evaluateJavaScriptWithoutUserGesture:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_executeEditCommand:(id)arg1 argument:(id)arg2 completion:(id /* block */)arg3;
- (id)_filePickerAcceptedTypeIdentifiers;
- (id)_findDelegate;
- (id)_findInteraction;
- (bool)_findInteractionEnabled;
- (void)_findSelected:(id)arg1;
- (void)_findString:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (void)_firePresentationUpdateForPendingStableStatePresentationCallbacks;
- (struct CGSize { double x1; double x2; })_fixedLayoutSize;
- (void)_focusTextInputContext:(id)arg1 placeCaretAt:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (id)_formDelegate;
- (void)_frameOrBoundsMayHaveChanged;
- (void)_frameOrBoundsWillChange;
- (void)_frameTrees:(id /* block */)arg1;
- (void)_frames:(id /* block */)arg1;
- (id)_fullScreenPlaceholderView;
- (id)_fullscreenDelegate;
- (double)_gapBetweenPages;
- (void)_getApplicationManifestWithCompletionHandler:(id /* block */)arg1;
- (void)_getContentsAsAttributedStringWithCompletionHandler:(id /* block */)arg1;
- (void)_getContentsAsStringWithCompletionHandler:(id /* block */)arg1;
- (void)_getContentsAsStringWithCompletionHandlerKeepIPCConnectionAliveForTesting:(id /* block */)arg1;
- (void)_getContentsOfAllFramesAsStringWithCompletionHandler:(id /* block */)arg1;
- (void)_getMainResourceDataWithCompletionHandler:(id /* block */)arg1;
- (void)_getPDFFirstPageSizeInFrame:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_getProcessDisplayNameWithCompletionHandler:(id /* block */)arg1;
- (void)_getTextFragmentMatchWithCompletionHandler:(id /* block */)arg1;
- (void)_getWebArchiveDataWithCompletionHandler:(id /* block */)arg1;
- (int)_gpuProcessIdentifier;
- (void)_gpuToWebProcessConnectionCountForTesting:(id /* block */)arg1;
- (void)_grantAccessToAssetServices;
- (id)_handle;
- (void)_handleKeyUIEvent:(id)arg1;
- (bool)_hasResizeAssertion;
- (bool)_hasServiceWorkerBackgroundActivityForTesting;
- (bool)_hasServiceWorkerForegroundActivityForTesting;
- (bool)_hasSleepDisabler;
- (bool)_haveSetObscuredInsets;
- (void)_hideContentUntilNextUpdate;
- (void)_hideFindUI;
- (void)_hidePasswordView;
- (id)_historyDelegate;
- (id)_iconLoadingDelegate;
- (id)_imageAnalysisGestureRecognizer;
- (void)_increaseListLevel:(id)arg1;
- (void)_incrementFocusPreservationCount;
- (void)_indent:(id)arg1;
- (struct CGPoint { double x1; double x2; })_initialContentOffsetForScrollView;
- (double)_initialScaleFactor;
- (void)_initializeWithConfiguration:(id)arg1;
- (id)_inputDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_inputViewBoundsInWindow;
- (id)_insertAttachmentWithFileWrapper:(id)arg1 contentType:(id)arg2 completion:(id /* block */)arg3;
- (id)_insertAttachmentWithFileWrapper:(id)arg1 contentType:(id)arg2 options:(id)arg3 completion:(id /* block */)arg4;
- (id)_insertAttachmentWithFilename:(id)arg1 contentType:(id)arg2 data:(id)arg3 options:(id)arg4 completion:(id /* block */)arg5;
- (void)_insertNestedOrderedList:(id)arg1;
- (void)_insertNestedUnorderedList:(id)arg1;
- (void)_insertOrderedList:(id)arg1;
- (void)_insertUnorderedList:(id)arg1;
- (id)_insertionPointColor;
- (id)_inspector;
- (long long)_interfaceOrientationOverride;
- (void)_internalDoAfterNextPresentationUpdate:(id /* block */)arg1 withoutWaitingForPainting:(bool)arg2 withoutWaitingForAnimatedResize:(bool)arg3;
- (void)_invalidateResizeAssertions;
- (bool)_isAnimatingDragCancel;
- (bool)_isBackground;
- (bool)_isBeingInspected;
- (bool)_isClosed;
- (bool)_isDisplayingPDF;
- (bool)_isDisplayingStandaloneImageDocument;
- (bool)_isDisplayingStandaloneMediaDocument;
- (bool)_isEditable;
- (void)_isForcedIntoAppBoundMode:(id /* block */)arg1;
- (bool)_isInFullscreen;
- (void)_isJITEnabled:(id /* block */)arg1;
- (void)_isLayerTreeFrozenForTesting:(id /* block */)arg1;
- (void)_isNavigatingToAppBoundDomain:(id /* block */)arg1;
- (bool)_isNavigationSwipeGestureRecognizer:(id)arg1;
- (bool)_isPictureInPictureActive;
- (bool)_isPlayingAudio;
- (bool)_isRetainingActiveFocusedState;
- (bool)_isShowingDataListSuggestions;
- (bool)_isShowingNavigationGestureSnapshot;
- (bool)_isShowingVideoPictureInPicture;
- (bool)_isValid;
- (bool)_isWindowResizingEnabled;
- (void)_keyboardChangedWithInfo:(id)arg1 adjustScrollView:(bool)arg2;
- (void)_keyboardDidChangeFrame:(id)arg1;
- (void)_keyboardDidShow:(id)arg1;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (void)_killWebContentProcess;
- (void)_killWebContentProcessAndResetState;
- (void)_lastNavigationWasAppInitiated:(id /* block */)arg1;
- (void)_launchInitialProcessIfNecessary;
- (id)_layerForFindOverlay;
- (void)_layerTreeCommitComplete;
- (unsigned long long)_layoutMode;
- (void)_loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (id)_loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4 userData:(id)arg5;
- (id)_loadRequest:(id)arg1 shouldOpenExternalURLs:(bool)arg2;
- (id)_loadRequest:(id)arg1 shouldOpenExternalURLsPolicy:(long long)arg2;
- (void)_loadServiceWorker:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_loadServiceWorker:(id)arg1 usingModules:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)_lookup:(id)arg1;
- (id)_mainFrame;
- (id)_mainFrameURL;
- (struct CGSize { double x1; double x2; })_maximumUnobscuredSizeOverride;
- (bool)_mayAutomaticallyShowVideoPictureInPicture;
- (bool)_mayContainEditableElementsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_mediaCaptureEnabled;
- (double)_mediaCaptureReportingDelayForTesting;
- (unsigned long long)_mediaCaptureState;
- (unsigned long long)_mediaMutedState;
- (double)_minimumEffectiveDeviceWidth;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverride;
- (struct CGSize { double x1; double x2; })_minimumUnobscuredSizeOverride;
- (void)_navigationGestureDidBegin;
- (void)_navigationGestureDidEnd;
- (bool)_negotiatedLegacyTLS;
- (int)_networkProcessIdentifier;
- (bool)_networkRequestsInProgress;
- (void)_nextAccessoryTab:(id)arg1;
- (void)_notifyUserScripts;
- (unsigned long long)_obscuredInsetEdgesAffectedBySafeArea;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_obscuredInsets;
- (unsigned long long)_observedRenderingProgressEvents;
- (void)_outdent:(id)arg1;
- (double)_overrideDeviceScaleFactor;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { double x1; double x2; })arg1 maximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg2;
- (void)_overrideViewportWithArguments:(id)arg1;
- (struct NakedPtr<WebKit::WebPageProxy> { struct WebPageProxy {} *x1; })_page;
- (unsigned long long)_pageCount;
- (id)_pageExtendedBackgroundColor;
- (struct OpaqueWKPage { }*)_pageForTesting;
- (double)_pageLength;
- (double)_pageScale;
- (double)_pageZoomFactor;
- (bool)_paginationBehavesLikeColumns;
- (bool)_paginationLineGridEnabled;
- (long long)_paginationMode;
- (id)_passwordView;
- (void)_pasteAndMatchStyle:(id)arg1;
- (void)_pasteAsQuotation:(id)arg1;
- (void)_pauseAllAnimationsWithCompletionHandler:(id /* block */)arg1;
- (void)_playAllAnimationsWithCompletionHandler:(id /* block */)arg1;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_preconnectToServer:(id)arg1;
- (void)_presentLockdownMode;
- (void)_presentLockdownModeAlertIfNeeded;
- (void)_previousAccessoryTab:(id)arg1;
- (Class)_printFormatterClass;
- (id)_printProvider;
- (void)_processDidExit;
- (void)_processDidResumeForTesting;
- (void)_processWillSuspendForTesting:(id /* block */)arg1;
- (void)_processWillSuspendImminentlyForTesting;
- (void)_processWillSwap;
- (void)_processWillSwapOrDidExit;
- (void)_promptForReplace:(id)arg1;
- (id)_propertiesOfLayerWithID:(unsigned long long)arg1;
- (int)_provisionalWebProcessIdentifier;
- (void)_recalculateViewportSizesWithMinimumViewportInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 maximumViewportInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 throwOnInvalidInput:(bool)arg3;
- (void)_registerForNotifications;
- (id)_reloadExpiredOnly;
- (id)_reloadWithoutContentBlockers;
- (id)_remoteInspectionNameOverride;
- (id)_remoteObjectRegistry;
- (void)_removeDataDetectedLinks:(id /* block */)arg1;
- (void)_removeLayerForFindOverlay;
- (void)_requestActivatedElementAtPosition:(struct CGPoint { double x1; double x2; })arg1 completionBlock:(id /* block */)arg2;
- (void)_requestActiveNowPlayingSessionInfo:(id /* block */)arg1;
- (void)_requestDocumentContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_requestRectForFoundTextRange:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_requestTextInputContextsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)_resetCachedScrollViewBackgroundColor;
- (unsigned long long)_resetFocusPreservationCount;
- (void)_resetInteraction;
- (void)_resetNavigationGestureStateForTesting;
- (void)_resizeWhileHidingContentWithUpdates:(id /* block */)arg1;
- (struct optional<bool> { union { BOOL x_1_1_1; bool x_1_1_2; } x1; bool x2; })_resolutionForShareSheetImmediateCompletionForTesting;
- (id)_resourceDirectoryURL;
- (id)_resourceLoadDelegate;
- (void)_restoreAndScrollToAppHighlight:(id)arg1;
- (void)_restoreAppHighlights:(id)arg1;
- (void)_restoreFromSessionStateData:(id)arg1;
- (void)_restorePageScrollPosition:(struct optional<WebCore::FloatPoint> { union { BOOL x_1_1_1; struct FloatPoint { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; bool x2; })arg1 scrollOrigin:(struct FloatPoint { float x1; float x2; })arg2 previousObscuredInset:(struct RectEdges<float> { struct array<float, 4UL> { float x_1_1_1[4]; } x1; })arg3 scale:(double)arg4;
- (void)_restorePageStateToUnobscuredCenter:(struct optional<WebCore::FloatPoint> { union { BOOL x_1_1_1; struct FloatPoint { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; bool x2; })arg1 scale:(double)arg2;
- (bool)_restoreScrollAndZoomStateForTransaction:(const void*)arg1;
- (id)_restoreSessionState:(id)arg1 andNavigate:(bool)arg2;
- (void)_resumeAllMediaPlayback;
- (void)_resumePage:(id /* block */)arg1;
- (id /* block */)_retainActiveFocusedState;
- (void)_revokeAccessToAssetServices;
- (bool)_safeAreaShouldAffectObscuredInsets;
- (id)_safeBrowsingWarning;
- (id)_sampledPageTopColor;
- (void)_saveBackForwardSnapshotForItem:(id)arg1;
- (void)_scheduleForcedVisibleContentRectUpdate;
- (void)_scheduleVisibleContentRectUpdate;
- (void)_scheduleVisibleContentRectUpdateAfterScrollInView:(id)arg1;
- (id)_scrollPerformanceData;
- (bool)_scrollPerformanceDataCollectionEnabled;
- (void)_scrollToAndRevealSelectionIfNeeded;
- (void)_scrollToContentScrollPosition:(struct FloatPoint { float x1; float x2; })arg1 scrollOrigin:(struct IntPoint { int x1; int x2; })arg2 animated:(bool)arg3;
- (bool)_scrollToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 origin:(struct FloatPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (struct CGPoint { double x1; double x2; })_scrollView:(id)arg1 adjustedOffsetForOffset:(struct CGPoint { double x1; double x2; })arg2 translation:(struct CGPoint { double x1; double x2; })arg3 startPoint:(struct CGPoint { double x1; double x2; })arg4 locationInView:(struct CGPoint { double x1; double x2; })arg5 horizontalVelocity:(inout double*)arg6 verticalVelocity:(inout double*)arg7;
- (void)_scrollView:(id)arg1 asynchronouslyHandleScrollEvent:(id)arg2 completion:(id /* block */)arg3;
- (void)_scrollViewDidInterruptDecelerating:(id)arg1;
- (bool)_scrollViewIsRubberBanding:(id)arg1;
- (bool)_scrollViewIsRubberBandingForRefreshControl;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_scrollViewSystemContentInset;
- (id)_scrollbarStateForScrollingNodeID:(unsigned long long)arg1 isVertical:(bool)arg2;
- (id)_scrollingTreeAsText;
- (bool)_scrollingUpdatesDisabledForTesting;
- (id)_searchableObject;
- (void)_selectDataListOption:(int)arg1;
- (unsigned long long)_selectionAttributes;
- (long long)_selectionGranularity;
- (bool)_selectionRectIsFullyVisibleAndNonEmpty;
- (void)_serviceWorkersEnabled:(id /* block */)arg1;
- (id)_sessionState;
- (id)_sessionStateData;
- (id)_sessionStateWithFilter:(id /* block */)arg1;
- (void)_setAddsVisitedLinks:(bool)arg1;
- (void)_setAllowsMediaDocumentInlinePlayback:(bool)arg1;
- (void)_setAllowsRemoteInspection:(bool)arg1;
- (void)_setAllowsViewportShrinkToFit:(bool)arg1;
- (void)_setAppHighlightDelegate:(id)arg1;
- (void)_setApplicationNameForUserAgent:(id)arg1;
- (void)_setAvoidsUnsafeArea:(bool)arg1;
- (void)_setBackgroundExtendsBeyondPage:(bool)arg1;
- (void)_setCanUseCredentialStorage:(bool)arg1;
- (void)_setConnectedToHardwareConsoleForTesting:(bool)arg1;
- (void)_setContinuousSpellCheckingEnabledForTesting:(bool)arg1;
- (void)_setCustomUserAgent:(id)arg1;
- (void)_setDefersLoadingForTesting:(bool)arg1;
- (void)_setDeviceHasAGXCompilerServiceForTesting;
- (void)_setDeviceOrientationUserPermissionHandlerForTesting:(id /* block */)arg1;
- (void)_setDiagnosticLoggingDelegate:(id)arg1;
- (void)_setDisplayCaptureState:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setDragInteractionPolicy:(unsigned long long)arg1;
- (void)_setEditable:(bool)arg1;
- (void)_setEphemeralUIEventAttribution:(id)arg1;
- (void)_setEphemeralUIEventAttribution:(id)arg1 forApplicationWithBundleID:(id)arg2;
- (void)_setFindDelegate:(id)arg1;
- (void)_setFindInteractionEnabled:(bool)arg1;
- (void)_setFixedLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFont:(id)arg1 sender:(id)arg2;
- (void)_setFontSize:(double)arg1 sender:(id)arg2;
- (void)_setFormDelegate:(id)arg1;
- (void)_setFullscreenDelegate:(id)arg1;
- (void)_setGapBetweenPages:(double)arg1;
- (void)_setHasCustomContentView:(bool)arg1 loadedMIMEType:(const void*)arg2;
- (void)_setHistoryDelegate:(id)arg1;
- (void)_setIconLoadingDelegate:(id)arg1;
- (void)_setIndexOfGetDisplayMediaDeviceSelectedForTesting:(id)arg1;
- (void)_setInputDelegate:(id)arg1;
- (void)_setInterfaceOrientationOverride:(long long)arg1;
- (void)_setLayoutMode:(unsigned long long)arg1;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMediaCaptureEnabled:(bool)arg1;
- (void)_setMediaCaptureReportingDelayForTesting:(double)arg1;
- (void)_setMinimumEffectiveDeviceWidth:(double)arg1;
- (void)_setMinimumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setObscuredInsetEdgesAffectedBySafeArea:(unsigned long long)arg1;
- (void)_setObscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setObservedRenderingProgressEvents:(unsigned long long)arg1;
- (void)_setOpaqueInternal:(bool)arg1;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (void)_setOverrideDeviceScaleFactor:(double)arg1;
- (void)_setPageLength:(double)arg1;
- (void)_setPageMuted:(unsigned long long)arg1;
- (void)_setPageScale:(double)arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setPageZoomFactor:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (void)_setPaginationLineGridEnabled:(bool)arg1;
- (void)_setPaginationMode:(long long)arg1;
- (void)_setPrivateClickMeasurementAppBundleIDForTesting:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_setPrivateClickMeasurementAttributionReportURLsForTesting:(id)arg1 destinationURL:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_setPrivateClickMeasurementAttributionTokenPublicKeyURLForTesting:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_setPrivateClickMeasurementAttributionTokenSignatureURLForTesting:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_setPrivateClickMeasurementOverrideTimerForTesting:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_setRemoteInspectionNameOverride:(id)arg1;
- (void)_setResourceLoadDelegate:(id)arg1;
- (void)_setScrollPerformanceDataCollectionEnabled:(bool)arg1;
- (void)_setScrollingUpdatesDisabledForTesting:(bool)arg1;
- (void)_setShareSheetCompletesImmediatelyWithResolutionForTesting:(bool)arg1;
- (void)_setSuppressSoftwareKeyboard:(bool)arg1;
- (void)_setSystemAudioCaptureState:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_setSystemCanPromptForGetDisplayMediaForTesting:(bool)arg1;
- (void)_setSystemPreviewCompletionHandlerForLoadTesting:(id /* block */)arg1;
- (void)_setTextColor:(id)arg1 sender:(id)arg2;
- (void)_setTextManipulationDelegate:(id)arg1;
- (void)_setTextZoomFactor:(double)arg1;
- (void)_setThrottleStateForTesting:(int)arg1;
- (void)_setUIEventAttribution:(id)arg1;
- (void)_setUnobscuredSafeAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setUserContentExtensionsEnabled:(bool)arg1;
- (void)_setViewLayoutSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setViewScale:(double)arg1;
- (void)_setViewportSizeForCSSViewportUnits:(struct CGSize { double x1; double x2; })arg1;
- (void)_setupPageConfiguration:(void*)arg1;
- (void)_setupScrollAndContentViews;
- (void)_share:(id)arg1;
- (bool)_shouldAvoidResizingWhenInputViewBoundsChange;
- (bool)_shouldAvoidSecurityHeuristicScoreUpdates;
- (bool)_shouldBypassGeolocationPromptForTesting;
- (bool)_shouldDeferGeometryUpdates;
- (bool)_shouldUpdateKeyboardWithInfo:(id)arg1;
- (void)_showPasswordViewWithDocumentName:(id)arg1 passwordHandler:(id /* block */)arg2;
- (void)_showSafeBrowsingWarning:(const void*)arg1 completionHandler:(void*)arg2;
- (void)_showSafeBrowsingWarningWithTitle:(id)arg1 warning:(id)arg2 details:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_showSafeBrowsingWarningWithURL:(id)arg1 title:(id)arg2 warning:(id)arg3 details:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_showSafeBrowsingWarningWithURL:(id)arg1 title:(id)arg2 warning:(id)arg3 detailsWithLinks:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_simulateDeviceOrientationChangeWithAlpha:(double)arg1 beta:(double)arg2 gamma:(double)arg3;
- (void)_simulateElementAction:(long long)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_simulateSelectionStart;
- (void)_simulateTextEntered:(id)arg1;
- (id)_singleTapGestureRecognizer;
- (id)_snapshotLayerContentsForBackForwardListItem:(id)arg1;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 intoImageOfWidth:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)_snapshotRectAfterScreenUpdates:(bool)arg1 rectInViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 intoImageOfWidth:(double)arg3 completionHandler:(id /* block */)arg4;
- (id)_stableStateOverride;
- (void)_startImageAnalysis:(id)arg1 target:(id)arg2;
- (void)_startTextManipulationsWithConfiguration:(id)arg1 completion:(id /* block */)arg2;
- (void)_stopAllMediaPlayback;
- (void)_stopMediaCapture;
- (void)_storeAppHighlight:(const void*)arg1;
- (id)_suggestedFilenameForDisplayedPDF;
- (bool)_supportsTextZoom;
- (void)_suspendAllMediaPlayback;
- (id)_suspendMediaPlaybackCounter;
- (void)_suspendPage:(id /* block */)arg1;
- (void)_switchFromStaticFontRegistryToUserFontRegistry;
- (long long)_systemAudioCaptureState;
- (void)_takeFindStringFromSelection:(id)arg1;
- (void)_takePDFSnapshotWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (struct RefPtr<WebKit::ViewSnapshot, WTF::RawPtrTraits<WebKit::ViewSnapshot>, WTF::DefaultRefDerefTraits<WebKit::ViewSnapshot>> { struct ViewSnapshot {} *x1; })_takeViewSnapshot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tapHighlightViewRect;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 currentScale:(double)arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;
- (id)_textInputTraits;
- (id)_textManipulationDelegate;
- (double)_textZoomFactor;
- (id)_themeColor;
- (void)_togglePictureInPicture;
- (void)_toggleStrikeThrough:(id)arg1;
- (void)_trackTransactionCommit:(const void*)arg1;
- (void)_translate:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_triggerSystemPreviewActionOnElement:(unsigned long long)arg1 document:(id)arg2 page:(unsigned long long)arg3;
- (bool)_tryClose;
- (id)_uiEventAttribution;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_uiTextCaretRect;
- (id)_uiViewTreeAsText;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_unobscuredSafeAreaInsets;
- (id)_unreachableURL;
- (void)_updateLiveResizeTransform;
- (void)_updateMediaPlaybackControlsManager;
- (void)_updateScrollViewBackground;
- (bool)_updateScrollViewContentInsetsIfNecessary;
- (void)_updateScrollViewForTransaction:(const void*)arg1;
- (void)_updateScrollViewIndicatorStyle;
- (void)_updateScrollViewInsetAdjustmentBehavior;
- (void)_updateVisibleContentRects;
- (void)_updateWebpagePreferences:(id)arg1;
- (id)_userAgent;
- (bool)_userContentExtensionsEnabled;
- (void)_videoControlsManagerDidChange;
- (id)_viewForFindUI;
- (double)_viewScale;
- (struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x1; })_viewStabilityState:(id)arg1;
- (struct CGSize { double x1; double x2; })_viewportSizeForCSSViewportUnits;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectInEnclosingView:(id)arg1;
- (bool)_wasPrivateRelayed;
- (int)_webProcessIdentifier;
- (bool)_webProcessIsResponsive;
- (id)_webViewPrintFormatter;
- (void)_willBeginTextInteractionInTextInputContext:(id)arg1;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (void)_willOpenAppLink;
- (void)_windowDidRotate:(id)arg1;
- (bool)_wirelessVideoPlaybackDisabled;
- (id)_wkScrollView;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(bool)arg2;
- (void)_zoomToFocusRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 selectionRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(bool)arg6 forceScroll:(bool)arg7;
- (void)_zoomToInitialScaleWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(bool)arg2;
- (void)_zoomToPoint:(struct FloatPoint { float x1; float x2; })arg1 atScale:(double)arg2 animated:(bool)arg3;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 atScale:(double)arg2 origin:(struct FloatPoint { float x1; float x2; })arg3 animated:(bool)arg4;
- (bool)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct FloatPoint { float x1; float x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (struct FloatSize { float x1; float x2; })activeViewLayoutSize:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (bool)allowsBackForwardNavigationGestures;
- (bool)allowsLinkPreview;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 isCandidate:(bool)arg3 withCompletionHandler:(id /* block */)arg4;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (id)backForwardList;
- (bool)becomeFirstResponder;
- (id)browsingContextController;
- (void)buildMenuWithBuilder:(id)arg1;
- (void)callAsyncJavaScript:(id)arg1 arguments:(id)arg2 inFrame:(id)arg3 inContentWorld:(id)arg4 completionHandler:(id /* block */)arg5;
- (long long)cameraCaptureState;
- (bool)canBecomeFirstResponder;
- (bool)canGoBack;
- (bool)canGoForward;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)captureTextFromCamera:(id)arg1;
- (id)certificateChain;
- (void)clearAllDecoratedFoundText;
- (void)closeAllMediaPresentations;
- (void)closeAllMediaPresentations:(id /* block */)arg1;
- (void)closeAllMediaPresentationsWithCompletionHandler:(id /* block */)arg1;
- (void)closeFullScreenWindowController;
- (long long)compareFoundRange:(id)arg1 toRange:(id)arg2 inDocument:(id)arg3;
- (id)configuration;
- (void)copy:(id)arg1;
- (void)createPDFWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)createWebArchiveDataWithCompletionHandler:(id /* block */)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })currentlyVisibleContentInsetsWithScale:(double)arg1 obscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (id)customUserAgent;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)decorateFoundTextRange:(id)arg1 inDocument:(id)arg2 usingStyle:(long long)arg3;
- (void)decreaseSize:(id)arg1;
- (void)didBeginTextSearchOperation;
- (void)didEndFormControlInteraction;
- (void)didEndTextSearchOperation;
- (void)didMoveToWindow;
- (void)didStartFormControlInteraction;
- (void)dismissFormAccessoryView;
- (void)encodeWithCoder:(id)arg1;
- (double)estimatedProgress;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)evaluateJavaScript:(id)arg1 inFrame:(id)arg2 inContentWorld:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)find:(id)arg1;
- (void)findAndReplace:(id)arg1;
- (id)findInteraction;
- (void)findInteraction:(id)arg1 didBeginFindSession:(id)arg2;
- (void)findInteraction:(id)arg1 didEndFindSession:(id)arg2;
- (id)findInteraction:(id)arg1 sessionForView:(id)arg2;
- (bool)findInteractionEnabled;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)findString:(id)arg1 withConfiguration:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)formInputLabel;
- (id)fullScreenWindowController;
- (long long)fullscreenState;
- (id)goBack;
- (id)goForward;
- (id)goToBackForwardListItem:(id)arg1;
- (bool)hasFullScreenWindowController;
- (bool)hasOnlySecureContent;
- (void)increaseSize:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (id)inputAccessoryView;
- (id)inputAssistantItem;
- (id)inputView;
- (id)interactionState;
- (bool)isFindInteractionEnabled;
- (bool)isInspectable;
- (bool)isLoading;
- (void)keyboardAccessoryBarNext;
- (void)keyboardAccessoryBarPrevious;
- (void)layoutSubviews;
- (id)loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4;
- (id)loadFileRequest:(id)arg1 allowingReadAccessToURL:(id)arg2;
- (id)loadFileURL:(id)arg1 allowingReadAccessToURL:(id)arg2;
- (id)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (id)loadRequest:(id)arg1;
- (id)loadSimulatedRequest:(id)arg1 response:(id)arg2 responseData:(id)arg3;
- (id)loadSimulatedRequest:(id)arg1 responseHTMLString:(id)arg2;
- (id)loadSimulatedRequest:(id)arg1 withResponse:(id)arg2 responseData:(id)arg3;
- (id)loadSimulatedRequest:(id)arg1 withResponseHTMLString:(id)arg2;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })maximumViewportInset;
- (id)mediaType;
- (long long)microphoneCaptureState;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })minimumViewportInset;
- (id)navigationDelegate;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2 inDocument:(id)arg3;
- (double)pageZoom;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (void)pauseAllMediaPlayback:(id /* block */)arg1;
- (void)pauseAllMediaPlaybackWithCompletionHandler:(id /* block */)arg1;
- (void)performTextSearchWithQueryString:(id)arg1 usingOptions:(id)arg2 resultAggregator:(id)arg3;
- (id)reload;
- (id)reloadFromOrigin;
- (void)removeFromSuperview;
- (void)replace:(id)arg1;
- (void)replaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;
- (void)requestMediaPlaybackState:(id /* block */)arg1;
- (void)requestMediaPlaybackStateWithCompletionHandler:(id /* block */)arg1;
- (bool)resignFirstResponder;
- (void)resumeAllMediaPlayback:(id /* block */)arg1;
- (void)resumeDownloadFromResumeData:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)safeAreaInsetsDidChange;
- (void)scrollRangeToVisible:(id)arg1 inDocument:(id)arg2;
- (id)scrollView;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (bool)selectFormAccessoryHasCheckedItemAtRow:(long long)arg1;
- (void)selectFormAccessoryPickerRow:(int)arg1;
- (id)selectFormPopoverTitle;
- (id)selectedTextRange;
- (struct __SecTrust { }*)serverTrust;
- (void)setAllMediaPlaybackSuspended:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setAllowsBackForwardNavigationGestures:(bool)arg1;
- (void)setAllowsLinkPreview:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCameraCaptureState:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setCustomUserAgent:(id)arg1;
- (void)setFindInteractionEnabled:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInspectable:(bool)arg1;
- (void)setInteractionState:(id)arg1;
- (void)setMediaType:(id)arg1;
- (void)setMicrophoneCaptureState:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setMinimumViewportInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 maximumViewportInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)setNavigationDelegate:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (void)setPageZoom:(double)arg1;
- (void)setSelectedColorForColorPicker:(id)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setTimePickerValueToHour:(long long)arg1 minute:(long long)arg2;
- (void)setUIDelegate:(id)arg1;
- (void)setUnderPageBackgroundColor:(id)arg1;
- (void)startDownloadUsingRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)stopLoading;
- (bool)supportsTextReplacement;
- (void)suspendAllMediaPlayback:(id /* block */)arg1;
- (void)takeSnapshotWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (id)textContentTypeForTesting;
- (id)themeColor;
- (double)timePickerValueHour;
- (double)timePickerValueMinute;
- (id)title;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)underPageBackgroundColor;
- (id)undoManager;
- (void)useSelectionForFind:(id)arg1;
- (bool)usesStandardContentView;
- (id)valueForUndefinedKey:(id)arg1;
- (id)viewForZoomingInScrollView:(id)arg1;
- (struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRectInViewCoordinates;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;

// Image: /System/Library/Frameworks/SafariServices.framework/SafariServices

- (void)_sf_applicationDidEnterBackgroundOrWillTerminate:(id)arg1;
- (id)_sf_effectiveViewToLayOut;
- (void)_sf_saveUnsubmittedGeneratedPasswordAndRemoveFormMetadata;
- (id)_sf_securityInfo;
- (void)_sf_setSecurityInfo:(id)arg1;
- (id)_sf_suggestedFilename;
- (id)webui_formMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (id)webui_lastGeneratedPasswordForCurrentBackForwardItem;
- (id)webui_presentingViewController;
- (id /* block */)webui_preventNavigationDuringAutoFillPrompt;
- (bool)webui_privateBrowsingEnabled;
- (void)webui_removeFormMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (void)webui_setFormMetadata:(id)arg1 forLastPasswordGenerationOrSubmitEventInFrame:(id)arg2;
- (void)webui_setLastGeneratedPasswordForCurrentBackForwardItem:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AdPlatformsCommonUI.framework/AdPlatformsCommonUI

- (bool)_webView:(id)arg1 focusShouldStartInputSession:(id)arg2;
- (id)registerExportedObjectInterface:(id)arg1;
- (id)remoteObjectProxyWithInterface;
- (void)setRemoteInspectionNameOverride:(id)arg1;
- (void)setupInternalProperties;
- (void)unregisterExportedObject:(id)arg1 interface:(id)arg2;
- (void)webView:(id)arg1 resourceLoad:(id)arg2 didCompleteWithError:(id)arg3 response:(id)arg4;

// Image: /System/Library/PrivateFrameworks/AuthKitUI.framework/AuthKitUI

+ (id)ak_idpWebViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 idpHandler:(id)arg2;

// Image: /System/Library/PrivateFrameworks/MobileMailUI.framework/MobileMailUI

- (id)_mcv_executeJavaScriptMethod:(id)arg1 arguments:(id)arg2;
- (id)mcv_dictionaryFromJavaScriptMethod:(id)arg1 arguments:(id)arg2;
- (id)mcv_executeJavaScriptExpression:(id)arg1;
- (id)mcv_stringFromJavaScriptMethod:(id)arg1 arguments:(id)arg2;

// Image: /System/Library/PrivateFrameworks/MobileSafariUI.framework/MobileSafariUI

- (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct UIEdgeInsets { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; } x2; struct UIEdgeInsets { double x_3_1_1; double x_3_1_2; double x_3_1_3; double x_3_1_4; } x3; struct SFScrollIndicatorInsets { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_4_1_1; struct UIEdgeInsets { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; } x_4_1_2; } x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; struct UIEdgeInsets { double x_7_1_1; double x_7_1_2; double x_7_1_3; double x_7_1_4; } x7; bool x8; double x9; })sf_displayedWebViewGeometry;
- (void)sf_setDisplayedWebViewGeometry:(struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct UIEdgeInsets { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; } x2; struct UIEdgeInsets { double x_3_1_1; double x_3_1_2; double x_3_1_3; double x_3_1_4; } x3; struct SFScrollIndicatorInsets { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_4_1_1; struct UIEdgeInsets { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; } x_4_1_2; } x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; struct UIEdgeInsets { double x_7_1_1; double x_7_1_2; double x_7_1_3; double x_7_1_4; } x7; bool x8; double x9; })arg1;

// Image: /System/Library/PrivateFrameworks/PromotedContentProxy.framework/PromotedContentProxy

- (void)updateUserAgentWithAdIdentifier:(id)arg1 andMaxRequestCount:(long long)arg2;

@end
