
@interface AVVoiceController : NSObject <AVAudioRemoteInputPlugin_PrivateTest> {
    unsigned long long  _alertStartTime;
    void * _impl;
    bool  mClientAPIClutch;
}

@property (readonly) unsigned long long alertStartTime;
@property float alertVolume;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) <Endpointer> *endpointerDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) NSDictionary *metrics;
@property <AVVoiceControllerRecordDelegate> *recordDelegate;
@property double recordEndWaitTime;
@property int recordEndpointMode;
@property double recordInterspeechWaitTime;
@property double recordStartWaitTime;
@property (readonly) Class superclass;

- (bool)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id*)arg2;
- (long long)_bringUp:(long long)arg1 withError:(id*)arg2;
- (void)_teardownWithError:(id*)arg1;
- (bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(bool)arg2 error:(id*)arg3;
- (bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(bool)arg2 recordMode:(bool)arg3 error:(id*)arg4;
- (void)alertPlaybackFinishedWithSettings:(id)arg1;
- (unsigned long long)alertStartTime;
- (float)alertVolume;
- (void)beganRecording:(unsigned long long)arg1 status:(int)arg2;
- (void)beginAudioSessionActivate:(bool)arg1;
- (void)beginRecordInterruptionWithContext:(id)arg1;
- (void)cleanSlateWithError:(id*)arg1;
- (void)configureAlertBehaviorForStream:(id)arg1 completion:(id /* block */)arg2;
- (bool)configureAlertBehaviorForStream:(id)arg1 error:(id*)arg2;
- (void)configureVoiceTriggerClientCompletionBlocks;
- (void)deactivateAudioSessionForStream:(unsigned long long)arg1 withOptions:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)deactivateAudioSessionForStream:(unsigned long long)arg1 withOptions:(unsigned long long)arg2 error:(id*)arg3;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)arg1;
- (void)dealloc;
- (void)enableMiniDucking:(bool)arg1;
- (bool)enableSmartRoutingConsiderationForStream:(unsigned long long)arg1 enable:(bool)arg2 error:(id*)arg3;
- (void)enableTriangleModeForStream:(unsigned long long)arg1 enable:(bool)arg2 withCompletion:(id /* block */)arg3;
- (void)encodeError:(int)arg1;
- (void)endAudioSessionActivate:(bool)arg1;
- (void)endRecordInterruption;
- (void)endpointDetectedAtTime:(double)arg1;
- (id)endpointerDelegate;
- (void)finalize;
- (void)finishedRecording:(unsigned long long)arg1 status:(int)arg2;
- (unsigned long long)getAlertStartTime;
- (float)getAveragePowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (long long)getCurrentSessionState;
- (long long)getCurrentSessionStateForStream:(unsigned long long)arg1;
- (long long)getCurrentStreamState:(unsigned long long)arg1;
- (void)getDeviceLatenciesForStream:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
- (void)getInputChannelInfoForStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (float)getPeakPowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (void)getPlaybackRouteForStream:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
- (id)getPlaybackRouteForStream:(unsigned long long)arg1 withError:(id*)arg2;
- (double)getRecordBufferDurationForStream:(unsigned long long)arg1;
- (id)getRecordDeviceInfoForStream:(unsigned long long)arg1;
- (long long)getRecordModeForStream:(unsigned long long)arg1;
- (id)getRecordSettingsForStream:(unsigned long long)arg1;
- (void)handleInterruption:(id)arg1;
- (void)handleMediaServerDeath:(id /* block */)arg1;
- (void)handleMediaServerReset:(id /* block */)arg1;
- (void)handlePluginDidPublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handlePluginDidUnpublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handleRouteChange:(id)arg1;
- (void)hardwareConfigChanged:(int)arg1;
- (struct shared_ptr<ControllerImpl> { struct ControllerImpl {} *x1; struct __shared_weak_count {} *x2; })impl;
- (id)initVoiceControllerForClient:(long long)arg1 withError:(id*)arg2;
- (id)initWithError:(id*)arg1;
- (void)interspeechPointDetectedAtTime:(double)arg1;
- (bool)isDuckingSupportedOnPickedRouteForStream:(unsigned long long)arg1 error:(id*)arg2;
- (bool)isMeteringEnabledForStream:(unsigned long long)arg1;
- (id)metrics;
- (id)mockPluginEndpoint;
- (void)notifyEventOccured:(unsigned long long)arg1 error:(id)arg2;
- (void)notifyStreamInvalidated:(unsigned long long)arg1;
- (void)playAlert:(int)arg1 withOverride:(long long)arg2 completion:(id /* block */)arg3;
- (bool)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (void)prepareRecordForStream:(id)arg1 completion:(id /* block */)arg2;
- (bool)prepareRecordForStream:(id)arg1 error:(id*)arg2;
- (id)recordDelegate;
- (double)recordEndWaitTime;
- (int)recordEndpointMode;
- (double)recordInterspeechWaitTime;
- (double)recordStartWaitTime;
- (void)removeSessionNotifications:(id)arg1;
- (void)removeStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)sessionCleanup;
- (void)sessionSetup;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (void)setAlertVolume:(float)arg1;
- (bool)setAnnounceCallsEnabledForStream:(unsigned long long)arg1 enable:(bool)arg2;
- (void)setContext:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)setContext:(id)arg1 error:(id*)arg2;
- (unsigned long long)setContext:(id)arg1 streamType:(long long*)arg2 error:(id*)arg3;
- (bool)setContextForStream:(id)arg1 forStream:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setDuckOthersForStream:(unsigned long long)arg1 withSettings:(id)arg2 error:(id*)arg3;
- (void)setEndpointerDelegate:(id)arg1;
- (void)setRecordDelegate:(id)arg1;
- (void)setRecordEndWaitTime:(double)arg1;
- (void)setRecordEndpointMode:(int)arg1;
- (void)setRecordInterspeechWaitTime:(double)arg1;
- (bool)setRecordModeForStream:(unsigned long long)arg1 recordMode:(long long)arg2 error:(id*)arg3;
- (void)setRecordStartWaitTime:(double)arg1;
- (void)setRecordStatusChangeBlock:(id /* block */)arg1;
- (void)setSessionNotifications:(id)arg1;
- (void)startKeepAliveQueueForStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)startRecordForStream:(id)arg1 completion:(id /* block */)arg2;
- (bool)startRecordForStream:(id)arg1 error:(id*)arg2;
- (void)startRecordWithSettings:(id)arg1 completion:(id /* block */)arg2 alertCompletion:(id /* block */)arg3 audioCallback:(id /* block */)arg4;
- (void)startpointDetected;
- (void)stopKeepAliveQueueForStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)stopRecordForStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (bool)stopRecordForStream:(unsigned long long)arg1 error:(id*)arg2;
- (void)teardownWithError:(id*)arg1;
- (bool)updateMeterForStream:(unsigned long long)arg1;

@end
