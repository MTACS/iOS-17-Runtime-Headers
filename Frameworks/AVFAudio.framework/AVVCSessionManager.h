
@interface AVVCSessionManager : NSObject {
    AVAudioSession * _audioSession;
    bool  _clientRequestsRecording;
    float  _deviceGain;
    bool  _forceGetSessionProperties;
    double  _inputLatency;
    double  _inputSafetyOffset;
    bool  _isPrimary;
    double  _outputLatency;
    double  _outputSafetyOffset;
    double  _outputVolume;
    NSString * _playbackRoute;
    long long  _reporterID;
    int  _sessionState;
    bool  mDeviceIsIOSAccessory;
    bool  mDeviceIsOlderWatch;
    bool  mIsMiniDuckingEnabled;
    bool  mIsOtherAudioPlaying;
    bool  mOutputSupportsSWVolume;
    long long  mPreviousActivationMode;
    unsigned long long  mPreviousHardwareControlFlags;
    int  mPreviousIOBufferFrameSize;
    NSString * mPreviousSessionCategory;
    unsigned long long  mPreviousSessionCategoryOptions;
    NSString * mPreviousSessionMode;
    bool  mRouteHasDoAPSupport;
    unsigned int  mSessionActivationOptions;
    struct recursive_mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  mSessionManagerLock;
    bool  mSessionNeedsRoutingControl;
    bool  mSessionNeedsVolumeControl;
    bool  mSessionOutputIsWirelessSplitter;
    bool  mShouldDisableMiniDucking;
    bool  mShouldDuckOthers;
    bool  mShouldEnableMiniDucking;
}

@property (nonatomic, retain) AVAudioSession *audioSession;
@property (nonatomic) bool clientRequestsRecording;
@property (nonatomic) float deviceGain;
@property (nonatomic) bool forceGetSessionProperties;
@property (nonatomic, readonly) double inputLatency;
@property (nonatomic, readonly) double inputSafetyOffset;
@property (nonatomic, readonly) bool isPrimary;
@property (nonatomic, readonly) double outputLatency;
@property (nonatomic, readonly) double outputSafetyOffset;
@property (nonatomic, readonly) double outputVolume;
@property (nonatomic, retain) NSString *playbackRoute;
@property (readonly) long long reporterID;
@property (nonatomic) int sessionState;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)activateAudioSessionWithPrewarm:(bool)arg1 error:(id*)arg2;
- (id)audioSession;
- (void)changeDuckOthersOption:(bool)arg1;
- (bool)clearInputPreferences:(id*)arg1;
- (bool)clientRequestsRecording;
- (id)currentRoute;
- (bool)deactivateAudioSessionWithOptions:(unsigned int)arg1 error:(id*)arg2;
- (void)dealloc;
- (float)deviceGain;
- (int)enableSmartRoutingConsideration:(bool)arg1;
- (bool)forceGetSessionProperties;
- (id)getActiveSessionDisplayIDsAsString;
- (bool)getClientRequestsRecording;
- (float)getDeviceGain;
- (bool)getForceGetSessionProperties;
- (void)getHypotheticalRouteAndUpdateStates;
- (unsigned int)getOpaqueSessionID;
- (id)getPlaybackRoute;
- (unsigned int)getSessionActivationOptions;
- (bool)getSiriInputSource:(unsigned long long*)arg1 withIdentifier:(id*)arg2;
- (id)initWithSession:(id)arg1;
- (double)inputLatency;
- (long long)inputNumberOfChannels;
- (double)inputSafetyOffset;
- (bool)isAirplayOneOfTheOutputRoutes:(id)arg1;
- (bool)isInputAvailable;
- (bool)isMiniDuckingEnabled;
- (bool)isPrimary;
- (bool)isSWVolumeSupportedOnPickedRoute;
- (bool)isSessionActive;
- (bool)isSessionInSiriCategory;
- (bool)isSessionInSiriCategoryModeAndOptions:(unsigned int)arg1;
- (bool)isSessionOutputInWirelessSplitterMode;
- (double)outputLatency;
- (double)outputSafetyOffset;
- (double)outputVolume;
- (id)playbackRoute;
- (void)removeSessionNotifications:(id)arg1;
- (long long)reporterID;
- (id)sessionCurrentInputRoutes;
- (id)sessionCurrentOutputRoutes;
- (int)sessionState;
- (bool)setActivationContext:(id)arg1 error:(id*)arg2;
- (bool)setActive:(bool)arg1 withOptions:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setAudioHardwareControlFlags:(unsigned long long)arg1 error:(id*)arg2;
- (void)setAudioSession:(id)arg1;
- (bool)setCategory:(id)arg1 mode:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (bool)setCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4 error:(id*)arg5;
- (void)setClientRequestsRecording:(bool)arg1;
- (void)setDeviceGain:(float)arg1;
- (bool)setDuckOthers:(id)arg1 mixWithOthers:(id)arg2 error:(id*)arg3;
- (bool)setDuckToLevelDB:(id)arg1 error:(id*)arg2;
- (bool)setDuckToLevelScalar:(id)arg1 error:(id*)arg2;
- (bool)setDuckingFadeOutDuration:(id)arg1 fadeInDuration:(id)arg2 error:(id*)arg3;
- (bool)setEnableBTTriangleMode:(bool)arg1 error:(id*)arg2;
- (void)setForceGetSessionProperties:(bool)arg1;
- (bool)setIAmTheAssistant:(bool)arg1 error:(id*)arg2;
- (bool)setMicrophoneAttribution:(bool)arg1 error:(id*)arg2;
- (void)setPlaybackRoute:(id)arg1;
- (bool)setPreferredSampleRate:(double)arg1 error:(id*)arg2;
- (bool)setRecordingFromRemoteInput:(bool)arg1 error:(id*)arg2;
- (int)setSessionActivationContext:(id)arg1;
- (void)setSessionActivationOptions:(unsigned int)arg1;
- (int)setSessionAudioHWControlFlagsForActivationMode:(long long)arg1 withOptions:(unsigned long long)arg2;
- (int)setSessionBufferSize:(int)arg1;
- (int)setSessionCategoryModeOptionsForActivationMode:(long long)arg1 withOptions:(unsigned long long)arg2;
- (int)setSessionSampleRateForActivationMode:(long long)arg1;
- (void)setSessionState:(int)arg1;
- (void)setSessionStateWithoutLock:(int)arg1;
- (int)setupOneTimeSessionSettingsForClient:(long long)arg1;
- (void)setupSessionNotifications:(id)arg1;
- (void)shouldEnableMiniDucking:(bool)arg1 withOptions:(unsigned long long)arg2;
- (unsigned long long)siriInputSource;
- (id)siriRemoteInputIdentifier;
- (double)speechDetectionDeviceSampleRate;

@end
